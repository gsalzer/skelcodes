{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-07-06\r\n*/\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * // importANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/math/Math.sol\r\n\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/SafeCast.sol\r\n\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\r\n * checks.\r\n *\r\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\r\n * easily result in undesired exploitation or bugs, since developers usually\r\n * assume that overflows raise errors. `SafeCast` restores this intuition by\r\n * reverting the transaction when such an operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n *\r\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\r\n * all math on `uint256` and `int256` and then downcasting.\r\n */\r\nlibrary SafeCast {\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint128 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint128).\r\n     *\r\n     * Counterpart to Solidity's `uint128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     */\r\n    function toUint128(uint256 value) internal pure returns (uint128) {\r\n        require(value < 2**128, \"SafeCast: value doesn\\'t fit in 128 bits\");\r\n        return uint128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint64 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint64).\r\n     *\r\n     * Counterpart to Solidity's `uint64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     */\r\n    function toUint64(uint256 value) internal pure returns (uint64) {\r\n        require(value < 2**64, \"SafeCast: value doesn\\'t fit in 64 bits\");\r\n        return uint64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint32 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint32).\r\n     *\r\n     * Counterpart to Solidity's `uint32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     */\r\n    function toUint32(uint256 value) internal pure returns (uint32) {\r\n        require(value < 2**32, \"SafeCast: value doesn\\'t fit in 32 bits\");\r\n        return uint32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint16 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint16).\r\n     *\r\n     * Counterpart to Solidity's `uint16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     */\r\n    function toUint16(uint256 value) internal pure returns (uint16) {\r\n        require(value < 2**16, \"SafeCast: value doesn\\'t fit in 16 bits\");\r\n        return uint16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint8 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint8).\r\n     *\r\n     * Counterpart to Solidity's `uint8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     */\r\n    function toUint8(uint256 value) internal pure returns (uint8) {\r\n        require(value < 2**8, \"SafeCast: value doesn\\'t fit in 8 bits\");\r\n        return uint8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a signed int256 into an unsigned uint256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be greater than or equal to 0.\r\n     */\r\n    function toUint256(int256 value) internal pure returns (uint256) {\r\n        require(value >= 0, \"SafeCast: value must be positive\");\r\n        return uint256(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int128 from int256, reverting on\r\n     * overflow (when the input is less than smallest int128 or\r\n     * greater than largest int128).\r\n     *\r\n     * Counterpart to Solidity's `int128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt128(int256 value) internal pure returns (int128) {\r\n        require(value >= -2**127 && value < 2**127, \"SafeCast: value doesn\\'t fit in 128 bits\");\r\n        return int128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int64 from int256, reverting on\r\n     * overflow (when the input is less than smallest int64 or\r\n     * greater than largest int64).\r\n     *\r\n     * Counterpart to Solidity's `int64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt64(int256 value) internal pure returns (int64) {\r\n        require(value >= -2**63 && value < 2**63, \"SafeCast: value doesn\\'t fit in 64 bits\");\r\n        return int64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int32 from int256, reverting on\r\n     * overflow (when the input is less than smallest int32 or\r\n     * greater than largest int32).\r\n     *\r\n     * Counterpart to Solidity's `int32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt32(int256 value) internal pure returns (int32) {\r\n        require(value >= -2**31 && value < 2**31, \"SafeCast: value doesn\\'t fit in 32 bits\");\r\n        return int32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int16 from int256, reverting on\r\n     * overflow (when the input is less than smallest int16 or\r\n     * greater than largest int16).\r\n     *\r\n     * Counterpart to Solidity's `int16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt16(int256 value) internal pure returns (int16) {\r\n        require(value >= -2**15 && value < 2**15, \"SafeCast: value doesn\\'t fit in 16 bits\");\r\n        return int16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int8 from int256, reverting on\r\n     * overflow (when the input is less than smallest int8 or\r\n     * greater than largest int8).\r\n     *\r\n     * Counterpart to Solidity's `int8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt8(int256 value) internal pure returns (int8) {\r\n        require(value >= -2**7 && value < 2**7, \"SafeCast: value doesn\\'t fit in 8 bits\");\r\n        return int8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an unsigned uint256 into a signed int256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be less than or equal to maxInt256.\r\n     */\r\n    function toInt256(uint256 value) internal pure returns (int256) {\r\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\r\n        return int256(value);\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/lib/AddressArrayUtils.sol\r\n\r\n/*\r\n    Copyright 2021 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n/**\r\n * @title AddressArrayUtils\r\n * @author Cook Finance\r\n *\r\n * Utility functions to handle Address Arrays\r\n */\r\nlibrary AddressArrayUtils {\r\n\r\n    /**\r\n     * Finds the index of the first occurrence of the given element.\r\n     * @param A The input array to search\r\n     * @param a The value to find\r\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\r\n     */\r\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\r\n        uint256 length = A.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            if (A[i] == a) {\r\n                return (i, true);\r\n            }\r\n        }\r\n        return (uint256(-1), false);\r\n    }\r\n\r\n    /**\r\n    * Returns true if the value is present in the list. Uses indexOf internally.\r\n    * @param A The input array to search\r\n    * @param a The value to find\r\n    * @return Returns isIn for the first occurrence starting from index 0\r\n    */\r\n    function contains(address[] memory A, address a) internal pure returns (bool) {\r\n        (, bool isIn) = indexOf(A, a);\r\n        return isIn;\r\n    }\r\n\r\n    /**\r\n    * Returns true if there are 2 elements that are the same in an array\r\n    * @param A The input array to search\r\n    * @return Returns boolean for the first occurrence of a duplicate\r\n    */\r\n    function hasDuplicate(address[] memory A) internal pure returns(bool) {\r\n        require(A.length > 0, \"A is empty\");\r\n\r\n        for (uint256 i = 0; i < A.length - 1; i++) {\r\n            address current = A[i];\r\n            for (uint256 j = i + 1; j < A.length; j++) {\r\n                if (current == A[j]) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param A The input array to search\r\n     * @param a The address to remove     \r\n     * @return Returns the array with the object removed.\r\n     */\r\n    function remove(address[] memory A, address a)\r\n        internal\r\n        pure\r\n        returns (address[] memory)\r\n    {\r\n        (uint256 index, bool isIn) = indexOf(A, a);\r\n        if (!isIn) {\r\n            revert(\"Address not in array.\");\r\n        } else {\r\n            (address[] memory _A,) = pop(A, index);\r\n            return _A;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param A The input array to search\r\n     * @param a The address to remove\r\n     */\r\n    function removeStorage(address[] storage A, address a)\r\n        internal\r\n    {\r\n        (uint256 index, bool isIn) = indexOf(A, a);\r\n        if (!isIn) {\r\n            revert(\"Address not in array.\");\r\n        } else {\r\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\r\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\r\n            A.pop();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Removes specified index from array\r\n    * @param A The input array to search\r\n    * @param index The index to remove\r\n    * @return Returns the new array and the removed entry\r\n    */\r\n    function pop(address[] memory A, uint256 index)\r\n        internal\r\n        pure\r\n        returns (address[] memory, address)\r\n    {\r\n        uint256 length = A.length;\r\n        require(index < A.length, \"Index must be < A length\");\r\n        address[] memory newAddresses = new address[](length - 1);\r\n        for (uint256 i = 0; i < index; i++) {\r\n            newAddresses[i] = A[i];\r\n        }\r\n        for (uint256 j = index + 1; j < length; j++) {\r\n            newAddresses[j - 1] = A[j];\r\n        }\r\n        return (newAddresses, A[index]);\r\n    }\r\n\r\n    /**\r\n     * Returns the combination of the two arrays\r\n     * @param A The first array\r\n     * @param B The second array\r\n     * @return Returns A extended by B\r\n     */\r\n    function extend(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\r\n        uint256 aLength = A.length;\r\n        uint256 bLength = B.length;\r\n        address[] memory newAddresses = new address[](aLength + bLength);\r\n        for (uint256 i = 0; i < aLength; i++) {\r\n            newAddresses[i] = A[i];\r\n        }\r\n        for (uint256 j = 0; j < bLength; j++) {\r\n            newAddresses[aLength + j] = B[j];\r\n        }\r\n        return newAddresses;\r\n    }\r\n\r\n    /**\r\n     * Validate that address and uint array lengths match. Validate address array is not empty\r\n     * and contains no duplicate elements.\r\n     *\r\n     * @param A         Array of addresses\r\n     * @param B         Array of uint\r\n     */\r\n    function validatePairsWithArray(address[] memory A, uint[] memory B) internal pure {\r\n        require(A.length == B.length, \"Array length mismatch\");\r\n        _validateLengthAndUniqueness(A);\r\n    }\r\n\r\n    /**\r\n     * Validate that address and bool array lengths match. Validate address array is not empty\r\n     * and contains no duplicate elements.\r\n     *\r\n     * @param A         Array of addresses\r\n     * @param B         Array of bool\r\n     */\r\n    function validatePairsWithArray(address[] memory A, bool[] memory B) internal pure {\r\n        require(A.length == B.length, \"Array length mismatch\");\r\n        _validateLengthAndUniqueness(A);\r\n    }\r\n\r\n    /**\r\n     * Validate that address and string array lengths match. Validate address array is not empty\r\n     * and contains no duplicate elements.\r\n     *\r\n     * @param A         Array of addresses\r\n     * @param B         Array of strings\r\n     */\r\n    function validatePairsWithArray(address[] memory A, string[] memory B) internal pure {\r\n        require(A.length == B.length, \"Array length mismatch\");\r\n        _validateLengthAndUniqueness(A);\r\n    }\r\n\r\n    /**\r\n     * Validate that address array lengths match, and calling address array are not empty\r\n     * and contain no duplicate elements.\r\n     *\r\n     * @param A         Array of addresses\r\n     * @param B         Array of addresses\r\n     */\r\n    function validatePairsWithArray(address[] memory A, address[] memory B) internal pure {\r\n        require(A.length == B.length, \"Array length mismatch\");\r\n        _validateLengthAndUniqueness(A);\r\n    }\r\n\r\n    /**\r\n     * Validate that address and bytes array lengths match. Validate address array is not empty\r\n     * and contains no duplicate elements.\r\n     *\r\n     * @param A         Array of addresses\r\n     * @param B         Array of bytes\r\n     */\r\n    function validatePairsWithArray(address[] memory A, bytes[] memory B) internal pure {\r\n        require(A.length == B.length, \"Array length mismatch\");\r\n        _validateLengthAndUniqueness(A);\r\n    }\r\n\r\n    /**\r\n     * Validate address array is not empty and contains no duplicate elements.\r\n     *\r\n     * @param A          Array of addresses\r\n     */\r\n    function _validateLengthAndUniqueness(address[] memory A) internal pure {\r\n        require(A.length > 0, \"Array length must be > 0\");\r\n        require(!hasDuplicate(A), \"Cannot duplicate addresses\");\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/interfaces/IController.sol\r\n\r\n/*\r\n    Copyright 2021 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n// pragma solidity 0.6.10;\r\n\r\ninterface IController {\r\n    function addCK(address _ckToken) external;\r\n    function feeRecipient() external view returns(address);\r\n    function getModuleFee(address _module, uint256 _feeType) external view returns(uint256);\r\n    function isModule(address _module) external view returns(bool);\r\n    function isCK(address _ckToken) external view returns(bool);\r\n    function isSystemContract(address _contractAddress) external view returns (bool);\r\n    function resourceId(uint256 _id) external view returns(address);\r\n}\r\n\r\n// Dependency file: contracts/interfaces/IIndexExchangeAdapter.sol\r\n\r\n/*\r\n    Copyright 2021 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n// pragma solidity 0.6.10;\r\n\r\ninterface IIndexExchangeAdapter {\r\n    function getSpender() external view returns(address);\r\n\r\n    /**\r\n     * Returns calldata for executing trade on given adapter's exchange when using the GeneralIndexModule.\r\n     *\r\n     * @param  _sourceToken              Address of source token to be sold\r\n     * @param  _destinationToken         Address of destination token to buy\r\n     * @param  _destinationAddress       Address that assets should be transferred to\r\n     * @param  _isSendTokenFixed         Boolean indicating if the send quantity is fixed, used to determine correct trade interface\r\n     * @param  _sourceQuantity           Fixed/Max amount of source token to sell\r\n     * @param  _destinationQuantity      Min/Fixed amount of destination tokens to receive\r\n     * @param  _data                     Arbitrary bytes that can be used to store exchange specific parameters or logic\r\n     *\r\n     * @return address                   Target contract address\r\n     * @return uint256                   Call value\r\n     * @return bytes                     Trade calldata\r\n     */\r\n    function getTradeCalldata(\r\n        address _sourceToken,\r\n        address _destinationToken,\r\n        address _destinationAddress,\r\n        bool _isSendTokenFixed,\r\n        uint256 _sourceQuantity,\r\n        uint256 _destinationQuantity,\r\n        bytes memory _data\r\n    )\r\n        external\r\n        view\r\n        returns (address, uint256, bytes memory);\r\n}\r\n\r\n// Dependency file: contracts/interfaces/ICKToken.sol\r\n\r\n/*\r\n    Copyright 2021 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n// pragma solidity 0.6.10;\r\npragma experimental \"ABIEncoderV2\";\r\n\r\n// import { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/**\r\n * @title ICKToken\r\n * @author Cook Finance\r\n *\r\n * Interface for operating with CKTokens.\r\n */\r\ninterface ICKToken is IERC20 {\r\n\r\n    /* ============ Enums ============ */\r\n\r\n    enum ModuleState {\r\n        NONE,\r\n        PENDING,\r\n        INITIALIZED\r\n    }\r\n\r\n    /* ============ Structs ============ */\r\n    /**\r\n     * The base definition of a CKToken Position\r\n     *\r\n     * @param component           Address of token in the Position\r\n     * @param module              If not in default state, the address of associated module\r\n     * @param unit                Each unit is the # of components per 10^18 of a CKToken\r\n     * @param positionState       Position ENUM. Default is 0; External is 1\r\n     * @param data                Arbitrary data\r\n     */\r\n    struct Position {\r\n        address component;\r\n        address module;\r\n        int256 unit;\r\n        uint8 positionState;\r\n        bytes data;\r\n    }\r\n\r\n    /**\r\n     * A struct that stores a component's cash position details and external positions\r\n     * This data structure allows O(1) access to a component's cash position units and \r\n     * virtual units.\r\n     *\r\n     * @param virtualUnit               Virtual value of a component's DEFAULT position. Stored as virtual for efficiency\r\n     *                                  updating all units at once via the position multiplier. Virtual units are achieved\r\n     *                                  by dividing a \"real\" value by the \"positionMultiplier\"\r\n     * @param componentIndex            \r\n     * @param externalPositionModules   List of external modules attached to each external position. Each module\r\n     *                                  maps to an external position\r\n     * @param externalPositions         Mapping of module => ExternalPosition struct for a given component\r\n     */\r\n    struct ComponentPosition {\r\n      int256 virtualUnit;\r\n      address[] externalPositionModules;\r\n      mapping(address => ExternalPosition) externalPositions;\r\n    }\r\n\r\n    /**\r\n     * A struct that stores a component's external position details including virtual unit and any\r\n     * auxiliary data.\r\n     *\r\n     * @param virtualUnit       Virtual value of a component's EXTERNAL position.\r\n     * @param data              Arbitrary data\r\n     */\r\n    struct ExternalPosition {\r\n      int256 virtualUnit;\r\n      bytes data;\r\n    }\r\n\r\n\r\n    /* ============ Functions ============ */\r\n    \r\n    function addComponent(address _component) external;\r\n    function removeComponent(address _component) external;\r\n    function editDefaultPositionUnit(address _component, int256 _realUnit) external;\r\n    function addExternalPositionModule(address _component, address _positionModule) external;\r\n    function removeExternalPositionModule(address _component, address _positionModule) external;\r\n    function editExternalPositionUnit(address _component, address _positionModule, int256 _realUnit) external;\r\n    function editExternalPositionData(address _component, address _positionModule, bytes calldata _data) external;\r\n\r\n    function invoke(address _target, uint256 _value, bytes calldata _data) external returns(bytes memory);\r\n\r\n    function editPositionMultiplier(int256 _newMultiplier) external;\r\n\r\n    function mint(address _account, uint256 _quantity) external;\r\n    function burn(address _account, uint256 _quantity) external;\r\n\r\n    function lock() external;\r\n    function unlock() external;\r\n\r\n    function addModule(address _module) external;\r\n    function removeModule(address _module) external;\r\n    function initializeModule() external;\r\n\r\n    function setManager(address _manager) external;\r\n\r\n    function manager() external view returns (address);\r\n    function moduleStates(address _module) external view returns (ModuleState);\r\n    function getModules() external view returns (address[] memory);\r\n    \r\n    function getDefaultPositionRealUnit(address _component) external view returns(int256);\r\n    function getExternalPositionRealUnit(address _component, address _positionModule) external view returns(int256);\r\n    function getComponents() external view returns(address[] memory);\r\n    function getExternalPositionModules(address _component) external view returns(address[] memory);\r\n    function getExternalPositionData(address _component, address _positionModule) external view returns(bytes memory);\r\n    function isExternalPositionModule(address _component, address _module) external view returns(bool);\r\n    function isComponent(address _component) external view returns(bool);\r\n    \r\n    function positionMultiplier() external view returns (int256);\r\n    function getPositions() external view returns (Position[] memory);\r\n    function getTotalComponentRealUnits(address _component) external view returns(int256);\r\n\r\n    function isInitializedModule(address _module) external view returns(bool);\r\n    function isPendingModule(address _module) external view returns(bool);\r\n    function isLocked() external view returns (bool);\r\n}\r\n\r\n// Dependency file: contracts/protocol/lib/Invoke.sol\r\n\r\n/*\r\n    Copyright 2021 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\n// import { ICKToken } from \"contracts/interfaces/ICKToken.sol\";\r\n\r\n\r\n/**\r\n * @title Invoke\r\n * @author Cook Finance\r\n *\r\n * A collection of common utility functions for interacting with the CKToken's invoke function\r\n */\r\nlibrary Invoke {\r\n    using SafeMath for uint256;\r\n\r\n    /* ============ Internal ============ */\r\n\r\n    /**\r\n     * Instructs the CKToken to set approvals of the ERC20 token to a spender.\r\n     *\r\n     * @param _ckToken        CKToken instance to invoke\r\n     * @param _token           ERC20 token to approve\r\n     * @param _spender         The account allowed to spend the CKToken's balance\r\n     * @param _quantity        The quantity of allowance to allow\r\n     */\r\n    function invokeApprove(\r\n        ICKToken _ckToken,\r\n        address _token,\r\n        address _spender,\r\n        uint256 _quantity\r\n    )\r\n        internal\r\n    {\r\n        bytes memory callData = abi.encodeWithSignature(\"approve(address,uint256)\", _spender, _quantity);\r\n        _ckToken.invoke(_token, 0, callData);\r\n    }\r\n\r\n    /**\r\n     * Instructs the CKToken to transfer the ERC20 token to a recipient.\r\n     *\r\n     * @param _ckToken        CKToken instance to invoke\r\n     * @param _token           ERC20 token to transfer\r\n     * @param _to              The recipient account\r\n     * @param _quantity        The quantity to transfer\r\n     */\r\n    function invokeTransfer(\r\n        ICKToken _ckToken,\r\n        address _token,\r\n        address _to,\r\n        uint256 _quantity\r\n    )\r\n        internal\r\n    {\r\n        if (_quantity > 0) {\r\n            bytes memory callData = abi.encodeWithSignature(\"transfer(address,uint256)\", _to, _quantity);\r\n            _ckToken.invoke(_token, 0, callData);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Instructs the CKToken to transfer the ERC20 token to a recipient.\r\n     * The new CKToken balance must equal the existing balance less the quantity transferred\r\n     *\r\n     * @param _ckToken        CKToken instance to invoke\r\n     * @param _token           ERC20 token to transfer\r\n     * @param _to              The recipient account\r\n     * @param _quantity        The quantity to transfer\r\n     */\r\n    function strictInvokeTransfer(\r\n        ICKToken _ckToken,\r\n        address _token,\r\n        address _to,\r\n        uint256 _quantity\r\n    )\r\n        internal\r\n    {\r\n        if (_quantity > 0) {\r\n            // Retrieve current balance of token for the CKToken\r\n            uint256 existingBalance = IERC20(_token).balanceOf(address(_ckToken));\r\n\r\n            Invoke.invokeTransfer(_ckToken, _token, _to, _quantity);\r\n\r\n            // Get new balance of transferred token for CKToken\r\n            uint256 newBalance = IERC20(_token).balanceOf(address(_ckToken));\r\n\r\n            // Verify only the transfer quantity is subtracted\r\n            require(\r\n                newBalance == existingBalance.sub(_quantity),\r\n                \"Invalid post transfer balance\"\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Instructs the CKToken to unwrap the passed quantity of WETH\r\n     *\r\n     * @param _ckToken        CKToken instance to invoke\r\n     * @param _weth            WETH address\r\n     * @param _quantity        The quantity to unwrap\r\n     */\r\n    function invokeUnwrapWETH(ICKToken _ckToken, address _weth, uint256 _quantity) internal {\r\n        bytes memory callData = abi.encodeWithSignature(\"withdraw(uint256)\", _quantity);\r\n        _ckToken.invoke(_weth, 0, callData);\r\n    }\r\n\r\n    /**\r\n     * Instructs the CKToken to wrap the passed quantity of ETH\r\n     *\r\n     * @param _ckToken        CKToken instance to invoke\r\n     * @param _weth            WETH address\r\n     * @param _quantity        The quantity to unwrap\r\n     */\r\n    function invokeWrapWETH(ICKToken _ckToken, address _weth, uint256 _quantity) internal {\r\n        bytes memory callData = abi.encodeWithSignature(\"deposit()\");\r\n        _ckToken.invoke(_weth, _quantity, callData);\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/interfaces/external/IWETH.sol\r\n\r\n/*\r\n    Copyright 2018 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/**\r\n * @title IWETH\r\n * @author Cook Finance\r\n *\r\n * Interface for Wrapped Ether. This interface allows for interaction for wrapped ether's deposit and withdrawal\r\n * functionality.\r\n */\r\ninterface IWETH is IERC20{\r\n    function deposit()\r\n        external\r\n        payable;\r\n\r\n    function withdraw(\r\n        uint256 wad\r\n    )\r\n        external;\r\n}\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// pragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [// importANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * // importANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/lib/ExplicitERC20.sol\r\n\r\n/*\r\n    Copyright 2021 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\n// import { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\n/**\r\n * @title ExplicitERC20\r\n * @author Cook Finance\r\n *\r\n * Utility functions for ERC20 transfers that require the explicit amount to be transferred.\r\n */\r\nlibrary ExplicitERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * When given allowance, transfers a token from the \"_from\" to the \"_to\" of quantity \"_quantity\".\r\n     * Ensures that the recipient has received the correct quantity (ie no fees taken on transfer)\r\n     *\r\n     * @param _token           ERC20 token to approve\r\n     * @param _from            The account to transfer tokens from\r\n     * @param _to              The account to transfer tokens to\r\n     * @param _quantity        The quantity to transfer\r\n     */\r\n    function transferFrom(\r\n        IERC20 _token,\r\n        address _from,\r\n        address _to,\r\n        uint256 _quantity\r\n    )\r\n        internal\r\n    {\r\n        // Call specified ERC20 contract to transfer tokens (via proxy).\r\n        if (_quantity > 0) {\r\n            uint256 existingBalance = _token.balanceOf(_to);\r\n\r\n            SafeERC20.safeTransferFrom(\r\n                _token,\r\n                _from,\r\n                _to,\r\n                _quantity\r\n            );\r\n\r\n            uint256 newBalance = _token.balanceOf(_to);\r\n\r\n            // Verify transfer quantity is reflected in balance\r\n            require(\r\n                newBalance == existingBalance.add(_quantity),\r\n                \"Invalid post transfer balance\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IModule.sol\r\n\r\n/*\r\n    Copyright 2021 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n// pragma solidity 0.6.10;\r\n\r\n\r\n/**\r\n * @title IModule\r\n * @author Cook Finance\r\n *\r\n * Interface for interacting with Modules.\r\n */\r\ninterface IModule {\r\n    /**\r\n     * Called by a CKToken to notify that this module was removed from the CK token. Any logic can be included\r\n     * in case checks need to be made or state needs to be cleared.\r\n     */\r\n    function removeModule() external;\r\n}\r\n\r\n// Dependency file: @openzeppelin/contracts/math/SignedSafeMath.sol\r\n\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @title SignedSafeMath\r\n * @dev Signed math operations with safety checks that revert on error.\r\n */\r\nlibrary SignedSafeMath {\r\n    int256 constant private _INT256_MIN = -2**255;\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        require(!(a == -1 && b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\r\n\r\n        int256 c = a * b;\r\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two signed integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != 0, \"SignedSafeMath: division by zero\");\r\n        require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\r\n\r\n        int256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/lib/PreciseUnitMath.sol\r\n\r\n/*\r\n    Copyright 2021 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import { SignedSafeMath } from \"@openzeppelin/contracts/math/SignedSafeMath.sol\";\r\n\r\n\r\n/**\r\n * @title PreciseUnitMath\r\n * @author Cook Finance\r\n *\r\n * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\r\n * dYdX's BaseMath library.\r\n *\r\n * CHANGELOG:\r\n * - 9/21/20: Added safePower function\r\n */\r\nlibrary PreciseUnitMath {\r\n    using SafeMath for uint256;\r\n    using SignedSafeMath for int256;\r\n\r\n    // The number One in precise units.\r\n    uint256 constant internal PRECISE_UNIT = 10 ** 18;\r\n    int256 constant internal PRECISE_UNIT_INT = 10 ** 18;\r\n\r\n    // Max unsigned integer value\r\n    uint256 constant internal MAX_UINT_256 = type(uint256).max;\r\n    // Max and min signed integer value\r\n    int256 constant internal MAX_INT_256 = type(int256).max;\r\n    int256 constant internal MIN_INT_256 = type(int256).min;\r\n\r\n    /**\r\n     * @dev Getter function since constants can't be read directly from libraries.\r\n     */\r\n    function preciseUnit() internal pure returns (uint256) {\r\n        return PRECISE_UNIT;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter function since constants can't be read directly from libraries.\r\n     */\r\n    function preciseUnitInt() internal pure returns (int256) {\r\n        return PRECISE_UNIT_INT;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter function since constants can't be read directly from libraries.\r\n     */\r\n    function maxUint256() internal pure returns (uint256) {\r\n        return MAX_UINT_256;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter function since constants can't be read directly from libraries.\r\n     */\r\n    function maxInt256() internal pure returns (int256) {\r\n        return MAX_INT_256;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter function since constants can't be read directly from libraries.\r\n     */\r\n    function minInt256() internal pure returns (int256) {\r\n        return MIN_INT_256;\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\r\n     * of a number with 18 decimals precision.\r\n     */\r\n    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a.mul(b).div(PRECISE_UNIT);\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\r\n     * significand of a number with 18 decimals precision.\r\n     */\r\n    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\r\n        return a.mul(b).div(PRECISE_UNIT_INT);\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\r\n     * of a number with 18 decimals precision.\r\n     */\r\n    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0 || b == 0) {\r\n            return 0;\r\n        }\r\n        return a.mul(b).sub(1).div(PRECISE_UNIT).add(1);\r\n    }\r\n\r\n    /**\r\n     * @dev Divides value a by value b (result is rounded down).\r\n     */\r\n    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a.mul(PRECISE_UNIT).div(b);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Divides value a by value b (result is rounded towards 0).\r\n     */\r\n    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\r\n        return a.mul(PRECISE_UNIT_INT).div(b);\r\n    }\r\n\r\n    /**\r\n     * @dev Divides value a by value b (result is rounded up or away from 0).\r\n     */\r\n    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"Cant divide by 0\");\r\n\r\n        return a > 0 ? a.mul(PRECISE_UNIT).sub(1).div(b).add(1) : 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\r\n     */\r\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != 0, \"Cant divide by 0\");\r\n        require(a != MIN_INT_256 || b != -1, \"Invalid input\");\r\n\r\n        int256 result = a.div(b);\r\n        if (a ^ b < 0 && a % b != 0) {\r\n            result -= 1;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies value a by value b where rounding is towards the lesser number.\r\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\r\n     */\r\n    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\r\n        return divDown(a.mul(b), PRECISE_UNIT_INT);\r\n    }\r\n\r\n    /**\r\n     * @dev Divides value a by value b where rounding is towards the lesser number.\r\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\r\n     */\r\n    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\r\n        return divDown(a.mul(PRECISE_UNIT_INT), b);\r\n    }\r\n\r\n    /**\r\n    * @dev Performs the power on a specified value, reverts on overflow.\r\n    */\r\n    function safePower(\r\n        uint256 a,\r\n        uint256 pow\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(a > 0, \"Value must be positive\");\r\n\r\n        uint256 result = 1;\r\n        for (uint256 i = 0; i < pow; i++){\r\n            uint256 previousResult = result;\r\n\r\n            // Using safemath multiplication prevents overflows\r\n            result = previousResult.mul(a);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if a =~ b within range, false otherwise.\r\n     */\r\n    function approximatelyEquals(uint256 a, uint256 b, uint256 range) internal pure returns (bool) {\r\n        return a <= b.add(range) && a >= b.sub(range);\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/protocol/lib/Position.sol\r\n\r\n/*\r\n    Copyright 2021 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import { SafeCast } from \"@openzeppelin/contracts/utils/SafeCast.sol\";\r\n// import { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import { SignedSafeMath } from \"@openzeppelin/contracts/math/SignedSafeMath.sol\";\r\n\r\n// import { ICKToken } from \"contracts/interfaces/ICKToken.sol\";\r\n// import { PreciseUnitMath } from \"contracts/lib/PreciseUnitMath.sol\";\r\n\r\n\r\n/**\r\n * @title Position\r\n * @author Cook Finance\r\n *\r\n * Collection of helper functions for handling and updating CKToken Positions\r\n *\r\n * CHANGELOG:\r\n *  - Updated editExternalPosition to work when no external position is associated with module\r\n */\r\nlibrary Position {\r\n    using SafeCast for uint256;\r\n    using SafeMath for uint256;\r\n    using SafeCast for int256;\r\n    using SignedSafeMath for int256;\r\n    using PreciseUnitMath for uint256;\r\n\r\n    /* ============ Helper ============ */\r\n\r\n    /**\r\n     * Returns whether the CKToken has a default position for a given component (if the real unit is > 0)\r\n     */\r\n    function hasDefaultPosition(ICKToken _ckToken, address _component) internal view returns(bool) {\r\n        return _ckToken.getDefaultPositionRealUnit(_component) > 0;\r\n    }\r\n\r\n    /**\r\n     * Returns whether the CKToken has an external position for a given component (if # of position modules is > 0)\r\n     */\r\n    function hasExternalPosition(ICKToken _ckToken, address _component) internal view returns(bool) {\r\n        return _ckToken.getExternalPositionModules(_component).length > 0;\r\n    }\r\n    \r\n    /**\r\n     * Returns whether the CKToken component default position real unit is greater than or equal to units passed in.\r\n     */\r\n    function hasSufficientDefaultUnits(ICKToken _ckToken, address _component, uint256 _unit) internal view returns(bool) {\r\n        return _ckToken.getDefaultPositionRealUnit(_component) >= _unit.toInt256();\r\n    }\r\n\r\n    /**\r\n     * Returns whether the CKToken component external position is greater than or equal to the real units passed in.\r\n     */\r\n    function hasSufficientExternalUnits(\r\n        ICKToken _ckToken,\r\n        address _component,\r\n        address _positionModule,\r\n        uint256 _unit\r\n    )\r\n        internal\r\n        view\r\n        returns(bool)\r\n    {\r\n       return _ckToken.getExternalPositionRealUnit(_component, _positionModule) >= _unit.toInt256();    \r\n    }\r\n\r\n    /**\r\n     * If the position does not exist, create a new Position and add to the CKToken. If it already exists,\r\n     * then set the position units. If the new units is 0, remove the position. Handles adding/removing of \r\n     * components where needed (in light of potential external positions).\r\n     *\r\n     * @param _ckToken           Address of CKToken being modified\r\n     * @param _component          Address of the component\r\n     * @param _newUnit            Quantity of Position units - must be >= 0\r\n     */\r\n    function editDefaultPosition(ICKToken _ckToken, address _component, uint256 _newUnit) internal {\r\n        bool isPositionFound = hasDefaultPosition(_ckToken, _component);\r\n        if (!isPositionFound && _newUnit > 0) {\r\n            // If there is no Default Position and no External Modules, then component does not exist\r\n            if (!hasExternalPosition(_ckToken, _component)) {\r\n                _ckToken.addComponent(_component);\r\n            }\r\n        } else if (isPositionFound && _newUnit == 0) {\r\n            // If there is a Default Position and no external positions, remove the component\r\n            if (!hasExternalPosition(_ckToken, _component)) {\r\n                _ckToken.removeComponent(_component);\r\n            }\r\n        }\r\n\r\n        _ckToken.editDefaultPositionUnit(_component, _newUnit.toInt256());\r\n    }\r\n\r\n    /**\r\n     * Update an external position and remove and external positions or components if necessary. The logic flows as follows:\r\n     * 1) If component is not already added then add component and external position. \r\n     * 2) If component is added but no existing external position using the passed module exists then add the external position.\r\n     * 3) If the existing position is being added to then just update the unit and data\r\n     * 4) If the position is being closed and no other external positions or default positions are associated with the component\r\n     *    then untrack the component and remove external position.\r\n     * 5) If the position is being closed and other existing positions still exist for the component then just remove the\r\n     *    external position.\r\n     *\r\n     * @param _ckToken         CKToken being updated\r\n     * @param _component        Component position being updated\r\n     * @param _module           Module external position is associated with\r\n     * @param _newUnit          Position units of new external position\r\n     * @param _data             Arbitrary data associated with the position\r\n     */\r\n    function editExternalPosition(\r\n        ICKToken _ckToken,\r\n        address _component,\r\n        address _module,\r\n        int256 _newUnit,\r\n        bytes memory _data\r\n    )\r\n        internal\r\n    {\r\n        if (_newUnit != 0) {\r\n            if (!_ckToken.isComponent(_component)) {\r\n                _ckToken.addComponent(_component);\r\n                _ckToken.addExternalPositionModule(_component, _module);\r\n            } else if (!_ckToken.isExternalPositionModule(_component, _module)) {\r\n                _ckToken.addExternalPositionModule(_component, _module);\r\n            }\r\n            _ckToken.editExternalPositionUnit(_component, _module, _newUnit);\r\n            _ckToken.editExternalPositionData(_component, _module, _data);\r\n        } else {\r\n            require(_data.length == 0, \"Passed data must be null\");\r\n            // If no default or external position remaining then remove component from components array\r\n            if (_ckToken.getExternalPositionRealUnit(_component, _module) != 0) {\r\n                address[] memory positionModules = _ckToken.getExternalPositionModules(_component);\r\n                if (_ckToken.getDefaultPositionRealUnit(_component) == 0 && positionModules.length == 1) {\r\n                    require(positionModules[0] == _module, \"External positions must be 0 to remove component\");\r\n                    _ckToken.removeComponent(_component);\r\n                }\r\n                _ckToken.removeExternalPositionModule(_component, _module);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get total notional amount of Default position\r\n     *\r\n     * @param _ckTokenSupply     Supply of CKToken in precise units (10^18)\r\n     * @param _positionUnit       Quantity of Position units\r\n     *\r\n     * @return                    Total notional amount of units\r\n     */\r\n    function getDefaultTotalNotional(uint256 _ckTokenSupply, uint256 _positionUnit) internal pure returns (uint256) {\r\n        return _ckTokenSupply.preciseMul(_positionUnit);\r\n    }\r\n\r\n    /**\r\n     * Get position unit from total notional amount\r\n     *\r\n     * @param _ckTokenSupply     Supply of CKToken in precise units (10^18)\r\n     * @param _totalNotional      Total notional amount of component prior to\r\n     * @return                    Default position unit\r\n     */\r\n    function getDefaultPositionUnit(uint256 _ckTokenSupply, uint256 _totalNotional) internal pure returns (uint256) {\r\n        return _totalNotional.preciseDiv(_ckTokenSupply);\r\n    }\r\n\r\n    /**\r\n     * Get the total tracked balance - total supply * position unit\r\n     *\r\n     * @param _ckToken           Address of the CKToken\r\n     * @param _component          Address of the component\r\n     * @return                    Notional tracked balance\r\n     */\r\n    function getDefaultTrackedBalance(ICKToken _ckToken, address _component) internal view returns(uint256) {\r\n        int256 positionUnit = _ckToken.getDefaultPositionRealUnit(_component); \r\n        return _ckToken.totalSupply().preciseMul(positionUnit.toUint256());\r\n    }\r\n\r\n    /**\r\n     * Calculates the new default position unit and performs the edit with the new unit\r\n     *\r\n     * @param _ckToken                 Address of the CKToken\r\n     * @param _component                Address of the component\r\n     * @param _ckTotalSupply           Current CKToken supply\r\n     * @param _componentPreviousBalance Pre-action component balance\r\n     * @return                          Current component balance\r\n     * @return                          Previous position unit\r\n     * @return                          New position unit\r\n     */\r\n    function calculateAndEditDefaultPosition(\r\n        ICKToken _ckToken,\r\n        address _component,\r\n        uint256 _ckTotalSupply,\r\n        uint256 _componentPreviousBalance\r\n    )\r\n        internal\r\n        returns(uint256, uint256, uint256)\r\n    {\r\n        uint256 currentBalance = IERC20(_component).balanceOf(address(_ckToken));\r\n        uint256 positionUnit = _ckToken.getDefaultPositionRealUnit(_component).toUint256();\r\n\r\n        uint256 newTokenUnit;\r\n        if (currentBalance > 0) {\r\n            newTokenUnit = calculateDefaultEditPositionUnit(\r\n                _ckTotalSupply,\r\n                _componentPreviousBalance,\r\n                currentBalance,\r\n                positionUnit\r\n            );\r\n        } else {\r\n            newTokenUnit = 0;\r\n        }\r\n\r\n        editDefaultPosition(_ckToken, _component, newTokenUnit);\r\n\r\n        return (currentBalance, positionUnit, newTokenUnit);\r\n    }\r\n\r\n    /**\r\n     * Calculate the new position unit given total notional values pre and post executing an action that changes CKToken state\r\n     * The intention is to make updates to the units without accidentally picking up airdropped assets as well.\r\n     *\r\n     * @param _ckTokenSupply     Supply of CKToken in precise units (10^18)\r\n     * @param _preTotalNotional   Total notional amount of component prior to executing action\r\n     * @param _postTotalNotional  Total notional amount of component after the executing action\r\n     * @param _prePositionUnit    Position unit of CKToken prior to executing action\r\n     * @return                    New position unit\r\n     */\r\n    function calculateDefaultEditPositionUnit(\r\n        uint256 _ckTokenSupply,\r\n        uint256 _preTotalNotional,\r\n        uint256 _postTotalNotional,\r\n        uint256 _prePositionUnit\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // If pre action total notional amount is greater then subtract post action total notional and calculate new position units\r\n        uint256 airdroppedAmount = _preTotalNotional.sub(_prePositionUnit.preciseMul(_ckTokenSupply));\r\n        return _postTotalNotional.sub(airdroppedAmount).preciseDiv(_ckTokenSupply);\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IIntegrationRegistry.sol\r\n\r\n/*\r\n    Copyright 2021 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n// pragma solidity 0.6.10;\r\n\r\ninterface IIntegrationRegistry {\r\n    function addIntegration(address _module, string memory _id, address _wrapper) external;\r\n    function getIntegrationAdapter(address _module, string memory _id) external view returns(address);\r\n    function getIntegrationAdapterWithHash(address _module, bytes32 _id) external view returns(address);\r\n    function isValidIntegration(address _module, string memory _id) external view returns(bool);\r\n}\r\n\r\n// Dependency file: contracts/interfaces/IPriceOracle.sol\r\n\r\n/*\r\n    Copyright 2021 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n// pragma solidity 0.6.10;\r\n\r\n/**\r\n * @title IPriceOracle\r\n * @author Cook Finance\r\n *\r\n * Interface for interacting with PriceOracle\r\n */\r\ninterface IPriceOracle {\r\n\r\n    /* ============ Functions ============ */\r\n\r\n    function getPrice(address _assetOne, address _assetTwo) external view returns (uint256);\r\n    function masterQuoteAsset() external view returns (address);\r\n}\r\n\r\n// Dependency file: contracts/interfaces/ICKValuer.sol\r\n\r\n/*\r\n    Copyright 2021 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n// pragma solidity 0.6.10;\r\n\r\n// import { ICKToken } from \"contracts/interfaces/ICKToken.sol\";\r\n\r\ninterface ICKValuer {\r\n    function calculateCKTokenValuation(ICKToken _ckToken, address _quoteAsset) external view returns (uint256);\r\n}\r\n\r\n// Dependency file: contracts/protocol/lib/ResourceIdentifier.sol\r\n\r\n/*\r\n    Copyright 2021 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import { IController } from \"contracts/interfaces/IController.sol\";\r\n// import { IIntegrationRegistry } from \"contracts/interfaces/IIntegrationRegistry.sol\";\r\n// import { IPriceOracle } from \"contracts/interfaces/IPriceOracle.sol\";\r\n// import { ICKValuer } from \"contracts/interfaces/ICKValuer.sol\";\r\n\r\n/**\r\n * @title ResourceIdentifier\r\n * @author Cook Finance\r\n *\r\n * A collection of utility functions to fetch information related to Resource contracts in the system\r\n */\r\nlibrary ResourceIdentifier {\r\n\r\n    // IntegrationRegistry will always be resource ID 0 in the system\r\n    uint256 constant internal INTEGRATION_REGISTRY_RESOURCE_ID = 0;\r\n    // PriceOracle will always be resource ID 1 in the system\r\n    uint256 constant internal PRICE_ORACLE_RESOURCE_ID = 1;\r\n    // CKValuer resource will always be resource ID 2 in the system\r\n    uint256 constant internal CK_VALUER_RESOURCE_ID = 2;\r\n\r\n    /* ============ Internal ============ */\r\n\r\n    /**\r\n     * Gets the instance of integration registry stored on Controller. Note: IntegrationRegistry is stored as index 0 on\r\n     * the Controller\r\n     */\r\n    function getIntegrationRegistry(IController _controller) internal view returns (IIntegrationRegistry) {\r\n        return IIntegrationRegistry(_controller.resourceId(INTEGRATION_REGISTRY_RESOURCE_ID));\r\n    }\r\n\r\n    /**\r\n     * Gets instance of price oracle on Controller. Note: PriceOracle is stored as index 1 on the Controller\r\n     */\r\n    function getPriceOracle(IController _controller) internal view returns (IPriceOracle) {\r\n        return IPriceOracle(_controller.resourceId(PRICE_ORACLE_RESOURCE_ID));\r\n    }\r\n\r\n    /**\r\n     * Gets the instance of CK valuer on Controller. Note: CKValuer is stored as index 2 on the Controller\r\n     */\r\n    function getCKValuer(IController _controller) internal view returns (ICKValuer) {\r\n        return ICKValuer(_controller.resourceId(CK_VALUER_RESOURCE_ID));\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/protocol/lib/ModuleBase.sol\r\n\r\n/*\r\n    Copyright 2021 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n// import { AddressArrayUtils } from \"contracts/lib/AddressArrayUtils.sol\";\r\n// import { ExplicitERC20 } from \"contracts/lib/ExplicitERC20.sol\";\r\n// import { IController } from \"contracts/interfaces/IController.sol\";\r\n// import { IModule } from \"contracts/interfaces/IModule.sol\";\r\n// import { ICKToken } from \"contracts/interfaces/ICKToken.sol\";\r\n// import { Invoke } from \"contracts/protocol/lib/Invoke.sol\";\r\n// import { Position } from \"contracts/protocol/lib/Position.sol\";\r\n// import { PreciseUnitMath } from \"contracts/lib/PreciseUnitMath.sol\";\r\n// import { ResourceIdentifier } from \"contracts/protocol/lib/ResourceIdentifier.sol\";\r\n// import { SafeCast } from \"@openzeppelin/contracts/utils/SafeCast.sol\";\r\n// import { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import { SignedSafeMath } from \"@openzeppelin/contracts/math/SignedSafeMath.sol\";\r\n\r\n/**\r\n * @title ModuleBase\r\n * @author Cook Finance\r\n *\r\n * Abstract class that houses common Module-related state and functions.\r\n */\r\nabstract contract ModuleBase is IModule {\r\n    using AddressArrayUtils for address[];\r\n    using Invoke for ICKToken;\r\n    using Position for ICKToken;\r\n    using PreciseUnitMath for uint256;\r\n    using ResourceIdentifier for IController;\r\n    using SafeCast for int256;\r\n    using SafeCast for uint256;\r\n    using SafeMath for uint256;\r\n    using SignedSafeMath for int256;\r\n\r\n    /* ============ State Variables ============ */\r\n\r\n    // Address of the controller\r\n    IController public controller;\r\n\r\n    /* ============ Modifiers ============ */\r\n\r\n    modifier onlyManagerAndValidCK(ICKToken _ckToken) { \r\n        _validateOnlyManagerAndValidCK(_ckToken);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCKManager(ICKToken _ckToken, address _caller) {\r\n        _validateOnlyCKManager(_ckToken, _caller);\r\n        _;\r\n    }\r\n\r\n    modifier onlyValidAndInitializedCK(ICKToken _ckToken) {\r\n        _validateOnlyValidAndInitializedCK(_ckToken);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Throws if the sender is not a CKToken's module or module not enabled\r\n     */\r\n    modifier onlyModule(ICKToken _ckToken) {\r\n        _validateOnlyModule(_ckToken);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Utilized during module initializations to check that the module is in pending state\r\n     * and that the CKToken is valid\r\n     */\r\n    modifier onlyValidAndPendingCK(ICKToken _ckToken) {\r\n        _validateOnlyValidAndPendingCK(_ckToken);\r\n        _;\r\n    }\r\n\r\n    /* ============ Constructor ============ */\r\n\r\n    /**\r\n     * Set state variables and map asset pairs to their oracles\r\n     *\r\n     * @param _controller             Address of controller contract\r\n     */\r\n    constructor(IController _controller) public {\r\n        controller = _controller;\r\n    }\r\n\r\n    /* ============ Internal Functions ============ */\r\n\r\n    /**\r\n     * Transfers tokens from an address (that has set allowance on the module).\r\n     *\r\n     * @param  _token          The address of the ERC20 token\r\n     * @param  _from           The address to transfer from\r\n     * @param  _to             The address to transfer to\r\n     * @param  _quantity       The number of tokens to transfer\r\n     */\r\n    function transferFrom(IERC20 _token, address _from, address _to, uint256 _quantity) internal {\r\n        ExplicitERC20.transferFrom(_token, _from, _to, _quantity);\r\n    }\r\n\r\n    /**\r\n     * Gets the integration for the module with the passed in name. Validates that the address is not empty\r\n     */\r\n    function getAndValidateAdapter(string memory _integrationName) internal view returns(address) { \r\n        bytes32 integrationHash = getNameHash(_integrationName);\r\n        return getAndValidateAdapterWithHash(integrationHash);\r\n    }\r\n\r\n    /**\r\n     * Gets the integration for the module with the passed in hash. Validates that the address is not empty\r\n     */\r\n    function getAndValidateAdapterWithHash(bytes32 _integrationHash) internal view returns(address) { \r\n        address adapter = controller.getIntegrationRegistry().getIntegrationAdapterWithHash(\r\n            address(this),\r\n            _integrationHash\r\n        );\r\n\r\n        require(adapter != address(0), \"Must be valid adapter\"); \r\n        return adapter;\r\n    }\r\n\r\n    /**\r\n     * Gets the total fee for this module of the passed in index (fee % * quantity)\r\n     */\r\n    function getModuleFee(uint256 _feeIndex, uint256 _quantity) internal view returns(uint256) {\r\n        uint256 feePercentage = controller.getModuleFee(address(this), _feeIndex);\r\n        return _quantity.preciseMul(feePercentage);\r\n    }\r\n\r\n    /**\r\n     * Pays the _feeQuantity from the _ckToken denominated in _token to the protocol fee recipient\r\n     */\r\n    function payProtocolFeeFromCKToken(ICKToken _ckToken, address _token, uint256 _feeQuantity) internal {\r\n        if (_feeQuantity > 0) {\r\n            _ckToken.strictInvokeTransfer(_token, controller.feeRecipient(), _feeQuantity); \r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if the module is in process of initialization on the CKToken\r\n     */\r\n    function isCKPendingInitialization(ICKToken _ckToken) internal view returns(bool) {\r\n        return _ckToken.isPendingModule(address(this));\r\n    }\r\n\r\n    /**\r\n     * Returns true if the address is the CKToken's manager\r\n     */\r\n    function isCKManager(ICKToken _ckToken, address _toCheck) internal view returns(bool) {\r\n        return _ckToken.manager() == _toCheck;\r\n    }\r\n\r\n    /**\r\n     * Returns true if CKToken must be enabled on the controller \r\n     * and module is registered on the CKToken\r\n     */\r\n    function isCKValidAndInitialized(ICKToken _ckToken) internal view returns(bool) {\r\n        return controller.isCK(address(_ckToken)) &&\r\n            _ckToken.isInitializedModule(address(this));\r\n    }\r\n\r\n    /**\r\n     * Hashes the string and returns a bytes32 value\r\n     */\r\n    function getNameHash(string memory _name) internal pure returns(bytes32) {\r\n        return keccak256(bytes(_name));\r\n    }\r\n\r\n    /* ============== Modifier Helpers ===============\r\n     * Internal functions used to reduce bytecode size\r\n     */\r\n\r\n    /**\r\n     * Caller must CKToken manager and CKToken must be valid and initialized\r\n     */\r\n    function _validateOnlyManagerAndValidCK(ICKToken _ckToken) internal view {\r\n       require(isCKManager(_ckToken, msg.sender), \"Must be the CKToken manager\");\r\n       require(isCKValidAndInitialized(_ckToken), \"Must be a valid and initialized CKToken\");\r\n    }\r\n\r\n    /**\r\n     * Caller must CKToken manager\r\n     */\r\n    function _validateOnlyCKManager(ICKToken _ckToken, address _caller) internal view {\r\n        require(isCKManager(_ckToken, _caller), \"Must be the CKToken manager\");\r\n    }\r\n\r\n    /**\r\n     * CKToken must be valid and initialized\r\n     */\r\n    function _validateOnlyValidAndInitializedCK(ICKToken _ckToken) internal view {\r\n        require(isCKValidAndInitialized(_ckToken), \"Must be a valid and initialized CKToken\");\r\n    }\r\n\r\n    /**\r\n     * Caller must be initialized module and module must be enabled on the controller\r\n     */\r\n    function _validateOnlyModule(ICKToken _ckToken) internal view {\r\n        require(\r\n            _ckToken.moduleStates(msg.sender) == ICKToken.ModuleState.INITIALIZED,\r\n            \"Only the module can call\"\r\n        );\r\n\r\n        require(\r\n            controller.isModule(msg.sender),\r\n            \"Module must be enabled on controller\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * CKToken must be in a pending state and module must be in pending state\r\n     */\r\n    function _validateOnlyValidAndPendingCK(ICKToken _ckToken) internal view {\r\n        require(controller.isCK(address(_ckToken)), \"Must be controller-enabled CKToken\");\r\n        require(isCKPendingInitialization(_ckToken), \"Must be pending initialization\");\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/lib/Uint256ArrayUtils.sol\r\n\r\n/*\r\n    Copyright 2021 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n/**\r\n * @title Uint256ArrayUtils\r\n * @author Cook Finance\r\n *\r\n * Utility functions to handle Uint256 Arrays\r\n */\r\nlibrary Uint256ArrayUtils {\r\n\r\n    /**\r\n     * Returns the combination of the two arrays\r\n     * @param A The first array\r\n     * @param B The second array\r\n     * @return Returns A extended by B\r\n     */\r\n    function extend(uint256[] memory A, uint256[] memory B) internal pure returns (uint256[] memory) {\r\n        uint256 aLength = A.length;\r\n        uint256 bLength = B.length;\r\n        uint256[] memory newUints = new uint256[](aLength + bLength);\r\n        for (uint256 i = 0; i < aLength; i++) {\r\n            newUints[i] = A[i];\r\n        }\r\n        for (uint256 j = 0; j < bLength; j++) {\r\n            newUints[aLength + j] = B[j];\r\n        }\r\n        return newUints;\r\n    }\r\n}\r\n\r\n// Root file: contracts/protocol/modules/GeneralIndexModule.sol\r\n\r\n/*\r\n    Copyright 2021 Cook Finance.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity 0.6.10;\r\n\r\n// import { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import { Math } from \"@openzeppelin/contracts/math/Math.sol\";\r\n// import { ReentrancyGuard } from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\n// import { SafeCast } from \"@openzeppelin/contracts/utils/SafeCast.sol\";\r\n// import { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\n// import { AddressArrayUtils } from \"contracts/lib/AddressArrayUtils.sol\";\r\n// import { IController } from \"contracts/interfaces/IController.sol\";\r\n// import { IIndexExchangeAdapter } from \"contracts/interfaces/IIndexExchangeAdapter.sol\";\r\n// import { Invoke } from \"contracts/protocol/lib/Invoke.sol\";\r\n// import { ICKToken } from \"contracts/interfaces/ICKToken.sol\";\r\n// import { IWETH } from \"contracts/interfaces/external/IWETH.sol\";\r\n// import { ModuleBase } from \"contracts/protocol/lib/ModuleBase.sol\";\r\n// import { Position } from \"contracts/protocol/lib/Position.sol\";\r\n// import { PreciseUnitMath } from \"contracts/lib/PreciseUnitMath.sol\";\r\n// import { Uint256ArrayUtils } from \"contracts/lib/Uint256ArrayUtils.sol\";\r\n\r\n/**\r\n * @title GeneralIndexModule\r\n * @author Cook Finance\r\n *\r\n * Smart contract that facilitates rebalances for indices. Manager can update allocation by calling startRebalance().\r\n * There is no \"end\" to a rebalance, however once there are no more tokens to sell the rebalance is effectively over\r\n * until the manager calls startRebalance() again with a new allocation. Once a new allocation is passed in, allowed\r\n * traders can submit rebalance transactions by calling trade() and specifying the component they wish to rebalance.\r\n * All parameterizations for a trade are set by the manager ahead of time, including max trade size, coolOffPeriod bet-\r\n * ween trades, and exchange to trade on. WETH is used as the quote asset for all trades, near the end of rebalance\r\n * tradeRemaingingWETH() or raiseAssetTargets() can be called to clean up any excess WETH positions. Once a component's\r\n * target allocation is met any further attempted trades of that component will revert.\r\n *\r\n * SECURITY ASSUMPTION:\r\n *  - Works with following modules: StreamingFeeModule, BasicIssuanceModule (any other module additions to CKs using\r\n *    this module need to be examined separately)\r\n */\r\ncontract GeneralIndexModule is ModuleBase, ReentrancyGuard {\r\n    using SafeCast for int256;\r\n    using SafeCast for uint256;\r\n    using SafeMath for uint256;\r\n    using Position for uint256;\r\n    using Math for uint256;\r\n    using Position for ICKToken;\r\n    using Invoke for ICKToken;\r\n    using AddressArrayUtils for address[];\r\n    using AddressArrayUtils for IERC20[];\r\n    using Uint256ArrayUtils for uint256[];\r\n\r\n    /* ============ Struct ============ */\r\n\r\n    struct TradeExecutionParams {\r\n        uint256 targetUnit;              // Target unit of component for CK\r\n        uint256 maxSize;                 // Max trade size in precise units\r\n        uint256 coolOffPeriod;           // Required time between trades for the asset\r\n        uint256 lastTradeTimestamp;      // Timestamp of last trade\r\n        string exchangeName;             // Exchange adapter name\r\n        bytes exchangeData;              // Arbitrary data that can be used to encode exchange specific settings (fee tier) or features (multi-hop)\r\n    }\r\n\r\n    struct TradePermissionInfo {\r\n        bool anyoneTrade;                               // Boolean indicating if anyone can execute a trade\r\n        address[] tradersHistory;                       // Tracks permissioned traders to be deleted on module removal\r\n        mapping(address => bool) tradeAllowList;        // Mapping indicating which addresses are allowed to execute trade\r\n    }\r\n\r\n    struct RebalanceInfo {\r\n        uint256 positionMultiplier;         // Position multiplier at the beginning of rebalance\r\n        uint256 raiseTargetPercentage;      // Amount to raise all unit targets by if allowed (in precise units)\r\n        address[] rebalanceComponents;      // Array of components involved in rebalance\r\n    }\r\n\r\n    struct TradeInfo {\r\n        ICKToken ckToken;                           // Instance of CKToken\r\n        IIndexExchangeAdapter exchangeAdapter;      // Instance of Exchange Adapter\r\n        address sendToken;                          // Address of token being sold\r\n        address receiveToken;                       // Address of token being bought\r\n        bool isSendTokenFixed;                      // Boolean indicating fixed asset is send token\r\n        uint256 ckTotalSupply;                     // Total supply of CK (in precise units)\r\n        uint256 totalFixedQuantity;                 // Total quantity of fixed asset being traded\r\n        uint256 sendQuantity;                       // Units of component sent to the exchange\r\n        uint256 floatingQuantityLimit;              // Max/min amount of floating token spent/received during trade\r\n        uint256 preTradeSendTokenBalance;           // Total initial balance of token being sold\r\n        uint256 preTradeReceiveTokenBalance;        // Total initial balance of token being bought\r\n        bytes exchangeData;                         // Arbitrary data for executing trade on given exchange\r\n    }\r\n\r\n    /* ============ Events ============ */\r\n\r\n    event TradeMaximumUpdated(ICKToken indexed _ckToken, address indexed _component, uint256 _newMaximum);\r\n    event AssetExchangeUpdated(ICKToken indexed _ckToken, address indexed _component, string _newExchangeName);\r\n    event CoolOffPeriodUpdated(ICKToken indexed _ckToken, address indexed _component, uint256 _newCoolOffPeriod);\r\n    event ExchangeDataUpdated(ICKToken indexed _ckToken, address indexed _component, bytes _newExchangeData);\r\n    event RaiseTargetPercentageUpdated(ICKToken indexed _ckToken, uint256 indexed _raiseTargetPercentage);\r\n    event AssetTargetsRaised(ICKToken indexed _ckToken, uint256 indexed positionMultiplier);\r\n\r\n    event AnyoneTradeUpdated(ICKToken indexed _ckToken, bool indexed _status);\r\n    event TraderStatusUpdated(ICKToken indexed _ckToken, address indexed _trader, bool _status);\r\n\r\n    event TradeExecuted(\r\n        ICKToken indexed _ckToken,\r\n        address indexed _sellComponent,\r\n        address indexed _buyComponent,\r\n        IIndexExchangeAdapter _exchangeAdapter,\r\n        address _executor,\r\n        uint256 _netAmountSold,\r\n        uint256 _netAmountReceived,\r\n        uint256 _protocolFee\r\n    );\r\n\r\n    event RebalanceStarted(\r\n        ICKToken indexed _ckToken,\r\n        address[] aggregateComponents,\r\n        uint256[] aggregateTargetUnits,\r\n        uint256 indexed positionMultiplier\r\n    );\r\n\r\n    /* ============ Constants ============ */\r\n\r\n    uint256 private constant GENERAL_INDEX_MODULE_PROTOCOL_FEE_INDEX = 0;                  // Id of protocol fee % assigned to this module in the Controller\r\n\r\n    /* ============ State Variables ============ */\r\n\r\n    mapping(ICKToken => mapping(IERC20 => TradeExecutionParams)) public executionInfo;     // Mapping of CKToken to execution parameters of each asset on CKToken\r\n    mapping(ICKToken => TradePermissionInfo) public permissionInfo;                        // Mapping of CKToken to trading permissions\r\n    mapping(ICKToken => RebalanceInfo) public rebalanceInfo;                               // Mapping of CKToken to relevant data for current rebalance\r\n    IWETH public immutable weth;                                                           // Weth contract address\r\n\r\n    /* ============ Modifiers ============ */\r\n\r\n    modifier onlyAllowedTrader(ICKToken _ckToken) {\r\n        _validateOnlyAllowedTrader(_ckToken);\r\n        _;\r\n    }\r\n\r\n    modifier onlyEOAIfUnrestricted(ICKToken _ckToken) {\r\n        _validateOnlyEOAIfUnrestricted(_ckToken);\r\n        _;\r\n    }\r\n\r\n    /* ============ Constructor ============ */\r\n\r\n    constructor(IController _controller, IWETH _weth) public ModuleBase(_controller) {\r\n        weth = _weth;\r\n    }\r\n\r\n    /* ============ External Functions ============ */\r\n\r\n    /**\r\n     * MANAGER ONLY: Changes the target allocation of the CK, opening it up for trading by the CKs designated traders. The manager\r\n     * must pass in any new components and their target units (units defined by the amount of that component the manager wants in 10**18\r\n     * units of a CKToken). Old component target units must be passed in, in the current order of the components array on the\r\n     * CKToken. If a component is being removed it's index in the _oldComponentsTargetUnits should be set to 0. Additionally, the\r\n     * positionMultiplier is passed in, in order to adjust the target units in the event fees are accrued or some other activity occurs\r\n     * that changes the positionMultiplier of the CK. This guarantees the same relative allocation between all the components.\r\n     *\r\n     * @param _ckToken                          Address of the CKToken to be rebalanced\r\n     * @param _newComponents                    Array of new components to add to allocation\r\n     * @param _newComponentsTargetUnits         Array of target units at end of rebalance for new components, maps to same index of _newComponents array\r\n     * @param _oldComponentsTargetUnits         Array of target units at end of rebalance for old component, maps to same index of\r\n     *                                               _ckToken.getComponents() array, if component being removed set to 0.\r\n     * @param _positionMultiplier               Position multiplier when target units were calculated, needed in order to adjust target units\r\n     *                                               if fees accrued\r\n     */\r\n    function startRebalance(\r\n        ICKToken _ckToken,\r\n        address[] calldata _newComponents,\r\n        uint256[] calldata _newComponentsTargetUnits,\r\n        uint256[] calldata _oldComponentsTargetUnits,\r\n        uint256 _positionMultiplier\r\n    )\r\n        external\r\n        onlyManagerAndValidCK(_ckToken)\r\n    {\r\n        ( address[] memory aggregateComponents, uint256[] memory aggregateTargetUnits ) = _getAggregateComponentsAndUnits(\r\n            _ckToken.getComponents(),\r\n            _newComponents,\r\n            _newComponentsTargetUnits,\r\n            _oldComponentsTargetUnits\r\n        );\r\n\r\n        for (uint256 i = 0; i < aggregateComponents.length; i++) {\r\n            require(!_ckToken.hasExternalPosition(aggregateComponents[i]), \"External positions not allowed\");\r\n\r\n            executionInfo[_ckToken][IERC20(aggregateComponents[i])].targetUnit = aggregateTargetUnits[i];\r\n        }\r\n\r\n        rebalanceInfo[_ckToken].rebalanceComponents = aggregateComponents;\r\n        rebalanceInfo[_ckToken].positionMultiplier = _positionMultiplier;\r\n\r\n        emit RebalanceStarted(_ckToken, aggregateComponents, aggregateTargetUnits, _positionMultiplier);\r\n    }\r\n\r\n    /**\r\n     * ACCESS LIMITED: Calling trade() pushes the current component units closer to the target units defined by the manager in startRebalance().\r\n     * Only approved addresses can call, if anyoneTrade is false then contracts are allowed to call otherwise calling address must be EOA.\r\n     *\r\n     * Trade can be called at anytime but will revert if the passed component's target unit is met or cool off period hasn't passed. Trader can pass\r\n     * in a max/min amount of ETH spent/received in the trade based on if the component is being bought/sold in order to prevent sandwich attacks.\r\n     * The parameters defined by the manager are used to determine which exchange will be used and the size of the trade. Trade size will default\r\n     * to max trade size unless the max trade size would exceed the target, then an amount that would match the target unit is traded. Protocol fees,\r\n     * if enabled, are collected in the token received in a trade.\r\n     *\r\n     * @param _ckToken              Address of the CKToken\r\n     * @param _component            Address of CKToken component to trade\r\n     * @param _ethQuantityLimit     Max/min amount of ETH spent/received during trade\r\n     */\r\n    function trade(\r\n        ICKToken _ckToken,\r\n        IERC20 _component,\r\n        uint256 _ethQuantityLimit\r\n    )\r\n        external\r\n        nonReentrant\r\n        onlyAllowedTrader(_ckToken)\r\n        onlyEOAIfUnrestricted(_ckToken)\r\n        virtual\r\n    {\r\n        _validateTradeParameters(_ckToken, _component);\r\n\r\n        TradeInfo memory tradeInfo = _createTradeInfo(_ckToken, _component, _ethQuantityLimit);\r\n\r\n        _executeTrade(tradeInfo);\r\n\r\n        uint256 protocolFee = _accrueProtocolFee(tradeInfo);\r\n        (uint256 netSendAmount, uint256 netReceiveAmount) = _updatePositionStateAndTimestamp(tradeInfo, _component);\r\n\r\n        emit TradeExecuted(\r\n            tradeInfo.ckToken,\r\n            tradeInfo.sendToken,\r\n            tradeInfo.receiveToken,\r\n            tradeInfo.exchangeAdapter,\r\n            msg.sender,\r\n            netSendAmount,\r\n            netReceiveAmount,\r\n            protocolFee\r\n        );\r\n    }\r\n\r\n    /**\r\n     * ACCESS LIMITED: Only callable when 1) there are no more components to be sold and, 2) entire remaining WETH amount (above WETH target) can be\r\n     * traded such that resulting inflows won't exceed component's maxTradeSize nor overshoot the target unit. To be used near the end of rebalances\r\n     * when a component's calculated trade size is greater in value than remaining WETH.\r\n     *\r\n     * Only approved addresses can call, if anyoneTrade is false then contracts are allowed to call otherwise calling address must be EOA. Trade\r\n     * can be called at anytime but will revert if the passed component's target unit is met or cool off period hasn't passed. Like with trade()\r\n     * a minimum component receive amount can be set.\r\n     *\r\n     * @param _ckToken                      Address of the CKToken\r\n     * @param _component                    Address of the CKToken component to trade\r\n     * @param _minComponentReceived         Min amount of component received during trade\r\n     */\r\n    function tradeRemainingWETH(\r\n        ICKToken _ckToken,\r\n        IERC20 _component,\r\n        uint256 _minComponentReceived\r\n    )\r\n        external\r\n        nonReentrant\r\n        onlyAllowedTrader(_ckToken)\r\n        onlyEOAIfUnrestricted(_ckToken)\r\n        virtual\r\n    {\r\n        require(_noTokensToSell(_ckToken), \"Sell other ck components first\");\r\n        require(\r\n            executionInfo[_ckToken][weth].targetUnit < _getDefaultPositionRealUnit(_ckToken, weth),\r\n            \"WETH is below target unit\"\r\n        );\r\n\r\n        _validateTradeParameters(_ckToken, _component);\r\n\r\n        TradeInfo memory tradeInfo = _createTradeRemainingInfo(_ckToken, _component, _minComponentReceived);\r\n\r\n        _executeTrade(tradeInfo);\r\n\r\n        uint256 protocolFee = _accrueProtocolFee(tradeInfo);\r\n        (uint256 netSendAmount, uint256 netReceiveAmount) = _updatePositionStateAndTimestamp(tradeInfo, _component);\r\n\r\n        require(\r\n            netReceiveAmount.add(protocolFee) < executionInfo[_ckToken][_component].maxSize,\r\n            \"Trade amount > max trade size\"\r\n        );\r\n\r\n        _validateComponentPositionUnit(_ckToken, _component);\r\n\r\n        emit TradeExecuted(\r\n            tradeInfo.ckToken,\r\n            tradeInfo.sendToken,\r\n            tradeInfo.receiveToken,\r\n            tradeInfo.exchangeAdapter,\r\n            msg.sender,\r\n            netSendAmount,\r\n            netReceiveAmount,\r\n            protocolFee\r\n        );\r\n    }\r\n\r\n    /**\r\n     * ACCESS LIMITED: For situation where all target units met and remaining WETH, uniformly raise targets by same percentage by applying\r\n     * to logged positionMultiplier in RebalanceInfo struct, in order to allow further trading. Can be called multiple times if necessary,\r\n     * targets are increased by amount specified by raiseAssetTargetsPercentage as ck by manager. In order to reduce tracking error\r\n     * raising the target by a smaller amount allows greater granularity in finding an equilibrium between the excess ETH and components\r\n     * that need to be bought. Raising the targets too much could result in vastly under allocating to WETH as more WETH than necessary is\r\n     * spent buying the components to meet their new target.\r\n     *\r\n     * @param _ckToken             Address of the CKToken\r\n     */\r\n    function raiseAssetTargets(ICKToken _ckToken) external onlyAllowedTrader(_ckToken) virtual {\r\n        require(\r\n            _allTargetsMet(_ckToken)\r\n            && _getDefaultPositionRealUnit(_ckToken, weth) > _getNormalizedTargetUnit(_ckToken, weth),\r\n            \"Targets not met or ETH =~ 0\"\r\n        );\r\n\r\n        // positionMultiplier / (10^18 + raiseTargetPercentage)\r\n        // ex: (10 ** 18) / ((10 ** 18) + ether(.0025)) => 997506234413965087\r\n        rebalanceInfo[_ckToken].positionMultiplier = rebalanceInfo[_ckToken].positionMultiplier.preciseDiv(\r\n            PreciseUnitMath.preciseUnit().add(rebalanceInfo[_ckToken].raiseTargetPercentage)\r\n        );\r\n        emit AssetTargetsRaised(_ckToken, rebalanceInfo[_ckToken].positionMultiplier);\r\n    }\r\n\r\n    /**\r\n     * MANAGER ONLY: Set trade maximums for passed components of the CKToken. Can be called at anytime.\r\n     * Note: Trade maximums must be set before rebalance can begin properly - they are zero by\r\n     * default and trades will not execute if a component's trade size is greater than the maximum.\r\n     *\r\n     * @param _ckToken             Address of the CKToken\r\n     * @param _components           Array of components\r\n     * @param _tradeMaximums        Array of trade maximums mapping to correct component\r\n     */\r\n    function setTradeMaximums(\r\n        ICKToken _ckToken,\r\n        address[] memory _components,\r\n        uint256[] memory _tradeMaximums\r\n    )\r\n        external\r\n        onlyManagerAndValidCK(_ckToken)\r\n    {\r\n        _components.validatePairsWithArray(_tradeMaximums);\r\n\r\n        for (uint256 i = 0; i < _components.length; i++) {\r\n            executionInfo[_ckToken][IERC20(_components[i])].maxSize = _tradeMaximums[i];\r\n            emit TradeMaximumUpdated(_ckToken, _components[i], _tradeMaximums[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * MANAGER ONLY: Set exchange for passed components of the CKToken. Can be called at anytime.\r\n     *\r\n     * @param _ckToken              Address of the CKToken\r\n     * @param _components           Array of components\r\n     * @param _exchangeNames        Array of exchange names mapping to correct component\r\n     */\r\n    function setExchanges(\r\n        ICKToken _ckToken,\r\n        address[] memory _components,\r\n        string[] memory _exchangeNames\r\n    )\r\n        external\r\n        onlyManagerAndValidCK(_ckToken)\r\n    {\r\n        _components.validatePairsWithArray(_exchangeNames);\r\n\r\n        for (uint256 i = 0; i < _components.length; i++) {\r\n            if (_components[i] != address(weth)) {\r\n\r\n                require(\r\n                    controller.getIntegrationRegistry().isValidIntegration(address(this), _exchangeNames[i]),\r\n                    \"Unrecognized exchange name\"\r\n                );\r\n\r\n                executionInfo[_ckToken][IERC20(_components[i])].exchangeName = _exchangeNames[i];\r\n                emit AssetExchangeUpdated(_ckToken, _components[i], _exchangeNames[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * MANAGER ONLY: Set cool off periods for passed components of the CKToken. Can be called at any time.\r\n     *\r\n     * @param _ckToken              Address of the CKToken\r\n     * @param _components           Array of components\r\n     * @param _coolOffPeriods       Array of cool off periods to correct component\r\n     */\r\n    function setCoolOffPeriods(\r\n        ICKToken _ckToken,\r\n        address[] memory _components,\r\n        uint256[] memory _coolOffPeriods\r\n    )\r\n        external\r\n        onlyManagerAndValidCK(_ckToken)\r\n    {\r\n        _components.validatePairsWithArray(_coolOffPeriods);\r\n\r\n        for (uint256 i = 0; i < _components.length; i++) {\r\n            executionInfo[_ckToken][IERC20(_components[i])].coolOffPeriod = _coolOffPeriods[i];\r\n            emit CoolOffPeriodUpdated(_ckToken, _components[i], _coolOffPeriods[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * MANAGER ONLY: Set arbitrary byte data on a per asset basis that can be used to pass exchange specific settings (i.e. specifying\r\n     * fee tiers) or exchange specific features (enabling multi-hop trades). Can be called at any time.\r\n     *\r\n     * @param _ckToken              Address of the CKToken\r\n     * @param _components           Array of components\r\n     * @param _exchangeData         Array of exchange specific arbitrary bytes data\r\n     */\r\n    function setExchangeData(\r\n        ICKToken _ckToken,\r\n        address[] memory _components,\r\n        bytes[] memory _exchangeData\r\n    )\r\n        external\r\n        onlyManagerAndValidCK(_ckToken)\r\n    {\r\n        _components.validatePairsWithArray(_exchangeData);\r\n\r\n        for (uint256 i = 0; i < _components.length; i++) {\r\n            executionInfo[_ckToken][IERC20(_components[i])].exchangeData = _exchangeData[i];\r\n            emit ExchangeDataUpdated(_ckToken, _components[i], _exchangeData[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * MANAGER ONLY: Set amount by which all component's targets units would be raised. Can be called at any time.\r\n     *\r\n     * @param _ckToken                     Address of the CKToken\r\n     * @param _raiseTargetPercentage        Amount to raise all component's unit targets by (in precise units)\r\n     */\r\n    function setRaiseTargetPercentage(\r\n        ICKToken _ckToken,\r\n        uint256 _raiseTargetPercentage\r\n    )\r\n        external\r\n        onlyManagerAndValidCK(_ckToken)\r\n    {\r\n        require(_raiseTargetPercentage > 0, \"Target percentage must be > 0\");\r\n        rebalanceInfo[_ckToken].raiseTargetPercentage = _raiseTargetPercentage;\r\n        emit RaiseTargetPercentageUpdated(_ckToken, _raiseTargetPercentage);\r\n    }\r\n\r\n    /**\r\n     * MANAGER ONLY: Toggles ability for passed addresses to call trade() or tradeRemainingWETH(). Can be called at any time.\r\n     *\r\n     * @param _ckToken          Address of the CKToken\r\n     * @param _traders           Array trader addresses to toggle status\r\n     * @param _statuses          Booleans indicating if matching trader can trade\r\n     */\r\n    function setTraderStatus(\r\n        ICKToken _ckToken,\r\n        address[] memory _traders,\r\n        bool[] memory _statuses\r\n    )\r\n        external\r\n        onlyManagerAndValidCK(_ckToken)\r\n    {\r\n        _traders.validatePairsWithArray(_statuses);\r\n\r\n        for (uint256 i = 0; i < _traders.length; i++) {\r\n            _updateTradersHistory(_ckToken, _traders[i], _statuses[i]);\r\n            permissionInfo[_ckToken].tradeAllowList[_traders[i]] = _statuses[i];\r\n            emit TraderStatusUpdated(_ckToken, _traders[i], _statuses[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * MANAGER ONLY: Toggle whether anyone can trade, if true bypasses the traderAllowList. Can be called at anytime.\r\n     *\r\n     * @param _ckToken         Address of the CKToken\r\n     * @param _status           Boolean indicating if anyone can trade\r\n     */\r\n    function setAnyoneTrade(ICKToken _ckToken, bool _status) external onlyManagerAndValidCK(_ckToken) {\r\n        permissionInfo[_ckToken].anyoneTrade = _status;\r\n        emit AnyoneTradeUpdated(_ckToken, _status);\r\n    }\r\n\r\n    /**\r\n     * MANAGER ONLY: Called to initialize module to CKToken in order to allow GeneralIndexModule access for rebalances.\r\n     * Grabs the current units for each asset in the CK and CK's the targetUnit to that unit in order to prevent any\r\n     * trading until startRebalance() is explicitly called. Position multiplier is also logged in order to make sure any\r\n     * position multiplier changes don't unintentionally open the CK for rebalancing.\r\n     *\r\n     * @param _ckToken         Address of the CKToken\r\n     */\r\n    function initialize(ICKToken _ckToken)\r\n        external\r\n        onlyCKManager(_ckToken, msg.sender)\r\n        onlyValidAndPendingCK(_ckToken)\r\n    {\r\n        ICKToken.Position[] memory positions = _ckToken.getPositions();\r\n\r\n        for (uint256 i = 0; i < positions.length; i++) {\r\n            ICKToken.Position memory position = positions[i];\r\n            require(position.positionState == 0, \"External positions not allowed\");\r\n            executionInfo[_ckToken][IERC20(position.component)].targetUnit = position.unit.toUint256();\r\n            executionInfo[_ckToken][IERC20(position.component)].lastTradeTimestamp = 0;\r\n        }\r\n\r\n        rebalanceInfo[_ckToken].positionMultiplier = _ckToken.positionMultiplier().toUint256();\r\n        _ckToken.initializeModule();\r\n    }\r\n\r\n    /**\r\n     * Called by a CKToken to notify that this module was removed from the CKToken.\r\n     * Clears the rebalanceInfo and permissionsInfo of the calling CKToken.\r\n     * // importANT: CKToken's execution settings, including trade maximums and exchange names,\r\n     * are NOT DELETED. Restoring a previously removed module requires that care is taken to\r\n     * initialize execution settings appropriately.\r\n     */\r\n    function removeModule() external override {\r\n        TradePermissionInfo storage tokenPermissionInfo = permissionInfo[ICKToken(msg.sender)];\r\n\r\n        for (uint i = 0; i < tokenPermissionInfo.tradersHistory.length; i++) {\r\n            tokenPermissionInfo.tradeAllowList[tokenPermissionInfo.tradersHistory[i]] = false;\r\n        }\r\n\r\n        delete rebalanceInfo[ICKToken(msg.sender)];\r\n        delete permissionInfo[ICKToken(msg.sender)];\r\n    }\r\n\r\n    /* ============ External View Functions ============ */\r\n\r\n    /**\r\n     * Get the array of CKToken components involved in rebalance.\r\n     *\r\n     * @param _ckToken          Address of the CKToken\r\n     *\r\n     * @return address[]        Array of _ckToken components involved in rebalance\r\n     */\r\n    function getRebalanceComponents(ICKToken _ckToken)\r\n        external\r\n        view\r\n        onlyValidAndInitializedCK(_ckToken)\r\n        returns (address[] memory)\r\n    {\r\n        return rebalanceInfo[_ckToken].rebalanceComponents;\r\n    }\r\n\r\n    /**\r\n     * Calculates the amount of a component that is going to be traded and whether the component is being bought\r\n     * or sold. If currentUnit and targetUnit are the same, function will revert.\r\n     *\r\n     * @param _ckToken                  Instance of the CKToken to rebalance\r\n     * @param _component                IERC20 component to trade\r\n     *\r\n     * @return isSendTokenFixed         Boolean indicating fixed asset is send token\r\n     * @return componentQuantity        Amount of component being traded\r\n     */\r\n    function getComponentTradeQuantityAndDirection(\r\n        ICKToken _ckToken,\r\n        IERC20 _component\r\n    )\r\n        external\r\n        view\r\n        onlyValidAndInitializedCK(_ckToken)\r\n        returns (bool, uint256)\r\n    {\r\n        require(_ckToken.isComponent(address(_component)), \"Component not recognized\");\r\n        uint256 totalSupply = _ckToken.totalSupply();\r\n        return calculateTradeSizeAndDirection(_ckToken, _component, totalSupply);\r\n    }\r\n\r\n\r\n    /**\r\n     * Get if a given address is an allowed trader.\r\n     *\r\n     * @param _ckToken          Address of the CKToken\r\n     * @param _trader           Address of the trader\r\n     *\r\n     * @return bool             True if _trader is allowed to trade, else false\r\n     */\r\n    function getIsAllowedTrader(ICKToken _ckToken, address _trader)\r\n        external\r\n        view\r\n        onlyValidAndInitializedCK(_ckToken)\r\n        returns (bool)\r\n    {\r\n        return _isAllowedTrader(_ckToken, _trader);\r\n    }\r\n\r\n    /**\r\n     * Get the list of traders who are allowed to call trade(), tradeRemainingWeth(), and raiseAssetTarget()\r\n     *\r\n     * @param _ckToken         Address of the CKToken\r\n     *\r\n     * @return address[]\r\n     */\r\n    function getAllowedTraders(ICKToken _ckToken)\r\n        external\r\n        view\r\n        onlyValidAndInitializedCK(_ckToken)\r\n        returns (address[] memory)\r\n    {\r\n        return permissionInfo[_ckToken].tradersHistory;\r\n    }\r\n\r\n    /* ============ Internal Functions ============ */\r\n\r\n/**\r\n     * A rebalance is a multi-step process in which current Set components are sold for a\r\n     * bridge asset (WETH) before buying target components in the correct amount to achieve\r\n     * the desired balance between elements in the set.\r\n     *\r\n     *        Step 1        |       Step 2\r\n     * -------------------------------------------\r\n     * Component --> WETH   |   WETH --> Component\r\n     * -------------------------------------------\r\n     *\r\n     * The syntax we use frames this as trading from a \"fixed\" amount of one component to a\r\n     * \"fixed\" amount of another via a \"floating limit\" which is *either* the maximum size of\r\n     * the trade we want to make (trades may be tranched to avoid moving markets) OR the minimum\r\n     * amount of tokens we expect to receive. The different meanings of the floating limit map to\r\n     * the trade sequence as below:\r\n     *\r\n     * Step 1: Component --> WETH\r\n     * ----------------------------------------------------------\r\n     *                     | Fixed  |     Floating limit        |\r\n     * ----------------------------------------------------------\r\n     * send  (Component)   |  YES   |                           |\r\n     * recieve (WETH)      |        |   Min WETH to receive     |\r\n     * ----------------------------------------------------------\r\n     *\r\n     * Step 2: WETH --> Component\r\n     * ----------------------------------------------------------\r\n     *                     |  Fixed  |    Floating limit        |\r\n     * ----------------------------------------------------------\r\n     * send  (WETH)        |   NO    |  Max WETH to send        |\r\n     * recieve (Component) |   YES   |                          |\r\n     * ----------------------------------------------------------\r\n     *\r\n     * Additionally, there is an edge case where price volatility during a rebalance\r\n     * results in remaining WETH which needs to be allocated proportionately. In this case\r\n     * the values are as below:\r\n     *\r\n     * Edge case: Remaining WETH --> Component\r\n     * ----------------------------------------------------------\r\n     *                     | Fixed  |    Floating limit         |\r\n     * ----------------------------------------------------------\r\n     * send  (WETH)        |  YES   |                           |\r\n     * recieve (Component) |        | Min component to receive  |\r\n     * ----------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Adds or removes newly permissioned trader to/from permissionsInfo traderHistory. It's\r\n     * necessary to verify that traderHistory contains the address because AddressArrayUtils will\r\n     * throw when attempting to remove a non-element and it's possible someone can set a new\r\n     * trader's status to false.\r\n     *\r\n     * @param _ckToken                         Instance of the SetToken\r\n     * @param _trader                           Trader whose permission is being set\r\n     * @param _status                           Boolean permission being set\r\n     */\r\n    function _updateTradersHistory(ICKToken _ckToken, address _trader, bool _status) internal {\r\n        if (_status && !permissionInfo[_ckToken].tradersHistory.contains(_trader)) {\r\n            permissionInfo[_ckToken].tradersHistory.push(_trader);\r\n        } else if(!_status && permissionInfo[_ckToken].tradersHistory.contains(_trader)) {\r\n            permissionInfo[_ckToken].tradersHistory.removeStorage(_trader);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create and return TradeInfo struct. This function reverts if the target has already been met.\r\n     * If this is a trade from component into WETH, sell the total fixed component quantity\r\n     * and expect to receive an ETH amount the user has specified (or more). If it's a trade from\r\n     * WETH into a component, sell the lesser of: the user's WETH limit OR the CKToken's\r\n     * remaining WETH balance and expect to receive a fixed component quantity.\r\n     *\r\n     * @param _ckToken              Instance of the CKToken to rebalance\r\n     * @param _component            IERC20 component to trade\r\n     * @param _ethQuantityLimit     Max/min amount of weth spent/received during trade\r\n     *\r\n     * @return tradeInfo            Struct containing data for trade\r\n     */\r\n    function _createTradeInfo(\r\n        ICKToken _ckToken,\r\n        IERC20 _component,\r\n        uint256 _ethQuantityLimit\r\n    )\r\n        internal\r\n        view\r\n        virtual\r\n        returns (TradeInfo memory tradeInfo)\r\n    {\r\n        tradeInfo = _getDefaultTradeInfo(_ckToken, _component, true);\r\n\r\n        if (tradeInfo.isSendTokenFixed){\r\n            tradeInfo.sendQuantity = tradeInfo.totalFixedQuantity;\r\n            tradeInfo.floatingQuantityLimit = _ethQuantityLimit;\r\n        } else {\r\n            tradeInfo.sendQuantity = _ethQuantityLimit.min(tradeInfo.preTradeSendTokenBalance);\r\n            tradeInfo.floatingQuantityLimit = tradeInfo.totalFixedQuantity;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create and return TradeInfo struct. This function does NOT check if the WETH target has been met.\r\n     *\r\n     * @param _ckToken                      Instance of the CKToken to rebalance\r\n     * @param _component                    IERC20 component to trade\r\n     * @param _minComponentReceived         Min amount of component received during trade\r\n     *\r\n     * @return tradeInfo                    Struct containing data for tradeRemaining info\r\n     */\r\n    function _createTradeRemainingInfo(\r\n        ICKToken _ckToken,\r\n        IERC20 _component,\r\n        uint256 _minComponentReceived\r\n    )\r\n        internal\r\n        view\r\n        returns (TradeInfo memory tradeInfo)\r\n    {\r\n        tradeInfo = _getDefaultTradeInfo(_ckToken, _component, false);\r\n\r\n        (,,\r\n            uint256 currentNotional,\r\n            uint256 targetNotional\r\n        ) = _getUnitsAndNotionalAmounts(_ckToken, weth, tradeInfo.ckTotalSupply);\r\n\r\n        tradeInfo.sendQuantity =  currentNotional.sub(targetNotional);\r\n        tradeInfo.floatingQuantityLimit = _minComponentReceived;\r\n        tradeInfo.isSendTokenFixed = true;\r\n    }\r\n\r\n    /**\r\n     * Create and returns a partial TradeInfo struct with all fields that overlap between `trade`\r\n     * and `tradeRemaining` info constructors filled in. Values for `sendQuantity` and `floatingQuantityLimit`\r\n     * are derived separately, outside this method. `trade` requires that trade size and direction are\r\n     * calculated, whereas `tradeRemaining` automatically sets WETH as the sendToken and _component\r\n     * as receiveToken.\r\n     *\r\n     * @param _ckToken                      Instance of the CKToken to rebalance\r\n     * @param _component                    IERC20 component to trade\r\n     * @param  calculateTradeDirection      Indicates whether method should calculate trade size and direction\r\n     *\r\n     * @return tradeInfo                    Struct containing partial data for trade\r\n     */\r\n    function _getDefaultTradeInfo(ICKToken _ckToken, IERC20 _component, bool calculateTradeDirection)\r\n        internal\r\n        view\r\n        returns (TradeInfo memory tradeInfo)\r\n    {\r\n        tradeInfo.ckToken = _ckToken;\r\n        tradeInfo.ckTotalSupply = _ckToken.totalSupply();\r\n        tradeInfo.exchangeAdapter = _getExchangeAdapter(_ckToken, _component);\r\n        tradeInfo.exchangeData = executionInfo[_ckToken][_component].exchangeData;\r\n\r\n        if(calculateTradeDirection){\r\n            (\r\n                tradeInfo.isSendTokenFixed,\r\n                tradeInfo.totalFixedQuantity\r\n            ) = calculateTradeSizeAndDirection(_ckToken, _component, tradeInfo.ckTotalSupply);\r\n        }\r\n\r\n        if (tradeInfo.isSendTokenFixed){\r\n            tradeInfo.sendToken = address(_component);\r\n            tradeInfo.receiveToken = address(weth);\r\n        } else {\r\n            tradeInfo.sendToken = address(weth);\r\n            tradeInfo.receiveToken = address(_component);\r\n        }\r\n\r\n        tradeInfo.preTradeSendTokenBalance = IERC20(tradeInfo.sendToken).balanceOf(address(_ckToken));\r\n        tradeInfo.preTradeReceiveTokenBalance = IERC20(tradeInfo.receiveToken).balanceOf(address(_ckToken));\r\n    }\r\n\r\n    /**\r\n     * Function handles all interactions with exchange. All GeneralIndexModule adapters must allow for selling or buying a fixed\r\n     * quantity of a token in return for a non-fixed (floating) quantity of a token. If `isSendTokenFixed` is true then the adapter\r\n     * will choose the exchange interface associated with inputting a fixed amount, otherwise it will select the interface used for\r\n     * receiving a fixed amount. Any other exchange specific data can also be created by calling generateDataParam function.\r\n     *\r\n     * @param _tradeInfo            Struct containing trade information used in internal functions\r\n     */\r\n    function _executeTrade(TradeInfo memory _tradeInfo) internal virtual {\r\n        _tradeInfo.ckToken.invokeApprove(\r\n            _tradeInfo.sendToken,\r\n            _tradeInfo.exchangeAdapter.getSpender(),\r\n            _tradeInfo.sendQuantity\r\n        );\r\n\r\n        (\r\n            address targetExchange,\r\n            uint256 callValue,\r\n            bytes memory methodData\r\n        ) = _tradeInfo.exchangeAdapter.getTradeCalldata(\r\n            _tradeInfo.sendToken,\r\n            _tradeInfo.receiveToken,\r\n            address(_tradeInfo.ckToken),\r\n            _tradeInfo.isSendTokenFixed,\r\n            _tradeInfo.sendQuantity,\r\n            _tradeInfo.floatingQuantityLimit,\r\n            _tradeInfo.exchangeData\r\n        );\r\n\r\n        _tradeInfo.ckToken.invoke(targetExchange, callValue, methodData);\r\n    }\r\n\r\n    /**\r\n     * Retrieve fee from controller and calculate total protocol fee and send from CKToken to protocol recipient.\r\n     * The protocol fee is collected from the amount of received token in the trade.\r\n     *\r\n     * @param _tradeInfo                Struct containing trade information used in internal functions\r\n     *\r\n     * @return protocolFee              Amount of receive token taken as protocol fee\r\n     */\r\n    function _accrueProtocolFee(TradeInfo memory _tradeInfo) internal returns (uint256 protocolFee) {\r\n        uint256 exchangedQuantity =  IERC20(_tradeInfo.receiveToken)\r\n            .balanceOf(address(_tradeInfo.ckToken))\r\n            .sub(_tradeInfo.preTradeReceiveTokenBalance);\r\n\r\n        protocolFee = getModuleFee(GENERAL_INDEX_MODULE_PROTOCOL_FEE_INDEX, exchangedQuantity);\r\n        payProtocolFeeFromCKToken(_tradeInfo.ckToken, _tradeInfo.receiveToken, protocolFee);\r\n    }\r\n\r\n    /**\r\n     * Update CKToken positions and executionInfo's last trade timestamp. This function is intended\r\n     * to be called after the fees have been accrued, hence it returns the amount of tokens bought net of fees.\r\n     *\r\n     * @param _tradeInfo                Struct containing trade information used in internal functions\r\n     * @param _component                IERC20 component which was traded\r\n     *\r\n     * @return netSendAmount            Amount of sendTokens used in the trade\r\n     * @return netReceiveAmount         Amount of receiveTokens received in the trade (net of fees)\r\n     */\r\n    function _updatePositionStateAndTimestamp(TradeInfo memory _tradeInfo, IERC20 _component)\r\n        internal\r\n        returns (uint256 netSendAmount, uint256 netReceiveAmount)\r\n    {\r\n        (uint256 postTradeSendTokenBalance,,) = _tradeInfo.ckToken.calculateAndEditDefaultPosition(\r\n            _tradeInfo.sendToken,\r\n            _tradeInfo.ckTotalSupply,\r\n            _tradeInfo.preTradeSendTokenBalance\r\n        );\r\n        (uint256 postTradeReceiveTokenBalance,,) = _tradeInfo.ckToken.calculateAndEditDefaultPosition(\r\n            _tradeInfo.receiveToken,\r\n            _tradeInfo.ckTotalSupply,\r\n            _tradeInfo.preTradeReceiveTokenBalance\r\n        );\r\n\r\n        netSendAmount = _tradeInfo.preTradeSendTokenBalance.sub(postTradeSendTokenBalance);\r\n        netReceiveAmount = postTradeReceiveTokenBalance.sub(_tradeInfo.preTradeReceiveTokenBalance);\r\n\r\n        executionInfo[_tradeInfo.ckToken][_component].lastTradeTimestamp = block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * Calculates the amount of a component is going to be traded and whether the component is being bought or sold.\r\n     * If currentUnit and targetUnit are the same, function will revert.\r\n     *\r\n     * @param _ckToken                 Instance of the CKToken to rebalance\r\n     * @param _component                IERC20 component to trade\r\n     * @param _totalSupply              Total supply of _ckToken\r\n     *\r\n     * @return isSendTokenFixed         Boolean indicating fixed asset is send token\r\n     * @return totalFixedQuantity       Amount of fixed token to send or receive\r\n     */\r\n    function calculateTradeSizeAndDirection(\r\n        ICKToken _ckToken,\r\n        IERC20 _component,\r\n        uint256 _totalSupply\r\n    )\r\n        public\r\n        view\r\n        returns (bool isSendTokenFixed, uint256 totalFixedQuantity)\r\n    {\r\n        uint256 protocolFee = controller.getModuleFee(address(this), GENERAL_INDEX_MODULE_PROTOCOL_FEE_INDEX);\r\n        uint256 componentMaxSize = executionInfo[_ckToken][_component].maxSize;\r\n\r\n        (\r\n            uint256 currentUnit,\r\n            uint256 targetUnit,\r\n            uint256 currentNotional,\r\n            uint256 targetNotional\r\n        ) = _getUnitsAndNotionalAmounts(_ckToken, _component, _totalSupply);\r\n\r\n        require(currentUnit != targetUnit, \"Target already met\");\r\n\r\n        isSendTokenFixed = targetNotional < currentNotional;\r\n\r\n        // In order to account for fees taken by protocol when buying the notional difference between currentUnit\r\n        // and targetUnit is divided by (1 - protocolFee) to make sure that targetUnit can be met. Failure to\r\n        // do so would lead to never being able to meet target of components that need to be bought.\r\n        //\r\n        // ? - lesserOf: (componentMaxSize, (currentNotional - targetNotional))\r\n        // : - lesserOf: (componentMaxSize, (targetNotional - currentNotional) / 10 ** 18 - protocolFee)\r\n        totalFixedQuantity = isSendTokenFixed\r\n            ? componentMaxSize.min(currentNotional.sub(targetNotional))\r\n            : componentMaxSize.min(targetNotional.sub(currentNotional).preciseDiv(PreciseUnitMath.preciseUnit().sub(protocolFee)));\r\n    }\r\n\r\n    /**\r\n     * Check if all targets are met.\r\n     *\r\n     * @param _ckToken             Instance of the SetToken to be rebalanced\r\n     *\r\n     * @return bool                 True if all component's target units have been met, otherwise false\r\n     */\r\n    function _allTargetsMet(ICKToken _ckToken) internal view returns (bool) {\r\n        address[] memory rebalanceComponents = rebalanceInfo[_ckToken].rebalanceComponents;\r\n\r\n        for (uint256 i = 0; i < rebalanceComponents.length; i++) {\r\n            if (_targetUnmet(_ckToken, rebalanceComponents[i])) { return false; }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Checks if sell conditions are met. The component cannot be WETH and its normalized target\r\n     * unit must be less than its default position real unit\r\n     *\r\n     * @param _ckToken                         Instance of the SetToken to be rebalanced\r\n     * @param _component                        Component evaluated for sale\r\n     *\r\n     * @return bool                             True if sell allowed, false otherwise\r\n     */\r\n    function _canSell(ICKToken _ckToken, address _component) internal view returns(bool) {\r\n        return (\r\n            _component != address(weth) &&\r\n            (\r\n                _getNormalizedTargetUnit(_ckToken, IERC20(_component)) <\r\n                _getDefaultPositionRealUnit(_ckToken,IERC20(_component))\r\n            )\r\n        );\r\n    }    \r\n\r\n    /**\r\n     * Determine if passed address is allowed to call trade for the SetToken. If anyoneTrade set to true anyone can call otherwise\r\n     * needs to be approved.\r\n     *\r\n     * @param _ckToken             Instance of SetToken to be rebalanced\r\n     * @param  _trader              Address of the trader who called contract function\r\n     *\r\n     * @return bool                 True if trader is an approved trader for the SetToken\r\n     */\r\n    function _isAllowedTrader(ICKToken _ckToken, address _trader) internal view returns (bool) {\r\n        TradePermissionInfo storage permissions = permissionInfo[_ckToken];\r\n        return permissions.anyoneTrade || permissions.tradeAllowList[_trader];\r\n    }\r\n\r\n    /**\r\n     * Check if there are any more tokens to sell. Since we allow WETH to float around it's target during rebalances it is not checked.\r\n     *\r\n     * @param _ckToken             Instance of the CKToken to be rebalanced\r\n     *\r\n     * @return bool                 True if there is not any component that can be sold, otherwise false\r\n     */\r\n    function _noTokensToSell(ICKToken _ckToken) internal view returns (bool) {\r\n        address[] memory rebalanceComponents = rebalanceInfo[_ckToken].rebalanceComponents;\r\n\r\n        for (uint256 i = 0; i < rebalanceComponents.length; i++) {\r\n            if (_canSell(_ckToken, rebalanceComponents[i]) ) { return false; }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Determines if a target is met. Due to small rounding errors converting between virtual and\r\n     * real unit on SetToken we allow for a 1 wei buffer when checking if target is met. In order to\r\n     * avoid subtraction overflow errors targetUnits of zero check for an exact amount. WETH is not\r\n     * checked as it is allowed to float around its target.\r\n     *\r\n     * @param _ckToken                         Instance of the SetToken to be rebalanced\r\n     * @param _component                        Component whose target is evaluated\r\n     *\r\n     * @return bool                             True if component's target units are met, false otherwise\r\n     */\r\n    function _targetUnmet(ICKToken _ckToken, address _component) internal view returns(bool) {\r\n        if (_component == address(weth)) return false;\r\n\r\n        uint256 normalizedTargetUnit = _getNormalizedTargetUnit(_ckToken, IERC20(_component));\r\n        uint256 currentUnit = _getDefaultPositionRealUnit(_ckToken, IERC20(_component));\r\n\r\n        return (normalizedTargetUnit > 0)\r\n            ? !(normalizedTargetUnit.approximatelyEquals(currentUnit, 1))\r\n            : normalizedTargetUnit != currentUnit;\r\n    }\r\n\r\n    /**\r\n     * Validate component position unit has not exceeded it's target unit. This is used during tradeRemainingWETH() to make sure\r\n     * the amount of component bought does not exceed the targetUnit.\r\n     *\r\n     * @param _ckToken         Instance of the SetToken\r\n     * @param _component        IERC20 component whose position units are to be validated\r\n     */\r\n    function _validateComponentPositionUnit(ICKToken _ckToken, IERC20 _component) internal view {\r\n        uint256 currentUnit = _getDefaultPositionRealUnit(_ckToken, _component);\r\n        uint256 targetUnit = _getNormalizedTargetUnit(_ckToken, _component);\r\n        require(currentUnit <= targetUnit, \"Can not exceed target unit\");\r\n    }\r\n\r\n    /**\r\n     * Validate that component is a valid component and enough time has elapsed since component's last trade. Traders\r\n     * cannot explicitly trade WETH, it may only implicitly be traded by being the quote asset for other component trades.\r\n     *\r\n     * @param _ckToken         Instance of the SetToken\r\n     * @param _component        IERC20 component to be validated\r\n     */\r\n    function _validateTradeParameters(ICKToken _ckToken, IERC20 _component) internal view virtual {\r\n        require(address(_component) != address(weth), \"Can not explicitly trade WETH\");\r\n        require(\r\n            rebalanceInfo[_ckToken].rebalanceComponents.contains(address(_component)),\r\n            \"Component not part of rebalance\"\r\n        );\r\n\r\n        TradeExecutionParams memory componentInfo = executionInfo[_ckToken][_component];\r\n        require(\r\n            componentInfo.lastTradeTimestamp.add(componentInfo.coolOffPeriod) <= block.timestamp,\r\n            \"Component cool off in progress\"\r\n        );\r\n\r\n        require(!_ckToken.hasExternalPosition(address(_component)), \"External positions not allowed\");\r\n    }\r\n\r\n    /**\r\n     * Extends and/or updates the current component set and its target units with new components and targets,\r\n     * Validates inputs, requiring that that new components and new target units arrays are the same size, and\r\n     * that the number of old components target units matches the number of current components. Throws if\r\n     * a duplicate component has been added.\r\n     *\r\n     * @param  _currentComponents               Complete set of current CKToken components\r\n     * @param _newComponents                    Array of new components to add to allocation\r\n     * @param _newComponentsTargetUnits         Array of target units at end of rebalance for new components, maps to same index of _newComponents array\r\n     * @param _oldComponentsTargetUnits         Array of target units at end of rebalance for old component, maps to same index of\r\n     *                                               _ckToken.getComponents() array, if component being removed set to 0.\r\n     *\r\n     * @return aggregateComponents              Array of current components extended by new components, without duplicates\r\n     * @return aggregateTargetUnits             Array of old component target units extended by new target units, without duplicates\r\n     */\r\n    function _getAggregateComponentsAndUnits(\r\n        address[] memory _currentComponents,\r\n        address[] calldata _newComponents,\r\n        uint256[] calldata _newComponentsTargetUnits,\r\n        uint256[] calldata _oldComponentsTargetUnits\r\n    )\r\n        internal\r\n        pure\r\n        returns (address[] memory aggregateComponents, uint256[] memory aggregateTargetUnits)\r\n    {\r\n        // Don't use validate arrays because empty arrays are valid\r\n        require(_newComponents.length == _newComponentsTargetUnits.length, \"Array length mismatch\");\r\n        require(_currentComponents.length == _oldComponentsTargetUnits.length, \"Old Components targets missing\");\r\n\r\n        aggregateComponents = _currentComponents.extend(_newComponents);\r\n        aggregateTargetUnits = _oldComponentsTargetUnits.extend(_newComponentsTargetUnits);\r\n\r\n        require(!aggregateComponents.hasDuplicate(), \"Cannot duplicate components\");\r\n    }\r\n\r\n    /**\r\n     * Get the CKToken's default position as uint256\r\n     *\r\n     * @param _ckToken         Instance of the CKToken\r\n     * @param _component        IERC20 component to fetch the default position for\r\n     *\r\n     * return uint256           Real unit position\r\n     */\r\n    function _getDefaultPositionRealUnit(ICKToken _ckToken, IERC20 _component) internal view returns (uint256) {\r\n        return _ckToken.getDefaultPositionRealUnit(address(_component)).toUint256();\r\n    }\r\n\r\n    /**\r\n     * Gets exchange adapter address for a component after checking that it exists in the\r\n     * IntegrationRegistry. This method is called during a trade and must validate the adapter\r\n     * because its state may have changed since it was set in a separate transaction.\r\n     *\r\n     * @param _ckToken                         Instance of the SetToken to be rebalanced\r\n     * @param _component                        IERC20 component whose exchange adapter is fetched\r\n     *\r\n     * @return IExchangeAdapter                 Adapter address\r\n     */\r\n    function _getExchangeAdapter(ICKToken _ckToken, IERC20 _component) internal view returns(IIndexExchangeAdapter) {\r\n        return IIndexExchangeAdapter(getAndValidateAdapter(executionInfo[_ckToken][_component].exchangeName));\r\n    }\r\n\r\n/**\r\n     * Calculates and returns the normalized target unit value.\r\n     *\r\n     * @param _ckToken             Instance of the SetToken to be rebalanced\r\n     * @param _component            IERC20 component whose normalized target unit is required\r\n     *\r\n     * @return uint256                          Normalized target unit of the component\r\n     */\r\n    function _getNormalizedTargetUnit(ICKToken _ckToken, IERC20 _component) internal view returns(uint256) {\r\n        // (targetUnit * current position multiplier) / position multiplier when rebalance started\r\n        return executionInfo[_ckToken][_component]\r\n            .targetUnit\r\n            .mul(_ckToken.positionMultiplier().toUint256())\r\n            .div(rebalanceInfo[_ckToken].positionMultiplier);\r\n    }\r\n\r\n    /**\r\n     * Gets unit and notional amount values for current position and target. These are necessary\r\n     * to calculate the trade size and direction for regular trades and the `sendQuantity` for\r\n     * remainingWEth trades.\r\n     *\r\n     * @param _ckToken                 Instance of the SetToken to rebalance\r\n     * @param _component                IERC20 component to calculate notional amounts for\r\n     * @param _totalSupply              SetToken total supply\r\n     *\r\n     * @return uint256              Current default position real unit of component\r\n     * @return uint256              Normalized unit of the trade target\r\n     * @return uint256              Current notional amount: total notional amount of SetToken default position\r\n     * @return uint256              Target notional amount: Total SetToken supply * targetUnit\r\n     */\r\n    function _getUnitsAndNotionalAmounts(ICKToken _ckToken, IERC20 _component, uint256 _totalSupply)\r\n        internal\r\n        view\r\n        returns (uint256, uint256, uint256, uint256)\r\n    {\r\n        uint256 currentUnit = _getDefaultPositionRealUnit(_ckToken, _component);\r\n        uint256 targetUnit = _getNormalizedTargetUnit(_ckToken, _component);\r\n\r\n        return (\r\n            currentUnit,\r\n            targetUnit,\r\n            _totalSupply.getDefaultTotalNotional(currentUnit),\r\n            _totalSupply.preciseMulCeil(targetUnit)\r\n        );\r\n    }\r\n\r\n    /* ============== Modifier Helpers ===============\r\n     * Internal functions used to reduce bytecode size\r\n     */\r\n\r\n    /*\r\n     * Trader must be permissioned for CKToken\r\n     */\r\n    function _validateOnlyAllowedTrader(ICKToken _ckToken) internal view {\r\n        require(_isAllowedTrader(_ckToken, msg.sender), \"Address not permitted to trade\");\r\n    }\r\n\r\n    /*\r\n     * Trade must be an EOA if `anyoneTrade` has been enabled for CKToken on the module.\r\n     */\r\n    function _validateOnlyEOAIfUnrestricted(ICKToken _ckToken) internal view {\r\n        if(permissionInfo[_ckToken].anyoneTrade) {\r\n            require(msg.sender == tx.origin, \"Caller must be EOA Address\");\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IController\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"contract IWETH\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ICKToken\",\"name\":\"_ckToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"AnyoneTradeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ICKToken\",\"name\":\"_ckToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_component\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_newExchangeName\",\"type\":\"string\"}],\"name\":\"AssetExchangeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ICKToken\",\"name\":\"_ckToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionMultiplier\",\"type\":\"uint256\"}],\"name\":\"AssetTargetsRaised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ICKToken\",\"name\":\"_ckToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_component\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newCoolOffPeriod\",\"type\":\"uint256\"}],\"name\":\"CoolOffPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ICKToken\",\"name\":\"_ckToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_component\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_newExchangeData\",\"type\":\"bytes\"}],\"name\":\"ExchangeDataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ICKToken\",\"name\":\"_ckToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_raiseTargetPercentage\",\"type\":\"uint256\"}],\"name\":\"RaiseTargetPercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ICKToken\",\"name\":\"_ckToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"aggregateComponents\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"aggregateTargetUnits\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionMultiplier\",\"type\":\"uint256\"}],\"name\":\"RebalanceStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ICKToken\",\"name\":\"_ckToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sellComponent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_buyComponent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IIndexExchangeAdapter\",\"name\":\"_exchangeAdapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_netAmountSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_netAmountReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"name\":\"TradeExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ICKToken\",\"name\":\"_ckToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_component\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMaximum\",\"type\":\"uint256\"}],\"name\":\"TradeMaximumUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ICKToken\",\"name\":\"_ckToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"TraderStatusUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract ICKToken\",\"name\":\"_ckToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_component\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"calculateTradeSizeAndDirection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSendTokenFixed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalFixedQuantity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICKToken\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executionInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"targetUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coolOffPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTradeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"exchangeName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"exchangeData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICKToken\",\"name\":\"_ckToken\",\"type\":\"address\"}],\"name\":\"getAllowedTraders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICKToken\",\"name\":\"_ckToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_component\",\"type\":\"address\"}],\"name\":\"getComponentTradeQuantityAndDirection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICKToken\",\"name\":\"_ckToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"}],\"name\":\"getIsAllowedTrader\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICKToken\",\"name\":\"_ckToken\",\"type\":\"address\"}],\"name\":\"getRebalanceComponents\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICKToken\",\"name\":\"_ckToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICKToken\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permissionInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"anyoneTrade\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICKToken\",\"name\":\"_ckToken\",\"type\":\"address\"}],\"name\":\"raiseAssetTargets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICKToken\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rebalanceInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"positionMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raiseTargetPercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICKToken\",\"name\":\"_ckToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAnyoneTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICKToken\",\"name\":\"_ckToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_components\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_coolOffPeriods\",\"type\":\"uint256[]\"}],\"name\":\"setCoolOffPeriods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICKToken\",\"name\":\"_ckToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_components\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_exchangeData\",\"type\":\"bytes[]\"}],\"name\":\"setExchangeData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICKToken\",\"name\":\"_ckToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_components\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"_exchangeNames\",\"type\":\"string[]\"}],\"name\":\"setExchanges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICKToken\",\"name\":\"_ckToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_raiseTargetPercentage\",\"type\":\"uint256\"}],\"name\":\"setRaiseTargetPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICKToken\",\"name\":\"_ckToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_components\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tradeMaximums\",\"type\":\"uint256[]\"}],\"name\":\"setTradeMaximums\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICKToken\",\"name\":\"_ckToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_traders\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_statuses\",\"type\":\"bool[]\"}],\"name\":\"setTraderStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICKToken\",\"name\":\"_ckToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_newComponents\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_newComponentsTargetUnits\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_oldComponentsTargetUnits\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_positionMultiplier\",\"type\":\"uint256\"}],\"name\":\"startRebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICKToken\",\"name\":\"_ckToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_component\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ethQuantityLimit\",\"type\":\"uint256\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICKToken\",\"name\":\"_ckToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_component\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minComponentReceived\",\"type\":\"uint256\"}],\"name\":\"tradeRemainingWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"GeneralIndexModule","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e565711e7a59800e110c959e156121988e6f4704000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7d607cf6ee54927445c71d6245718903430711cc81b8a6eb9b565eba7b579f23"}]}