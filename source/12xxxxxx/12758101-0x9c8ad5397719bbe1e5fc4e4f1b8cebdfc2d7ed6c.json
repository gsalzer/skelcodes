{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: NONE\n\npragma solidity 0.8.3;\n\n\n\n// Part: ERC721TokenReceiver\n\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\ninterface ERC721TokenReceiver {\n    /// @notice Handle the receipt of an NFT\n    /// @dev The ERC721 smart contract calls this function on the recipient\n    ///  after a `transfer`. This function MAY throw to revert and reject the\n    ///  transfer. Return of other than the magic value MUST result in the\n    ///  transaction being reverted.\n    ///  Note: the contract address is always the message sender.\n    /// @param _operator The address which called `safeTransferFrom` function\n    /// @param _from The address which previously owned the token\n    /// @param _tokenId The NFT identifier which is being transferred\n    /// @param _data Additional data with no specified format\n    /// @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    ///         unless throwing\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes memory _data) external returns(bytes4);\n}\n\n// Part: EvohERC721\n\ncontract EvohERC721 {\n\n    string public name;\n    string public symbol;\n    uint256 public totalSupply;\n\n    mapping(bytes4 => bool) public supportsInterface;\n\n    struct UserData {\n        uint256 balance;\n        uint256[4] ownership;\n    }\n    mapping(address => UserData) userData;\n\n    address[1024] tokenOwners;\n    address[1024] tokenApprovals;\n    mapping(uint256 => string) tokenURIs;\n\n    mapping (address => mapping (address => bool)) private operatorApprovals;\n\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    constructor(string memory _name, string memory _symbol) {\n        name = _name;\n        symbol = _symbol;\n        supportsInterface[_INTERFACE_ID_ERC165] = true;\n        supportsInterface[_INTERFACE_ID_ERC721] = true;\n        supportsInterface[_INTERFACE_ID_ERC721_METADATA] = true;\n        supportsInterface[_INTERFACE_ID_ERC721_ENUMERABLE] = true;\n    }\n\n    /// @notice Count all NFTs assigned to an owner\n    function balanceOf(address _owner) external view returns (uint256) {\n        require(_owner != address(0), \"Query for zero address\");\n        return userData[_owner].balance;\n    }\n\n    /// @notice Find the owner of an NFT\n    function ownerOf(uint256 tokenId) public view returns (address) {\n        if (tokenId < 1024) {\n            address owner = tokenOwners[tokenId];\n            if (owner != address(0)) return owner;\n        }\n        revert(\"Query for nonexistent tokenId\");\n    }\n\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n        require(_from != address(0));\n        require(_to != address(0));\n        address owner = ownerOf(_tokenId);\n        if (\n            msg.sender == owner ||\n            getApproved(_tokenId) == msg.sender ||\n            isApprovedForAll(owner, msg.sender)\n        ) {\n            delete tokenApprovals[_tokenId];\n            removeOwnership(_from, _tokenId);\n            addOwnership(_to, _tokenId);\n            emit Transfer(_from, _to, _tokenId);\n            return;\n        }\n        revert(\"Caller is not owner nor approved\");\n    }\n\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\n    ///  `onERC721Received` on `_to` and throws if the return value is not\n    ///  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    /// @param _data Additional data with no specified format, sent in call to `_to`\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory _data) public {\n        _transfer(_from, _to, _tokenId);\n        require(_checkOnERC721Received(_from, _to, _tokenId, _data), \"Transfer to non ERC721 receiver\");\n    }\n\n    function removeOwnership(address _owner, uint256 _tokenId) internal {\n        UserData storage data = userData[_owner];\n        data.balance -= 1;\n        uint256 idx = _tokenId / 256;\n        uint256 bitfield = data.ownership[idx];\n        data.ownership[idx] = bitfield & ~(uint256(1) << (_tokenId % 256));\n    }\n\n    function addOwnership(address _owner, uint256 _tokenId) internal {\n        tokenOwners[_tokenId] = _owner;\n        UserData storage data = userData[_owner];\n        data.balance += 1;\n        uint256 idx = _tokenId / 256;\n        uint256 bitfield = data.ownership[idx];\n        data.ownership[idx] = bitfield | uint256(1) << (_tokenId % 256);\n    }\n\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev This works identically to the other function with an extra data parameter,\n    ///  except this function just sets data to \"\".\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external {\n        safeTransferFrom(_from, _to, _tokenId, bytes(\"\"));\n    }\n\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n    ///  THEY MAY BE PERMANENTLY LOST\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\n    ///  `_tokenId` is not a valid NFT.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function transferFrom(address _from, address _to, uint256 _tokenId) external {\n        _transfer(_from, _to, _tokenId);\n    }\n\n        /// @notice Change or reaffirm the approved address for an NFT\n    function approve(address approved, uint256 tokenId) public {\n        address owner = ownerOf(tokenId);\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender),\n            \"Not owner nor approved for all\"\n        );\n        tokenApprovals[tokenId] = approved;\n        emit Approval(owner, approved, tokenId);\n    }\n\n    /// @notice Get the approved address for a single NFT\n    function getApproved(uint256 tokenId) public view returns (address) {\n        ownerOf(tokenId);\n        return tokenApprovals[tokenId];\n    }\n\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage\n    ///         all of `msg.sender`'s assets\n    function setApprovalForAll(address operator, bool approved) external {\n        operatorApprovals[msg.sender][operator] = approved;\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    /// @notice Query if an address is an authorized operator for another address\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\n        return operatorApprovals[owner][operator];\n    }\n\n    /// @notice Concatenates tokenId to baseURI and returns the string.\n    function tokenURI(uint256 tokenId) public view returns (string memory) {\n        ownerOf(tokenId);\n        return tokenURIs[tokenId];\n    }\n\n    /// @notice Enumerate valid NFTs\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\n        require(_index < totalSupply, \"Index out of bounds\");\n        return _index;\n    }\n\n    /// @notice Enumerate NFTs assigned to an owner\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n        UserData storage data = userData[_owner];\n        require (_index < data.balance, \"Index out of bounds\");\n        uint256 bitfield;\n        uint256 count;\n        for (uint256 i = 0; i < 1024; i++) {\n            uint256 key = i % 256;\n            if (key == 0) {\n                bitfield = data.ownership[i / 256];\n            }\n            if ((bitfield >> key) & uint256(1) == 1) {\n                if (count == _index) {\n                    return i;\n                }\n                count++;\n            }\n        }\n        revert();\n    }\n\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    )\n        private\n        returns (bool)\n    {\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(to) }\n        if (size == 0) {\n            return true;\n        }\n\n        (bool success, bytes memory returnData) = to.call{ value: 0 }(\n            abi.encodeWithSelector(\n                ERC721TokenReceiver(to).onERC721Received.selector,\n                msg.sender,\n                from,\n                tokenId,\n                _data\n            )\n        );\n        require(success, \"Transfer to non ERC721 receiver\");\n        bytes4 returnValue = abi.decode(returnData, (bytes4));\n        return (returnValue == _ERC721_RECEIVED);\n    }\n\n}\n\n// File: Claimable.sol\n\ncontract EvohClaimable is EvohERC721 {\n\n    uint256 public maxTotalSupply;\n    bytes32 public hashRoot;\n    address public owner;\n\n    struct ClaimData {\n        bytes32 root;\n        uint256 count;\n        uint256 limit;\n        mapping(address => bool) claimed;\n    }\n\n    ClaimData[] public claimData;\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        bytes32 _hashRoot,\n        uint256 _maxTotalSupply\n    )\n        EvohERC721(_name, _symbol)\n    {\n        owner = msg.sender;\n        hashRoot = _hashRoot;\n        maxTotalSupply = _maxTotalSupply;\n    }\n\n    function addClaimRoots(bytes32[] calldata _merkleRoots, uint256[] calldata _claimLimits) external {\n        require(msg.sender == owner);\n        for (uint256 i = 0; i < _merkleRoots.length; i++) {\n            ClaimData storage data = claimData.push();\n            data.root = _merkleRoots[i];\n            data.limit = _claimLimits[i];\n        }\n    }\n\n    function isClaimed(uint256 _claimIndex, address _account) public view returns (bool) {\n        return claimData[_claimIndex].claimed[_account];\n    }\n\n    /**\n        @notice Claim an NFT using an eligible account\n        @dev Claiming requires two proofs. The \"claim proof\" validates that the calling\n             address is eligible to claim the airdrop. The \"hash proof\" valides that the\n             given IPFS hash for the airdropped NFT is valid, and comes next within the\n             sequence of claimable hashes.\n        @param _claimIndex Index of the claim hash to validate `_claimProof` against\n        @param _hashIndex Index of the hash proof being used. Hash proofs must be\n                          provided sequentially in order to be valid.\n        @param _hash IPFS hash of the NFT being claimed\n        @param _claimProof Proof to validate against the claim root\n        @param _hashProof Proof to validate against the hash root\n     */\n    function claim(\n        uint256 _claimIndex,\n        uint256 _hashIndex,\n        string calldata _hash,\n        bytes32[] calldata _claimProof,\n        bytes32[] calldata _hashProof\n    )\n        external\n    {\n        uint256 claimed = totalSupply;\n        require(maxTotalSupply > claimed, \"All NFTs claimed\");\n\n        // Verify the NFT hash\n        bytes32 node = keccak256(abi.encodePacked(_hashIndex, _hash));\n        require(_hashIndex == claimed, \"Incorrect hash index\");\n        require(verify(_hashProof, hashRoot, node), \"Invalid hash proof\");\n\n        // Verify the claim\n        node = keccak256(abi.encodePacked(msg.sender));\n        ClaimData storage data = claimData[_claimIndex];\n\n        require(_claimIndex < claimData.length, \"Invalid merkleIndex\");\n        require(data.count < data.limit, \"All NFTs claimed in this airdrop\");\n        require(!data.claimed[msg.sender], \"User has claimed in this airdrop\");\n        require(verify(_claimProof, data.root, node), \"Invalid claim proof\");\n\n        // Mark as claimed, write the hash and send the token.\n        data.count++;\n        data.claimed[msg.sender] = true;\n        tokenURIs[claimed] = _hash;\n\n        addOwnership(msg.sender, claimed);\n        emit Transfer(address(0), msg.sender, claimed);\n        totalSupply = claimed + 1;\n    }\n\n    function verify(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    )\n        internal\n        pure\n        returns (bool)\n    {\n        bytes32 computedHash = leaf;\n\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n\n        // Check if the computed hash (root) is equal to the provided root\n        return computedHash == root;\n    }\n\n\n}\n","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_hashRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maxTotalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_merkleRoots\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_claimLimits\",\"type\":\"uint256[]\"}],\"name\":\"addClaimRoots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hashIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"_claimProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_hashProof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EvohClaimable","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c03e2e1311030af1d6fc0fcb2ffb3f7504c5e252f9b3fbc25c3a4663dee876efc20000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000f4375727665204f47204c6c616d61730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000845766f682d435256000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}