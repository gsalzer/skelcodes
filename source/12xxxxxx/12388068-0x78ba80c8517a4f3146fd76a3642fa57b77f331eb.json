{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"details\": {\r\n        \"constantOptimizer\": true,\r\n        \"cse\": true,\r\n        \"deduplicate\": true,\r\n        \"jumpdestRemover\": true,\r\n        \"orderLiterals\": true,\r\n        \"peephole\": true,\r\n        \"yul\": false\r\n      },\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/integration-manager/IIntegrationManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IIntegrationManager interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for the IntegrationManager\\ninterface IIntegrationManager {\\n    enum SpendAssetsHandleType {None, Approve, Transfer, Remove}\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/integration-manager/integrations/IIntegrationAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../IIntegrationManager.sol\\\";\\n\\n/// @title Integration Adapter interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for all integration adapters\\ninterface IIntegrationAdapter {\\n    function identifier() external pure returns (string memory identifier_);\\n\\n    function parseAssetsForMethod(bytes4 _selector, bytes calldata _encodedCallArgs)\\n        external\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/integration-manager/integrations/adapters/CurveLiquidityAaveAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\n\\nimport \\\"../utils/actions/CurveAaveLiquidityActionsMixin.sol\\\";\\nimport \\\"../utils/actions/CurveGaugeV2RewardsHandlerBase.sol\\\";\\nimport \\\"../utils/actions/UniswapV2ActionsMixin.sol\\\";\\nimport \\\"../utils/AdapterBase2.sol\\\";\\n\\n/// @title CurveLiquidityAaveAdapter Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Adapter for liquidity provision in Curve's aave pool (https://www.curve.fi/aave)\\n/// @dev Rewards tokens are not included as spend assets or incoming assets for claimRewards()\\n/// or claimRewardsAndReinvest(). Rationale:\\n/// - rewards tokens can be claimed to the vault outside of the IntegrationManager, so no need\\n/// to enforce policy management or emit an event\\n/// - rewards tokens can be outside of the asset universe, in which case they cannot be tracked\\n/// This adapter will need to be re-deployed if UniswapV2 low liquidity becomes\\n/// a concern for rewards tokens when using claimRewardsAndReinvest().\\ncontract CurveLiquidityAaveAdapter is\\n    AdapterBase2,\\n    CurveGaugeV2RewardsHandlerBase,\\n    CurveAaveLiquidityActionsMixin,\\n    UniswapV2ActionsMixin\\n{\\n    address private immutable AAVE_DAI_TOKEN;\\n    address private immutable AAVE_USDC_TOKEN;\\n    address private immutable AAVE_USDT_TOKEN;\\n\\n    address private immutable DAI_TOKEN;\\n    address private immutable USDC_TOKEN;\\n    address private immutable USDT_TOKEN;\\n\\n    address private immutable LIQUIDITY_GAUGE_TOKEN;\\n    address private immutable LP_TOKEN;\\n    address private immutable WETH_TOKEN;\\n\\n    constructor(\\n        address _integrationManager,\\n        address _liquidityGaugeToken,\\n        address _lpToken,\\n        address _minter,\\n        address _pool,\\n        address _crvToken,\\n        address _wethToken,\\n        address[3] memory _aaveTokens, // [aDAI, aUSDC, aUSDT]\\n        address[3] memory _underlyingTokens, // [DAI, USDC, USDT]\\n        address _uniswapV2Router2\\n    )\\n        public\\n        AdapterBase2(_integrationManager)\\n        CurveAaveLiquidityActionsMixin(_pool, _aaveTokens, _underlyingTokens)\\n        CurveGaugeV2RewardsHandlerBase(_minter, _crvToken)\\n        UniswapV2ActionsMixin(_uniswapV2Router2)\\n    {\\n        AAVE_DAI_TOKEN = _aaveTokens[0];\\n        AAVE_USDC_TOKEN = _aaveTokens[1];\\n        AAVE_USDT_TOKEN = _aaveTokens[2];\\n\\n        DAI_TOKEN = _underlyingTokens[0];\\n        USDC_TOKEN = _underlyingTokens[1];\\n        USDT_TOKEN = _underlyingTokens[2];\\n\\n        LIQUIDITY_GAUGE_TOKEN = _liquidityGaugeToken;\\n        LP_TOKEN = _lpToken;\\n        WETH_TOKEN = _wethToken;\\n\\n        // Max approve liquidity gauge to spend LP token\\n        ERC20(_lpToken).safeApprove(_liquidityGaugeToken, type(uint256).max);\\n    }\\n\\n    // EXTERNAL FUNCTIONS\\n\\n    /// @notice Provides a constant string identifier for an adapter\\n    /// @return identifier_ The identifer string\\n    function identifier() external pure override returns (string memory identifier_) {\\n        return \\\"CURVE_LIQUIDITY_AAVE\\\";\\n    }\\n\\n    /// @notice Approves assets from the vault to be used by this contract.\\n    /// @dev No logic necessary. Exists only to grant adapter with necessary approvals from the vault,\\n    /// which takes place in the IntegrationManager.\\n    function approveAssets(\\n        address,\\n        bytes calldata,\\n        bytes calldata\\n    ) external {}\\n\\n    /// @notice Claims rewards from the Curve liquidity gauge as well as pool-specific rewards\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    function claimRewards(\\n        address _vaultProxy,\\n        bytes calldata,\\n        bytes calldata\\n    ) external onlyIntegrationManager {\\n        __curveGaugeV2ClaimAllRewards(LIQUIDITY_GAUGE_TOKEN, _vaultProxy);\\n    }\\n\\n    /// @notice Claims rewards and then compounds the accrued rewards back into the staked LP token\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _encodedCallArgs Encoded order parameters\\n    /// @param _encodedAssetTransferArgs Encoded args for expected assets to spend and receive\\n    /// @dev Requires the adapter to be granted an allowance of each reward token by the vault.\\n    /// For supported assets (e.g., CRV), this must be done via the `approveAssets()` function in this adapter.\\n    /// For unsupported assets, this must be done via `ComptrollerProxy.vaultCallOnContract()`.\\n    /// The `useFullBalances` option indicates whether to use only the newly claimed balances of\\n    /// rewards tokens, or whether to use the full balances of these assets in the vault.\\n    function claimRewardsAndReinvest(\\n        address _vaultProxy,\\n        bytes calldata _encodedCallArgs,\\n        bytes calldata _encodedAssetTransferArgs\\n    )\\n        external\\n        onlyIntegrationManager\\n        postActionIncomingAssetsTransferHandler(_vaultProxy, _encodedAssetTransferArgs)\\n    {\\n        (\\n            bool useFullBalances,\\n            uint256 minIncomingLiquidityGaugeTokenAmount,\\n            uint8 intermediaryUnderlyingAssetIndex\\n        ) = __decodeClaimRewardsAndReinvestCallArgs(_encodedCallArgs);\\n\\n        (\\n            address[] memory rewardsTokens,\\n            uint256[] memory rewardsTokenAmountsToUse\\n        ) = __curveGaugeV2ClaimRewardsAndPullBalances(\\n            LIQUIDITY_GAUGE_TOKEN,\\n            _vaultProxy,\\n            useFullBalances\\n        );\\n\\n        address intermediaryUnderlyingAsset = getAssetByPoolIndex(\\n            intermediaryUnderlyingAssetIndex,\\n            true\\n        );\\n\\n        // Swap all reward tokens to the designated pool underlying token via UniswapV2.\\n        // Note that if a reward token takes a fee on transfer,\\n        // we could not use these memory balances.\\n        __uniswapV2SwapManyToOne(\\n            address(this),\\n            rewardsTokens,\\n            rewardsTokenAmountsToUse,\\n            intermediaryUnderlyingAsset,\\n            WETH_TOKEN\\n        );\\n\\n        // Lend all received underlying for staked LP tokens\\n        uint256 intermediaryUnderlyingAssetBalance = ERC20(intermediaryUnderlyingAsset).balanceOf(\\n            address(this)\\n        );\\n        if (intermediaryUnderlyingAssetBalance > 0) {\\n            uint256[3] memory orderedUnderlyingAssetAmounts;\\n            orderedUnderlyingAssetAmounts[intermediaryUnderlyingAssetIndex] = intermediaryUnderlyingAssetBalance;\\n\\n            __curveAaveLend(\\n                orderedUnderlyingAssetAmounts,\\n                minIncomingLiquidityGaugeTokenAmount,\\n                true\\n            );\\n            __curveGaugeV2Stake(\\n                LIQUIDITY_GAUGE_TOKEN,\\n                LP_TOKEN,\\n                ERC20(LP_TOKEN).balanceOf(address(this))\\n            );\\n        }\\n    }\\n\\n    /// @notice Claims rewards and then swaps the rewards tokens to the specified asset via UniswapV2\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _encodedCallArgs Encoded order parameters\\n    /// @dev Requires the adapter to be granted an allowance of each reward token by the vault.\\n    /// For supported assets (e.g., CRV), this must be done via the `approveAssets()` function in this adapter.\\n    /// For unsupported assets, this must be done via `ComptrollerProxy.vaultCallOnContract()`.\\n    /// The `useFullBalances` option indicates whether to use only the newly claimed balances of\\n    /// rewards tokens, or whether to use the full balances of these assets in the vault.\\n    function claimRewardsAndSwap(\\n        address _vaultProxy,\\n        bytes calldata _encodedCallArgs,\\n        bytes calldata\\n    ) external onlyIntegrationManager {\\n        (bool useFullBalances, address incomingAsset, ) = __decodeClaimRewardsAndSwapCallArgs(\\n            _encodedCallArgs\\n        );\\n\\n        (\\n            address[] memory rewardsTokens,\\n            uint256[] memory rewardsTokenAmountsToUse\\n        ) = __curveGaugeV2ClaimRewardsAndPullBalances(\\n            LIQUIDITY_GAUGE_TOKEN,\\n            _vaultProxy,\\n            useFullBalances\\n        );\\n\\n        // Swap all reward tokens to the designated incomingAsset via UniswapV2.\\n        // Note that if a reward token takes a fee on transfer,\\n        // we could not use these memory balances.\\n        __uniswapV2SwapManyToOne(\\n            _vaultProxy,\\n            rewardsTokens,\\n            rewardsTokenAmountsToUse,\\n            incomingAsset,\\n            WETH_TOKEN\\n        );\\n    }\\n\\n    /// @notice Lends assets for LP tokens\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _encodedCallArgs Encoded order parameters\\n    /// @param _encodedAssetTransferArgs Encoded args for expected assets to spend and receive\\n    function lend(\\n        address _vaultProxy,\\n        bytes calldata _encodedCallArgs,\\n        bytes calldata _encodedAssetTransferArgs\\n    )\\n        external\\n        onlyIntegrationManager\\n        postActionIncomingAssetsTransferHandler(_vaultProxy, _encodedAssetTransferArgs)\\n    {\\n        (\\n            uint256[3] memory orderedOutgoingAmounts,\\n            uint256 minIncomingLPTokenAmount,\\n            bool useUnderlyings\\n        ) = __decodeLendCallArgs(_encodedCallArgs);\\n\\n        __curveAaveLend(orderedOutgoingAmounts, minIncomingLPTokenAmount, useUnderlyings);\\n    }\\n\\n    /// @notice Lends assets for LP tokens, then stakes the received LP tokens\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _encodedCallArgs Encoded order parameters\\n    /// @param _encodedAssetTransferArgs Encoded args for expected assets to spend and receive\\n    function lendAndStake(\\n        address _vaultProxy,\\n        bytes calldata _encodedCallArgs,\\n        bytes calldata _encodedAssetTransferArgs\\n    )\\n        external\\n        onlyIntegrationManager\\n        postActionIncomingAssetsTransferHandler(_vaultProxy, _encodedAssetTransferArgs)\\n    {\\n        (\\n            uint256[3] memory orderedOutgoingAmounts,\\n            uint256 minIncomingLiquidityGaugeTokenAmount,\\n            bool useUnderlyings\\n        ) = __decodeLendCallArgs(_encodedCallArgs);\\n\\n        __curveAaveLend(\\n            orderedOutgoingAmounts,\\n            minIncomingLiquidityGaugeTokenAmount,\\n            useUnderlyings\\n        );\\n        __curveGaugeV2Stake(\\n            LIQUIDITY_GAUGE_TOKEN,\\n            LP_TOKEN,\\n            ERC20(LP_TOKEN).balanceOf(address(this))\\n        );\\n    }\\n\\n    /// @notice Redeems LP tokens\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _encodedCallArgs Encoded order parameters\\n    /// @param _encodedAssetTransferArgs Encoded args for expected assets to spend and receive\\n    function redeem(\\n        address _vaultProxy,\\n        bytes calldata _encodedCallArgs,\\n        bytes calldata _encodedAssetTransferArgs\\n    )\\n        external\\n        onlyIntegrationManager\\n        postActionIncomingAssetsTransferHandler(_vaultProxy, _encodedAssetTransferArgs)\\n    {\\n        (\\n            uint256 outgoingLPTokenAmount,\\n            uint256[3] memory orderedMinIncomingAssetAmounts,\\n            bool redeemSingleAsset,\\n            bool useUnderlyings\\n        ) = __decodeRedeemCallArgs(_encodedCallArgs);\\n\\n        __curveAaveRedeem(\\n            outgoingLPTokenAmount,\\n            orderedMinIncomingAssetAmounts,\\n            redeemSingleAsset,\\n            useUnderlyings\\n        );\\n    }\\n\\n    /// @notice Stakes LP tokens\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _encodedCallArgs Encoded order parameters\\n    /// @param _encodedAssetTransferArgs Encoded args for expected assets to spend and receive\\n    function stake(\\n        address _vaultProxy,\\n        bytes calldata _encodedCallArgs,\\n        bytes calldata _encodedAssetTransferArgs\\n    )\\n        external\\n        onlyIntegrationManager\\n        postActionIncomingAssetsTransferHandler(_vaultProxy, _encodedAssetTransferArgs)\\n    {\\n        uint256 outgoingLPTokenAmount = __decodeStakeCallArgs(_encodedCallArgs);\\n\\n        __curveGaugeV2Stake(LIQUIDITY_GAUGE_TOKEN, LP_TOKEN, outgoingLPTokenAmount);\\n    }\\n\\n    /// @notice Unstakes LP tokens\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _encodedCallArgs Encoded order parameters\\n    /// @param _encodedAssetTransferArgs Encoded args for expected assets to spend and receive\\n    function unstake(\\n        address _vaultProxy,\\n        bytes calldata _encodedCallArgs,\\n        bytes calldata _encodedAssetTransferArgs\\n    )\\n        external\\n        onlyIntegrationManager\\n        postActionIncomingAssetsTransferHandler(_vaultProxy, _encodedAssetTransferArgs)\\n    {\\n        uint256 outgoingLiquidityGaugeTokenAmount = __decodeUnstakeCallArgs(_encodedCallArgs);\\n\\n        __curveGaugeV2Unstake(LIQUIDITY_GAUGE_TOKEN, outgoingLiquidityGaugeTokenAmount);\\n    }\\n\\n    /// @notice Unstakes LP tokens, then redeems them\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _encodedCallArgs Encoded order parameters\\n    /// @param _encodedAssetTransferArgs Encoded args for expected assets to spend and receive\\n    function unstakeAndRedeem(\\n        address _vaultProxy,\\n        bytes calldata _encodedCallArgs,\\n        bytes calldata _encodedAssetTransferArgs\\n    )\\n        external\\n        onlyIntegrationManager\\n        postActionIncomingAssetsTransferHandler(_vaultProxy, _encodedAssetTransferArgs)\\n    {\\n        (\\n            uint256 outgoingLiquidityGaugeTokenAmount,\\n            uint256[3] memory orderedMinIncomingAssetAmounts,\\n            bool redeemSingleAsset,\\n            bool useUnderlyings\\n        ) = __decodeRedeemCallArgs(_encodedCallArgs);\\n\\n        __curveGaugeV2Unstake(LIQUIDITY_GAUGE_TOKEN, outgoingLiquidityGaugeTokenAmount);\\n        __curveAaveRedeem(\\n            outgoingLiquidityGaugeTokenAmount,\\n            orderedMinIncomingAssetAmounts,\\n            redeemSingleAsset,\\n            useUnderlyings\\n        );\\n    }\\n\\n    /////////////////////////////\\n    // PARSE ASSETS FOR METHOD //\\n    /////////////////////////////\\n\\n    /// @notice Parses the expected assets to receive from a call on integration\\n    /// @param _selector The function selector for the callOnIntegration\\n    /// @param _encodedCallArgs The encoded parameters for the callOnIntegration\\n    /// @return spendAssetsHandleType_ A type that dictates how to handle granting\\n    /// the adapter access to spend assets (`None` by default)\\n    /// @return spendAssets_ The assets to spend in the call\\n    /// @return spendAssetAmounts_ The max asset amounts to spend in the call\\n    /// @return incomingAssets_ The assets to receive in the call\\n    /// @return minIncomingAssetAmounts_ The min asset amounts to receive in the call\\n    function parseAssetsForMethod(bytes4 _selector, bytes calldata _encodedCallArgs)\\n        external\\n        view\\n        override\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        if (_selector == APPROVE_ASSETS_SELECTOR) {\\n            return __parseAssetsForApproveAssets(_encodedCallArgs);\\n        } else if (_selector == CLAIM_REWARDS_SELECTOR) {\\n            return __parseAssetsForClaimRewards();\\n        } else if (_selector == CLAIM_REWARDS_AND_REINVEST_SELECTOR) {\\n            return __parseAssetsForClaimRewardsAndReinvest(_encodedCallArgs);\\n        } else if (_selector == CLAIM_REWARDS_AND_SWAP_SELECTOR) {\\n            return __parseAssetsForClaimRewardsAndSwap(_encodedCallArgs);\\n        } else if (_selector == LEND_SELECTOR) {\\n            return __parseAssetsForLend(_encodedCallArgs);\\n        } else if (_selector == LEND_AND_STAKE_SELECTOR) {\\n            return __parseAssetsForLendAndStake(_encodedCallArgs);\\n        } else if (_selector == REDEEM_SELECTOR) {\\n            return __parseAssetsForRedeem(_encodedCallArgs);\\n        } else if (_selector == STAKE_SELECTOR) {\\n            return __parseAssetsForStake(_encodedCallArgs);\\n        } else if (_selector == UNSTAKE_SELECTOR) {\\n            return __parseAssetsForUnstake(_encodedCallArgs);\\n        } else if (_selector == UNSTAKE_AND_REDEEM_SELECTOR) {\\n            return __parseAssetsForUnstakeAndRedeem(_encodedCallArgs);\\n        }\\n\\n        revert(\\\"parseAssetsForMethod: _selector invalid\\\");\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during approveAssets() calls\\n    function __parseAssetsForApproveAssets(bytes calldata _encodedCallArgs)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        (spendAssets_, spendAssetAmounts_) = __decodeApproveAssetsCallArgs(_encodedCallArgs);\\n        require(\\n            spendAssets_.length == spendAssetAmounts_.length,\\n            \\\"__parseAssetsForApproveAssets: Unequal arrays\\\"\\n        );\\n\\n        // Validate that only rewards tokens are given allowances\\n        address[] memory rewardsTokens = __curveGaugeV2GetRewardsTokensWithCrv(\\n            LIQUIDITY_GAUGE_TOKEN\\n        );\\n        for (uint256 i; i < spendAssets_.length; i++) {\\n            // Allow revoking approval for any asset\\n            if (spendAssetAmounts_[i] > 0) {\\n                require(\\n                    rewardsTokens.contains(spendAssets_[i]),\\n                    \\\"__parseAssetsForApproveAssets: Invalid reward token\\\"\\n                );\\n            }\\n        }\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Approve,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            new address[](0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during claimRewards() calls.\\n    /// No action required, all values empty.\\n    function __parseAssetsForClaimRewards()\\n        private\\n        pure\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.None,\\n            new address[](0),\\n            new uint256[](0),\\n            new address[](0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during claimRewardsAndReinvest() calls.\\n    function __parseAssetsForClaimRewardsAndReinvest(bytes calldata _encodedCallArgs)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        (\\n            ,\\n            uint256 minIncomingLiquidityGaugeTokenAmount,\\n            uint8 intermediaryUnderlyingAssetIndex\\n        ) = __decodeClaimRewardsAndReinvestCallArgs(_encodedCallArgs);\\n        require(\\n            intermediaryUnderlyingAssetIndex < 3,\\n            \\\"__parseAssetsForClaimRewardsAndReinvest: Out-of-bounds intermediaryUnderlyingAssetIndex\\\"\\n        );\\n\\n        incomingAssets_ = new address[](1);\\n        incomingAssets_[0] = LIQUIDITY_GAUGE_TOKEN;\\n\\n        minIncomingAssetAmounts_ = new uint256[](1);\\n        minIncomingAssetAmounts_[0] = minIncomingLiquidityGaugeTokenAmount;\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.None,\\n            new address[](0),\\n            new uint256[](0),\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during claimRewardsAndSwap() calls.\\n    function __parseAssetsForClaimRewardsAndSwap(bytes calldata _encodedCallArgs)\\n        private\\n        pure\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        (\\n            ,\\n            address incomingAsset,\\n            uint256 minIncomingAssetAmount\\n        ) = __decodeClaimRewardsAndSwapCallArgs(_encodedCallArgs);\\n\\n        incomingAssets_ = new address[](1);\\n        incomingAssets_[0] = incomingAsset;\\n\\n        minIncomingAssetAmounts_ = new uint256[](1);\\n        minIncomingAssetAmounts_[0] = minIncomingAssetAmount;\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.None,\\n            new address[](0),\\n            new uint256[](0),\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during lend() calls\\n    function __parseAssetsForLend(bytes calldata _encodedCallArgs)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        (\\n            uint256[3] memory orderedOutgoingAssetAmounts,\\n            uint256 minIncomingLpTokenAmount,\\n            bool useUnderlyings\\n        ) = __decodeLendCallArgs(_encodedCallArgs);\\n\\n        (spendAssets_, spendAssetAmounts_) = __parseSpendAssetsForLendingCalls(\\n            orderedOutgoingAssetAmounts,\\n            useUnderlyings\\n        );\\n\\n        incomingAssets_ = new address[](1);\\n        incomingAssets_[0] = LP_TOKEN;\\n\\n        minIncomingAssetAmounts_ = new uint256[](1);\\n        minIncomingAssetAmounts_[0] = minIncomingLpTokenAmount;\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during lendAndStake() calls\\n    function __parseAssetsForLendAndStake(bytes calldata _encodedCallArgs)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        (\\n            uint256[3] memory orderedOutgoingAssetAmounts,\\n            uint256 minIncomingLiquidityGaugeTokenAmount,\\n            bool useUnderlyings\\n        ) = __decodeLendCallArgs(_encodedCallArgs);\\n\\n        (spendAssets_, spendAssetAmounts_) = __parseSpendAssetsForLendingCalls(\\n            orderedOutgoingAssetAmounts,\\n            useUnderlyings\\n        );\\n\\n        incomingAssets_ = new address[](1);\\n        incomingAssets_[0] = LIQUIDITY_GAUGE_TOKEN;\\n\\n        minIncomingAssetAmounts_ = new uint256[](1);\\n        minIncomingAssetAmounts_[0] = minIncomingLiquidityGaugeTokenAmount;\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during redeem() calls\\n    function __parseAssetsForRedeem(bytes calldata _encodedCallArgs)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        (\\n            uint256 outgoingLpTokenAmount,\\n            uint256[3] memory orderedMinIncomingAssetAmounts,\\n            bool receiveSingleAsset,\\n            bool useUnderlyings\\n        ) = __decodeRedeemCallArgs(_encodedCallArgs);\\n\\n        spendAssets_ = new address[](1);\\n        spendAssets_[0] = LP_TOKEN;\\n\\n        spendAssetAmounts_ = new uint256[](1);\\n        spendAssetAmounts_[0] = outgoingLpTokenAmount;\\n\\n        (incomingAssets_, minIncomingAssetAmounts_) = __parseIncomingAssetsForRedemptionCalls(\\n            orderedMinIncomingAssetAmounts,\\n            receiveSingleAsset,\\n            useUnderlyings\\n        );\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during stake() calls\\n    function __parseAssetsForStake(bytes calldata _encodedCallArgs)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        uint256 outgoingLpTokenAmount = __decodeStakeCallArgs(_encodedCallArgs);\\n\\n        spendAssets_ = new address[](1);\\n        spendAssets_[0] = LP_TOKEN;\\n\\n        spendAssetAmounts_ = new uint256[](1);\\n        spendAssetAmounts_[0] = outgoingLpTokenAmount;\\n\\n        incomingAssets_ = new address[](1);\\n        incomingAssets_[0] = LIQUIDITY_GAUGE_TOKEN;\\n\\n        minIncomingAssetAmounts_ = new uint256[](1);\\n        minIncomingAssetAmounts_[0] = outgoingLpTokenAmount;\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during unstake() calls\\n    function __parseAssetsForUnstake(bytes calldata _encodedCallArgs)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        uint256 outgoingLiquidityGaugeTokenAmount = __decodeUnstakeCallArgs(_encodedCallArgs);\\n\\n        spendAssets_ = new address[](1);\\n        spendAssets_[0] = LIQUIDITY_GAUGE_TOKEN;\\n\\n        spendAssetAmounts_ = new uint256[](1);\\n        spendAssetAmounts_[0] = outgoingLiquidityGaugeTokenAmount;\\n\\n        incomingAssets_ = new address[](1);\\n        incomingAssets_[0] = LP_TOKEN;\\n\\n        minIncomingAssetAmounts_ = new uint256[](1);\\n        minIncomingAssetAmounts_[0] = outgoingLiquidityGaugeTokenAmount;\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during unstakeAndRedeem() calls\\n    function __parseAssetsForUnstakeAndRedeem(bytes calldata _encodedCallArgs)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        (\\n            uint256 outgoingLiquidityGaugeTokenAmount,\\n            uint256[3] memory orderedMinIncomingAssetAmounts,\\n            bool receiveSingleAsset,\\n            bool useUnderlyings\\n        ) = __decodeRedeemCallArgs(_encodedCallArgs);\\n\\n        spendAssets_ = new address[](1);\\n        spendAssets_[0] = LIQUIDITY_GAUGE_TOKEN;\\n\\n        spendAssetAmounts_ = new uint256[](1);\\n        spendAssetAmounts_[0] = outgoingLiquidityGaugeTokenAmount;\\n\\n        (incomingAssets_, minIncomingAssetAmounts_) = __parseIncomingAssetsForRedemptionCalls(\\n            orderedMinIncomingAssetAmounts,\\n            receiveSingleAsset,\\n            useUnderlyings\\n        );\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend assets for redeem() and unstakeAndRedeem() calls\\n    function __parseIncomingAssetsForRedemptionCalls(\\n        uint256[3] memory _orderedMinIncomingAssetAmounts,\\n        bool _receiveSingleAsset,\\n        bool _useUnderlyings\\n    )\\n        private\\n        view\\n        returns (address[] memory incomingAssets_, uint256[] memory minIncomingAssetAmounts_)\\n    {\\n        if (_receiveSingleAsset) {\\n            incomingAssets_ = new address[](1);\\n            minIncomingAssetAmounts_ = new uint256[](1);\\n\\n            for (uint256 i; i < _orderedMinIncomingAssetAmounts.length; i++) {\\n                if (_orderedMinIncomingAssetAmounts[i] == 0) {\\n                    continue;\\n                }\\n\\n                // Validate that only one min asset amount is set\\n                for (uint256 j = i + 1; j < _orderedMinIncomingAssetAmounts.length; j++) {\\n                    require(\\n                        _orderedMinIncomingAssetAmounts[j] == 0,\\n                        \\\"__parseIncomingAssetsForRedemptionCalls: Too many min asset amounts specified\\\"\\n                    );\\n                }\\n\\n                incomingAssets_[0] = getAssetByPoolIndex(i, _useUnderlyings);\\n                minIncomingAssetAmounts_[0] = _orderedMinIncomingAssetAmounts[i];\\n\\n                break;\\n            }\\n            require(\\n                incomingAssets_[0] != address(0),\\n                \\\"__parseIncomingAssetsForRedemptionCalls: No min asset amount\\\"\\n            );\\n        } else {\\n            incomingAssets_ = new address[](3);\\n            minIncomingAssetAmounts_ = new uint256[](3);\\n            for (uint256 i; i < incomingAssets_.length; i++) {\\n                incomingAssets_[i] = getAssetByPoolIndex(i, _useUnderlyings);\\n                minIncomingAssetAmounts_[i] = _orderedMinIncomingAssetAmounts[i];\\n            }\\n        }\\n\\n        return (incomingAssets_, minIncomingAssetAmounts_);\\n    }\\n\\n    /// @dev Helper function to parse spend assets for lend() and lendAndStake() calls\\n    function __parseSpendAssetsForLendingCalls(\\n        uint256[3] memory _orderedOutgoingAssetAmounts,\\n        bool _useUnderlyings\\n    ) private view returns (address[] memory spendAssets_, uint256[] memory spendAssetAmounts_) {\\n        uint256 spendAssetsCount;\\n        for (uint256 i; i < _orderedOutgoingAssetAmounts.length; i++) {\\n            if (_orderedOutgoingAssetAmounts[i] > 0) {\\n                spendAssetsCount++;\\n            }\\n        }\\n\\n        spendAssets_ = new address[](spendAssetsCount);\\n        spendAssetAmounts_ = new uint256[](spendAssetsCount);\\n        uint256 spendAssetsIndex;\\n        for (uint256 i; i < _orderedOutgoingAssetAmounts.length; i++) {\\n            if (_orderedOutgoingAssetAmounts[i] > 0) {\\n                spendAssets_[spendAssetsIndex] = getAssetByPoolIndex(i, _useUnderlyings);\\n                spendAssetAmounts_[spendAssetsIndex] = _orderedOutgoingAssetAmounts[i];\\n                spendAssetsIndex++;\\n            }\\n        }\\n\\n        return (spendAssets_, spendAssetAmounts_);\\n    }\\n\\n    ///////////////////////\\n    // ENCODED CALL ARGS //\\n    ///////////////////////\\n\\n    /// @dev Helper to decode the encoded call arguments for approving asset allowances\\n    function __decodeApproveAssetsCallArgs(bytes memory _encodedCallArgs)\\n        private\\n        pure\\n        returns (address[] memory assets_, uint256[] memory amounts_)\\n    {\\n        return abi.decode(_encodedCallArgs, (address[], uint256[]));\\n    }\\n\\n    /// @dev Helper to decode the encoded call arguments for claiming rewards and reinvesting\\n    function __decodeClaimRewardsAndReinvestCallArgs(bytes memory _encodedCallArgs)\\n        private\\n        pure\\n        returns (\\n            bool useFullBalances_,\\n            uint256 minIncomingLiquidityGaugeTokenAmount_,\\n            uint8 intermediaryUnderlyingAssetIndex_\\n        )\\n    {\\n        return abi.decode(_encodedCallArgs, (bool, uint256, uint8));\\n    }\\n\\n    /// @dev Helper to decode the encoded call arguments for claiming rewards and swapping\\n    function __decodeClaimRewardsAndSwapCallArgs(bytes memory _encodedCallArgs)\\n        private\\n        pure\\n        returns (\\n            bool useFullBalances_,\\n            address incomingAsset_,\\n            uint256 minIncomingAssetAmount_\\n        )\\n    {\\n        return abi.decode(_encodedCallArgs, (bool, address, uint256));\\n    }\\n\\n    /// @dev Helper to decode the encoded call arguments for lending\\n    function __decodeLendCallArgs(bytes memory _encodedCallArgs)\\n        private\\n        pure\\n        returns (\\n            uint256[3] memory orderedOutgoingAmounts_,\\n            uint256 minIncomingAssetAmount_,\\n            bool useUnderlyings_\\n        )\\n    {\\n        return abi.decode(_encodedCallArgs, (uint256[3], uint256, bool));\\n    }\\n\\n    /// @dev Helper to decode the encoded call arguments for redeeming.\\n    /// If `receiveSingleAsset_` is `true`, then one (and only one) of\\n    /// the orderedMinIncomingAmounts_ must be >0 to indicate which asset is to be received.\\n    function __decodeRedeemCallArgs(bytes memory _encodedCallArgs)\\n        private\\n        pure\\n        returns (\\n            uint256 outgoingAssetAmount_,\\n            uint256[3] memory orderedMinIncomingAmounts_,\\n            bool receiveSingleAsset_,\\n            bool useUnderlyings_\\n        )\\n    {\\n        return abi.decode(_encodedCallArgs, (uint256, uint256[3], bool, bool));\\n    }\\n\\n    /// @dev Helper to decode the encoded call arguments for staking\\n    function __decodeStakeCallArgs(bytes memory _encodedCallArgs)\\n        private\\n        pure\\n        returns (uint256 outgoingLPTokenAmount_)\\n    {\\n        return abi.decode(_encodedCallArgs, (uint256));\\n    }\\n\\n    /// @dev Helper to decode the encoded call arguments for unstaking\\n    function __decodeUnstakeCallArgs(bytes memory _encodedCallArgs)\\n        private\\n        pure\\n        returns (uint256 outgoingLiquidityGaugeTokenAmount_)\\n    {\\n        return abi.decode(_encodedCallArgs, (uint256));\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `LIQUIDITY_GAUGE_TOKEN` variable\\n    /// @return liquidityGaugeToken_ The `LIQUIDITY_GAUGE_TOKEN` variable value\\n    function getLiquidityGaugeToken() external view returns (address liquidityGaugeToken_) {\\n        return LIQUIDITY_GAUGE_TOKEN;\\n    }\\n\\n    /// @notice Gets the `LP_TOKEN` variable\\n    /// @return lpToken_ The `LP_TOKEN` variable value\\n    function getLpToken() external view returns (address lpToken_) {\\n        return LP_TOKEN;\\n    }\\n\\n    /// @notice Gets the `WETH_TOKEN` variable\\n    /// @return wethToken_ The `WETH_TOKEN` variable value\\n    function getWethToken() external view returns (address wethToken_) {\\n        return WETH_TOKEN;\\n    }\\n\\n    /// @notice Gets an asset by its pool index and whether or not to use the underlying\\n    /// instead of the aToken\\n    function getAssetByPoolIndex(uint256 _index, bool _useUnderlying)\\n        public\\n        view\\n        returns (address asset_)\\n    {\\n        if (_index == 0) {\\n            if (_useUnderlying) {\\n                return DAI_TOKEN;\\n            }\\n            return AAVE_DAI_TOKEN;\\n        } else if (_index == 1) {\\n            if (_useUnderlying) {\\n                return USDC_TOKEN;\\n            }\\n            return AAVE_USDC_TOKEN;\\n        } else if (_index == 2) {\\n            if (_useUnderlying) {\\n                return USDT_TOKEN;\\n            }\\n            return AAVE_USDT_TOKEN;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/integration-manager/integrations/utils/AdapterBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../IIntegrationAdapter.sol\\\";\\nimport \\\"./IntegrationSelectors.sol\\\";\\n\\n/// @title AdapterBase Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A base contract for integration adapters\\nabstract contract AdapterBase is IIntegrationAdapter, IntegrationSelectors {\\n    using SafeERC20 for ERC20;\\n\\n    address internal immutable INTEGRATION_MANAGER;\\n\\n    /// @dev Provides a standard implementation for transferring assets between\\n    /// the fund's VaultProxy and the adapter, by wrapping the adapter action.\\n    /// This modifier should be implemented in almost all adapter actions, unless they\\n    /// do not move assets or can spend and receive assets directly with the VaultProxy\\n    modifier fundAssetsTransferHandler(\\n        address _vaultProxy,\\n        bytes memory _encodedAssetTransferArgs\\n    ) {\\n        (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType,\\n            address[] memory spendAssets,\\n            uint256[] memory spendAssetAmounts,\\n            address[] memory incomingAssets\\n        ) = __decodeEncodedAssetTransferArgs(_encodedAssetTransferArgs);\\n\\n        // Take custody of spend assets (if necessary)\\n        if (spendAssetsHandleType == IIntegrationManager.SpendAssetsHandleType.Approve) {\\n            for (uint256 i = 0; i < spendAssets.length; i++) {\\n                ERC20(spendAssets[i]).safeTransferFrom(\\n                    _vaultProxy,\\n                    address(this),\\n                    spendAssetAmounts[i]\\n                );\\n            }\\n        }\\n\\n        // Execute call\\n        _;\\n\\n        // Transfer remaining assets back to the fund's VaultProxy\\n        __transferContractAssetBalancesToFund(_vaultProxy, incomingAssets);\\n        __transferContractAssetBalancesToFund(_vaultProxy, spendAssets);\\n    }\\n\\n    modifier onlyIntegrationManager {\\n        require(\\n            msg.sender == INTEGRATION_MANAGER,\\n            \\\"Only the IntegrationManager can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _integrationManager) public {\\n        INTEGRATION_MANAGER = _integrationManager;\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    /// @dev Helper for adapters to approve their integratees with the max amount of an asset.\\n    /// Since everything is done atomically, and only the balances to-be-used are sent to adapters,\\n    /// there is no need to approve exact amounts on every call.\\n    function __approveMaxAsNeeded(\\n        address _asset,\\n        address _target,\\n        uint256 _neededAmount\\n    ) internal {\\n        if (ERC20(_asset).allowance(address(this), _target) < _neededAmount) {\\n            ERC20(_asset).safeApprove(_target, type(uint256).max);\\n        }\\n    }\\n\\n    /// @dev Helper to decode the _encodedAssetTransferArgs param passed to adapter call\\n    function __decodeEncodedAssetTransferArgs(bytes memory _encodedAssetTransferArgs)\\n        internal\\n        pure\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_\\n        )\\n    {\\n        return\\n            abi.decode(\\n                _encodedAssetTransferArgs,\\n                (IIntegrationManager.SpendAssetsHandleType, address[], uint256[], address[])\\n            );\\n    }\\n\\n    /// @dev Helper to transfer full contract balances of assets to the specified VaultProxy\\n    function __transferContractAssetBalancesToFund(address _vaultProxy, address[] memory _assets)\\n        private\\n    {\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            uint256 postCallAmount = ERC20(_assets[i]).balanceOf(address(this));\\n            if (postCallAmount > 0) {\\n                ERC20(_assets[i]).safeTransfer(_vaultProxy, postCallAmount);\\n            }\\n        }\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `INTEGRATION_MANAGER` variable\\n    /// @return integrationManager_ The `INTEGRATION_MANAGER` variable value\\n    function getIntegrationManager() external view returns (address integrationManager_) {\\n        return INTEGRATION_MANAGER;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/integration-manager/integrations/utils/AdapterBase2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./AdapterBase.sol\\\";\\n\\n/// @title AdapterBase2 Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A base contract for integration adapters that extends AdapterBase\\n/// @dev This is a temporary contract that will be merged into AdapterBase with the next release\\nabstract contract AdapterBase2 is AdapterBase {\\n    /// @dev Provides a standard implementation for transferring incoming assets and\\n    /// unspent spend assets from an adapter to a VaultProxy at the end of an adapter action\\n    modifier postActionAssetsTransferHandler(\\n        address _vaultProxy,\\n        bytes memory _encodedAssetTransferArgs\\n    ) {\\n        _;\\n\\n        (\\n            ,\\n            address[] memory spendAssets,\\n            ,\\n            address[] memory incomingAssets\\n        ) = __decodeEncodedAssetTransferArgs(_encodedAssetTransferArgs);\\n\\n        __transferFullAssetBalances(_vaultProxy, incomingAssets);\\n        __transferFullAssetBalances(_vaultProxy, spendAssets);\\n    }\\n\\n    /// @dev Provides a standard implementation for transferring incoming assets\\n    /// from an adapter to a VaultProxy at the end of an adapter action\\n    modifier postActionIncomingAssetsTransferHandler(\\n        address _vaultProxy,\\n        bytes memory _encodedAssetTransferArgs\\n    ) {\\n        _;\\n\\n        (, , , address[] memory incomingAssets) = __decodeEncodedAssetTransferArgs(\\n            _encodedAssetTransferArgs\\n        );\\n\\n        __transferFullAssetBalances(_vaultProxy, incomingAssets);\\n    }\\n\\n    /// @dev Provides a standard implementation for transferring unspent spend assets\\n    /// from an adapter to a VaultProxy at the end of an adapter action\\n    modifier postActionSpendAssetsTransferHandler(\\n        address _vaultProxy,\\n        bytes memory _encodedAssetTransferArgs\\n    ) {\\n        _;\\n\\n        (, address[] memory spendAssets, , ) = __decodeEncodedAssetTransferArgs(\\n            _encodedAssetTransferArgs\\n        );\\n\\n        __transferFullAssetBalances(_vaultProxy, spendAssets);\\n    }\\n\\n    constructor(address _integrationManager) public AdapterBase(_integrationManager) {}\\n\\n    /// @dev Helper to transfer full asset balances of current contract to the specified target\\n    function __transferFullAssetBalances(address _target, address[] memory _assets) internal {\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            uint256 balance = ERC20(_assets[i]).balanceOf(address(this));\\n            if (balance > 0) {\\n                ERC20(_assets[i]).safeTransfer(_target, balance);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/integration-manager/integrations/utils/IntegrationSelectors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IntegrationSelectors Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Selectors for integration actions\\n/// @dev Selectors are created from their signatures rather than hardcoded for easy verification\\nabstract contract IntegrationSelectors {\\n    bytes4 public constant ADD_TRACKED_ASSETS_SELECTOR = bytes4(\\n        keccak256(\\\"addTrackedAssets(address,bytes,bytes)\\\")\\n    );\\n\\n    // Asset approval\\n    bytes4 public constant APPROVE_ASSETS_SELECTOR = bytes4(\\n        keccak256(\\\"approveAssets(address,bytes,bytes)\\\")\\n    );\\n\\n    // Trading\\n    bytes4 public constant TAKE_ORDER_SELECTOR = bytes4(\\n        keccak256(\\\"takeOrder(address,bytes,bytes)\\\")\\n    );\\n\\n    // Lending\\n    bytes4 public constant LEND_SELECTOR = bytes4(keccak256(\\\"lend(address,bytes,bytes)\\\"));\\n    bytes4 public constant REDEEM_SELECTOR = bytes4(keccak256(\\\"redeem(address,bytes,bytes)\\\"));\\n\\n    // Staking\\n    bytes4 public constant STAKE_SELECTOR = bytes4(keccak256(\\\"stake(address,bytes,bytes)\\\"));\\n    bytes4 public constant UNSTAKE_SELECTOR = bytes4(keccak256(\\\"unstake(address,bytes,bytes)\\\"));\\n\\n    // Rewards\\n    bytes4 public constant CLAIM_REWARDS_SELECTOR = bytes4(\\n        keccak256(\\\"claimRewards(address,bytes,bytes)\\\")\\n    );\\n\\n    // Combined\\n    bytes4 public constant CLAIM_REWARDS_AND_REINVEST_SELECTOR = bytes4(\\n        keccak256(\\\"claimRewardsAndReinvest(address,bytes,bytes)\\\")\\n    );\\n    bytes4 public constant CLAIM_REWARDS_AND_SWAP_SELECTOR = bytes4(\\n        keccak256(\\\"claimRewardsAndSwap(address,bytes,bytes)\\\")\\n    );\\n    bytes4 public constant LEND_AND_STAKE_SELECTOR = bytes4(\\n        keccak256(\\\"lendAndStake(address,bytes,bytes)\\\")\\n    );\\n    bytes4 public constant UNSTAKE_AND_REDEEM_SELECTOR = bytes4(\\n        keccak256(\\\"unstakeAndRedeem(address,bytes,bytes)\\\")\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/integration-manager/integrations/utils/actions/CurveAaveLiquidityActionsMixin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../../../../../interfaces/ICurveStableSwapAave.sol\\\";\\n\\n/// @title CurveAaveLiquidityActionsMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Mixin contract for interacting with the Curve Aave pool's liquidity functions\\nabstract contract CurveAaveLiquidityActionsMixin {\\n    using SafeERC20 for ERC20;\\n\\n    address private immutable CURVE_AAVE_LIQUIDITY_POOL;\\n\\n    constructor(\\n        address _pool,\\n        address[3] memory _aaveTokensToApprove,\\n        address[3] memory _underlyingTokensToApprove\\n    ) public {\\n        CURVE_AAVE_LIQUIDITY_POOL = _pool;\\n\\n        // Pre-approve pool to use max of each aToken and underlying,\\n        // as specified by the inheriting contract.\\n        // Use address(0) to skip a particular ordered asset.\\n        for (uint256 i; i < 3; i++) {\\n            if (_aaveTokensToApprove[i] != address(0)) {\\n                ERC20(_aaveTokensToApprove[i]).safeApprove(_pool, type(uint256).max);\\n            }\\n            if (_underlyingTokensToApprove[i] != address(0)) {\\n                ERC20(_underlyingTokensToApprove[i]).safeApprove(_pool, type(uint256).max);\\n            }\\n        }\\n    }\\n\\n    /// @dev Helper to add liquidity to the pool.\\n    /// _orderedOutgoingAssetAmounts = [aDAI, aUSDC, aUSDT].\\n    function __curveAaveLend(\\n        uint256[3] memory _orderedOutgoingAssetAmounts,\\n        uint256 _minIncomingLPTokenAmount,\\n        bool _useUnderlyings\\n    ) internal {\\n        ICurveStableSwapAave(CURVE_AAVE_LIQUIDITY_POOL).add_liquidity(\\n            _orderedOutgoingAssetAmounts,\\n            _minIncomingLPTokenAmount,\\n            _useUnderlyings\\n        );\\n    }\\n\\n    /// @dev Helper to remove liquidity from the pool.\\n    /// if using _redeemSingleAsset, must pre-validate that one - and only one - asset\\n    /// has a non-zero _orderedMinIncomingAssetAmounts value.\\n    /// _orderedOutgoingAssetAmounts = [aDAI, aUSDC, aUSDT].\\n    function __curveAaveRedeem(\\n        uint256 _outgoingLPTokenAmount,\\n        uint256[3] memory _orderedMinIncomingAssetAmounts,\\n        bool _redeemSingleAsset,\\n        bool _useUnderlyings\\n    ) internal {\\n        if (_redeemSingleAsset) {\\n            // Assume that one - and only one - asset has a non-zero min incoming asset amount\\n            for (uint256 i; i < _orderedMinIncomingAssetAmounts.length; i++) {\\n                if (_orderedMinIncomingAssetAmounts[i] > 0) {\\n                    ICurveStableSwapAave(CURVE_AAVE_LIQUIDITY_POOL).remove_liquidity_one_coin(\\n                        _outgoingLPTokenAmount,\\n                        int128(i),\\n                        _orderedMinIncomingAssetAmounts[i],\\n                        _useUnderlyings\\n                    );\\n                    return;\\n                }\\n            }\\n        } else {\\n            ICurveStableSwapAave(CURVE_AAVE_LIQUIDITY_POOL).remove_liquidity(\\n                _outgoingLPTokenAmount,\\n                _orderedMinIncomingAssetAmounts,\\n                _useUnderlyings\\n            );\\n        }\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `CURVE_AAVE_LIQUIDITY_POOL` variable\\n    /// @return pool_ The `CURVE_AAVE_LIQUIDITY_POOL` variable value\\n    function getCurveAaveLiquidityPool() public view returns (address pool_) {\\n        return CURVE_AAVE_LIQUIDITY_POOL;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/integration-manager/integrations/utils/actions/CurveGaugeV2ActionsMixin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../../../../interfaces/ICurveLiquidityGaugeV2.sol\\\";\\nimport \\\"../../../../../utils/AssetHelpers.sol\\\";\\n\\n/// @title CurveGaugeV2ActionsMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Mixin contract for interacting with any Curve LiquidityGaugeV2 contract\\nabstract contract CurveGaugeV2ActionsMixin is AssetHelpers {\\n    uint256 private constant CURVE_GAUGE_V2_MAX_REWARDS = 8;\\n\\n    /// @dev Helper to claim pool-specific rewards\\n    function __curveGaugeV2ClaimRewards(address _gauge, address _target) internal {\\n        ICurveLiquidityGaugeV2(_gauge).claim_rewards(_target);\\n    }\\n\\n    /// @dev Helper to get list of pool-specific rewards tokens\\n    function __curveGaugeV2GetRewardsTokens(address _gauge)\\n        internal\\n        view\\n        returns (address[] memory rewardsTokens_)\\n    {\\n        address[] memory lpRewardsTokensWithEmpties = new address[](CURVE_GAUGE_V2_MAX_REWARDS);\\n        uint256 rewardsTokensCount;\\n        for (uint256 i; i < CURVE_GAUGE_V2_MAX_REWARDS; i++) {\\n            address rewardToken = ICurveLiquidityGaugeV2(_gauge).reward_tokens(i);\\n            if (rewardToken != address(0)) {\\n                lpRewardsTokensWithEmpties[i] = rewardToken;\\n                rewardsTokensCount++;\\n            } else {\\n                break;\\n            }\\n        }\\n\\n        rewardsTokens_ = new address[](rewardsTokensCount);\\n        for (uint256 i; i < rewardsTokensCount; i++) {\\n            rewardsTokens_[i] = lpRewardsTokensWithEmpties[i];\\n        }\\n\\n        return rewardsTokens_;\\n    }\\n\\n    /// @dev Helper to stake LP tokens\\n    function __curveGaugeV2Stake(\\n        address _gauge,\\n        address _lpToken,\\n        uint256 _amount\\n    ) internal {\\n        __approveAssetMaxAsNeeded(_lpToken, _gauge, _amount);\\n        ICurveLiquidityGaugeV2(_gauge).deposit(_amount, address(this));\\n    }\\n\\n    /// @dev Helper to unstake LP tokens\\n    function __curveGaugeV2Unstake(address _gauge, uint256 _amount) internal {\\n        ICurveLiquidityGaugeV2(_gauge).withdraw(_amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/integration-manager/integrations/utils/actions/CurveGaugeV2RewardsHandlerBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../../../../interfaces/ICurveMinter.sol\\\";\\nimport \\\"../../../../../utils/AddressArrayLib.sol\\\";\\nimport \\\"./CurveGaugeV2ActionsMixin.sol\\\";\\n\\n/// @title CurveGaugeV2RewardsHandlerBase Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Base contract for handling claiming and reinvesting rewards for a Curve pool\\n/// that uses the LiquidityGaugeV2 contract\\nabstract contract CurveGaugeV2RewardsHandlerBase is CurveGaugeV2ActionsMixin {\\n    using AddressArrayLib for address[];\\n\\n    address private immutable CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN;\\n    address private immutable CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER;\\n\\n    constructor(address _minter, address _crvToken) public {\\n        CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN = _crvToken;\\n        CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER = _minter;\\n    }\\n\\n    /// @dev Helper to claim all rewards (CRV and pool-specific).\\n    /// Requires contract to be approved to use mint_for().\\n    function __curveGaugeV2ClaimAllRewards(address _gauge, address _target) internal {\\n        // Claim owed $CRV\\n        ICurveMinter(CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER).mint_for(_gauge, _target);\\n\\n        // Claim owed pool-specific rewards\\n        __curveGaugeV2ClaimRewards(_gauge, _target);\\n    }\\n\\n    /// @dev Helper to claim all rewards, then pull either the newly claimed balances only,\\n    /// or full vault balances into the current contract\\n    function __curveGaugeV2ClaimRewardsAndPullBalances(\\n        address _gauge,\\n        address _target,\\n        bool _useFullBalances\\n    )\\n        internal\\n        returns (address[] memory rewardsTokens_, uint256[] memory rewardsTokenAmountsPulled_)\\n    {\\n        if (_useFullBalances) {\\n            return __curveGaugeV2ClaimRewardsAndPullFullBalances(_gauge, _target);\\n        }\\n\\n        return __curveGaugeV2ClaimRewardsAndPullClaimedBalances(_gauge, _target);\\n    }\\n\\n    /// @dev Helper to claim all rewards, then pull only the newly claimed balances\\n    /// of all rewards tokens into the current contract\\n    function __curveGaugeV2ClaimRewardsAndPullClaimedBalances(address _gauge, address _target)\\n        internal\\n        returns (address[] memory rewardsTokens_, uint256[] memory rewardsTokenAmountsPulled_)\\n    {\\n        rewardsTokens_ = __curveGaugeV2GetRewardsTokensWithCrv(_gauge);\\n\\n        uint256[] memory rewardsTokenPreClaimBalances = new uint256[](rewardsTokens_.length);\\n        for (uint256 i; i < rewardsTokens_.length; i++) {\\n            rewardsTokenPreClaimBalances[i] = ERC20(rewardsTokens_[i]).balanceOf(_target);\\n        }\\n\\n        __curveGaugeV2ClaimAllRewards(_gauge, _target);\\n\\n        rewardsTokenAmountsPulled_ = __pullPartialAssetBalances(\\n            _target,\\n            rewardsTokens_,\\n            rewardsTokenPreClaimBalances\\n        );\\n\\n        return (rewardsTokens_, rewardsTokenAmountsPulled_);\\n    }\\n\\n    /// @dev Helper to claim all rewards, then pull the full balances of all rewards tokens\\n    /// in the target into the current contract\\n    function __curveGaugeV2ClaimRewardsAndPullFullBalances(address _gauge, address _target)\\n        internal\\n        returns (address[] memory rewardsTokens_, uint256[] memory rewardsTokenAmountsPulled_)\\n    {\\n        __curveGaugeV2ClaimAllRewards(_gauge, _target);\\n\\n        rewardsTokens_ = __curveGaugeV2GetRewardsTokensWithCrv(_gauge);\\n        rewardsTokenAmountsPulled_ = __pullFullAssetBalances(_target, rewardsTokens_);\\n\\n        return (rewardsTokens_, rewardsTokenAmountsPulled_);\\n    }\\n\\n    /// @dev Helper to get all rewards tokens for staking LP tokens\\n    function __curveGaugeV2GetRewardsTokensWithCrv(address _gauge)\\n        internal\\n        view\\n        returns (address[] memory rewardsTokens_)\\n    {\\n        return\\n            __curveGaugeV2GetRewardsTokens(_gauge).addUniqueItem(\\n                CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN\\n            );\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN` variable\\n    /// @return crvToken_ The `CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN` variable value\\n    function getCurveGaugeV2RewardsHandlerCrvToken() public view returns (address crvToken_) {\\n        return CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN;\\n    }\\n\\n    /// @notice Gets the `CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER` variable\\n    /// @return minter_ The `CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER` variable value\\n    function getCurveGaugeV2RewardsHandlerMinter() public view returns (address minter_) {\\n        return CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/integration-manager/integrations/utils/actions/UniswapV2ActionsMixin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../../../../interfaces/IUniswapV2Router2.sol\\\";\\nimport \\\"../../../../../utils/AssetHelpers.sol\\\";\\n\\n/// @title UniswapV2ActionsMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Mixin contract for interacting with Uniswap v2\\nabstract contract UniswapV2ActionsMixin is AssetHelpers {\\n    address private immutable UNISWAP_V2_ROUTER2;\\n\\n    constructor(address _router) public {\\n        UNISWAP_V2_ROUTER2 = _router;\\n    }\\n\\n    // EXTERNAL FUNCTIONS\\n\\n    /// @dev Helper to add liquidity\\n    function __uniswapV2Lend(\\n        address _recipient,\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _amountADesired,\\n        uint256 _amountBDesired,\\n        uint256 _amountAMin,\\n        uint256 _amountBMin\\n    ) internal {\\n        __approveAssetMaxAsNeeded(_tokenA, UNISWAP_V2_ROUTER2, _amountADesired);\\n        __approveAssetMaxAsNeeded(_tokenB, UNISWAP_V2_ROUTER2, _amountBDesired);\\n\\n        // Execute lend on Uniswap\\n        IUniswapV2Router2(UNISWAP_V2_ROUTER2).addLiquidity(\\n            _tokenA,\\n            _tokenB,\\n            _amountADesired,\\n            _amountBDesired,\\n            _amountAMin,\\n            _amountBMin,\\n            _recipient,\\n            __uniswapV2GetActionDeadline()\\n        );\\n    }\\n\\n    /// @dev Helper to remove liquidity\\n    function __uniswapV2Redeem(\\n        address _recipient,\\n        address _poolToken,\\n        uint256 _poolTokenAmount,\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _amountAMin,\\n        uint256 _amountBMin\\n    ) internal {\\n        __approveAssetMaxAsNeeded(_poolToken, UNISWAP_V2_ROUTER2, _poolTokenAmount);\\n\\n        // Execute redeem on Uniswap\\n        IUniswapV2Router2(UNISWAP_V2_ROUTER2).removeLiquidity(\\n            _tokenA,\\n            _tokenB,\\n            _poolTokenAmount,\\n            _amountAMin,\\n            _amountBMin,\\n            _recipient,\\n            __uniswapV2GetActionDeadline()\\n        );\\n    }\\n\\n    /// @dev Helper to execute a swap\\n    function __uniswapV2Swap(\\n        address _recipient,\\n        uint256 _outgoingAssetAmount,\\n        uint256 _minIncomingAssetAmount,\\n        address[] memory _path\\n    ) internal {\\n        __approveAssetMaxAsNeeded(_path[0], UNISWAP_V2_ROUTER2, _outgoingAssetAmount);\\n\\n        // Execute fill\\n        IUniswapV2Router2(UNISWAP_V2_ROUTER2).swapExactTokensForTokens(\\n            _outgoingAssetAmount,\\n            _minIncomingAssetAmount,\\n            _path,\\n            _recipient,\\n            __uniswapV2GetActionDeadline()\\n        );\\n    }\\n\\n    /// @dev Helper to swap many assets to a single target asset.\\n    /// The intermediary asset will generally be WETH, and though we could make it\\n    // per-outgoing asset, seems like overkill until there is a need.\\n    function __uniswapV2SwapManyToOne(\\n        address _recipient,\\n        address[] memory _outgoingAssets,\\n        uint256[] memory _outgoingAssetAmounts,\\n        address _incomingAsset,\\n        address _intermediaryAsset\\n    ) internal {\\n        bool noIntermediary = _intermediaryAsset == address(0) ||\\n            _intermediaryAsset == _incomingAsset;\\n        for (uint256 i; i < _outgoingAssets.length; i++) {\\n            // Skip cases where outgoing and incoming assets are the same, or\\n            // there is no specified outgoing asset or amount\\n            if (\\n                _outgoingAssetAmounts[i] == 0 ||\\n                _outgoingAssets[i] == address(0) ||\\n                _outgoingAssets[i] == _incomingAsset\\n            ) {\\n                continue;\\n            }\\n\\n            address[] memory uniswapPath;\\n            if (noIntermediary || _outgoingAssets[i] == _intermediaryAsset) {\\n                uniswapPath = new address[](2);\\n                uniswapPath[0] = _outgoingAssets[i];\\n                uniswapPath[1] = _incomingAsset;\\n            } else {\\n                uniswapPath = new address[](3);\\n                uniswapPath[0] = _outgoingAssets[i];\\n                uniswapPath[1] = _intermediaryAsset;\\n                uniswapPath[2] = _incomingAsset;\\n            }\\n\\n            __uniswapV2Swap(_recipient, _outgoingAssetAmounts[i], 1, uniswapPath);\\n        }\\n    }\\n\\n    /// @dev Helper to get the deadline for a Uniswap V2 action in a standardized way\\n    function __uniswapV2GetActionDeadline() private view returns (uint256 deadline_) {\\n        return block.timestamp + 1;\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `UNISWAP_V2_ROUTER2` variable\\n    /// @return router_ The `UNISWAP_V2_ROUTER2` variable value\\n    function getUniswapV2Router2() public view returns (address router_) {\\n        return UNISWAP_V2_ROUTER2;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/interfaces/ICurveLiquidityGaugeV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title ICurveLiquidityGaugeV2 interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface ICurveLiquidityGaugeV2 {\\n    function claim_rewards(address) external;\\n\\n    function deposit(uint256, address) external;\\n\\n    function reward_tokens(uint256) external view returns (address);\\n\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/release/interfaces/ICurveMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title ICurveMinter interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface ICurveMinter {\\n    function mint_for(address, address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/release/interfaces/ICurveStableSwapAave.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title ICurveStableSwapAave interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface ICurveStableSwapAave {\\n    function add_liquidity(\\n        uint256[3] calldata,\\n        uint256,\\n        bool\\n    ) external returns (uint256);\\n\\n    function remove_liquidity(\\n        uint256,\\n        uint256[3] calldata,\\n        bool\\n    ) external returns (uint256[3] memory);\\n\\n    function remove_liquidity_one_coin(\\n        uint256,\\n        int128,\\n        uint256,\\n        bool\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/release/interfaces/IUniswapV2Router2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title UniswapV2Router2 Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @dev Minimal interface for our interactions with Uniswap V2's Router2\\ninterface IUniswapV2Router2 {\\n    function addLiquidity(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address,\\n        uint256\\n    )\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function removeLiquidity(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address,\\n        uint256\\n    ) external returns (uint256, uint256);\\n\\n    function swapExactTokensForTokens(\\n        uint256,\\n        uint256,\\n        address[] calldata,\\n        address,\\n        uint256\\n    ) external returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/release/utils/AddressArrayLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title AddressArray Library\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A library to extend the address array data type\\nlibrary AddressArrayLib {\\n    /// @dev Helper to add an item to an array. Does not assert uniqueness of the new item.\\n    function addItem(address[] memory _self, address _itemToAdd)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        nextArray_ = new address[](_self.length + 1);\\n        for (uint256 i; i < _self.length; i++) {\\n            nextArray_[i] = _self[i];\\n        }\\n        nextArray_[_self.length] = _itemToAdd;\\n\\n        return nextArray_;\\n    }\\n\\n    /// @dev Helper to add an item to an array, only if it is not already in the array.\\n    function addUniqueItem(address[] memory _self, address _itemToAdd)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        if (contains(_self, _itemToAdd)) {\\n            return _self;\\n        }\\n\\n        return addItem(_self, _itemToAdd);\\n    }\\n\\n    /// @dev Helper to verify if an array contains a particular value\\n    function contains(address[] memory _self, address _target)\\n        internal\\n        pure\\n        returns (bool doesContain_)\\n    {\\n        for (uint256 i; i < _self.length; i++) {\\n            if (_target == _self[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @dev Helper to reassign all items in an array with a specified value\\n    function fill(address[] memory _self, address _value)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        nextArray_ = new address[](_self.length);\\n        for (uint256 i; i < nextArray_.length; i++) {\\n            nextArray_[i] = _value;\\n        }\\n\\n        return nextArray_;\\n    }\\n\\n    /// @dev Helper to verify if array is a set of unique values.\\n    /// Does not assert length > 0.\\n    function isUniqueSet(address[] memory _self) internal pure returns (bool isUnique_) {\\n        if (_self.length <= 1) {\\n            return true;\\n        }\\n\\n        uint256 arrayLength = _self.length;\\n        for (uint256 i; i < arrayLength; i++) {\\n            for (uint256 j = i + 1; j < arrayLength; j++) {\\n                if (_self[i] == _self[j]) {\\n                    return false;\\n                }\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @dev Helper to remove items from an array. Removes all matching occurrences of each item.\\n    /// Does not assert uniqueness of either array.\\n    function removeItems(address[] memory _self, address[] memory _itemsToRemove)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        if (_itemsToRemove.length == 0) {\\n            return _self;\\n        }\\n\\n        bool[] memory indexesToRemove = new bool[](_self.length);\\n        uint256 remainingItemsCount = _self.length;\\n        for (uint256 i; i < _self.length; i++) {\\n            if (contains(_itemsToRemove, _self[i])) {\\n                indexesToRemove[i] = true;\\n                remainingItemsCount--;\\n            }\\n        }\\n\\n        if (remainingItemsCount == _self.length) {\\n            nextArray_ = _self;\\n        } else if (remainingItemsCount > 0) {\\n            nextArray_ = new address[](remainingItemsCount);\\n            uint256 nextArrayIndex;\\n            for (uint256 i; i < _self.length; i++) {\\n                if (!indexesToRemove[i]) {\\n                    nextArray_[nextArrayIndex] = _self[i];\\n                    nextArrayIndex++;\\n                }\\n            }\\n        }\\n\\n        return nextArray_;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/utils/AssetHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\n/// @title AssetHelpers Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A util contract for common token actions\\nabstract contract AssetHelpers {\\n    using SafeERC20 for ERC20;\\n    using SafeMath for uint256;\\n\\n    /// @dev Helper to approve a target account with the max amount of an asset.\\n    /// This is helpful for fully trusted contracts, such as adapters that\\n    /// interact with external protocol like Uniswap, Compound, etc.\\n    function __approveAssetMaxAsNeeded(\\n        address _asset,\\n        address _target,\\n        uint256 _neededAmount\\n    ) internal {\\n        if (ERC20(_asset).allowance(address(this), _target) < _neededAmount) {\\n            ERC20(_asset).safeApprove(_target, type(uint256).max);\\n        }\\n    }\\n\\n    /// @dev Helper to get the balances of specified assets for a target\\n    function __getAssetBalances(address _target, address[] memory _assets)\\n        internal\\n        view\\n        returns (uint256[] memory balances_)\\n    {\\n        balances_ = new uint256[](_assets.length);\\n        for (uint256 i; i < _assets.length; i++) {\\n            balances_[i] = ERC20(_assets[i]).balanceOf(_target);\\n        }\\n\\n        return balances_;\\n    }\\n\\n    /// @dev Helper to transfer full asset balances from a target to the current contract.\\n    /// Requires an adequate allowance for each asset granted to the current contract for the target.\\n    function __pullFullAssetBalances(address _target, address[] memory _assets)\\n        internal\\n        returns (uint256[] memory amountsTransferred_)\\n    {\\n        amountsTransferred_ = new uint256[](_assets.length);\\n        for (uint256 i; i < _assets.length; i++) {\\n            ERC20 assetContract = ERC20(_assets[i]);\\n            amountsTransferred_[i] = assetContract.balanceOf(_target);\\n            if (amountsTransferred_[i] > 0) {\\n                assetContract.safeTransferFrom(_target, address(this), amountsTransferred_[i]);\\n            }\\n        }\\n\\n        return amountsTransferred_;\\n    }\\n\\n    /// @dev Helper to transfer partial asset balances from a target to the current contract.\\n    /// Requires an adequate allowance for each asset granted to the current contract for the target.\\n    function __pullPartialAssetBalances(\\n        address _target,\\n        address[] memory _assets,\\n        uint256[] memory _amountsToExclude\\n    ) internal returns (uint256[] memory amountsTransferred_) {\\n        amountsTransferred_ = new uint256[](_assets.length);\\n        for (uint256 i; i < _assets.length; i++) {\\n            ERC20 assetContract = ERC20(_assets[i]);\\n            amountsTransferred_[i] = assetContract.balanceOf(_target).sub(_amountsToExclude[i]);\\n            if (amountsTransferred_[i] > 0) {\\n                assetContract.safeTransferFrom(_target, address(this), amountsTransferred_[i]);\\n            }\\n        }\\n\\n        return amountsTransferred_;\\n    }\\n\\n    /// @dev Helper to transfer full asset balances from the current contract to a target\\n    function __pushFullAssetBalances(address _target, address[] memory _assets)\\n        internal\\n        returns (uint256[] memory amountsTransferred_)\\n    {\\n        amountsTransferred_ = new uint256[](_assets.length);\\n        for (uint256 i; i < _assets.length; i++) {\\n            ERC20 assetContract = ERC20(_assets[i]);\\n            amountsTransferred_[i] = assetContract.balanceOf(address(this));\\n            if (amountsTransferred_[i] > 0) {\\n                assetContract.safeTransfer(_target, amountsTransferred_[i]);\\n            }\\n        }\\n\\n        return amountsTransferred_;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_integrationManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityGaugeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crvToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethToken\",\"type\":\"address\"},{\"internalType\":\"address[3]\",\"name\":\"_aaveTokens\",\"type\":\"address[3]\"},{\"internalType\":\"address[3]\",\"name\":\"_underlyingTokens\",\"type\":\"address[3]\"},{\"internalType\":\"address\",\"name\":\"_uniswapV2Router2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ADD_TRACKED_ASSETS_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"APPROVE_ASSETS_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_REWARDS_AND_REINVEST_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_REWARDS_AND_SWAP_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_REWARDS_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEND_AND_STAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEND_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEEM_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAKE_ORDER_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_AND_REDEEM_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"approveAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_encodedCallArgs\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_encodedAssetTransferArgs\",\"type\":\"bytes\"}],\"name\":\"claimRewardsAndReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_encodedCallArgs\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"claimRewardsAndSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useUnderlying\",\"type\":\"bool\"}],\"name\":\"getAssetByPoolIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"asset_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurveAaveLiquidityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurveGaugeV2RewardsHandlerCrvToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"crvToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurveGaugeV2RewardsHandlerMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"minter_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIntegrationManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"integrationManager_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityGaugeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"liquidityGaugeToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lpToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapV2Router2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWethToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wethToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identifier\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"identifier_\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_encodedCallArgs\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_encodedAssetTransferArgs\",\"type\":\"bytes\"}],\"name\":\"lend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_encodedCallArgs\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_encodedAssetTransferArgs\",\"type\":\"bytes\"}],\"name\":\"lendAndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"_encodedCallArgs\",\"type\":\"bytes\"}],\"name\":\"parseAssetsForMethod\",\"outputs\":[{\"internalType\":\"enum IIntegrationManager.SpendAssetsHandleType\",\"name\":\"spendAssetsHandleType_\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"spendAssets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"spendAssetAmounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"incomingAssets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minIncomingAssetAmounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_encodedCallArgs\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_encodedAssetTransferArgs\",\"type\":\"bytes\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_encodedCallArgs\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_encodedAssetTransferArgs\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_encodedCallArgs\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_encodedAssetTransferArgs\",\"type\":\"bytes\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_encodedCallArgs\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_encodedAssetTransferArgs\",\"type\":\"bytes\"}],\"name\":\"unstakeAndRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CurveLiquidityAaveAdapter","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000965ca477106476b4600562a2ebe13536581883a6000000000000000000000000d662908ada2ea1916b3318327a97eb18ad588b5d000000000000000000000000fd2a8fa60abd58efe3eee34dd494cd491dc14900000000000000000000000000d061d61a4d941c39e5453435b6345dc261c2fce0000000000000000000000000debf20617708857ebe4f679508e7b7863a8a8eee000000000000000000000000d533a949740bb3306d119cc777fa900ba034cd52000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000028171bca77440897b824ca71d1c56cac55b68a3000000000000000000000000bcca60bb61934080951369a648fb03df4f96263c0000000000000000000000003ed3b47dd13ec9a98b44e6204a523e766b2258110000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}