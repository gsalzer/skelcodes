{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ProxyActionsLiquidityMining.sol\": {\r\n      \"content\": \"pragma solidity 0.7.6;\\n\\nimport \\\"./complifi-amm/libs/complifi/tokens/IERC20Metadata.sol\\\";\\nimport \\\"./ILiquidityMining.sol\\\";\\n\\n//import \\\"hardhat/console.sol\\\";\\n\\ncontract ProxyActionsLiquidityMining {\\n\\n    /// @notice Direct liquidity mining method deposit\\n    function deposit(\\n        address _liquidityMining,\\n        address _token,\\n        uint256 _tokenAmount\\n    ) external {\\n\\n        ILiquidityMining liquidityMining = ILiquidityMining(_liquidityMining);\\n        require(liquidityMining.isTokenAdded(_token), \\\"TOKEN_NOT_ADDED\\\");\\n\\n        require(\\n            IERC20(_token).transferFrom(msg.sender, address(this), _tokenAmount),\\n            \\\"TOKEN_IN\\\"\\n        );\\n\\n        IERC20(_token).approve(_liquidityMining, _tokenAmount);\\n\\n        uint256 pid = liquidityMining.poolPidByAddress(_token);\\n        liquidityMining.deposit(pid, _tokenAmount);\\n    }\\n\\n    /// @notice Direct liquidity mining method withdraw\\n    function withdraw(\\n        address _liquidityMining,\\n        address _token,\\n        uint256 _tokenAmount\\n    ) external {\\n\\n        ILiquidityMining liquidityMining = ILiquidityMining(_liquidityMining);\\n        require(liquidityMining.isTokenAdded(_token), \\\"TOKEN_NOT_ADDED\\\");\\n\\n        uint256 pid = liquidityMining.poolPidByAddress(_token);\\n        liquidityMining.withdraw(pid, _tokenAmount);\\n\\n        uint tokenBalance = IERC20(_token).balanceOf(address(this));\\n        if(tokenBalance > 0) {\\n            require(\\n                IERC20(_token).transfer(msg.sender, tokenBalance),\\n                \\\"TOKEN_OUT\\\"\\n            );\\n        }\\n    }\\n\\n    /// @notice Direct liquidity mining method claim\\n    function claim(\\n        address _liquidityMining\\n    ) external {\\n\\n        ILiquidityMining liquidityMining = ILiquidityMining(_liquidityMining);\\n        liquidityMining.claim();\\n\\n        uint rewardClaimedBalance = IERC20(liquidityMining.rewardToken()).balanceOf(address(this));\\n        if(rewardClaimedBalance > 0) {\\n            require(\\n                IERC20(liquidityMining.rewardToken()).transfer(msg.sender, rewardClaimedBalance),\\n                \\\"REWARD_OUT\\\"\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/complifi-amm/libs/complifi/tokens/IERC20Metadata.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: GPL-3.0-or-later\\\"\\n\\npragma solidity 0.7.6;\\n\\ninterface IERC20Metadata {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/ILiquidityMining.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface IERC20 {\\n\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address whom) external view returns (uint);\\n    function allowance(address src, address dst) external view returns (uint);\\n\\n    function approve(address dst, uint amt) external returns (bool);\\n    function transfer(address dst, uint amt) external returns (bool);\\n    function transferFrom(\\n        address src, address dst, uint amt\\n    ) external returns (bool);\\n}\\n\\ninterface ILiquidityMining {\\n\\n    function rewardToken() external view returns(address);\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n    function claim() external;\\n    function poolPidByAddress(address) external view returns(uint256);\\n    function isTokenAdded(address _token) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityMining\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityMining\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityMining\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ProxyActionsLiquidityMining","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}