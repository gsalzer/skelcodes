{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0-or-later\r\n\r\npragma solidity =0.6.12 >=0.5.12 >=0.6.12 <0.7.0;\r\n\r\n////// lib/dss-exec-lib/src/CollateralOpts.sol\r\n/* pragma solidity ^0.6.12; */\r\n\r\nstruct CollateralOpts {\r\n    bytes32 ilk;\r\n    address gem;\r\n    address join;\r\n    address flip;\r\n    address pip;\r\n    bool    isLiquidatable;\r\n    bool    isOSM;\r\n    bool    whitelistOSM;\r\n    uint256 ilkDebtCeiling;\r\n    uint256 minVaultAmount;\r\n    uint256 maxLiquidationAmount;\r\n    uint256 liquidationPenalty;\r\n    uint256 ilkStabilityFee;\r\n    uint256 bidIncrease;\r\n    uint256 bidDuration;\r\n    uint256 auctionDuration;\r\n    uint256 liquidationRatio;\r\n}\r\n\r\n////// lib/dss-exec-lib/src/DssExecLib.sol\r\n//\r\n// DssExecLib.sol -- MakerDAO Executive Spellcrafting Library\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n/* pragma solidity ^0.6.12; */\r\n/* pragma experimental ABIEncoderV2; */\r\n\r\n/* import { CollateralOpts } from \"./CollateralOpts.sol\"; */\r\n\r\ninterface Initializable_1 {\r\n    function init(bytes32) external;\r\n}\r\n\r\ninterface Authorizable {\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n}\r\n\r\ninterface Fileable {\r\n    function file(bytes32, address) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, bytes32, address) external;\r\n}\r\n\r\ninterface Drippable {\r\n    function drip() external returns (uint256);\r\n    function drip(bytes32) external returns (uint256);\r\n}\r\n\r\ninterface Pricing {\r\n    function poke(bytes32) external;\r\n}\r\n\r\ninterface ERC20 {\r\n    function decimals() external returns (uint8);\r\n}\r\n\r\ninterface DssVat {\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n    function ilks(bytes32) external returns (uint256 Art, uint256 rate, uint256 spot, uint256 line, uint256 dust);\r\n    function Line() external view returns (uint256);\r\n    function suck(address, address, uint) external;\r\n}\r\n\r\ninterface AuctionLike {\r\n    function vat() external returns (address);\r\n    function cat() external returns (address); // Only flip\r\n    function beg() external returns (uint256);\r\n    function pad() external returns (uint256); // Only flop\r\n    function ttl() external returns (uint256);\r\n    function tau() external returns (uint256);\r\n    function ilk() external returns (bytes32); // Only flip\r\n    function gem() external returns (bytes32); // Only flap/flop\r\n}\r\n\r\ninterface JoinLike {\r\n    function vat() external returns (address);\r\n    function ilk() external returns (bytes32);\r\n    function gem() external returns (address);\r\n    function dec() external returns (uint256);\r\n    function join(address, uint) external;\r\n    function exit(address, uint) external;\r\n}\r\n\r\n// Includes Median and OSM functions\r\ninterface OracleLike_2 {\r\n    function src() external view returns (address);\r\n    function lift(address[] calldata) external;\r\n    function drop(address[] calldata) external;\r\n    function setBar(uint256) external;\r\n    function kiss(address) external;\r\n    function diss(address) external;\r\n    function kiss(address[] calldata) external;\r\n    function diss(address[] calldata) external;\r\n}\r\n\r\ninterface MomLike {\r\n    function setOsm(bytes32, address) external;\r\n}\r\n\r\ninterface RegistryLike {\r\n    function add(address) external;\r\n    function info(bytes32) external view returns (\r\n        string memory, string memory, uint256, address, address, address, address\r\n    );\r\n    function ilkData(bytes32) external view returns (\r\n        uint256       pos,\r\n        address       gem,\r\n        address       pip,\r\n        address       join,\r\n        address       flip,\r\n        uint256       dec,\r\n        string memory name,\r\n        string memory symbol\r\n    );\r\n}\r\n\r\n// https://github.com/makerdao/dss-chain-log\r\ninterface ChainlogLike {\r\n    function setVersion(string calldata) external;\r\n    function setIPFS(string calldata) external;\r\n    function setSha256sum(string calldata) external;\r\n    function getAddress(bytes32) external view returns (address);\r\n    function setAddress(bytes32, address) external;\r\n    function removeAddress(bytes32) external;\r\n}\r\n\r\ninterface IAMLike {\r\n    function ilks(bytes32) external view returns (uint256,uint256,uint48,uint48,uint48);\r\n    function setIlk(bytes32,uint256,uint256,uint256) external;\r\n    function remIlk(bytes32) external;\r\n    function exec(bytes32) external returns (uint256);\r\n}\r\n\r\n\r\nlibrary DssExecLib {\r\n\r\n    /*****************/\r\n    /*** Constants ***/\r\n    /*****************/\r\n    address constant public LOG = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;\r\n\r\n    uint256 constant internal WAD      = 10 ** 18;\r\n    uint256 constant internal RAY      = 10 ** 27;\r\n    uint256 constant internal RAD      = 10 ** 45;\r\n    uint256 constant internal THOUSAND = 10 ** 3;\r\n    uint256 constant internal MILLION  = 10 ** 6;\r\n\r\n    uint256 constant internal BPS_ONE_PCT             = 100;\r\n    uint256 constant internal BPS_ONE_HUNDRED_PCT     = 100 * BPS_ONE_PCT;\r\n    uint256 constant internal RATES_ONE_HUNDRED_PCT   = 1000000021979553151239153027;\r\n\r\n    /**********************/\r\n    /*** Math Functions ***/\r\n    /**********************/\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    /****************************/\r\n    /*** Core Address Helpers ***/\r\n    /****************************/\r\n    function dai()        public view returns (address) { return getChangelogAddress(\"MCD_DAI\"); }\r\n    function mkr()        public view returns (address) { return getChangelogAddress(\"MCD_GOV\"); }\r\n    function vat()        public view returns (address) { return getChangelogAddress(\"MCD_VAT\"); }\r\n    function cat()        public view returns (address) { return getChangelogAddress(\"MCD_CAT\"); }\r\n    function jug()        public view returns (address) { return getChangelogAddress(\"MCD_JUG\"); }\r\n    function pot()        public view returns (address) { return getChangelogAddress(\"MCD_POT\"); }\r\n    function vow()        public view returns (address) { return getChangelogAddress(\"MCD_VOW\"); }\r\n    function end()        public view returns (address) { return getChangelogAddress(\"MCD_END\"); }\r\n    function reg()        public view returns (address) { return getChangelogAddress(\"ILK_REGISTRY\"); }\r\n    function spotter()    public view returns (address) { return getChangelogAddress(\"MCD_SPOT\"); }\r\n    function flap()       public view returns (address) { return getChangelogAddress(\"MCD_FLAP\"); }\r\n    function flop()       public view returns (address) { return getChangelogAddress(\"MCD_FLOP\"); }\r\n    function osmMom()     public view returns (address) { return getChangelogAddress(\"OSM_MOM\"); }\r\n    function govGuard()   public view returns (address) { return getChangelogAddress(\"GOV_GUARD\"); }\r\n    function flipperMom() public view returns (address) { return getChangelogAddress(\"FLIPPER_MOM\"); }\r\n    function pauseProxy() public view returns (address) { return getChangelogAddress(\"MCD_PAUSE_PROXY\"); }\r\n    function autoLine()   public view returns (address) { return getChangelogAddress(\"MCD_IAM_AUTO_LINE\"); }\r\n    function daiJoin()    public view returns (address) { return getChangelogAddress(\"MCD_JOIN_DAI\"); }\r\n\r\n    function flip(bytes32 _ilk) public view returns (address _flip) {\r\n        (,,,, _flip,,,) = RegistryLike(reg()).ilkData(_ilk);\r\n    }\r\n\r\n    function getChangelogAddress(bytes32 _key) public view returns (address) {\r\n        return ChainlogLike(LOG).getAddress(_key);\r\n    }\r\n\r\n    /****************************/\r\n    /*** Changelog Management ***/\r\n    /****************************/\r\n    /**\r\n        @dev Set an address in the MCD on-chain changelog.\r\n        @param _key Access key for the address (e.g. \"MCD_VAT\")\r\n        @param _val The address associated with the _key\r\n    */\r\n    function setChangelogAddress(bytes32 _key, address _val) public {\r\n        ChainlogLike(LOG).setAddress(_key, _val);\r\n    }\r\n\r\n    /**\r\n        @dev Set version in the MCD on-chain changelog.\r\n        @param _version Changelog version (e.g. \"1.1.2\")\r\n    */\r\n    function setChangelogVersion(string memory _version) public {\r\n        ChainlogLike(LOG).setVersion(_version);\r\n    }\r\n    /**\r\n        @dev Set IPFS hash of IPFS changelog in MCD on-chain changelog.\r\n        @param _ipfsHash IPFS hash (e.g. \"QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\")\r\n    */\r\n    function setChangelogIPFS(string memory _ipfsHash) public {\r\n        ChainlogLike(LOG).setIPFS(_ipfsHash);\r\n    }\r\n    /**\r\n        @dev Set SHA256 hash in MCD on-chain changelog.\r\n        @param _SHA256Sum SHA256 hash (e.g. \"e42dc9d043a57705f3f097099e6b2de4230bca9a020c797508da079f9079e35b\")\r\n    */\r\n    function setChangelogSHA256(string memory _SHA256Sum) public {\r\n        ChainlogLike(LOG).setSha256sum(_SHA256Sum);\r\n    }\r\n\r\n\r\n    /**********************/\r\n    /*** Authorizations ***/\r\n    /**********************/\r\n    /**\r\n        @dev Give an address authorization to perform auth actions on the contract.\r\n        @param _base   The address of the contract where the authorization will be set\r\n        @param _ward   Address to be authorized\r\n    */\r\n    function authorize(address _base, address _ward) public {\r\n        Authorizable(_base).rely(_ward);\r\n    }\r\n    /**\r\n        @dev Revoke contract authorization from an address.\r\n        @param _base   The address of the contract where the authorization will be revoked\r\n        @param _ward   Address to be deauthorized\r\n    */\r\n    function deauthorize(address _base, address _ward) public {\r\n        Authorizable(_base).deny(_ward);\r\n    }\r\n    /**\r\n        @dev Delegate vat authority to the specified address.\r\n        @param _usr Address to be authorized\r\n    */\r\n    function delegateVat(address _usr) public {\r\n        DssVat(vat()).hope(_usr);\r\n    }\r\n    /**\r\n        @dev Revoke vat authority to the specified address.\r\n        @param _usr Address to be deauthorized\r\n    */\r\n    function undelegateVat(address _usr) public {\r\n        DssVat(vat()).nope(_usr);\r\n    }\r\n\r\n    /******************************/\r\n    /*** OfficeHours Management ***/\r\n    /******************************/\r\n\r\n    /**\r\n        @dev Returns true if a time is within office hours range\r\n        @param _ts           The timestamp to check, usually block.timestamp\r\n        @param _officeHours  true if office hours is enabled.\r\n        @return              true if time is in castable range\r\n    */\r\n    function canCast(uint40 _ts, bool _officeHours) public pure returns (bool) {\r\n        if (_officeHours) {\r\n            uint256 day = (_ts / 1 days + 3) % 7;\r\n            if (day >= 5)                 { return false; }  // Can only be cast on a weekday\r\n            uint256 hour = _ts / 1 hours % 24;\r\n            if (hour < 14 || hour >= 21)  { return false; }  // Outside office hours\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @dev Calculate the next available cast time in epoch seconds\r\n        @param _eta          The scheduled time of the spell plus the pause delay\r\n        @param _ts           The current timestamp, usually block.timestamp\r\n        @param _officeHours  true if office hours is enabled.\r\n        @return castTime     The next available cast timestamp\r\n    */\r\n    function nextCastTime(uint40 _eta, uint40 _ts, bool _officeHours) public pure returns (uint256 castTime) {\r\n        require(_eta != 0);  // \"DssExecLib/invalid eta\"\r\n        require(_ts  != 0);  // \"DssExecLib/invalid ts\"\r\n        castTime = _ts > _eta ? _ts : _eta; // Any day at XX:YY\r\n\r\n        if (_officeHours) {\r\n            uint256 day    = (castTime / 1 days + 3) % 7;\r\n            uint256 hour   = castTime / 1 hours % 24;\r\n            uint256 minute = castTime / 1 minutes % 60;\r\n            uint256 second = castTime % 60;\r\n\r\n            if (day >= 5) {\r\n                castTime += (6 - day) * 1 days;                 // Go to Sunday XX:YY\r\n                castTime += (24 - hour + 14) * 1 hours;         // Go to 14:YY UTC Monday\r\n                castTime -= minute * 1 minutes + second;        // Go to 14:00 UTC\r\n            } else {\r\n                if (hour >= 21) {\r\n                    if (day == 4) castTime += 2 days;           // If Friday, fast forward to Sunday XX:YY\r\n                    castTime += (24 - hour + 14) * 1 hours;     // Go to 14:YY UTC next day\r\n                    castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC\r\n                } else if (hour < 14) {\r\n                    castTime += (14 - hour) * 1 hours;          // Go to 14:YY UTC same day\r\n                    castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**************************/\r\n    /*** Accumulating Rates ***/\r\n    /**************************/\r\n    /**\r\n        @dev Update rate accumulation for the Dai Savings Rate (DSR).\r\n    */\r\n    function accumulateDSR() public {\r\n        Drippable(pot()).drip();\r\n    }\r\n    /**\r\n        @dev Update rate accumulation for the stability fees of a given collateral type.\r\n        @param _ilk   Collateral type\r\n    */\r\n    function accumulateCollateralStabilityFees(bytes32 _ilk) public {\r\n        Drippable(jug()).drip(_ilk);\r\n    }\r\n\r\n    /*********************/\r\n    /*** Price Updates ***/\r\n    /*********************/\r\n    /**\r\n        @dev Update price of a given collateral type.\r\n        @param _ilk   Collateral type\r\n    */\r\n    function updateCollateralPrice(bytes32 _ilk) public {\r\n        Pricing(spotter()).poke(_ilk);\r\n    }\r\n\r\n    /****************************/\r\n    /*** System Configuration ***/\r\n    /****************************/\r\n    /**\r\n        @dev Set a contract in another contract, defining the relationship (ex. set a new Cat contract in the Vat)\r\n        @param _base   The address of the contract where the new contract address will be filed\r\n        @param _what   Name of contract to file\r\n        @param _addr   Address of contract to file\r\n    */\r\n    function setContract(address _base, bytes32 _what, address _addr) public {\r\n        Fileable(_base).file(_what, _addr);\r\n    }\r\n    /**\r\n        @dev Set a contract in another contract, defining the relationship (ex. set a new Cat contract in the Vat)\r\n        @param _base   The address of the contract where the new contract address will be filed\r\n        @param _ilk    Collateral type\r\n        @param _what   Name of contract to file\r\n        @param _addr   Address of contract to file\r\n    */\r\n    function setContract(address _base, bytes32 _ilk, bytes32 _what, address _addr) public {\r\n        Fileable(_base).file(_ilk, _what, _addr);\r\n    }\r\n\r\n    /******************************/\r\n    /*** System Risk Parameters ***/\r\n    /******************************/\r\n    // function setGlobalDebtCeiling(uint256 _amount) public { setGlobalDebtCeiling(vat(), _amount); }\r\n    /**\r\n        @dev Set the global debt ceiling. Amount will be converted to the correct internal precision.\r\n        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setGlobalDebtCeiling(uint256 _amount) public {\r\n        require(_amount < WAD);  // \"LibDssExec/incorrect-global-Line-precision\"\r\n        Fileable(vat()).file(\"Line\", _amount * RAD);\r\n    }\r\n    /**\r\n        @dev Increase the global debt ceiling by a specific amount. Amount will be converted to the correct internal precision.\r\n        @param _amount The amount to add in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function increaseGlobalDebtCeiling(uint256 _amount) public {\r\n        require(_amount < WAD);  // \"LibDssExec/incorrect-Line-increase-precision\"\r\n        address _vat = vat();\r\n        Fileable(_vat).file(\"Line\", add(DssVat(_vat).Line(), _amount * RAD));\r\n    }\r\n    /**\r\n        @dev Decrease the global debt ceiling by a specific amount. Amount will be converted to the correct internal precision.\r\n        @param _amount The amount to reduce in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function decreaseGlobalDebtCeiling(uint256 _amount) public {\r\n        require(_amount < WAD);  // \"LibDssExec/incorrect-Line-decrease-precision\"\r\n        address _vat = vat();\r\n        Fileable(_vat).file(\"Line\", sub(DssVat(_vat).Line(), _amount * RAD));\r\n    }\r\n    /**\r\n        @dev Set the Dai Savings Rate. See: docs/rates.txt\r\n        @param _rate   The accumulated rate (ex. 4% => 1000000001243680656318820312)\r\n        @param _doDrip `true` to accumulate interest owed\r\n    */\r\n    function setDSR(uint256 _rate, bool _doDrip) public {\r\n        require((_rate >= RAY) && (_rate <= RATES_ONE_HUNDRED_PCT));  // \"LibDssExec/dsr-out-of-bounds\"\r\n        if (_doDrip) Drippable(pot()).drip();\r\n        Fileable(pot()).file(\"dsr\", _rate);\r\n    }\r\n    /**\r\n        @dev Set the DAI amount for system surplus auctions. Amount will be converted to the correct internal precision.\r\n        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setSurplusAuctionAmount(uint256 _amount) public {\r\n        require(_amount < WAD);  // \"LibDssExec/incorrect-vow-bump-precision\"\r\n        Fileable(vow()).file(\"bump\", _amount * RAD);\r\n    }\r\n    /**\r\n        @dev Set the DAI amount for system surplus buffer, must be exceeded before surplus auctions start. Amount will be converted to the correct internal precision.\r\n        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setSurplusBuffer(uint256 _amount) public {\r\n        require(_amount < WAD);  // \"LibDssExec/incorrect-vow-hump-precision\"\r\n        Fileable(vow()).file(\"hump\", _amount * RAD);\r\n    }\r\n    /**\r\n        @dev Set minimum bid increase for surplus auctions. Amount will be converted to the correct internal precision.\r\n        @dev Equation used for conversion is (1 + pct / 10,000) * WAD\r\n        @param _pct_bps The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500)\r\n    */\r\n    function setMinSurplusAuctionBidIncrease(uint256 _pct_bps) public {\r\n        require(_pct_bps < BPS_ONE_HUNDRED_PCT);  // \"LibDssExec/incorrect-flap-beg-precision\"\r\n        Fileable(flap()).file(\"beg\", add(WAD, wdiv(_pct_bps, BPS_ONE_HUNDRED_PCT)));\r\n    }\r\n    /**\r\n        @dev Set bid duration for surplus auctions.\r\n        @param _duration Amount of time for bids.\r\n    */\r\n    function setSurplusAuctionBidDuration(uint256 _duration) public {\r\n        Fileable(flap()).file(\"ttl\", _duration);\r\n    }\r\n    /**\r\n        @dev Set total auction duration for surplus auctions.\r\n        @param _duration Amount of time for auctions.\r\n    */\r\n    function setSurplusAuctionDuration(uint256 _duration) public {\r\n        Fileable(flap()).file(\"tau\", _duration);\r\n    }\r\n    /**\r\n        @dev Set the number of seconds that pass before system debt is auctioned for MKR tokens.\r\n        @param _duration Duration in seconds\r\n    */\r\n    function setDebtAuctionDelay(uint256 _duration) public {\r\n        Fileable(vow()).file(\"wait\", _duration);\r\n    }\r\n    /**\r\n        @dev Set the DAI amount for system debt to be covered by each debt auction. Amount will be converted to the correct internal precision.\r\n        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setDebtAuctionDAIAmount(uint256 _amount) public {\r\n        require(_amount < WAD);  // \"LibDssExec/incorrect-vow-sump-precision\"\r\n        Fileable(vow()).file(\"sump\", _amount * RAD);\r\n    }\r\n    /**\r\n        @dev Set the starting MKR amount to be auctioned off to cover system debt in debt auctions. Amount will be converted to the correct internal precision.\r\n        @param _amount The amount to set in MKR (ex. 250 MKR amount == 250)\r\n    */\r\n    function setDebtAuctionMKRAmount(uint256 _amount) public {\r\n        require(_amount < WAD);  // \"LibDssExec/incorrect-vow-dump-precision\"\r\n        Fileable(vow()).file(\"dump\", _amount * WAD);\r\n    }\r\n    /**\r\n        @dev Set minimum bid increase for debt auctions. Amount will be converted to the correct internal precision.\r\n        @dev Equation used for conversion is (1 + pct / 10,000) * WAD\r\n        @param _pct_bps    The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500)\r\n    */\r\n    function setMinDebtAuctionBidIncrease(uint256 _pct_bps) public {\r\n        require(_pct_bps < BPS_ONE_HUNDRED_PCT);  // \"LibDssExec/incorrect-flap-beg-precision\"\r\n        Fileable(flop()).file(\"beg\", add(WAD, wdiv(_pct_bps, BPS_ONE_HUNDRED_PCT)));\r\n    }\r\n    /**\r\n        @dev Set bid duration for debt auctions.\r\n        @param _duration Amount of time for bids.\r\n    */\r\n    function setDebtAuctionBidDuration(uint256 _duration) public {\r\n        Fileable(flop()).file(\"ttl\", _duration);\r\n    }\r\n    /**\r\n        @dev Set total auction duration for debt auctions.\r\n        @param _duration Amount of time for auctions.\r\n    */\r\n    function setDebtAuctionDuration(uint256 _duration) public {\r\n        Fileable(flop()).file(\"tau\", _duration);\r\n    }\r\n    /**\r\n        @dev Set the rate of increasing amount of MKR out for auction during debt auctions. Amount will be converted to the correct internal precision.\r\n        @dev MKR amount is increased by this rate every \"tick\" (if auction duration has passed and no one has bid on the MKR)\r\n        @dev Equation used for conversion is (1 + pct / 10,000) * WAD\r\n        @param _pct_bps    The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500)\r\n    */\r\n    function setDebtAuctionMKRIncreaseRate(uint256 _pct_bps) public {\r\n        Fileable(flop()).file(\"pad\", add(WAD, wdiv(_pct_bps, BPS_ONE_HUNDRED_PCT)));\r\n    }\r\n    /**\r\n        @dev Set the maximum total DAI amount that can be out for liquidation in the system at any point. Amount will be converted to the correct internal precision.\r\n        @param _amount The amount to set in DAI (ex. 250,000 DAI amount == 250000)\r\n    */\r\n    function setMaxTotalDAILiquidationAmount(uint256 _amount) public {\r\n        require(_amount < WAD);  // \"LibDssExec/incorrect-vow-dump-precision\"\r\n        Fileable(cat()).file(\"box\", _amount * RAD);\r\n    }\r\n    /**\r\n        @dev Set the duration of time that has to pass during emergency shutdown before collateral can start being claimed by DAI holders.\r\n        @param _duration Time in seconds to set for ES processing time\r\n    */\r\n    function setEmergencyShutdownProcessingTime(uint256 _duration) public {\r\n        Fileable(end()).file(\"wait\", _duration);\r\n    }\r\n    /**\r\n        @dev Set the global stability fee (is not typically used, currently is 0).\r\n            Many of the settings that change weekly rely on the rate accumulator\r\n            described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n            To check this yourself, use the following rate calculation (example 8%):\r\n\r\n            $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\r\n\r\n            A table of rates can also be found at:\r\n            https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\r\n        @param _rate   The accumulated rate (ex. 4% => 1000000001243680656318820312)\r\n    */\r\n    function setGlobalStabilityFee(uint256 _rate) public {\r\n        require((_rate >= RAY) && (_rate <= RATES_ONE_HUNDRED_PCT));  // \"LibDssExec/global-stability-fee-out-of-bounds\"\r\n        Fileable(jug()).file(\"base\", _rate);\r\n    }\r\n    /**\r\n        @dev Set the value of DAI in the reference asset (e.g. $1 per DAI). Value will be converted to the correct internal precision.\r\n        @dev Equation used for conversion is value * RAY / 1000\r\n        @param _value The value to set as integer (x1000) (ex. $1.025 == 1025)\r\n    */\r\n    function setDAIReferenceValue(uint256 _value) public {\r\n        require(_value < WAD);  // \"LibDssExec/incorrect-ilk-dunk-precision\"\r\n        Fileable(spotter()).file(\"par\", rdiv(_value, 1000));\r\n    }\r\n\r\n    /*****************************/\r\n    /*** Collateral Management ***/\r\n    /*****************************/\r\n    /**\r\n        @dev Set a collateral debt ceiling. Amount will be converted to the correct internal precision.\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setIlkDebtCeiling(bytes32 _ilk, uint256 _amount) public {\r\n        require(_amount < WAD);  // \"LibDssExec/incorrect-ilk-line-precision\"\r\n        Fileable(vat()).file(_ilk, \"line\", _amount * RAD);\r\n    }\r\n    /**\r\n        @dev Increase a collateral debt ceiling. Amount will be converted to the correct internal precision.\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The amount to increase in DAI (ex. 10m DAI amount == 10000000)\r\n        @param _global If true, increases the global debt ceiling by _amount\r\n    */\r\n    function increaseIlkDebtCeiling(bytes32 _ilk, uint256 _amount, bool _global) public {\r\n        require(_amount < WAD);  // \"LibDssExec/incorrect-ilk-line-precision\"\r\n        address _vat = vat();\r\n        (,,,uint256 line_,) = DssVat(_vat).ilks(_ilk);\r\n        Fileable(_vat).file(_ilk, \"line\", add(line_, _amount * RAD));\r\n        if (_global) { increaseGlobalDebtCeiling(_amount); }\r\n    }\r\n    /**\r\n        @dev Decrease a collateral debt ceiling. Amount will be converted to the correct internal precision.\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The amount to decrease in DAI (ex. 10m DAI amount == 10000000)\r\n        @param _global If true, decreases the global debt ceiling by _amount\r\n    */\r\n    function decreaseIlkDebtCeiling(bytes32 _ilk, uint256 _amount, bool _global) public {\r\n        require(_amount < WAD);  // \"LibDssExec/incorrect-ilk-line-precision\"\r\n        address _vat = vat();\r\n        (,,,uint256 line_,) = DssVat(_vat).ilks(_ilk);\r\n        Fileable(_vat).file(_ilk, \"line\", sub(line_, _amount * RAD));\r\n        if (_global) { decreaseGlobalDebtCeiling(_amount); }\r\n    }\r\n    /**\r\n        @dev Set the parameters for an ilk in the \"MCD_IAM_AUTO_LINE\" auto-line\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The Maximum value (ex. 100m DAI amount == 100000000)\r\n        @param _gap    The amount of Dai per step (ex. 5m Dai == 5000000)\r\n        @param _ttl    The amount of time (in seconds)\r\n    */\r\n    function setIlkAutoLineParameters(bytes32 _ilk, uint256 _amount, uint256 _gap, uint256 _ttl) public {\r\n        require(_amount < WAD);  // \"LibDssExec/incorrect-auto-line-amount-precision\"\r\n        require(_gap < WAD);  // \"LibDssExec/incorrect-auto-line-gap-precision\"\r\n        IAMLike(autoLine()).setIlk(_ilk, _amount * RAD, _gap * RAD, _ttl);\r\n    }\r\n    /**\r\n        @dev Set the debt ceiling for an ilk in the \"MCD_IAM_AUTO_LINE\" auto-line without updating the time values\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The Maximum value (ex. 100m DAI amount == 100000000)\r\n    */\r\n    function setIlkAutoLineDebtCeiling(bytes32 _ilk, uint256 _amount) public {\r\n        address _autoLine = autoLine();\r\n        (, uint256 gap, uint48 ttl,,) = IAMLike(_autoLine).ilks(_ilk);\r\n        require(gap != 0 && ttl != 0);  // \"LibDssExec/auto-line-not-configured\"\r\n        IAMLike(_autoLine).setIlk(_ilk, _amount * RAD, uint256(gap), uint256(ttl));\r\n    }\r\n    /**\r\n        @dev Remove an ilk in the \"MCD_IAM_AUTO_LINE\" auto-line\r\n        @param _ilk    The ilk to remove (ex. bytes32(\"ETH-A\"))\r\n    */\r\n    function removeIlkFromAutoLine(bytes32 _ilk) public {\r\n        IAMLike(autoLine()).remIlk(_ilk);\r\n    }\r\n    /**\r\n        @dev Set a collateral minimum vault amount. Amount will be converted to the correct internal precision.\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setIlkMinVaultAmount(bytes32 _ilk, uint256 _amount) public {\r\n        require(_amount < WAD);  // \"LibDssExec/incorrect-ilk-dust-precision\"\r\n        Fileable(vat()).file(_ilk, \"dust\", _amount * RAD);\r\n    }\r\n    /**\r\n        @dev Set a collateral liquidation penalty. Amount will be converted to the correct internal precision.\r\n        @dev Equation used for conversion is (1 + pct / 10,000) * WAD\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _pct_bps    The pct, in basis points, to set in integer form (x100). (ex. 10.25% = 10.25 * 100 = 1025)\r\n    */\r\n    function setIlkLiquidationPenalty(bytes32 _ilk, uint256 _pct_bps) public {\r\n        require(_pct_bps < BPS_ONE_HUNDRED_PCT);  // \"LibDssExec/incorrect-ilk-chop-precision\"\r\n        Fileable(cat()).file(_ilk, \"chop\", add(WAD, wdiv(_pct_bps, BPS_ONE_HUNDRED_PCT)));\r\n    }\r\n    /**\r\n        @dev Set max DAI amount for liquidation per vault for collateral. Amount will be converted to the correct internal precision.\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setIlkMaxLiquidationAmount(bytes32 _ilk, uint256 _amount) public {\r\n        require(_amount < WAD);  // \"LibDssExec/incorrect-ilk-dunk-precision\"\r\n        Fileable(cat()).file(_ilk, \"dunk\", _amount * RAD);\r\n    }\r\n    /**\r\n        @dev Set a collateral liquidation ratio. Amount will be converted to the correct internal precision.\r\n        @dev Equation used for conversion is pct * RAY / 10,000\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _pct_bps    The pct, in basis points, to set in integer form (x100). (ex. 150% = 150 * 100 = 15000)\r\n    */\r\n    function setIlkLiquidationRatio(bytes32 _ilk, uint256 _pct_bps) public {\r\n        require(_pct_bps < 10 * BPS_ONE_HUNDRED_PCT); // \"LibDssExec/incorrect-ilk-mat-precision\" // Fails if pct >= 1000%\r\n        require(_pct_bps >= BPS_ONE_HUNDRED_PCT); // the liquidation ratio has to be bigger or equal to 100%\r\n        Fileable(spotter()).file(_ilk, \"mat\", rdiv(_pct_bps, BPS_ONE_HUNDRED_PCT));\r\n    }\r\n    /**\r\n        @dev Set minimum bid increase for collateral. Amount will be converted to the correct internal precision.\r\n        @dev Equation used for conversion is (1 + pct / 10,000) * WAD\r\n        @param _ilk   The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _pct_bps    The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500)\r\n    */\r\n    function setIlkMinAuctionBidIncrease(bytes32 _ilk, uint256 _pct_bps) public {\r\n        require(_pct_bps < BPS_ONE_HUNDRED_PCT);  // \"LibDssExec/incorrect-ilk-chop-precision\"\r\n        Fileable(flip(_ilk)).file(\"beg\", add(WAD, wdiv(_pct_bps, BPS_ONE_HUNDRED_PCT)));\r\n    }\r\n    /**\r\n        @dev Set bid duration for a collateral type.\r\n        @param _ilk   The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _duration Amount of time for bids.\r\n    */\r\n    function setIlkBidDuration(bytes32 _ilk, uint256 _duration) public {\r\n        Fileable(flip(_ilk)).file(\"ttl\", _duration);\r\n    }\r\n    /**\r\n        @dev Set auction duration for a collateral type.\r\n        @param _ilk   The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _duration Amount of time for auctions.\r\n    */\r\n    function setIlkAuctionDuration(bytes32 _ilk, uint256 _duration) public {\r\n        Fileable(flip(_ilk)).file(\"tau\", _duration);\r\n    }\r\n    /**\r\n        @dev Set the stability fee for a given ilk.\r\n            Many of the settings that change weekly rely on the rate accumulator\r\n            described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n            To check this yourself, use the following rate calculation (example 8%):\r\n\r\n            $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\r\n\r\n            A table of rates can also be found at:\r\n            https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\r\n\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\") )\r\n        @param _rate   The accumulated rate (ex. 4% => 1000000001243680656318820312)\r\n        @param _doDrip `true` to accumulate stability fees for the collateral\r\n    */\r\n    function setIlkStabilityFee(bytes32 _ilk, uint256 _rate, bool _doDrip) public {\r\n        require((_rate >= RAY) && (_rate <= RATES_ONE_HUNDRED_PCT));  // \"LibDssExec/ilk-stability-fee-out-of-bounds\"\r\n        address _jug = jug();\r\n        if (_doDrip) Drippable(_jug).drip(_ilk);\r\n\r\n        Fileable(_jug).file(_ilk, \"duty\", _rate);\r\n    }\r\n\r\n\r\n    /*************************/\r\n    /*** Oracle Management ***/\r\n    /*************************/\r\n    /**\r\n        @dev Adds oracle feeds to the Median's writer whitelist, allowing the feeds to write prices.\r\n        @param _median Median core contract address\r\n        @param _feeds      Array of oracle feed addresses to add to whitelist\r\n    */\r\n    function addWritersToMedianWhitelist(address _median, address[] memory _feeds) public {\r\n        OracleLike_2(_median).lift(_feeds);\r\n    }\r\n    /**\r\n        @dev Removes oracle feeds to the Median's writer whitelist, disallowing the feeds to write prices.\r\n        @param _median Median core contract address\r\n        @param _feeds      Array of oracle feed addresses to remove from whitelist\r\n    */\r\n    function removeWritersFromMedianWhitelist(address _median, address[] memory _feeds) public {\r\n        OracleLike_2(_median).drop(_feeds);\r\n    }\r\n    /**\r\n        @dev Adds addresses to the Median's reader whitelist, allowing the addresses to read prices from the median.\r\n        @param _median Median core contract address\r\n        @param _readers    Array of addresses to add to whitelist\r\n    */\r\n    function addReadersToMedianWhitelist(address _median, address[] memory _readers) public {\r\n        OracleLike_2(_median).kiss(_readers);\r\n    }\r\n    /**\r\n        @dev Adds an address to the Median's reader whitelist, allowing the address to read prices from the median.\r\n        @param _median Median core contract address\r\n        @param _reader     Address to add to whitelist\r\n    */\r\n    function addReaderToMedianWhitelist(address _median, address _reader) public {\r\n        OracleLike_2(_median).kiss(_reader);\r\n    }\r\n    /**\r\n        @dev Removes addresses from the Median's reader whitelist, disallowing the addresses to read prices from the median.\r\n        @param _median Median core contract address\r\n        @param _readers    Array of addresses to remove from whitelist\r\n    */\r\n    function removeReadersFromMedianWhitelist(address _median, address[] memory _readers) public {\r\n        OracleLike_2(_median).diss(_readers);\r\n    }\r\n    /**\r\n        @dev Removes an address to the Median's reader whitelist, disallowing the address to read prices from the median.\r\n        @param _median Median core contract address\r\n        @param _reader     Address to remove from whitelist\r\n    */\r\n    function removeReaderFromMedianWhitelist(address _median, address _reader) public {\r\n        OracleLike_2(_median).diss(_reader);\r\n    }\r\n    /**\r\n        @dev Sets the minimum number of valid messages from whitelisted oracle feeds needed to update median price.\r\n        @param _median Median core contract address\r\n        @param _minQuorum  Minimum number of valid messages from whitelisted oracle feeds needed to update median price (NOTE: MUST BE ODD NUMBER)\r\n    */\r\n    function setMedianWritersQuorum(address _median, uint256 _minQuorum) public {\r\n        OracleLike_2(_median).setBar(_minQuorum);\r\n    }\r\n    /**\r\n        @dev Adds an address to the Median's reader whitelist, allowing the address to read prices from the OSM.\r\n        @param _osm        Oracle Security Module (OSM) core contract address\r\n        @param _reader     Address to add to whitelist\r\n    */\r\n    function addReaderToOSMWhitelist(address _osm, address _reader) public {\r\n        OracleLike_2(_osm).kiss(_reader);\r\n    }\r\n    /**\r\n        @dev Removes an address to the Median's reader whitelist, disallowing the address to read prices from the OSM.\r\n        @param _osm        Oracle Security Module (OSM) core contract address\r\n        @param _reader     Address to remove from whitelist\r\n    */\r\n    function removeReaderFromOSMWhitelist(address _osm, address _reader) public {\r\n        OracleLike_2(_osm).diss(_reader);\r\n    }\r\n    /**\r\n        @dev Add OSM address to OSM mom, allowing it to be frozen by governance.\r\n        @param _osm        Oracle Security Module (OSM) core contract address\r\n        @param _ilk        Collateral type using OSM\r\n    */\r\n    function allowOSMFreeze(address _osm, bytes32 _ilk) public {\r\n        MomLike(osmMom()).setOsm(_ilk, _osm);\r\n    }\r\n\r\n\r\n    /*****************************/\r\n    /*** Collateral Onboarding ***/\r\n    /*****************************/\r\n\r\n    /**\r\n        @dev Performs basic functions and sanity checks to add a new collateral type to the MCD system\r\n        @param _ilk      Collateral type key code [Ex. \"ETH-A\"]\r\n        @param _gem      Address of token contract\r\n        @param _join     Address of join adapter\r\n        @param _flip     Address of flipper\r\n        @param _pip      Address of price feed\r\n    */\r\n    function addCollateralBase(\r\n        bytes32 _ilk,\r\n        address _gem,\r\n        address _join,\r\n        address _flip,\r\n        address _pip\r\n    ) public {\r\n        // Sanity checks\r\n        address _vat = vat();\r\n        address _cat = cat();\r\n        require(JoinLike(_join).vat() == _vat);     // \"join-vat-not-match\"\r\n        require(JoinLike(_join).ilk() == _ilk);     // \"join-ilk-not-match\"\r\n        require(JoinLike(_join).gem() == _gem);     // \"join-gem-not-match\"\r\n        require(JoinLike(_join).dec() ==\r\n                   ERC20(_gem).decimals());         // \"join-dec-not-match\"\r\n        require(AuctionLike(_flip).vat() == _vat);  // \"flip-vat-not-match\"\r\n        require(AuctionLike(_flip).cat() == _cat);  // \"flip-cat-not-match\"\r\n        require(AuctionLike(_flip).ilk() == _ilk);  // \"flip-ilk-not-match\"\r\n\r\n        // Set the token PIP in the Spotter\r\n        setContract(spotter(), _ilk, \"pip\", _pip);\r\n\r\n        // Set the ilk Flipper in the Cat\r\n        setContract(_cat, _ilk, \"flip\", _flip);\r\n\r\n        // Init ilk in Vat & Jug\r\n        Initializable_1(_vat).init(_ilk);  // Vat\r\n        Initializable_1(jug()).init(_ilk);  // Jug\r\n\r\n        // Allow ilk Join to modify Vat registry\r\n        authorize(_vat, _join);\r\n\t\t// Allow the ilk Flipper to reduce the Cat litterbox on deal()\r\n        authorize(_cat, _flip);\r\n        // Allow Cat to kick auctions in ilk Flipper\r\n        authorize(_flip, _cat);\r\n        // Allow End to yank auctions in ilk Flipper\r\n        authorize(_flip, end());\r\n\r\n        // Add new ilk to the IlkRegistry\r\n        RegistryLike(reg()).add(_join);\r\n    }\r\n\r\n    /***************/\r\n    /*** Payment ***/\r\n    /***************/\r\n    /**\r\n        @dev Send a payment in ERC20 DAI from the surplus buffer.\r\n        @param _target The target address to send the DAI to.\r\n        @param _amount The amount to send in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function sendPaymentFromSurplusBuffer(address _target, uint256 _amount) public {\r\n        require(_amount < WAD);  // \"LibDssExec/incorrect-ilk-line-precision\"\r\n        DssVat(vat()).suck(vow(), address(this), _amount * RAD);\r\n        JoinLike(daiJoin()).exit(_target, _amount * WAD);\r\n    }\r\n}\r\n\r\n////// lib/dss-exec-lib/src/DssAction.sol\r\n//\r\n// DssAction.sol -- DSS Executive Spell Actions\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.6.12; */\r\n\r\n/* import { DssExecLib } from \"./DssExecLib.sol\"; */\r\n/* import { CollateralOpts } from \"./CollateralOpts.sol\"; */\r\n\r\ninterface OracleLike_1 {\r\n    function src() external view returns (address);\r\n}\r\n\r\nabstract contract DssAction {\r\n\r\n    using DssExecLib for *;\r\n\r\n    // Modifier used to limit execution time when office hours is enabled\r\n    modifier limited {\r\n        require(DssExecLib.canCast(uint40(block.timestamp), officeHours()), \"Outside office hours\");\r\n        _;\r\n    }\r\n\r\n    // Office Hours defaults to true by default.\r\n    //   To disable office hours, override this function and\r\n    //    return false in the inherited action.\r\n    function officeHours() public virtual returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    // DssExec calls execute. We limit this function subject to officeHours modifier.\r\n    function execute() external limited {\r\n        actions();\r\n    }\r\n\r\n    // DssAction developer must override `actions()` and place all actions to be called inside.\r\n    //   The DssExec function will call this subject to the officeHours limiter\r\n    //   By keeping this function public we allow simulations of `execute()` on the actions outside of the cast time.\r\n    function actions() public virtual;\r\n\r\n    // Returns the next available cast time\r\n    function nextCastTime(uint256 eta) external returns (uint256 castTime) {\r\n        require(eta <= uint40(-1));\r\n        castTime = DssExecLib.nextCastTime(uint40(eta), uint40(block.timestamp), officeHours());\r\n    }\r\n}\r\n\r\n////// lib/dss-exec-lib/src/DssExec.sol\r\n//\r\n// DssExec.sol -- MakerDAO Executive Spell Template\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.6.12; */\r\n\r\ninterface PauseAbstract {\r\n    function delay() external view returns (uint256);\r\n    function plot(address, bytes32, bytes calldata, uint256) external;\r\n    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\r\n}\r\n\r\ninterface Changelog {\r\n    function getAddress(bytes32) external view returns (address);\r\n}\r\n\r\ninterface SpellAction {\r\n    function officeHours() external view returns (bool);\r\n    function nextCastTime(uint256) external view returns (uint256);\r\n}\r\n\r\ncontract DssExec {\r\n\r\n    Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\r\n    uint256                 public eta;\r\n    bytes                   public sig;\r\n    bool                    public done;\r\n    bytes32       immutable public tag;\r\n    address       immutable public action;\r\n    uint256       immutable public expiration;\r\n    PauseAbstract immutable public pause;\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)\"\r\n    string                  public description;\r\n\r\n    function officeHours() external view returns (bool) {\r\n        return SpellAction(action).officeHours();\r\n    }\r\n\r\n    function nextCastTime() external view returns (uint256 castTime) {\r\n        return SpellAction(action).nextCastTime(eta);\r\n    }\r\n\r\n    // @param _description  A string description of the spell\r\n    // @param _expiration   The timestamp this spell will expire. (Ex. now + 30 days)\r\n    // @param _spellAction  The address of the spell action\r\n    constructor(string memory _description, uint256 _expiration, address _spellAction) public {\r\n        pause       = PauseAbstract(log.getAddress(\"MCD_PAUSE\"));\r\n        description = _description;\r\n        expiration  = _expiration;\r\n        action      = _spellAction;\r\n\r\n        sig = abi.encodeWithSignature(\"execute()\");\r\n        bytes32 _tag;                    // Required for assembly access\r\n        address _action = _spellAction;  // Required for assembly access\r\n        assembly { _tag := extcodehash(_action) }\r\n        tag = _tag;\r\n    }\r\n\r\n    function schedule() public {\r\n        require(now <= expiration, \"This contract has expired\");\r\n        require(eta == 0, \"This spell has already been scheduled\");\r\n        eta = now + PauseAbstract(pause).delay();\r\n        pause.plot(action, tag, sig, eta);\r\n    }\r\n\r\n    function cast() public {\r\n        require(!done, \"spell-already-cast\");\r\n        done = true;\r\n        pause.exec(action, tag, sig, eta);\r\n    }\r\n}\r\n\r\n////// lib/dss-interfaces/src/dapp/DSTokenAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/dapphub/ds-token/blob/master/src/token.sol\r\ninterface DSTokenAbstract {\r\n    function name() external view returns (bytes32);\r\n    function symbol() external view returns (bytes32);\r\n    function decimals() external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address) external view returns (uint256);\r\n    function transfer(address, uint256) external returns (bool);\r\n    function allowance(address, address) external view returns (uint256);\r\n    function approve(address, uint256) external returns (bool);\r\n    function approve(address) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n    function push(address, uint256) external;\r\n    function pull(address, uint256) external;\r\n    function move(address, address, uint256) external;\r\n    function mint(uint256) external;\r\n    function mint(address,uint) external;\r\n    function burn(uint256) external;\r\n    function burn(address,uint) external;\r\n    function setName(bytes32) external;\r\n    function authority() external view returns (address);\r\n    function owner() external view returns (address);\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/GemJoinAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/join.sol\r\ninterface GemJoinAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function vat() external view returns (address);\r\n    function ilk() external view returns (bytes32);\r\n    function gem() external view returns (address);\r\n    function dec() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function cage() external;\r\n    function join(address, uint256) external;\r\n    function exit(address, uint256) external;\r\n}\r\n\r\n////// src/DssSpell.sol\r\n// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity 0.6.12; */\r\n\r\n/* import \"dss-exec-lib/DssExec.sol\"; */\r\n/* import \"dss-exec-lib/DssAction.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/GemJoinAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dapp/DSTokenAbstract.sol\"; */\r\n\r\ninterface Initializable_2 {\r\n    function init(bytes32) external;\r\n}\r\n\r\ninterface Hopeable {\r\n    function hope(address) external;\r\n}\r\n\r\ninterface Kissable {\r\n    function kiss(address) external;\r\n}\r\n\r\ninterface RwaLiquidationLike_1 {\r\n    function ilks(bytes32) external returns (string memory,address,uint48,uint48);\r\n    function init(bytes32, uint256, string calldata, uint48) external;\r\n}\r\n\r\ncontract DssSpellAction is DssAction {\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://raw.githubusercontent.com/makerdao/community/2a7a8c915695b7298fe725ee3dc6c613fa9d9bbe/governance/votes/Executive%20vote%20-%20April%2012%2C%202021.md -q -O - 2>/dev/null)\"\r\n    string public constant description =\r\n        \"2021-04-12 MakerDAO Executive Spell | Hash: 0x431aeda689004abd7c9532c77893667ef6207d7b72a0044ee01b60418ba94830\";\r\n\r\n    // Many of the settings that change weekly rely on the rate accumulator\r\n    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n    // To check this yourself, use the following rate calculation (example 8%):\r\n    //\r\n    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\r\n    //\r\n    // A table of rates can be found at\r\n    //    https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\r\n    //\r\n    uint256 constant THREE_PT_FIVE_PCT  = 1000000001090862085746321732;\r\n\r\n    // Math\r\n    uint256 constant MILLION = 10**6;\r\n    uint256 constant WAD     = 10**18;\r\n    uint256 constant RAD     = 10**45;\r\n\r\n    // Addresses\r\n    address constant RWA002_OPERATOR         = 0x2474F297214E5d96Ba4C81986A9F0e5C260f445D;\r\n    address constant RWA002_GEM              = 0xAAA760c2027817169D7C8DB0DC61A2fb4c19AC23;\r\n    address constant MCD_JOIN_RWA002_A       = 0xe72C7e90bc26c11d45dBeE736F0acf57fC5B7152;\r\n    address constant RWA002_A_URN            = 0x225B3da5BE762Ee52B182157E67BeA0b31968163;\r\n    address constant RWA002_A_INPUT_CONDUIT  = 0x2474F297214E5d96Ba4C81986A9F0e5C260f445D;\r\n    address constant RWA002_A_OUTPUT_CONDUIT = 0x2474F297214E5d96Ba4C81986A9F0e5C260f445D;\r\n\r\n    function actions() public override {\r\n        bytes32 ilk   = \"RWA002-A\";\r\n        uint256 CEIL  = 5 * MILLION;\r\n        uint256 PRICE = 5_634_804 * WAD;\r\n        uint256 MAT   = 10_500;\r\n        uint48 TAU    = 0;\r\n\r\n        // https://ipfs.io/ipfs/QmdfuQSLmNFHoxvMjXvv8qbJ2NWprrsvp5L3rGr3JHw18E\r\n        string memory DOC = \"QmdfuQSLmNFHoxvMjXvv8qbJ2NWprrsvp5L3rGr3JHw18E\";\r\n\r\n        address MIP21_LIQUIDATION_ORACLE =\r\n            DssExecLib.getChangelogAddress(\"MIP21_LIQUIDATION_ORACLE\");\r\n\r\n        address vat = DssExecLib.vat();\r\n\r\n        // Sanity checks\r\n        require(GemJoinAbstract(MCD_JOIN_RWA002_A).vat() == vat, \"join-vat-not-match\");\r\n        require(GemJoinAbstract(MCD_JOIN_RWA002_A).ilk() == ilk, \"join-ilk-not-match\");\r\n        require(GemJoinAbstract(MCD_JOIN_RWA002_A).gem() == RWA002_GEM, \"join-gem-not-match\");\r\n        require(GemJoinAbstract(MCD_JOIN_RWA002_A).dec() == DSTokenAbstract(RWA002_GEM).decimals(), \"join-dec-not-match\");\r\n\r\n        RwaLiquidationLike_1(MIP21_LIQUIDATION_ORACLE).init(\r\n            ilk, PRICE, DOC, TAU\r\n        );\r\n        (,address pip,,) = RwaLiquidationLike_1(MIP21_LIQUIDATION_ORACLE).ilks(ilk);\r\n\r\n        // Set price feed for RWA002\r\n        DssExecLib.setContract(DssExecLib.spotter(), ilk, \"pip\", pip);\r\n\r\n        // Init RWA-002 in Vat\r\n        Initializable_2(vat).init(ilk);\r\n        // Init RWA-002 in Jug\r\n        Initializable_2(DssExecLib.jug()).init(ilk);\r\n\r\n        // Allow RWA-002 Join to modify Vat registry\r\n        DssExecLib.authorize(vat, MCD_JOIN_RWA002_A);\r\n\r\n        // Allow RwaLiquidationOracle to modify Vat registry\r\n        // DssExecLib.authorize(vat, MIP21_LIQUIDATION_ORACLE);\r\n\r\n        // Increase the global debt ceiling by the ilk ceiling\r\n        DssExecLib.increaseGlobalDebtCeiling(CEIL);\r\n        // Set the ilk debt ceiling\r\n        DssExecLib.setIlkDebtCeiling(ilk, CEIL);\r\n\r\n        // No dust\r\n        // DssExecLib.setIlkMinVaultAmount(ilk, 0);\r\n\r\n        // stability fee\r\n        DssExecLib.setIlkStabilityFee(ilk, THREE_PT_FIVE_PCT, false);\r\n\r\n        // collateralization ratio\r\n        DssExecLib.setIlkLiquidationRatio(ilk, MAT);\r\n\r\n        // poke the spotter to pull in a price\r\n        DssExecLib.updateCollateralPrice(ilk);\r\n\r\n        // give the urn permissions on the join adapter\r\n        // DssExecLib.authorize(MCD_JOIN_RWA002_A, RWA002_A_URN);\r\n\r\n        // set up the urn\r\n        Hopeable(RWA002_A_URN).hope(RWA002_OPERATOR);\r\n\r\n        // set up output conduit\r\n        // Hopeable(RWA002_A_OUTPUT_CONDUIT).hope(RWA002_OPERATOR);\r\n\r\n        // Authorize the SC Domain team deployer address on the output conduit\r\n        // during introductory phase. This allows the SC team to assist in the\r\n        // testing of a complete circuit. Once a broker dealer arrangement is\r\n        // established the deployer address should be `deny`ed on the conduit.\r\n        // Kissable(RWA002_A_OUTPUT_CONDUIT).kiss(SC_DOMAIN_DEPLOYER_07);\r\n\r\n        // add RWA-002 contract to the changelog\r\n        DssExecLib.setChangelogAddress(\"RWA002\", RWA002_GEM);\r\n        DssExecLib.setChangelogAddress(\"PIP_RWA002\", pip);\r\n        DssExecLib.setChangelogAddress(\"MCD_JOIN_RWA002_A\", MCD_JOIN_RWA002_A);\r\n        DssExecLib.setChangelogAddress(\"RWA002_A_URN\", RWA002_A_URN);\r\n        DssExecLib.setChangelogAddress(\r\n            \"RWA002_A_INPUT_CONDUIT\", RWA002_A_INPUT_CONDUIT\r\n        );\r\n        DssExecLib.setChangelogAddress(\r\n            \"RWA002_A_OUTPUT_CONDUIT\", RWA002_A_OUTPUT_CONDUIT\r\n        );\r\n\r\n        // bump changelog version\r\n        DssExecLib.setChangelogVersion(\"1.2.11\");\r\n    }\r\n}\r\n\r\ncontract DssSpell is DssExec {\r\n    DssSpellAction internal action_ = new DssSpellAction();\r\n    constructor() DssExec(action_.description(), block.timestamp + 30 days, address(action_)) public {}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"log\",\"outputs\":[{\"internalType\":\"contract Changelog\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextCastTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"castTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"officeHours\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"contract PauseAbstract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DssSpell","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"","EVMVersion":"Default","Library":"DssExecLib:c061edfc9c38912e0ad4f3922aa84ee11fb03347","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b07209858a4878e7a3351446aa6f25db42b93ef8642a8519e0ba8fd4a0db9e69"}]}