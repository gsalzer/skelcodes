{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        uint256 index = digits - 1;\r\n        temp = value;\r\n        while (temp != 0) {\r\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\r\n            temp /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\t\r\n\tfunction uintToPad2Str(uint _num) public pure returns (string memory _uintAsString) {\r\n        require(_num < 100);\r\n        if (_num == 0) \r\n            return \"00\";\r\n        bytes memory bstr = new bytes(2);\r\n        bstr[1] = bytes1(uint8(48 + _num % 10));\r\n        _num /= 10;\r\n        bstr[0] = bytes1(uint8(48 + _num % 10));\r\n        return string(bstr);\r\n    }\r\n    \r\n    function strMatch(string memory _test, string memory _pattern) public pure returns(bool)\r\n    {\r\n        bytes memory pattern = bytes(_pattern);\r\n        bytes memory test = bytes(_test);\r\n        if(pattern.length == test.length)\r\n        {\r\n            for(uint i=0; i<pattern.length; i++)\r\n            {\r\n                if(pattern[i] != \"?\" && pattern[i] != test[i])\r\n                    return false;\r\n            }\r\n            return true;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_test\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_pattern\",\"type\":\"string\"}],\"name\":\"strMatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"uintToPad2Str\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_uintAsString\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"Strings","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://bf923ed7c153692bc88cabde71f2cc5993bdbb5fc68493f70a121aa89be7d80b"}]}