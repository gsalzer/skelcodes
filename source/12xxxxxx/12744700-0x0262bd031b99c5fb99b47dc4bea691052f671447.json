{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.7;\r\n\r\n\r\ncontract GebMath {\r\n    uint256 public constant RAY = 10 ** 27;\r\n    uint256 public constant WAD = 10 ** 18;\r\n\r\n    function ray(uint x) public pure returns (uint z) {\r\n        z = multiply(x, 10 ** 9);\r\n    }\r\n    function rad(uint x) public pure returns (uint z) {\r\n        z = multiply(x, 10 ** 27);\r\n    }\r\n    function minimum(uint x, uint y) public pure returns (uint z) {\r\n        z = (x <= y) ? x : y;\r\n    }\r\n    function addition(uint x, uint y) public pure returns (uint z) {\r\n        z = x + y;\r\n        require(z >= x, \"uint-uint-add-overflow\");\r\n    }\r\n    function subtract(uint x, uint y) public pure returns (uint z) {\r\n        z = x - y;\r\n        require(z <= x, \"uint-uint-sub-underflow\");\r\n    }\r\n    function multiply(uint x, uint y) public pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"uint-uint-mul-overflow\");\r\n    }\r\n    function rmultiply(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, y) / RAY;\r\n    }\r\n    function rdivide(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, RAY) / y;\r\n    }\r\n    function wdivide(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, WAD) / y;\r\n    }\r\n    function wmultiply(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, y) / WAD;\r\n    }\r\n    function rpower(uint x, uint n, uint base) public pure returns (uint z) {\r\n        assembly {\r\n            switch x case 0 {switch n case 0 {z := base} default {z := 0}}\r\n            default {\r\n                switch mod(n, 2) case 0 { z := base } default { z := x }\r\n                let half := div(base, 2)  // for rounding.\r\n                for { n := div(n, 2) } n { n := div(n,2) } {\r\n                    let xx := mul(x, x)\r\n                    if iszero(eq(div(xx, x), x)) { revert(0,0) }\r\n                    let xxRound := add(xx, half)\r\n                    if lt(xxRound, xx) { revert(0,0) }\r\n                    x := div(xxRound, base)\r\n                    if mod(n,2) {\r\n                        let zx := mul(z, x)\r\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\r\n                        let zxRound := add(zx, half)\r\n                        if lt(zxRound, zx) { revert(0,0) }\r\n                        z := div(zxRound, base)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract StabilityFeeTreasuryLike {\r\n    function getAllowance(address) virtual external view returns (uint, uint);\r\n    function systemCoin() virtual external view returns (address);\r\n    function pullFunds(address, address, uint) virtual external;\r\n}\r\n\r\ncontract IncreasingTreasuryReimbursement is GebMath {\r\n    // --- Auth ---\r\n    mapping (address => uint) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) virtual external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) virtual external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"IncreasingTreasuryReimbursement/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Variables ---\r\n    // Starting reward for the fee receiver/keeper\r\n    uint256 public baseUpdateCallerReward;          // [wad]\r\n    // Max possible reward for the fee receiver/keeper\r\n    uint256 public maxUpdateCallerReward;           // [wad]\r\n    // Max delay taken into consideration when calculating the adjusted reward\r\n    uint256 public maxRewardIncreaseDelay;          // [seconds]\r\n    // Rate applied to baseUpdateCallerReward every extra second passed beyond a certain point (e.g next time when a specific function needs to be called)\r\n    uint256 public perSecondCallerRewardIncrease;   // [ray]\r\n\r\n    // SF treasury\r\n    StabilityFeeTreasuryLike  public treasury;\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n    event ModifyParameters(\r\n      bytes32 parameter,\r\n      address addr\r\n    );\r\n    event ModifyParameters(\r\n      bytes32 parameter,\r\n      uint256 val\r\n    );\r\n    event FailRewardCaller(bytes revertReason, address feeReceiver, uint256 amount);\r\n\r\n    constructor(\r\n      address treasury_,\r\n      uint256 baseUpdateCallerReward_,\r\n      uint256 maxUpdateCallerReward_,\r\n      uint256 perSecondCallerRewardIncrease_\r\n    ) public {\r\n        if (address(treasury_) != address(0)) {\r\n          require(StabilityFeeTreasuryLike(treasury_).systemCoin() != address(0), \"IncreasingTreasuryReimbursement/treasury-coin-not-set\");\r\n        }\r\n        require(maxUpdateCallerReward_ >= baseUpdateCallerReward_, \"IncreasingTreasuryReimbursement/invalid-max-caller-reward\");\r\n        require(perSecondCallerRewardIncrease_ >= RAY, \"IncreasingTreasuryReimbursement/invalid-per-second-reward-increase\");\r\n        authorizedAccounts[msg.sender] = 1;\r\n\r\n        treasury                        = StabilityFeeTreasuryLike(treasury_);\r\n        baseUpdateCallerReward          = baseUpdateCallerReward_;\r\n        maxUpdateCallerReward           = maxUpdateCallerReward_;\r\n        perSecondCallerRewardIncrease   = perSecondCallerRewardIncrease_;\r\n        maxRewardIncreaseDelay          = uint(-1);\r\n\r\n        emit AddAuthorization(msg.sender);\r\n        emit ModifyParameters(\"treasury\", treasury_);\r\n        emit ModifyParameters(\"baseUpdateCallerReward\", baseUpdateCallerReward);\r\n        emit ModifyParameters(\"maxUpdateCallerReward\", maxUpdateCallerReward);\r\n        emit ModifyParameters(\"perSecondCallerRewardIncrease\", perSecondCallerRewardIncrease);\r\n    }\r\n\r\n    // --- Boolean Logic ---\r\n    function either(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := or(x, y)}\r\n    }\r\n\r\n    // --- Treasury ---\r\n    /**\r\n    * @notice This returns the stability fee treasury allowance for this contract by taking the minimum between the per block and the total allowances\r\n    **/\r\n    function treasuryAllowance() public view returns (uint256) {\r\n        (uint total, uint perBlock) = treasury.getAllowance(address(this));\r\n        return minimum(total, perBlock);\r\n    }\r\n    /*\r\n    * @notice Get the SF reward that can be sent to a function caller right now\r\n    * @param timeOfLastUpdate The last time when the function that the treasury pays for has been updated\r\n    * @param defaultDelayBetweenCalls Enforced delay between calls to the function for which the treasury reimburses callers\r\n    */\r\n    function getCallerReward(uint256 timeOfLastUpdate, uint256 defaultDelayBetweenCalls) public view returns (uint256) {\r\n        // If the rewards are null or if the time of the last update is in the future or present, return 0\r\n        bool nullRewards = (baseUpdateCallerReward == 0 && maxUpdateCallerReward == 0);\r\n        if (either(timeOfLastUpdate >= now, nullRewards)) return 0;\r\n\r\n        // If the time elapsed is smaller than defaultDelayBetweenCalls or if the base reward is zero, return 0\r\n        uint256 timeElapsed = (timeOfLastUpdate == 0) ? defaultDelayBetweenCalls : subtract(now, timeOfLastUpdate);\r\n        if (either(timeElapsed < defaultDelayBetweenCalls, baseUpdateCallerReward == 0)) {\r\n            return 0;\r\n        }\r\n\r\n        // If too much time elapsed, return the max reward\r\n        uint256 adjustedTime      = subtract(timeElapsed, defaultDelayBetweenCalls);\r\n        uint256 maxPossibleReward = minimum(maxUpdateCallerReward, treasuryAllowance() / RAY);\r\n        if (adjustedTime > maxRewardIncreaseDelay) {\r\n            return maxPossibleReward;\r\n        }\r\n\r\n        // Calculate the reward\r\n        uint256 calculatedReward = baseUpdateCallerReward;\r\n        if (adjustedTime > 0) {\r\n            calculatedReward = rmultiply(rpower(perSecondCallerRewardIncrease, adjustedTime, RAY), calculatedReward);\r\n        }\r\n\r\n        // If the reward is higher than max, set it to max\r\n        if (calculatedReward > maxPossibleReward) {\r\n            calculatedReward = maxPossibleReward;\r\n        }\r\n        return calculatedReward;\r\n    }\r\n    /**\r\n    * @notice Send a stability fee reward to an address\r\n    * @param proposedFeeReceiver The SF receiver\r\n    * @param reward The system coin amount to send\r\n    **/\r\n    function rewardCaller(address proposedFeeReceiver, uint256 reward) internal {\r\n        // If the receiver is the treasury itself or if the treasury is null or if the reward is zero, return\r\n        if (address(treasury) == proposedFeeReceiver) return;\r\n        if (either(address(treasury) == address(0), reward == 0)) return;\r\n\r\n        // Determine the actual receiver and send funds\r\n        address finalFeeReceiver = (proposedFeeReceiver == address(0)) ? msg.sender : proposedFeeReceiver;\r\n        try treasury.pullFunds(finalFeeReceiver, treasury.systemCoin(), reward) {}\r\n        catch(bytes memory revertReason) {\r\n            emit FailRewardCaller(revertReason, finalFeeReceiver, reward);\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract SAFEEngineLike {\r\n    function modifyParameters(\r\n        bytes32 collateralType,\r\n        bytes32 parameter,\r\n        uint256 data\r\n    ) virtual external;\r\n    function collateralTypes(bytes32) virtual public view returns (\r\n        uint256 debtAmount,        // [wad]\r\n        uint256 accumulatedRate,   // [ray]\r\n        uint256 safetyPrice,       // [ray]\r\n        uint256 debtCeiling        // [rad]\r\n    );\r\n}\r\nabstract contract OracleRelayerLike {\r\n    function redemptionPrice() virtual public returns (uint256);\r\n}\r\nabstract contract OracleLike {\r\n    function read() virtual external view returns (uint256);\r\n}\r\n\r\ncontract SingleDebtFloorAdjuster is IncreasingTreasuryReimbursement {\r\n    // --- Auth ---\r\n    // Mapping of addresses that are allowed to manually recompute the debt floor (without being rewarded for it)\r\n    mapping (address => uint256) public manualSetters;\r\n    /*\r\n    * @notify Add a new manual setter\r\n    * @param account The address of the new manual setter\r\n    */\r\n    function addManualSetter(address account) external isAuthorized {\r\n        manualSetters[account] = 1;\r\n        emit AddManualSetter(account);\r\n    }\r\n    /*\r\n    * @notify Remove a manual setter\r\n    * @param account The address of the manual setter to remove\r\n    */\r\n    function removeManualSetter(address account) external isAuthorized {\r\n        manualSetters[account] = 0;\r\n        emit RemoveManualSetter(account);\r\n    }\r\n    /*\r\n    * @notice Modifier for checking that the msg.sender is a whitelisted manual setter\r\n    */\r\n    modifier isManualSetter {\r\n        require(manualSetters[msg.sender] == 1, \"SingleDebtFloorAdjuster/not-manual-setter\");\r\n        _;\r\n    }\r\n\r\n    // --- Variables ---\r\n    // The collateral's name\r\n    bytes32 public collateralName;\r\n    // Gas amount needed to liquidate a Safe backed by the collateral type with the collateralName\r\n    uint256 public gasAmountForLiquidation;\r\n    // The max value for the debt floor\r\n    uint256 public maxDebtFloor;                    // [rad]\r\n    // The min amount of system coins that must be generated using this collateral type\r\n    uint256 public minDebtFloor;                    // [rad]\r\n    // When the debt floor was last updated\r\n    uint256 public lastUpdateTime;                  // [timestamp]\r\n    // Enforced gap between calls\r\n    uint256 public updateDelay;                     // [seconds]\r\n    // Last timestamp of a manual update\r\n    uint256 public lastManualUpdateTime;            // [seconds]\r\n\r\n    // The SAFEEngine contract\r\n    SAFEEngineLike    public safeEngine;\r\n    // The OracleRelayer contract\r\n    OracleRelayerLike public oracleRelayer;\r\n    // The gas price oracle\r\n    OracleLike        public gasPriceOracle;\r\n    // The ETH price oracle\r\n    OracleLike        public ethPriceOracle;\r\n\r\n    // --- Events ---\r\n    event AddManualSetter(address account);\r\n    event RemoveManualSetter(address account);\r\n    event UpdateFloor(uint256 nextDebtFloor);\r\n\r\n    constructor(\r\n      address safeEngine_,\r\n      address oracleRelayer_,\r\n      address treasury_,\r\n      address gasPriceOracle_,\r\n      address ethPriceOracle_,\r\n      bytes32 collateralName_,\r\n      uint256 baseUpdateCallerReward_,\r\n      uint256 maxUpdateCallerReward_,\r\n      uint256 perSecondCallerRewardIncrease_,\r\n      uint256 updateDelay_,\r\n      uint256 gasAmountForLiquidation_,\r\n      uint256 maxDebtFloor_,\r\n      uint256 minDebtFloor_\r\n    ) public IncreasingTreasuryReimbursement(treasury_, baseUpdateCallerReward_, maxUpdateCallerReward_, perSecondCallerRewardIncrease_) {\r\n        require(safeEngine_ != address(0), \"SingleDebtFloorAdjuster/invalid-safe-engine\");\r\n        require(oracleRelayer_ != address(0), \"SingleDebtFloorAdjuster/invalid-oracle-relayer\");\r\n        require(gasPriceOracle_ != address(0), \"SingleDebtFloorAdjuster/invalid-gas-price-oracle\");\r\n        require(ethPriceOracle_ != address(0), \"SingleDebtFloorAdjuster/invalid-eth-price-oracle\");\r\n        require(updateDelay_ > 0, \"SingleDebtFloorAdjuster/invalid-update-delay\");\r\n        require(both(gasAmountForLiquidation_ > 0, gasAmountForLiquidation_ < block.gaslimit), \"SingleDebtFloorAdjuster/invalid-liq-gas-amount\");\r\n        require(minDebtFloor_ > 0, \"SingleDebtFloorAdjuster/invalid-min-floor\");\r\n        require(both(maxDebtFloor_ > 0, maxDebtFloor_ > minDebtFloor_), \"SingleDebtFloorAdjuster/invalid-max-floor\");\r\n\r\n        manualSetters[msg.sender] = 1;\r\n\r\n        safeEngine              = SAFEEngineLike(safeEngine_);\r\n        oracleRelayer           = OracleRelayerLike(oracleRelayer_);\r\n        gasPriceOracle          = OracleLike(gasPriceOracle_);\r\n        ethPriceOracle          = OracleLike(ethPriceOracle_);\r\n        collateralName          = collateralName_;\r\n        gasAmountForLiquidation = gasAmountForLiquidation_;\r\n        updateDelay             = updateDelay_;\r\n        maxDebtFloor            = maxDebtFloor_;\r\n        minDebtFloor            = minDebtFloor_;\r\n        lastManualUpdateTime    = now;\r\n\r\n        oracleRelayer.redemptionPrice();\r\n\r\n        emit AddManualSetter(msg.sender);\r\n        emit ModifyParameters(\"oracleRelayer\", oracleRelayer_);\r\n        emit ModifyParameters(\"gasPriceOracle\", gasPriceOracle_);\r\n        emit ModifyParameters(\"ethPriceOracle\", ethPriceOracle_);\r\n        emit ModifyParameters(\"gasAmountForLiquidation\", gasAmountForLiquidation);\r\n        emit ModifyParameters(\"updateDelay\", updateDelay);\r\n        emit ModifyParameters(\"maxDebtFloor\", maxDebtFloor);\r\n        emit ModifyParameters(\"minDebtFloor\", minDebtFloor);\r\n    }\r\n    \r\n    \r\n    \r\n    // 0x6d6178526577617264496e63726561736544656c617900000000000000000000\r\n    // 0x6c00000000000000000000000000000000000000000000000000000000000000\r\n    \r\n    \r\n    \r\n    \r\n\r\n    // --- Boolean Logic ---\r\n    function both(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := and(x, y)}\r\n    }\r\n\r\n    // --- Math ---\r\n    function divide(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y > 0, \"SingleDebtFloorAdjuster/div-y-null\");\r\n        z = x / y;\r\n        require(z <= x, \"SingleDebtFloorAdjuster/div-invalid\");\r\n    }\r\n\r\n    // --- Administration ---\r\n    /*\r\n    * @notify Update the address of a contract that this adjuster is connected to\r\n    * @param parameter The name of the contract to update the address for\r\n    * @param addr The new contract address\r\n    */\r\n    function modifyParameters(bytes32 parameter, address addr) external isAuthorized {\r\n        require(addr != address(0), \"SingleDebtFloorAdjuster/null-address\");\r\n        if (parameter == \"treasury\") {\r\n            treasury = StabilityFeeTreasuryLike(addr);\r\n        }\r\n        else if (parameter == \"oracleRelayer\") {\r\n            oracleRelayer = OracleRelayerLike(addr);\r\n            oracleRelayer.redemptionPrice();\r\n        }\r\n        else if (parameter == \"gasPriceOracle\") {\r\n            gasPriceOracle = OracleLike(addr);\r\n            gasPriceOracle.read();\r\n        }\r\n        else if (parameter == \"ethPriceOracle\") {\r\n            ethPriceOracle = OracleLike(addr);\r\n            ethPriceOracle.read();\r\n        }\r\n        else revert(\"SingleDebtFloorAdjuster/modify-unrecognized-params\");\r\n        emit ModifyParameters(parameter, addr);\r\n    }\r\n    /*\r\n    * @notify Modify an uint256 param\r\n    * @param parameter The name of the parameter to modify\r\n    * @param val The new parameter value\r\n    */\r\n    function modifyParameters(bytes32 parameter, uint256 val) external isAuthorized {\r\n        if (parameter == \"baseUpdateCallerReward\") {\r\n          require(val <= maxUpdateCallerReward, \"SingleDebtFloorAdjuster/invalid-base-caller-reward\");\r\n          baseUpdateCallerReward = val;\r\n        }\r\n        else if (parameter == \"maxUpdateCallerReward\") {\r\n          require(val >= baseUpdateCallerReward, \"SingleDebtFloorAdjuster/invalid-max-caller-reward\");\r\n          maxUpdateCallerReward = val;\r\n        }\r\n        else if (parameter == \"perSecondCallerRewardIncrease\") {\r\n          require(val >= RAY, \"SingleDebtFloorAdjuster/invalid-caller-reward-increase\");\r\n          perSecondCallerRewardIncrease = val;\r\n        }\r\n        else if (parameter == \"maxRewardIncreaseDelay\") {\r\n          require(val > 0, \"SingleDebtFloorAdjuster/invalid-max-increase-delay\");\r\n          maxRewardIncreaseDelay = val;\r\n        }\r\n        else if (parameter == \"updateDelay\") {\r\n          require(val >= 0, \"SingleDebtFloorAdjuster/invalid-call-gap-length\");\r\n          updateDelay = val;\r\n        }\r\n        else if (parameter == \"maxDebtFloor\") {\r\n          require(both(val > 0, val > minDebtFloor), \"SingleDebtFloorAdjuster/invalid-max-floor\");\r\n          maxDebtFloor = val;\r\n        }\r\n        else if (parameter == \"minDebtFloor\") {\r\n          require(both(val > 0, val < maxDebtFloor), \"SingleDebtFloorAdjuster/invalid-min-floor\");\r\n          minDebtFloor = val;\r\n        }\r\n        else if (parameter == \"lastUpdateTime\") {\r\n          require(val > now, \"SingleDebtFloorAdjuster/invalid-update-time\");\r\n          lastUpdateTime = val;\r\n        }\r\n        else if (parameter == \"gasAmountForLiquidation\") {\r\n          require(both(val > 0, val < block.gaslimit), \"SingleDebtFloorAdjuster/invalid-liq-gas-amount\");\r\n          gasAmountForLiquidation = val;\r\n        }\r\n        else revert(\"SingleDebtFloorAdjuster/modify-unrecognized-param\");\r\n        emit ModifyParameters(\r\n          parameter,\r\n          val\r\n        );\r\n    }\r\n\r\n    // --- Utils ---\r\n    /*\r\n    * @notify Internal function meant to modify the collateral's debt floor\r\n    * @param nextDebtFloor The new floor to set\r\n    */\r\n    function setFloor(uint256 nextDebtFloor) internal {\r\n        require(nextDebtFloor > 0, \"SingleDebtFloorAdjuster/null-debt-floor\");\r\n        safeEngine.modifyParameters(collateralName, \"debtFloor\", nextDebtFloor);\r\n        emit UpdateFloor(nextDebtFloor);\r\n    }\r\n\r\n    // --- Core Logic ---\r\n    /*\r\n    * @notify Automatically recompute and set a new debt floor for the collateral type with collateralName\r\n    * @param feeReceiver The address that will receive the reward for calling this function\r\n    */\r\n    function recomputeCollateralDebtFloor(address feeReceiver) external {\r\n        // Check that the update time is not in the future\r\n        require(lastUpdateTime < now, \"SingleDebtFloorAdjuster/update-time-in-the-future\");\r\n        // Check delay between calls\r\n        require(either(subtract(now, lastUpdateTime) >= updateDelay, lastUpdateTime == 0), \"SingleDebtFloorAdjuster/wait-more\");\r\n\r\n        // Get the caller's reward\r\n        uint256 callerReward = getCallerReward(lastUpdateTime, updateDelay);\r\n        // Update lastUpdateTime\r\n        lastUpdateTime = now;\r\n\r\n        // Get the next floor and set it\r\n        uint256 nextCollateralFloor = getNextCollateralFloor();\r\n        setFloor(nextCollateralFloor);\r\n\r\n        // Pay the caller for updating the floor\r\n        rewardCaller(feeReceiver, callerReward);\r\n    }\r\n    /*\r\n    * @notice Manually recompute and set a new debt floor for the collateral type with collateralName\r\n    */\r\n    function manualRecomputeCollateralDebtFloor() external isManualSetter {\r\n        require(now > lastManualUpdateTime, \"SingleDebtFloorAdjuster/cannot-update-twice-same-block\");\r\n        uint256 nextCollateralFloor = getNextCollateralFloor();\r\n        lastManualUpdateTime = now;\r\n        setFloor(nextCollateralFloor);\r\n    }\r\n\r\n    // --- Getters ---\r\n    /*\r\n    * @notify View function meant to return the new and upcoming debt floor. It checks for min/max bounds for newly computed floors\r\n    */\r\n    function getNextCollateralFloor() public returns (uint256) {\r\n        (, , , uint256 debtCeiling) = safeEngine.collateralTypes(collateralName);\r\n        uint256 lowestPossibleFloor  = minimum(debtCeiling, minDebtFloor);\r\n        uint256 highestPossibleFloor = minimum(debtCeiling, maxDebtFloor);\r\n\r\n        // Read the gas and the ETH prices\r\n        uint256 gasPrice = gasPriceOracle.read();\r\n        uint256 ethPrice = ethPriceOracle.read();\r\n\r\n        // Calculate the denominated value of the new debt floor\r\n        uint256 debtFloorValue = divide(multiply(multiply(gasPrice, gasAmountForLiquidation), ethPrice), WAD);\r\n\r\n        // Calculate the new debt floor in terms of system coins\r\n        uint256 redemptionPrice     = oracleRelayer.redemptionPrice();\r\n        uint256 systemCoinDebtFloor = multiply(divide(multiply(debtFloorValue, RAY), redemptionPrice), RAY);\r\n\r\n        // Check boundaries\r\n        if (systemCoinDebtFloor <= lowestPossibleFloor) return lowestPossibleFloor;\r\n        else if (systemCoinDebtFloor >= highestPossibleFloor) return highestPossibleFloor;\r\n\r\n        return systemCoinDebtFloor;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safeEngine_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleRelayer_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gasPriceOracle_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethPriceOracle_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"collateralName_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUpdateCallerReward_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxUpdateCallerReward_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perSecondCallerRewardIncrease_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updateDelay_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasAmountForLiquidation_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebtFloor_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDebtFloor_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddManualSetter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"revertReason\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FailRewardCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveManualSetter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextDebtFloor\",\"type\":\"uint256\"}],\"name\":\"UpdateFloor\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addManualSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"addition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseUpdateCallerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethPriceOracle\",\"outputs\":[{\"internalType\":\"contract OracleLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasAmountForLiquidation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasPriceOracle\",\"outputs\":[{\"internalType\":\"contract OracleLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeOfLastUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defaultDelayBetweenCalls\",\"type\":\"uint256\"}],\"name\":\"getCallerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextCollateralFloor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastManualUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualRecomputeCollateralDebtFloor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"manualSetters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDebtFloor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRewardIncreaseDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxUpdateCallerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDebtFloor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"minimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"multiply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRelayer\",\"outputs\":[{\"internalType\":\"contract OracleRelayerLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perSecondCallerRewardIncrease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"rad\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"ray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"rdivide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"}],\"name\":\"recomputeCollateralDebtFloor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeManualSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"rmultiply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"}],\"name\":\"rpower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeEngine\",\"outputs\":[{\"internalType\":\"contract SAFEEngineLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"subtract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract StabilityFeeTreasuryLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"wdivide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"wmultiply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"SingleDebtFloorAdjuster","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cc88a9d330da1133df3a7bd823b95e52511a69620000000000000000000000004ed9c0dca0479bc64d8f4eb3007126d5791f785100000000000000000000000083533fdd3285f48204215e9cf38c785371258e760000000000000000000000003a3e9d4d1afc6f9d7e0e9a4032a7ddbc1500d7a50000000000000000000000003a3e9d4d1afc6f9d7e0e9a4032a7ddbc1500d7a54554482d410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000033b2e3c9fd0803ce8000000000000000000000000000000000000000000000000000000000000000024ea00000000000000000000000000000000000000000000000000000000000007a1200000000000000000000a70c3c40a64e6c51999090b65f67d9240000000000000000000000000000000000000002cd76fe086b93ce2f768a00b22a00000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cb14a97ca77bbfd80e5ee6cd7fd459a71e22b1b417835a5c678ec9eee8a5275f"}]}