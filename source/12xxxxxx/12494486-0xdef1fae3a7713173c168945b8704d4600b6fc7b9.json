{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: BSD-2-Clause\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\nðŸŒŽ Website: https://DefiFactory.finance\r\nðŸ’» Dashboard: https://app.defifactory.fi\r\nðŸ‘‰ Telegram: https://t.me/DefiFactoryBot?start=info-join\r\n*/\r\n\r\ninterface IDefiFactoryToken {\r\n    function mintHumanAddress(address to, uint desiredAmountToMint) external;\r\n\r\n    function burnHumanAddress(address from, uint desiredAmountToBurn) external;\r\n\r\n    function mintUniswapContract(address to, uint realAmountToMint) external;\r\n\r\n    function burnUniswapContract(address from, uint realAmountBurn) external;\r\n    \r\n    function getUtilsContractAtPos(uint pos)\r\n        external\r\n        view\r\n        returns (address);\r\n        \r\n    function transferFromTeamVestingContract(address recipient, uint256 amount) external;\r\n}\r\n\r\nstruct TaxAmountsInput {\r\n    address sender;\r\n    address recipient;\r\n    uint transferAmount;\r\n    uint senderRealBalance;\r\n    uint recipientRealBalance;\r\n}\r\nstruct TaxAmountsOutput {\r\n    uint senderRealBalance;\r\n    uint recipientRealBalance;\r\n    uint burnAndRewardAmount;\r\n    uint recipientGetsAmount;\r\n}\r\nstruct TemporaryReferralRealAmountsBulk {\r\n    address addr;\r\n    uint realBalance;\r\n}\r\n\r\ninterface INoBotsTech {\r\n    function prepareTaxAmounts(\r\n        TaxAmountsInput calldata taxAmountsInput\r\n    ) \r\n        external\r\n        returns(TaxAmountsOutput memory taxAmountsOutput);\r\n    \r\n    function getTemporaryReferralRealAmountsBulk(address[] calldata addrs)\r\n        external\r\n        view\r\n        returns (TemporaryReferralRealAmountsBulk[] memory);\r\n        \r\n    function prepareHumanAddressMintOrBurnRewardsAmounts(bool isMint, address account, uint desiredAmountToMintOrBurn)\r\n        external\r\n        returns (uint realAmountToMintOrBurn);\r\n        \r\n    function getBalance(address account, uint accountBalance)\r\n        external\r\n        view\r\n        returns(uint);\r\n        \r\n    function getRealBalance(address account, uint accountBalance)\r\n        external\r\n        view\r\n        returns(uint);\r\n        \r\n    function getRealBalanceTeamVestingContract(uint accountBalance)\r\n        external\r\n        view\r\n        returns(uint);\r\n        \r\n    function getTotalSupply()\r\n        external\r\n        view\r\n        returns (uint);\r\n        \r\n    function grantRole(bytes32 role, address account) \r\n        external;\r\n        \r\n    function getCalculatedReferrerRewards(address addr, address[] calldata referrals)\r\n        external\r\n        view\r\n        returns (uint);\r\n        \r\n    function getCachedReferrerRewards(address addr)\r\n        external\r\n        view\r\n        returns (uint);\r\n    \r\n    function updateReferrersRewards(address[] calldata referrals)\r\n        external;\r\n    \r\n    function clearReferrerRewards(address addr)\r\n        external;\r\n    \r\n    function chargeCustomTax(uint taxAmount, uint accountBalance)\r\n        external\r\n        returns (uint);\r\n    \r\n    function chargeCustomTaxTeamVestingContract(uint taxAmount, uint accountBalance)\r\n        external\r\n        returns (uint);\r\n        \r\n    function registerReferral(address referral, address referrer)\r\n        external;\r\n        \r\n    function filterNonZeroReferrals(address[] calldata referrals)\r\n        external\r\n        view\r\n        returns (address[] memory);\r\n        \r\n    function publicForcedUpdateCacheMultiplier()\r\n        external;\r\n    \r\n    event MultiplierUpdated(uint newMultiplier);\r\n    event BotTransactionDetected(address from, address to, uint transferAmount, uint taxedAmount);\r\n    event ReferrerRewardUpdated(address referrer, uint amount);\r\n    event ReferralRegistered(address referral, address referrer);\r\n    event ReferrerReplaced(address referral, address referrerFrom, address referrerTo);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    \r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    )\r\n        external\r\n        view\r\n        returns (address);\r\n        \r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) \r\n        external\r\n        returns (address);\r\n        \r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    \r\n    function sync()\r\n        external;\r\n        \r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint, uint, uint32);\r\n        \r\n    function token0()\r\n        external\r\n        view\r\n        returns (address);\r\n        \r\n    function token1()\r\n        external\r\n        view\r\n        returns (address);\r\n        \r\n    function mint(address to) \r\n        external\r\n        returns (uint);       \r\n    \r\n    function swap(\r\n        uint amount0Out, \r\n        uint amount1Out, \r\n        address to, \r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\ninterface IWeth {\r\n\r\n    function balanceOf(\r\n        address account\r\n    )\r\n        external\r\n        view\r\n        returns (uint);\r\n        \r\n    function decimals()\r\n        external\r\n        view\r\n        returns (uint);\r\n\r\n    function transfer(\r\n        address _to,\r\n        uint _value\r\n    )  external returns (\r\n        bool success\r\n    );\r\n        \r\n    function deposit()\r\n        external\r\n        payable;\r\n\r\n    function withdraw(\r\n        uint wad\r\n    ) external;\r\n\r\n    function approve(\r\n        address _spender,\r\n        uint _value\r\n    )  external returns (\r\n        bool success\r\n    );\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant alphabet = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = alphabet[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n    function grantRole(bytes32 role, address account) external;\r\n    function revokeRole(bytes32 role, address account) external;\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `ROLE_ADMIN`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `ROLE_ADMIN` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping (address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping (bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant ROLE_ADMIN = 0x00;\r\n\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role, _msgSender());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view {\r\n        if(!hasRole(role, account)) {\r\n            revert(string(abi.encodePacked(\r\n                \"AccessControl: account \",\r\n                Strings.toHexString(uint160(account), 20),\r\n                \" is missing role \",\r\n                Strings.toHexString(uint256(role), 32)\r\n            )));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\r\n        _roles[role].adminRole = adminRole;\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastvalue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastvalue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n/**\r\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\r\n */\r\ninterface IAccessControlEnumerable {\r\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\r\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\r\n */\r\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    mapping (bytes32 => EnumerableSet.AddressSet) private _roleMembers;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControlEnumerable).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\r\n        return _roleMembers[role].at(index);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\r\n        return _roleMembers[role].length();\r\n    }\r\n\r\n    /**\r\n     * @dev Overload {grantRole} to track enumerable memberships\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override {\r\n        super.grantRole(role, account);\r\n        _roleMembers[role].add(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload {revokeRole} to track enumerable memberships\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override {\r\n        super.revokeRole(role, account);\r\n        _roleMembers[role].remove(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload {renounceRole} to track enumerable memberships\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        super.renounceRole(role, account);\r\n        _roleMembers[role].remove(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload {_setupRole} to track enumerable memberships\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual override {\r\n        super._setupRole(role, account);\r\n        _roleMembers[role].add(account);\r\n    }\r\n}\r\n\r\ncontract TeamVestingContract is AccessControlEnumerable {\r\n    bytes32 public constant ROLE_WHITELIST = keccak256(\"ROLE_WHITELIST\");\r\n    \r\n    uint constant NOBOTS_TECH_CONTRACT_ID = 0;\r\n    uint constant UNISWAP_V2_FACTORY_CONTRACT_ID = 2;\r\n\r\n    struct Investor {\r\n        address addr;\r\n        uint wethValue;\r\n        uint sentValue;\r\n        uint startDelay;\r\n        uint lockFor;\r\n    }\r\n    \r\n    enum States { AcceptingPayments, ReachedGoal, PreparedAddLiqudity, CreatedPair, AddedLiquidity, DistributedTokens }\r\n    States public state;\r\n    \r\n    mapping(address => uint) cachedIndex;\r\n    Investor[] investors;\r\n    uint public totalInvested;\r\n    uint public totalSent;\r\n    \r\n    address public defiFactoryToken;\r\n    \r\n    uint public constant TOTAL_SUPPLY_CAP = 100 * 1e9 * 1e18; // 100B DEFT\r\n    \r\n    uint public percentForTheTeam = 30; // 5% - marketing; 10% - team; 15% - developer\r\n    uint public percentForUniswap = 70; // 70% - to uniswap\r\n    uint constant PERCENT_DENORM = 100;\r\n    \r\n    address public nativeToken;\r\n    \r\n    address public developerAddress;\r\n    uint public developerCap;\r\n    uint public constant DEVELOPER_STARTING_LOCK_DELAY = 0 days;\r\n    uint public constant DEVELOPER_STARTING_LOCK_FOR = 730 days;\r\n    \r\n    address public teamAddress;\r\n    uint public teamCap;\r\n    uint public constant TEAM_STARTING_LOCK_DELAY = 0 days;\r\n    uint public constant TEAM_STARTING_LOCK_FOR = 730 days;\r\n    \r\n    address public marketingAddress;\r\n    uint public marketingCap;\r\n    uint public constant MARKETING_STARTING_LOCK_DELAY = 0;\r\n    uint public constant MARKETING_STARTING_LOCK_FOR = 365 days;\r\n    \r\n    uint public startedLocking;\r\n    address public wethAndTokenPairContract;\r\n    \r\n    \r\n    uint public amountOfTokensForInvestors;\r\n    \r\n    address constant BURN_ADDRESS = address(0x0);\r\n    \r\n    constructor() {\r\n        _setupRole(ROLE_ADMIN, _msgSender());\r\n        state = States.AcceptingPayments;\r\n    }\r\n\r\n    receive() external payable {\r\n        require(state == States.AcceptingPayments, \"TVC: Accepting payments has been stopped!\");\r\n        \r\n        addInvestor(_msgSender(), msg.value);\r\n    }\r\n\r\n    function addInvestor(address addr, uint wethValue)\r\n        internal\r\n    {\r\n        uint updMaxInvestAmount;\r\n        uint lockFor;\r\n        uint startDelay;\r\n        if (addr == developerAddress)\r\n        {\r\n            updMaxInvestAmount = developerCap;\r\n            lockFor = DEVELOPER_STARTING_LOCK_FOR;\r\n            startDelay = DEVELOPER_STARTING_LOCK_DELAY;\r\n        } else if (addr == teamAddress)\r\n        {\r\n            updMaxInvestAmount = teamCap;\r\n            lockFor = TEAM_STARTING_LOCK_FOR;\r\n            startDelay = TEAM_STARTING_LOCK_DELAY;\r\n        } else if (addr == marketingAddress) \r\n        {\r\n            updMaxInvestAmount = marketingCap;\r\n            lockFor = MARKETING_STARTING_LOCK_FOR;\r\n            startDelay = MARKETING_STARTING_LOCK_DELAY;\r\n        } else\r\n        {\r\n            revert(\"TVC: Only team, dev and marketing addresses allowed!\");\r\n        }\r\n        \r\n        if (cachedIndex[addr] == 0)\r\n        {\r\n            investors.push(\r\n                Investor(\r\n                    addr, \r\n                    wethValue,\r\n                    0,\r\n                    startDelay,\r\n                    lockFor\r\n                )\r\n            );\r\n            cachedIndex[addr] = investors.length;\r\n        } else\r\n        {\r\n            investors[cachedIndex[addr] - 1].wethValue += wethValue;\r\n        }\r\n        require(\r\n            investors[cachedIndex[addr] - 1].wethValue <= updMaxInvestAmount,\r\n            \"TVC: Requires Investor max amount less than maxInvestAmount!\"\r\n        );\r\n        \r\n        totalInvested += wethValue;\r\n    }\r\n    \r\n    function markGoalAsReachedAndPrepareLiqudity()\r\n        public\r\n        onlyRole(ROLE_ADMIN)\r\n    {\r\n        state = States.ReachedGoal;\r\n        \r\n        prepareAddLiqudity();\r\n    }\r\n    \r\n    function prepareAddLiqudity()\r\n        internal\r\n    {\r\n        require(state == States.ReachedGoal, \"TVC: Preparing add liquidity is completed!\");\r\n        require(address(this).balance > 0, \"TVC: Ether balance must be larger than zero!\");\r\n        \r\n        IWeth iWeth = IWeth(nativeToken);\r\n        iWeth.deposit{ value: address(this).balance }();\r\n        \r\n        state = States.PreparedAddLiqudity;\r\n    }\r\n    \r\n    function createPairOnUniswapV2()\r\n        public\r\n        onlyRole(ROLE_ADMIN)\r\n    {\r\n        require(state == States.PreparedAddLiqudity, \"TVC: Pair is already created!\");\r\n\r\n        IUniswapV2Factory iUniswapV2Factory = IUniswapV2Factory(\r\n            IDefiFactoryToken(defiFactoryToken).\r\n                getUtilsContractAtPos(UNISWAP_V2_FACTORY_CONTRACT_ID)\r\n        );\r\n        wethAndTokenPairContract = iUniswapV2Factory.getPair(defiFactoryToken, nativeToken);\r\n        if (wethAndTokenPairContract == BURN_ADDRESS)\r\n        {\r\n            wethAndTokenPairContract = iUniswapV2Factory.createPair(nativeToken, defiFactoryToken);\r\n        }\r\n           \r\n        INoBotsTech iNoBotsTech = INoBotsTech(\r\n            IDefiFactoryToken(defiFactoryToken).\r\n                getUtilsContractAtPos(NOBOTS_TECH_CONTRACT_ID)\r\n        ); \r\n        iNoBotsTech.grantRole(ROLE_WHITELIST, wethAndTokenPairContract);\r\n        \r\n        state = States.CreatedPair;\r\n    }\r\n    \r\n    function addLiquidityOnUniswapV2()\r\n        public\r\n        onlyRole(ROLE_ADMIN)\r\n    {\r\n        require(state == States.CreatedPair, \"TVC: Liquidity is already added!\");\r\n        \r\n        IWeth iWeth = IWeth(nativeToken);\r\n        uint wethAmount = iWeth.balanceOf(address(this));\r\n        iWeth.transfer(wethAndTokenPairContract, wethAmount);\r\n        \r\n        uint amountOfTokensForUniswap = (TOTAL_SUPPLY_CAP * percentForUniswap) / PERCENT_DENORM; // 70% for uniswap\r\n        \r\n        IDefiFactoryToken iDefiFactoryToken = IDefiFactoryToken(defiFactoryToken);\r\n        iDefiFactoryToken.mintHumanAddress(wethAndTokenPairContract, amountOfTokensForUniswap);\r\n        \r\n        IUniswapV2Pair iPair = IUniswapV2Pair(wethAndTokenPairContract);\r\n        iPair.mint(_msgSender());\r\n    \r\n        state = States.AddedLiquidity;\r\n        \r\n        distributeTokens();\r\n    }\r\n\r\n    function distributeTokens()\r\n        internal\r\n    {\r\n        require(state == States.AddedLiquidity, \"TVC: Tokens have already been distributed!\");\r\n        \r\n        INoBotsTech iNoBotsTech = INoBotsTech(\r\n            IDefiFactoryToken(defiFactoryToken).\r\n                getUtilsContractAtPos(NOBOTS_TECH_CONTRACT_ID)\r\n        );\r\n        \r\n        iNoBotsTech.grantRole(ROLE_WHITELIST, address(this));\r\n        \r\n        amountOfTokensForInvestors = (TOTAL_SUPPLY_CAP * percentForTheTeam) / PERCENT_DENORM; // 30% for the team\r\n        IDefiFactoryToken iDefiFactoryToken = IDefiFactoryToken(defiFactoryToken);\r\n        iDefiFactoryToken.mintHumanAddress(address(this), amountOfTokensForInvestors);\r\n        \r\n        startedLocking = block.timestamp;\r\n        \r\n        state = States.DistributedTokens;\r\n    }\r\n    \r\n    function claimTeamVestingTokens(uint amount)\r\n        public\r\n    {\r\n        address addr = _msgSender();\r\n        \r\n        uint claimableAmount = getClaimableTokenAmount(addr);\r\n        require(claimableAmount > 0, \"TVC: !claimable_amount\");\r\n        \r\n        if (\r\n            amount == 0 || \r\n            amount > claimableAmount\r\n        ) {\r\n            amount = claimableAmount;\r\n        }\r\n        \r\n        investors[cachedIndex[addr] - 1].sentValue += amount;\r\n        \r\n        IDefiFactoryToken iDefiFactoryToken = IDefiFactoryToken(defiFactoryToken);\r\n        iDefiFactoryToken.transferFromTeamVestingContract(addr, amount);\r\n    }\r\n    \r\n    function burnVestingTokens(uint amount)\r\n        public\r\n        onlyRole(ROLE_ADMIN)\r\n    {\r\n        IDefiFactoryToken iDefiFactoryToken = IDefiFactoryToken(defiFactoryToken);\r\n        iDefiFactoryToken.burnHumanAddress(address(this), amount);\r\n        \r\n        amountOfTokensForInvestors -= amount;\r\n    }\r\n    \r\n    function taxVestingTokens(uint amount)\r\n        public\r\n        onlyRole(ROLE_ADMIN)\r\n    {\r\n        INoBotsTech iNoBotsTech = INoBotsTech(\r\n            IDefiFactoryToken(defiFactoryToken).\r\n                getUtilsContractAtPos(NOBOTS_TECH_CONTRACT_ID)\r\n        );\r\n        \r\n        amountOfTokensForInvestors = iNoBotsTech.chargeCustomTaxTeamVestingContract(\r\n            amount, \r\n            amountOfTokensForInvestors\r\n        );\r\n    }\r\n    \r\n    function getClaimableTokenAmount(address addr)\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        require(state == States.DistributedTokens, \"TVC: Tokens aren't distributed yet!\");\r\n        \r\n        require(cachedIndex[addr] > 0, \"TVC: !exist\");\r\n        \r\n        Investor memory investor = investors[cachedIndex[addr] - 1];\r\n        \r\n        uint realStartedLocking = startedLocking + investor.startDelay;\r\n        if (block.timestamp < realStartedLocking) return 0;\r\n        \r\n        uint lockedUntil = realStartedLocking + investor.lockFor; \r\n        uint nominator = 1;\r\n        uint denominator = 1;\r\n        if (block.timestamp < lockedUntil)\r\n        {\r\n            nominator = block.timestamp - realStartedLocking;\r\n            denominator = investor.lockFor;\r\n        }\r\n            \r\n        uint claimableAmount = \r\n            (investor.wethValue * amountOfTokensForInvestors * nominator) / \r\n                (denominator * totalInvested);\r\n                \r\n        if (claimableAmount <= investor.sentValue) return 0;\r\n        claimableAmount -= investor.sentValue;\r\n        \r\n        return claimableAmount;\r\n    }\r\n    \r\n    function getLeftTokenAmount(address addr)\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        require(state == States.DistributedTokens, \"TVC: Tokens aren't distributed yet!\");\r\n        \r\n        Investor memory investor = investors[cachedIndex[addr] - 1];\r\n        uint leftAmount = \r\n            (investor.wethValue * amountOfTokensForInvestors) / \r\n                (totalInvested);\r\n                \r\n        if (leftAmount <= investor.sentValue) return 0;\r\n        leftAmount -= investor.sentValue;\r\n        \r\n        return leftAmount;\r\n    }\r\n    \r\n    function getInvestorsCount()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return investors.length;\r\n    }\r\n    \r\n    function getInvestorByAddr(address addr)\r\n        external\r\n        view\r\n        returns(Investor memory)\r\n    {\r\n        return investors[cachedIndex[addr] - 1];\r\n    }\r\n    \r\n    function getInvestorByPos(uint pos)\r\n        external\r\n        view\r\n        returns(Investor memory)\r\n    {\r\n        return investors[pos];\r\n    }\r\n    \r\n    function listInvestors(uint offset, uint limit)\r\n        public\r\n        view\r\n        returns(Investor[] memory)\r\n    {\r\n        uint start = offset;\r\n        uint end = offset + limit;\r\n        end = (end > investors.length)? investors.length: end;\r\n        uint numItems = (end > start)? end - start: 0;\r\n        \r\n        Investor[] memory listOfInvestors = new Investor[](numItems);\r\n        for(uint i = start; i < end; i++)\r\n        {\r\n            listOfInvestors[i - start] = investors[i];\r\n        }\r\n        \r\n        return listOfInvestors;\r\n    }\r\n    \r\n    function updateDefiFactoryContract(address newContract)\r\n        external\r\n        onlyRole(ROLE_ADMIN)\r\n    {\r\n        defiFactoryToken = newContract;\r\n    }\r\n    \r\n    function updateInvestmentSettings(\r\n        address _nativeToken, \r\n        address _developerAddress, uint _developerCap,\r\n        address _teamAddress, uint _teamCap,\r\n        address _marketingAddress, uint _marketingCap\r\n    )\r\n        public\r\n        onlyRole(ROLE_ADMIN)\r\n    {\r\n        nativeToken = _nativeToken;\r\n        developerAddress = _developerAddress;\r\n        developerCap = _developerCap;\r\n        teamAddress = _teamAddress;\r\n        teamCap = _teamCap;\r\n        marketingAddress = _marketingAddress;\r\n        marketingCap = _marketingCap;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEVELOPER_STARTING_LOCK_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEVELOPER_STARTING_LOCK_FOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKETING_STARTING_LOCK_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKETING_STARTING_LOCK_FOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_WHITELIST\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEAM_STARTING_LOCK_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEAM_STARTING_LOCK_FOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_SUPPLY_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidityOnUniswapV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountOfTokensForInvestors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnVestingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimTeamVestingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createPairOnUniswapV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defiFactoryToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developerCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getClaimableTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getInvestorByAddr\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wethValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sentValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockFor\",\"type\":\"uint256\"}],\"internalType\":\"struct TeamVestingContract.Investor\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pos\",\"type\":\"uint256\"}],\"name\":\"getInvestorByPos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wethValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sentValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockFor\",\"type\":\"uint256\"}],\"internalType\":\"struct TeamVestingContract.Investor\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInvestorsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getLeftTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"listInvestors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wethValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sentValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockFor\",\"type\":\"uint256\"}],\"internalType\":\"struct TeamVestingContract.Investor[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"markGoalAsReachedAndPrepareLiqudity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentForTheTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentForUniswap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startedLocking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum TeamVestingContract.States\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"taxVestingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"updateDefiFactoryContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nativeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_developerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_developerCap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_teamCap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketingCap\",\"type\":\"uint256\"}],\"name\":\"updateInvestmentSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethAndTokenPairContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"TeamVestingContract","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"BSD-2-Clause","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2625004966a622af4cd100c0b105eebb3f3fcbeaaae5dd5783e269c306f3c5aa"}]}