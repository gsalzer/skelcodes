{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n// Part: IAlphaStakingTier\r\n\r\ninterface IAlphaStakingTier {\r\n  function tiers(uint index) external view returns (uint);\r\n\r\n  /// @dev Return number of tiers\r\n  function tierCount() external view returns (uint);\r\n\r\n  /// @dev Get user's staking tier\r\n  /// @param user user address to get tier of\r\n  function getAlphaTier(address user) external view returns (uint index);\r\n\r\n  /// @dev Set staking tiers\r\n  /// @param upperLimits array of tier upper limits\r\n  function setAlphaTiers(uint[] calldata upperLimits) external;\r\n\r\n  /// @dev Update existing staking tier\r\n  /// @param index index of tier to update\r\n  /// @param upperLimit new upper limit of tier to update\r\n  function updateAlphaTier(uint index, uint upperLimit) external;\r\n}\r\n\r\n// Part: IBaseOracle\r\n\r\ninterface IBaseOracle {\r\n  /// @dev Return the value of the given input as ETH per unit, multiplied by 2**112.\r\n  /// @param token The ERC-20 token to check the value.\r\n  function getETHPx(address token) external view returns (uint);\r\n}\r\n\r\n// Part: IERC20Wrapper\r\n\r\ninterface IERC20Wrapper {\r\n  /// @dev Return the underlying ERC-20 for the given ERC-1155 token id.\r\n  function getUnderlyingToken(uint id) external view returns (address);\r\n\r\n  /// @dev Return the conversion rate from ERC-1155 to ERC-20, multiplied by 2**112.\r\n  function getUnderlyingRate(uint id) external view returns (uint);\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/Address\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/SafeMath\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/Initializable\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        return !Address.isContract(address(this));\r\n    }\r\n}\r\n\r\n// Part: Governable\r\n\r\ncontract Governable is Initializable {\r\n  event SetGovernor(address governor);\r\n  event SetPendingGovernor(address pendingGovernor);\r\n  event AcceptGovernor(address governor);\r\n\r\n  address public governor; // The current governor.\r\n  address public pendingGovernor; // The address pending to become the governor once accepted.\r\n\r\n  bytes32[64] _gap; // reserve space for upgrade\r\n\r\n  modifier onlyGov() {\r\n    require(msg.sender == governor, 'not the governor');\r\n    _;\r\n  }\r\n\r\n  /// @dev Initialize using msg.sender as the first governor.\r\n  function __Governable__init() internal initializer {\r\n    governor = msg.sender;\r\n    pendingGovernor = address(0);\r\n    emit SetGovernor(msg.sender);\r\n  }\r\n\r\n  /// @dev Set the pending governor, which will be the governor once accepted.\r\n  /// @param _pendingGovernor The address to become the pending governor.\r\n  function setPendingGovernor(address _pendingGovernor) external onlyGov {\r\n    pendingGovernor = _pendingGovernor;\r\n    emit SetPendingGovernor(_pendingGovernor);\r\n  }\r\n\r\n  /// @dev Accept to become the new governor. Must be called by the pending governor.\r\n  function acceptGovernor() external {\r\n    require(msg.sender == pendingGovernor, 'not the pending governor');\r\n    pendingGovernor = address(0);\r\n    governor = msg.sender;\r\n    emit AcceptGovernor(msg.sender);\r\n  }\r\n}\r\n\r\n// File: TierProxyOracle.sol\r\n\r\ncontract TierProxyOracle is Governable {\r\n  using SafeMath for uint;\r\n\r\n  /// The governor sets oracle token factor for a token for a tier\r\n  event SetTierTokenFactor(address indexed token, uint indexed tier, TokenFactor factor);\r\n  /// The governor unsets oracle token factor for a token.\r\n  event UnsetTierTokenInfo(address indexed token);\r\n  /// The governor sets token whitelist for an ERC1155 token.\r\n  event SetWhitelist(address indexed token, bool ok);\r\n  /// The governor sets liquidation incentive for a token.\r\n  event SetLiqIncentive(address indexed token, uint liqIncentive);\r\n\r\n  struct TokenFactor {\r\n    uint16 borrowFactor; // The borrow factor for this token, multiplied by 1e4.\r\n    uint16 collateralFactor; // The collateral factor for this token, multiplied by 1e4.\r\n  }\r\n\r\n  IBaseOracle public immutable source; // Main oracle source\r\n  IAlphaStakingTier public immutable alphaTier; // alpha tier contract address\r\n  uint public immutable tierCount; // number of tiers\r\n  mapping(address => TokenFactor[]) public tierTokenFactors; // Mapping from token to list of token factor by tier.\r\n  mapping(address => uint) public liqIncentives; // Mapping from token to liquidation incentive, multiplied by 1e4.\r\n  mapping(address => bool) public whitelistERC1155; // Mapping from token address to whitelist status\r\n\r\n  /// @dev Create the contract and initialize the first governor.\r\n  constructor(IBaseOracle _source, IAlphaStakingTier _alphaTier) public {\r\n    __Governable__init();\r\n    source = _source;\r\n    alphaTier = _alphaTier;\r\n    tierCount = _alphaTier.tierCount();\r\n  }\r\n\r\n  /// @dev Set token factors and liq incentives for the given list of token addresses in each tier\r\n  /// @param _tokens List of token addresses\r\n  /// @param _tokenFactors List of token factors in each tier for each token.\r\n  /// @param _liqIncentives List of Liquidation incentive, multiplied by 1e4.\r\n  function setTierTokenFactors(\r\n    address[] calldata _tokens,\r\n    TokenFactor[][] memory _tokenFactors,\r\n    uint[] calldata _liqIncentives\r\n  ) external onlyGov {\r\n    require(_tokenFactors.length == _tokens.length, 'token factors & tokens length mismatched');\r\n    require(_liqIncentives.length == _tokens.length, 'liq incentive & tokens length mismatched');\r\n    for (uint idx = 0; idx < _tokens.length; idx++) {\r\n      require(\r\n        _tokenFactors[idx].length == tierCount,\r\n        'token factor of token & tier count length mismatched'\r\n      );\r\n      // clear old values\r\n      delete tierTokenFactors[_tokens[idx]];\r\n      // push new values\r\n      for (uint i = 0; i < _tokenFactors[idx].length; i++) {\r\n        // check values\r\n        if (i > 0) {\r\n          require(\r\n            _tokenFactors[idx][i - 1].borrowFactor >= _tokenFactors[idx][i].borrowFactor,\r\n            'borrow factors should be non-increasing'\r\n          );\r\n          require(\r\n            _tokenFactors[idx][i - 1].collateralFactor <= _tokenFactors[idx][i].collateralFactor,\r\n            'collateral factors should be non-decreasing'\r\n          );\r\n        }\r\n        // push\r\n        tierTokenFactors[_tokens[idx]].push(_tokenFactors[idx][i]);\r\n        emit SetTierTokenFactor(_tokens[idx], i, _tokenFactors[idx][i]);\r\n      }\r\n      require(\r\n        _tokenFactors[idx][_tokenFactors[idx].length - 1].borrowFactor >= 1e4,\r\n        'borrow factor must be at least 10000'\r\n      );\r\n      require(\r\n        _tokenFactors[idx][_tokenFactors[idx].length - 1].collateralFactor <= 1e4,\r\n        'collateral factor must be no more than 10000'\r\n      );\r\n      // set liq incentive\r\n      require(_liqIncentives[idx] != 0, 'liq incentive should != 0');\r\n      liqIncentives[_tokens[idx]] = _liqIncentives[idx];\r\n      emit SetLiqIncentive(_tokens[idx], _liqIncentives[idx]);\r\n    }\r\n  }\r\n\r\n  /// @dev Unset token factors and liq incentives for the given list of token addresses\r\n  /// @param _tokens List of token addresses to unset info\r\n  function unsetTierTokenInfos(address[] calldata _tokens) external onlyGov {\r\n    for (uint idx = 0; idx < _tokens.length; idx++) {\r\n      delete liqIncentives[_tokens[idx]];\r\n      delete tierTokenFactors[_tokens[idx]];\r\n      emit UnsetTierTokenInfo(_tokens[idx]);\r\n    }\r\n  }\r\n\r\n  /// @dev Set whitelist status for the given list of token addresses.\r\n  /// @param tokens List of tokens to set whitelist status\r\n  /// @param ok Whitelist status\r\n  function setWhitelistERC1155(address[] calldata tokens, bool ok) external onlyGov {\r\n    for (uint idx = 0; idx < tokens.length; idx++) {\r\n      whitelistERC1155[tokens[idx]] = ok;\r\n      emit SetWhitelist(tokens[idx], ok);\r\n    }\r\n  }\r\n\r\n  /// @dev Return whether the oracle supports evaluating collateral value of the given token.\r\n  /// @param token ERC1155 token address to check for support\r\n  /// @param id ERC1155 token id to check for support\r\n  function supportWrappedToken(address token, uint id) external view returns (bool) {\r\n    if (!whitelistERC1155[token]) return false;\r\n    address tokenUnderlying = IERC20Wrapper(token).getUnderlyingToken(id);\r\n    return liqIncentives[tokenUnderlying] != 0;\r\n  }\r\n\r\n  /// @dev Return the amount of token out as liquidation reward for liquidating token in.\r\n  /// @param tokenIn Input ERC20 token\r\n  /// @param tokenOut Output ERC1155 token\r\n  /// @param tokenOutId Output ERC1155 token id\r\n  /// @param amountIn Input ERC20 token amount\r\n  function convertForLiquidation(\r\n    address tokenIn,\r\n    address tokenOut,\r\n    uint tokenOutId,\r\n    uint amountIn\r\n  ) external view returns (uint) {\r\n    require(whitelistERC1155[tokenOut], 'bad token');\r\n    address tokenOutUnderlying = IERC20Wrapper(tokenOut).getUnderlyingToken(tokenOutId);\r\n    uint rateUnderlying = IERC20Wrapper(tokenOut).getUnderlyingRate(tokenOutId);\r\n    uint liqIncentiveIn = liqIncentives[tokenIn];\r\n    uint liqIncentiveOut = liqIncentives[tokenOutUnderlying];\r\n    require(liqIncentiveIn != 0, 'bad underlying in');\r\n    require(liqIncentiveOut != 0, 'bad underlying out');\r\n    uint pxIn = source.getETHPx(tokenIn);\r\n    uint pxOut = source.getETHPx(tokenOutUnderlying);\r\n    uint amountOut = amountIn.mul(pxIn).div(pxOut);\r\n    amountOut = amountOut.mul(2**112).div(rateUnderlying);\r\n    return amountOut.mul(liqIncentiveIn).mul(liqIncentiveOut).div(10000 * 10000);\r\n  }\r\n\r\n  /// @dev Return the value of the given input as ETH for collateral purpose.\r\n  /// @param token ERC1155 token address to get collateral value\r\n  /// @param id ERC1155 token id to get collateral value\r\n  /// @param amount Token amount to get collateral value\r\n  /// @param owner Token owner address\r\n  function asETHCollateral(\r\n    address token,\r\n    uint id,\r\n    uint amount,\r\n    address owner\r\n  ) external view returns (uint) {\r\n    require(whitelistERC1155[token], 'bad token');\r\n    address tokenUnderlying = IERC20Wrapper(token).getUnderlyingToken(id);\r\n    uint rateUnderlying = IERC20Wrapper(token).getUnderlyingRate(id);\r\n    uint amountUnderlying = amount.mul(rateUnderlying).div(2**112);\r\n    uint tier = alphaTier.getAlphaTier(owner);\r\n    uint collFactor = tierTokenFactors[tokenUnderlying][tier].collateralFactor;\r\n    require(liqIncentives[tokenUnderlying] != 0, 'bad underlying collateral');\r\n    require(collFactor != 0, 'bad coll factor');\r\n    uint ethValue = source.getETHPx(tokenUnderlying).mul(amountUnderlying).div(2**112);\r\n    return ethValue.mul(collFactor).div(10000);\r\n  }\r\n\r\n  /// @dev Return the value of the given input as ETH for borrow purpose.\r\n  /// @param token ERC20 token address to get borrow value\r\n  /// @param amount ERC20 token amount to get borrow value\r\n  /// @param owner Token owner address\r\n  function asETHBorrow(\r\n    address token,\r\n    uint amount,\r\n    address owner\r\n  ) external view returns (uint) {\r\n    uint tier = alphaTier.getAlphaTier(owner);\r\n    uint borrFactor = tierTokenFactors[token][tier].borrowFactor;\r\n    require(liqIncentives[token] != 0, 'bad underlying borrow');\r\n    require(borrFactor < 50000, 'bad borr factor');\r\n    uint ethValue = source.getETHPx(token).mul(amount).div(2**112);\r\n    return ethValue.mul(borrFactor).div(10000);\r\n  }\r\n\r\n  /// @dev Return whether the ERC20 token is supported\r\n  /// @param token The ERC20 token to check for support\r\n  function support(address token) external view returns (bool) {\r\n    try source.getETHPx(token) returns (uint px) {\r\n      return px != 0 && liqIncentives[token] != 0;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IBaseOracle\",\"name\":\"_source\",\"type\":\"address\"},{\"internalType\":\"contract IAlphaStakingTier\",\"name\":\"_alphaTier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"AcceptGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"SetGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liqIncentive\",\"type\":\"uint256\"}],\"name\":\"SetLiqIncentive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingGovernor\",\"type\":\"address\"}],\"name\":\"SetPendingGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"borrowFactor\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"collateralFactor\",\"type\":\"uint16\"}],\"indexed\":false,\"internalType\":\"struct TierProxyOracle.TokenFactor\",\"name\":\"factor\",\"type\":\"tuple\"}],\"name\":\"SetTierTokenFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"}],\"name\":\"SetWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"UnsetTierTokenInfo\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alphaTier\",\"outputs\":[{\"internalType\":\"contract IAlphaStakingTier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"asETHBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"asETHCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenOutId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"convertForLiquidation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liqIncentives\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingGovernor\",\"type\":\"address\"}],\"name\":\"setPendingGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"borrowFactor\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"collateralFactor\",\"type\":\"uint16\"}],\"internalType\":\"struct TierProxyOracle.TokenFactor[][]\",\"name\":\"_tokenFactors\",\"type\":\"tuple[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"_liqIncentives\",\"type\":\"uint256[]\"}],\"name\":\"setTierTokenFactors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"}],\"name\":\"setWhitelistERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"source\",\"outputs\":[{\"internalType\":\"contract IBaseOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"support\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"supportWrappedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tierCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierTokenFactors\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"borrowFactor\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"collateralFactor\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"unsetTierTokenInfos\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistERC1155\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TierProxyOracle","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006be987c6d72e25f02f6f061f94417d83a6aa13fc000000000000000000000000aaad6414d2008e0fba776dd7db89f041d164f1c4","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f6d20984942831ff137825a1f4285c99f3d13265b4093a25e5df0e9ec794822c"}]}