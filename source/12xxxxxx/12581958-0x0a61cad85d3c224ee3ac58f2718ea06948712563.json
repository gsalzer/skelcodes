{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: NONE\n\npragma solidity 0.8.3;\n\n\n\n// Part: ERC721TokenReceiver\n\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\ninterface ERC721TokenReceiver {\n    /// @notice Handle the receipt of an NFT\n    /// @dev The ERC721 smart contract calls this function on the recipient\n    ///  after a `transfer`. This function MAY throw to revert and reject the\n    ///  transfer. Return of other than the magic value MUST result in the\n    ///  transaction being reverted.\n    ///  Note: the contract address is always the message sender.\n    /// @param _operator The address which called `safeTransferFrom` function\n    /// @param _from The address which previously owned the token\n    /// @param _tokenId The NFT identifier which is being transferred\n    /// @param _data Additional data with no specified format\n    /// @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    ///         unless throwing\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes memory _data) external returns(bytes4);\n}\n\n// Part: EvohERC721\n\ncontract EvohERC721 {\n\n    string public name;\n    string public symbol;\n    uint256 public totalSupply;\n\n    mapping(bytes4 => bool) public supportsInterface;\n\n    struct UserData {\n        uint256 balance;\n        uint256[4] ownership;\n    }\n    mapping(address => UserData) userData;\n\n    address[1024] tokenOwners;\n    address[1024] tokenApprovals;\n    mapping(uint256 => string) tokenURIs;\n\n    mapping (address => mapping (address => bool)) private operatorApprovals;\n\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    constructor(string memory _name, string memory _symbol) {\n        name = _name;\n        symbol = _symbol;\n        supportsInterface[_INTERFACE_ID_ERC165] = true;\n        supportsInterface[_INTERFACE_ID_ERC721] = true;\n        supportsInterface[_INTERFACE_ID_ERC721_METADATA] = true;\n        supportsInterface[_INTERFACE_ID_ERC721_ENUMERABLE] = true;\n    }\n\n    /// @notice Count all NFTs assigned to an owner\n    function balanceOf(address _owner) external view returns (uint256) {\n        require(_owner != address(0), \"Query for zero address\");\n        return userData[_owner].balance;\n    }\n\n    /// @notice Find the owner of an NFT\n    function ownerOf(uint256 tokenId) public view returns (address) {\n        if (tokenId < 1024) {\n            address owner = tokenOwners[tokenId];\n            if (owner != address(0)) return owner;\n        }\n        revert(\"Query for nonexistent tokenId\");\n    }\n\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n        require(_from != address(0));\n        require(_to != address(0));\n        address owner = ownerOf(_tokenId);\n        if (\n            msg.sender == owner ||\n            getApproved(_tokenId) == msg.sender ||\n            isApprovedForAll(owner, msg.sender)\n        ) {\n            delete tokenApprovals[_tokenId];\n            removeOwnership(_from, _tokenId);\n            addOwnership(_to, _tokenId);\n            emit Transfer(_from, _to, _tokenId);\n            return;\n        }\n        revert(\"Caller is not owner nor approved\");\n    }\n\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\n    ///  `onERC721Received` on `_to` and throws if the return value is not\n    ///  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    /// @param _data Additional data with no specified format, sent in call to `_to`\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory _data) public {\n        _transfer(_from, _to, _tokenId);\n        require(_checkOnERC721Received(_from, _to, _tokenId, _data), \"Transfer to non ERC721 receiver\");\n    }\n\n    function removeOwnership(address _owner, uint256 _tokenId) internal {\n        UserData storage data = userData[_owner];\n        data.balance -= 1;\n        uint256 idx = _tokenId / 256;\n        uint256 bitfield = data.ownership[idx];\n        data.ownership[idx] = bitfield & ~(uint256(1) << (_tokenId % 256));\n    }\n\n    function addOwnership(address _owner, uint256 _tokenId) internal {\n        tokenOwners[_tokenId] = _owner;\n        UserData storage data = userData[_owner];\n        data.balance += 1;\n        uint256 idx = _tokenId / 256;\n        uint256 bitfield = data.ownership[idx];\n        data.ownership[idx] = bitfield | uint256(1) << (_tokenId % 256);\n    }\n\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev This works identically to the other function with an extra data parameter,\n    ///  except this function just sets data to \"\".\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external {\n        safeTransferFrom(_from, _to, _tokenId, bytes(\"\"));\n    }\n\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n    ///  THEY MAY BE PERMANENTLY LOST\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\n    ///  `_tokenId` is not a valid NFT.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function transferFrom(address _from, address _to, uint256 _tokenId) external {\n        _transfer(_from, _to, _tokenId);\n    }\n\n        /// @notice Change or reaffirm the approved address for an NFT\n    function approve(address approved, uint256 tokenId) public {\n        address owner = ownerOf(tokenId);\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender),\n            \"Not owner nor approved for all\"\n        );\n        tokenApprovals[tokenId] = approved;\n        emit Approval(owner, approved, tokenId);\n    }\n\n    /// @notice Get the approved address for a single NFT\n    function getApproved(uint256 tokenId) public view returns (address) {\n        ownerOf(tokenId);\n        return tokenApprovals[tokenId];\n    }\n\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage\n    ///         all of `msg.sender`'s assets\n    function setApprovalForAll(address operator, bool approved) external {\n        operatorApprovals[msg.sender][operator] = approved;\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    /// @notice Query if an address is an authorized operator for another address\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\n        return operatorApprovals[owner][operator];\n    }\n\n    /// @notice Concatenates tokenId to baseURI and returns the string.\n    function tokenURI(uint256 tokenId) public view returns (string memory) {\n        ownerOf(tokenId);\n        return tokenURIs[tokenId];\n    }\n\n    /// @notice Enumerate valid NFTs\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\n        require(_index < totalSupply, \"Index out of bounds\");\n        return _index;\n    }\n\n    /// @notice Enumerate NFTs assigned to an owner\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n        UserData storage data = userData[_owner];\n        require (_index < data.balance, \"Index out of bounds\");\n        uint256 bitfield;\n        uint256 count;\n        for (uint256 i = 0; i < 1024; i++) {\n            uint256 key = i % 256;\n            if (key == 0) {\n                bitfield = data.ownership[i / 256];\n            }\n            if ((bitfield >> key) & uint256(1) == 1) {\n                if (count == _index) {\n                    return i;\n                }\n                count++;\n            }\n        }\n        revert();\n    }\n\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    )\n        private\n        returns (bool)\n    {\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(to) }\n        if (size == 0) {\n            return true;\n        }\n\n        (bool success, bytes memory returnData) = to.call{ value: 0 }(\n            abi.encodeWithSelector(\n                ERC721TokenReceiver(to).onERC721Received.selector,\n                msg.sender,\n                from,\n                tokenId,\n                _data\n            )\n        );\n        require(success, \"Transfer to non ERC721 receiver\");\n        bytes4 returnValue = abi.decode(returnData, (bytes4));\n        return (returnValue == _ERC721_RECEIVED);\n    }\n\n}\n\n// File: FixedMint.sol\n\ncontract EvohFixedMint is EvohERC721 {\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        string[] memory _tokenURIs,\n        address[] memory _owners\n    )\n        EvohERC721(_name, _symbol)\n    {\n        require(_tokenURIs.length == _owners.length);\n        for (uint256 i = 0; i < _owners.length; i++) {\n            tokenURIs[i] = _tokenURIs[i];\n            addOwnership(_owners[i], i);\n            emit Transfer(address(0), _owners[i], i);\n        }\n        totalSupply = _owners.length;\n    }\n\n}\n","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_tokenURIs\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EvohFixedMint","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000920000000000000000000000000000000000000000000000000000000000000000d45766f683a204f726967696e7300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000445564f480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002c00000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000000000000000000000000000000000000000044000000000000000000000000000000000000000000000000000000000000004a00000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000056000000000000000000000000000000000000000000000000000000000000005c00000000000000000000000000000000000000000000000000000000000000620000000000000000000000000000000000000000000000000000000000000068000000000000000000000000000000000000000000000000000000000000006e0000000000000000000000000000000000000000000000000000000000000074000000000000000000000000000000000000000000000000000000000000007a0000000000000000000000000000000000000000000000000000000000000002e516d5531375176334c554a667963615a394365766a787a376e673567783732574c7978415233636f68394174566e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e516d53706a32443659353253323656666e524a5578334a353766666639413750746d346447373142517a7a446641000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e516d53544748633664537a6e64724b636a315137757a3863454c6d4242784c6566656a3364483433594335595562000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e516d4e6f6252324b7659397264334769786b58557378476757467a65786246584b764b73446b5a5374737a353532000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e516d5479796e327878696a446b724669763631726b576f3771664b597962797834454e5477655637684c53654357000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e516d5232556666503365796655553334487873444c3978743951645a717276676f7645567674394e68516f693944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e516d585a706a5157346b52553233646446547143516e6f52536359444c74376d6e6145566e4d4e63596550383258000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e516d566b3268565755445065346a78344d32654a7979726854394371476136333958484232724a53483865396976000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e516d625358356478484a3975474c31317446447355416f6845457a7770317842646d3550584b356750363531654c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e516d64386854554261467a4c6e64326771587a79535036696f674d63444e70786b434e534e4c633633707a325a34000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e516d5431644874574c66357146344d4a626f44344a5273665676756877346a4e4e7550665836467138484c6e6675000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e516d515546766736576f4534665155487a5069464167346b684b31674d33556d58756178386a5232755864744638000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e516d6147327971524654594a4b537a4443594d42563443724d4d614446736e4c516d506938706b696a636147764a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e516d626e3966506f6e67416b47545361684868534a7652707a6e7a6d4c714666664a6f6e72466171354b564c396f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e516d5375394b54535147646d4d4666723358563457566e4e5847776f477053397057343847547772445a74486b4a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e516d5264786d3865745177323478444338754d357932337a7670426758667844643774514b7042626678426577480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000e704009669266875d16d966866778541ea1f46e6000000000000000000000000e704009669266875d16d966866778541ea1f46e6000000000000000000000000e704009669266875d16d966866778541ea1f46e6000000000000000000000000e704009669266875d16d966866778541ea1f46e6000000000000000000000000e704009669266875d16d966866778541ea1f46e6000000000000000000000000e704009669266875d16d966866778541ea1f46e6000000000000000000000000e704009669266875d16d966866778541ea1f46e6000000000000000000000000e704009669266875d16d966866778541ea1f46e6000000000000000000000000e704009669266875d16d966866778541ea1f46e6000000000000000000000000e704009669266875d16d966866778541ea1f46e6000000000000000000000000e704009669266875d16d966866778541ea1f46e6000000000000000000000000e704009669266875d16d966866778541ea1f46e6000000000000000000000000e704009669266875d16d966866778541ea1f46e6000000000000000000000000e704009669266875d16d966866778541ea1f46e6000000000000000000000000e704009669266875d16d966866778541ea1f46e6000000000000000000000000e704009669266875d16d966866778541ea1f46e6","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}