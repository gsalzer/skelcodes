{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/implements/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nabstract contract Ownable {\\n    address public owner;\\n    address public nominatedOwner;\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n    }\\n\\n    function acceptOwnership() external {\\n        require(msg.sender == nominatedOwner, \\\"not nominated\\\");\\n        emit OwnerChanged(owner, nominatedOwner);\\n\\n        owner = nominatedOwner;\\n        nominatedOwner = address(0);\\n    }\\n\\n    function renounceOwnership() external onlyOwner {\\n        emit OwnerChanged(owner, address(0));\\n        owner = address(0);\\n    }\\n\\n    function nominateNewOwner(address newOwner) external onlyOwner {\\n        nominatedOwner = newOwner;\\n        emit OwnerNominated(newOwner);\\n    }\\n\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"not owner\\\");\\n        _;\\n    }\\n\\n    event OwnerNominated(address indexed newOwner);\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n}\"\r\n    },\r\n    \"contracts/implements/stage2/RewardDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"../../interfaces/IUniswapRouterV2.sol\\\";\\nimport \\\"../../interfaces/ILon.sol\\\";\\nimport \\\"../Ownable.sol\\\";\\n\\ncontract RewardDistributor is Ownable, Pausable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Constants do not have storage slot.\\n    uint256 private constant MAX_UINT = 2**256 - 1;\\n    address public immutable LON_TOKEN_ADDR;\\n\\n    // Below are the variables which consume storage slots.\\n    uint32 public buybackInterval;\\n    uint8 public miningFactor;\\n    uint8 public numStrategyAddr;\\n    uint8 public numExchangeAddr;\\n\\n    mapping(address => bool) public isOperator;\\n    address public treasury;\\n    address public lonStaking;\\n    address public miningTreasury;\\n    address public feeTokenRecipient;\\n\\n    mapping(uint256 => address) public strategyAddrs;\\n    mapping(uint256 => address) public exchangeAddrs;\\n    mapping(address => FeeToken) public feeTokens;\\n\\n    /* Struct and event declaration */\\n    struct FeeToken {\\n        uint8 exchangeIndex;\\n        uint8 LFactor; // Percentage of fee token reserved for feeTokenRecipient\\n        uint8 RFactor; // Percentage of buyback-ed lon token for treasury\\n        uint32 lastTimeBuyback;\\n        bool enable;\\n        uint256 minBuy;\\n        uint256 maxBuy;\\n        address[] path;\\n    }\\n\\n    // Owner events\\n    \\n    event SetOperator(address operator, bool enable);\\n    event SetMiningFactor(uint8 miningFactor);\\n    event SetTreasury(address treasury);\\n    event SetLonStaking(address lonStaking);\\n    event SetMiningTreasury(address miningTreasury);\\n    event SetFeeTokenRecipient(address feeTokenRecipient);\\n    // Operator events\\n    event SetBuybackInterval(uint256 interval);\\n    event SetStrategy(uint256 index, address strategy);\\n    event SetExchange(uint256 index, address exchange);\\n    event EnableFeeToken(address feeToken, bool enable);\\n    event SetFeeToken(\\n        address feeToken,\\n        uint256 exchangeIndex,\\n        address[] path,\\n        uint256 LFactor,\\n        uint256 RFactor,\\n        uint256 minBuy,\\n        uint256 maxBuy\\n    );\\n    event SetFeeTokenFailure(address feeToken, string reason, bytes lowLevelData);\\n\\n    event BuyBack(\\n        address feeToken,\\n        uint256 feeTokenAmount,\\n        uint256 swappedLonAmount,\\n        uint256 LFactor,\\n        uint256 RFactor,\\n        uint256 minBuy,\\n        uint256 maxBuy\\n    );\\n    event BuyBackFailure(address feeToken, uint256 feeTokenAmount, string reason, bytes lowLevelData);\\n    event DistributeLon(uint256 treasuryAmount, uint256 lonStakingAmount);\\n    event MintLon(uint256 mintedAmount);\\n    event Recovered(address token, uint256 amount);\\n\\n\\n    /************************************************************\\n    *                      Access control                       *\\n    *************************************************************/\\n    modifier only_Operator_or_Owner {\\n        require(_isAuthorized(msg.sender), \\\"only operator or owner can call\\\");\\n        _;\\n    }\\n\\n    modifier only_Owner_or_Operator_or_Self {\\n        if (msg.sender != address(this)) {\\n            require(_isAuthorized(msg.sender), \\\"only operator or owner can call\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier only_EOA {\\n        require((msg.sender == tx.origin), \\\"only EOA can call\\\");\\n        _;\\n    }\\n\\n    modifier only_EOA_or_Self {\\n        if (msg.sender != address(this)) {\\n            require((msg.sender == tx.origin), \\\"only EOA can call\\\");\\n        }\\n        _;\\n    }\\n\\n\\n    /************************************************************\\n    *                       Constructor                         *\\n    *************************************************************/\\n    constructor(\\n        address _LON_TOKEN_ADDR,\\n        address _owner,\\n        address _operator,\\n        uint32 _buyBackInterval,\\n        uint8 _miningFactor,\\n        address _treasury,\\n        address _lonStaking,\\n        address _miningTreasury,\\n        address _feeTokenRecipient\\n    ) Ownable(_owner) {\\n        LON_TOKEN_ADDR = _LON_TOKEN_ADDR;\\n\\n        isOperator[_operator] = true;\\n\\n        buybackInterval = _buyBackInterval;\\n\\n        require(_miningFactor <= 100, \\\"incorrect mining factor\\\");\\n        miningFactor = _miningFactor;\\n\\n        require(Address.isContract(_lonStaking), \\\"Lon staking is not a contract\\\");\\n        treasury = _treasury;\\n        lonStaking = _lonStaking;\\n        miningTreasury = _miningTreasury;\\n        feeTokenRecipient = _feeTokenRecipient;\\n    }\\n\\n    /************************************************************\\n    *                     Getter functions                      *\\n    *************************************************************/\\n    function getFeeTokenPath(address _feeTokenAddr) public view returns (address[] memory path) {\\n        return feeTokens[_feeTokenAddr].path;\\n    }\\n\\n    /************************************************************\\n    *             Management functions for Owner                *\\n    *************************************************************/\\n    function pause() external onlyOwner whenNotPaused {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner whenPaused {\\n        _unpause();\\n    }\\n\\n    function setOperator(address _operator, bool _enable) external onlyOwner {\\n        isOperator[_operator] = _enable;\\n\\n        emit SetOperator(_operator, _enable);\\n    }\\n\\n    function setMiningFactor(uint8 _miningFactor) external onlyOwner {\\n        require(_miningFactor <= 100, \\\"incorrect mining factor\\\");\\n\\n        miningFactor = _miningFactor;\\n        emit SetMiningFactor(_miningFactor);\\n    }\\n\\n    function setTreasury(address _treasury) external onlyOwner {\\n        treasury = _treasury;\\n        emit SetTreasury(_treasury);\\n    }\\n\\n    function setLonStaking(address _lonStaking) external onlyOwner {\\n        require(Address.isContract(_lonStaking), \\\"Lon staking is not a contract\\\");\\n\\n        lonStaking = _lonStaking;\\n        emit SetLonStaking(_lonStaking);\\n    }\\n\\n    function setMiningTreasury(address _miningTreasury) external onlyOwner {\\n        miningTreasury = _miningTreasury;\\n        emit SetMiningTreasury(_miningTreasury);\\n    }\\n\\n    function setFeeTokenRecipient(address _feeTokenRecipient) external onlyOwner {\\n        feeTokenRecipient = _feeTokenRecipient;\\n        emit SetFeeTokenRecipient(_feeTokenRecipient);\\n    }\\n\\n    /************************************************************\\n    *           Management functions for Operator               *\\n    *************************************************************/\\n\\n    function recoverERC20(address _tokenAddress, uint256 _tokenAmount) external only_Operator_or_Owner {\\n        IERC20(_tokenAddress).safeTransfer(owner, _tokenAmount);\\n        emit Recovered(_tokenAddress, _tokenAmount);\\n    }\\n\\n    function setBuybackInterval(uint32 _buyBackInterval) external only_Operator_or_Owner {\\n        require(_buyBackInterval >= 3600, \\\"invalid buyback interval\\\");\\n\\n        buybackInterval = _buyBackInterval;\\n        emit SetBuybackInterval(_buyBackInterval);\\n    }\\n\\n    function setStrategyAddrs(uint256[] calldata _indexes, address[] calldata _strategyAddrs) external only_Operator_or_Owner {\\n        require(_indexes.length == _strategyAddrs.length, \\\"input not the same length\\\");\\n\\n        for (uint256 i = 0; i < _indexes.length; i++) {\\n            require(Address.isContract(_strategyAddrs[i]), \\\"strategy is not a contract\\\");\\n            require(_indexes[i] <= numStrategyAddr, \\\"index out of bound\\\");\\n\\n            strategyAddrs[_indexes[i]] = _strategyAddrs[i];\\n            if (_indexes[i] == numStrategyAddr) numStrategyAddr++;\\n            emit SetStrategy(_indexes[i], _strategyAddrs[i]);\\n        }\\n    }\\n\\n    function setExchangeAddrs(uint256[] calldata _indexes, address[] calldata _exchangeAddrs) external only_Operator_or_Owner {\\n        require(_indexes.length == _exchangeAddrs.length, \\\"input not the same length\\\");\\n\\n        for (uint256 i = 0; i < _indexes.length; i++) {\\n            require(Address.isContract(_exchangeAddrs[i]), \\\"exchange is not a contract\\\");\\n            require(_indexes[i] <= numExchangeAddr, \\\"index out of bound\\\");\\n\\n            exchangeAddrs[_indexes[i]] = _exchangeAddrs[i];\\n            if (_indexes[i] == numExchangeAddr) numExchangeAddr++;\\n            emit SetExchange(_indexes[i], _exchangeAddrs[i]);\\n        }\\n    }\\n\\n    function setFeeToken(\\n        address _feeTokenAddr,\\n        uint8 _exchangeIndex,\\n        address[] calldata _path,\\n        uint8 _LFactor,\\n        uint8 _RFactor,\\n        bool _enable,\\n        uint256 _minBuy,\\n        uint256 _maxBuy\\n    ) external only_Owner_or_Operator_or_Self {\\n        // Validate fee token inputs\\n        require(Address.isContract(_feeTokenAddr), \\\"fee token is not a contract\\\");\\n        require(Address.isContract(exchangeAddrs[_exchangeIndex]), \\\"exchange is not a contract\\\");\\n        require(_path.length >= 2, \\\"invalid swap path\\\");\\n        require(_path[_path.length - 1] == LON_TOKEN_ADDR, \\\"output token must be LON\\\");\\n        require(_LFactor <= 100, \\\"incorrect LFactor\\\");\\n        require(_RFactor <= 100, \\\"incorrect RFactor\\\");\\n        require(_minBuy <= _maxBuy, \\\"incorrect minBuy and maxBuy\\\");\\n\\n        FeeToken storage feeToken = feeTokens[_feeTokenAddr];\\n        feeToken.exchangeIndex = _exchangeIndex;\\n        feeToken.path = _path;\\n        feeToken.LFactor = _LFactor;\\n        feeToken.RFactor = _RFactor;\\n        if (feeToken.enable != _enable) {\\n            feeToken.enable = _enable;\\n            emit EnableFeeToken(_feeTokenAddr, _enable);\\n        }\\n        feeToken.minBuy = _minBuy;\\n        feeToken.maxBuy = _maxBuy;\\n        emit SetFeeToken(_feeTokenAddr, _exchangeIndex, _path, _LFactor, _RFactor, _minBuy, _maxBuy);\\n    }\\n\\n    function setFeeTokens(\\n        address[] memory _feeTokenAddr,\\n        uint8[] memory _exchangeIndex,\\n        address[][] memory _path,\\n        uint8[] memory _LFactor,\\n        uint8[] memory _RFactor,\\n        bool[] memory _enable,\\n        uint256[] memory _minBuy,\\n        uint256[] memory _maxBuy\\n    ) external only_Operator_or_Owner {\\n        uint256 inputLength = _feeTokenAddr.length;\\n        require(\\n            (_exchangeIndex.length == inputLength) &&\\n                (_path.length == inputLength) &&\\n                (_LFactor.length == inputLength) &&\\n                (_RFactor.length == inputLength) &&\\n                (_enable.length == inputLength) &&\\n                (_minBuy.length == inputLength) &&\\n                (_maxBuy.length == inputLength),\\n            \\\"input not the same length\\\"\\n        );\\n\\n        for (uint256 i = 0; i < inputLength; i++) {\\n            try\\n                this.setFeeToken(\\n                    _feeTokenAddr[i],\\n                    _exchangeIndex[i],\\n                    _path[i],\\n                    _LFactor[i],\\n                    _RFactor[i],\\n                    _enable[i],\\n                    _minBuy[i],\\n                    _maxBuy[i]\\n                )\\n            {\\n                continue;\\n            } catch Error(string memory reason) {\\n                emit SetFeeTokenFailure(_feeTokenAddr[i], reason, bytes(\\\"\\\"));\\n            } catch (bytes memory lowLevelData) {\\n                emit SetFeeTokenFailure(_feeTokenAddr[i], \\\"\\\", lowLevelData);\\n            }\\n        }\\n    }\\n\\n    function enableFeeToken(address _feeTokenAddr, bool _enable) external only_Operator_or_Owner {\\n        FeeToken storage feeToken = feeTokens[_feeTokenAddr];\\n        if (feeToken.enable != _enable) {\\n            feeToken.enable = _enable;\\n            emit EnableFeeToken(_feeTokenAddr, _enable);\\n        }\\n    }\\n\\n    function enableFeeTokens(address[] calldata _feeTokenAddr, bool[] calldata _enable) external only_Operator_or_Owner {\\n        require(_feeTokenAddr.length == _enable.length, \\\"input not the same length\\\");\\n\\n        for (uint256 i = 0; i < _feeTokenAddr.length; i++) {\\n            FeeToken storage feeToken = feeTokens[_feeTokenAddr[i]];\\n            if (feeToken.enable != _enable[i]) {\\n                feeToken.enable = _enable[i];\\n                emit EnableFeeToken(_feeTokenAddr[i], _enable[i]);\\n            }\\n        }\\n    }\\n\\n    function _isAuthorized(address _account) internal view returns (bool) {\\n        if ((isOperator[_account]) || (_account == owner)) return true;\\n        else return false;\\n    }\\n\\n    function _validate(\\n        FeeToken memory _feeToken,\\n        uint256 _amount\\n    ) internal view returns (uint256 amountFeeTokenToSwap, uint256 amountFeeTokenToTransfer) {\\n        require(_amount > 0, \\\"zero fee token amount\\\");\\n        if (!_isAuthorized(msg.sender)) {\\n            require(_feeToken.enable, \\\"fee token is not enabled\\\");\\n        }\\n\\n        amountFeeTokenToTransfer = _amount.mul(_feeToken.LFactor).div(100);\\n        amountFeeTokenToSwap = _amount.sub(amountFeeTokenToTransfer);\\n\\n        if (amountFeeTokenToSwap > 0) {\\n            require(amountFeeTokenToSwap >= _feeToken.minBuy, \\\"amount less than min buy\\\");\\n            require(amountFeeTokenToSwap <= _feeToken.maxBuy, \\\"amount greater than max buy\\\");\\n            require(block.timestamp > uint256(_feeToken.lastTimeBuyback).add(uint256(buybackInterval)), \\\"already a buyback recently\\\");\\n        }\\n    }\\n\\n    function _transferFeeToken(\\n        address _feeTokenAddr,\\n        address _transferTo,\\n        uint256 _totalFeeTokenAmount\\n    ) internal {\\n        address strategyAddr;\\n        uint256 balanceInStrategy;\\n        uint256 amountToTransferFrom;\\n        uint256 cumulatedAmount;\\n        for (uint256 i = 0; i < numStrategyAddr; i++) {\\n            strategyAddr = strategyAddrs[i];\\n            balanceInStrategy = IERC20(_feeTokenAddr).balanceOf(strategyAddr);\\n            if (cumulatedAmount.add(balanceInStrategy) > _totalFeeTokenAmount) {\\n                amountToTransferFrom = _totalFeeTokenAmount.sub(cumulatedAmount);\\n            } else {\\n                amountToTransferFrom = balanceInStrategy;\\n            }\\n            if (amountToTransferFrom == 0) continue;\\n            IERC20(_feeTokenAddr).safeTransferFrom(strategyAddr, _transferTo, amountToTransferFrom);\\n\\n            cumulatedAmount = cumulatedAmount.add(amountToTransferFrom);\\n            if (cumulatedAmount == _totalFeeTokenAmount) break;\\n        }\\n        require(cumulatedAmount == _totalFeeTokenAmount, \\\"insufficient amount of fee tokens\\\");\\n    }\\n\\n    function _swap(\\n        address _feeTokenAddr,\\n        address _exchangeAddr,\\n        address[] memory _path,\\n        uint256 _amountFeeTokenToSwap,\\n        uint256 _minLonAmount\\n    ) internal returns (uint256 swappedLonAmount) {\\n        // Approve exchange contract\\n        IERC20(_feeTokenAddr).safeApprove(_exchangeAddr, MAX_UINT);\\n\\n        // Swap fee token for Lon\\n        IUniswapRouterV2 router = IUniswapRouterV2(_exchangeAddr);\\n\\n        uint256[] memory amounts = router.swapExactTokensForTokens(\\n            _amountFeeTokenToSwap,\\n            _minLonAmount,  // Minimum amount of Lon expected to receive\\n            _path,\\n            address(this),\\n            block.timestamp + 60\\n        );\\n        swappedLonAmount = amounts[_path.length - 1];\\n\\n        // Clear allowance for exchange contract\\n        IERC20(_feeTokenAddr).safeApprove(_exchangeAddr, 0);\\n    }\\n\\n    function _distributeLon(\\n        FeeToken memory _feeToken, \\n        uint256 swappedLonAmount\\n    ) internal {\\n        // To Treasury\\n        uint256 treasuryAmount = swappedLonAmount.mul(_feeToken.RFactor).div(100);\\n        if (treasuryAmount > 0) {\\n            IERC20(LON_TOKEN_ADDR).safeTransfer(treasury, treasuryAmount);\\n        }\\n\\n        // To LonStaking\\n        uint256 lonStakingAmount = swappedLonAmount.sub(treasuryAmount);\\n        if (lonStakingAmount > 0) {\\n            IERC20(LON_TOKEN_ADDR).safeTransfer(lonStaking, lonStakingAmount);\\n        }\\n\\n        emit DistributeLon(treasuryAmount, lonStakingAmount);\\n    }\\n\\n    function _mintLon(uint256 swappedLonAmount) internal {\\n        // Mint Lon for MiningTreasury\\n        uint256 mintedAmount = swappedLonAmount.mul(uint256(miningFactor)).div(100);\\n        if (mintedAmount > 0) {\\n            ILon(LON_TOKEN_ADDR).mint(miningTreasury, mintedAmount);\\n            emit MintLon(mintedAmount);\\n        }\\n    }\\n\\n    function _buyback(\\n        address _feeTokenAddr,\\n        FeeToken storage _feeToken,\\n        address _exchangeAddr,\\n        uint256 _amountFeeTokenToSwap,\\n        uint256 _minLonAmount\\n    ) internal {\\n        if (_amountFeeTokenToSwap > 0) {\\n            uint256 swappedLonAmount =\\n                _swap(_feeTokenAddr, _exchangeAddr, _feeToken.path, _amountFeeTokenToSwap, _minLonAmount);\\n\\n            // Update fee token data\\n            _feeToken.lastTimeBuyback = uint32(block.timestamp);\\n\\n            emit BuyBack(\\n                _feeTokenAddr,\\n                _amountFeeTokenToSwap,\\n                swappedLonAmount,\\n                _feeToken.LFactor,\\n                _feeToken.RFactor,\\n                _feeToken.minBuy,\\n                _feeToken.maxBuy\\n            );\\n\\n            _distributeLon(_feeToken, swappedLonAmount);\\n            _mintLon(swappedLonAmount);\\n        }\\n    }\\n\\n    /************************************************************\\n    *                   External functions                      *\\n    *************************************************************/\\n    function buyback(address _feeTokenAddr, uint256 _amount, uint256 _minLonAmount) external whenNotPaused only_EOA_or_Self {\\n        FeeToken storage feeToken = feeTokens[_feeTokenAddr];\\n\\n        // Distribute LON directly without swap\\n        if (_feeTokenAddr == LON_TOKEN_ADDR) {\\n            require(feeToken.enable, \\\"fee token is not enabled\\\");\\n            require(_amount >= feeToken.minBuy, \\\"amount less than min buy\\\");\\n            uint256 _lonToTreasury = _amount.mul(feeToken.RFactor).div(100);\\n            uint256 _lonToStaking = _amount.sub(_lonToTreasury);\\n            _transferFeeToken(LON_TOKEN_ADDR, treasury, _lonToTreasury);\\n            _transferFeeToken(LON_TOKEN_ADDR, lonStaking, _lonToStaking);\\n            emit DistributeLon(_lonToTreasury, _lonToStaking);\\n            _mintLon(_amount);\\n\\n            // Update lastTimeBuyback\\n            feeToken.lastTimeBuyback = uint32(block.timestamp);\\n            return;\\n        }\\n\\n        // Validate fee token data and input amount\\n        (uint256 amountFeeTokenToSwap, uint256 amountFeeTokenToTransfer) = _validate(feeToken, _amount);\\n\\n        if (amountFeeTokenToSwap == 0) {\\n            // No need to swap, transfer feeToken directly\\n            _transferFeeToken(_feeTokenAddr, feeTokenRecipient, amountFeeTokenToTransfer);\\n        } else {\\n            // Transfer fee token from strategy contracts to distributor\\n            _transferFeeToken(_feeTokenAddr, address(this), _amount);\\n\\n            // Buyback\\n            _buyback(_feeTokenAddr, feeToken, exchangeAddrs[feeToken.exchangeIndex], amountFeeTokenToSwap, _minLonAmount);\\n\\n            // Transfer fee token from distributor to feeTokenRecipient\\n            if (amountFeeTokenToTransfer > 0) {\\n                IERC20(_feeTokenAddr).safeTransfer(feeTokenRecipient, amountFeeTokenToTransfer);\\n            }\\n        }\\n    }\\n\\n    function batchBuyback(\\n        address[] calldata _feeTokenAddr,\\n        uint256[] calldata _amount,\\n        uint256[] calldata _minLonAmount\\n    ) external whenNotPaused only_EOA {\\n        uint256 inputLength = _feeTokenAddr.length;\\n        require(\\n            (_amount.length == inputLength) &&\\n            (_minLonAmount.length == inputLength),\\n            \\\"input not the same length\\\"\\n        );\\n\\n        for (uint256 i = 0; i < inputLength; i++) {\\n            try this.buyback(_feeTokenAddr[i], _amount[i], _minLonAmount[i]) {\\n                continue;\\n            } catch Error(string memory reason) {\\n                emit BuyBackFailure(_feeTokenAddr[i], _amount[i], reason, bytes(\\\"\\\"));\\n            } catch (bytes memory lowLevelData) {\\n                emit BuyBackFailure(_feeTokenAddr[i], _amount[i], \\\"\\\", lowLevelData);\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IEIP2612.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IEIP2612 is IERC20 {\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n  function nonces(address owner) external view returns (uint256);\\n  function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IEmergency.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IEmergency {\\n    function emergencyWithdraw(IERC20 token) external ;\\n}\"\r\n    },\r\n    \"contracts/interfaces/ILon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IEmergency.sol\\\";\\nimport \\\"./IEIP2612.sol\\\";\\n\\ninterface ILon is IEmergency, IEIP2612 {\\n  function cap() external view returns(uint256);\\n\\n  function mint(address to, uint256 amount) external; \\n\\n  function burn(uint256 amount) external;\\n}\\n\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapRouterV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.8.0;\\n\\ninterface IUniswapRouterV2 {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n}\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_LON_TOKEN_ADDR\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_buyBackInterval\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"_miningFactor\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lonStaking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_miningTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeTokenRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swappedLonAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"RFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBuy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBuy\",\"type\":\"uint256\"}],\"name\":\"BuyBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lowLevelData\",\"type\":\"bytes\"}],\"name\":\"BuyBackFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasuryAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lonStakingAmount\",\"type\":\"uint256\"}],\"name\":\"DistributeLon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"EnableFeeToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"MintLon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"SetBuybackInterval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"}],\"name\":\"SetExchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exchangeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"RFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBuy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBuy\",\"type\":\"uint256\"}],\"name\":\"SetFeeToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lowLevelData\",\"type\":\"bytes\"}],\"name\":\"SetFeeTokenFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeTokenRecipient\",\"type\":\"address\"}],\"name\":\"SetFeeTokenRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lonStaking\",\"type\":\"address\"}],\"name\":\"SetLonStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"miningFactor\",\"type\":\"uint8\"}],\"name\":\"SetMiningFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"miningTreasury\",\"type\":\"address\"}],\"name\":\"SetMiningTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"SetOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"SetStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"SetTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LON_TOKEN_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_feeTokenAddr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_minLonAmount\",\"type\":\"uint256[]\"}],\"name\":\"batchBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minLonAmount\",\"type\":\"uint256\"}],\"name\":\"buyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackInterval\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTokenAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"enableFeeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_feeTokenAddr\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_enable\",\"type\":\"bool[]\"}],\"name\":\"enableFeeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exchangeAddrs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTokenRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeTokens\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"exchangeIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"LFactor\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"RFactor\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"lastTimeBuyback\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBuy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTokenAddr\",\"type\":\"address\"}],\"name\":\"getFeeTokenPath\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lonStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningFactor\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numExchangeAddr\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numStrategyAddr\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_buyBackInterval\",\"type\":\"uint32\"}],\"name\":\"setBuybackInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_exchangeAddrs\",\"type\":\"address[]\"}],\"name\":\"setExchangeAddrs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_exchangeIndex\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"_LFactor\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_RFactor\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_minBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBuy\",\"type\":\"uint256\"}],\"name\":\"setFeeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTokenRecipient\",\"type\":\"address\"}],\"name\":\"setFeeTokenRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_feeTokenAddr\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_exchangeIndex\",\"type\":\"uint8[]\"},{\"internalType\":\"address[][]\",\"name\":\"_path\",\"type\":\"address[][]\"},{\"internalType\":\"uint8[]\",\"name\":\"_LFactor\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_RFactor\",\"type\":\"uint8[]\"},{\"internalType\":\"bool[]\",\"name\":\"_enable\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_minBuy\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_maxBuy\",\"type\":\"uint256[]\"}],\"name\":\"setFeeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lonStaking\",\"type\":\"address\"}],\"name\":\"setLonStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_miningFactor\",\"type\":\"uint8\"}],\"name\":\"setMiningFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_miningTreasury\",\"type\":\"address\"}],\"name\":\"setMiningTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_strategyAddrs\",\"type\":\"address[]\"}],\"name\":\"setStrategyAddrs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"strategyAddrs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RewardDistributor","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"0000000000000000000000000000000000095413afc295d19edeb1ad7b71c9520000000000000000000000009afc226dc049b99342ad6774eeb08bfa2f874465000000000000000000000000def3a34689fb7506e75b581c6cde664c9560ca110000000000000000000000000000000000000000000000000000000000015180000000000000000000000000000000000000000000000000000000000000006400000000000000000000000074c3ca9431c009dc35587591dc90780078174f8a000000000000000000000000f88506b0f1d30056b9e5580668d5875b9cd30f23000000000000000000000000292a6921efc261070a0d5c96911c102cbf1045e400000000000000000000000074c3ca9431c009dc35587591dc90780078174f8a","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}