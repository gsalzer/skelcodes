{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Lottery.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\ninterface IToken {\\n    function balanceOf(address tokenOwner)\\n        external\\n        view\\n        returns (uint256 balance);\\n\\n    function transfer(address to, uint256 tokens)\\n        external\\n        returns (bool success);\\n\\n    function approve(address spender, uint256 tokens)\\n        external\\n        returns (bool success);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokens\\n    ) external returns (bool success);\\n\\n    function burn(uint256 amount) external;\\n}\\n\\ninterface CudlFinance {\\n    function claimMiningRewards(uint256 nftId) external;\\n\\n    function buyAccesory(uint256 nftId, uint256 id) external;\\n\\n    function itemPrice(uint256 itemId) external view returns (uint256);\\n\\n    function lastTimeMined(uint256 petId) external view returns (uint256);\\n}\\n\\ninterface IERC721 {\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n}\\n\\ncontract Lottery {\\n    using SafeMath for uint256;\\n    CudlFinance public immutable cudlFinance;\\n    IToken public immutable cudl;\\n    uint256 public food;\\n\\n    uint256 public nftOriginId;\\n\\n    mapping(uint256 => address[]) public players;\\n    mapping(uint256 => mapping(address => uint256)) public ticketsByPlayers;\\n\\n    uint256 public currentPet = 0;\\n    uint256 public currentRound = 0;\\n    uint256 public end = 0;\\n    uint256 public start = 0;\\n\\n    uint256 public randomBlockSize = 3;\\n\\n    address winner1;\\n    address winner2;\\n    address winner3;\\n    address winner4;\\n\\n    address public owner;\\n\\n    // overflow\\n    uint256 public MAX_INT = 2**256 - 1;\\n\\n    event LotteryStarted(\\n        uint256 round,\\n        uint256 start,\\n        uint256 end,\\n        uint256 petId,\\n        uint256 foodId\\n    );\\n    event LotteryEnded(\\n        uint256 round,\\n        uint256 petId,\\n        uint256 cudlPrize,\\n        address winner1,\\n        address winner2,\\n        address winner3,\\n        address winner4\\n    );\\n\\n    event LotteryTicketBought(address participant, uint256 tickets);\\n\\n    constructor() public {\\n        cudlFinance = CudlFinance(0x9c10AeD865b63f0A789ae64041581EAc63458209);\\n        cudl = IToken(0xeCD20F0EBC3dA5E514b4454E3dc396E7dA18cA6A);\\n        owner = msg.sender;\\n    }\\n\\n    function startLottery(\\n        uint256 _food,\\n        uint256 _days,\\n        uint256 _petId,\\n        uint256 _nftOriginId\\n    ) external {\\n        require(msg.sender == owner, \\\"!owner\\\");\\n        food = _food;\\n        currentRound = currentRound + 1;\\n        end = now + _days * 1 days;\\n        start = now;\\n        cudl.approve(address(cudlFinance), MAX_INT);\\n        currentPet = _petId;\\n        nftOriginId = _nftOriginId;\\n        emit LotteryStarted(currentRound, start, end, currentPet, food);\\n    }\\n\\n    function getInfos(address player)\\n        public\\n        view\\n        returns (\\n            uint256 _participants,\\n            uint256 _end,\\n            uint256 _start,\\n            uint256 _cudlSize,\\n            uint256 _food,\\n            uint256 _currentPet,\\n            uint256 _foodPrice,\\n            uint256 _ownerTickets,\\n            uint256 _currentRound\\n        )\\n    {\\n        _participants = players[currentRound].length;\\n        _end = end;\\n        _start = start;\\n        _cudlSize = cudl.balanceOf(address(this));\\n        _food = food;\\n        _currentPet = currentPet;\\n        _foodPrice = cudlFinance.itemPrice(food);\\n        _ownerTickets = ticketsByPlayers[currentRound][player];\\n        _currentRound = currentRound;\\n    }\\n\\n    function buyTicket(address _player) external {\\n        require(start != 0, \\\"The lottery did not start yet\\\");\\n        if (now > end) {\\n            endLottery();\\n            return;\\n        }\\n\\n        uint256 lastTimeMined = cudlFinance.lastTimeMined(currentPet);\\n        uint8 tickets = 1;\\n\\n        require(\\n            cudl.transferFrom(\\n                msg.sender,\\n                address(this),\\n                cudlFinance.itemPrice(food)\\n            )\\n        );\\n        cudlFinance.buyAccesory(currentPet, food);\\n\\n        // We mine if possible, the person that get the feeding transaction gets an extra ticket\\n        if (lastTimeMined + 1 days < now) {\\n            cudlFinance.claimMiningRewards(currentPet);\\n            tickets = 2;\\n        }\\n\\n        for (uint256 i = 0; i < tickets; i++) {\\n            players[currentRound].push(_player);\\n            ticketsByPlayers[currentRound][_player] =\\n                ticketsByPlayers[currentRound][_player] +\\n                1;\\n        }\\n        emit LotteryTicketBought(_player, tickets);\\n    }\\n\\n    function endLottery() public {\\n        require(now > end && end != 0);\\n        uint256 cudlBalance = cudl.balanceOf(address(this));\\n\\n        end = 0;\\n        start = 0;\\n\\n        // pick first winner (the vNFT)\\n        winner1 = players[currentRound][\\n            randomNumber(block.number, players[currentRound].length)\\n        ];\\n\\n        IERC721(0xc3f733ca98E0daD0386979Eb96fb1722A1A05E69).safeTransferFrom(\\n            address(this),\\n            winner1,\\n            nftOriginId\\n        );\\n\\n        // pick second winner (50% cudl)\\n        winner2 = players[currentRound][\\n            randomNumber(block.number - 1, players[currentRound].length)\\n        ];\\n        require(cudl.transfer(winner2, cudlBalance.mul(37).div(100)));\\n\\n        // pick third winner (25% cudl)\\n        winner3 = players[currentRound][\\n            randomNumber(block.number - 3, players[currentRound].length)\\n        ];\\n        require(cudl.transfer(winner3, cudlBalance.mul(19).div(100)));\\n\\n        // pick fourth winner (25% cudl)\\n        winner4 = players[currentRound][\\n            randomNumber(block.number - 4, players[currentRound].length)\\n        ];\\n        require(cudl.transfer(winner4, cudlBalance.mul(19).div(100)));\\n\\n        //burn the leftover (25%)\\n        cudl.burn(cudl.balanceOf(address(this)));\\n\\n        emit LotteryEnded(\\n            currentRound,\\n            currentPet,\\n            cudlBalance,\\n            winner1,\\n            winner2,\\n            winner3,\\n            winner4\\n        );\\n    }\\n\\n    /* generates a number from 0 to 2^n based on the last n blocks */\\n    function randomNumber(uint256 seed, uint256 max)\\n        public\\n        view\\n        returns (uint256 _randomNumber)\\n    {\\n        uint256 n = 0;\\n        for (uint256 i = 0; i < randomBlockSize; i++) {\\n            if (\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(blockhash(block.number - i - 1), seed)\\n                    )\\n                ) %\\n                    2 ==\\n                0\\n            ) n += 2**i;\\n        }\\n        return n % max;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"petId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cudlPrize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner3\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner4\",\"type\":\"address\"}],\"name\":\"LotteryEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"petId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"foodId\",\"type\":\"uint256\"}],\"name\":\"LotteryStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tickets\",\"type\":\"uint256\"}],\"name\":\"LotteryTicketBought\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_INT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"buyTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cudl\",\"outputs\":[{\"internalType\":\"contract IToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cudlFinance\",\"outputs\":[{\"internalType\":\"contract CudlFinance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"food\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_participants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cudlSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_food\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentPet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_foodPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ownerTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentRound\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftOriginId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomBlockSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"randomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_randomNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_food\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_petId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftOriginId\",\"type\":\"uint256\"}],\"name\":\"startLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ticketsByPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Lottery","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}