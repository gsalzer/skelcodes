{"status":"1","message":"OK","result":[{"SourceCode":"{\"AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ContextUpgradeable.sol\\\";\\nimport \\\"./StringsUpgradeable.sol\\\";\\nimport \\\"./ERC165Upgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn\\u0027t allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role\\u0027s admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping (address =\\u003e bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 =\\u003e RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``\\u0027s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if(!hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\n                \\\"AccessControl: account \\\",\\n                StringsUpgradeable.toHexString(uint160(account), 20),\\n                \\\" is missing role \\\",\\n                StringsUpgradeable.toHexString(uint256(role), 32)\\n            )));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role\\u0027s admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``\\u0027s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``\\u0027s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function\\u0027s\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn\\u0027t perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``\\u0027s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\"},\"BalanceLimitable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"./ERC20Upgradeable.sol\\\";\\n\\nabstract contract BalanceLimitableToken is ERC20Upgradeable, AccessControlUpgradeable {\\n    /// @notice Maximum token balance addresses are allowed to have\\n    uint256 private _balanceLimit;\\n    /// @notice Record of addresses that are allowed to circumvent the balance limit\\n    mapping (address =\\u003e bool) private _balanceLimitBypass;\\n\\n    /// @notice Role for access control\\n    bytes32 public constant BALANCE_LIMITER_ROLE = keccak256(\\\"BALANCE_LIMITER_ROLE\\\");\\n\\n    /**\\n     * @dev Sets the values for {_balanceLimit}.\\n     */\\n    function __BalanceLimitableToken_init_unchained(uint256 balanceLimit_) internal initializer {\\n        _setBalanceLimit(balanceLimit_);\\n    }\\n\\n    /**\\n     * @dev Emitted when an address is added to the bypass list\\n     */\\n    event BalanceLimitBypassAdded(address bypasser);\\n\\n    /**\\n     * @dev Emitted when an address is removed from the bypass list\\n     */\\n    event BalanceLimitBypassRemoved(address exBypasser);\\n\\n    /**\\n     * @dev Emitted when the balance limit is changed\\n     */\\n    event BalanceLimitChange(uint256 oldLimit, uint256 newLimit);\\n\\n    /**\\n     * @dev Allow only the addresses with the BALANCE_LIMITER_ROLE privileges\\n     */\\n    modifier onlyBalanceLimiter() {\\n        _checkRole(BALANCE_LIMITER_ROLE, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allow `bypasser` to circumvent the balance limit\\n     */\\n    function addBalanceBypasser(address bypasser) public virtual onlyBalanceLimiter {\\n        _addBalanceBypasser(bypasser);\\n    }\\n\\n    /**\\n     * @dev Returns the max allowed balance\\n     */\\n    function balanceLimit() public view virtual returns (uint256) {\\n        return _balanceLimit;\\n    }\\n\\n    /**\\n     * @dev Check if `target` is allowed to bypass the balance limit\\n     */\\n    function bypassesBalanceLimit(address target) public view virtual returns (bool) {\\n        return _balanceLimitBypass[target];\\n    }\\n\\n    /**\\n     * @dev Revoke balance limit bypass privileges from `exBypasser`\\n     */\\n    function removeBalanceBypasser(address exBypasser) public virtual onlyBalanceLimiter {\\n        _removeBalanceBypasser(exBypasser);\\n    }\\n\\n    /**\\n     * @dev Update the max allowed balance\\n     */\\n    function setBalanceLimit(uint256 newBalanceLimit) public virtual onlyBalanceLimiter {\\n        _setBalanceLimit(newBalanceLimit);\\n    }\\n\\n    /**\\n     * @dev Allow `bypasser` to circumvent the balance limit\\n     */\\n    function _addBalanceBypasser(address bypasser) internal virtual {\\n        if (!_balanceLimitBypass[bypasser]) {\\n            _balanceLimitBypass[bypasser] = true;\\n            emit BalanceLimitBypassAdded(bypasser);\\n        }\\n    }\\n\\n    /**\\n     * @dev Pre-transfer hook for running validation.\\n     *\\n     * Overridden to perform balance limit validation.\\n     *\\n     * The transfer will be deemed valid at the present moment if the following criteria are fulfilled\\n     * - the balance of `sender` is equal to or more than `amount`\\n     * - the new balance of `recipient` after adding `amount` does not exceed the balance limit, or\\n     * - `recipient` is a bypasser (i.e. is an address in the bypass list)\\n     */\\n    function _beforeTokenTransfer(address sender, address recipient, uint256 amount) internal virtual override {\\n        require(\\n            recipient == address(0) ||\\n                bypassesBalanceLimit(recipient) ||\\n                (balanceOf(recipient) + amount) \\u003c= _balanceLimit,\\n            \\\"balance limit exceeded\\\"\\n        );\\n\\n        super._beforeTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /**\\n     * @dev Revoke balance limit bypass privileges from `exBypasser`\\n     */\\n    function _removeBalanceBypasser(address exBypasser) internal virtual {\\n        if (_balanceLimitBypass[exBypasser]) {\\n            _balanceLimitBypass[exBypasser] = false;\\n            emit BalanceLimitBypassRemoved(exBypasser);\\n        }\\n    }\\n\\n    /**\\n     * @dev Update the max allowed balance\\n     */\\n    function _setBalanceLimit(uint256 newBalanceLimit) internal virtual {\\n        if (_balanceLimit != newBalanceLimit) {\\n            uint256 oldLimit = _balanceLimit;\\n            _balanceLimit = newBalanceLimit;\\n            emit BalanceLimitChange(oldLimit, newBalanceLimit);\\n        }\\n    }\\n}\\n\"},\"Blacklistable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"./ERC20Upgradeable.sol\\\";\\n\\nabstract contract Blacklistable is AccessControlUpgradeable {\\n    /// @notice Record of blacklisted addresses\\n    mapping (address =\\u003e bool) private _prison;\\n\\n    /// @notice Role for access control\\n    bytes32 public constant BLACKLISTER_ROLE = keccak256(\\\"BLACKLISTER_ROLE\\\");\\n\\n    /**\\n     * @dev Emitted when an address is added to the blacklist\\n     */\\n    event Blacklisted(address indexed convict);\\n\\n    /**\\n     * @dev Emitted when an address is removed from the blacklist\\n     */\\n    event Unblacklisted(address indexed parolee);\\n\\n    /**\\n     * @dev Throws an error if `target` is blacklisted\\n     */\\n    modifier notBlacklisted() {\\n        require(!isBlacklisted(_msgSender()), \\\"blacklisted\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allow only the addresses with the BLACKLISTER_ROLE privileges\\n     */\\n    modifier onlyBlacklister() {\\n        _checkRole(BLACKLISTER_ROLE, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev Add `convict` to the blacklist\\n     */\\n    function blacklist(address convict) public virtual onlyBlacklister {\\n        _blacklist(convict);\\n    }\\n\\n    /**\\n     * @dev Check if `suspect` is blacklisted\\n     */\\n    function isBlacklisted(address suspect) public view virtual returns (bool) {\\n        return _prison[suspect];\\n    }\\n\\n    /**\\n     * @dev Remove `parolee` from the blacklist\\n     */\\n    function unblacklist(address parolee) public virtual onlyBlacklister {\\n        _unblacklist(parolee);\\n    }\\n\\n    /**\\n     * @dev Add `convict` to the blacklist\\n     */\\n    function _blacklist(address convict) internal virtual {\\n        if (!isBlacklisted(convict)) {\\n            _prison[convict] = true;\\n            emit Blacklisted(convict);\\n        }\\n    }\\n\\n    /**\\n     * @dev Remove `parolee` from the blacklist\\n     */\\n    function _unblacklist(address parolee) internal virtual {\\n        if (isBlacklisted(parolee)) {\\n            _prison[parolee] = false;\\n            emit Unblacklisted(parolee);\\n        }\\n    }\\n}\\n\\nabstract contract BlacklistableToken is ERC20Upgradeable, Blacklistable {\\n    /**\\n     * @dev Pre-transfer hook for running validation.\\n     *\\n     * Overridden to perform blacklist validation.\\n     *\\n     * The transfer will be deemed valid at the present moment if the following criteria are fulfilled\\n     * - `sender` is not blacklisted\\n     * - `recipient` is not blacklisted\\n     */\\n    function _beforeTokenTransfer(address sender, address recipient, uint256 amount) internal virtual override {\\n        require(!isBlacklisted(sender), \\\"blacklisted sender\\\");\\n        require(!isBlacklisted(recipient), \\\"blacklisted recipient\\\");\\n\\n        super._beforeTokenTransfer(sender, recipient, amount);\\n    }\\n}\\n\"},\"ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"./Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"},\"ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"},\"ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"./ContextUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn\\u0027t required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping (address =\\u003e uint256) private _balances;\\n\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance \\u003e= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance \\u003e= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance \\u003e= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance \\u003e= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n    uint256[45] private __gap;\\n}\\n\"},\"IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\"},\"IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"},\"IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can\\u0027t have a constructor, it\\u0027s common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"},\"OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ContextUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"},\"Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"./ERC20Upgradeable.sol\\\";\\n\\nabstract contract Pausable is AccessControlUpgradeable {\\n    /// @notice Flag indicating whether the contract has been paused\\n    bool private _paused;\\n\\n    /// @notice Role for access control\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    /**\\n     * @dev Sets the values for {_paused}.\\n     */\\n    function __Paused_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Emitted when the contract is paused\\n     */\\n    event Paused();\\n\\n    /**\\n     * @dev Emitted when the contract is unpaused\\n     */\\n    event Unpaused();\\n\\n    /**\\n     * @dev Throws an error if the contract is paused\\n     */\\n    modifier notPaused() {\\n        require(!_paused, \\\"contract is paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allow only the addresses with the PAUSER_ROLE privileges\\n     */\\n    modifier onlyPauser() {\\n        _checkRole(PAUSER_ROLE, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check if the contract is paused\\n     */\\n    function isPaused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Pause the contract\\n     */\\n    function pause() public onlyPauser {\\n        if (!_paused) {\\n            _paused = true;\\n            emit Paused();\\n        }\\n    }\\n\\n    /**\\n     * @dev Unpause the contract\\n     */\\n    function unpause() public onlyPauser {\\n        if (_paused) {\\n            _paused = false;\\n            emit Unpaused();\\n        }\\n    }\\n}\\n\\nabstract contract PausableToken is ERC20Upgradeable, Pausable {\\n    /**\\n     * @dev Override `_approve` to include pausability\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual override notPaused {\\n        super._approve(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Pre-transfer hook for running validation.\\n     *\\n     * Overridden to perform balance limit validation.\\n     *\\n     * The transfer will be deemed valid at the present moment if the following criteria are fulfilled\\n     * - the contract is not paused\\n     */\\n    function _beforeTokenTransfer(address sender, address recipient, uint256 amount) internal virtual override {\\n        require(!isPaused(), \\\"contract is paused\\\");\\n\\n        super._beforeTokenTransfer(sender, recipient, amount);\\n    }\\n}\\n\"},\"Peggable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./ERC20Upgradeable.sol\\\";\\n\\nabstract contract PeggableToken is Initializable, ERC20Upgradeable, AccessControlUpgradeable {\\n    /// @notice Address that receives the pegged token when minting occurs\\n    address private _mintingBeneficiary;\\n    /// @notice Address of the pegged token\\n    address private _peggedToken;\\n\\n    /// @notice Role for access control\\n    bytes32 public constant BENEFICIARY_MANAGER_ROLE = keccak256(\\\"BENEFICIARY_MANAGER_ROLE\\\");\\n\\n    /**\\n     * @dev Sets the values for {_peggedToken}, {_mintingBeneficiary}, and {_decimals}\\n     */\\n    function __Peggable_init_unchained(address peggedToken, address mintingBeneficiary_) internal initializer {\\n        _peggedToken = peggedToken;\\n        _changeMintingBeneficiary(mintingBeneficiary_);\\n    }\\n\\n    /**\\n     * @dev Emitted when the minting beneficiary changes\\n     */\\n    event MintingBeneficiaryChanged(address oldBeneficiary, address newBeneficiary);\\n\\n    /**\\n     * @dev Allow only the addresses with the BENEFICIARY_MANAGER_ROLE privileges\\n     */\\n    modifier onlyBeneficiaryManager() {\\n        _checkRole(BENEFICIARY_MANAGER_ROLE, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev Burn the sender\\u0027s tokens and return them the equivalent in the pegged token\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(amount);\\n    }\\n\\n    /**\\n     * @dev Update the minting beneficiary\\n     */\\n    function changeMintingBeneficiary(address newBeneficiary) public virtual onlyBeneficiaryManager {\\n        _changeMintingBeneficiary(newBeneficiary);\\n    }\\n\\n    /**\\n     * @dev Mint `amount` tokens and send them to `recipient`\\n     */\\n    function mint(address recipient, uint256 amount) public virtual {\\n        _mint(recipient, amount);\\n    }\\n\\n    /**\\n     * @dev Returns the beneficiary of the pegged tokens taken during minting\\n     */\\n    function mintingBeneficiary() public view virtual returns (address) {\\n        return _mintingBeneficiary;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pegged ERC-20 token\\n     */\\n    function peggedTokenAddress() public view virtual returns (address) {\\n        return _peggedToken;\\n    }\\n\\n    /**\\n     * @dev Burn the sender\\u0027s tokens and return them the equivalent in the pegged token\\n     */\\n    function _burn(uint256 amount) internal virtual {\\n        _burn(_msgSender(), amount);\\n        IERC20(_peggedToken).transfer(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Update the minting beneficiary\\n     */\\n    function _changeMintingBeneficiary(address newBeneficiary) internal virtual {\\n        require(newBeneficiary != address(0), \\\"minting beneficiary cannot be zero address\\\");\\n        if (_mintingBeneficiary != newBeneficiary) {\\n            address oldBeneficiary = _mintingBeneficiary;\\n            _mintingBeneficiary = newBeneficiary;\\n            emit MintingBeneficiaryChanged(oldBeneficiary, newBeneficiary);\\n        }\\n    }\\n\\n    /**\\n     * @dev Mint `amount` tokens and send them to `recipient`\\n     */\\n    function _mint(address recipient, uint256 amount) internal virtual override {\\n        IERC20(_peggedToken).transferFrom(_msgSender(), _mintingBeneficiary, amount);\\n        super._mint(recipient, amount);\\n    }\\n}\\n\"},\"SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler\\u0027s built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c \\u003c a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b \\u003e a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n            // benefit is lost if \\u0027b\\u0027 is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003c= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003e 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003e 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"},\"StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp \\u003e\\u003e= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\n            buffer[i] = alphabet[value \\u0026 0xf];\\n            value \\u003e\\u003e= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\"},\"Taxable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./ERC20Upgradeable.sol\\\";\\nimport \\\"./SafeMathUpgradeable.sol\\\";\\n\\nabstract contract TaxableToken is Initializable, ERC20Upgradeable, AccessControlUpgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    /// @notice Beneficiary of taxes levied upon transfers\\n    address private _taxBeneficiary;\\n    /// @notice Tax percentage\\n    uint256 private _taxPercentage;\\n    /// @notice Divisor for calculating the tax percentage\\n    uint256 internal _taxPercentageDivisor;\\n\\n    /// @notice Role for access control\\n    bytes32 public constant TAX_MANAGER_ROLE = keccak256(\\\"TAX_MANAGER_ROLE\\\");\\n\\n    /**\\n     * @dev Sets the values for {_taxBeneficiary} and {_taxPercentage}\\n     */\\n    function __TaxableToken_init_unchained(address taxBeneficiary_, uint256 taxPercentage_) internal initializer {\\n        _taxPercentageDivisor = 10000;\\n        _setTaxBeneficiary(taxBeneficiary_);\\n        _setTaxPercentage(taxPercentage_);\\n    }\\n\\n    /**\\n     * @dev Emitted when the tax beneficiary changes\\n     */\\n    event TaxBeneficiaryChanged(address oldBeneficiary, address newBeneficiary);\\n\\n    /**\\n     * @dev Emitted when the ta\\n     uint256 oldPercentage = _taxPercentage;x percentage changes\\n     */\\n    event TaxPercentageChanged(uint256 oldPercentage, uint256 newPercentage);\\n\\n    /**\\n     * @dev Allow only the addresses with the TAX_MANAGER_ROLE privileges\\n     */\\n    modifier onlyTaxManager() {\\n        _checkRole(TAX_MANAGER_ROLE, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev Retrieve the minimum valid tax percentage\\n     */\\n    function minimumTaxPercentage() public pure virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Retrieve the maximum valid tax percentage\\n     */\\n    function maximumTaxPercentage() public view virtual returns (uint256) {\\n        return _taxPercentageDivisor;\\n    }\\n\\n    /**\\n     * @dev Change the beneficiary\\n     */\\n    function setTaxBeneficiary(address newBeneficiary) public virtual onlyTaxManager {\\n        _setTaxBeneficiary(newBeneficiary);\\n    }\\n\\n    /**\\n     * @dev Set the tax percentage\\n     */\\n    function setTaxPercentage(uint256 newPercentage) public virtual onlyTaxManager {\\n        _setTaxPercentage(newPercentage);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the tax beneficiary\\n     */\\n    function taxBeneficiary() public view virtual returns (address) {\\n        return _taxBeneficiary;\\n    }\\n\\n    /**\\n     * @dev Returns the tax percentage\\n     */\\n    function taxPercentage() public view virtual returns (uint256) {\\n        return _taxPercentage;\\n    }\\n\\n    /**\\n     * @dev Calculate the value of the tax to levy for the given `amount`\\n     */\\n    function _calculateTaxableAmount(uint256 amount) internal view virtual returns (uint256) {\\n        uint256 tax = 0;\\n        if (_taxPercentage \\u003e 0) {\\n            tax = amount.mul(_taxPercentage).div(_taxPercentageDivisor);\\n        }\\n        return tax;\\n    }\\n\\n    /**\\n     * @dev Change the beneficiary\\n     */\\n    function _setTaxBeneficiary(address newBeneficiary) internal virtual {\\n        require(newBeneficiary != address(0), \\\"new beneficiary cannot be zero address\\\");\\n        if (_taxBeneficiary != newBeneficiary) {\\n            address oldBeneficiary = _taxBeneficiary;\\n            _taxBeneficiary = newBeneficiary;\\n            emit TaxBeneficiaryChanged(oldBeneficiary, newBeneficiary);\\n        }\\n    }\\n\\n    /**\\n     * @dev Validates and checks the tax percentage\\n     */\\n    function _setTaxPercentage(uint256 newPercentage) internal virtual {\\n        if (_taxPercentage != newPercentage) {\\n            require(\\n                (newPercentage \\u003e= 0 \\u0026\\u0026 newPercentage \\u003c= _taxPercentageDivisor),\\n                \\\"outside of valid range\\\"\\n            );\\n            uint256 oldPercentage = _taxPercentage;\\n            _taxPercentage = newPercentage;\\n            emit TaxPercentageChanged(oldPercentage, newPercentage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overridden to add tax levying functionality\\n     */\\n    function _transferTaxable(address sender, address recipient, uint256 amount) internal virtual {\\n        uint256 tax = _calculateTaxableAmount(amount);\\n        super._transfer(sender, recipient, amount);\\n        if (tax \\u003e 0) {\\n            super._transfer(sender, _taxBeneficiary, tax);\\n        }\\n    }\\n}\\n\"},\"Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BalanceLimitable.sol\\\";\\nimport \\\"./Blacklistable.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Pausable.sol\\\";\\nimport \\\"./Peggable.sol\\\";\\nimport \\\"./Taxable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"./ERC20Upgradeable.sol\\\";\\n\\ncontract Token is ERC20Upgradeable, OwnableUpgradeable, AccessControlUpgradeable, PeggableToken, BalanceLimitableToken, BlacklistableToken, PausableToken, TaxableToken {\\n    using SafeMathUpgradeable for uint256;\\n\\n    /// @notice EIP-712 typehash for contract\\u0027s domain\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\n        \\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\"\\n    );\\n    /// @notice EIP-712 typehash for the structured hash used by `permit`\\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\\n        \\\"Permit(address designator,address spender,uint256 amount,bytes32 nonce,uint256 deadline)\\\"\\n    );\\n    /// @notice EIP-712 typehash for the structured hash used by `transferPresigned`\\n    bytes32 public constant TRANSFER_PRESIGNED_TYPEHASH = keccak256(\\n        \\\"TransferPresigned(address sender,address recipient,uint256 amount,bytes32 nonce,uint256 deadline)\\\"\\n    );\\n\\n    /// @notice Role for access control\\n    bytes32 public constant TOKEN_CUSTODIAN_ROLE = keccak256(\\\"TOKEN_CUSTODIAN_ROLE\\\");\\n\\n    /// @notice Record of single-used nonces for `permit` and `transferPresigned` operations\\n    mapping (address =\\u003e mapping (bytes32 =\\u003e bool)) private _permitNonces;\\n    mapping (address =\\u003e mapping (bytes32 =\\u003e bool)) private _transferPresignedNonces;\\n\\n    /// @notice Number of decimals\\n    uint8 _decimals;\\n\\n    /**\\n     * @dev Initialises the token contract\\n     */\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_,\\n        address peggedToken,\\n        uint256 balanceLimit_,\\n        uint256 taxPercentage_\\n    ) public initializer {\\n        address self = address(this);\\n        initialize(name_, symbol_, decimals_, peggedToken, self, balanceLimit_, self, taxPercentage_);\\n    }\\n\\n    /**\\n     * @dev Initialises the token contract\\n     */\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_,\\n        address peggedToken,\\n        address mintingBeneficiary_,\\n        uint256 balanceLimit_,\\n        address taxBeneficiary_,\\n        uint256 taxPercentage_\\n    ) public initializer {\\n        __ERC20_init(name_, symbol_);\\n        __Ownable_init();\\n        __AccessControl_init_unchained();\\n\\n        __Token_init_unchained(decimals_);\\n        __Peggable_init_unchained(peggedToken, mintingBeneficiary_);\\n        __BalanceLimitableToken_init_unchained(balanceLimit_);\\n        __Paused_init_unchained();\\n        __TaxableToken_init_unchained(taxBeneficiary_, taxPercentage_);\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        initializeBeneficiaryPrivileges();\\n    }\\n\\n    function __Token_init_unchained(uint8 decimals_) internal initializer {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Sets up the necessary roles and grants the beneficiaries sensible privileges\\n     */\\n    function initializeBeneficiaryPrivileges() internal initializer {\\n        _addBalanceBypasser(mintingBeneficiary());\\n        _addBalanceBypasser(taxBeneficiary());\\n    }\\n\\n    /**\\n     * @dev Allow only the addresses with the TOKEN_CUSTODIAN_ROLE privileges\\n     */\\n    modifier onlyTokenCustodian() {\\n        _checkRole(TOKEN_CUSTODIAN_ROLE, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev Revoke balance limit bypass privileges from `exBypasser`\\n     */\\n    function addBalanceBypasser(address bypasser) public override notPaused onlyBalanceLimiter {\\n        super.addBalanceBypasser(bypasser);\\n    }\\n\\n    /**\\n     * @dev Allow `spender` to transfer up to `amount` tokens\\n     */\\n    function approve(address spender, uint256 amount) public override notPaused returns (bool) {\\n        return super.approve(spender, amount);\\n    }\\n\\n    /**\\n     * @dev Add `convict` to the blacklist\\n     */\\n    function blacklist(address convict) public override notPaused onlyBlacklister {\\n        super.blacklist(convict);\\n    }\\n\\n    /**\\n     * @dev Burn the sender\\u0027s tokens and return them the equivalent in the pegged token\\n     */\\n    function burn(uint256 amount) public override notBlacklisted notPaused {\\n        super.burn(amount);\\n    }\\n\\n    /**\\n     * @dev Update the minting beneficiary and add the new beneficiary to the balance bypass list\\n     */\\n    function changeMintingBeneficiary(address newBeneficiary) public override notPaused onlyBeneficiaryManager {\\n        _changeMintingBeneficiary(newBeneficiary);\\n        _addBalanceBypasser(newBeneficiary);\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimal places for the contract\\n     */\\n    function decimals() public view override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public override notPaused returns (bool) {\\n        return super.decreaseAllowance(spender, subtractedValue);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     */\\n    function grantRole(bytes32 role, address account) public override notPaused onlyRole(getRoleAdmin(role)) {\\n        super.grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public override notPaused returns (bool) {\\n        return super.increaseAllowance(spender, addedValue);\\n    }\\n\\n    /**\\n     * @dev Mint `amount` tokens and send them to `recipient`\\n     */\\n    function mint(address recipient, uint256 amount) public override notBlacklisted notPaused {\\n        _mint(recipient, amount);\\n    }\\n\\n    /**\\n     * @dev Validate and execute a pre-signed `allowance` operation\\n     */\\n    function permit(\\n        address designator,\\n        address spender,\\n        uint256 amount,\\n        bytes32 nonce,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public notPaused returns (bool) {\\n        _permit(designator, spender, amount, nonce, deadline, v, r, s);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Check if the given address and nonce pair have been used for `permit` operations\\n     */\\n    function permitNonceUsed(address designator, bytes32 nonce) public view returns (bool) {\\n        return _permitNonces[designator][nonce];\\n    }\\n\\n    /**\\n     * @dev Revoke balance limit bypass privileges from `exBypasser`\\n     */\\n    function removeBalanceBypasser(address exBypasser) public override onlyBalanceLimiter notPaused {\\n        super.removeBalanceBypasser(exBypasser);\\n    }\\n\\n    /**\\n     * @dev Disable the ability to renounce ownership\\n     */\\n    function renounceOwnership() public virtual override onlyOwner {\\n        revert(\\\"disabled\\\");\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     */\\n    function renounceRole(bytes32 role, address account) public override notPaused {\\n        super.renounceRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     */\\n    function revokeRole(bytes32 role, address account) public override notPaused onlyRole(getRoleAdmin(role)) {\\n        super.revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Update the max allowed balance\\n     */\\n    function setBalanceLimit(uint256 newBalanceLimit) public override notPaused onlyBalanceLimiter {\\n        super.setBalanceLimit(newBalanceLimit);\\n    }\\n\\n    /**\\n     * @dev Change the beneficiary\\n     */\\n    function setTaxBeneficiary(address newBeneficiary) public override notPaused onlyTaxManager {\\n        super.setTaxBeneficiary(newBeneficiary);\\n        _addBalanceBypasser(newBeneficiary);\\n    }\\n\\n    /**\\n     * @dev Set the tax percentage\\n     */\\n    function setTaxPercentage(uint256 newPercentage) public override notPaused onlyTaxManager {\\n        super.setTaxPercentage(newPercentage);\\n    }\\n\\n    /**\\n     * @dev Transfer `amount` tokens to `recipient` from caller\\n     */\\n    function transfer(address recipient, uint256 amount) public override notBlacklisted notPaused returns (bool) {\\n        return super.transfer(recipient, amount);\\n    }\\n\\n    /**\\n     * @dev Transfer `amount` tokens from `sender` to `recipient`\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override notBlacklisted notPaused returns (bool) {\\n        return super.transferFrom(sender, recipient, amount);\\n    }\\n\\n    /**\\n     * @dev Transfer `amount` tokens for contract `token` to `recipient`\\n     */\\n    function transferERC20Token(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) public notPaused onlyTokenCustodian returns (bool) {\\n        return IERC20(token).transfer(recipient, amount);\\n    }\\n\\n    /**\\n     * @dev Validate and execute a pre-signed `transfer` operation\\n     */\\n    function transferPresigned(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes32 nonce,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public notPaused returns (bool) {\\n        _transferPresigned(sender, recipient, amount, nonce, deadline, v, r, s);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Check if the given address and nonce pair have been used for `transferPresigned` operations\\n     */\\n    function transferPresignedNonceUsed(address sender, bytes32 nonce) public view returns (bool) {\\n        return _transferPresignedNonces[sender][nonce];\\n    }\\n\\n    /**\\n     * @dev Remove `parolee` from the blacklist\\n     */\\n    function unblacklist(address parolee) public override notPaused onlyBlacklister {\\n        super.unblacklist(parolee);\\n    }\\n\\n    /**\\n     * @dev Override `_approve` for method resolution\\n     */\\n    function _approve(\\n        address designator,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual override (ERC20Upgradeable, PausableToken) {\\n        PausableToken._approve(designator, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Pre-transfer hook for running validation.\\n     *\\n     * Overridden to perform validation in the most sensible order.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override (ERC20Upgradeable, BalanceLimitableToken, BlacklistableToken, PausableToken) {\\n        // avoid calling this to save gas and rely on the modifiers instead\\n        // PausableToken._beforeTokenTransfer(from, to, amount);\\n\\n        BlacklistableToken._beforeTokenTransfer(from, to, amount);\\n        BalanceLimitableToken._beforeTokenTransfer(from, to, amount);\\n        ERC20Upgradeable._beforeTokenTransfer(from, to, amount);\\n    }\\n\\n    /**\\n     * @dev Returns the current chain ID.\\n     */\\n    function _getChainId() public view returns (uint256) {\\n        uint256 chainId;\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n\\n    /**\\n     * @dev Mint `amount` tokens and send them to the sender\\n     */\\n    function _mint(\\n        address recipient,\\n        uint256 amount\\n    ) internal override (ERC20Upgradeable, PeggableToken) notBlacklisted notPaused {\\n        PeggableToken._mint(recipient, amount);\\n    }\\n\\n    /**\\n     * @dev Validate and execute a pre-signed `allowance` operation\\n     *\\n     * The `allowance` operation can be carried out by another party by utilising the `permit` function, as long as the\\n     * address owner themselves have signed a structured hash containing the details necessary for execution.\\n     */\\n    function _permit(\\n        address designator,\\n        address spender,\\n        uint256 amount,\\n        bytes32 nonce,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        require(!permitNonceUsed(designator, nonce), \\\"nonce used\\\");\\n\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), _getChainId(), address(this))\\n        );\\n        bytes32 structHash = keccak256(\\n            abi.encode(\\n                PERMIT_TYPEHASH,\\n                designator,\\n                spender,\\n                amount,\\n                nonce,\\n                deadline\\n            )\\n        );\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        _validateSignature(designator, digest, v, r, s, deadline, \\\"permit\\\");\\n\\n        _permitNonces[designator][nonce] = true;\\n        _approve(designator, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Validate and execute a pre-signed `transfer` operation\\n     *\\n     * The `transfer` operation can be carried out by another party by utilising the `transferPresigned` function, as\\n     * long as the address owner themselves have signed a structured hash containing the details necessary for\\n     * execution.\\n     */\\n    function _transferPresigned(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes32 nonce,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        require(!transferPresignedNonceUsed(sender, nonce), \\\"nonce used\\\");\\n\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), _getChainId(), address(this))\\n        );\\n        bytes32 structHash = keccak256(\\n            abi.encode(\\n                TRANSFER_PRESIGNED_TYPEHASH,\\n                sender,\\n                recipient,\\n                amount,\\n                nonce,\\n                deadline\\n            )\\n        );\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        _validateSignature(sender, digest, v, r, s, deadline, \\\"transferPresigned\\\");\\n\\n        _transferPresignedNonces[sender][nonce] = true;\\n        _transferTaxable(sender, recipient, amount);\\n    }\\n    \\n    /**\\n     * @dev Validates a signature\\n     *\\n     * Given a signature (made up of the (v, r, s) tuple) and the original message digest, this function recovers the\\n     * address of the original signatory. The address of the original signatory is compared against the given signatory\\n     * and the deadline is checked to ensure that the signature has not expired. The validation fails if either\\n     * condition is not fulfilled.\\n     */\\n    function _validateSignature(\\n        address sender,\\n        bytes32 digest,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        uint256 deadline,\\n        string memory caller\\n    ) internal view returns (address) {\\n        require(block.timestamp \\u003c= deadline, string(abi.encodePacked(caller, \\\": signature expired\\\")));\\n\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), string(abi.encodePacked(caller, \\\": invalid signature\\\")));\\n        require(signatory == sender, string(abi.encodePacked(caller, \\\": unauthorized\\\")));\\n\\n        return signatory;\\n    }\\n\\n    function generateDomainSeparator() public view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), _getChainId(), address(this)));\\n    }\\n}\\n\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bypasser\",\"type\":\"address\"}],\"name\":\"BalanceLimitBypassAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exBypasser\",\"type\":\"address\"}],\"name\":\"BalanceLimitBypassRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"BalanceLimitChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"convict\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldBeneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"MintingBeneficiaryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldBeneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"TaxBeneficiaryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"TaxPercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"parolee\",\"type\":\"address\"}],\"name\":\"Unblacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BALANCE_LIMITER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BENEFICIARY_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BLACKLISTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAX_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_CUSTODIAN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_PRESIGNED_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bypasser\",\"type\":\"address\"}],\"name\":\"addBalanceBypasser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"convict\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"bypassesBalanceLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"changeMintingBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generateDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"peggedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceLimit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxPercentage_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"peggedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mintingBeneficiary_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceLimit_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"taxBeneficiary_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"taxPercentage_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"suspect\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumTaxPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTaxPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"peggedTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"designator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"designator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"permitNonceUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exBypasser\",\"type\":\"address\"}],\"name\":\"removeBalanceBypasser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBalanceLimit\",\"type\":\"uint256\"}],\"name\":\"setBalanceLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"setTaxBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"setTaxPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferERC20Token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"transferPresigned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"transferPresignedNonceUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"parolee\",\"type\":\"address\"}],\"name\":\"unblacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Token","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://13012019d7acf79cb93fdf9104bc78668cef30ce202cfa4238133b71b9cba6a4"}]}