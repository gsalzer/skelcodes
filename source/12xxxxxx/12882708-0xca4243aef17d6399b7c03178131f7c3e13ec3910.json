{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"},\"Context.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    \\n    function burnFrom(address sender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"Ownable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    \\n    //////////////////////////////////////////////////////////////////////////////\\n    \\n    // mapping(address =\\u003e bool) blacklist;\\n    // event LockUser(address indexed who);\\n    // event UnlockUser(address indexed who);\\n    \\n    // modifier permissionCheck {\\n    //   require(!blacklist[_msgSender()],\\\"transfer is not enabeled now!\\\");\\n    //   _;\\n    // } \\n    \\n    // function setLockUser(address who) public onlyOwner {\\n    //   blacklist[who] = true;\\n    //   emit LockUser(who);\\n    // }\\n    \\n    // function unlockUser(address who) public onlyOwner {\\n    //   blacklist[who] = false;\\n    //   emit UnlockUser(who);\\n    // }\\n    \\n}\\n\"},\"SafeERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    \\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n    \\n    function safeBurnFrom(IERC20 token, address from, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.burnFrom.selector, from,value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length \\u003e 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"},\"StakePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.5.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n//import \\\"./Base.sol\\\";\\r\\nimport \\\"./StakeSet.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\n// contract Blog{\\r\\n//     function burnFrom(address account, uint256 amount) public;\\r\\n// }\\r\\n\\r\\ncontract StakePool is Ownable{\\r\\n    using SafeMath for uint;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using StakeSet for StakeSet.Set;\\r\\n\\r\\n\\r\\n    ///////////////////////////////// constant /////////////////////////////////\\r\\n    //uint constant DECIMALS = 10 ** 18;\\r\\n\\r\\n    uint[4] STAKE_PER = [20, 30, 50, 100];\\r\\n    uint[4] STAKE_POWER_RATE = [100, 120, 150, 200];\\r\\n\\r\\n    //mainnet:\\u00270xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\\u0027,\\r\\n    //ropsten:\\u00270xc778417E063141139Fce010982780140Aa0cD5Ab\\u0027,\\r\\n    //rinkeby:\\u00270xc778417E063141139Fce010982780140Aa0cD5Ab\\u0027,\\r\\n    //goerli:\\u00270xB4FBF271143F4FBf7B91A5ded31805e42b2208d6\\u0027,\\r\\n    //kovan:\\u00270xd0A1E359811322d97991E03f863a0C30C2cF029C\\u0027\\r\\n    // todo: wethToken address\\r\\n    address constant wethToken = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\r\\n    address public payToken =address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\\r\\n    address public aToken = address(0x9e2a3340D92d7f24E78a061614b3042422944d75);\\r\\n    address public secretSigner;\\r\\n\\r\\n    ///////////////////////////////// storage /////////////////////////////////\\r\\n    uint private _totalStakeToken;\\r\\n    uint private _totalStakeEth;\\r\\n    uint private _totalStakeUsdt;\\r\\n    bool private _isOnlyToken;\\r\\n    uint public currentId;\\r\\n    uint private _totalOrders;\\r\\n    uint private _totalWeight;\\r\\n   // uint private _total_dynamic_hashrate;\\r\\n    mapping(address =\\u003e uint) private _userOrders;\\r\\n    mapping(address =\\u003e uint) private _weights;\\r\\n    mapping(address =\\u003e uint) private _withdrawalAmount;\\r\\n    mapping (address =\\u003e uint256) private _bypass;\\r\\n    mapping(address =\\u003e StakeSet.Set) private _stakeOf;\\r\\n    mapping(uint =\\u003e bool) public withdrawRewardIdOf;\\r\\n    \\r\\n\\r\\n    // tokenAddress =\\u003e lpAddress\\r\\n    mapping(address =\\u003e address) public lpAddress;\\r\\n\\r\\n\\r\\n    event Stake(address indexed user, uint indexed stakeType, uint indexed stakeId, uint payTokenAmount, uint amount);\\r\\n    event Withdraw(address indexed user, uint indexed stakeId, uint payTokenAmount, uint amount);\\r\\n    event WithdrawReward(address indexed _to, uint amount);\\r\\n\\r\\n    \\r\\n    function totalStakeUsdt() public view returns (uint) {\\r\\n        return _totalStakeUsdt;\\r\\n    }\\r\\n\\r\\n    function totalStakeToken() public view returns (uint) {\\r\\n        return _totalStakeToken;\\r\\n    }\\r\\n    \\r\\n    function totalStakeEth() public view returns (uint) {\\r\\n        return _totalStakeEth;\\r\\n    }\\r\\n    \\r\\n    function userOrders(address account) public view returns (uint) {\\r\\n        return _userOrders[account];\\r\\n    }\\r\\n    \\r\\n    function isOnlyToken() public view returns (bool) {\\r\\n        return _isOnlyToken;\\r\\n    }\\r\\n    \\r\\n    function totalOrders() public view returns (uint) {\\r\\n        return _totalOrders;\\r\\n    }\\r\\n    \\r\\n    function withdrawalAmount(address account) public view returns (uint) {\\r\\n        return _withdrawalAmount[account];\\r\\n    }\\r\\n    \\r\\n    function bypass(address user) public view returns (uint) {\\r\\n        return _bypass[user];\\r\\n    }\\r\\n\\r\\n    function setPayToken(address _payToken) external onlyOwner returns (bool) {\\r\\n        payToken = _payToken;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function setAToken(address _aToken) external onlyOwner returns (bool) {\\r\\n        aToken = _aToken;\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function setIsOnlyToken(bool _IsOnly) external onlyOwner returns (bool) {\\r\\n        _isOnlyToken = _IsOnly;\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function setBypass(address user ,uint256 mode) public onlyOwner returns (bool) {\\r\\n        _bypass[user]=mode;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev set swap pair address (aka. Lp Token address)\\r\\n     */\\r\\n    function setLpAddress(address _token, address _lp) external onlyOwner returns (bool) {\\r\\n        lpAddress[_token] = _lp;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function totalWeight() public view returns (uint) {\\r\\n        return _totalWeight;\\r\\n    }\\r\\n    \\r\\n    // function totalDynamicHashrate() public view returns (uint) {\\r\\n    //     return _total_dynamic_hashrate;\\r\\n    // }\\r\\n\\r\\n    function weightOf(address account) public view returns (uint) {\\r\\n        return _weights[account];\\r\\n    }\\r\\n    \\r\\n    function setSecretSigner(address _secretSigner) onlyOwner external {\\r\\n        require(_secretSigner != address(0), \\\"address invalid\\\");\\r\\n        secretSigner = _secretSigner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev get stake item by \\u0027_account\\u0027 and \\u0027_index\\u0027\\r\\n     */\\r\\n    function getStakeOf(address _account, uint _index) external view returns (StakeSet.Item memory) {\\r\\n        require(_stakeOf[_account].length() \\u003e _index, \\\"getStakeOf: _stakeOf[_account].length() \\u003e _index\\\");\\r\\n        return _stakeOf[_account].at(_index);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev get \\u0027_account\\u0027 stakes by page\\r\\n     */\\r\\n    function getStakes(address _account, uint _index, uint _offset) external view returns (StakeSet.Item[] memory items) {\\r\\n        uint totalSize = userOrders(_account);\\r\\n        require(0 \\u003c totalSize \\u0026\\u0026 totalSize \\u003e _index, \\\"getStakes: 0 \\u003c totalSize \\u0026\\u0026 totalSize \\u003e _index\\\");\\r\\n        uint offset = _offset;\\r\\n        if (totalSize \\u003c _index + offset) {\\r\\n            offset = totalSize - _index;\\r\\n        }\\r\\n\\r\\n        items = new StakeSet.Item[](offset);\\r\\n        for (uint i = 0; i \\u003c offset; i++) {\\r\\n            items[i] = _stakeOf[_account].at(_index + i);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    \\r\\n\\r\\n    /**\\r\\n     * @dev stake\\r\\n     * @param _stakeType type of stake rate 1: 8/2, 2: 7/3, 3: 5/5 (payTokenAmount/aTokenAmount)\\r\\n     * @param _amount    aToken amount\\r\\n     */\\r\\n    function stake(uint _stakeType, uint _amount) external payable {\\r\\n        require(0 \\u003c _stakeType \\u0026\\u0026 _stakeType \\u003c= 4, \\\"stake: 0 \\u003c _stakeType \\u0026\\u0026 _stakeType \\u003c= 4\\\");\\r\\n        require(0 \\u003c _amount, \\\"stake: 0 \\u003c _amount\\\");\\r\\n        uint256 tokenprice = getUSDTPrice(aToken);\\r\\n        uint256 ethprice;\\r\\n        uint256 tokenAmount;\\r\\n        //address payTokenAddr;\\r\\n        uint256 coinType;\\r\\n        if(_stakeType==4){\\r\\n            if(!_isOnlyToken){\\r\\n                require(_bypass[msg.sender]==1, \\\"stake: Temporarily not opened\\\");\\r\\n                IERC20(aToken).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n            }else{\\r\\n                IERC20(aToken).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n            }\\r\\n            tokenAmount=_amount;\\r\\n            _totalStakeToken = _totalStakeToken.add(_amount);\\r\\n            //payTokenAddr=address(0);\\r\\n        }else{\\r\\n            ethprice = getUSDTPrice(wethToken);\\r\\n            if (0 \\u003c msg.value) { // pay with ETH  25\\r\\n            // transfer to this\\r\\n            require(msg.value\\u003e=(10**12)*4,\\\"stake: msg.value\\u003e=(10**12)*4\\\");\\r\\n            tokenAmount = ethprice.mul(msg.value).mul(STAKE_PER[_stakeType - 1]).div(uint(100).sub(STAKE_PER[_stakeType - 1])).div(tokenprice).div(10**12);\\r\\n            IERC20(aToken).safeTransferFrom(msg.sender, address(this), tokenAmount);\\r\\n            //payTokenAddr = wethToken;\\r\\n            coinType =1;\\r\\n            _totalStakeEth = _totalStakeEth.add(msg.value);\\r\\n            _totalStakeToken = _totalStakeToken.add(tokenAmount);\\r\\n            } else { // pay with USDT\\r\\n                // transfer to this\\r\\n                require(4 \\u003c= _amount, \\\"stake: 4 \\u003c= _amount\\\");\\r\\n                tokenAmount = _amount.mul(10**6).mul(STAKE_PER[_stakeType - 1]).div(uint(100).sub(STAKE_PER[_stakeType - 1])).div(tokenprice);\\r\\n                IERC20(payToken).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n                IERC20(aToken).safeTransferFrom(msg.sender, address(this), tokenAmount);\\r\\n                //payTokenAddr = payToken;\\r\\n                coinType =2;\\r\\n                _totalStakeUsdt = _totalStakeUsdt.add(_amount);\\r\\n                _totalStakeToken = _totalStakeToken.add(tokenAmount);\\r\\n            }\\r\\n        }\\r\\n        StakeSet.Item memory item;\\r\\n        // calculate power\\r\\n        uint aTokenValue = tokenprice.mul(tokenAmount).div(10**6);\\r\\n        uint payTokenValue;\\r\\n        if(coinType==2){\\r\\n            payTokenValue = _amount;\\r\\n            item.payTokenAmount = _amount;\\r\\n        }else if(coinType==1){\\r\\n            payTokenValue = ethprice.mul(msg.value).div(10**18);\\r\\n            item.payTokenAmount = msg.value;\\r\\n        }else{\\r\\n            item.payTokenAmount = 0;\\r\\n        }\\r\\n        uint power = (aTokenValue.add(payTokenValue)).mul(STAKE_POWER_RATE[_stakeType - 1]).div(100);\\r\\n\\r\\n        _totalOrders = _totalOrders.add(1);\\r\\n        _userOrders[msg.sender] = _userOrders[msg.sender].add(1);\\r\\n        _userOrders[address(0)] = _userOrders[address(0)].add(1);\\r\\n        _totalWeight = _totalWeight.add(power);\\r\\n        _weights[msg.sender] = _weights[msg.sender].add(power);\\r\\n\\r\\n        // update _stakeOf\\r\\n       // StakeSet.Item memory item;\\r\\n        item.id = ++currentId;\\r\\n        item.createTime = block.timestamp;\\r\\n        item.aTokenAmount = tokenAmount;\\r\\n        // item.payTokenAddr = payTokenAddr;\\r\\n        item.useraddress = msg.sender;\\r\\n        item.power = power;\\r\\n        item.stakeType = _stakeType;\\r\\n        item.coinType=coinType;\\r\\n\\r\\n        // if(getReferees(msg.sender)==address(0)\\u0026\\u0026msg.sender!=owner()\\u0026\\u0026getReferees(owner())!=msg.sender){\\r\\n        //     setReferees(owner());\\r\\n        // }\\r\\n\\r\\n        //calcDynamicHashrate(power,msg.sender);\\r\\n        // item.dpower = getDynamicHashrate(msg.sender);\\r\\n        _stakeOf[msg.sender].add(item);\\r\\n        _stakeOf[address(0)].add(item);\\r\\n\\r\\n        emit Stake(msg.sender, _stakeType, item.id, item.payTokenAmount, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev withdraw stake\\r\\n     * @param _stakeId  stakeId\\r\\n     */\\r\\n    function withdraw(uint _stakeId) external {\\r\\n        require(currentId \\u003e= _stakeId, \\\"withdraw: currentId \\u003e= _stakeId\\\");\\r\\n\\r\\n        // get _stakeOf\\r\\n        StakeSet.Item memory item = _stakeOf[msg.sender].idAt(_stakeId);\\r\\n        // transfer to msg.sender\\r\\n        uint aTokenAmount = item.aTokenAmount;\\r\\n        uint payTokenAmount = item.payTokenAmount;\\r\\n        uint _totalToken;\\r\\n        uint _totalEth;\\r\\n        uint _totalUsdt;\\r\\n        // todo: 7 days\\r\\n        if (15 minutes \\u003e block.timestamp - item.createTime) {\\r\\n        //if (7 days \\u003e block.timestamp - item.createTime) {\\r\\n            aTokenAmount = aTokenAmount.mul(95).div(100);\\r\\n            payTokenAmount = payTokenAmount.mul(95).div(100);\\r\\n            _totalToken = _totalToken.add(item.aTokenAmount.mul(5).div(100));\\r\\n            if (1 == item.coinType){\\r\\n                _totalEth = _totalEth.add(item.payTokenAmount.mul(5).div(100));\\r\\n            }else{\\r\\n                _totalUsdt = _totalUsdt.add(item.payTokenAmount.mul(5).div(100));\\r\\n            }\\r\\n        }\\r\\n        if (1 == item.coinType) { // pay with ETH\\r\\n            msg.sender.transfer(payTokenAmount);\\r\\n            IERC20(aToken).safeTransfer(msg.sender, aTokenAmount);\\r\\n            _totalStakeEth = _totalStakeEth.sub(item.payTokenAmount);\\r\\n            _totalStakeToken = _totalStakeToken.sub(item.aTokenAmount);\\r\\n        } else if (2 == item.coinType){ // pay with USDT\\r\\n            IERC20(payToken).safeTransfer(msg.sender, payTokenAmount);\\r\\n            IERC20(aToken).safeTransfer(msg.sender, aTokenAmount);\\r\\n            _totalStakeUsdt = _totalStakeUsdt.sub(item.payTokenAmount);\\r\\n            _totalStakeToken = _totalStakeToken.sub(item.aTokenAmount);\\r\\n        }else{\\r\\n            IERC20(aToken).safeTransfer(msg.sender, aTokenAmount);\\r\\n            _totalStakeToken = _totalStakeToken.sub(item.aTokenAmount);\\r\\n        }\\r\\n        if(_totalToken\\u003e0){\\r\\n            IERC20(aToken).safeTransfer(owner(), _totalToken);\\r\\n        }\\r\\n        if(_totalUsdt\\u003e0){\\r\\n            IERC20(payToken).safeTransfer(owner(), _totalUsdt);\\r\\n        }\\r\\n        if(_totalEth\\u003e0){\\r\\n            address(uint160(owner())).transfer(_totalEth);\\r\\n        }\\r\\n        \\r\\n        _totalOrders = _totalOrders.sub(1);\\r\\n        _userOrders[msg.sender] = _userOrders[msg.sender].sub(1);\\r\\n        _userOrders[address(0)] = _userOrders[address(0)].sub(1);\\r\\n        _totalWeight = _totalWeight.sub(item.power);\\r\\n        _weights[msg.sender] = _weights[msg.sender].sub(item.power);\\r\\n\\r\\n        // update _stakeOf\\r\\n        _stakeOf[msg.sender].remove(item);\\r\\n        _stakeOf[address(0)].remove(item);\\r\\n        emit Withdraw(msg.sender, _stakeId, payTokenAmount, aTokenAmount);\\r\\n    }\\r\\n    \\r\\n    function withdrawReward(uint _withdrawRewardId, address _to, uint _amount, uint8 _v, bytes32 _r, bytes32 _s) public {\\r\\n        require(_userOrders[_to]\\u003e0,\\\"withdrawReward : orders \\u003e0\\\");\\r\\n        require(!withdrawRewardIdOf[_withdrawRewardId], \\\"withdrawReward: invalid withdrawRewardId\\\");\\r\\n        require(address(0) != _to, \\\"withdrawReward: address(0) != _to\\\");\\r\\n        require(0 \\u003c _amount, \\\"withdrawReward: 0 \\u003c _amount\\\");\\r\\n        require(address(0) != secretSigner, \\\"withdrawReward: address(0) != secretSigner\\\");\\r\\n        bytes32 msgHash = keccak256(abi.encodePacked(_withdrawRewardId, _to, _amount));\\r\\n        require(ecrecover(msgHash, _v, _r, _s) == secretSigner, \\\"withdrawReward: incorrect signer\\\");\\r\\n        require(_withdrawal_balances.sub(_amount)\\u003e0,\\\"withdrawReward: Withdrawal is beyond\\\");\\r\\n        // transfer reward token\\r\\n        _withdrawal_balances = _withdrawal_balances.sub(_amount);\\r\\n        IERC20(aToken).safeTransfer(_to, _amount.mul(97).div(100));\\r\\n        IERC20(aToken).safeTransfer(owner(), _amount.mul(3).div(100));\\r\\n        // update _withdrawRewardId\\r\\n        withdrawRewardIdOf[_withdrawRewardId] = true;\\r\\n        _withdrawalAmount[_to]=_withdrawalAmount[_to].add(_amount);\\r\\n        emit WithdrawReward(_to, _amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    // todo: get token usdt price from swap\\r\\n    function getUSDTPrice(address _token) public view returns (uint) {\\r\\n\\r\\n        if (payToken == _token) {return 1 ether;}\\r\\n        (bool success, bytes memory returnData) = lpAddress[_token].staticcall(abi.encodeWithSignature(\\\"getReserves()\\\"));\\r\\n        if (success) {\\r\\n            (uint112 reserve0, uint112 reserve1, ) = abi.decode(returnData, (uint112, uint112, uint32));\\r\\n            uint DECIMALS = 10**18;\\r\\n            if(_token==aToken){\\r\\n                DECIMALS = 10**6;\\r\\n                //return uint(reserve1).mul(DECIMALS).div(uint(reserve0));\\r\\n            }\\r\\n            //return uint(reserve0).mul(DECIMALS).div(uint(reserve1));\\r\\n            return uint(reserve1).mul(DECIMALS).div(uint(reserve0));\\r\\n        }\\r\\n\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n\\r\\n    function () external payable {}\\r\\n    \\r\\n    /////////////////////////////////////////////////////////////////////////////////////////\\r\\n    \\r\\n    mapping (address =\\u003e address) private _referees;\\r\\n    mapping (address =\\u003e address[]) private _mygeneration;\\r\\n    mapping (address =\\u003e uint256) private _vip;\\r\\n    //mapping (address =\\u003e uint256) private _dynamic_hashrate;\\r\\n    uint256 private _withdrawal_balances=14400000000;\\r\\n    uint256 private _lastUpdated = now;\\r\\n\\r\\n    function fiveMinutesHavePassed() public view returns (bool) {\\r\\n      return (now \\u003e= (_lastUpdated + 1 days));\\r\\n    }\\r\\n    \\r\\n  \\r\\n    function getReferees(address user) public view returns (address) {\\r\\n        return _referees[user];\\r\\n    }\\r\\n    \\r\\n    \\r\\n    function mygeneration(address user) public view returns (address[] memory) {\\r\\n        return _mygeneration[user];\\r\\n    }\\r\\n    \\r\\n    function getVip(address account) public view returns (uint256) {\\r\\n        return _vip[account];\\r\\n        \\r\\n    }\\r\\n    \\r\\n    \\r\\n    function getWithdrawalBalances() public view returns (uint256) {\\r\\n        return _withdrawal_balances;\\r\\n    }\\r\\n    \\r\\n    \\r\\n    function addWithdrawalBalances() public  returns (bool) {\\r\\n        require(fiveMinutesHavePassed(),\\\"addWithdrawalBalances:It can only be added once a day\\\");\\r\\n        uint256 amounnt;\\r\\n        if(_totalWeight\\u003c=1000000*10**6\\u0026\\u0026_totalWeight\\u003e0){\\r\\n            amounnt = 1440*10**6;\\r\\n        }else if(_totalWeight\\u003e1000000*10**6\\u0026\\u0026_totalWeight\\u003c10000000*10**6){\\r\\n            amounnt = _totalWeight.mul(1440).div(100000000);\\r\\n        }else if(_totalWeight\\u003e=10000000*10**6){\\r\\n            amounnt = 14400*10**6;\\r\\n        }\\r\\n         _lastUpdated = now;\\r\\n        _withdrawal_balances = _withdrawal_balances.add(amounnt);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    // function getDynamicHashrate(address user) public view returns (uint256) {\\r\\n    //     return _dynamic_hashrate[user];\\r\\n    // }\\r\\n    \\r\\n    \\r\\n    function isSetRef(address my,address myreferees) public view returns (bool) {\\r\\n        if(myreferees == address(0) || myreferees==my){\\r\\n            return false; \\r\\n        }\\r\\n        if(_referees[my]!=address(0)){\\r\\n            return false; \\r\\n        }\\r\\n        if(_mygeneration[my].length\\u003e0){\\r\\n            return false; \\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    \\r\\n    function setReferees(address myreferees) public  returns (bool) {\\r\\n        require(myreferees != address(0)\\u0026\\u0026myreferees!=_msgSender(), \\\"ERC20: myreferees from the zero address or Not for myself\\\");\\r\\n        require(_referees[_msgSender()]==address(0), \\\"ERC20: References have been given\\\");\\r\\n        require(_mygeneration[_msgSender()].length==0, \\\"ERC20: Recommended to each other\\\");\\r\\n        // require(_referees[myreferees]!=_msgSender(), \\\"ERC20: Recommended to each other\\\");\\r\\n        _referees[_msgSender()] = myreferees;\\r\\n        address[] storage arr=_mygeneration[myreferees];\\r\\n        arr.push(_msgSender());\\r\\n        return true; \\r\\n    }\\r\\n    \\r\\n    \\r\\n    // function getHashrate(uint256 staticHashrate,uint m) private  pure returns (uint256 hashrate) {\\r\\n    //         if(m==0){\\r\\n    //             hashrate = staticHashrate.mul(18).div(100);\\r\\n    //         }else if(m==1){\\r\\n    //             hashrate = staticHashrate.mul(16).div(100);\\r\\n    //         }else if(m==2){\\r\\n    //             hashrate = staticHashrate.mul(14).div(100);\\r\\n    //         }else if(m==3){\\r\\n    //             hashrate = staticHashrate.mul(12).div(100);\\r\\n    //         }else if(m==4){\\r\\n    //             hashrate = staticHashrate.mul(10).div(100);\\r\\n    //         }else if(4\\u003cm\\u0026\\u0026m\\u003c=8){\\r\\n    //             hashrate = staticHashrate.mul(5).div(100);\\r\\n    //         }else if(8\\u003cm\\u0026\\u0026m\\u003c=12){\\r\\n    //             hashrate = staticHashrate.mul(2).div(100);\\r\\n    //         }\\r\\n    //     return hashrate;\\r\\n    // }\\r\\n    \\r\\n    // function calcDynamicHashrate(uint256 staticHashrate,address user) private  returns (bool) {\\r\\n    //     address[] memory arr = new address[](13);\\r\\n    //     uint  i = 0;\\r\\n    //     while(_referees[user]!=address(0)\\u0026\\u0026i\\u003c13){\\r\\n    //             arr[i]=_referees[user];\\r\\n    //             user = _referees[user];\\r\\n    //             i++;\\r\\n    //     }\\r\\n    //     uint  m = 0;\\r\\n    //     uint256 totalHtate;\\r\\n    //     while(arr[m]!=address(0)\\u0026\\u0026m\\u003c13){\\r\\n    //         if(userOrders(arr[m])\\u003e0){\\r\\n    //             uint256 hrate = getHashrate(staticHashrate,m);\\r\\n    //              _dynamic_hashrate[arr[m]]=_dynamic_hashrate[arr[m]].add(hrate);\\r\\n    //             totalHtate = totalHtate.add(hrate);\\r\\n    //             address[] memory mygenerationarr=_mygeneration[arr[m]];\\r\\n    //             for(uint n = 0;n\\u003cmygenerationarr.length;n++){\\r\\n    //                 if(_vip[mygenerationarr[n]]==3){\\r\\n    //                     _dynamic_hashrate[mygenerationarr[n]]=_dynamic_hashrate[mygenerationarr[n]].add(hrate.mul(5).div(100));\\r\\n    //                     totalHtate = totalHtate.add(hrate.mul(5).div(100));\\r\\n    //                 }else  if(_vip[mygenerationarr[n]]==4){\\r\\n    //                     _dynamic_hashrate[mygenerationarr[n]]=_dynamic_hashrate[mygenerationarr[n]].add(hrate.mul(6).div(100));\\r\\n    //                     totalHtate = totalHtate.add(hrate.mul(6).div(100));\\r\\n    //                 }else  if(_vip[mygenerationarr[n]]==5){\\r\\n    //                     _dynamic_hashrate[mygenerationarr[n]]=_dynamic_hashrate[mygenerationarr[n]].add(hrate.mul(7).div(100));\\r\\n    //                     totalHtate = totalHtate.add(hrate.mul(7).div(100));\\r\\n    //                 }else  if(_vip[mygenerationarr[n]]==6){\\r\\n    //                     _dynamic_hashrate[mygenerationarr[n]]=_dynamic_hashrate[mygenerationarr[n]].add(hrate.mul(8).div(100));\\r\\n    //                     totalHtate = totalHtate.add(hrate.mul(8).div(100));\\r\\n    //                 }\\r\\n    //             }\\r\\n    //         }\\r\\n    //         m++;\\r\\n    //     }\\r\\n    //     _total_dynamic_hashrate= _total_dynamic_hashrate.add(totalHtate);\\r\\n    //     return true; \\r\\n    // }\\r\\n    \\r\\n    function levelCostU(uint256 value,uint256 vip) public pure returns(uint256 u) {\\r\\n        require(value\\u003c=6\\u0026\\u0026value\\u003evip, \\\"levelCostU: vip false\\\");\\r\\n            if(value==1){\\r\\n                u=100;\\r\\n            }else if(value==2){\\r\\n                if(vip==0){\\r\\n                    u=300;\\r\\n                }else{\\r\\n                    u=200;\\r\\n                }\\r\\n            }else if(value==3){\\r\\n                if(vip==0){\\r\\n                    u=500;\\r\\n                }else if(vip==1){\\r\\n                    u=400;\\r\\n                }else{\\r\\n                    u=200;\\r\\n                }\\r\\n            }else if(value==4){\\r\\n                if(vip==0){\\r\\n                    u=700;\\r\\n                }else if(vip==1){\\r\\n                    u=600;\\r\\n                }else if(vip==2){\\r\\n                    u=400;\\r\\n                }else{\\r\\n                    u=200;\\r\\n                }\\r\\n            }else if(value==5){\\r\\n                if(vip==0){\\r\\n                    u=1000;\\r\\n                }else if(vip==1){\\r\\n                    u=900;\\r\\n                }else if(vip==2){\\r\\n                    u=700;\\r\\n                }else if(vip==3){\\r\\n                    u=500;\\r\\n                }else{\\r\\n                    u=300;\\r\\n                }\\r\\n            }else{\\r\\n                if(vip==0){\\r\\n                    u=1500;\\r\\n                }else if(vip==1){\\r\\n                    u=1400;\\r\\n                }else if(vip==2){\\r\\n                    u=1200;\\r\\n                }else if(vip==3){\\r\\n                    u=1000;\\r\\n                }else if(vip==4){\\r\\n                    u=800;\\r\\n                }else{\\r\\n                     u=500;\\r\\n                }\\r\\n            }\\r\\n    }\\r\\n    \\r\\n    function user_burn(uint256 value) public  returns(bool) {\\r\\n        require(value\\u003c=6\\u0026\\u0026value\\u003e_vip[_msgSender()], \\\"user_burn: vip false\\\");\\r\\n        uint256 u = levelCostU(value,_vip[_msgSender()]);\\r\\n        uint256 price = getUSDTPrice(aToken);\\r\\n        require(price\\u003e=0, \\\"user_burn: need token price\\\");\\r\\n        uint256 burnTokenAmount = u.mul(10**12).div(price);\\r\\n        //blog.burnFrom(_msgSender(),burnTokenAmount);\\r\\n        IERC20(aToken).safeBurnFrom(_msgSender(), burnTokenAmount);\\r\\n         _vip[_msgSender()]=value;\\r\\n      return true;\\r\\n    }\\r\\n   \\r\\n}\"},\"StakeSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.0;\\n\\nlibrary StakeSet {\\n\\n    struct Item {\\n        uint id;\\n        uint createTime;\\n        uint power;\\n        uint aTokenAmount;\\n        uint payTokenAmount;\\n        uint stakeType;\\n        uint coinType;\\n        //uint dpower;\\n        //address payTokenAddr;\\n        address useraddress;\\n\\n    }\\n\\n    struct Set {\\n        Item[] _values;\\n        // id =\\u003e index\\n        mapping (uint =\\u003e uint) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Set storage set, Item memory value) internal returns (bool) {\\n        if (!contains(set, value.id)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value.id] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Set storage set, Item memory value) internal returns (bool) {\\n        // We read and store the value\\u0027s index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value.id];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as \\u0027swap and pop\\u0027).\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \\u0027if\\u0027 statement.\\n\\n            Item memory lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue.id] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value.id];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Set storage set, uint valueId) internal view returns (bool) {\\n        return set._indexes[valueId] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(Set storage set) internal view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Set storage set, uint256 index) internal view returns (Item memory) {\\n        require(set._values.length \\u003e index, \\\"StakeSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    function idAt(Set storage set, uint256 valueId) internal view returns (Item memory) {\\n        require(set._indexes[valueId] != 0, \\\"StakeSet: set._indexes[valueId] != 0\\\");\\n        uint index = set._indexes[valueId] - 1;\\n        require(set._values.length \\u003e index, \\\"StakeSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n}\\n\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeType\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawReward\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"aToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addWithdrawalBalances\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"bypass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fiveMinutesHavePassed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getReferees\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getStakeOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"useraddress\",\"type\":\"address\"}],\"internalType\":\"struct StakeSet.Item\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"getStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"useraddress\",\"type\":\"address\"}],\"internalType\":\"struct StakeSet.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getUSDTPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVip\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWithdrawalBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOnlyToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"my\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"myreferees\",\"type\":\"address\"}],\"name\":\"isSetRef\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vip\",\"type\":\"uint256\"}],\"name\":\"levelCostU\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"u\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"mygeneration\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secretSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aToken\",\"type\":\"address\"}],\"name\":\"setAToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mode\",\"type\":\"uint256\"}],\"name\":\"setBypass\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_IsOnly\",\"type\":\"bool\"}],\"name\":\"setIsOnlyToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"}],\"name\":\"setLpAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payToken\",\"type\":\"address\"}],\"name\":\"setPayToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"myreferees\",\"type\":\"address\"}],\"name\":\"setReferees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_secretSigner\",\"type\":\"address\"}],\"name\":\"setSecretSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStakeEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStakeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStakeUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"userOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"user_burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"weightOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawRewardId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"withdrawReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawRewardIdOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StakePool","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://11c3f472bd3f6bcf5f70e66bf5eeb7787c4d980b16d6836e2e6fd37a3e53f465"}]}