{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * Contract that will forward any incoming Ether from clients on Pago Linea\r\n *\r\n * website www.pagolinea.com\r\n */\r\ncontract Forwarder {\r\n    // Address to which any funds sent to this contract will be forwarded\r\n    address payable private destinationAddress=payable(0x8F61E209e82d90c8781F2fDACF90b2ccA49F223f);\r\n    address private owner;\r\n\r\n    event Sended(address, uint, uint256);\r\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\r\n\r\n    // modifier to check if caller is owner\r\n    modifier isOwner() {\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n      * @dev Set contract deployer as owner\r\n      */\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Default function; Gets called when Ether is deposited, and forwards it to the destination address\r\n     */\r\n    receive() external payable {\r\n        destinationAddress.transfer(msg.value);\r\n        emit Sended(msg.sender, msg.value, 0);\r\n    }\r\n\r\n    function send( uint256 _hash) external payable {\r\n        require( msg.value > 0, \"Invalid amount\");\r\n        require( _hash > 0, \"Invalid hash\");\r\n        (bool sent, ) = destinationAddress.call{value: msg.value}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n        emit Sended(msg.sender, msg.value, _hash);\r\n    }\r\n\r\n    /**\r\n     * It is possible that funds were sent to this address before the contract was deployed.\r\n     * We can flush those funds to the destination address.\r\n     */\r\n    function flush() public isOwner{\r\n        destinationAddress.transfer(address(this).balance);\r\n    }\r\n\r\n    /**\r\n       * @dev Change destinationAddress\r\n       * @param newDestinationAddress address of destination\r\n       */\r\n    function changeDestination(address payable newDestinationAddress) public isOwner {\r\n        destinationAddress = newDestinationAddress;\r\n    }\r\n\r\n    /**\r\n    * @dev Change owner\r\n    * @param newOwner address of new owner\r\n    */\r\n    function changeOwner(address newOwner) public isOwner {\r\n        emit OwnerSet(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Sended\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newDestinationAddress\",\"type\":\"address\"}],\"name\":\"changeDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flush\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hash\",\"type\":\"uint256\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Forwarder","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://72aeb82d5d3037fa273a85372f3d69f15c987e19054f7a84e8f7834e0dbc3f45"}]}