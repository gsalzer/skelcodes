{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.0;\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { \r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\nstruct GuarantorInfo {\r\n    string name;\r\n    string telegramId;\r\n    string description;\r\n    uint256 collateral;\r\n    uint256 processingGuaranteeAmount;\r\n}\r\n\r\nabstract contract Guarantor is Pausable {\r\n    address public admin;\r\n\r\n    enum GuarantorState {notLocked, locked}\r\n\r\n    uint256 public guarantorIndex;\r\n    address[] public guarantors;\r\n    mapping(address => uint256) public guarantorIndexOfOwner;\r\n    mapping(uint256 => GuarantorState) public guarantorStates;\r\n    mapping(uint256 => GuarantorInfo) public guarantorInfos;\r\n\r\n    constructor() {\r\n        admin = msg.sender;\r\n        guarantors.push(address(0));\r\n        guarantorIndex = 1;\r\n    }\r\n\r\n    modifier onlyAdmin(){\r\n        require(msg.sender == admin, \"only admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyGuarantorSelf(uint256 _guarantorIndex){\r\n        require(guarantors[_guarantorIndex] == msg.sender, \"msg.sender should be the guarantor of guarantorIndex\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyNotProcessingGuaranteeAmount(uint256 _guarantorIndex){\r\n        require(guarantorInfos[_guarantorIndex].processingGuaranteeAmount == 0, \"Only not processing guarantee amount\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyNotRegistered(){\r\n        require(guarantorIndexOfOwner[msg.sender] == 0, \"The address of msg.sender is already registered\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyLocked(uint256 _guarantorIndex){\r\n        require(guarantorStates[_guarantorIndex] == GuarantorState.locked, \"The state of guarantor is not locked\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyNotLocked(uint256 _guarantorIndex){\r\n        require(guarantorStates[_guarantorIndex] == GuarantorState.notLocked, \"The state of guarantor is locked\");\r\n        _;\r\n    }\r\n\r\n\r\n    event GuarantorRegister(uint256 indexed guarantorIndex, address guarantor, uint256 timestamp);\r\n    event GuarantorDeposit(uint256 indexed guarantorIndex, address from, uint256 amount, uint256 timestamp);\r\n    event GuarantorWithdraw(uint256 indexed guarantorIndex, address to, uint256 amount, uint256 timestamp);\r\n\r\n    // admin \r\n    event LockGuarantor(uint256 indexed guarantorIndex, uint256 timestamp);\r\n    event UnlockGuarantor(uint256 indexed guarantorIndex, uint256 timestamp);\r\n    event InterveneCollateral(uint256 indexed guarantorIndex, address to, uint256 amount, uint256 timestamp);\r\n\r\n\r\n    function _processDeposit(uint256 amount) internal virtual;\r\n    function _processWithdraw(address to, uint256 amount) internal virtual;\r\n\r\n    function guarantorRegister(uint256 _collateralAmount, string calldata _name, string calldata _telegramId, string calldata _description) external payable whenNotPaused onlyNotRegistered {\r\n        require(_collateralAmount > 0, \"Registering amount should not be zero\");\r\n\r\n        _processDeposit(_collateralAmount);\r\n\r\n        guarantors.push(msg.sender);\r\n        guarantorIndexOfOwner[msg.sender] = guarantorIndex;\r\n        guarantorStates[guarantorIndex] = GuarantorState.notLocked;\r\n        \r\n        GuarantorInfo memory newGuarantorInfo = GuarantorInfo({\r\n            name: _name, \r\n            telegramId: _telegramId, \r\n            description: _description,\r\n            collateral: _collateralAmount,\r\n            processingGuaranteeAmount: 0\r\n        });\r\n\r\n        guarantorInfos[guarantorIndex] = newGuarantorInfo;\r\n\r\n        emit GuarantorRegister(guarantorIndex, msg.sender, block.timestamp);\r\n        emit GuarantorDeposit(guarantorIndex, msg.sender, _collateralAmount, block.timestamp);\r\n\r\n        guarantorIndex++;\r\n    }\r\n\r\n    function updateInfo(uint256 _guarantorIndex, string calldata _name, string calldata _telegramId, string calldata _description) external whenNotPaused onlyGuarantorSelf(_guarantorIndex) onlyNotLocked(_guarantorIndex) {\r\n        guarantorInfos[_guarantorIndex].name = _name;\r\n        guarantorInfos[_guarantorIndex].telegramId = _telegramId;\r\n        guarantorInfos[_guarantorIndex].description = _description;\r\n    }\r\n\r\n    function guarantorDeposit(uint256 _guarantorIndex, uint256 _amount) external payable whenNotPaused {\r\n        _processDeposit(_amount);\r\n        \r\n        guarantorInfos[_guarantorIndex].collateral += _amount;\r\n\r\n        emit GuarantorDeposit(_guarantorIndex, msg.sender, _amount, block.timestamp);\r\n    }\r\n\r\n    function guarantorWithdraw(\r\n        uint256 _guarantorIndex, \r\n        address _to, \r\n        uint256 _amount\r\n    ) external whenNotPaused onlyGuarantorSelf(_guarantorIndex) onlyNotProcessingGuaranteeAmount(_guarantorIndex) onlyNotLocked(_guarantorIndex) {\r\n        require(guarantorInfos[_guarantorIndex].collateral >= _amount, \"Withdraw amount should be less than guarantor's fund.\");\r\n\r\n        _processWithdraw(_to, _amount);\r\n        \r\n        guarantorInfos[_guarantorIndex].collateral -= _amount;\r\n\r\n        emit GuarantorWithdraw(_guarantorIndex, _to, _amount, block.timestamp);\r\n    }\r\n\r\n\r\n    function lockGuarantor(uint256 _guarantorIndex) external onlyAdmin {\r\n        guarantorStates[_guarantorIndex] = GuarantorState.locked;\r\n\r\n        emit LockGuarantor(_guarantorIndex, block.timestamp);\r\n    }\r\n\r\n    function unlockGuarantor(uint256 _guarantorIndex) external onlyAdmin {\r\n        guarantorStates[_guarantorIndex] = GuarantorState.notLocked;\r\n\r\n        emit UnlockGuarantor(_guarantorIndex, block.timestamp);\r\n    }\r\n\r\n    function collateralIntervene(uint256 _guarantorIndex, address _to, uint256 _amount) external onlyAdmin onlyLocked(_guarantorIndex) {\r\n        require(guarantorInfos[_guarantorIndex].collateral >= _amount, \"Withdraw amount should be less than guarantor's fund.\");\r\n\r\n        _processWithdraw(_to, _amount);\r\n        \r\n        guarantorInfos[_guarantorIndex].collateral -= _amount;\r\n\r\n        emit InterveneCollateral(_guarantorIndex, _to, _amount, block.timestamp);\r\n    }\r\n\r\n    function changeAdmin(address nextAdmin) external onlyAdmin {\r\n        admin = nextAdmin;\r\n    }\r\n    \r\n    function pause() external onlyAdmin {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyAdmin {\r\n        _unpause();\r\n    }\r\n}\r\n\r\nstruct GuaranteeInfo {\r\n    uint256 guarantorIndex;\r\n    address demandA;\r\n    address demandB;\r\n    uint256 fund;\r\n    uint32 feePercentLimit;\r\n    string content;\r\n}\r\n\r\nabstract contract Guarantee is Guarantor {\r\n    uint256 public guaranteeIndex;\r\n    GuaranteeInfo[] public guarantees;\r\n\r\n    constructor() Guarantor() {\r\n        guaranteeIndex = 1;\r\n        guarantees.push(GuaranteeInfo({\r\n            guarantorIndex: 0, \r\n            demandA: address(0),\r\n            demandB: address(0),\r\n            fund: 0,\r\n            feePercentLimit: 0,\r\n            content: \"\"\r\n        }));\r\n    }\r\n    \r\n    event GuaranteeRegister(uint256 indexed guaranteeIndex, uint256 guarantorIndex, address demandA, address demandB, uint32 feePercentLimit, string content, uint256 timestamp);\r\n    event GuaranteeDeposit(uint256 indexed guaranteeIndex, address from, uint256 amount, uint256 timestamp);\r\n    event GuaranteeWithdraw(uint256 indexed guaranteeIndex, uint256 amountToA, uint256 amountToB, uint32 feePercent, string info, uint256 timestamp);\r\n    event InterveneGuarantee(uint256 indexed guaranteeIndex, uint256 amountToA, uint256 amountToB, uint32 feePercent, string info, uint256 timestamp);\r\n\r\n    function guaranteeRegister(\r\n        uint256 _guarantorIndex, \r\n        address _demandA,\r\n        address _demandB, \r\n        uint32 _feePercentLimit, \r\n        string calldata _content\r\n    ) external whenNotPaused onlyGuarantorSelf(_guarantorIndex) onlyNotLocked(_guarantorIndex) {\r\n        require(_feePercentLimit > 0 && _feePercentLimit < 100, \"Invalid fee percent limit\");\r\n\r\n        guarantees.push(GuaranteeInfo({\r\n            guarantorIndex: _guarantorIndex, \r\n            demandA: _demandA,\r\n            demandB: _demandB,\r\n            fund: 0,\r\n            feePercentLimit: _feePercentLimit,\r\n            content: _content\r\n        }));\r\n\r\n        emit GuaranteeRegister(guaranteeIndex, _guarantorIndex, _demandA, _demandB, _feePercentLimit, _content, block.timestamp);\r\n\r\n        guaranteeIndex++;\r\n    }\r\n\r\n    function guaranteeDeposit(uint256 _guaranteeIndex, uint256 _amount) external payable whenNotPaused {\r\n        require(_guaranteeIndex < guaranteeIndex, \"Invalid guarantee index\");\r\n\r\n        guarantees[_guaranteeIndex].fund += _amount;\r\n        guarantorInfos[guarantees[_guaranteeIndex].guarantorIndex].processingGuaranteeAmount += _amount;\r\n\r\n        _processDeposit(_amount);\r\n        \r\n        emit GuaranteeDeposit(_guaranteeIndex, msg.sender, _amount, block.timestamp);\r\n    }\r\n\r\n    function guaranteeWithdraw(\r\n        uint256 _guaranteeIndex,\r\n        uint256 _guarantorIndex,\r\n        uint256 _amountToA,\r\n        uint256 _amountToB,\r\n        uint32 _feePercent,\r\n        string calldata _info\r\n    ) external whenNotPaused onlyGuarantorSelf(_guarantorIndex) onlyNotLocked(_guarantorIndex) {\r\n        require(guarantees[_guaranteeIndex].guarantorIndex == _guarantorIndex, \"Invalid guarantor index\");\r\n        require(_amountToA + _amountToB <= guarantees[_guaranteeIndex].fund, \"Insufficient fund\");\r\n        require(_feePercent <= guarantees[_guaranteeIndex].feePercentLimit, \"Invalid fee percent\");\r\n\r\n\r\n        uint256 processingAmount = _amountToA + _amountToB;\r\n        guarantees[_guaranteeIndex].fund -= processingAmount;\r\n\r\n        uint256 feeA = _amountToA  * uint256(_feePercent) / 100;\r\n        uint256 feeB = _amountToB  * uint256(_feePercent) / 100;   \r\n\r\n        guarantorInfos[_guarantorIndex].processingGuaranteeAmount -= processingAmount;\r\n\r\n        _processWithdraw(guarantees[_guaranteeIndex].demandA, _amountToA - feeA);\r\n        _processWithdraw(guarantees[_guaranteeIndex].demandB, _amountToB - feeB);\r\n        _processWithdraw(msg.sender, feeA + feeB);\r\n\r\n        emit GuaranteeWithdraw(_guaranteeIndex, _amountToA, _amountToB, _feePercent, _info, block.timestamp);\r\n    }\r\n\r\n    function interveneGuarantee(\r\n        uint256 _guaranteeIndex,\r\n        uint256 _amountToA,\r\n        uint256 _amountToB,\r\n        uint32 _feePercent,\r\n        string calldata _info\r\n    ) external onlyAdmin {\r\n        require(_guaranteeIndex < guaranteeIndex, \"Invalid guarantee index\");\r\n        require(_amountToA + _amountToB <= guarantees[_guaranteeIndex].fund, \"Insufficient fund\");\r\n        require(_feePercent <= guarantees[_guaranteeIndex].feePercentLimit, \"Invalid fee percent\");\r\n\r\n        uint256 processingAmount = _amountToA + _amountToB;\r\n        guarantees[_guaranteeIndex].fund -= processingAmount;\r\n\r\n        uint256 feeA = _amountToA  * uint256(_feePercent) / 100;\r\n        uint256 feeB = _amountToB  * uint256(_feePercent) / 100;\r\n        \r\n        guarantorInfos[guarantees[_guaranteeIndex].guarantorIndex].processingGuaranteeAmount -= processingAmount;\r\n\r\n        _processWithdraw(guarantees[_guaranteeIndex].demandA, _amountToA - feeA);\r\n        _processWithdraw(guarantees[_guaranteeIndex].demandB, _amountToB - feeB);\r\n        _processWithdraw(msg.sender, feeA + feeB);\r\n\r\n        emit InterveneGuarantee(_guaranteeIndex, _amountToA, _amountToB, _feePercent, _info, block.timestamp);\r\n    }\r\n\r\n    function guaranteeIndexesOfDemand(address _demand) external view returns(uint256[] memory guaranteeIndexes) {\r\n        uint256 guaranteeCount = 0;\r\n        for(uint256 _guaranteeIndex = 1; _guaranteeIndex < guaranteeIndex; _guaranteeIndex++) {\r\n            if(guarantees[_guaranteeIndex].demandA == _demand || guarantees[_guaranteeIndex].demandB == _demand){\r\n                guaranteeCount++;\r\n            }\r\n        }\r\n        uint256[] memory result = new uint256[](guaranteeCount);\r\n        guaranteeCount = 0;\r\n        for(uint256 _guaranteeIndex = 1; _guaranteeIndex < guaranteeIndex; _guaranteeIndex++) {\r\n            if(guarantees[_guaranteeIndex].demandA == _demand || guarantees[_guaranteeIndex].demandB == _demand){\r\n                result[guaranteeCount++] = _guaranteeIndex;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function guaranteeIndexesOfGuarantor(uint256 _guarantorIndex) external view returns(uint256[] memory guaranteeIndexes) {\r\n        uint256 guaranteeCount = 0;\r\n        for(uint256 _guaranteeIndex = 1; _guaranteeIndex < guaranteeIndex; _guaranteeIndex++) {\r\n            if(guarantees[_guaranteeIndex].guarantorIndex == _guarantorIndex){\r\n                guaranteeCount++;\r\n            }\r\n        }\r\n        uint256[] memory result = new uint256[](guaranteeCount);\r\n        guaranteeCount = 0;\r\n        for(uint256 _guaranteeIndex = 1; _guaranteeIndex < guaranteeIndex; _guaranteeIndex++) {\r\n            if(guarantees[_guaranteeIndex].guarantorIndex == _guarantorIndex){\r\n                result[guaranteeCount++] = _guaranteeIndex;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\ncontract USDTGuarantee is Guarantee {\r\n    using SafeERC20 for IERC20;\r\n    IERC20 public token;\r\n\r\n    constructor() Guarantee() {\r\n        token = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n    }\r\n\r\n    function _processDeposit(uint256 amount) internal override {\r\n        require(msg.value == 0, \"ETH value is supposed to be 0 for ERC20 instance\");\r\n        token.safeTransferFrom(msg.sender, address(this), amount);\r\n    }\r\n\r\n    function _processWithdraw(address to, uint256 amount) internal override {\r\n        token.safeTransfer(to, amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"guaranteeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"GuaranteeDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"guaranteeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"guarantorIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"demandA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"demandB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"feePercentLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"GuaranteeRegister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"guaranteeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"feePercent\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"GuaranteeWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"guarantorIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"GuarantorDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"guarantorIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"guarantor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"GuarantorRegister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"guarantorIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"GuarantorWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"guarantorIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"InterveneCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"guaranteeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"feePercent\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"InterveneGuarantee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"guarantorIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LockGuarantor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"guarantorIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UnlockGuarantor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nextAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_guarantorIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"collateralIntervene\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_guaranteeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"guaranteeDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guaranteeIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_demand\",\"type\":\"address\"}],\"name\":\"guaranteeIndexesOfDemand\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"guaranteeIndexes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_guarantorIndex\",\"type\":\"uint256\"}],\"name\":\"guaranteeIndexesOfGuarantor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"guaranteeIndexes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_guarantorIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_demandA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_demandB\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_feePercentLimit\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"_content\",\"type\":\"string\"}],\"name\":\"guaranteeRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_guaranteeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_guarantorIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToB\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_feePercent\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"_info\",\"type\":\"string\"}],\"name\":\"guaranteeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"guarantees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"guarantorIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"demandA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"demandB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fund\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"feePercentLimit\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_guarantorIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"guarantorDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guarantorIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"guarantorIndexOfOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"guarantorInfos\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"telegramId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"processingGuaranteeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_telegramId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"guarantorRegister\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"guarantorStates\",\"outputs\":[{\"internalType\":\"enum Guarantor.GuarantorState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_guarantorIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"guarantorWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"guarantors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_guaranteeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToB\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_feePercent\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"_info\",\"type\":\"string\"}],\"name\":\"interveneGuarantee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_guarantorIndex\",\"type\":\"uint256\"}],\"name\":\"lockGuarantor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_guarantorIndex\",\"type\":\"uint256\"}],\"name\":\"unlockGuarantor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_guarantorIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_telegramId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"updateInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"USDTGuarantee","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d3a9ce8b20c4b9495ec25a2aaca481f2e815a065202e3c8534746a1f93eaec9b"}]}