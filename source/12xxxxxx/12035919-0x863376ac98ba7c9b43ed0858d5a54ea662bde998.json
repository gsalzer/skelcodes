{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.6;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IMasks {\r\n    function ownerOf(uint256 tokenId) external returns (address);\r\n}\r\n\r\n\r\ncontract CosmoSwapBonus {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private constant CosmoTokenRewardAmount = 1e22;\r\n    address public CosmoToken;\r\n    address public CosmoMasks;\r\n    address public CosmoMasksLimitedPack;\r\n    string public url = \"https://CosmoSwap.space/\";\r\n\r\n    mapping(address => mapping(uint256 => bool)) private _tokenRewarded;\r\n\r\n    event Rewarded(address indexed tokenOwner, uint256 indexed tokenId, uint256 indexed amount);\r\n\r\n\r\n    constructor(address cosmoToken, address cosmoMasks, address cosmoMasksLimitedPack) public {\r\n        CosmoToken = cosmoToken;\r\n        CosmoMasks = cosmoMasks;\r\n        CosmoMasksLimitedPack = cosmoMasksLimitedPack;\r\n    }\r\n\r\n    function isRewarded(address tokenAdress, uint256 tokenId) public view returns (bool) {\r\n        return _tokenRewarded[tokenAdress][tokenId];\r\n    }\r\n\r\n    function isTokenAddressRewarded(address tokenAdress) public view returns (bool) {\r\n        if (tokenAdress == CosmoMasks)\r\n            return true;\r\n        if (tokenAdress == CosmoMasksLimitedPack)\r\n            return true;\r\n        return false;\r\n    }\r\n\r\n    function claim(address tokenAdress, uint256 tokenId) public returns (uint256) {\r\n        address tokenOwner = _msgSender();\r\n        require(isTokenAddressRewarded(tokenAdress), \"Unknown tokenAddress\");\r\n        require(isRewarded(tokenAdress, tokenId) == false, \"The reward has already been claimed\");\r\n        require(IMasks(tokenAdress).ownerOf(tokenId) == tokenOwner, \"Only the owner can claim the reward\");\r\n\r\n        emit Rewarded(tokenOwner, tokenId, CosmoTokenRewardAmount);\r\n        _sendReward(tokenOwner, CosmoTokenRewardAmount);\r\n        _tokenRewarded[tokenAdress][tokenId] = true;\r\n        return CosmoTokenRewardAmount;\r\n    }\r\n\r\n    function claimMany(address tokenAdress, uint256[] memory tokenIds) public returns (uint256) {\r\n        address tokenOwner = _msgSender();\r\n        require(isTokenAddressRewarded(tokenAdress), \"Unknown tokenAddress\");\r\n\r\n        uint256 totalClaimed = 0;\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            // Duplicate token index check\r\n            for (uint256 j = i + 1; j < tokenIds.length; j++) {\r\n                require(tokenIds[i] != tokenIds[j], \"Duplicate tokenId\");\r\n            }\r\n\r\n            uint256 tokenId = tokenIds[i];\r\n            require(IMasks(tokenAdress).ownerOf(tokenId) == tokenOwner, \"Only the token owner can claim the reward\");\r\n\r\n            if (isRewarded(tokenAdress, tokenId) == false) {\r\n                totalClaimed = totalClaimed.add(CosmoTokenRewardAmount);\r\n                _tokenRewarded[tokenAdress][tokenId] = true;\r\n                emit Rewarded(tokenOwner, tokenId, CosmoTokenRewardAmount);\r\n            }\r\n        }\r\n\r\n        require(totalClaimed != 0, \"No rewards\");\r\n        _sendReward(tokenOwner, totalClaimed);\r\n        return totalClaimed;\r\n    }\r\n\r\n    function _sendReward(address tokenOwner, uint256 totalClaimed) internal {\r\n        require(IERC20(CosmoToken).transfer(tokenOwner, totalClaimed), \"Reward transfer failed\");\r\n    }\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cosmoToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cosmoMasks\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cosmoMasksLimitedPack\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Rewarded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CosmoMasks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CosmoMasksLimitedPack\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CosmoToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAdress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAdress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimMany\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAdress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isRewarded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAdress\",\"type\":\"address\"}],\"name\":\"isTokenAddressRewarded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"url\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CosmoSwapBonus","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"00000000000000000000000027cd7375478f189bdcf55616b088be03d9c4339c0000000000000000000000000580ae26963230bfbd2a775ff0afa937fd1577740000000000000000000000005256187d635300d82f0e66d2f41e5926ba880377","EVMVersion":"istanbul","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e26486f2453affc12f0f546ca5a4df7b3f0ebfa230e30ae73c4d8e741846328a"}]}