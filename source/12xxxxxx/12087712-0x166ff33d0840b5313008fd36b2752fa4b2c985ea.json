{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/auction/HermezAuctionProtocol.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.6.12;\\nimport \\\"../math/SafeMathUint128.sol\\\";\\nimport \\\"../interfaces/IHEZToken.sol\\\";\\nimport \\\"../interfaces/IHermezAuctionProtocol.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\n\\n/**\\n * @dev Hermez will run an auction to incentivise efficiency in coordinators,\\n * meaning that they need to be very effective and include as many transactions\\n * as they can in the slots in order to compensate for their bidding costs, gas\\n * costs and operations costs.The general porpouse of this smartcontract is to\\n * define the rules to coordinate this auction where the bids will be placed\\n * only in HEZ utility token.\\n */\\ncontract HermezAuctionProtocol is\\n    Initializable,\\n    ReentrancyGuardUpgradeable,\\n    IHermezAuctionProtocol\\n{\\n    using SafeMath128 for uint128;\\n\\n    struct Coordinator {\\n        address forger; // Address allowed by the bidder to forge a batch\\n        string coordinatorURL;\\n    }\\n\\n    // The closedMinBid is the minimum bidding with which it has been closed a slot and may be\\n    // higher than the bidAmount. This means that the funds must be returned to whoever has bid\\n    struct SlotState {\\n        address bidder;\\n        bool fulfilled;\\n        bool forgerCommitment;\\n        uint128 bidAmount; // Since the total supply of HEZ will be less than 100M, with 128 bits it is enough to\\n        uint128 closedMinBid; // store the bidAmount and closed minBid. bidAmount is the bidding for an specific slot.\\n    }\\n\\n    // bytes4 private constant _PERMIT_SIGNATURE =\\n    //    bytes4(keccak256(bytes(\\\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\\\")));\\n    bytes4 private constant _PERMIT_SIGNATURE = 0xd505accf;\\n\\n    // Blocks per slot\\n    uint8 public constant BLOCKS_PER_SLOT = 40;\\n    // Minimum bid when no one has bid yet\\n    uint128 public constant INITIAL_MINIMAL_BIDDING = 1000000 * (1e18);\\n\\n    // Hermez Network Token with which the bids will be made\\n    IHEZToken public tokenHEZ;\\n    // HermezRollup smartcontract address\\n    address public hermezRollup;\\n    // Hermez Governance smartcontract address who controls some parameters and collects HEZ fee\\n    address public governanceAddress;\\n    // Boot Donation Address\\n    address private _donationAddress;\\n    // Boot Coordinator Address\\n    address private _bootCoordinator;\\n    // boot coordinator URL\\n    string public bootCoordinatorURL;\\n    // The minimum bid value in a series of 6 slots\\n    uint128[6] private _defaultSlotSetBid;\\n    // First block where the first slot begins\\n    uint128 public genesisBlock;\\n    // Number of closed slots after the current slot ( 2 Slots = 2 * 40 Blocks = 20 min )\\n    uint16 private _closedAuctionSlots;\\n    // Total number of open slots which you can bid ( 30 days = 4320 slots )\\n    uint16 private _openAuctionSlots;\\n    // How the HEZ tokens deposited by the slot winner are distributed ( Burn: 40.00% - Donation: 40.00% - HGT: 20.00% )\\n    uint16[3] private _allocationRatio; // Two decimal precision\\n    // Minimum outbid (percentage, two decimal precision) over the previous one to consider it valid\\n    uint16 private _outbidding; // Two decimal precision\\n    // Number of blocks after the beginning of a slot after which any coordinator can forge if the winner has not forged\\n    // any batch in that slot\\n    uint8 private _slotDeadline;\\n\\n    // Mapping to control slot state\\n    mapping(uint128 => SlotState) public slots;\\n    // Mapping to control balances pending to claim\\n    mapping(address => uint128) public pendingBalances;\\n    // Mapping to register all the coordinators. The address used for the mapping is the bidder address\\n    mapping(address => Coordinator) public coordinators;\\n\\n    event NewBid(\\n        uint128 indexed slot,\\n        uint128 bidAmount,\\n        address indexed bidder\\n    );\\n    event NewSlotDeadline(uint8 newSlotDeadline);\\n    event NewClosedAuctionSlots(uint16 newClosedAuctionSlots);\\n    event NewOutbidding(uint16 newOutbidding);\\n    event NewDonationAddress(address indexed newDonationAddress);\\n    event NewBootCoordinator(\\n        address indexed newBootCoordinator,\\n        string newBootCoordinatorURL\\n    );\\n    event NewOpenAuctionSlots(uint16 newOpenAuctionSlots);\\n    event NewAllocationRatio(uint16[3] newAllocationRatio);\\n    event SetCoordinator(\\n        address indexed bidder,\\n        address indexed forger,\\n        string coordinatorURL\\n    );\\n    event NewForgeAllocated(\\n        address indexed bidder,\\n        address indexed forger,\\n        uint128 indexed slotToForge,\\n        uint128 burnAmount,\\n        uint128 donationAmount,\\n        uint128 governanceAmount\\n    );\\n    event NewDefaultSlotSetBid(uint128 slotSet, uint128 newInitialMinBid);\\n    event NewForge(address indexed forger, uint128 indexed slotToForge);\\n    event HEZClaimed(address indexed owner, uint128 amount);\\n\\n    // Event emitted when the contract is initialized\\n    event InitializeHermezAuctionProtocolEvent(\\n        address donationAddress,\\n        address bootCoordinatorAddress,\\n        string bootCoordinatorURL,\\n        uint16 outbidding,\\n        uint8 slotDeadline,\\n        uint16 closedAuctionSlots,\\n        uint16 openAuctionSlots,\\n        uint16[3] allocationRatio\\n    );\\n\\n    modifier onlyGovernance() {\\n        require(\\n            governanceAddress == msg.sender,\\n            \\\"HermezAuctionProtocol::onlyGovernance: ONLY_GOVERNANCE\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializer function (equivalent to the constructor). Since we use\\n     * upgradeable smartcontracts the state vars have to be initialized here.\\n     * @param token Hermez Network token with which the bids will be made\\n     * @param hermezRollupAddress address authorized to forge\\n     * @param donationAddress address that can claim donated tokens\\n     * @param _governanceAddress Hermez Governance smartcontract\\n     * @param bootCoordinatorAddress Boot Coordinator Address\\n     */\\n    function hermezAuctionProtocolInitializer(\\n        address token,\\n        uint128 genesis,\\n        address hermezRollupAddress,\\n        address _governanceAddress,\\n        address donationAddress,\\n        address bootCoordinatorAddress,\\n        string memory _bootCoordinatorURL\\n    ) public initializer {\\n        __ReentrancyGuard_init_unchained();\\n\\n        require(\\n            hermezRollupAddress != address(0),\\n            \\\"HermezAuctionProtocol::hermezAuctionProtocolInitializer ADDRESS_0_NOT_VALID\\\"\\n        );\\n\\n        _outbidding = 1000;\\n        _slotDeadline = 20;\\n        _closedAuctionSlots = 2;\\n        _openAuctionSlots = 4320;\\n        _allocationRatio = [4000, 4000, 2000];\\n        _defaultSlotSetBid = [\\n            INITIAL_MINIMAL_BIDDING,\\n            INITIAL_MINIMAL_BIDDING,\\n            INITIAL_MINIMAL_BIDDING,\\n            INITIAL_MINIMAL_BIDDING,\\n            INITIAL_MINIMAL_BIDDING,\\n            INITIAL_MINIMAL_BIDDING\\n        ];\\n\\n        require(\\n            genesis >= block.number,\\n            \\\"HermezAuctionProtocol::hermezAuctionProtocolInitializer GENESIS_BELOW_MINIMAL\\\"\\n        );\\n\\n        tokenHEZ = IHEZToken(token);\\n\\n        genesisBlock = genesis;\\n        hermezRollup = hermezRollupAddress;\\n        governanceAddress = _governanceAddress;\\n        _donationAddress = donationAddress;\\n        _bootCoordinator = bootCoordinatorAddress;\\n        bootCoordinatorURL = _bootCoordinatorURL;\\n\\n        emit InitializeHermezAuctionProtocolEvent(\\n            donationAddress,\\n            bootCoordinatorAddress,\\n            _bootCoordinatorURL,\\n            _outbidding,\\n            _slotDeadline,\\n            _closedAuctionSlots,\\n            _openAuctionSlots,\\n            _allocationRatio\\n        );\\n    }\\n\\n    /**\\n     * @notice Getter of the current `_slotDeadline`\\n     * @return The `_slotDeadline` value\\n     */\\n    function getSlotDeadline() external override view returns (uint8) {\\n        return _slotDeadline;\\n    }\\n\\n    /**\\n     * @notice Allows to change the `_slotDeadline` if it's called by the owner\\n     * @param newDeadline new `_slotDeadline`\\n     * Events: `NewSlotDeadline`\\n     */\\n    function setSlotDeadline(uint8 newDeadline)\\n        external\\n        override\\n        onlyGovernance\\n    {\\n        require(\\n            newDeadline <= BLOCKS_PER_SLOT,\\n            \\\"HermezAuctionProtocol::setSlotDeadline: GREATER_THAN_BLOCKS_PER_SLOT\\\"\\n        );\\n        _slotDeadline = newDeadline;\\n        emit NewSlotDeadline(_slotDeadline);\\n    }\\n\\n    /**\\n     * @notice Getter of the current `_openAuctionSlots`\\n     * @return The `_openAuctionSlots` value\\n     */\\n    function getOpenAuctionSlots() external override view returns (uint16) {\\n        return _openAuctionSlots;\\n    }\\n\\n    /**\\n     * @notice Allows to change the `_openAuctionSlots` if it's called by the owner\\n     * @dev Max newOpenAuctionSlots = 65536 slots\\n     * @param newOpenAuctionSlots new `_openAuctionSlots`\\n     * Events: `NewOpenAuctionSlots`\\n     * Note: the governance could set this parameter equal to `ClosedAuctionSlots`, this means that it can prevent bids\\n     * from being made and that only the boot coordinator can forge\\n     */\\n    function setOpenAuctionSlots(uint16 newOpenAuctionSlots)\\n        external\\n        override\\n        onlyGovernance\\n    {\\n        _openAuctionSlots = newOpenAuctionSlots;\\n        emit NewOpenAuctionSlots(_openAuctionSlots);\\n    }\\n\\n    /**\\n     * @notice Getter of the current `_closedAuctionSlots`\\n     * @return The `_closedAuctionSlots` value\\n     */\\n    function getClosedAuctionSlots() external override view returns (uint16) {\\n        return _closedAuctionSlots;\\n    }\\n\\n    /**\\n     * @notice Allows to change the `_closedAuctionSlots` if it's called by the owner\\n     * @dev Max newClosedAuctionSlots = 65536 slots\\n     * @param newClosedAuctionSlots new `_closedAuctionSlots`\\n     * Events: `NewClosedAuctionSlots`\\n     * Note: the governance could set this parameter equal to `OpenAuctionSlots`, this means that it can prevent bids\\n     * from being made and that only the boot coordinator can forge\\n     */\\n    function setClosedAuctionSlots(uint16 newClosedAuctionSlots)\\n        external\\n        override\\n        onlyGovernance\\n    {\\n        _closedAuctionSlots = newClosedAuctionSlots;\\n        emit NewClosedAuctionSlots(_closedAuctionSlots);\\n    }\\n\\n    /**\\n     * @notice Getter of the current `_outbidding`\\n     * @return The `_outbidding` value\\n     */\\n    function getOutbidding() external override view returns (uint16) {\\n        return _outbidding;\\n    }\\n\\n    /**\\n     * @notice Allows to change the `_outbidding` if it's called by the owner\\n     * @dev newOutbidding between 0.01% and 100.00%\\n     * @param newOutbidding new `_outbidding`\\n     * Events: `NewOutbidding`\\n     */\\n    function setOutbidding(uint16 newOutbidding)\\n        external\\n        override\\n        onlyGovernance\\n    {\\n        require(\\n            newOutbidding > 1 && newOutbidding < 10000,\\n            \\\"HermezAuctionProtocol::setOutbidding: OUTBIDDING_NOT_VALID\\\"\\n        );\\n        _outbidding = newOutbidding;\\n        emit NewOutbidding(_outbidding);\\n    }\\n\\n    /**\\n     * @notice Getter of the current `_allocationRatio`\\n     * @return The `_allocationRatio` array\\n     */\\n    function getAllocationRatio()\\n        external\\n        override\\n        view\\n        returns (uint16[3] memory)\\n    {\\n        return _allocationRatio;\\n    }\\n\\n    /**\\n     * @notice Allows to change the `_allocationRatio` array if it's called by the owner\\n     * @param newAllocationRatio new `_allocationRatio` uint8[3] array\\n     * Events: `NewAllocationRatio`\\n     */\\n    function setAllocationRatio(uint16[3] memory newAllocationRatio)\\n        external\\n        override\\n        onlyGovernance\\n    {\\n        require(\\n            newAllocationRatio[0] <= 10000 &&\\n                newAllocationRatio[1] <= 10000 &&\\n                newAllocationRatio[2] <= 10000 &&\\n                newAllocationRatio[0] +\\n                    newAllocationRatio[1] +\\n                    newAllocationRatio[2] ==\\n                10000,\\n            \\\"HermezAuctionProtocol::setAllocationRatio: ALLOCATION_RATIO_NOT_VALID\\\"\\n        );\\n        _allocationRatio = newAllocationRatio;\\n        emit NewAllocationRatio(_allocationRatio);\\n    }\\n\\n    /**\\n     * @notice Getter of the current `_donationAddress`\\n     * @return The `_donationAddress`\\n     */\\n    function getDonationAddress() external override view returns (address) {\\n        return _donationAddress;\\n    }\\n\\n    /**\\n     * @notice Allows to change the `_donationAddress` if it's called by the owner\\n     * @param newDonationAddress new `_donationAddress`\\n     * Events: `NewDonationAddress`\\n     */\\n    function setDonationAddress(address newDonationAddress)\\n        external\\n        override\\n        onlyGovernance\\n    {\\n        require(\\n            newDonationAddress != address(0),\\n            \\\"HermezAuctionProtocol::setDonationAddress: NOT_VALID_ADDRESS\\\"\\n        );\\n        _donationAddress = newDonationAddress;\\n        emit NewDonationAddress(_donationAddress);\\n    }\\n\\n    /**\\n     * @notice Getter of the current `_bootCoordinator`\\n     * @return The `_bootCoordinator`\\n     */\\n    function getBootCoordinator() external override view returns (address) {\\n        return _bootCoordinator;\\n    }\\n\\n    /**\\n     * @notice Allows to change the `_bootCoordinator` if it's called by the owner\\n     * @param newBootCoordinator new `_bootCoordinator` uint8[3] array\\n     * Events: `NewBootCoordinator`\\n     */\\n    function setBootCoordinator(\\n        address newBootCoordinator,\\n        string memory newBootCoordinatorURL\\n    ) external override onlyGovernance {\\n        _bootCoordinator = newBootCoordinator;\\n        bootCoordinatorURL = newBootCoordinatorURL;\\n        emit NewBootCoordinator(_bootCoordinator, newBootCoordinatorURL);\\n    }\\n\\n    /**\\n     * @notice Returns the minimum default bid for an slotSet\\n     * @param slotSet to obtain the minimum default bid\\n     * @return the minimum default bid for an slotSet\\n     */\\n    function getDefaultSlotSetBid(uint8 slotSet) public view returns (uint128) {\\n        return _defaultSlotSetBid[slotSet];\\n    }\\n\\n    /**\\n     * @notice Allows to change the change the min bid for an slotSet if it's called by the owner.\\n     * @dev If an slotSet has the value of 0 it's considered decentralized, so the minbid cannot be modified\\n     * @param slotSet the slotSet to update\\n     * @param newInitialMinBid the minBid\\n     * Events: `NewDefaultSlotSetBid`\\n     */\\n    function changeDefaultSlotSetBid(uint128 slotSet, uint128 newInitialMinBid)\\n        external\\n        override\\n        onlyGovernance\\n    {\\n        require(\\n            slotSet < _defaultSlotSetBid.length,\\n            \\\"HermezAuctionProtocol::changeDefaultSlotSetBid: NOT_VALID_SLOT_SET\\\"\\n        );\\n        require(\\n            _defaultSlotSetBid[slotSet] != 0,\\n            \\\"HermezAuctionProtocol::changeDefaultSlotSetBid: SLOT_DECENTRALIZED\\\"\\n        );\\n\\n        uint128 current = getCurrentSlotNumber();\\n        // This prevents closed bids from being modified\\n        for (uint128 i = current; i <= current + _closedAuctionSlots; i++) {\\n            // Save the minbid in case it has not been previously set\\n            if (slots[i].closedMinBid == 0) {\\n                slots[i].closedMinBid = _defaultSlotSetBid[getSlotSet(i)];\\n            }\\n        }\\n        _defaultSlotSetBid[slotSet] = newInitialMinBid;\\n        emit NewDefaultSlotSetBid(slotSet, newInitialMinBid);\\n    }\\n\\n    /**\\n     * @notice Allows to register a new coordinator\\n     * @dev The `msg.sender` will be considered the `bidder`, who can change the forger address and the url\\n     * @param forger the address allowed to forger batches\\n     * @param coordinatorURL endopoint for this coordinator\\n     * Events: `NewCoordinator`\\n     */\\n    function setCoordinator(address forger, string memory coordinatorURL)\\n        external\\n        override\\n    {\\n        require(\\n            keccak256(abi.encodePacked(coordinatorURL)) !=\\n                keccak256(abi.encodePacked(\\\"\\\")),\\n            \\\"HermezAuctionProtocol::setCoordinator: NOT_VALID_URL\\\"\\n        );\\n        coordinators[msg.sender].forger = forger;\\n        coordinators[msg.sender].coordinatorURL = coordinatorURL;\\n        emit SetCoordinator(msg.sender, forger, coordinatorURL);\\n    }\\n\\n    /**\\n     * @notice Returns the current slot number\\n     * @return slotNumber an uint128 with the current slot\\n     */\\n    function getCurrentSlotNumber() public view returns (uint128) {\\n        return getSlotNumber(uint128(block.number));\\n    }\\n\\n    /**\\n     * @notice Returns the slot number of a given block\\n     * @param blockNumber from which to calculate the slot\\n     * @return slotNumber an uint128 with the slot calculated\\n     */\\n    function getSlotNumber(uint128 blockNumber) public view returns (uint128) {\\n        return\\n            (blockNumber >= genesisBlock)\\n                ? ((blockNumber - genesisBlock) / BLOCKS_PER_SLOT)\\n                : uint128(0);\\n    }\\n\\n    /**\\n     * @notice Returns an slotSet given an slot\\n     * @param slot from which to calculate the slotSet\\n     * @return the slotSet of the slot\\n     */\\n    function getSlotSet(uint128 slot) public view returns (uint128) {\\n        return slot.mod(uint128(_defaultSlotSetBid.length));\\n    }\\n\\n    /**\\n     * @notice gets the minimum bid that someone has to bid to win the slot for a given slot\\n     * @dev it will revert in case of trying to obtain the minimum bid for a closed slot\\n     * @param slot from which to get the minimum bid\\n     * @return the minimum amount to bid\\n     */\\n    function getMinBidBySlot(uint128 slot) public view returns (uint128) {\\n        require(\\n            slot > (getCurrentSlotNumber() + _closedAuctionSlots),\\n            \\\"HermezAuctionProtocol::getMinBidBySlot: AUCTION_CLOSED\\\"\\n        );\\n        uint128 slotSet = getSlotSet(slot);\\n        // If the bidAmount for a slot is 0 it means that it has not yet been bid, so the midBid will be the minimum\\n        // bid for the slot time plus the outbidding set, otherwise it will be the bidAmount plus the outbidding\\n        return\\n            (slots[slot].bidAmount == 0)\\n                ? _defaultSlotSetBid[slotSet].add(\\n                    _defaultSlotSetBid[slotSet].mul(_outbidding).div(\\n                        uint128(10000) // two decimal precision\\n                    )\\n                )\\n                : slots[slot].bidAmount.add(\\n                    slots[slot].bidAmount.mul(_outbidding).div(uint128(10000)) // two decimal precision\\n                );\\n    }\\n\\n    /**\\n     * @notice Function to process a single bid\\n     * @dev If the bytes calldata permit parameter is empty the smart contract assume that it has enough allowance to\\n     * make the transferFrom. In case you want to use permit, you need to send the data of the permit call in bytes\\n     * @param amount the amount of tokens that have been sent\\n     * @param slot the slot for which the caller is bidding\\n     * @param bidAmount the amount of the bidding\\n     */\\n    function processBid(\\n        uint128 amount,\\n        uint128 slot,\\n        uint128 bidAmount,\\n        bytes calldata permit\\n    ) external override {\\n        // To avoid possible mistakes we don't allow anyone to bid without setting a forger\\n        require(\\n            coordinators[msg.sender].forger != address(0),\\n            \\\"HermezAuctionProtocol::processBid: COORDINATOR_NOT_REGISTERED\\\"\\n        );\\n        require(\\n            slot > (getCurrentSlotNumber() + _closedAuctionSlots),\\n            \\\"HermezAuctionProtocol::processBid: AUCTION_CLOSED\\\"\\n        );\\n        require(\\n            bidAmount >= getMinBidBySlot(slot),\\n            \\\"HermezAuctionProtocol::processBid: BELOW_MINIMUM\\\"\\n        );\\n\\n        require(\\n            slot <=\\n                (getCurrentSlotNumber() +\\n                    _closedAuctionSlots +\\n                    _openAuctionSlots),\\n            \\\"HermezAuctionProtocol::processBid: AUCTION_NOT_OPEN\\\"\\n        );\\n\\n        if (permit.length != 0) {\\n            _permit(amount, permit);\\n        }\\n\\n        require(\\n            tokenHEZ.transferFrom(msg.sender, address(this), amount),\\n            \\\"HermezAuctionProtocol::processBid: TOKEN_TRANSFER_FAILED\\\"\\n        );\\n        pendingBalances[msg.sender] = pendingBalances[msg.sender].add(amount);\\n\\n        require(\\n            pendingBalances[msg.sender] >= bidAmount,\\n            \\\"HermezAuctionProtocol::processBid: NOT_ENOUGH_BALANCE\\\"\\n        );\\n        _doBid(slot, bidAmount, msg.sender);\\n    }\\n\\n    /**\\n     * @notice function to process a multi bid\\n     * @dev If the bytes calldata permit parameter is empty the smart contract assume that it has enough allowance to\\n     * make the transferFrom. In case you want to use permit, you need to send the data of the permit call in bytes\\n     * @param amount the amount of tokens that have been sent\\n     * @param startingSlot the first slot to bid\\n     * @param endingSlot the last slot to bid\\n     * @param slotSets the set of slots to which the coordinator wants to bid\\n     * @param maxBid the maximum bid that is allowed\\n     * @param minBid the minimum that you want to bid\\n     */\\n    function processMultiBid(\\n        uint128 amount,\\n        uint128 startingSlot,\\n        uint128 endingSlot,\\n        bool[6] memory slotSets,\\n        uint128 maxBid,\\n        uint128 minBid,\\n        bytes calldata permit\\n    ) external override {\\n        require(\\n            startingSlot > (getCurrentSlotNumber() + _closedAuctionSlots),\\n            \\\"HermezAuctionProtocol::processMultiBid AUCTION_CLOSED\\\"\\n        );\\n        require(\\n            endingSlot <=\\n                (getCurrentSlotNumber() +\\n                    _closedAuctionSlots +\\n                    _openAuctionSlots),\\n            \\\"HermezAuctionProtocol::processMultiBid AUCTION_NOT_OPEN\\\"\\n        );\\n        require(\\n            maxBid >= minBid,\\n            \\\"HermezAuctionProtocol::processMultiBid MAXBID_GREATER_THAN_MINBID\\\"\\n        );\\n        // To avoid possible mistakes we don't allow anyone to bid without setting a forger\\n        require(\\n            coordinators[msg.sender].forger != address(0),\\n            \\\"HermezAuctionProtocol::processMultiBid COORDINATOR_NOT_REGISTERED\\\"\\n        );\\n\\n        if (permit.length != 0) {\\n            _permit(amount, permit);\\n        }\\n\\n        require(\\n            tokenHEZ.transferFrom(msg.sender, address(this), amount),\\n            \\\"HermezAuctionProtocol::processMultiBid: TOKEN_TRANSFER_FAILED\\\"\\n        );\\n        pendingBalances[msg.sender] = pendingBalances[msg.sender].add(amount);\\n\\n        uint128 bidAmount;\\n        for (uint128 slot = startingSlot; slot <= endingSlot; slot++) {\\n            uint128 minBidBySlot = getMinBidBySlot(slot);\\n            // In case that the minimum bid is below the desired minimum bid, we will use this lower limit as the bid\\n            if (minBidBySlot <= minBid) {\\n                bidAmount = minBid;\\n                // If the `minBidBySlot` is between the upper (`maxBid`) and lower limit (`minBid`) we will use\\n                // this value `minBidBySlot` as the bid\\n            } else if (minBidBySlot > minBid && minBidBySlot <= maxBid) {\\n                bidAmount = minBidBySlot;\\n                // if the `minBidBySlot` is higher than the upper limit `maxBid`, we will not bid for this slot\\n            } else {\\n                continue;\\n            }\\n\\n            // check if it is a selected slotSet\\n            if (slotSets[getSlotSet(slot)]) {\\n                require(\\n                    pendingBalances[msg.sender] >= bidAmount,\\n                    \\\"HermezAuctionProtocol::processMultiBid NOT_ENOUGH_BALANCE\\\"\\n                );\\n                _doBid(slot, bidAmount, msg.sender);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice function to call token permit function\\n     * @param _amount the quantity that is expected to be allowed\\n     * @param _permitData the raw data of the call `permit` of the token\\n     */\\n    function _permit(uint256 _amount, bytes calldata _permitData) internal {\\n        bytes4 sig = abi.decode(_permitData, (bytes4));\\n\\n        require(\\n            sig == _PERMIT_SIGNATURE,\\n            \\\"HermezAuctionProtocol::_permit: NOT_VALID_CALL\\\"\\n        );\\n        (\\n            address owner,\\n            address spender,\\n            uint256 value,\\n            uint256 deadline,\\n            uint8 v,\\n            bytes32 r,\\n            bytes32 s\\n        ) = abi.decode(\\n            _permitData[4:],\\n            (address, address, uint256, uint256, uint8, bytes32, bytes32)\\n        );\\n        require(\\n            owner == msg.sender,\\n            \\\"HermezAuctionProtocol::_permit: OWNER_NOT_EQUAL_SENDER\\\"\\n        );\\n        require(\\n            spender == address(this),\\n            \\\"HermezAuctionProtocol::_permit: SPENDER_NOT_EQUAL_THIS\\\"\\n        );\\n        require(\\n            value == _amount,\\n            \\\"HermezAuctionProtocol::_permit: WRONG_AMOUNT\\\"\\n        );\\n\\n        // we call without checking the result, in case it fails and he doesn't have enough balance\\n        // the following transferFrom should be fail. This prevents DoS attacks from using a signature\\n        // before the smartcontract call\\n        /* solhint-disable avoid-low-level-calls avoid-call-value */\\n        address(tokenHEZ).call(\\n            abi.encodeWithSelector(\\n                _PERMIT_SIGNATURE,\\n                owner,\\n                spender,\\n                value,\\n                deadline,\\n                v,\\n                r,\\n                s\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Internal function to make the bid\\n     * @dev will only be called by processBid or processMultiBid\\n     * @param slot the slot for which the caller is bidding\\n     * @param bidAmount the amount of the bidding\\n     * @param bidder the address of the bidder\\n     * Events: `NewBid`\\n     */\\n    function _doBid(\\n        uint128 slot,\\n        uint128 bidAmount,\\n        address bidder\\n    ) private {\\n        address prevBidder = slots[slot].bidder;\\n        uint128 prevBidValue = slots[slot].bidAmount;\\n        require(\\n            bidAmount > prevBidValue,\\n            \\\"HermezAuctionProtocol::_doBid: BID_MUST_BE_HIGHER\\\"\\n        );\\n\\n        pendingBalances[bidder] = pendingBalances[bidder].sub(bidAmount);\\n\\n        slots[slot].bidder = bidder;\\n        slots[slot].bidAmount = bidAmount;\\n\\n        // If there is a previous bid we must return the HEZ tokens\\n        if (prevBidder != address(0) && prevBidValue != 0) {\\n            pendingBalances[prevBidder] = pendingBalances[prevBidder].add(\\n                prevBidValue\\n            );\\n        }\\n        emit NewBid(slot, bidAmount, bidder);\\n    }\\n\\n    /**\\n     * @notice function to know if a certain address can forge into a certain block\\n     * @param forger the address of the coodirnator's forger\\n     * @param blockNumber block number to check\\n     * @return a bool true in case it can forge, false otherwise\\n     */\\n    function canForge(address forger, uint256 blockNumber)\\n        external\\n        override\\n        view\\n        returns (bool)\\n    {\\n        return _canForge(forger, blockNumber);\\n    }\\n\\n    /**\\n     * @notice function to know if a certain address can forge into a certain block\\n     * @param forger the address of the coodirnator's forger\\n     * @param blockNumber block number to check\\n     * @return a bool true in case it can forge, false otherwise\\n     */\\n    function _canForge(address forger, uint256 blockNumber)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        require(\\n            blockNumber < 2**128,\\n            \\\"HermezAuctionProtocol::canForge WRONG_BLOCKNUMBER\\\"\\n        );\\n        require(\\n            blockNumber >= genesisBlock,\\n            \\\"HermezAuctionProtocol::canForge AUCTION_NOT_STARTED\\\"\\n        );\\n\\n        uint128 slotToForge = getSlotNumber(uint128(blockNumber));\\n        // Get the relativeBlock to check if the slotDeadline has been exceeded\\n        uint128 relativeBlock = uint128(blockNumber).sub(\\n            (slotToForge.mul(BLOCKS_PER_SLOT)).add(genesisBlock)\\n        );\\n        // If the closedMinBid is 0 it means that we have to take as minBid the one that is set for this slot set,\\n        // otherwise the one that has been saved will be used\\n        uint128 minBid = (slots[slotToForge].closedMinBid == 0)\\n            ? _defaultSlotSetBid[getSlotSet(slotToForge)]\\n            : slots[slotToForge].closedMinBid;\\n\\n        // if the relative block has exceeded the slotDeadline and no batch has been forged, anyone can forge\\n        if (\\n            !slots[slotToForge].forgerCommitment &&\\n            (relativeBlock >= _slotDeadline)\\n        ) {\\n            return true;\\n            //if forger bidAmount has exceeded the minBid it can forge\\n        } else if (\\n            (coordinators[slots[slotToForge].bidder].forger == forger) &&\\n            (slots[slotToForge].bidAmount >= minBid)\\n        ) {\\n            return true;\\n            //if it's the boot coordinator and it has not been bid or the bid is below the minimum it can forge\\n        } else if (\\n            (_bootCoordinator == forger) &&\\n            ((slots[slotToForge].bidAmount < minBid) ||\\n                (slots[slotToForge].bidAmount == 0))\\n        ) {\\n            return true;\\n            // if it is not any of these three cases will not be able to forge\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @notice function to process the forging\\n     * @param forger the address of the coodirnator's forger\\n     * Events: `NewForgeAllocated` and `NewForge`\\n     */\\n    function forge(address forger) external override {\\n        require(\\n            msg.sender == hermezRollup,\\n            \\\"HermezAuctionProtocol::forge: ONLY_HERMEZ_ROLLUP\\\"\\n        );\\n        require(\\n            _canForge(forger, block.number),\\n            \\\"HermezAuctionProtocol::forge: CANNOT_FORGE\\\"\\n        );\\n        uint128 slotToForge = getCurrentSlotNumber();\\n\\n        if (!slots[slotToForge].forgerCommitment) {\\n            // Get the relativeBlock to check if the slotDeadline has been exceeded\\n            uint128 relativeBlock = uint128(block.number).sub(\\n                (slotToForge.mul(BLOCKS_PER_SLOT)).add(genesisBlock)\\n            );\\n            if (relativeBlock < _slotDeadline) {\\n                slots[slotToForge].forgerCommitment = true;\\n            }\\n        }\\n\\n        // Default values:** Burn: 40% - Donation: 40% - HGT: 20%\\n        // Allocated is used to know if we have already distributed the HEZ tokens\\n        if (!slots[slotToForge].fulfilled) {\\n            slots[slotToForge].fulfilled = true;\\n\\n            if (slots[slotToForge].bidAmount != 0) {\\n                // If the closedMinBid is 0 it means that we have to take as minBid the one that is set for this slot set,\\n                // otherwise the one that has been saved will be used\\n                uint128 minBid = (slots[slotToForge].closedMinBid == 0)\\n                    ? _defaultSlotSetBid[getSlotSet(slotToForge)]\\n                    : slots[slotToForge].closedMinBid;\\n\\n                // If the bootcoordinator is forging and there has been a previous bid that is lower than the slot min bid,\\n                // we must return the tokens to the bidder and the tokens have not been distributed\\n                if (slots[slotToForge].bidAmount < minBid) {\\n                    // We save the minBid that this block has had\\n                    pendingBalances[slots[slotToForge]\\n                        .bidder] = pendingBalances[slots[slotToForge].bidder]\\n                        .add(slots[slotToForge].bidAmount);\\n                    // In case the winner is forging we have to allocate the tokens according to the desired distribution\\n                } else {\\n                    uint128 bidAmount = slots[slotToForge].bidAmount;\\n                    // calculation of token distribution\\n\\n                    uint128 amountToBurn = bidAmount\\n                        .mul(_allocationRatio[0])\\n                        .div(uint128(10000)); // Two decimal precision\\n                    uint128 donationAmount = bidAmount\\n                        .mul(_allocationRatio[1])\\n                        .div(uint128(10000)); // Two decimal precision\\n                    uint128 governanceAmount = bidAmount\\n                        .mul(_allocationRatio[2])\\n                        .div(uint128(10000)); // Two decimal precision\\n\\n                    // Tokens to burn\\n                    require(\\n                        tokenHEZ.burn(amountToBurn),\\n                        \\\"HermezAuctionProtocol::forge: TOKEN_BURN_FAILED\\\"\\n                    );\\n\\n                    // Tokens to donate\\n                    pendingBalances[_donationAddress] = pendingBalances[_donationAddress]\\n                        .add(donationAmount);\\n                    // Tokens for the governace address\\n                    pendingBalances[governanceAddress] = pendingBalances[governanceAddress]\\n                        .add(governanceAmount);\\n\\n                    emit NewForgeAllocated(\\n                        slots[slotToForge].bidder,\\n                        forger,\\n                        slotToForge,\\n                        amountToBurn,\\n                        donationAmount,\\n                        governanceAmount\\n                    );\\n                }\\n            }\\n        }\\n        emit NewForge(forger, slotToForge);\\n    }\\n\\n    function claimPendingHEZ(uint128 slot) public {\\n        require(\\n            slot < getCurrentSlotNumber(),\\n            \\\"HermezAuctionProtocol::claimPendingHEZ: ONLY_IF_PREVIOUS_SLOT\\\"\\n        );\\n        require(\\n            !slots[slot].fulfilled,\\n            \\\"HermezAuctionProtocol::claimPendingHEZ: ONLY_IF_NOT_FULFILLED\\\"\\n        );\\n        // If the closedMinBid is 0 it means that we have to take as minBid the one that is set for this slot set,\\n        // otherwise the one that has been saved will be used\\n        uint128 minBid = (slots[slot].closedMinBid == 0)\\n            ? _defaultSlotSetBid[getSlotSet(slot)]\\n            : slots[slot].closedMinBid;\\n\\n        require(\\n            slots[slot].bidAmount < minBid,\\n            \\\"HermezAuctionProtocol::claimPendingHEZ: ONLY_IF_NOT_FULFILLED\\\"\\n        );\\n\\n        slots[slot].closedMinBid = minBid;\\n        slots[slot].fulfilled = true;\\n\\n        pendingBalances[slots[slot].bidder] = pendingBalances[slots[slot]\\n            .bidder]\\n            .add(slots[slot].bidAmount);\\n    }\\n\\n    /**\\n     * @notice function to know how much HEZ tokens are pending to be claimed for an address\\n     * @param bidder address to query\\n     * @return the total claimable HEZ by an address\\n     */\\n    function getClaimableHEZ(address bidder) public view returns (uint128) {\\n        return pendingBalances[bidder];\\n    }\\n\\n    /**\\n     * @notice distributes the tokens to msg.sender address\\n     * Events: `HEZClaimed`\\n     */\\n    function claimHEZ() public nonReentrant {\\n        uint128 pending = getClaimableHEZ(msg.sender);\\n        require(\\n            pending > 0,\\n            \\\"HermezAuctionProtocol::claimHEZ: NOT_ENOUGH_BALANCE\\\"\\n        );\\n        pendingBalances[msg.sender] = 0;\\n        require(\\n            tokenHEZ.transfer(msg.sender, pending),\\n            \\\"HermezAuctionProtocol::claimHEZ: TOKEN_TRANSFER_FAILED\\\"\\n        );\\n        emit HEZClaimed(msg.sender, pending);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/math/SafeMathUint128.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath128 {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint128 a, uint128 b) internal pure returns (uint128) {\\n        uint128 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint128 a,\\n        uint128 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint128) {\\n        require(b <= a, errorMessage);\\n        uint128 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint128 a, uint128 b) internal pure returns (uint128) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint128 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint128 a, uint128 b) internal pure returns (uint128) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint128 a,\\n        uint128 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint128) {\\n        require(b > 0, errorMessage);\\n        uint128 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint128 a, uint128 b) internal pure returns (uint128) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint128 a,\\n        uint128 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint128) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHEZToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.6.12;\\n\\ninterface IHEZToken {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function burn(uint256 value) external returns (bool);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHermezAuctionProtocol.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Hermez will run an auction to incentivise efficiency in coordinators,\\n * meaning that they need to be very effective and include as many transactions\\n * as they can in the slots in order to compensate for their bidding costs, gas\\n * costs and operations costs.The general porpouse of this smartcontract is to\\n * define the rules to coordinate this auction where the bids will be placed\\n * only in HEZ utility token.\\n */\\ninterface IHermezAuctionProtocol {\\n    /**\\n     * @notice Getter of the current `_slotDeadline`\\n     * @return The `_slotDeadline` value\\n     */\\n    function getSlotDeadline() external view returns (uint8);\\n\\n    /**\\n     * @notice Allows to change the `_slotDeadline` if it's called by the owner\\n     * @param newDeadline new `_slotDeadline`\\n     * Events: `NewSlotDeadline`\\n     */\\n    function setSlotDeadline(uint8 newDeadline) external;\\n\\n    /**\\n     * @notice Getter of the current `_openAuctionSlots`\\n     * @return The `_openAuctionSlots` value\\n     */\\n    function getOpenAuctionSlots() external view returns (uint16);\\n\\n    /**\\n     * @notice Allows to change the `_openAuctionSlots` if it's called by the owner\\n     * @dev Max newOpenAuctionSlots = 65536 slots\\n     * @param newOpenAuctionSlots new `_openAuctionSlots`\\n     * Events: `NewOpenAuctionSlots`\\n     * Note: the governance could set this parameter equal to `ClosedAuctionSlots`, this means that it can prevent bids\\n     * from being made and that only the boot coordinator can forge\\n     */\\n    function setOpenAuctionSlots(uint16 newOpenAuctionSlots) external;\\n\\n    /**\\n     * @notice Getter of the current `_closedAuctionSlots`\\n     * @return The `_closedAuctionSlots` value\\n     */\\n    function getClosedAuctionSlots() external view returns (uint16);\\n\\n    /**\\n     * @notice Allows to change the `_closedAuctionSlots` if it's called by the owner\\n     * @dev Max newClosedAuctionSlots = 65536 slots\\n     * @param newClosedAuctionSlots new `_closedAuctionSlots`\\n     * Events: `NewClosedAuctionSlots`\\n     * Note: the governance could set this parameter equal to `OpenAuctionSlots`, this means that it can prevent bids\\n     * from being made and that only the boot coordinator can forge\\n     */\\n    function setClosedAuctionSlots(uint16 newClosedAuctionSlots) external;\\n\\n    /**\\n     * @notice Getter of the current `_outbidding`\\n     * @return The `_outbidding` value\\n     */\\n    function getOutbidding() external view returns (uint16);\\n\\n    /**\\n     * @notice Allows to change the `_outbidding` if it's called by the owner\\n     * @dev newOutbidding between 0.00% and 655.36%\\n     * @param newOutbidding new `_outbidding`\\n     * Events: `NewOutbidding`\\n     */\\n    function setOutbidding(uint16 newOutbidding) external;\\n\\n    /**\\n     * @notice Getter of the current `_allocationRatio`\\n     * @return The `_allocationRatio` array\\n     */\\n    function getAllocationRatio() external view returns (uint16[3] memory);\\n\\n    /**\\n     * @notice Allows to change the `_allocationRatio` array if it's called by the owner\\n     * @param newAllocationRatio new `_allocationRatio` uint8[3] array\\n     * Events: `NewAllocationRatio`\\n     */\\n    function setAllocationRatio(uint16[3] memory newAllocationRatio) external;\\n\\n    /**\\n     * @notice Getter of the current `_donationAddress`\\n     * @return The `_donationAddress`\\n     */\\n    function getDonationAddress() external view returns (address);\\n\\n    /**\\n     * @notice Allows to change the `_donationAddress` if it's called by the owner\\n     * @param newDonationAddress new `_donationAddress`\\n     * Events: `NewDonationAddress`\\n     */\\n    function setDonationAddress(address newDonationAddress) external;\\n\\n    /**\\n     * @notice Getter of the current `_bootCoordinator`\\n     * @return The `_bootCoordinator`\\n     */\\n    function getBootCoordinator() external view returns (address);\\n\\n    /**\\n     * @notice Allows to change the `_bootCoordinator` if it's called by the owner\\n     * @param newBootCoordinator new `_bootCoordinator` uint8[3] array\\n     * Events: `NewBootCoordinator`\\n     */\\n    function setBootCoordinator(\\n        address newBootCoordinator,\\n        string memory newBootCoordinatorURL\\n    ) external;\\n\\n    /**\\n     * @notice Allows to change the change the min bid for an slotSet if it's called by the owner.\\n     * @dev If an slotSet has the value of 0 it's considered decentralized, so the minbid cannot be modified\\n     * @param slotSet the slotSet to update\\n     * @param newInitialMinBid the minBid\\n     * Events: `NewDefaultSlotSetBid`\\n     */\\n    function changeDefaultSlotSetBid(uint128 slotSet, uint128 newInitialMinBid)\\n        external;\\n\\n    /**\\n     * @notice Allows to register a new coordinator\\n     * @dev The `msg.sender` will be considered the `bidder`, who can change the forger address and the url\\n     * @param forger the address allowed to forger batches\\n     * @param coordinatorURL endopoint for this coordinator\\n     * Events: `NewCoordinator`\\n     */\\n    function setCoordinator(address forger, string memory coordinatorURL)\\n        external;\\n\\n    /**\\n     * @notice Function to process a single bid\\n     * @dev If the bytes calldata permit parameter is empty the smart contract assume that it has enough allowance to\\n     * make the transferFrom. In case you want to use permit, you need to send the data of the permit call in bytes\\n     * @param amount the amount of tokens that have been sent\\n     * @param slot the slot for which the caller is bidding\\n     * @param bidAmount the amount of the bidding\\n     */\\n    function processBid(\\n        uint128 amount,\\n        uint128 slot,\\n        uint128 bidAmount,\\n        bytes calldata permit\\n    ) external;\\n\\n    /**\\n     * @notice function to process a multi bid\\n     * @dev If the bytes calldata permit parameter is empty the smart contract assume that it has enough allowance to\\n     * make the transferFrom. In case you want to use permit, you need to send the data of the permit call in bytes\\n     * @param amount the amount of tokens that have been sent\\n     * @param startingSlot the first slot to bid\\n     * @param endingSlot the last slot to bid\\n     * @param slotSets the set of slots to which the coordinator wants to bid\\n     * @param maxBid the maximum bid that is allowed\\n     * @param minBid the minimum that you want to bid\\n     */\\n    function processMultiBid(\\n        uint128 amount,\\n        uint128 startingSlot,\\n        uint128 endingSlot,\\n        bool[6] memory slotSets,\\n        uint128 maxBid,\\n        uint128 minBid,\\n        bytes calldata permit\\n    ) external;\\n\\n    /**\\n     * @notice function to process the forging\\n     * @param forger the address of the coodirnator's forger\\n     * Events: `NewForgeAllocated` and `NewForge`\\n     */\\n    function forge(address forger) external;\\n\\n    /**\\n     * @notice function to know if a certain address can forge into a certain block\\n     * @param forger the address of the coodirnator's forger\\n     * @param blockNumber block number to check\\n     * @return a bool true in case it can forge, false otherwise\\n     */\\n    function canForge(address forger, uint256 blockNumber)\\n        external\\n        view\\n        returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"HEZClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"donationAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bootCoordinatorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"bootCoordinatorURL\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"outbidding\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"slotDeadline\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"closedAuctionSlots\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"openAuctionSlots\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16[3]\",\"name\":\"allocationRatio\",\"type\":\"uint16[3]\"}],\"name\":\"InitializeHermezAuctionProtocolEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16[3]\",\"name\":\"newAllocationRatio\",\"type\":\"uint16[3]\"}],\"name\":\"NewAllocationRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"slot\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"bidAmount\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"NewBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBootCoordinator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newBootCoordinatorURL\",\"type\":\"string\"}],\"name\":\"NewBootCoordinator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newClosedAuctionSlots\",\"type\":\"uint16\"}],\"name\":\"NewClosedAuctionSlots\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"slotSet\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"newInitialMinBid\",\"type\":\"uint128\"}],\"name\":\"NewDefaultSlotSetBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDonationAddress\",\"type\":\"address\"}],\"name\":\"NewDonationAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"forger\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"slotToForge\",\"type\":\"uint128\"}],\"name\":\"NewForge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"forger\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"slotToForge\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"burnAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"donationAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"governanceAmount\",\"type\":\"uint128\"}],\"name\":\"NewForgeAllocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newOpenAuctionSlots\",\"type\":\"uint16\"}],\"name\":\"NewOpenAuctionSlots\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newOutbidding\",\"type\":\"uint16\"}],\"name\":\"NewOutbidding\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newSlotDeadline\",\"type\":\"uint8\"}],\"name\":\"NewSlotDeadline\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"forger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"coordinatorURL\",\"type\":\"string\"}],\"name\":\"SetCoordinator\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLOCKS_PER_SLOT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIAL_MINIMAL_BIDDING\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bootCoordinatorURL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forger\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"canForge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"slotSet\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"newInitialMinBid\",\"type\":\"uint128\"}],\"name\":\"changeDefaultSlotSetBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimHEZ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"slot\",\"type\":\"uint128\"}],\"name\":\"claimPendingHEZ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"coordinators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"forger\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"coordinatorURL\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forger\",\"type\":\"address\"}],\"name\":\"forge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisBlock\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllocationRatio\",\"outputs\":[{\"internalType\":\"uint16[3]\",\"name\":\"\",\"type\":\"uint16[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBootCoordinator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"getClaimableHEZ\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClosedAuctionSlots\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentSlotNumber\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"slotSet\",\"type\":\"uint8\"}],\"name\":\"getDefaultSlotSetBid\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDonationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"slot\",\"type\":\"uint128\"}],\"name\":\"getMinBidBySlot\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOpenAuctionSlots\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOutbidding\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSlotDeadline\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"blockNumber\",\"type\":\"uint128\"}],\"name\":\"getSlotNumber\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"slot\",\"type\":\"uint128\"}],\"name\":\"getSlotSet\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"genesis\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"hermezRollupAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governanceAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"donationAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bootCoordinatorAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_bootCoordinatorURL\",\"type\":\"string\"}],\"name\":\"hermezAuctionProtocolInitializer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hermezRollup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingBalances\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"slot\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"bidAmount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"}],\"name\":\"processBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"startingSlot\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endingSlot\",\"type\":\"uint128\"},{\"internalType\":\"bool[6]\",\"name\":\"slotSets\",\"type\":\"bool[6]\"},{\"internalType\":\"uint128\",\"name\":\"maxBid\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"minBid\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"}],\"name\":\"processMultiBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[3]\",\"name\":\"newAllocationRatio\",\"type\":\"uint16[3]\"}],\"name\":\"setAllocationRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBootCoordinator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newBootCoordinatorURL\",\"type\":\"string\"}],\"name\":\"setBootCoordinator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newClosedAuctionSlots\",\"type\":\"uint16\"}],\"name\":\"setClosedAuctionSlots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forger\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"coordinatorURL\",\"type\":\"string\"}],\"name\":\"setCoordinator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDonationAddress\",\"type\":\"address\"}],\"name\":\"setDonationAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newOpenAuctionSlots\",\"type\":\"uint16\"}],\"name\":\"setOpenAuctionSlots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newOutbidding\",\"type\":\"uint16\"}],\"name\":\"setOutbidding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newDeadline\",\"type\":\"uint8\"}],\"name\":\"setSlotDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"name\":\"slots\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"forgerCommitment\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"bidAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"closedMinBid\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenHEZ\",\"outputs\":[{\"internalType\":\"contract IHEZToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"HermezAuctionProtocol","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}