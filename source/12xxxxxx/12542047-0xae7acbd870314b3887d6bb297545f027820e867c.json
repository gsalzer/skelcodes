{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PinknodeLiquidityMining.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ncontract PinknodeLiquidityMining is Ownable {\\r\\n\\r\\n\\tusing SafeMath for uint;\\r\\n\\r\\n\\t// Events\\r\\n\\tevent Deposit(uint256 _timestmap, address indexed _address, uint256 indexed _pid, uint256 _amount);\\r\\n\\tevent Withdraw(uint256 _timestamp, address indexed _address, uint256 indexed _pid, uint256 _amount);\\r\\n\\tevent EmergencyWithdraw(uint256 _timestamp, address indexed _address, uint256 indexed _pid, uint256 _amount);\\r\\n\\r\\n\\t// PNODE Token Contract & Funding Address\\r\\n\\tIERC20 public constant PNODE = IERC20(0xAF691508BA57d416f895e32a1616dA1024e882D2);\\r\\n\\taddress public fundingAddress = 0xF7897E58A72dFf79Ab8538647A62fecEf8344ffe;\\r\\n\\r\\n\\tstruct LPInfo {\\r\\n\\t\\t// Address of LP token contract\\r\\n\\t\\tIERC20 lpToken;\\r\\n\\r\\n\\t\\t// LP reward per block\\r\\n\\t\\tuint256 rewardPerBlock;\\r\\n\\r\\n\\t\\t// Last reward block\\r\\n\\t\\tuint256 lastRewardBlock;\\r\\n\\r\\n\\t\\t// Accumulated reward per share (times 1e12 to minimize rounding errors)\\r\\n\\t\\tuint256 accRewardPerShare;\\r\\n\\t}\\r\\n\\r\\n\\tstruct Staker {\\r\\n\\t\\t// Total Amount Staked\\r\\n\\t\\tuint256 amountStaked;\\r\\n\\r\\n\\t\\t// Reward Debt (pending reward = (staker.amountStaked * pool.accRewardPerShare) - staker.rewardDebt)\\r\\n\\t\\tuint256 rewardDebt;\\r\\n\\t}\\r\\n\\r\\n\\t// Liquidity Pools\\r\\n\\tLPInfo[] public liquidityPools;\\r\\n\\r\\n\\t// Info of each user that stakes LP tokens.\\r\\n\\t// poolId => address => staker\\r\\n    mapping (uint256 => mapping (address => Staker)) public stakers;\\r\\n\\r\\n    // Starting block for mining\\r\\n    uint256 public startBlock;\\r\\n\\r\\n    // End block for mining (Will be ongoing if unset/0)\\r\\n    uint256 public endBlock;\\r\\n\\r\\n\\t/**\\r\\n     * @dev Constructor\\r\\n     */\\r\\n\\r\\n\\tconstructor(uint256 _startBlock) public {\\r\\n\\t\\tstartBlock = _startBlock;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * @dev Contract Modifiers\\r\\n     */\\r\\n\\r\\n\\tfunction updateFundingAddress(address _address) public onlyOwner {\\r\\n\\t\\tfundingAddress = _address;\\r\\n\\t}\\r\\n\\r\\n\\tfunction updateStartBlock(uint256 _startBlock) public onlyOwner {\\r\\n\\t\\trequire(startBlock > block.number, \\\"Mining has started, unable to update startBlock\\\");\\r\\n\\t\\trequire(_startBlock > block.number, \\\"startBlock has to be in the future\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < liquidityPools.length; i++) {\\r\\n            LPInfo storage pool = liquidityPools[i];\\r\\n            pool.lastRewardBlock = _startBlock;\\r\\n        }\\r\\n\\r\\n\\t\\tstartBlock = _startBlock;\\r\\n\\t}\\r\\n\\r\\n\\tfunction updateEndBlock(uint256 _endBlock) public onlyOwner {\\r\\n\\t\\trequire(endBlock > block.number || endBlock == 0, \\\"Mining has ended, unable to update endBlock\\\");\\r\\n\\t\\trequire(_endBlock > block.number, \\\"endBlock has to be in the future\\\");\\r\\n\\r\\n\\t\\tendBlock = _endBlock;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * @dev Liquidity Pool functions\\r\\n     */\\r\\n\\r\\n    // Add liquidity pool\\r\\n    function addLiquidityPool(IERC20 _lpToken, uint256 _rewardPerBlock) public onlyOwner {\\r\\n\\r\\n    \\tuint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\\r\\n\\r\\n    \\tliquidityPools.push(LPInfo({\\r\\n            lpToken: _lpToken,\\r\\n            rewardPerBlock: _rewardPerBlock,\\r\\n            lastRewardBlock: lastRewardBlock,\\r\\n            accRewardPerShare: 0\\r\\n        }));\\r\\n    }\\r\\n\\r\\n    // Update LP rewardPerBlock\\r\\n    function updateRewardPerBlock(uint256 _pid, uint256 _rewardPerBlock) public onlyOwner {\\r\\n        updatePoolRewards(_pid);\\r\\n\\r\\n    \\tliquidityPools[_pid].rewardPerBlock = _rewardPerBlock;\\r\\n    }\\r\\n\\r\\n    // Update pool rewards variables\\r\\n    function updatePoolRewards(uint256 _pid) public {\\r\\n    \\tLPInfo storage pool = liquidityPools[_pid];\\r\\n\\r\\n    \\tif (block.number <= pool.lastRewardBlock) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\r\\n        if (lpSupply == 0) {\\r\\n            pool.lastRewardBlock = block.number;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 blockElapsed = 0;\\r\\n        if (block.number < endBlock || endBlock == 0) {\\r\\n            blockElapsed = (block.number).sub(pool.lastRewardBlock);\\r\\n        } else if (endBlock >= pool.lastRewardBlock) {\\r\\n            blockElapsed = endBlock.sub(pool.lastRewardBlock);\\r\\n        }\\r\\n\\r\\n        uint256 totalReward = blockElapsed.mul(pool.rewardPerBlock);\\r\\n        pool.accRewardPerShare = pool.accRewardPerShare.add(totalReward.mul(1e12).div(lpSupply));\\r\\n        pool.lastRewardBlock = block.number;\\r\\n    }\\r\\n\\r\\n\\t/**\\r\\n     * @dev Stake functions\\r\\n     */\\r\\n\\r\\n\\t// Deposit LP tokens into the liquidity pool\\r\\n\\tfunction deposit(uint256 _pid, uint256 _amount) public {\\r\\n        require(block.number < endBlock || endBlock == 0);\\r\\n\\r\\n\\t\\tLPInfo storage pool = liquidityPools[_pid];\\r\\n        Staker storage user = stakers[_pid][msg.sender];\\r\\n\\r\\n        updatePoolRewards(_pid);\\r\\n\\r\\n        // Issue accrued rewards to user\\r\\n        if (user.amountStaked > 0) {\\r\\n            uint256 pending = user.amountStaked.mul(pool.accRewardPerShare).div(1e12).sub(user.rewardDebt);\\r\\n            if(pending > 0) {\\r\\n            \\t_issueRewards(msg.sender, pending);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Process deposit\\r\\n        if(_amount > 0) {\\r\\n            require(pool.lpToken.transferFrom(msg.sender, address(this), _amount));\\r\\n            user.amountStaked = user.amountStaked.add(_amount);\\r\\n        }\\r\\n\\r\\n        // Update user reward debt\\r\\n        user.rewardDebt = user.amountStaked.mul(pool.accRewardPerShare).div(1e12);\\r\\n\\r\\n        emit Deposit(block.timestamp, msg.sender, _pid, _amount);\\r\\n\\t}\\r\\n\\r\\n\\t// Withdraw LP tokens from liquidity pool\\r\\n\\tfunction withdraw(uint256 _pid, uint256 _amount) public {\\r\\n\\t\\tLPInfo storage pool = liquidityPools[_pid];\\r\\n        Staker storage user = stakers[_pid][msg.sender];\\r\\n\\r\\n        require(user.amountStaked >= _amount, \\\"Amount to withdraw more than amount staked\\\");\\r\\n\\r\\n        updatePoolRewards(_pid);\\r\\n\\r\\n        // Issue accrued rewards to user\\r\\n        if (user.amountStaked > 0) {\\r\\n            uint256 pending = user.amountStaked.mul(pool.accRewardPerShare).div(1e12).sub(user.rewardDebt);\\r\\n            if(pending > 0) {\\r\\n            \\t_issueRewards(msg.sender, pending);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Process withdraw\\r\\n        if(_amount > 0) {\\r\\n            user.amountStaked = user.amountStaked.sub(_amount);\\r\\n            require(pool.lpToken.transfer(msg.sender, _amount));\\r\\n        }\\r\\n\\r\\n        // Update user reward debt\\r\\n        user.rewardDebt = user.amountStaked.mul(pool.accRewardPerShare).div(1e12);\\r\\n\\r\\n        emit Withdraw(block.timestamp, msg.sender, _pid, _amount);\\r\\n\\t}\\r\\n\\r\\n\\t// Withdraw without caring about rewards. EMERGENCY ONLY.\\r\\n    function emergencyWithdraw(uint256 _pid) public {\\r\\n        LPInfo storage pool = liquidityPools[_pid];\\r\\n        Staker storage user = stakers[_pid][msg.sender];\\r\\n\\r\\n        uint256 amount = user.amountStaked;\\r\\n        user.amountStaked = 0;\\r\\n        user.rewardDebt = 0;\\r\\n\\r\\n        require(pool.lpToken.transfer(msg.sender, amount));\\r\\n\\r\\n        emit EmergencyWithdraw(block.timestamp, msg.sender, _pid, amount);\\r\\n    }\\r\\n\\r\\n    // Function to issue rewards from funding address to user\\r\\n\\tfunction _issueRewards(address _to, uint256 _amount) internal {\\r\\n\\t\\t// For transparency, rewards are transfered from funding address to contract then to user\\r\\n\\r\\n    \\t// Transfer rewards from funding address to contract\\r\\n        require(PNODE.transferFrom(fundingAddress, address(this), _amount));\\r\\n\\r\\n        // Transfer rewards from contract to user\\r\\n        require(PNODE.transfer(_to, _amount));\\r\\n\\t}\\r\\n\\r\\n\\t// View function to see pending rewards on frontend.\\r\\n    function pendingRewards(uint256 _pid, address _user) external view returns (uint256) {\\r\\n        LPInfo storage pool = liquidityPools[_pid];\\r\\n        Staker storage user = stakers[_pid][_user];\\r\\n\\r\\n        uint256 accRewardPerShare = pool.accRewardPerShare;\\r\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\r\\n\\r\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\r\\n\\r\\n            uint256 blockElapsed = 0;\\r\\n            if (block.number < endBlock || endBlock == 0) {\\r\\n                blockElapsed = (block.number).sub(pool.lastRewardBlock);\\r\\n            } else if (endBlock >= pool.lastRewardBlock) {\\r\\n                blockElapsed = endBlock.sub(pool.lastRewardBlock);\\r\\n            }\\r\\n\\r\\n            uint256 totalReward = blockElapsed.mul(pool.rewardPerBlock);\\r\\n            accRewardPerShare = accRewardPerShare.add(totalReward.mul(1e12).div(lpSupply));\\r\\n        }\\r\\n\\r\\n        return user.amountStaked.mul(accRewardPerShare).div(1e12).sub(user.rewardDebt);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () internal {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestmap\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PNODE\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"addLiquidityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liquidityPools\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"name\":\"updateEndBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateFundingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePoolRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"name\":\"updateStartBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PinknodeLiquidityMining","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000bfc8e0","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}