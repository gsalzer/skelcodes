{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.3;\r\n\r\ninterface IUniswapV2Pair {\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n}\r\n\r\ncontract UniBuy {\r\n    \r\n    address constant private WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address private _owner;\r\n    mapping(address => bool) private _ownerList;\r\n    \r\n    constructor() {\r\n        _owner = msg.sender;\r\n        _ownerList[msg.sender] = true;\r\n    }\r\n    \r\n    function buy(IUniswapV2Pair pair) external payable {\r\n        require(_ownerList[msg.sender], \"!Owner\");\r\n        require(msg.value > 0, \"INSUFFICIENT_INPUT_AMOUNT\");\r\n        address[2] memory path = [pair.token0(), pair.token1()];\r\n        bool direction = true;\r\n        require(path[0] != address(0) && path[1] != address(0), \"!Pair\");\r\n        require(path[0] == WETH || path[1] == WETH, \"!Eth Pair\");\r\n        if (path[1] == WETH) {\r\n            direction = false;\r\n        }\r\n        (uint reserveIn, uint reserveOut,) = pair.getReserves();\r\n        if (!direction) {\r\n            uint temp = reserveIn;\r\n            reserveIn = reserveOut;\r\n            reserveOut = temp;\r\n        }\r\n        require(reserveIn > 0 && reserveOut > 0, \"INSUFFICIENT_LIQUIDITY\");\r\n        uint amountInWithFee = msg.value * 997;\r\n        uint numerator = amountInWithFee * reserveOut;\r\n        uint denominator = reserveIn * 1000 + amountInWithFee;\r\n        uint amountsOut = numerator / denominator;\r\n        IWETH(WETH).deposit{value: msg.value}();\r\n        IWETH(WETH).transfer(address(pair), msg.value);\r\n        if (direction) {\r\n            pair.swap(0, amountsOut, msg.sender, new bytes(0));\r\n        } else {\r\n            pair.swap(amountsOut, 0, msg.sender, new bytes(0));\r\n        }\r\n    }\r\n    \r\n    function newOwner(address _newOwner) external {\r\n        require(_owner == msg.sender, \"!Owner\");\r\n        _ownerList[_newOwner] = true;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"newOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UniBuy","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4fabbb5e78d189820f7af5450cd86332886a58458958529aab72db8b0655df62"}]}