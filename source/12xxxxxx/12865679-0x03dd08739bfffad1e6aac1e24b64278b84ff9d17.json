{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/v1/markets/eth/nftx/NftxV2Market.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"../../../../../interfaces/markets/tokens/IERC20.sol\\\";\\nimport \\\"../../../../../interfaces/markets/tokens/IERC1155.sol\\\";\\nimport \\\"../../../../../interfaces/markets/tokens/IERC721.sol\\\";\\n\\ninterface INFTXVault {\\n    function mint(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts /* ignored for ERC721 vaults */\\n    ) external returns (uint256);\\n\\n    function redeemTo(\\n        uint256 amount, \\n        uint256[] memory specificIds, \\n        address to\\n    ) external returns (uint256[] memory);\\n\\n    function swapTo(\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts, /* ignored for ERC721 vaults */\\n        uint256[] memory specificIds,\\n        address to\\n    ) external returns (uint256[] memory);\\n}\\n\\ninterface ICryptoPunks {\\n    function offerPunkForSaleToAddress(uint punkIndex, uint minSalePriceInWei, address toAddress) external;\\n}\\n\\nlibrary NftxV2Market {\\n\\n    struct NFTXBuy {\\n        address vault;\\n        uint256 amount;\\n        uint256[] specificIds;\\n    }\\n\\n    function _approve(\\n        address _operator, \\n        address _token,\\n        uint256[] memory _tokenIds\\n    ) internal {\\n        // in case of kitties\\n        if (_token == 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d) {\\n            for (uint256 i = 0; i < _tokenIds.length; i++) {\\n                IERC721(_token).approve(_operator, _tokenIds[i]);\\n            }\\n        }\\n        // in case of cryptopunks\\n        else if (_token == 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB) {\\n            for (uint256 i = 0; i < _tokenIds.length; i++) {\\n                ICryptoPunks(_token).offerPunkForSaleToAddress(_tokenIds[i], 0, _operator);\\n            }\\n        }\\n        // default\\n        else if (!IERC721(_token).isApprovedForAll(address(this), _operator)) {\\n            IERC721(_token).setApprovalForAll(_operator, true);\\n        }\\n    }\\n\\n    function sellERC721ForERC20Equivalent(\\n        address fromERC721,\\n        address vault,\\n        uint256[] memory tokenIds\\n    ) external {\\n        _approve(vault, fromERC721, tokenIds);\\n        INFTXVault(vault).mint(tokenIds, tokenIds);\\n    }\\n\\n    function sellERC1155BatchForERC20Equivalent(\\n        address fromERC1155,\\n        address vault,\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts\\n    ) external {\\n        _approve(vault, fromERC1155, tokenIds);\\n        INFTXVault(vault).mint(tokenIds, amounts);\\n    }\\n\\n    function buyAssetsForErc20(NFTXBuy[] memory nftxBuys, address recipient) external {\\n        for (uint256 i = 0; i < nftxBuys.length; i++) {\\n            INFTXVault(nftxBuys[i].vault).redeemTo(nftxBuys[i].amount, nftxBuys[i].specificIds, recipient);\\n        }\\n    }\\n\\n    function swapErc721(\\n        address fromERC721,\\n        address vault,\\n        uint256[] memory fromTokenIds,\\n        uint256[] memory toTokenIds,\\n        address recipient\\n    ) external {\\n        // approve token to NFTX vault\\n        _approve(vault, fromERC721, fromTokenIds);\\n        // swap tokens and send back to the recipient\\n        uint256[] memory amounts;\\n        INFTXVault(vault).swapTo(fromTokenIds, amounts, toTokenIds, recipient);\\n    }\\n\\n    function swapErc1155(\\n        address fromERC1155,\\n        address vault,\\n        uint256[] memory fromTokenIds,\\n        uint256[] memory fromAmounts,\\n        uint256[] memory toTokenIds,\\n        address recipient\\n    ) external {\\n        // approve token to NFTX vault\\n        _approve(vault, fromERC1155, fromTokenIds);\\n        // swap tokens and send back to the recipient\\n        INFTXVault(vault).swapTo(fromTokenIds, fromAmounts, toTokenIds, recipient);\\n    }\\n}\"\r\n    },\r\n    \"interfaces/markets/tokens/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\ninterface IERC20 {\\n    /**\\n        * @dev Returns the amount of tokens owned by `account`.\\n        */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n        * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n        *\\n        * Returns a boolean value indicating whether the operation succeeded.\\n        *\\n        * Emits a {Transfer} event.\\n        */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n}\"\r\n    },\r\n    \"interfaces/markets/tokens/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\ninterface IERC1155 {\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external;\\n}\"\r\n    },\r\n    \"interfaces/markets/tokens/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\ninterface IERC721 {\\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\\n    ///  THEY MAY BE PERMANENTLY LOST\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\n    ///  `_tokenId` is not a valid NFT.\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) external;\\n    \\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function approve(address to, uint256 tokenId) external;\\n    \\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[]","ContractName":"NftxV2Market","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}