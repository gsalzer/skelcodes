{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.10;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n   \r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value)\r\n        public\r\n        returns (bool success);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) public returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        public\r\n        returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender)\r\n        public\r\n        view\r\n        returns (uint256 remaining);\r\n\r\n    function decimals() public view returns (uint256 digits);\r\n\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _value\r\n    );\r\n}\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\ncontract Ellufa {\r\n    struct User {\r\n        uint256 cycle;\r\n        uint256 total_deposits;\r\n        uint256 max_earnings;\r\n        uint256 earnings_left;\r\n        uint256 total_withdrawl;\r\n        uint256 profitpayout;\r\n        uint256 total_profitpayout;\r\n        uint256 stakingpayout;\r\n        uint256 total_stakingpayout;\r\n        uint8 leader_status;\r\n    }\r\n\r\n    struct Merchant {\r\n        uint256 total_payout;\r\n        uint8 status;\r\n    }\r\n\r\n    struct Package {\r\n        uint8 status;\r\n        uint8 maxPayout;\r\n    }\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    address payable public owner;\r\n    address payable public companyaddress;\r\n    address payable public usdt_address;\r\n\r\n    address public node_address;\r\n    address public exchange_address;\r\n    \r\n    uint256 public total_depositcount = 0;\r\n    uint256 public total_deposited;\r\n    uint256 public total_withdraw;\r\n    uint256 public total_exchange_credit;\r\n    uint256 public total_payout;\r\n    uint256 public total_profit;\r\n    uint256 public current_profit;\r\n    uint256 public total_staked;\r\n    uint256 public current_staked;\r\n    uint8 public phaseversion;\r\n    uint8 public tokendebit; // If disable its wont debit 20%\r\n    uint256 public min_withdrawal; // Before live change to 6 digit\r\n    uint8 public staking_status;\r\n    uint8 public merchant_status;\r\n    uint256 public multiplier;\r\n    address public elft_address;\r\n    uint8 public token_transfer_status;\r\n    uint256 public token_price;\r\n    uint8 public token_share;\r\n\r\n    mapping(address => User) public users;\r\n\r\n    mapping(address => Merchant) public merchants;\r\n\r\n    mapping(uint256 => Package) public packages;\r\n\r\n    event NewDeposit(address indexed addr, uint256 amount);\r\n    event PayoutEvent(address indexed addr, uint256 payout, uint256 staking);\r\n    event WithdrawEvent(address indexed addr, uint256 amount, uint256 service);\r\n    event StakingEvent(address indexed addr, uint256 amount);\r\n    event MerchantEvent(address indexed addr, uint256 amount);\r\n    event ELFTTranEvent(address indexed addr, uint256 amount);\r\n    event ExchangeDebit(address indexed addr, uint256 amount);\r\n    event ExchangeCredit(address indexed addr, uint256 amount);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n\r\n        multiplier = 1000000;\r\n\r\n        companyaddress = 0xFE31Bf2345A531dD2A8E6c5444070248698171BF;\r\n\r\n        usdt_address = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n\r\n        phaseversion = 1;\r\n\r\n        tokendebit = 1;\r\n\r\n        min_withdrawal = 100 * multiplier;\r\n\r\n        staking_status = 0;\r\n\r\n        merchant_status = 0;\r\n\r\n        token_share = 20;\r\n\r\n        packages[1000 * multiplier].status = 1;\r\n        packages[1000 * multiplier].maxPayout = 2;\r\n    }\r\n\r\n    function initDeposit() external {\r\n        \r\n        \r\n        IERC20 tc = IERC20(usdt_address);\r\n\r\n        require(users[msg.sender].earnings_left == 0, \"MAX CAP NOT REACHED\");\r\n\r\n        require(\r\n            tc.allowance(msg.sender, address(this)) > 0,\r\n            \"USDT APPROVAL FAILED\"\r\n        );\r\n\r\n        uint256 _amount = tc.allowance(msg.sender, address(this));\r\n\r\n        \r\n        tc.safeTransferFrom(msg.sender, address(this), _amount);\r\n           \r\n        \r\n    \r\n        uint256 company_fee = _amount.div(100).mul(10);\r\n\r\n        tc.safeTransfer(companyaddress, company_fee);\r\n\r\n        uint256 token_fee = _amount.div(100).mul(token_share);\r\n\r\n        if (tokendebit == 1) {\r\n            tc.safeTransfer(companyaddress, token_fee);\r\n        } else {\r\n            //Phase 2 Added to staking\r\n            users[msg.sender].stakingpayout = users[msg.sender]\r\n                .stakingpayout\r\n                .add(token_fee);\r\n\r\n            users[msg.sender].total_stakingpayout = users[msg.sender]\r\n                .total_stakingpayout\r\n                .add(token_fee);\r\n\r\n            total_staked = total_staked.add(token_fee);\r\n            current_staked = current_staked.add(token_fee);\r\n        }\r\n\r\n        uint256 mxpayout = maxPayoutof(_amount);\r\n\r\n        users[msg.sender].cycle++;\r\n        total_depositcount++;\r\n        total_deposited += _amount;\r\n        users[msg.sender].total_deposits += _amount;\r\n        users[msg.sender].max_earnings += mxpayout;\r\n        users[msg.sender].earnings_left += mxpayout;\r\n\r\n        emit NewDeposit(msg.sender, _amount);\r\n\r\n        \r\n    }\r\n\r\n    function maxPayoutof(uint256 _amount) private view returns (uint256) {\r\n        uint8 maxtimes = packages[_amount].maxPayout;\r\n\r\n        return _amount * maxtimes;\r\n    }\r\n\r\n    function addNodeAddress(address _addr) external {\r\n        require(msg.sender == owner, \"OWNER ONLY\");\r\n\r\n        node_address = _addr;\r\n    }\r\n\r\n    function addPayout(address _addr, uint256 amount) external {\r\n        require(\r\n            msg.sender == owner || msg.sender == node_address,\r\n            \"PRIVILAGED USER ONLY\"\r\n        );\r\n\r\n        if (users[_addr].leader_status == 0)\r\n            require(users[_addr].earnings_left >= amount, \"MAX PAYOUT REACHED\");\r\n\r\n        total_payout = total_payout.add(amount);\r\n\r\n        uint256 _profit = amount.div(100).mul(80);\r\n\r\n        uint256 _staked = amount.div(100).mul(20);\r\n\r\n        total_profit = total_profit.add(_profit);\r\n        current_profit = current_profit.add(_profit);\r\n\r\n        total_staked = total_staked.add(_staked);\r\n        current_staked = current_staked.add(_staked);\r\n\r\n        if (users[_addr].leader_status == 0)\r\n            users[_addr].earnings_left -= amount;\r\n\r\n        users[_addr].profitpayout += _profit;\r\n        users[_addr].total_profitpayout += _profit;\r\n        users[_addr].stakingpayout += _staked;\r\n        users[_addr].total_stakingpayout += _staked;\r\n\r\n        emit PayoutEvent(\r\n            _addr,\r\n            amount.div(100).mul(80),\r\n            amount.div(100).mul(20)\r\n        );\r\n    }\r\n\r\n    function withdraw(uint256 _amount) external {\r\n        require(\r\n            users[msg.sender].profitpayout >= min_withdrawal,\r\n            \"MIN 100 USDT\"\r\n        );\r\n\r\n        require(users[msg.sender].profitpayout >= _amount, \"NOT ENOUGH MONEY\");\r\n\r\n        require(_amount >= min_withdrawal, \"MIN 100 USDT\");\r\n\r\n        IERC20 tc = IERC20(usdt_address);\r\n\r\n        tc.safeTransfer(msg.sender, _amount.div(100).mul(95));\r\n        tc.safeTransfer(companyaddress, _amount.div(100).mul(5));\r\n\r\n        users[msg.sender].total_withdrawl = users[msg.sender]\r\n            .total_withdrawl\r\n            .add(_amount);\r\n\r\n        total_withdraw = total_withdraw.add(_amount);\r\n\r\n        current_profit = current_profit.sub(_amount);\r\n\r\n        emit WithdrawEvent(\r\n            msg.sender,\r\n            _amount.div(100).mul(95),\r\n            _amount.div(100).mul(5)\r\n        );\r\n\r\n        users[msg.sender].profitpayout = users[msg.sender].profitpayout.sub(\r\n            _amount\r\n        );\r\n    }\r\n\r\n    function investStaking(uint256 amount) external {\r\n        require(staking_status == 1, \"STAKING NOT ENABLED\");\r\n\r\n        require(\r\n            users[msg.sender].stakingpayout >= amount,\r\n            \"NOT ENOUGH STAKING AMOUNT\"\r\n        );\r\n\r\n        current_staked = current_staked.sub(amount);\r\n        users[msg.sender].stakingpayout = users[msg.sender].stakingpayout.sub(\r\n            amount\r\n        );\r\n\r\n        IERC20 tc = IERC20(usdt_address);\r\n        tc.safeTransfer(companyaddress, amount);\r\n\r\n        emit StakingEvent(msg.sender, amount);\r\n\r\n        if (token_transfer_status == 1) {\r\n            IERC20 elft = IERC20(elft_address);\r\n\r\n            uint256 return_token = amount.div(token_price).mul(multiplier);\r\n\r\n            elft.safeTransfer(msg.sender, return_token);\r\n\r\n            emit ELFTTranEvent(msg.sender, amount);\r\n        }\r\n    }\r\n\r\n    function addMerchant(address _addr) external {\r\n        require(msg.sender == owner, \"OWNER ONLY\");\r\n\r\n        merchants[_addr].status = 1;\r\n    }\r\n\r\n    function payMerchant(address _addr, uint256 _amount) external {\r\n        require(merchant_status == 1, \"MERCHANT NOT ENABLED\");\r\n\r\n        require(merchants[_addr].status == 1, \"ADDRESS NOT AVAILABLE\");\r\n\r\n        require(\r\n            users[msg.sender].stakingpayout >= _amount,\r\n            \"NOT ENOUGH BALANCE\"\r\n        );\r\n\r\n        current_staked = current_staked.sub(_amount);\r\n        users[msg.sender].stakingpayout = users[msg.sender].stakingpayout.sub(\r\n            _amount\r\n        );\r\n\r\n        merchants[_addr].total_payout = merchants[_addr].total_payout.add(\r\n            _amount\r\n        );\r\n\r\n        IERC20 tc = IERC20(usdt_address);\r\n        tc.safeTransfer(_addr, _amount);\r\n\r\n        emit MerchantEvent(msg.sender, _amount);\r\n    }\r\n\r\n    function addPackage(uint256 _amount, uint8 _maxpayout) public {\r\n        require(msg.sender == owner, \"OWNER ONLY\");\r\n\r\n        require(_maxpayout >= 2, \"MINIMUM 2 TIMES RETURN\");\r\n\r\n        packages[_amount * multiplier].status = 1;\r\n        packages[_amount * multiplier].maxPayout = _maxpayout;\r\n    }\r\n\r\n    function addLeaderAddress(address _address) public {\r\n        require(msg.sender == owner, \"OWNER ONLY\");\r\n\r\n        users[_address].leader_status = 1;\r\n    }\r\n\r\n    function addELFTAddress(address _address) public {\r\n        require(msg.sender == owner, \"OWNER ONLY\");\r\n\r\n        require(_address != address(0), \"VALUID ADDRESS REQUIRED\");\r\n\r\n        elft_address = _address;\r\n\r\n        token_transfer_status = 1;\r\n    }\r\n    \r\n    function addExchangeAddress(address _address) public {\r\n        require(msg.sender == owner, \"OWNER ONLY\");\r\n\r\n        require(_address != address(0), \"VALUID ADDRESS REQUIRED\");\r\n\r\n        exchange_address = _address;\r\n    }\r\n    \r\n    function debitStaking(address _address,uint256 _amount) public {\r\n        require(\r\n            msg.sender == owner || msg.sender == exchange_address,\r\n            \"PRIVILAGED USER ONLY\"\r\n        );\r\n        \r\n        require(\r\n            users[_address].stakingpayout >= _amount,\r\n            \"NOT ENOUGH BALANCE\"\r\n        );\r\n        \r\n        current_staked = current_staked.sub(_amount);\r\n        users[_address].stakingpayout = users[_address].stakingpayout.sub(\r\n            _amount\r\n        );\r\n    \r\n        emit ExchangeDebit(_address,_amount);\r\n\r\n    }\r\n    \r\n    function creditPayout(address _address,uint256 _amount) public {\r\n        \r\n        require(\r\n            msg.sender == owner || msg.sender == exchange_address,\r\n            \"PRIVILAGED USER ONLY\"\r\n        );\r\n        \r\n        total_profit = total_profit.add(_amount);\r\n        current_profit = current_profit.add(_amount);\r\n        total_exchange_credit = total_exchange_credit.add(_amount);\r\n        \r\n        users[_address].profitpayout = users[_address].profitpayout.add(_amount);\r\n        users[_address].total_profitpayout = users[_address].total_profitpayout.add(_amount);\r\n        \r\n        emit ExchangeCredit(_address,_amount);\r\n        \r\n    }\r\n\r\n    function addTokenPrice(uint256 _value) public {\r\n        //6 Decimal\r\n        require(\r\n            msg.sender == owner || msg.sender == node_address,\r\n            \"PRIVILAGED USER ONLY\"\r\n        );\r\n\r\n        token_price = _value;\r\n    }\r\n\r\n    function updateTokenShares(uint8 _value) public {\r\n        require(msg.sender == owner, \"OWNER ONLY\");\r\n\r\n        require(_value >= 0, \"MUST HIGHER THAN 0\");\r\n\r\n        token_share = _value;\r\n    }\r\n\r\n    function enablePhase2() public {\r\n        require(msg.sender == owner, \"OWNER ONLY\");\r\n\r\n        phaseversion = 2;\r\n\r\n        tokendebit = 2;\r\n\r\n        staking_status = 1;\r\n\r\n        merchant_status = 1;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"current_staked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_depositcount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addNodeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdt_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_exchange_credit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"payMerchant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"investStaking\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"elft_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addELFTAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enablePhase2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint8\"}],\"name\":\"updateTokenShares\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_maxpayout\",\"type\":\"uint8\"}],\"name\":\"addPackage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addExchangeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_share\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"current_profit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"staking_status\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"cycle\",\"type\":\"uint256\"},{\"name\":\"total_deposits\",\"type\":\"uint256\"},{\"name\":\"max_earnings\",\"type\":\"uint256\"},{\"name\":\"earnings_left\",\"type\":\"uint256\"},{\"name\":\"total_withdrawl\",\"type\":\"uint256\"},{\"name\":\"profitpayout\",\"type\":\"uint256\"},{\"name\":\"total_profitpayout\",\"type\":\"uint256\"},{\"name\":\"stakingpayout\",\"type\":\"uint256\"},{\"name\":\"total_stakingpayout\",\"type\":\"uint256\"},{\"name\":\"leader_status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"debitStaking\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_staked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokendebit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addMerchant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packages\",\"outputs\":[{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"maxPayout\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_transfer_status\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchange_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"min_withdrawal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_profit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phaseversion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"node_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_deposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"merchant_status\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"merchants\",\"outputs\":[{\"name\":\"total_payout\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addLeaderAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"creditPayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addPayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_payout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"staking\",\"type\":\"uint256\"}],\"name\":\"PayoutEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"service\",\"type\":\"uint256\"}],\"name\":\"WithdrawEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakingEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MerchantEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ELFTTranEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExchangeDebit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExchangeCredit\",\"type\":\"event\"}]","ContractName":"Ellufa","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://fb923af7309f562fbc1034099fe3f8b77c5302d157866f5ed0424f87615e0601"}]}