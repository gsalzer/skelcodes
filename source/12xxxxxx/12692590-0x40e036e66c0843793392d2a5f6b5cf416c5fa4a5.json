{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\farming\\FarmData.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.6;\r\n\r\nstruct FarmingPositionRequest {\r\n    uint256 setupIndex; // index of the chosen setup.\r\n    uint256 amount0; // amount of main token or liquidity pool token.\r\n    uint256 amount1; // amount of other token or liquidity pool token. Needed for gen2\r\n    address positionOwner; // position extension or address(0) [msg.sender].\r\n}\r\n\r\nstruct FarmingSetupConfiguration {\r\n    bool add; // true if we're adding a new setup, false we're updating it.\r\n    bool disable;\r\n    uint256 index; // index of the setup we're updating.\r\n    FarmingSetupInfo info; // data of the new or updated setup\r\n}\r\n\r\nstruct FarmingSetupInfo {\r\n    uint256 blockDuration; // duration of setup\r\n    uint256 startBlock; // optional start block used for the delayed activation of the first setup\r\n    uint256 originalRewardPerBlock;\r\n    uint256 minStakeable; // minimum amount of staking tokens.\r\n    uint256 renewTimes; // if the setup is renewable or if it's one time.\r\n    address liquidityPoolTokenAddress; // address of the liquidity pool token\r\n    address mainTokenAddress; // eg. buidl address.\r\n    bool involvingETH; // if the setup involves ETH or not.\r\n    uint256 setupsCount; // number of setups created by this info.\r\n    uint256 lastSetupIndex; // index of last setup;\r\n    int24 tickLower; // Gen2 Only - tickLower of the UniswapV3 pool\r\n    int24 tickUpper; // Gen 2 Only - tickUpper of the UniswapV3 pool\r\n}\r\n\r\nstruct FarmingSetup {\r\n    uint256 infoIndex; // setup info\r\n    bool active; // if the setup is active or not.\r\n    uint256 startBlock; // farming setup start block.\r\n    uint256 endBlock; // farming setup end block.\r\n    uint256 lastUpdateBlock; // number of the block where an update was triggered.\r\n    uint256 objectId; // need for gen2. uniswapV3 NFT position Id\r\n    uint256 rewardPerBlock; // farming setup reward per single block.\r\n    uint128 totalSupply; // Total LP token liquidity of all the positions of this setup\r\n}\r\n\r\nstruct FarmingPosition {\r\n    address uniqueOwner; // address representing the owner of the position.\r\n    uint256 setupIndex; // the setup index related to this position.\r\n    uint256 creationBlock; // block when this position was created.\r\n    uint128 liquidityPoolTokenAmount; // amount of liquidity pool token in the position.\r\n    uint256 reward; // position reward.\r\n}\r\n\r\n// File: contracts\\farming\\IFarmExtension.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\npragma abicoder v2;\r\n\r\n\r\ninterface IFarmExtension {\r\n\r\n    function init(bool byMint, address host, address treasury) external;\r\n\r\n    function setHost(address host) external;\r\n    function setTreasury(address treasury) external;\r\n\r\n    function data() external view returns(address farmMainContract, bool byMint, address host, address treasury, address rewardTokenAddress);\r\n\r\n    function transferTo(uint256 amount) external;\r\n    function backToYou(uint256 amount) external payable;\r\n\r\n    function setFarmingSetups(FarmingSetupConfiguration[] memory farmingSetups) external;\r\n}\r\n\r\n// File: contracts\\farming\\IFarmMain.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\n//pragma abicoder v2;\r\n\r\n\r\ninterface IFarmMain {\r\n\r\n    function ONE_HUNDRED() external view returns(uint256);\r\n    function _rewardTokenAddress() external view returns(address);\r\n    function position(uint256 positionId) external view returns (FarmingPosition memory);\r\n    function setups() external view returns (FarmingSetup[] memory);\r\n    function setup(uint256 setupIndex) external view returns (FarmingSetup memory, FarmingSetupInfo memory);\r\n    function setFarmingSetups(FarmingSetupConfiguration[] memory farmingSetups) external;\r\n    function openPosition(FarmingPositionRequest calldata request) external payable returns(uint256 positionId);\r\n    function addLiquidity(uint256 positionId, FarmingPositionRequest calldata request) external payable;\r\n}\r\n\r\n// File: contracts\\farming\\util\\DFOHub.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IDoubleProxy {\r\n    function proxy() external view returns (address);\r\n}\r\n\r\ninterface IMVDProxy {\r\n    function getMVDFunctionalitiesManagerAddress() external view returns(address);\r\n    function getMVDWalletAddress() external view returns (address);\r\n    function getStateHolderAddress() external view returns(address);\r\n    function submit(string calldata codeName, bytes calldata data) external payable returns(bytes memory returnData);\r\n}\r\n\r\ninterface IMVDFunctionalitiesManager {\r\n    function getFunctionalityData(string calldata codeName) external view returns(address, uint256, string memory, address, uint256);\r\n    function isAuthorizedFunctionality(address functionality) external view returns(bool);\r\n}\r\n\r\ninterface IStateHolder {\r\n    function getUint256(string calldata name) external view returns(uint256);\r\n    function getAddress(string calldata name) external view returns(address);\r\n    function clear(string calldata varName) external returns(string memory oldDataType, bytes memory oldVal);\r\n}\r\n\r\n// File: contracts\\WUSD\\AllowedAMM.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\nstruct AllowedAMM {\r\n    address ammAddress;\r\n    address[] liquidityPools;\r\n}\r\n\r\n// File: contracts\\WUSD\\IWUSDExtensionController.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n//pragma abicoder v2;\r\n\r\n\r\ninterface IWUSDExtensionController {\r\n\r\n    function rebalanceByCreditBlockInterval() external view returns(uint256);\r\n\r\n    function lastRebalanceByCreditBlock() external view returns(uint256);\r\n\r\n    function wusdInfo() external view returns (address, uint256, address);\r\n\r\n    function allowedAMMs() external view returns(AllowedAMM[] memory);\r\n\r\n    function extension() external view returns (address);\r\n\r\n    function addLiquidity(\r\n        uint256 ammPosition,\r\n        uint256 liquidityPoolPosition,\r\n        uint256 liquidityPoolAmount,\r\n        bool byLiquidityPool\r\n    ) external returns(uint256);\r\n}\r\n\r\n// File: contracts\\WUSD\\util\\IERC20.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: contracts\\WUSD\\WUSDFarmingExtension.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\n//pragma abicoder v2;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract WUSDFarmingExtension is IFarmExtension {\r\n\r\n    string private constant FUNCTIONALITY_NAME = \"manageFarming\";\r\n\r\n    uint256 public constant ONE_HUNDRED = 1e18;\r\n\r\n    // wallet who has control on the extension\r\n    address internal _doubleProxy;\r\n\r\n    // mapping that contains all the farming contract linked to this extension\r\n    address internal _farmingContract;\r\n\r\n    // the reward token address linked to this farming contract\r\n    address internal _rewardTokenAddress;\r\n\r\n    address public wusdExtensionControllerAddress;\r\n\r\n    uint256 public rewardCreditPercentage;\r\n\r\n    FarmingSetupInfo[] private infoModels;\r\n    uint256[] private rebalancePercentages;\r\n\r\n    uint256 public lastCheck;\r\n    uint256 public lastBalance;\r\n\r\n    /** MODIFIERS */\r\n\r\n    /** @dev farmingOnly modifier used to check for unauthorized transfers. */\r\n    modifier farmingOnly() {\r\n        require(msg.sender == _farmingContract, \"Unauthorized\");\r\n        _;\r\n    }\r\n\r\n    /** @dev hostOnly modifier used to check for unauthorized edits. */\r\n    modifier hostOnly() {\r\n        require(_isFromDFO(msg.sender), \"Unauthorized\");\r\n        _;\r\n    }\r\n\r\n    /** PUBLIC METHODS */\r\n\r\n    function init(bool, address, address) public virtual override {\r\n        revert(\"Method not allowed, use specific one instead\");\r\n    }\r\n\r\n    function init(address host, address _wusdExtensionControllerAddress, FarmingSetupInfo[] memory farmingSetups, uint256[] memory _rebalancePercentages, uint256 _rewardCreditPercentage) public virtual {\r\n        require(_farmingContract == address(0), \"Already init\");\r\n        require(host != address(0), \"blank host\");\r\n        _rewardTokenAddress = IFarmMain(_farmingContract = msg.sender)._rewardTokenAddress();\r\n        _doubleProxy = host;\r\n        wusdExtensionControllerAddress = _wusdExtensionControllerAddress;\r\n        _setModels(farmingSetups, _rebalancePercentages);\r\n        rewardCreditPercentage = _rewardCreditPercentage;\r\n    }\r\n\r\n    function _setModels(FarmingSetupInfo[] memory farmingSetups, uint256[] memory _rebalancePercentages) private {\r\n        require(farmingSetups.length > 0 && (farmingSetups.length - 1) == _rebalancePercentages.length, \"Invalid data\");\r\n        delete rebalancePercentages;\r\n        delete infoModels;\r\n        uint256 percentage = 0;\r\n        for(uint256 i = 0; i < _rebalancePercentages.length; i++) {\r\n            farmingSetups[i].renewTimes = 0;\r\n            infoModels.push(farmingSetups[i]);\r\n            percentage += _rebalancePercentages[i];\r\n            rebalancePercentages.push(_rebalancePercentages[i]);\r\n        }\r\n        farmingSetups[farmingSetups.length - 1].renewTimes = 0;\r\n        infoModels.push(farmingSetups[farmingSetups.length - 1]);\r\n        require(percentage < ONE_HUNDRED, \"More than one hundred\");\r\n    }\r\n\r\n    /** @dev allows the DFO to update the double proxy address.\r\n      * @param newDoubleProxy new double proxy address.\r\n     */\r\n    function setHost(address newDoubleProxy) public virtual override hostOnly {\r\n        _doubleProxy = newDoubleProxy;\r\n    }\r\n\r\n    /** @dev method used to update the extension treasury.\r\n     */\r\n    function setTreasury(address) public virtual override hostOnly {\r\n        revert(\"Impossibru!\");\r\n    }\r\n\r\n    function setRewardCreditPercentage(uint256 _rewardCreditPercentage) public hostOnly {\r\n        rewardCreditPercentage = _rewardCreditPercentage;\r\n    }\r\n\r\n    function data() view public virtual override returns(address farmingContract, bool byMint, address host, address treasury, address rewardTokenAddress) {\r\n        return (_farmingContract, false, _doubleProxy, _getDFOWallet(), _rewardTokenAddress);\r\n    }\r\n\r\n    function models() public view returns(FarmingSetupInfo[] memory, uint256[] memory) {\r\n        return (infoModels, rebalancePercentages);\r\n    }\r\n\r\n    /** @dev transfers the input amount to the caller farming contract.\r\n      * @param amount amount of erc20 to transfer or mint.\r\n     */\r\n    function transferTo(uint256 amount) public virtual override farmingOnly {\r\n        lastBalance -= amount;\r\n        if(_rewardTokenAddress != address(0)) {\r\n            return _safeTransfer(_rewardTokenAddress, _farmingContract, amount);\r\n        }\r\n        (bool result, ) = _farmingContract.call{value:amount}(\"\");\r\n        require(result, \"ETH transfer failed.\");\r\n    }\r\n\r\n    /** @dev transfers the input amount from the caller farming contract to the extension.\r\n      * @param amount amount of erc20 to transfer back or burn.\r\n     */\r\n    function backToYou(uint256 amount) payable public virtual override farmingOnly {\r\n        lastBalance += amount;\r\n        if(_rewardTokenAddress != address(0)) {\r\n            return _safeTransferFrom(_rewardTokenAddress, msg.sender, address(this), amount);\r\n        }\r\n        require(msg.value == amount, \"invalid sent amount\");\r\n    }\r\n\r\n    function flushTo(address[] memory tokenAddresses, uint256[] memory amounts, address receiver) public hostOnly {\r\n        for(uint256 i = 0; i < tokenAddresses.length; i++) {\r\n            if(tokenAddresses[i] == address(0)) {\r\n                (bool result, ) = receiver.call{value:amounts[i]}(\"\");\r\n                require(result, \"ETH transfer failed.\");\r\n            } else {\r\n                _safeTransfer(tokenAddresses[i], receiver, amounts[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @dev this function calls the liquidity mining contract with the given address and sets the given liquidity mining setups.*/\r\n    function setFarmingSetups(FarmingSetupConfiguration[] memory farmingSetups) public override hostOnly {\r\n        IFarmMain(_farmingContract).setFarmingSetups(farmingSetups);\r\n    }\r\n\r\n    function setWusdExtensionControllerAddress(address _wusdExtensionControllerAddress) public hostOnly {\r\n        wusdExtensionControllerAddress = _wusdExtensionControllerAddress;\r\n    }\r\n\r\n    function setModels(FarmingSetupInfo[] memory farmingSetups, uint256[] memory _rebalancePercentages) public hostOnly {\r\n        _setModels(farmingSetups, _rebalancePercentages);\r\n    }\r\n\r\n    function rebalanceRewardsPerBlock() public {\r\n        uint256 lastRebalanceByCreditBlock = IWUSDExtensionController(wusdExtensionControllerAddress).lastRebalanceByCreditBlock();\r\n        require(lastRebalanceByCreditBlock > 0 && lastRebalanceByCreditBlock != lastCheck, \"Invalid block\");\r\n        lastCheck = lastRebalanceByCreditBlock;\r\n        uint256 amount = _calculatePercentage(IERC20(_rewardTokenAddress).balanceOf(_getDFOWallet()), rewardCreditPercentage);\r\n        IMVDProxy(IDoubleProxy(_doubleProxy).proxy()).submit(FUNCTIONALITY_NAME, abi.encode(address(0), 0, true, _rewardTokenAddress, address(this), amount, false));\r\n        uint256 totalBalance = IERC20(_rewardTokenAddress).balanceOf(address(this));\r\n        uint256 balance = totalBalance - lastBalance;\r\n        lastBalance = totalBalance;\r\n        uint256 remainingBalance = balance;\r\n        uint256 currentReward = 0;\r\n        FarmingSetupConfiguration[] memory farmingSetups = new FarmingSetupConfiguration[](infoModels.length);\r\n        uint256 i;\r\n        for(i = 0; i < rebalancePercentages.length; i++) {\r\n            infoModels[i].originalRewardPerBlock = (currentReward = _calculatePercentage(balance, rebalancePercentages[i])) / infoModels[i].blockDuration;\r\n            remainingBalance -= currentReward;\r\n            farmingSetups[i] = FarmingSetupConfiguration(\r\n                true,\r\n                false,\r\n                0,\r\n                infoModels[i]\r\n            );\r\n        }\r\n        i = rebalancePercentages.length;\r\n        infoModels[i].originalRewardPerBlock = remainingBalance / infoModels[i].blockDuration;\r\n        farmingSetups[i] = FarmingSetupConfiguration(\r\n            true,\r\n            false,\r\n            0,\r\n            infoModels[i]\r\n        );\r\n        IFarmMain(_farmingContract).setFarmingSetups(farmingSetups);\r\n    }\r\n\r\n    /** PRIVATE METHODS */\r\n\r\n    function _calculatePercentage(uint256 totalSupply, uint256 percentage) private pure returns(uint256) {\r\n        return (totalSupply * ((percentage * 1e18) / ONE_HUNDRED)) / 1e18;\r\n    }\r\n\r\n    /** @dev this function returns the address of the functionality with the FUNCTIONALITY_NAME.\r\n      * @return functionalityAddress functionality FUNCTIONALITY_NAME address.\r\n     */\r\n    function _getFunctionalityAddress() private view returns(address functionalityAddress) {\r\n        (functionalityAddress,,,,) = IMVDFunctionalitiesManager(IMVDProxy(IDoubleProxy(_doubleProxy).proxy()).getMVDFunctionalitiesManagerAddress()).getFunctionalityData(FUNCTIONALITY_NAME);\r\n    }\r\n\r\n    /** @dev this function returns the address of the wallet of the linked DFO.\r\n      * @return linked DFO wallet address.\r\n     */\r\n    function _getDFOWallet() private view returns(address) {\r\n        return IMVDProxy(IDoubleProxy(_doubleProxy).proxy()).getMVDWalletAddress();\r\n    }\r\n\r\n    /** @dev this function returns true if the sender is an authorized DFO functionality, false otherwise.\r\n      * @param sender address of the caller.\r\n      * @return true if the call is from a DFO, false otherwise.\r\n     */\r\n    function _isFromDFO(address sender) private view returns(bool) {\r\n        return IMVDFunctionalitiesManager(IMVDProxy(IDoubleProxy(_doubleProxy).proxy()).getMVDFunctionalitiesManagerAddress()).isAuthorizedFunctionality(sender);\r\n    }\r\n\r\n    /** @dev function used to safely approve ERC20 transfers.\r\n      * @param erc20TokenAddress address of the token to approve.\r\n      * @param to receiver of the approval.\r\n      * @param value amount to approve for.\r\n     */\r\n    function _safeApprove(address erc20TokenAddress, address to, uint256 value) internal virtual {\r\n        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).approve.selector, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'APPROVE_FAILED');\r\n    }\r\n\r\n    /** @dev function used to safe transfer ERC20 tokens.\r\n      * @param erc20TokenAddress address of the token to transfer.\r\n      * @param to receiver of the tokens.\r\n      * @param value amount of tokens to transfer.\r\n     */\r\n    function _safeTransfer(address erc20TokenAddress, address to, uint256 value) internal virtual {\r\n        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).transfer.selector, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFER_FAILED');\r\n    }\r\n\r\n    /** @dev this function safely transfers the given ERC20 value from an address to another.\r\n      * @param erc20TokenAddress erc20 token address.\r\n      * @param from address from.\r\n      * @param to address to.\r\n      * @param value amount to transfer.\r\n     */\r\n    function _safeTransferFrom(address erc20TokenAddress, address from, address to, uint256 value) private {\r\n        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).transferFrom.selector, from, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFERFROM_FAILED');\r\n    }\r\n\r\n    function _call(address location, bytes memory payload) private returns(bytes memory returnData) {\r\n        assembly {\r\n            let result := call(gas(), location, 0, add(payload, 0x20), mload(payload), 0, 0)\r\n            let size := returndatasize()\r\n            returnData := mload(0x40)\r\n            mstore(returnData, size)\r\n            let returnDataPayloadStart := add(returnData, 0x20)\r\n            returndatacopy(returnDataPayloadStart, 0, size)\r\n            mstore(0x40, add(returnDataPayloadStart, size))\r\n            switch result case 0 {revert(returnDataPayloadStart, size)}\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"ONE_HUNDRED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"backToYou\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"data\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"farmingContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"byMint\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"flushTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wusdExtensionControllerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"blockDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originalRewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStakeable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renewTimes\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"liquidityPoolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mainTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"involvingETH\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"setupsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSetupIndex\",\"type\":\"uint256\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"internalType\":\"struct FarmingSetupInfo[]\",\"name\":\"farmingSetups\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rebalancePercentages\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_rewardCreditPercentage\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCheck\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"models\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"blockDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originalRewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStakeable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renewTimes\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"liquidityPoolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mainTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"involvingETH\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"setupsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSetupIndex\",\"type\":\"uint256\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"internalType\":\"struct FarmingSetupInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceRewardsPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardCreditPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"disable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"blockDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originalRewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStakeable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renewTimes\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"liquidityPoolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mainTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"involvingETH\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"setupsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSetupIndex\",\"type\":\"uint256\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"internalType\":\"struct FarmingSetupInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"internalType\":\"struct FarmingSetupConfiguration[]\",\"name\":\"farmingSetups\",\"type\":\"tuple[]\"}],\"name\":\"setFarmingSetups\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDoubleProxy\",\"type\":\"address\"}],\"name\":\"setHost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"blockDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originalRewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStakeable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renewTimes\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"liquidityPoolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mainTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"involvingETH\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"setupsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSetupIndex\",\"type\":\"uint256\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"internalType\":\"struct FarmingSetupInfo[]\",\"name\":\"farmingSetups\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rebalancePercentages\",\"type\":\"uint256[]\"}],\"name\":\"setModels\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardCreditPercentage\",\"type\":\"uint256\"}],\"name\":\"setRewardCreditPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wusdExtensionControllerAddress\",\"type\":\"address\"}],\"name\":\"setWusdExtensionControllerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wusdExtensionControllerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"WUSDFarmingExtension","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://66365cff5fcc66771ab160b08ae7e5edb63f17c552913e15c1cc25db0f377961"}]}