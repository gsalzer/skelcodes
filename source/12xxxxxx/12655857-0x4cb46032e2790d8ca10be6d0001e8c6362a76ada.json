{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FujiAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.12 <0.8.0;\\r\\n\\r\\nimport { IFujiAdmin } from \\\"./IFujiAdmin.sol\\\";\\r\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract FujiAdmin is IFujiAdmin, Ownable {\\r\\n  address private _flasher;\\r\\n  address private _fliquidator;\\r\\n  address payable private _ftreasury;\\r\\n  address private _controller;\\r\\n  address private _aWhiteList;\\r\\n  address private _vaultHarvester;\\r\\n\\r\\n  mapping(address => bool) public override validVault;\\r\\n\\r\\n  struct Factor {\\r\\n    uint64 a;\\r\\n    uint64 b;\\r\\n  }\\r\\n\\r\\n  // Bonus Factor for Flash Liquidation\\r\\n  Factor public bonusFlashL;\\r\\n\\r\\n  // Bonus Factor for normal Liquidation\\r\\n  Factor public bonusL;\\r\\n\\r\\n  constructor() {\\r\\n    // 0.043\\r\\n    bonusFlashL.a = 43;\\r\\n    bonusFlashL.b = 1000;\\r\\n\\r\\n    // 0.05\\r\\n    bonusL.a = 1;\\r\\n    bonusL.b = 20;\\r\\n  }\\r\\n\\r\\n  // Setter Functions\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the flasher contract address\\r\\n   * @param _newFlasher: flasher address\\r\\n   */\\r\\n  function setFlasher(address _newFlasher) external onlyOwner {\\r\\n    _flasher = _newFlasher;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the fliquidator contract address\\r\\n   * @param _newFliquidator: new fliquidator address\\r\\n   */\\r\\n  function setFliquidator(address _newFliquidator) external onlyOwner {\\r\\n    _fliquidator = _newFliquidator;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the Treasury contract address\\r\\n   * @param _newTreasury: new Fuji Treasury address\\r\\n   */\\r\\n  function setTreasury(address payable _newTreasury) external onlyOwner {\\r\\n    _ftreasury = _newTreasury;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the controller contract address.\\r\\n   * @param _newController: controller address\\r\\n   */\\r\\n  function setController(address _newController) external onlyOwner {\\r\\n    _controller = _newController;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the Whitelistingcontract address\\r\\n   * @param _newAWhiteList: controller address\\r\\n   */\\r\\n  function setaWhitelist(address _newAWhiteList) external onlyOwner {\\r\\n    _aWhiteList = _newAWhiteList;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the VaultHarvester address\\r\\n   * @param _newVaultHarverster: controller address\\r\\n   */\\r\\n  function setVaultHarvester(address _newVaultHarverster) external onlyOwner {\\r\\n    _vaultHarvester = _newVaultHarverster;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Set Factors \\\"a\\\" and \\\"b\\\" for a Struct Factor\\r\\n   * For bonusL; Sets the Bonus for normal Liquidation, should be < 1, a/b\\r\\n   * For bonusFlashL; Sets the Bonus for flash Liquidation, should be < 1, a/b\\r\\n   * @param _newFactorA: A number\\r\\n   * @param _newFactorB: A number\\r\\n   * @param _isbonusFlash: is bonusFlashFactor\\r\\n   */\\r\\n  function setFactor(\\r\\n    uint64 _newFactorA,\\r\\n    uint64 _newFactorB,\\r\\n    bool _isbonusFlash\\r\\n  ) external onlyOwner {\\r\\n    if (_isbonusFlash) {\\r\\n      bonusFlashL.a = _newFactorA;\\r\\n      bonusFlashL.b = _newFactorB;\\r\\n    } else {\\r\\n      bonusL.a = _newFactorA;\\r\\n      bonusL.b = _newFactorB;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Adds a Vault.\\r\\n   * @param _vaultAddr: Address of vault to be added\\r\\n   */\\r\\n  function addVault(address _vaultAddr) external onlyOwner {\\r\\n    validVault[_vaultAddr] = true;\\r\\n  }\\r\\n\\r\\n  // Getter Functions\\r\\n\\r\\n  function getFlasher() external view override returns (address) {\\r\\n    return _flasher;\\r\\n  }\\r\\n\\r\\n  function getFliquidator() external view override returns (address) {\\r\\n    return _fliquidator;\\r\\n  }\\r\\n\\r\\n  function getTreasury() external view override returns (address payable) {\\r\\n    return _ftreasury;\\r\\n  }\\r\\n\\r\\n  function getController() external view override returns (address) {\\r\\n    return _controller;\\r\\n  }\\r\\n\\r\\n  function getaWhiteList() external view override returns (address) {\\r\\n    return _aWhiteList;\\r\\n  }\\r\\n\\r\\n  function getVaultHarvester() external view override returns (address) {\\r\\n    return _vaultHarvester;\\r\\n  }\\r\\n\\r\\n  function getBonusFlashL() external view override returns (uint64, uint64) {\\r\\n    return (bonusFlashL.a, bonusFlashL.b);\\r\\n  }\\r\\n\\r\\n  function getBonusLiq() external view override returns (uint64, uint64) {\\r\\n    return (bonusL.a, bonusL.b);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/IFujiAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.12 <0.8.0;\\r\\n\\r\\ninterface IFujiAdmin {\\r\\n  function validVault(address _vaultAddr) external view returns (bool);\\r\\n\\r\\n  function getFlasher() external view returns (address);\\r\\n\\r\\n  function getFliquidator() external view returns (address);\\r\\n\\r\\n  function getController() external view returns (address);\\r\\n\\r\\n  function getTreasury() external view returns (address payable);\\r\\n\\r\\n  function getaWhiteList() external view returns (address);\\r\\n\\r\\n  function getVaultHarvester() external view returns (address);\\r\\n\\r\\n  function getBonusFlashL() external view returns (uint64, uint64);\\r\\n\\r\\n  function getBonusLiq() external view returns (uint64, uint64);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddr\",\"type\":\"address\"}],\"name\":\"addVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusFlashL\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"a\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"b\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusL\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"a\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"b\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBonusFlashL\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBonusLiq\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFlasher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFliquidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultHarvester\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getaWhiteList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_newFactorA\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_newFactorB\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"_isbonusFlash\",\"type\":\"bool\"}],\"name\":\"setFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFlasher\",\"type\":\"address\"}],\"name\":\"setFlasher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFliquidator\",\"type\":\"address\"}],\"name\":\"setFliquidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newTreasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newVaultHarverster\",\"type\":\"address\"}],\"name\":\"setVaultHarvester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAWhiteList\",\"type\":\"address\"}],\"name\":\"setaWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FujiAdmin","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}