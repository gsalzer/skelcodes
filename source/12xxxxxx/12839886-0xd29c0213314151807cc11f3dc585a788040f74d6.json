{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n        GDF Lotto\r\n    --------------\r\n    \r\n    - 1 ticket = 1 Finney = 0.001 ETH = 1000000000000000 Wei = 1e15 Wei\r\n    \r\n    - tickets are calculated by (received balance / 1 finney) = no. of tickets\r\n    \r\n    - max no. of tickects to be obtained is 100 at a time\r\n    \r\n    - raffle draw is executed every [raffleBlocks], default is 6500 blocks, avg. 1 day\r\n    \r\n    - raffle winner takes 99% of the raffle jackpot, 1% goes to the contract address\r\n    \r\n    - after each draw, all sold tickets are reset \r\n    \r\n    - completed raffle draw info are kept in [raffles] array [block no, pot, winner]\r\n    \r\n    - current running pot is in [jackpot]\r\n    \r\n*/\r\n\r\n\r\ncontract GDFLotto {\r\n    \r\n    // Public variables of the token\r\n    address public admin;                                   // contract creator address\r\n    address public gdf;                                     // gdf address to hold gdf 1% share\r\n    \r\n    string public name;\r\n    string public symbol;\r\n    uint public decimals;\r\n    \r\n    uint public raffleBlocks;                               // raffle execution cycle;\r\n    \r\n    uint public jackpot;                                    // holds total no. of tickets in pool\r\n    \r\n    mapping (address => uint) public playerTickets;         // holds number of tickets for each address\r\n    address[] public raffleTickets;                         // puts addresses in raffle pool     \r\n    address[] rafflePlayers;                                // holds addresses for current raffle\r\n\r\n    uint denomination = 1000000000000000;                   // 1 finney in wei (1e15)\r\n    \r\n    // raffle history struct\r\n    struct Raffle {\r\n        uint        block;                                  // block number\r\n        uint        pot;                                    // raffle pot prize\r\n        address     winner;                                 // raffle winner address\r\n    }\r\n    \r\n    Raffle[] public raffles;                                // raffles history array\r\n    \r\n\r\n    constructor() {\r\n        admin = msg.sender;                                 // set admin owner address\r\n        name = 'GDF Lotto';                                 // token name\r\n        symbol = 'GDFL';                                    // token symbol\r\n        decimals = 18;                                      // token decimals\r\n        gdf = 0xf5374706FA64148b3Bf4FE8FbD054bCA10814C5D;   // address where 1% goes   \r\n        raffleBlocks = 6500;                                // initial cycle every 1 day\r\n        \r\n        raffles.push(Raffle(block.number, 0, msg.sender));  // set to keep count of block numbers\r\n    }\r\n\r\n    // returns contract's balance\r\n    function contractBalance() external view returns(uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    // buy raffle ticket\r\n    function buyTicket() external payable returns (bool success) {\r\n    \r\n        // check for min. buy in\r\n        require(msg.value > denomination);\r\n\r\n        // generate tickets from sent value\r\n        uint tickets = msg.value / denomination;\r\n        \r\n        // only 100 tickets could be bought at one timestamp\r\n        require(tickets <= 100);\r\n\r\n        // add tickets to player\r\n        playerTickets[msg.sender] += tickets;\r\n        \r\n        // increment pool with new tickets\r\n        jackpot += tickets;\r\n        \r\n        // add sender address to tickets pool\r\n        for (uint i = 0; i < tickets; i++) {\r\n            raffleTickets.push(msg.sender);\r\n        }\r\n        \r\n        // check if player is in pool\r\n        require(checkPlayer(msg.sender));\r\n        \r\n        // check if raffle draw is due (with min. 3 players)\r\n        if((block.number - raffles[raffles.length - 1].block >= raffleBlocks) && (rafflePlayers.length > 3)) {\r\n            raffleDraw();\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n    \r\n    // check if player address is in array \r\n    function checkPlayer(address _addr) private returns (bool success) {\r\n        for (uint i = 0; i < rafflePlayers.length; i++) {\r\n            if(rafflePlayers[i] == _addr) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        // if not, then add new player to pool\r\n        rafflePlayers.push(_addr);\r\n\r\n        return true;\r\n    }\r\n    \r\n    // run the raffle draw \r\n    function raffleDraw() private returns (bool success) {\r\n        \r\n        // get winner random slot [array index]\r\n        uint winnerIndex = random() % raffleTickets.length;\r\n        \r\n        // winner pot is 99% of the total pot\r\n        uint winnerPot = (address(this).balance / 100) * 99;\r\n        \r\n        // winner address\r\n        address winnerAddr = raffleTickets[winnerIndex];\r\n\r\n        // record raffle winner\r\n        raffles.push(Raffle(block.number, winnerPot, winnerAddr));\r\n        \r\n        // reset players balance\r\n        for (uint i = 0; i < rafflePlayers.length; i++) {\r\n            playerTickets[rafflePlayers[i]] = 0;\r\n        }\r\n\r\n        // reset raffle pool\r\n        jackpot = 0;\r\n        delete raffleTickets;\r\n        delete rafflePlayers;\r\n    \r\n        // send pot to winner\r\n        payable(winnerAddr).transfer(winnerPot);\r\n        \r\n        return true;\r\n        \r\n    }\r\n\r\n    // generate a radnom pick from players pool [array index]\r\n    function random() private view returns (uint) {\r\n        return uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp, raffleTickets.length)));\r\n\r\n    }\r\n    \r\n    // allows to inject ether into contract\r\n    function inject() external payable returns (bool success){\r\n        // only admin can enlist tokens\r\n        require(msg.sender == admin);\r\n        \r\n        return true;\r\n    }\r\n\r\n    // allows to withdraw to GDF account\r\n    function withdraw(uint _amount) external returns (bool success) {\r\n\r\n        // only admin can enlist tokens\r\n        require(msg.sender == admin);\r\n\r\n         // send pot to winner\r\n        payable(gdf).transfer(_amount);\r\n       \r\n        return true;\r\n    }\r\n\r\n    // can reset the raffle execution cycle \r\n    function setRaffleBlocks(uint _blocks) external returns (bool success) {\r\n        // only admin can enlist tokens\r\n        require(msg.sender == admin);\r\n        \r\n        raffleBlocks = _blocks;\r\n        \r\n        return true;\r\n        \r\n    }\r\n\r\n    // can reset the gdf withdraw address \r\n    function setWithdrawAddr(address _addr) external returns (bool success) {\r\n        // only admin can enlist tokens\r\n        require(msg.sender == admin);\r\n        \r\n        gdf = _addr;\r\n        \r\n        return true;\r\n        \r\n    }\r\n    \r\n    // fallback functions\r\n    fallback() external payable {}\r\n    receive() external payable {}\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTicket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gdf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inject\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raffleBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"raffleTickets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"raffles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pot\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blocks\",\"type\":\"uint256\"}],\"name\":\"setRaffleBlocks\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setWithdrawAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"GDFLotto","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8323023596f222e9628f60bdd247e732e7104ea620d3bbee855cf3a4c3a57a54"}]}