{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CoverPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC20/SafeERC20.sol\\\";\\nimport \\\"./ERC20/IERC20.sol\\\";\\nimport \\\"./proxy/InitializableAdminUpgradeabilityProxy.sol\\\";\\nimport \\\"./utils/Create2.sol\\\";\\nimport \\\"./utils/Initializable.sol\\\";\\nimport \\\"./utils/Ownable.sol\\\";\\nimport \\\"./utils/ReentrancyGuard.sol\\\";\\nimport \\\"./utils/StringHelper.sol\\\";\\nimport \\\"./interfaces/ICover.sol\\\";\\nimport \\\"./interfaces/IOwnable.sol\\\";\\nimport \\\"./interfaces/IClaimManagement.sol\\\";\\nimport \\\"./interfaces/ICoverPool.sol\\\";\\nimport \\\"./interfaces/ICoverPoolCallee.sol\\\";\\nimport \\\"./interfaces/ICoverPoolFactory.sol\\\";\\n\\n/**\\n * @title CoverPool contract, manages risks, and covers for pool, handles adding coverage for user\\n * @author crypto-pumpkin\\n * CoverPool types:\\n * - extendable pool: allowed to add and delete risk\\n * - non-extendable pool: NOT allowed to add risk, but allowed to delete risk\\n */\\ncontract CoverPool is ICoverPool, Initializable, ReentrancyGuard, Ownable {\\n  using SafeERC20 for IERC20;\\n\\n  bytes4 private constant COVER_INIT_SIGNITURE = bytes4(keccak256(\\\"initialize(string,uint48,address,uint256,uint256)\\\"));\\n  bytes32 public constant CALLBACK_SUCCESS = keccak256(\\\"ICoverPoolCallee.onFlashMint\\\");\\n\\n  string public override name;\\n  bool public override extendablePool;\\n  Status public override poolStatus; // only Active coverPool status can addCover (aka. minting more covTokens)\\n  bool public override addingRiskWIP;\\n  uint256 public override addingRiskIndex; // index of the active cover array to continue adding risk\\n  uint256 public override claimNonce; // nonce of for the coverPool's accepted claims\\n  uint256 public override noclaimRedeemDelay; // delay for redeem with only noclaim tokens for expired cover with no accpeted claim\\n\\n  ClaimDetails[] private claimDetails; // [claimNonce] => accepted ClaimDetails\\n  address[] public override activeCovers; // reset once claim accepted, may contain expired covers, used mostly for adding new risk to pool for faster deployment\\n  address[] public override allCovers; // all covers ever created\\n  uint48[] public override expiries; // all expiries ever added\\n  address[] public override collaterals; // all collaterals ever added\\n  bytes32[] public override riskList; // list of active risks in cover pool\\n  bytes32[] public override deletedRiskList;\\n  // riskMap is only used to check is a risk is already added or deleted\\n  mapping(bytes32 => Status) public override riskMap;\\n  mapping(address => CollateralInfo) public override collateralStatusMap;\\n  mapping(uint48 => ExpiryInfo) public override expiryInfoMap;\\n  // collateral => timestamp => coverAddress, most recent (might be expired) cover created for the collateral and timestamp combination\\n  mapping(address => mapping(uint48 => address)) public override coverMap;\\n\\n  modifier onlyDev() {\\n    require(msg.sender == _dev(), \\\"CP: caller not dev\\\");\\n    _;\\n  }\\n\\n  modifier onlyNotAddingRiskWIP() {\\n    require(!addingRiskWIP, \\\"CP: adding risk WIP\\\");\\n    _;\\n  }\\n\\n  /// @dev Initialize, called once\\n  function initialize (\\n    string calldata _coverPoolName,\\n    bool _extendablePool,\\n    string[] calldata _riskList,\\n    address _collateral,\\n    uint256 _mintRatio,\\n    uint48 _expiry,\\n    string calldata _expiryString\\n  ) external initializer {\\n    require(_collateral != address(0), \\\"CP: collateral cannot be 0\\\");\\n    initializeOwner();\\n    name = _coverPoolName;\\n    extendablePool = _extendablePool;\\n    _setCollateral(_collateral, _mintRatio, Status.Active);\\n    _setExpiry(_expiry, _expiryString, Status.Active);\\n\\n    for (uint256 j = 0; j < _riskList.length; j++) {\\n      bytes32 risk = StringHelper.stringToBytes32(_riskList[j]);\\n      require(riskMap[risk] == Status.Null, \\\"CP: duplicated risks\\\");\\n      riskList.push(risk);\\n      riskMap[risk] = Status.Active;\\n      emit RiskUpdated(risk, true);\\n    }\\n\\n    noclaimRedeemDelay = _factory().defaultRedeemDelay(); // Claim manager can set it 10 days when claim filed\\n    emit NoclaimRedeemDelayUpdated(0, noclaimRedeemDelay);\\n    poolStatus = Status.Active;\\n    deployCover(_collateral, _expiry);\\n  }\\n\\n  /**\\n   * @notice add coverage (with expiry) for sender, collateral is transferred here to optimize collateral approve tx for users\\n   * @param _collateral, collateral for cover, must be supported and active\\n   * @param _expiry, expiry for cover, must be supported and active\\n   * @param _receiver, receiver of the covTokens, must have _colAmountIn\\n   * @param _colAmountIn, the amount of collateral to transfer from msg.sender (must approve pool to transfer), should be > _amountOut for inflationary tokens\\n   * @param _amountOut, the amount of collateral to use to mint covTokens, equals to _colAmountIn if collateral is standard ERC20\\n   * @param _data, the data to use to call msg.sender, set to '0x' if normal mint\\n   */\\n  function addCover(\\n    address _collateral,\\n    uint48 _expiry,\\n    address _receiver,\\n    uint256 _colAmountIn,\\n    uint256 _amountOut,\\n    bytes calldata _data\\n  ) external override nonReentrant onlyNotAddingRiskWIP\\n  {\\n    require(!_factory().paused(), \\\"CP: paused\\\");\\n    require(poolStatus == Status.Active, \\\"CP: pool not active\\\");\\n    require(_colAmountIn > 0, \\\"CP: amount <= 0\\\");\\n    require(collateralStatusMap[_collateral].status == Status.Active, \\\"CP: invalid collateral\\\");\\n    require(block.timestamp < _expiry && expiryInfoMap[_expiry].status == Status.Active, \\\"CP: invalid expiry\\\");\\n    address coverAddr = coverMap[_collateral][_expiry];\\n    require(coverAddr != address(0), \\\"CP: cover not deployed yet\\\");\\n    ICover cover = ICover(coverAddr);\\n\\n    // support flash mint\\n    cover.mint(_amountOut, _receiver);\\n    if (_data.length > 0) {\\n      require(\\n        ICoverPoolCallee(_receiver).onFlashMint(msg.sender, _collateral, _colAmountIn, _amountOut, _data) == CALLBACK_SUCCESS,\\n        \\\"CP: Callback failed\\\"\\n      );\\n    }\\n\\n    IERC20 collateral = IERC20(_collateral);\\n    uint256 coverBalanceBefore = collateral.balanceOf(coverAddr);\\n    collateral.safeTransferFrom(_receiver, coverAddr, _colAmountIn);\\n    uint256 received = collateral.balanceOf(coverAddr) - coverBalanceBefore;\\n    require(received >= _amountOut, \\\"CP: collateral transfer failed\\\");\\n\\n    emit CoverAdded(coverAddr, _receiver, _amountOut);\\n  }\\n\\n  /**\\n   * @notice add risk to pool, true if add complete; false if incomplete.\\n   * - previously deleted risk not allowed.\\n   * - Can be called as much as needed till addingRiskWIP is false\\n   */\\n  function addRisk(string calldata _risk) external override onlyDev returns (bool) {\\n    require(extendablePool, \\\"CP: not extendable pool\\\");\\n    bytes32 risk = StringHelper.stringToBytes32(_risk);\\n    require(riskMap[risk] != Status.Disabled, \\\"CP: deleted risk not allowed\\\");\\n\\n    if (riskMap[risk] == Status.Null) {\\n      // first time adding the risk, make sure no other risk adding in progress\\n      require(!addingRiskWIP, \\\"CP: adding risk WIP\\\");\\n      addingRiskWIP = true;\\n      riskMap[risk] = Status.Active;\\n      riskList.push(risk);\\n    }\\n\\n    // update all active covers with new risk by deploying claim and new future covTokens for each cover contract\\n    address[] memory activeCoversCopy = activeCovers;\\n\\n    uint256 startGas = gasleft();\\n    for (uint256 i = addingRiskIndex; i < activeCoversCopy.length; i++) {\\n      addingRiskIndex = i;\\n      // ensure enough gas left to avoid revert all the previous work\\n      if (startGas < _factory().deployGasMin()) return false;\\n      // below call deploys two covToken contracts, if cover already added, call will do nothing\\n      ICover(activeCoversCopy[i]).addRisk(risk);\\n      startGas = gasleft();\\n    }\\n\\n    addingRiskWIP = false;\\n    addingRiskIndex = 0;\\n    emit RiskUpdated(risk, true);\\n    return true;\\n  }\\n\\n  /// @notice delete risk from pool\\n  function deleteRisk(string calldata _risk) external override onlyDev onlyNotAddingRiskWIP {\\n    bytes32 risk = StringHelper.stringToBytes32(_risk);\\n    require(riskMap[risk] == Status.Active, \\\"CP: not active risk\\\");\\n    bytes32[] memory riskListCopy = riskList; // save gas\\n    uint256 len = riskListCopy.length;\\n    require(len > 1, \\\"CP: only 1 risk left\\\");\\n    IClaimManagement claimManager = IClaimManagement(_factory().claimManager());\\n    require(!claimManager.hasPendingClaim(address(this), claimNonce), \\\"CP: pending claim\\\");\\n\\n\\n    for (uint256 i = 0; i < len; i++) {\\n      if (risk == riskListCopy[i]) {\\n        riskMap[risk] = Status.Disabled;\\n        deletedRiskList.push(risk);\\n        riskList[i] = riskListCopy[len - 1];\\n        riskList.pop();\\n        emit RiskUpdated(risk, false);\\n        break;\\n      }\\n    }\\n  }\\n\\n  /// @notice update status or add new expiry\\n  function setExpiry(uint48 _expiry, string calldata _expiryStr, Status _status) public override onlyDev {\\n    _setExpiry(_expiry, _expiryStr, _status);\\n  }\\n\\n  /// @notice update status or add new collateral\\n  function setCollateral(address _collateral, uint256 _mintRatio, Status _status) public override onlyDev {\\n    _setCollateral(_collateral, _mintRatio, _status);\\n  }\\n\\n  // update status of coverPool, if disabled, will pause new cover creation\\n  function setPoolStatus(Status _poolStatus) external override onlyDev {\\n    emit PoolStatusUpdated(poolStatus, _poolStatus);\\n    poolStatus = _poolStatus;\\n  }\\n\\n  function setNoclaimRedeemDelay(uint256 _noclaimRedeemDelay) external override {\\n    ICoverPoolFactory factory = _factory();\\n    require(msg.sender == _dev() || msg.sender == factory.claimManager(), \\\"CP: caller not gov/claimManager\\\");\\n    require(_noclaimRedeemDelay >= factory.defaultRedeemDelay(), \\\"CP: < default delay\\\");\\n    require(_noclaimRedeemDelay <= factory.MAX_REDEEM_DELAY(), \\\"CP: > max delay\\\");\\n    if (_noclaimRedeemDelay != noclaimRedeemDelay) {\\n      emit NoclaimRedeemDelayUpdated(noclaimRedeemDelay, _noclaimRedeemDelay);\\n      noclaimRedeemDelay = _noclaimRedeemDelay;\\n    }\\n  }\\n\\n  /**\\n   * @dev enact accepted claim, all covers are to be paid out\\n   *  - increment claimNonce\\n   *  - delete activeCovers list\\n   * Emit ClaimEnacted\\n   */\\n  function enactClaim(\\n    bytes32[] calldata _payoutRiskList,\\n    uint256[] calldata _payoutRates,\\n    uint48 _incidentTimestamp,\\n    uint256 _coverPoolNonce\\n  ) external override {\\n    require(msg.sender == _factory().claimManager(), \\\"CP: caller not claimManager\\\");\\n    require(_coverPoolNonce == claimNonce, \\\"CP: nonces do not match\\\");\\n    require(_payoutRiskList.length == _payoutRates.length, \\\"CP: arrays length don't match\\\");\\n\\n    uint256 totalPayoutRate;\\n    for (uint256 i = 0; i < _payoutRiskList.length; i++) {\\n      require(riskMap[_payoutRiskList[i]] == Status.Active, \\\"CP: has disabled risk\\\");\\n      totalPayoutRate = totalPayoutRate + _payoutRates[i];\\n    }\\n    require(totalPayoutRate <= 1 ether && totalPayoutRate > 0, \\\"CP: payout % not in (0%, 100%]\\\");\\n\\n    claimNonce = claimNonce + 1;\\n    delete activeCovers;\\n    claimDetails.push(ClaimDetails(\\n      _incidentTimestamp,\\n      uint48(block.timestamp),\\n      totalPayoutRate,\\n      _payoutRiskList,\\n      _payoutRates\\n    ));\\n    emit ClaimEnacted(_coverPoolNonce);\\n  }\\n\\n  function getCoverPoolDetails() external view override\\n    returns (\\n      address[] memory _collaterals,\\n      uint48[] memory _expiries,\\n      bytes32[] memory _riskList,\\n      bytes32[] memory _deletedRiskList,\\n      address[] memory _allCovers)\\n  {\\n    return (collaterals, expiries, riskList, deletedRiskList, allCovers);\\n  }\\n\\n  function getRiskList() external view override returns (bytes32[] memory) {\\n    return riskList;\\n  }\\n\\n  function getClaimDetails(uint256 _nonce) external view override returns (ClaimDetails memory) {\\n    return claimDetails[_nonce];\\n  }\\n\\n  /**\\n   * @notice deploy Cover contracts with all necessary covTokens\\n   * Will only deploy or complete existing deployment if necessary.\\n   * Safe to call by anyone, make it convinient operationally to deploy a new cover for pool\\n   */\\n  function deployCover(address _collateral, uint48 _expiry) public override returns (address addr) {\\n    addr = coverMap[_collateral][_expiry];\\n\\n    // Deploy new cover contract if not exist or if claim accepted\\n    if (addr == address(0) || ICover(addr).claimNonce() < claimNonce) {\\n      require(collateralStatusMap[_collateral].status == Status.Active, \\\"CP: invalid collateral\\\");\\n      require(block.timestamp < _expiry && expiryInfoMap[_expiry].status == Status.Active, \\\"CP: invalid expiry\\\");\\n\\n      string memory coverName = _getCoverName(_expiry, IERC20(_collateral).symbol());\\n      bytes memory bytecode = type(InitializableAdminUpgradeabilityProxy).creationCode;\\n      bytes32 salt = keccak256(abi.encodePacked(name, _expiry, _collateral, claimNonce));\\n      addr = Create2.deploy(0, salt, bytecode);\\n      bytes memory initData = abi.encodeWithSelector(COVER_INIT_SIGNITURE, coverName, _expiry, _collateral, collateralStatusMap[_collateral].mintRatio, claimNonce);\\n      address coverImpl = _factory().coverImpl();\\n      InitializableAdminUpgradeabilityProxy(payable(addr)).initialize(\\n        coverImpl,\\n        IOwnable(owner()).owner(),\\n        initData\\n      );\\n      activeCovers.push(addr);\\n      allCovers.push(addr);\\n      coverMap[_collateral][_expiry] = addr;\\n      emit CoverCreated(addr);\\n    } else if (!ICover(addr).deployComplete()) {\\n      ICover(addr).deploy();\\n    }\\n  }\\n\\n  function _factory() private view returns (ICoverPoolFactory) {\\n    return ICoverPoolFactory(owner());\\n  }\\n\\n  // the owner of this contract is CoverPoolFactory, whose owner is dev\\n  function _dev() private view returns (address) {\\n    return IOwnable(owner()).owner();\\n  }\\n\\n  function _setExpiry(uint48 _expiry, string calldata _expiryStr, Status _status) private {\\n    require(block.timestamp < _expiry, \\\"CP: expiry in the past\\\");\\n    require(_status != Status.Null, \\\"CP: status is null\\\");\\n\\n    if (expiryInfoMap[_expiry].status == Status.Null) {\\n      expiries.push(_expiry);\\n    }\\n    expiryInfoMap[_expiry] = ExpiryInfo(_expiryStr, _status);\\n    emit ExpiryUpdated(_expiry, _expiryStr, _status);\\n  }\\n\\n  function _setCollateral(address _collateral, uint256 _mintRatio, Status _status) private {\\n    require(_collateral != address(0), \\\"CP: address cannot be 0\\\");\\n    require(_status != Status.Null, \\\"CP: status is null\\\");\\n\\n    if (collateralStatusMap[_collateral].status == Status.Null) {\\n      collaterals.push(_collateral);\\n    }\\n    collateralStatusMap[_collateral] = CollateralInfo(_mintRatio, _status);\\n    emit CollateralUpdated(_collateral, _mintRatio,  _status);\\n  }\\n\\n  // generate the cover name. Example: 3POOL_0_DAI_12_31_21\\n  function _getCoverName(uint48 _expiry, string memory _collateralSymbol)\\n   private view returns (string memory)\\n  {\\n    require(bytes(_collateralSymbol).length > 0, \\\"CP: empty collateral symbol\\\");\\n    return string(abi.encodePacked(\\n      name, \\\"_\\\",\\n      StringHelper.uintToString(claimNonce), \\\"_\\\",\\n      _collateralSymbol, \\\"_\\\",\\n      expiryInfoMap[_expiry].name\\n    ));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) - value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function totalSupply() external view returns (uint256);\\n\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/proxy/InitializableAdminUpgradeabilityProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\n\\npragma solidity ^0.8.0;\\n\\nimport './BaseAdminUpgradeabilityProxy.sol';\\n\\n/**\\n * @title InitializableAdminUpgradeabilityProxy\\n * @dev Extends from BaseAdminUpgradeabilityProxy with an initializer for \\n * initializing the implementation, admin, and init data.\\n */\\ncontract InitializableAdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy {\\n  /**\\n   * Contract initializer.\\n   * @param _logic address of the initial implementation.\\n   * @param _admin Address of the proxy administrator.\\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\\n   * It should include the signature and the parameters of the function to be called, as -described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\\n   */\\n  function initialize(address _logic, address _admin, bytes memory _data) public payable {\\n    require(_implementation() == address(0));\\n\\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\\n    _setImplementation(_logic);\\n    if(_data.length > 0) {\\n      (bool success,) = _logic.delegatecall(_data);\\n      require(success);\\n    }\\n\\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\\n    _setAdmin(_admin);\\n  }\\n}\"\r\n    },\r\n    \"contracts/utils/Create2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address payable) {\\n        address payable addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\\n        bytes32 _data = keccak256(\\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\\n        );\\n        return address(uint160(uint256(_data)));\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IOwnable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n * @author crypto-pumpkin\\n *\\n * By initialization, the owner account will be the one that called initializeOwner. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Initializable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev COVER: Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function initializeOwner() internal initializer {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/StringHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Cover contract interface. See {Cover}.\\n * @author crypto-pumpkin\\n * Help convert other types to string\\n */\\nlibrary StringHelper {\\n  function stringToBytes32(string calldata str) internal pure returns (bytes32 result) {\\n    bytes memory strBytes = abi.encodePacked(str);\\n    assembly {\\n      result := mload(add(strBytes, 32))\\n    }\\n  }\\n\\n  function bytes32ToString(bytes32 _bytes32) internal pure returns (string memory) {\\n    uint8 i = 0;\\n    while(i < 32 && _bytes32[i] != 0) {\\n        i++;\\n    }\\n    bytes memory bytesArray = new bytes(i);\\n    for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\\n        bytesArray[i] = _bytes32[i];\\n    }\\n    return string(bytesArray);\\n  }\\n\\n  function uintToString(uint256 _i) internal pure returns (string memory _uintAsString) {\\n    if (_i == 0) {\\n      return '0';\\n    } else {\\n      bytes32 ret;\\n      while (_i > 0) {\\n        ret = bytes32(uint(ret) / (2 ** 8));\\n        ret |= bytes32(((_i % 10) + 48) * 2 ** (8 * 31));\\n        _i /= 10;\\n      }\\n      _uintAsString = bytes32ToString(ret);\\n    }\\n  }\\n}\"\r\n    },\r\n    \"contracts/interfaces/ICover.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ICoverERC20.sol\\\";\\n\\n/**\\n * @title Cover interface\\n * @author crypto-pumpkin\\n */\\ninterface ICover {\\n  event CovTokenCreated(address);\\n  event CoverDeployCompleted();\\n  event Redeemed(string _type, address indexed _account, uint256 _amount);\\n  event FutureTokenConverted(address indexed _futureToken, address indexed claimCovToken, uint256 _amount);\\n\\n  // state vars\\n  function BASE_SCALE() external view returns (uint256);\\n  function deployComplete() external view returns (bool);\\n  function expiry() external view returns (uint48);\\n  function collateral() external view returns (address);\\n  function noclaimCovToken() external view returns (ICoverERC20);\\n  function name() external view returns (string memory);\\n  function feeRate() external view returns (uint256);\\n  function totalCoverage() external view returns (uint256);\\n  function mintRatio() external view returns (uint256);\\n  /// @notice created as initialization, cannot be changed\\n  function claimNonce() external view returns (uint256);\\n  function futureCovTokens(uint256 _index) external view returns (ICoverERC20);\\n  function claimCovTokenMap(bytes32 _risk) external view returns (ICoverERC20);\\n  function futureCovTokenMap(ICoverERC20 _futureCovToken) external view returns (ICoverERC20 _claimCovToken);\\n\\n  // extra view\\n  function viewRedeemable(address _account, uint256 _coverageAmt) external view returns (uint256);\\n  function getCovTokens() external view\\n    returns (\\n      ICoverERC20 _noclaimCovToken,\\n      ICoverERC20[] memory _claimCovTokens,\\n      ICoverERC20[] memory _futureCovTokens);\\n\\n  // user action\\n  function deploy() external;\\n  /// @notice convert futureTokens to claimTokens\\n  function convert(ICoverERC20[] calldata _futureTokens) external;\\n  /// @notice redeem func when there is a claim on the cover, aka. the cover is affected\\n  function redeemClaim() external;\\n  /// @notice redeem func when the cover is not affected by any accepted claim, _amount is respected only when when no claim accepted before expiry (for cover with expiry)\\n  function redeem(uint256 _amount) external;\\n  function collectFees() external;\\n\\n  // access restriction - owner (CoverPool)\\n  function mint(uint256 _amount, address _receiver) external;\\n  function addRisk(bytes32 _risk) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Interface of Ownable\\n */\\ninterface IOwnable {\\n    function owner() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IClaimManagement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ClaimManagement contract interface. See {ClaimManagement}.\\n * @author Alan + crypto-pumpkin\\n */\\ninterface IClaimManagement {\\n  event ClaimUpdate(address indexed coverPool, ClaimState state, uint256 nonce, uint256 index);\\n\\n  enum ClaimState { Filed, ForceFiled, Validated, Invalidated, Accepted, Denied }\\n  struct Claim {\\n    address filedBy; // Address of user who filed claim\\n    address decidedBy; // Address of the CVC who decided claim\\n    uint48 filedTimestamp; // Timestamp of submitted claim\\n    uint48 incidentTimestamp; // Timestamp of the incident the claim is filed for\\n    uint48 decidedTimestamp; // Timestamp when claim outcome is decided\\n    string description;\\n    ClaimState state; // Current state of claim\\n    uint256 feePaid; // Fee paid to file the claim\\n    bytes32[] payoutRiskList;\\n    uint256[] payoutRates; // Numerators of percent to payout\\n  }\\n\\n  function getCoverPoolClaims(address _coverPool, uint256 _nonce, uint256 _index) external view returns (Claim memory);\\n  function getAllClaimsByState(address _coverPool, uint256 _nonce, ClaimState _state) external view returns (Claim[] memory);\\n  function getAllClaimsByNonce(address _coverPool, uint256 _nonce) external view returns (Claim[] memory);\\n  function hasPendingClaim(address _coverPool, uint256 _nonce) external view returns (bool);\\n\\n  function fileClaim(\\n    string calldata _coverPoolName,\\n    bytes32[] calldata _exploitRisks,\\n    uint48 _incidentTimestamp,\\n    string calldata _description,\\n    bool _isForceFile\\n  ) external;\\n  \\n  // @dev Only callable by dev when auditor is voting\\n  function validateClaim(address _coverPool, uint256 _nonce, uint256 _index, bool _claimIsValid) external;\\n\\n  // @dev Only callable by CVC\\n  function decideClaim(\\n    address _coverPool,\\n    uint256 _nonce,\\n    uint256 _index,\\n    uint48 _incidentTimestamp,\\n    bool _claimIsAccepted,\\n    bytes32[] calldata _exploitRisks,\\n    uint256[] calldata _payoutRates\\n  ) external;\\n }\"\r\n    },\r\n    \"contracts/interfaces/ICoverPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev CoverPool contract interface. See {CoverPool}.\\n * @author crypto-pumpkin\\n */\\ninterface ICoverPool {\\n  event CoverCreated(address indexed);\\n  event CoverAdded(address indexed _cover, address _acount, uint256 _amount);\\n  event NoclaimRedeemDelayUpdated(uint256 _oldDelay, uint256 _newDelay);\\n  event ClaimEnacted(uint256 _enactedClaimNonce);\\n  event RiskUpdated(bytes32 _risk, bool _isAddRisk);\\n  event PoolStatusUpdated(Status _old, Status _new);\\n  event ExpiryUpdated(uint48 _expiry, string _expiryStr,  Status _status);\\n  event CollateralUpdated(address indexed _collateral, uint256 _mintRatio,  Status _status);\\n\\n  enum Status { Null, Active, Disabled }\\n\\n  struct ExpiryInfo {\\n    string name;\\n    Status status;\\n  }\\n  struct CollateralInfo {\\n    uint256 mintRatio;\\n    Status status;\\n  }\\n  struct ClaimDetails {\\n    uint48 incidentTimestamp;\\n    uint48 claimEnactedTimestamp;\\n    uint256 totalPayoutRate;\\n    bytes32[] payoutRiskList;\\n    uint256[] payoutRates;\\n  }\\n\\n  // state vars\\n  function name() external view returns (string memory);\\n  function extendablePool() external view returns (bool);\\n  function poolStatus() external view returns (Status _status);\\n  /// @notice only active (true) coverPool allows adding more covers (aka. minting more CLAIM and NOCLAIM tokens)\\n  function claimNonce() external view returns (uint256);\\n  function noclaimRedeemDelay() external view returns (uint256);\\n  function addingRiskWIP() external view returns (bool);\\n  function addingRiskIndex() external view returns (uint256);\\n  function activeCovers(uint256 _index) external view returns (address);\\n  function allCovers(uint256 _index) external view returns (address);\\n  function expiries(uint256 _index) external view returns (uint48);\\n  function collaterals(uint256 _index) external view returns (address);\\n  function riskList(uint256 _index) external view returns (bytes32);\\n  function deletedRiskList(uint256 _index) external view returns (bytes32);\\n  function riskMap(bytes32 _risk) external view returns (Status);\\n  function collateralStatusMap(address _collateral) external view returns (uint256 _mintRatio, Status _status);\\n  function expiryInfoMap(uint48 _expiry) external view returns (string memory _name, Status _status);\\n  function coverMap(address _collateral, uint48 _expiry) external view returns (address);\\n\\n  // extra view\\n  function getRiskList() external view returns (bytes32[] memory _riskList);\\n  function getClaimDetails(uint256 _claimNonce) external view returns (ClaimDetails memory);\\n  function getCoverPoolDetails()\\n    external view returns (\\n      address[] memory _collaterals,\\n      uint48[] memory _expiries,\\n      bytes32[] memory _riskList,\\n      bytes32[] memory _deletedRiskList,\\n      address[] memory _allCovers\\n    );\\n\\n  // user action\\n  /// @notice cover must be deployed first\\n  function addCover(\\n    address _collateral,\\n    uint48 _expiry,\\n    address _receiver,\\n    uint256 _colAmountIn,\\n    uint256 _amountOut,\\n    bytes calldata _data\\n  ) external;\\n  function deployCover(address _collateral, uint48 _expiry) external returns (address _coverAddress);\\n\\n  // access restriction - claimManager\\n  function enactClaim(\\n    bytes32[] calldata _payoutRiskList,\\n    uint256[] calldata _payoutRates,\\n    uint48 _incidentTimestamp,\\n    uint256 _coverPoolNonce\\n  ) external;\\n\\n  // CM and dev only\\n  function setNoclaimRedeemDelay(uint256 _noclaimRedeemDelay) external;\\n\\n  // access restriction - dev\\n  function addRisk(string calldata _risk) external returns (bool);\\n  function deleteRisk(string calldata _risk) external;\\n  function setExpiry(uint48 _expiry, string calldata _expiryName, Status _status) external;\\n  function setCollateral(address _collateral, uint256 _mintRatio, Status _status) external;\\n  function setPoolStatus(Status _poolStatus) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/ICoverPoolCallee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ICoverPoolCallee interface for flash mint\\n * @author crypto-pumpkin\\n */\\ninterface ICoverPoolCallee {\\n  /// @notice must return keccak256(\\\"ICoverPoolCallee.onFlashMint\\\")\\n  function onFlashMint(\\n    address _sender,\\n    address _paymentToken,\\n    uint256 _paymentAmount,\\n    uint256 _amountOut,\\n    bytes calldata _data\\n  ) external returns (bytes32);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ICoverPoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev CoverPoolFactory contract interface. See {CoverPoolFactory}.\\n * @author crypto-pumpkin\\n */\\ninterface ICoverPoolFactory {\\n  event CoverPoolCreated(address indexed _addr);\\n  event IntUpdated(string _type, uint256 _old, uint256 _new);\\n  event AddressUpdated(string _type, address indexed _old, address indexed _new);\\n  event PausedStatusUpdated(bool _old, bool _new);\\n\\n  // state vars\\n  function MAX_REDEEM_DELAY() external view returns (uint256);\\n  function defaultRedeemDelay() external view returns (uint256);\\n  // yearlyFeeRate is scaled 1e18\\n  function yearlyFeeRate() external view returns (uint256);\\n  function paused() external view returns (bool);\\n  function responder() external view returns (address);\\n  function coverPoolImpl() external view returns (address);\\n  function coverImpl() external view returns (address);\\n  function coverERC20Impl() external view returns (address);\\n  function treasury() external view returns (address);\\n  function claimManager() external view returns (address);\\n  /// @notice min gas left requirement before continue deployments (when creating new Cover or adding risks to CoverPool)\\n  function deployGasMin() external view returns (uint256);\\n  function coverPoolNames(uint256 _index) external view returns (string memory);\\n  function coverPools(string calldata _coverPoolName) external view returns (address);\\n\\n  // extra view\\n  function getCoverPools() external view returns (address[] memory);\\n  /// @notice return contract address, the contract may not be deployed yet\\n  function getCoverPoolAddress(string calldata _name) external view returns (address);\\n  function getCoverAddress(string calldata _coverPoolName, uint48 _timestamp, address _collateral, uint256 _claimNonce) external view returns (address);\\n  /// @notice _prefix example: \\\"C_CURVE\\\", \\\"C_FUT1\\\", or \\\"NC_\\\"\\n  function getCovTokenAddress(string calldata _coverPoolName, uint48 _expiry, address _collateral, uint256 _claimNonce, string memory _prefix) external view returns (address);\\n\\n  // access restriction - owner (dev) & responder\\n  function setPaused(bool _paused) external;\\n\\n  // access restriction - owner (dev)\\n  function setYearlyFeeRate(uint256 _yearlyFeeRate) external;\\n  function setDefaultRedeemDelay(uint256 _defaultRedeemDelay) external;\\n  function setResponder(address _responder) external;\\n  function setDeployGasMin(uint256 _deployGasMin) external;\\n  /// @dev update Impl will only affect contracts deployed after\\n  function setCoverPoolImpl(address _newImpl) external;\\n  function setCoverImpl(address _newImpl) external;\\n  function setCoverERC20Impl(address _newImpl) external;\\n  function setTreasury(address _address) external;\\n  function setClaimManager(address _address) external;\\n  /**\\n   * @notice Create a new Cover Pool\\n   * @param _name name for pool, e.g. Yearn\\n   * @param _extendablePool open pools allow adding new risk\\n   * @param _riskList risk risks that are covered in this pool\\n   * @param _collateral the collateral of the pool\\n   * @param _mintRatio 18 decimals, in (0, + infinity) the deposit ratio for the collateral the pool, 1.5 means =  1 collateral mints 1.5 CLAIM/NOCLAIM tokens\\n   * @param _expiry expiration date supported for the pool\\n   * @param _expiryString MONTH_DATE_YEAR, used to create covToken symbols only\\n   * \\n   * Emits CoverPoolCreated, add a supported coverPool in COVER\\n   */\\n  function createCoverPool(\\n    string calldata _name,\\n    bool _extendablePool,\\n    string[] calldata _riskList,\\n    address _collateral,\\n    uint256 _mintRatio,\\n    uint48 _expiry,\\n    string calldata _expiryString\\n  ) external returns (address);\\n}  \"\r\n    },\r\n    \"contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/proxy/BaseAdminUpgradeabilityProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport './BaseUpgradeabilityProxy.sol';\\n\\n/**\\n * @title BaseAdminUpgradeabilityProxy\\n * @dev This contract combines an upgradeability proxy with an authorization\\n * mechanism for administrative tasks.\\n * All external functions in this contract must be guarded by the\\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\\n * feature proposal that would enable this to be done automatically.\\n */\\ncontract BaseAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\\n  /**\\n   * @dev Emitted when the administration has been transferred.\\n   * @param previousAdmin Address of the previous admin.\\n   * @param newAdmin Address of the new admin.\\n   */\\n  event AdminChanged(address previousAdmin, address newAdmin);\\n\\n  /**\\n   * @dev Storage slot with the admin of the contract.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n\\n  bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  /**\\n   * @dev Modifier to check whether the `msg.sender` is the admin.\\n   * If it is, it will run the function. Otherwise, it will delegate the call\\n   * to the implementation.\\n   */\\n  modifier ifAdmin() {\\n    if (msg.sender == _admin()) {\\n      _;\\n    } else {\\n      _fallback();\\n    }\\n  }\\n\\n  /**\\n   * @return proxyAdmin The address of the proxy admin.\\n   */\\n  function admin() external ifAdmin returns (address proxyAdmin) {\\n    proxyAdmin = _admin();\\n  }\\n\\n  /**\\n   * @return impl The address of the implementation.\\n   */\\n  function implementation() external ifAdmin returns (address impl) {\\n    impl = _implementation();\\n  }\\n\\n  /**\\n   * @dev Changes the admin of the proxy.\\n   * Only the current admin can call this function.\\n   * @param newAdmin Address to transfer proxy administration to.\\n   */\\n  function changeAdmin(address newAdmin) external ifAdmin {\\n    require(newAdmin != address(0), \\\"Cannot change the admin of a proxy to the zero address\\\");\\n    emit AdminChanged(_admin(), newAdmin);\\n    _setAdmin(newAdmin);\\n  }\\n\\n  /**\\n   * @dev Upgrade the backing implementation of the proxy.\\n   * Only the admin can call this function.\\n   * @param newImplementation Address of the new implementation.\\n   */\\n  function upgradeTo(address newImplementation) external ifAdmin {\\n    _upgradeTo(newImplementation);\\n  }\\n\\n  /**\\n   * @dev Upgrade the backing implementation of the proxy and call a function\\n   * on the new implementation.\\n   * This is useful to initialize the proxied contract.\\n   * @param newImplementation Address of the new implementation.\\n   * @param data Data to send as msg.data in the low level call.\\n   * It should include the signature and the parameters of the function to be called, as -described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   */\\n  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\\n    _upgradeTo(newImplementation);\\n    (bool success,) = newImplementation.delegatecall(data);\\n    require(success);\\n  }\\n\\n  /**\\n   * @return adm The admin slot.\\n   */\\n  function _admin() internal view returns (address adm) {\\n    bytes32 slot = ADMIN_SLOT;\\n    assembly {\\n      adm := sload(slot)\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets the address of the proxy admin.\\n   * @param newAdmin Address of the new proxy admin.\\n   */\\n  function _setAdmin(address newAdmin) internal {\\n    bytes32 slot = ADMIN_SLOT;\\n\\n    assembly {\\n      sstore(slot, newAdmin)\\n    }\\n  }\\n} \"\r\n    },\r\n    \"contracts/proxy/BaseUpgradeabilityProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"./Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n * \\n * Upgradeability is only provided internally through {_upgradeTo}. For an externally upgradeable proxy see\\n * {TransparentUpgradeableProxy}.\\n */\\ncontract BaseUpgradeabilityProxy is Proxy {\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal override view returns (address impl) {\\n        bytes32 slot = IMPLEMENTATION_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            impl := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Upgrades the proxy to a new implementation.\\n     * \\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) internal {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableProxy: new implementation is not a contract\\\");\\n\\n        bytes32 slot = IMPLEMENTATION_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, newImplementation)\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n * \\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n * \\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     * \\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 { revert(0, returndatasize()) }\\n            default { return(0, returndatasize()) }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal virtual view returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     * \\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal {\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback () payable external {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive () payable external {\\n        _fallback();\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/ICoverERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title CoverERC20 contract interface, implements {IERC20}. See {CoverERC20}.\\n * @author crypto-pumpkin\\n */\\ninterface ICoverERC20 is IERC20 {\\n    /// @notice access restriction - owner (Cover)\\n    function mint(address _account, uint256 _amount) external returns (bool);\\n    function burnByCover(address _account, uint256 _amount) external returns (bool);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_enactedClaimNonce\",\"type\":\"uint256\"}],\"name\":\"ClaimEnacted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_mintRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ICoverPool.Status\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"CollateralUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_cover\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_acount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CoverAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"CoverCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"_expiry\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_expiryStr\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum ICoverPool.Status\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"ExpiryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newDelay\",\"type\":\"uint256\"}],\"name\":\"NoclaimRedeemDelayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum ICoverPool.Status\",\"name\":\"_old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum ICoverPool.Status\",\"name\":\"_new\",\"type\":\"uint8\"}],\"name\":\"PoolStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_risk\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isAddRisk\",\"type\":\"bool\"}],\"name\":\"RiskUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CALLBACK_SUCCESS\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeCovers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"_expiry\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_colAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"addCover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_risk\",\"type\":\"string\"}],\"name\":\"addRisk\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addingRiskIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addingRiskWIP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allCovers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collateralStatusMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintRatio\",\"type\":\"uint256\"},{\"internalType\":\"enum ICoverPool.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collaterals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"name\":\"coverMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_risk\",\"type\":\"string\"}],\"name\":\"deleteRisk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deletedRiskList\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"_expiry\",\"type\":\"uint48\"}],\"name\":\"deployCover\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_payoutRiskList\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_payoutRates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint48\",\"name\":\"_incidentTimestamp\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"_coverPoolNonce\",\"type\":\"uint256\"}],\"name\":\"enactClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"expiries\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"name\":\"expiryInfoMap\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"enum ICoverPool.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extendablePool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"getClaimDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint48\",\"name\":\"incidentTimestamp\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"claimEnactedTimestamp\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"totalPayoutRate\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"payoutRiskList\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"payoutRates\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ICoverPool.ClaimDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCoverPoolDetails\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_collaterals\",\"type\":\"address[]\"},{\"internalType\":\"uint48[]\",\"name\":\"_expiries\",\"type\":\"uint48[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_riskList\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_deletedRiskList\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"_allCovers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRiskList\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_coverPoolName\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_extendablePool\",\"type\":\"bool\"},{\"internalType\":\"string[]\",\"name\":\"_riskList\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"_expiry\",\"type\":\"uint48\"},{\"internalType\":\"string\",\"name\":\"_expiryString\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noclaimRedeemDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolStatus\",\"outputs\":[{\"internalType\":\"enum ICoverPool.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"riskList\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"riskMap\",\"outputs\":[{\"internalType\":\"enum ICoverPool.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintRatio\",\"type\":\"uint256\"},{\"internalType\":\"enum ICoverPool.Status\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"setCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"_expiry\",\"type\":\"uint48\"},{\"internalType\":\"string\",\"name\":\"_expiryStr\",\"type\":\"string\"},{\"internalType\":\"enum ICoverPool.Status\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"setExpiry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_noclaimRedeemDelay\",\"type\":\"uint256\"}],\"name\":\"setNoclaimRedeemDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ICoverPool.Status\",\"name\":\"_poolStatus\",\"type\":\"uint8\"}],\"name\":\"setPoolStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CoverPool","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}