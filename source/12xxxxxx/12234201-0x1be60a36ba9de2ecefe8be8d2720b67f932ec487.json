{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/SLORegistry.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.6;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @title SLORegistry\r\n * @dev SLORegistry is a contract for handling creation of service level\r\n * objectives and querying those service level objectives\r\n */\r\ncontract SLORegistry {\r\n    enum SLOType {\r\n        EqualTo,\r\n        NotEqualTo,\r\n        SmallerThan,\r\n        SmallerOrEqualTo,\r\n        GreaterThan,\r\n        GreaterOrEqualTo\r\n    }\r\n\r\n    struct SLO {\r\n        uint256 sloValue;\r\n        SLOType sloType;\r\n    }\r\n    /**\r\n     * @dev SLO Registered event\r\n     * @param sla 1. -\r\n     * @param sloValue 2. -\r\n     * @param sloType 3. -\r\n     */\r\n    event SLORegistered(address indexed sla, uint256 sloValue, SLOType sloType);\r\n\r\n    address private slaRegistry;\r\n    mapping(address => SLO) public registeredSLO;\r\n\r\n    modifier onlySLARegistry {\r\n        require(\r\n            msg.sender == slaRegistry,\r\n            \"Should only be called using the SLARegistry contract\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function setSLARegistry() public {\r\n        // Only able to trigger this function once\r\n        require(\r\n            address(slaRegistry) == address(0),\r\n            \"SLARegistry address has already been set\"\r\n        );\r\n        slaRegistry = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev public function for creating service level objectives\r\n     * @param _sloValue 1. -\r\n     * @param _sloType 2. -\r\n     * @param _slaAddress 3. -\r\n     */\r\n    function registerSLO(\r\n        uint256 _sloValue,\r\n        SLOType _sloType,\r\n        address _slaAddress\r\n    ) public onlySLARegistry {\r\n        registeredSLO[_slaAddress] = SLO({\r\n            sloValue: _sloValue,\r\n            sloType: _sloType\r\n        });\r\n        emit SLORegistered(_slaAddress, _sloValue, _sloType);\r\n    }\r\n\r\n    /**\r\n     * @dev external view function to check a value against the SLO\r\n     * @param _value The SLI value to check against the SL\r\n     * @return boolean with the SLO honored state\r\n     */\r\n    function isRespected(uint256 _value, address _slaAddress)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        SLO memory slo = registeredSLO[_slaAddress];\r\n        SLOType sloType = slo.sloType;\r\n        uint256 sloValue = slo.sloValue;\r\n\r\n        if (sloType == SLOType.EqualTo) {\r\n            return _value == sloValue;\r\n        }\r\n\r\n        if (sloType == SLOType.NotEqualTo) {\r\n            return _value != sloValue;\r\n        }\r\n\r\n        if (sloType == SLOType.SmallerThan) {\r\n            return _value < sloValue;\r\n        }\r\n\r\n        if (sloType == SLOType.SmallerOrEqualTo) {\r\n            return _value <= sloValue;\r\n        }\r\n\r\n        if (sloType == SLOType.GreaterThan) {\r\n            return _value > sloValue;\r\n        }\r\n\r\n        if (sloType == SLOType.GreaterOrEqualTo) {\r\n            return _value >= sloValue;\r\n        }\r\n        revert(\"isRespected wasn't executed properly\");\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sla\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sloValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum SLORegistry.SLOType\",\"name\":\"sloType\",\"type\":\"uint8\"}],\"name\":\"SLORegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_slaAddress\",\"type\":\"address\"}],\"name\":\"isRespected\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sloValue\",\"type\":\"uint256\"},{\"internalType\":\"enum SLORegistry.SLOType\",\"name\":\"_sloType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_slaAddress\",\"type\":\"address\"}],\"name\":\"registerSLO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registeredSLO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sloValue\",\"type\":\"uint256\"},{\"internalType\":\"enum SLORegistry.SLOType\",\"name\":\"sloType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setSLARegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SLORegistry","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c4a6b2f9b4487fc53ed06a8a352e29d8386a0738894118011611de83790143d1"}]}