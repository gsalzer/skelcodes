{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: original_contracts/lib/IExchange.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n/**\r\n* @dev This interface should be implemented by all exchanges which needs to integrate with the paraswap protocol\r\n*/\r\ninterface IExchange {\r\n\r\n    /**\r\n   * @dev The function which performs the swap on an exchange.\r\n   * Exchange needs to implement this method in order to support swapping of tokens through it\r\n   * @param fromToken Address of the source token\r\n   * @param toToken Address of the destination token\r\n   * @param fromAmount Amount of source tokens to be swapped\r\n   * @param toAmount Minimum destination token amount expected out of this swap\r\n   * @param exchange Internal exchange or factory contract address for the exchange. For example Registry address for the Uniswap\r\n   * @param payload Any exchange specific data which is required can be passed in this argument in encoded format which\r\n   * will be decoded by the exchange. Each exchange will publish it's own decoding/encoding mechanism\r\n   */\r\n   //TODO: REMOVE RETURN STATEMENT\r\n    function swap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 fromAmount,\r\n        uint256 toAmount,\r\n        address exchange,\r\n        bytes calldata payload) external payable;\r\n\r\n  /**\r\n   * @dev The function which performs the swap on an exchange.\r\n   * Exchange needs to implement this method in order to support swapping of tokens through it\r\n   * @param fromToken Address of the source token\r\n   * @param toToken Address of the destination token\r\n   * @param fromAmount Max Amount of source tokens to be swapped\r\n   * @param toAmount Destination token amount expected out of this swap\r\n   * @param exchange Internal exchange or factory contract address for the exchange. For example Registry address for the Uniswap\r\n   * @param payload Any exchange specific data which is required can be passed in this argument in encoded format which\r\n   * will be decoded by the exchange. Each exchange will publish it's own decoding/encoding mechanism\r\n   */\r\n    function buy(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 fromAmount,\r\n        uint256 toAmount,\r\n        address exchange,\r\n        bytes calldata payload) external payable;\r\n\r\n    /**\r\n   * @dev This function is used to perform onChainSwap. It build all the parameters onchain. Basically the information\r\n   * encoded in payload param of swap will calculated in this case\r\n   * Exchange needs to implement this method in order to support swapping of tokens through it\r\n   * @param fromToken Address of the source token\r\n   * @param toToken Address of the destination token\r\n   * @param fromAmount Amount of source tokens to be swapped\r\n   * @param toAmount Minimum destination token amount expected out of this swap\r\n   */\r\n    function onChainSwap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 fromAmount,\r\n        uint256 toAmount\r\n    ) external payable returns (uint256);\r\n\r\n    /**\r\n    * @dev Certain adapters/exchanges needs to be initialized.\r\n    * This method will be called from Augustus\r\n    */\r\n    function initialize(bytes calldata data) external;\r\n\r\n    /**\r\n    * @dev Returns unique identifier for the adapter\r\n    */\r\n    function getKey() external pure returns(bytes32);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: original_contracts/lib/SafeERC20.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: original_contracts/ITokenTransferProxy.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\ninterface ITokenTransferProxy {\r\n\r\n    function transferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    )\r\n        external;\r\n\r\n    function freeReduxTokens(address user, uint256 tokensToFree) external;\r\n}\r\n\r\n// File: original_contracts/lib/Utils.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary Utils {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    address constant ETH_ADDRESS = address(\r\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\r\n    );\r\n\r\n    address constant WETH_ADDRESS = address(\r\n        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\r\n    );\r\n\r\n    uint256 constant MAX_UINT = 2 ** 256 - 1;\r\n\r\n    /**\r\n   * @param fromToken Address of the source token\r\n   * @param fromAmount Amount of source tokens to be swapped\r\n   * @param toAmount Minimum destination token amount expected out of this swap\r\n   * @param expectedAmount Expected amount of destination tokens without slippage\r\n   * @param beneficiary Beneficiary address\r\n   * 0 then 100% will be transferred to beneficiary. Pass 10000 for 100%\r\n   * @param referrer referral id\r\n   * @param useReduxToken whether to use redux token or not\r\n   * @param path Route to be taken for this swap to take place\r\n\r\n   */\r\n    struct SellData {\r\n        address fromToken;\r\n        uint256 fromAmount;\r\n        uint256 toAmount;\r\n        uint256 expectedAmount;\r\n        address payable beneficiary;\r\n        string referrer;\r\n        bool useReduxToken;\r\n        Utils.Path[] path;\r\n\r\n    }\r\n\r\n    struct MegaSwapSellData {\r\n        address fromToken;\r\n        uint256 fromAmount;\r\n        uint256 toAmount;\r\n        uint256 expectedAmount;\r\n        address payable beneficiary;\r\n        string referrer;\r\n        bool useReduxToken;\r\n        Utils.MegaSwapPath[] path;\r\n    }\r\n\r\n    struct BuyData {\r\n        address fromToken;\r\n        address toToken;\r\n        uint256 fromAmount;\r\n        uint256 toAmount;\r\n        address payable beneficiary;\r\n        string referrer;\r\n        bool useReduxToken;\r\n        Utils.BuyRoute[] route;\r\n    }\r\n\r\n    struct Route {\r\n        address payable exchange;\r\n        address targetExchange;\r\n        uint percent;\r\n        bytes payload;\r\n        uint256 networkFee;//Network fee is associated with 0xv3 trades\r\n    }\r\n\r\n    struct MegaSwapPath {\r\n        uint256 fromAmountPercent;\r\n        Path[] path;\r\n    }\r\n\r\n    struct Path {\r\n        address to;\r\n        uint256 totalNetworkFee;//Network fee is associated with 0xv3 trades\r\n        Route[] routes;\r\n    }\r\n\r\n    struct BuyRoute {\r\n        address payable exchange;\r\n        address targetExchange;\r\n        uint256 fromAmount;\r\n        uint256 toAmount;\r\n        bytes payload;\r\n        uint256 networkFee;//Network fee is associated with 0xv3 trades\r\n    }\r\n\r\n    function ethAddress() internal pure returns (address) {return ETH_ADDRESS;}\r\n\r\n    function wethAddress() internal pure returns (address) {return WETH_ADDRESS;}\r\n\r\n    function maxUint() internal pure returns (uint256) {return MAX_UINT;}\r\n\r\n    function approve(\r\n        address addressToApprove,\r\n        address token,\r\n        uint256 amount\r\n    ) internal {\r\n        if (token != ETH_ADDRESS) {\r\n            IERC20 _token = IERC20(token);\r\n\r\n            uint allowance = _token.allowance(address(this), addressToApprove);\r\n\r\n            if (allowance < amount) {\r\n                _token.safeApprove(addressToApprove, 0);\r\n                _token.safeIncreaseAllowance(addressToApprove, MAX_UINT);\r\n            }\r\n        }\r\n    }\r\n\r\n    function transferTokens(\r\n        address token,\r\n        address payable destination,\r\n        uint256 amount\r\n    )\r\n    internal\r\n    {\r\n        if (amount > 0) {\r\n            if (token == ETH_ADDRESS) {\r\n                (bool result, ) = destination.call{value: amount, gas: 4000}(\"\");\r\n                require(result, \"Failed to transfer Ether\");\r\n            }\r\n            else {\r\n                IERC20(token).safeTransfer(destination, amount);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function tokenBalance(\r\n        address token,\r\n        address account\r\n    )\r\n    internal\r\n    view\r\n    returns (uint256)\r\n    {\r\n        if (token == ETH_ADDRESS) {\r\n            return account.balance;\r\n        } else {\r\n            return IERC20(token).balanceOf(account);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Helper method to refund gas using gas tokens\r\n    */\r\n    function refundGas(\r\n        address account,\r\n        address tokenTransferProxy,\r\n        uint256 initialGas\r\n    )\r\n        internal\r\n    {\r\n        uint256 freeBase = 14154;\r\n        uint256 freeToken = 6870;\r\n        uint256 reimburse = 24000;\r\n\r\n        uint256 tokens = initialGas.sub(\r\n            gasleft()).add(freeBase).div(reimburse.mul(2).sub(freeToken)\r\n        );\r\n\r\n        freeGasTokens(account, tokenTransferProxy, tokens);\r\n    }\r\n\r\n    /**\r\n    * @dev Helper method to free gas tokens\r\n    */\r\n    function freeGasTokens(address account, address tokenTransferProxy, uint256 tokens) internal {\r\n\r\n        uint256 tokensToFree = tokens;\r\n        uint256 safeNumTokens = 0;\r\n        uint256 gas = gasleft();\r\n\r\n        if (gas >= 27710) {\r\n            safeNumTokens = gas.sub(27710).div(1148 + 5722 + 150);\r\n        }\r\n\r\n        if (tokensToFree > safeNumTokens) {\r\n            tokensToFree = safeNumTokens;\r\n        }\r\n        ITokenTransferProxy(tokenTransferProxy).freeReduxTokens(account, tokensToFree);\r\n    }\r\n}\r\n\r\n// File: original_contracts/lib/uniswapv3/ISwapRouterUniV3.sol\r\n\r\npragma solidity 0.7.5;\r\npragma abicoder v2;\r\n\r\ninterface ISwapRouterUniV3 {\r\n\r\n  struct ExactInputSingleParams {\r\n    address tokenIn;\r\n    address tokenOut;\r\n    uint24 fee;\r\n    address recipient;\r\n    uint256 deadline;\r\n    uint256 amountIn;\r\n    uint256 amountOutMinimum;\r\n    uint160 sqrtPriceLimitX96;\r\n  }\r\n\r\n  struct ExactOutputSingleParams {\r\n    address tokenIn;\r\n    address tokenOut;\r\n    uint24 fee;\r\n    address recipient;\r\n    uint256 deadline;\r\n    uint256 amountOut;\r\n    uint256 amountInMaximum;\r\n    uint160 sqrtPriceLimitX96;\r\n  }\r\n\r\n  function exactInputSingle(ExactInputSingleParams calldata params)\r\n  external payable\r\n  returns (uint256 amountOut);\r\n\r\n  function exactOutputSingle(ExactOutputSingleParams calldata params)\r\n  external payable returns (uint256 amountIn);\r\n\r\n}\r\n\r\n// File: original_contracts/IWETH.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\nabstract contract IWETH is IERC20 {\r\n    function deposit() external virtual payable;\r\n    function withdraw(uint256 amount) external virtual;\r\n}\r\n\r\n// File: original_contracts/lib/uniswapv3/UniswapV3.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract UniswapV3 is IExchange {\r\n\r\n  struct UniswapV3Data {\r\n    uint24 fee;\r\n    uint256 deadline;\r\n    uint160 sqrtPriceLimitX96;\r\n  }\r\n\r\n\r\n  function getKey() public override pure returns (bytes32) {\r\n    return keccak256(abi.encodePacked(\"UniswapV3\", \"1.0.0\"));\r\n  }\r\n\r\n\r\n  function swap(\r\n    IERC20 fromToken,\r\n    IERC20 toToken,\r\n    uint256 fromAmount,\r\n    uint256 toAmount,\r\n    address exchange,\r\n    bytes calldata payload\r\n  )\r\n  external\r\n  payable\r\n  override\r\n  {\r\n\r\n    UniswapV3Data memory data = abi.decode(payload, (UniswapV3Data));\r\n\r\n    address _fromToken = address(fromToken) == Utils.ethAddress()\r\n    ? Utils.wethAddress() : address(fromToken);\r\n    address _toToken = address(toToken) == Utils.ethAddress()\r\n    ? Utils.wethAddress() : address(toToken);\r\n\r\n    if (address(fromToken) == Utils.ethAddress()) {\r\n      IWETH(Utils.wethAddress()).deposit{value : fromAmount}();\r\n    }\r\n\r\n    Utils.approve(address(exchange), _fromToken, fromAmount);\r\n\r\n    ISwapRouterUniV3(exchange).exactInputSingle(ISwapRouterUniV3.ExactInputSingleParams(\r\n      {\r\n      tokenIn : _fromToken,\r\n      tokenOut : _toToken,\r\n      fee : data.fee,\r\n      recipient : address(this),\r\n      deadline : data.deadline,\r\n      amountIn : fromAmount,\r\n      amountOutMinimum : toAmount,\r\n      sqrtPriceLimitX96 : data.sqrtPriceLimitX96\r\n      }\r\n      )\r\n    );\r\n\r\n    if (address(toToken) == Utils.ethAddress()) {\r\n      IWETH(Utils.wethAddress()).withdraw(\r\n        IERC20(Utils.wethAddress()).balanceOf(address(this))\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n\r\n  function buy(\r\n    IERC20 fromToken,\r\n    IERC20 toToken,\r\n    uint256 fromAmount,\r\n    uint256 toAmount,\r\n    address exchange,\r\n    bytes calldata payload\r\n  )\r\n  external\r\n  payable\r\n  override\r\n  {\r\n\r\n    UniswapV3Data memory data = abi.decode(payload, (UniswapV3Data));\r\n\r\n    address _fromToken = address(fromToken) == Utils.ethAddress()\r\n    ? Utils.wethAddress() : address(fromToken);\r\n    address _toToken = address(toToken) == Utils.ethAddress()\r\n    ? Utils.wethAddress() : address(toToken);\r\n\r\n    if (address(fromToken) == Utils.ethAddress()) {\r\n      IWETH(Utils.wethAddress()).deposit{value : fromAmount}();\r\n    }\r\n\r\n    Utils.approve(address(exchange), _fromToken, fromAmount);\r\n\r\n    ISwapRouterUniV3(exchange).exactOutputSingle(ISwapRouterUniV3.ExactOutputSingleParams(\r\n      {\r\n      tokenIn : _fromToken,\r\n      tokenOut : _toToken,\r\n      fee : data.fee,\r\n      recipient : address(this),\r\n      deadline : data.deadline,\r\n      amountOut : toAmount,\r\n      amountInMaximum : fromAmount,\r\n      sqrtPriceLimitX96 : data.sqrtPriceLimitX96\r\n      }\r\n      )\r\n    );\r\n\r\n    if (\r\n      address(fromToken) == Utils.ethAddress() ||\r\n      address(toToken) == Utils.ethAddress()\r\n    ) {\r\n      IWETH(Utils.wethAddress()).withdraw(\r\n        IERC20(Utils.wethAddress()).balanceOf(address(this))\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n  function initialize(bytes calldata data) external override {\r\n    revert(\"METHOD NOT IMPLEMENTED\");\r\n  }\r\n\r\n  function onChainSwap(\r\n    IERC20 fromToken,\r\n    IERC20 toToken,\r\n    uint256 fromAmount,\r\n    uint256 toAmount\r\n  )\r\n  external\r\n  override\r\n  payable\r\n  returns (uint256)\r\n  {\r\n    revert(\"METHOD NOT SUPPORTED\");\r\n  }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"}],\"name\":\"onChainSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"UniswapV3","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8bb98239fd6d45b0c8968ef40b535c98becee44203a011386d84593632128570"}]}