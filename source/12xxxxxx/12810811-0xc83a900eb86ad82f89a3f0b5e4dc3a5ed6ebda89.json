{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interface/farm/IFarmPool.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\ninterface IFarmPool {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function stake(uint256 amount) external;\r\n    function withdraw(uint256 amount) external;\r\n    function getReward() external;\r\n    function exit() external;\r\n}\r\n\r\n// File: contracts/interface/farm/IFarmVault.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\ninterface IFarmVault {\r\n    function underlyingBalanceInVault() external view returns (uint256);\r\n    function underlyingBalanceWithInvestment() external view returns (uint256);\r\n    function underlying() external view returns (address);\r\n    function underlyingUnit() external view returns(uint256);\r\n    function deposit(uint256 amountWei) external;\r\n    function withdraw(uint256 numberOfShares) external;\r\n    function getPricePerFullShare() external view returns (uint256);\r\n    function underlyingBalanceWithInvestmentForHolder(address holder) view external returns (uint256);\r\n\r\n}\r\n\r\n// File: contracts/interface/gof/IController.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\ninterface IController {\r\n    function vaults(address) external view returns (address);\r\n    function rewards() external view returns (address);\r\n}\r\n\r\n// File: contracts/interface/gof/GOFStrategy.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\ninterface GOFStrategy {\r\n    function want() external view returns (address);\r\n    function deposit() external;\r\n    function withdraw(address) external;\r\n    function withdraw(uint) external;\r\n    function withdrawAll() external returns (uint);\r\n    function balanceOf() external view returns (uint);\r\n}\r\n\r\n// File: contracts/interface/uniswap/IUniswapRouter.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\ninterface IUniswapRouter {\r\n    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\r\n}\r\n\r\n// File: contracts/V2/StrategyFarm.sol\r\n\r\npragma solidity ^0.5.16;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function decimals() external view returns (uint);\r\n    function name() external view returns (string memory);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract StrategyFarm is GOFStrategy {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n    \r\n    address public want ;\r\n    address constant public output = address(0xa0246c9032bC3A600820415aE600c6388619A14D);\r\n    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); \r\n    address constant public gof = address(0x488E0369f9BC5C40C002eA7c1fe4fd01A198801c);\r\n\r\n    address public farmVault;\r\n    address public farmPool;\r\n\r\n    \r\n    uint public burnfee = 400;\r\n    uint public fee = 100;\r\n    uint public foundationfee = 400;\r\n    uint public callfee = 100;\r\n    uint public max = 1000;\r\n\r\n    uint public reservesRate = 100;\r\n    uint constant public cashMax = 1000;\r\n\r\n    uint public withdrawalFee = 0;\r\n    uint constant public withdrawalMax = 10000;\r\n    \r\n    address public governance;\r\n    address public strategyDev;\r\n    address public controller;\r\n    address public foundationAddress = 0x1250E38187Ff89d05f99F3fa0E324241bbE2120C;\r\n    address public burnAddress;\r\n\r\n    string public getName;\r\n\r\n    address[] public swap2GOFRouting;\r\n    address[] public swap2TokenRouting;\r\n    \r\n    struct StrategyBalance {\r\n        uint256 lpAmount;\r\n        uint256 pricePerFullShare;\r\n    }\r\n\r\n    StrategyBalance public balancePrior;\r\n    uint public reserves = 0;\r\n    bool public splitGof = true;\r\n\r\n    event UpdateBalance(uint256 _oldReserves, uint256 _newReserves, StrategyBalance _oldBalance, StrategyBalance _newBalance);\r\n    event ClaimReserves(uint256 _amount);\r\n    \r\n    constructor(\r\n        address _controller, \r\n        address _want,\r\n        address _farmVault,\r\n        address _farmPool,\r\n        address _burnAddress\r\n        ) public {\r\n        governance = msg.sender;\r\n        strategyDev = tx.origin;\r\n        controller = _controller;\r\n        burnAddress = _burnAddress;\r\n\r\n        want = _want;\r\n        farmVault = _farmVault;\r\n        farmPool = _farmPool;\r\n\r\n        getName = string(abi.encodePacked(\"golff:Strategy:\", IERC20(want).name()));\r\n\r\n        balancePrior = currentStrategyBalance();\r\n\r\n        swap2TokenRouting = [output,weth,want];\r\n        swap2GOFRouting = [want,weth,gof];\r\n        doApprove();\r\n        \r\n    }\r\n\r\n    function doApprove () public{\r\n        IERC20(output).safeApprove(unirouter, 0);\r\n        IERC20(output).safeApprove(unirouter, uint(-1));\r\n\r\n        IERC20(want).safeApprove(unirouter, 0);\r\n        IERC20(want).safeApprove(unirouter, uint(-1));\r\n    }\r\n    \r\n    modifier onlyGovernance() {\r\n        require(msg.sender == governance, \"Golff:!governance\");\r\n        _;\r\n    }\r\n    \r\n    function updateReserves() internal {\r\n        uint _oldReserves = reserves;\r\n        StrategyBalance memory _oldBalance = balancePrior;\r\n\r\n        StrategyBalance memory current = currentStrategyBalance();\r\n        reserves = reserves.add(calcReserve(current.pricePerFullShare));\r\n        balancePrior = current;\r\n        \r\n        emit UpdateBalance(_oldReserves, reserves, _oldBalance, balancePrior);\r\n    }\r\n\r\n    function calcReserve(uint pricePerFullShare) internal view returns(uint) {\r\n        if (pricePerFullShare < balancePrior.pricePerFullShare) {\r\n            return 0;\r\n        }\r\n        return balancePrior.lpAmount.mul(pricePerFullShare.sub(balancePrior.pricePerFullShare)).div(IFarmVault(farmVault).underlyingUnit()).mul(reservesRate).div(cashMax);\r\n    }\r\n\r\n    function lpTokens() internal view returns (uint256) {\r\n        return IERC20(farmVault).balanceOf(address(this)).add(IFarmPool(farmPool).balanceOf(address(this)));\r\n    }\r\n\r\n    function currentStrategyBalance() internal view returns (StrategyBalance memory bal) {\r\n        bal = StrategyBalance({\r\n            lpAmount: lpTokens(),\r\n            pricePerFullShare: IFarmVault(farmVault).getPricePerFullShare()\r\n        });\r\n    }\r\n\r\n    function claimReserves(uint _r) public checkStrategist {\r\n        require(_r <= reserves, \"Strategy:INSUFFICIENT_UNCLAIM\");\r\n        reserves = reserves.sub(_r);\r\n        uint _balance = IERC20(want).balanceOf(address(this));\r\n\r\n        if (_balance < _r) {\r\n            _r = _withdrawSome(_r.sub(_balance));\r\n            _r = _r.add(_balance);\r\n            updateReserves();\r\n        }\r\n        \r\n        dosplit(_r);\r\n\r\n        emit ClaimReserves(_r);\r\n    }\r\n\r\n    function claimReservesAll() external checkStrategist {\r\n        claimReserves(reserves);\r\n    }\r\n\r\n    function deposit() public {\r\n        doDeposit();\r\n        updateReserves();\r\n    }\r\n\r\n    function doDeposit() internal {\r\n        uint _want = IERC20(want).balanceOf(address(this));\r\n        if (_want > 0) {\r\n            IERC20(want).safeApprove(farmVault, 0);\r\n            IERC20(want).safeApprove(farmVault, _want);\r\n            IFarmVault(farmVault).deposit(_want);\r\n        }\r\n        \r\n        _depositMine();\r\n    }\r\n\r\n    function _depositMine() internal {\r\n        uint _balance = IERC20(farmVault).balanceOf(address(this));\r\n        if (_balance > 0) {\r\n            IERC20(farmVault).safeApprove(farmPool, 0);\r\n            IERC20(farmVault).safeApprove(farmPool, _balance);\r\n            IFarmPool(farmPool).stake(_balance);\r\n        }\r\n    }\r\n    \r\n    // Controller only function for creating additional rewards from dust\r\n    function withdraw(address _asset) external {\r\n        require(msg.sender == controller, \"Golff:!controller\");\r\n        require(want != _asset, \"Golff:want\");\r\n        require(gof != _asset, \"Golff:gof\");\r\n        require(output != _asset, \"Golff:output\");\r\n        require(farmVault != _asset, \"Golff:farmVault\");\r\n        \r\n        uint256 balance = IERC20(_asset).balanceOf(address(this));\r\n        IERC20(_asset).safeTransfer(controller, balance);\r\n    }\r\n    \r\n    // Withdraw partial funds, normally used with a vault withdrawal\r\n    function withdraw(uint _amount) external {\r\n        require(msg.sender == controller || msg.sender == governance, \"Golff:!controller\");\r\n        if ( _amount > 0) {\r\n            uint _balance = IERC20(want).balanceOf(address(this));\r\n            if (_balance < _amount) {\r\n                _amount = _withdrawSome(_amount.sub(_balance));\r\n                _amount = _amount.add(_balance);\r\n            }\r\n\r\n            updateReserves();\r\n            \r\n            uint _fee = 0;\r\n            if (withdrawalFee>0){\r\n                _fee = _amount.mul(withdrawalFee).div(withdrawalMax);        \r\n                IERC20(want).safeTransfer(IController(controller).rewards(), _fee);\r\n            }\r\n            \r\n            address _vault = IController(controller).vaults(address(want));\r\n            require(_vault != address(0), \"Golff:!vault\"); // additional protection so we don't burn the funds\r\n            IERC20(want).safeTransfer(_vault, _amount.sub(_fee));\r\n        }\r\n    }\r\n\r\n    function _withdrawSome(uint256 _amount) internal returns (uint) {\r\n        uint256 _share = _amount.mul(IFarmVault(farmVault).underlyingUnit()).div(IFarmVault(farmVault).getPricePerFullShare());\r\n        uint _balance = IERC20(farmVault).balanceOf(address(this));\r\n        if (_balance < _share) {\r\n            IFarmPool(farmPool).withdraw(_share.sub(_balance));\r\n            _balance = IERC20(farmVault).balanceOf(address(this));\r\n        }\r\n\r\n        if (_share > _balance) {\r\n            _share = _balance;\r\n        }\r\n\r\n        uint256 _wantBal = IERC20(want).balanceOf(address(this));\r\n        IFarmVault(farmVault).withdraw(_share);\r\n        _wantBal = IERC20(want).balanceOf(address(this)).sub(_wantBal);\r\n        return _wantBal;\r\n    }\r\n    \r\n    // Withdraw all funds, normally used when migrating strategies\r\n    function withdrawAll() external returns (uint balance) {\r\n        require(msg.sender == controller || msg.sender == governance,\"Golff:!governance\");\r\n        _withdrawAll();\r\n\r\n        updateReserves();\r\n        \r\n        balance = IERC20(want).balanceOf(address(this));\r\n        \r\n        address _vault = IController(controller).vaults(address(want));\r\n        require(_vault != address(0), \"Golff:!vault\"); // additional protection so we don't burn the funds\r\n        if (balance > reserves) {\r\n            IERC20(want).safeTransfer(_vault, balance.sub(reserves));\r\n        }\r\n    }\r\n    \r\n    function _withdrawAll() internal {\r\n        uint256 _poolBal = IFarmPool(farmPool).balanceOf(address(this));\r\n        if (_poolBal > 0) {\r\n            IFarmPool(farmPool).exit();\r\n        }\r\n\r\n        uint _balance = IERC20(farmVault).balanceOf(address(this));\r\n        if (_balance > 0) {\r\n            IFarmVault(farmVault).withdraw(_balance);\r\n        }\r\n    }\r\n\r\n    modifier checkStrategist(){\r\n        require(msg.sender == strategyDev || msg.sender == governance,\"Golff:!strategyDev\");\r\n        _;\r\n    }\r\n    \r\n    function harvest() external checkStrategist {\r\n        uint _before = IERC20(want).balanceOf(address(this));\r\n        IFarmPool(farmPool).getReward();\r\n        doswap();\r\n        uint _a = IERC20(want).balanceOf(address(this)).sub(_before);\r\n        uint _sb = _a.mul(reservesRate).div(cashMax);\r\n        dosplit(_sb);\r\n        doDeposit();\r\n        updateReserves();\r\n    }\r\n\r\n    function doswap() internal {\r\n        uint256 _balance = IERC20(output).balanceOf(address(this));\r\n        if(_balance > 0 && output != want){\r\n            IUniswapRouter(unirouter).swapExactTokensForTokens(_balance, 0, swap2TokenRouting, address(this), now.add(1800));\r\n        }\r\n\r\n    }\r\n\r\n    function dosplit(uint _b) internal{\r\n        if (_b > 0) {\r\n            if (splitGof) {\r\n                IUniswapRouter(unirouter).swapExactTokensForTokens(_b, 0, swap2GOFRouting, address(this), now.add(1800));\r\n                _b = IERC20(gof).balanceOf(address(this));\r\n                split(IERC20(gof), _b);\r\n            } else {\r\n                split(IERC20(want), _b);\r\n            }\r\n        }\r\n    }\r\n\r\n    function split(IERC20 token, uint b) internal{\r\n        if (b > 0) {\r\n            uint _fee = b.mul(fee).div(max);\r\n            uint _foundationfee = b.mul(foundationfee).div(max);\r\n            uint _burnfee = b.mul(burnfee).div(max); \r\n            uint _callfee = b.sub(_burnfee).sub(_foundationfee).sub(_fee);\r\n            if (_fee > 0){\r\n                token.safeTransfer(IController(controller).rewards(), _fee); \r\n            }\r\n            if (_callfee > 0) {\r\n                token.safeTransfer(msg.sender, _callfee); \r\n            }\r\n            if (_foundationfee > 0) {\r\n                token.safeTransfer(foundationAddress, _foundationfee); \r\n            }\r\n            if (_burnfee >0){\r\n                token.safeTransfer(burnAddress, _burnfee);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function balanceOfWant() public view returns (uint) {\r\n        return IERC20(want).balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOfPool() public view returns (uint) {\r\n        return lpTokens().mul(IFarmVault(farmVault).getPricePerFullShare()).div(IFarmVault(farmVault).underlyingUnit());\r\n    }\r\n    \r\n    function balanceAll() public view returns (uint) {\r\n        return balanceOfWant()\r\n               .add(balanceOfPool());\r\n    }\r\n\r\n    function balanceOf() external view returns (uint) {\r\n        uint _all = balanceAll();\r\n        uint _cReserve = reserves.add(calcReserve(IFarmVault(farmVault).getPricePerFullShare()));\r\n        if (_all < _cReserve) {\r\n            return 0;\r\n        } else {\r\n            return _all.sub(_cReserve);\r\n        }\r\n    }\r\n    \r\n    function setGovernance(address _governance) external onlyGovernance {\r\n        governance = _governance;\r\n    }\r\n    \r\n    function setController(address _controller) external onlyGovernance {\r\n        controller = _controller;\r\n    }\r\n\r\n    function setFees(uint256 _fee, uint256 _callfee, uint256 _burnfee, uint256 _foundationfee) external onlyGovernance{\r\n\r\n        fee = _fee;\r\n        callfee = _callfee;\r\n        burnfee = _burnfee;\r\n        foundationfee = _foundationfee;\r\n\r\n        max = fee.add(callfee).add(burnfee).add(foundationfee);\r\n    }\r\n\r\n    function setReservesRate(uint256 _reservesRate) external onlyGovernance {\r\n        require(_reservesRate < cashMax, \"reservesRate >= 1000\");\r\n        reservesRate = _reservesRate;\r\n    }\r\n\r\n    function setFoundationAddress(address _foundationAddress) external onlyGovernance{\r\n        foundationAddress = _foundationAddress;\r\n    }\r\n\r\n    function setWithdrawalFee(uint _withdrawalFee) external onlyGovernance {\r\n        require(_withdrawalFee <=100,\"fee > 1%\"); //max:1%\r\n        withdrawalFee = _withdrawalFee;\r\n    }\r\n\r\n    function setBurnAddress(address _burnAddress) external onlyGovernance {\r\n        burnAddress = _burnAddress;\r\n    }\r\n\r\n    function setStrategyDev(address _strategyDev) external onlyGovernance {\r\n        strategyDev = _strategyDev;\r\n    }\r\n\r\n    function setSwap2GOF(address[] calldata _path) external onlyGovernance{\r\n        swap2GOFRouting = _path;\r\n    }\r\n    function setSwap2Token(address[] calldata _path) external onlyGovernance{\r\n        swap2TokenRouting = _path;\r\n    }\r\n\r\n    function emergencyWithdrawPool() external onlyGovernance {\r\n        IFarmPool(farmPool).withdraw(IFarmPool(farmPool).balanceOf(address(this)));\r\n    }\r\n\r\n    function donateReserves(uint256 _amount) external onlyGovernance {\r\n        require(_amount <= reserves, \"Strategy:Insufficient reserves\");\r\n        reserves = reserves.sub(_amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_want\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_farmVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_farmPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_burnAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimReserves\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldReserves\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newReserves\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerFullShare\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct StrategyFarm.StrategyBalance\",\"name\":\"_oldBalance\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerFullShare\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct StrategyFarm.StrategyBalance\",\"name\":\"_newBalance\",\"type\":\"tuple\"}],\"name\":\"UpdateBalance\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balancePrior\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerFullShare\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"callfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cashMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_r\",\"type\":\"uint256\"}],\"name\":\"claimReserves\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimReservesAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doApprove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"donateReserves\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyWithdrawPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"farmPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"farmVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundationfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gof\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"max\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"output\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservesRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_burnAddress\",\"type\":\"address\"}],\"name\":\"setBurnAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_callfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_foundationfee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_foundationAddress\",\"type\":\"address\"}],\"name\":\"setFoundationAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reservesRate\",\"type\":\"uint256\"}],\"name\":\"setReservesRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategyDev\",\"type\":\"address\"}],\"name\":\"setStrategyDev\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"setSwap2GOF\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"setSwap2Token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"splitGof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"strategyDev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swap2GOFRouting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swap2TokenRouting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unirouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawalMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StrategyFarm","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a91142a5ad9565efb673aa8753be3343707b0d67000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000fe09e53a81fe2808bc493ea64319109b5baa573e0000000000000000000000003da9d911301f8144bdf5c3c67886e5373dcdff8e000000000000000000000000767575b1c3f653b3842cf1f77a1e6105c3744952","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://23b8f4a6b01e348e048b646c4408abf93cf1d1dfe8a58a1d1d24f0b6c7cf5194"}]}