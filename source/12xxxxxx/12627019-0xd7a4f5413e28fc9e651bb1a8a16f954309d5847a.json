{"status":"1","message":"OK","result":[{"SourceCode":"// File: ../common.5/openzeppelin/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: ../common.5/openzeppelin/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: ../common.5/openzeppelin/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: ../common.5/openzeppelin/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: ../common.5/openzeppelin/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\n// File: contracts/DSMath.sol\r\n\r\npragma solidity ^0.5.17;\r\n\r\ncontract DSMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x / y;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {    \r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint256 constant WAD = 10**18;\r\n    uint256 constant RAY = 10**27;\r\n\r\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/DSProxy.sol\r\n\r\npragma solidity ^0.5.17;\r\n\r\ncontract DSAuthority {\r\n    function canCall(address src, address dst, bytes4 sig) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority(address indexed authority);\r\n    event LogSetOwner(address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority public authority;\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_) public auth {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_) public auth {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n}\r\n\r\ncontract DSNote {\r\n    event LogNote(\r\n        bytes4 indexed sig,\r\n        address indexed guy,\r\n        bytes32 indexed foo,\r\n        bytes32 indexed bar,\r\n        uint256 wad,\r\n        bytes fax\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        bytes32 foo;\r\n        bytes32 bar;\r\n\r\n        assembly {\r\n            foo := calldataload(4)\r\n            bar := calldataload(36)\r\n        }\r\n\r\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\r\n\r\n        _;\r\n    }\r\n}\r\n\r\ncontract DSProxy is DSAuth, DSNote {\r\n    DSProxyCache public cache; \r\n\r\n    constructor(address _cacheAddr) public {\r\n        require(setCache(_cacheAddr));\r\n    }\r\n\r\n    function() external payable {}\r\n\r\n    \r\n    function execute(bytes memory _code, bytes memory _data)\r\n        public\r\n        payable\r\n        returns (address target, bytes32 response)\r\n    {\r\n        target = cache.read(_code);\r\n        if (target == address(0)) {\r\n            \r\n            target = cache.write(_code);\r\n        }\r\n\r\n        response = execute(target, _data);\r\n    }\r\n\r\n    function execute(address _target, bytes memory _data)\r\n        public\r\n        payable\r\n        auth\r\n        note\r\n        returns (bytes32 response)\r\n    {\r\n        require(_target != address(0));\r\n        \r\n        assembly {\r\n            let succeeded := delegatecall(\r\n                sub(gas, 5000),\r\n                _target,\r\n                add(_data, 0x20),\r\n                mload(_data),\r\n                0,\r\n                32\r\n            )\r\n            response := mload(0)\r\n            switch iszero(succeeded)\r\n                case 1 \r\n                {\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n    }\r\n\r\n    \r\n    function setCache(address _cacheAddr) public payable auth note returns (bool) {\r\n        require(_cacheAddr != address(0)); \r\n        cache = DSProxyCache(_cacheAddr); \r\n        return true;\r\n    }\r\n}\r\n\r\ncontract DSProxyCache {\r\n    mapping(bytes32 => address) cache;\r\n\r\n    function read(bytes memory _code) public view returns (address) {\r\n        bytes32 hash = keccak256(_code);\r\n        return cache[hash];\r\n    }\r\n\r\n    function write(bytes memory _code) public returns (address target) {\r\n        assembly {\r\n            target := create(0, add(_code, 0x20), mload(_code))\r\n            switch iszero(extcodesize(target))\r\n                case 1 {\r\n                    \r\n                    revert(0, 0)\r\n                }\r\n        }\r\n        bytes32 hash = keccak256(_code);\r\n        cache[hash] = target;\r\n    }\r\n}\r\n\r\n// File: contracts/dETH.sol\r\n\r\n// todo:\r\n// add disclaimer\r\n\r\npragma solidity ^0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n// Number typing guide\r\n// The subsystems we use, use different decimal systems\r\n// Additionally we use different number assumptions for convenience\r\n// RAY -    10**27 - Maker decimal for high precision calculation\r\n// WAD -    10**18 - Maker decimal for token values\r\n// PERC -   10**16 - 1% of a with 100% == 1 WAD\r\n// CLP -    10**8  - Chainlink price format\r\n\r\ncontract IDSGuard is DSAuthority\r\n{\r\n    function permit(address src, address dst, bytes32 sig) public;\r\n}\r\n\r\ncontract IDSGuardFactory \r\n{\r\n    function newGuard() public returns (IDSGuard guard);\r\n}\r\n\r\n// Note:\r\n// This is included to avoid method signature collisions between already imported \r\n// DSProxy's two execute functions. \r\ncontract IDSProxy\r\n{\r\n    function execute(address _target, bytes memory _data) public payable returns (bytes32);\r\n}\r\n\r\ncontract IMCDSaverProxy\r\n{\r\n    function getCdpDetailedInfo(uint _cdpId) public view returns (uint collateral, uint debt, uint price, bytes32 ilk);\r\n    function getRatio(uint _cdpId, bytes32 _ilk) public view returns (uint);\r\n}\r\n\r\ncontract IChainLinkPriceOracle\r\n{\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound);\r\n}\r\n\r\ncontract IMakerOracle\r\n{\r\n    function read()\r\n        public \r\n        view \r\n        returns(bytes32);\r\n}\r\n\r\ncontract Oracle\r\n{\r\n    using SafeMath for uint256;\r\n\r\n    uint constant ONE_PERC = 10**16; // 1.0%\r\n    uint constant HUNDRED_PERC = 10**18; // 100.0%\r\n\r\n    IMakerOracle public makerOracle;\r\n    IChainLinkPriceOracle public daiUsdOracle;\r\n    IChainLinkPriceOracle public ethUsdOracle;\r\n\r\n    constructor (\r\n            IMakerOracle _makerOracle, \r\n            IChainLinkPriceOracle _daiUsdOracle, \r\n            IChainLinkPriceOracle _ethUsdOracle) \r\n        public\r\n    {\r\n        makerOracle = _makerOracle;\r\n        daiUsdOracle = _daiUsdOracle;\r\n        ethUsdOracle = _ethUsdOracle;\r\n    }   \r\n\r\n    function getEthDaiPrice() \r\n        public\r\n        view\r\n        returns (uint _price)\r\n    {\r\n        // maker's price comes back as a decimal with 18 places\r\n        uint makerEthUsdPrice = uint(makerOracle.read()); \r\n\r\n        // chainlink's price comes back as a decimal with 8 places\r\n        (,int chainlinkEthUsdPrice,,,) = ethUsdOracle.latestRoundData();\r\n        (,int chainlinkDaiUsdPrice,,,) = daiUsdOracle.latestRoundData();\r\n\r\n        // chainlink's price comes back as a decimal with 8 places\r\n        // multiplying two of them, produces 16 places\r\n        // we need it in the WAD format which has 18, therefore .mul(10**2) at the end\r\n        uint chainlinkEthDaiPrice = uint(chainlinkEthUsdPrice).mul(uint(chainlinkDaiUsdPrice)).mul(10**2);\r\n    \r\n        // if the differnce between the ethdai price from chainlink is more than 10% from the\r\n        // maker oracle price, trust the maker oracle \r\n        uint percDiff = absDiff(makerEthUsdPrice, uint(chainlinkEthDaiPrice))\r\n            .mul(HUNDRED_PERC)\r\n            .div(makerEthUsdPrice);\r\n        return percDiff > ONE_PERC.mul(10) ? \r\n            makerEthUsdPrice :\r\n            chainlinkEthDaiPrice;\r\n    }\r\n\r\n    function absDiff(uint a, uint b)\r\n        internal\r\n        pure\r\n        returns(uint)\r\n    {\r\n        return a > b ? a - b : b - a;\r\n    }\r\n}\r\n\r\ncontract dEth is \r\n    ERC20Detailed, \r\n    ERC20,\r\n    DSMath,\r\n    DSProxy\r\n{\r\n    using SafeMath for uint;\r\n\r\n    uint constant ONE_PERC = 10**16;                    //   1.0% \r\n    uint constant HUNDRED_PERC = 10**18;                // 100.0%\r\n\r\n    uint constant PROTOCOL_FEE_PERC = 9*10**15;         //   0.9%\r\n    \r\n    address payable public gulper;\r\n    uint public cdpId;\r\n    \r\n    // Note:\r\n    // Since these items are not available on test net and represent interactions\r\n    // with the larger DeFi ecosystem, they are directly addressed here with the understanding\r\n    // that testing occurs against simulated forks of the the Ethereum mainnet. \r\n    address constant public makerManager = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\r\n    address constant public ethGemJoin = 0x2F0b23f53734252Bda2277357e97e1517d6B042A;\r\n    address constant public saverProxy = 0xC563aCE6FACD385cB1F34fA723f412Cc64E63D47;\r\n    address constant public saverProxyActions = 0x82ecD135Dce65Fbc6DbdD0e4237E0AF93FFD5038;\r\n\r\n    Oracle public oracle;\r\n\r\n    // automation variables\r\n    uint public minRedemptionRatioPerc; // the min % excess collateral that must remain after any ETH redeem action\r\n    uint public automationFeePerc;  // the fee that goes to the collateral pool, on entry or exit, to compensate for potentially triggering a boost or redeem\r\n    \r\n    // riskLimit sets the maximum amount of excess collateral Eth the contract will place at risk\r\n    // When exceeded it is no longer possible to issue dEth via the squander function\r\n    // This can also be used to retire the contract by setting it to 0\r\n    uint public riskLimit; \r\n    \r\n    constructor(\r\n            address payable _gulper,\r\n            uint _cdpId,\r\n            Oracle _oracle,\r\n            address _initialRecipient,\r\n            address _automationAuthority)\r\n        public\r\n        DSProxy(0x271293c67E2D3140a0E9381EfF1F9b01E07B0795) //_proxyCache on mainnet\r\n        ERC20Detailed(\"Derived Ether\", \"dEth\", 18)\r\n    {\r\n        gulper = _gulper;\r\n        cdpId = _cdpId;\r\n\r\n        oracle = _oracle;\r\n\r\n        // Initial values of automation variables\r\n        minRedemptionRatioPerc = 160 * ONE_PERC;\r\n        automationFeePerc = ONE_PERC; // 1.0%\r\n        riskLimit = 1000*10**18;      // sets an initial limit of 1000 ETH that the contract will risk. \r\n\r\n        // distributes the initial supply of dEth to the initial recipient at 1 ETH to 1 dEth\r\n        uint excess = getExcessCollateral();\r\n        _mint(_initialRecipient, excess);\r\n\r\n        // set the automation authority to make sure the parameters can be adjusted later on\r\n        IDSGuard guard = IDSGuardFactory(0x5a15566417e6C1c9546523066500bDDBc53F88C7).newGuard(); // DSGuardFactory\r\n        guard.permit(\r\n            _automationAuthority,\r\n            address(this),\r\n            bytes4(keccak256(\"automate(uint256,uint256,uint256,uint256,uint256,uint256)\")));\r\n        setAuthority(guard);\r\n\r\n        require(\r\n            authority.canCall(\r\n                _automationAuthority, \r\n                address(this), \r\n                bytes4(keccak256(\"automate(uint256,uint256,uint256,uint256,uint256,uint256)\"))),\r\n            \"guard setting failed\");\r\n    }\r\n\r\n    function changeGulper(address payable _newGulper)\r\n        public\r\n        auth\r\n    {\r\n        gulper = _newGulper;\r\n    }\r\n\r\n    function giveCDPToDSProxy(address _dsProxy)\r\n        public\r\n        auth\r\n    {\r\n        bytes memory giveProxyCall = abi.encodeWithSignature(\r\n            \"give(address,uint256,address)\", \r\n            makerManager, \r\n            cdpId, \r\n            _dsProxy);\r\n        \r\n        IDSProxy(address(this)).execute(saverProxyActions, giveProxyCall);\r\n    }\r\n\r\n    function getCollateral()\r\n        public\r\n        view\r\n        returns(uint _priceRAY, uint _totalCollateral, uint _debt, uint _collateralDenominatedDebt, uint _excessCollateral)\r\n    {\r\n        _priceRAY = getCollateralPriceRAY();\r\n        (_totalCollateral, _debt,,) = IMCDSaverProxy(saverProxy).getCdpDetailedInfo(cdpId);\r\n        _collateralDenominatedDebt = rdiv(_debt, _priceRAY);\r\n        _excessCollateral = sub(_totalCollateral, _collateralDenominatedDebt);\r\n    }\r\n\r\n    function getCollateralPriceRAY()\r\n        public\r\n        view\r\n        returns (uint _priceRAY)\r\n    {\r\n        // we multiply by 10^9 to cast the price to a RAY number as used by the Maker CDP\r\n        _priceRAY = oracle.getEthDaiPrice().mul(10**9);\r\n    }\r\n\r\n    function getExcessCollateral()\r\n        public\r\n        view\r\n        returns(uint _excessCollateral)\r\n    {\r\n        (,,,, _excessCollateral) = getCollateral();\r\n    }\r\n\r\n    function getRatio()\r\n        public\r\n        view\r\n        returns(uint _ratio)\r\n    {\r\n        (,,,bytes32 ilk) = IMCDSaverProxy(saverProxy).getCdpDetailedInfo(cdpId);\r\n        _ratio = IMCDSaverProxy(saverProxy).getRatio(cdpId, ilk);\r\n    }\r\n\r\n    function getMinRedemptionRatio()\r\n        public\r\n        view\r\n        returns(uint _minRatio)\r\n    {\r\n        _minRatio = rdiv(minRedemptionRatioPerc.div(10**9), HUNDRED_PERC);\r\n    }\r\n\r\n    function calculateIssuanceAmount(uint _suppliedCollateral)\r\n        public\r\n        view\r\n        returns (\r\n            uint _protocolFee,\r\n            uint _automationFee,\r\n            uint _actualCollateralAdded,\r\n            uint _accreditedCollateral,\r\n            uint _tokensIssued)\r\n    {\r\n        _protocolFee = _suppliedCollateral.mul(PROTOCOL_FEE_PERC).div(HUNDRED_PERC);\r\n        _automationFee = _suppliedCollateral.mul(automationFeePerc).div(HUNDRED_PERC);\r\n        _actualCollateralAdded = _suppliedCollateral.sub(_protocolFee); \r\n        _accreditedCollateral = _actualCollateralAdded.sub(_automationFee); \r\n        uint newTokenSupplyPerc = _accreditedCollateral.mul(HUNDRED_PERC).div(getExcessCollateral());\r\n        _tokensIssued = totalSupply().mul(newTokenSupplyPerc).div(HUNDRED_PERC);\r\n    }\r\n\r\n    event Issued(\r\n        address _receiver, \r\n        uint _suppliedCollateral,\r\n        uint _protocolFee,\r\n        uint _automationFee,\r\n        uint _actualCollateralAdded,\r\n        uint _accreditedCollateral,\r\n        uint _tokensIssued);\r\n\r\n    // Note: \r\n    // This method should have been called issue(address _receiver), but will remain this for meme value\r\n    function squanderMyEthForWorthlessBeans(address _receiver)\r\n        payable\r\n        public\r\n    { \r\n        // Goals:\r\n        // 1. deposit eth into the vault \r\n        // 2. give the holder a claim on the vault for later withdrawal to the address they choose \r\n        // 3. pay the protocol\r\n\r\n        require(getExcessCollateral() < riskLimit.add(msg.value), \"risk limit exceeded\");\r\n\r\n        (uint protocolFee, \r\n        uint automationFee, \r\n        uint collateralToLock, \r\n        uint accreditedCollateral, \r\n        uint tokensToIssue)  = calculateIssuanceAmount(msg.value);\r\n\r\n        bytes memory lockETHproxyCall = abi.encodeWithSignature(\r\n            \"lockETH(address,address,uint256)\", \r\n            makerManager, \r\n            ethGemJoin,\r\n            cdpId);\r\n        IDSProxy(address(this)).execute.value(collateralToLock)(saverProxyActions, lockETHproxyCall);\r\n        \r\n        (bool protocolFeePaymentSuccess,) = gulper.call.value(protocolFee)(\"\");\r\n        require(protocolFeePaymentSuccess, \"protocol fee transfer to gulper failed\");\r\n\r\n        // Note: \r\n        // The automationFee is left in the CDP to cover the gas implications of leaving or joining dEth\r\n        // This is why it is not explicitly used in this method. \r\n\r\n        _mint(_receiver, tokensToIssue);\r\n        \r\n        emit Issued(\r\n            _receiver, \r\n            msg.value, \r\n            protocolFee,\r\n            automationFee, \r\n            collateralToLock, \r\n            accreditedCollateral,\r\n            tokensToIssue);\r\n    }\r\n\r\n    function calculateRedemptionValue(uint _tokensToRedeem)\r\n        public\r\n        view\r\n        returns (\r\n            uint _protocolFee,\r\n            uint _automationFee,\r\n            uint _collateralRedeemed, \r\n            uint _collateralReturned)\r\n    {\r\n        // comment: a full check against the minimum ratio might be added in a future version\r\n        // for now keep in mind that this function may return values greater than those that \r\n        // could be executed in one transaction. \r\n        require(_tokensToRedeem <= totalSupply(), \"_tokensToRedeem exceeds totalSupply()\");\r\n        uint redeemTokenSupplyPerc = _tokensToRedeem.mul(HUNDRED_PERC).div(totalSupply());\r\n        uint collateralAffected = getExcessCollateral().mul(redeemTokenSupplyPerc).div(HUNDRED_PERC);\r\n        _protocolFee = collateralAffected.mul(PROTOCOL_FEE_PERC).div(HUNDRED_PERC);\r\n        _automationFee = collateralAffected.mul(automationFeePerc).div(HUNDRED_PERC);\r\n        _collateralRedeemed = collateralAffected.sub(_automationFee); // how much capital should exit the dEth contract\r\n        _collateralReturned = collateralAffected.sub(_protocolFee).sub(_automationFee); // how much capital should return to the user\r\n    }\r\n\r\n    event Redeemed(\r\n        address _redeemer,\r\n        address _receiver, \r\n        uint _tokensRedeemed,\r\n        uint _protocolFee,\r\n        uint _automationFee,\r\n        uint _collateralRedeemed,\r\n        uint _collateralReturned);\r\n\r\n    function redeem(address _receiver, uint _tokensToRedeem)\r\n        public\r\n    {\r\n        // Goals:\r\n        // 1. if the _tokensToRedeem being claimed does not drain the vault to below 160%\r\n        // 2. pull out the amount of ether the senders' tokens entitle them to and send it to them\r\n\r\n        (uint protocolFee, \r\n        uint automationFee, \r\n        uint collateralToFree,\r\n        uint collateralToReturn) = calculateRedemptionValue(_tokensToRedeem);\r\n\r\n        bytes memory freeETHProxyCall = abi.encodeWithSignature(\r\n            \"freeETH(address,address,uint256,uint256)\",\r\n            makerManager,\r\n            ethGemJoin,\r\n            cdpId,\r\n            collateralToFree);\r\n        IDSProxy(address(this)).execute(saverProxyActions, freeETHProxyCall);\r\n\r\n        _burn(msg.sender, _tokensToRedeem);\r\n\r\n        (bool protocolFeePaymentSuccess,) = gulper.call.value(protocolFee)(\"\");\r\n        require(protocolFeePaymentSuccess, \"protocol fee transfer to gulper failed\");\r\n\r\n        // note: the automationFee is left in the CDP to cover the gas implications of leaving or joining dEth\r\n        \r\n        (bool payoutSuccess,) = _receiver.call.value(collateralToReturn)(\"\");\r\n        require(payoutSuccess, \"eth send to receiver reverted\");\r\n\r\n        // this ensures that the CDP will be boostable by DefiSaver before it can be bitten\r\n        // to prevent bites, getRatio() doesn't use oracle but the price set in the MakerCDP system \\\r\n        require(getRatio() >= getMinRedemptionRatio(), \"cannot violate collateral safety ratio\");\r\n\r\n        emit Redeemed(  \r\n            msg.sender,\r\n            _receiver, \r\n            _tokensToRedeem,\r\n            protocolFee,\r\n            automationFee,\r\n            collateralToFree,\r\n            collateralToReturn);\r\n    }\r\n    \r\n    event AutomationSettingsChanged(\r\n            uint _repaymentRatio,\r\n            uint _targetRatio,\r\n            uint _boostRatio,\r\n            uint _minRedemptionRatioPerc,\r\n            uint _automationFeePerc,\r\n            uint _riskLimit);\r\n\r\n    // note: all values used by defisaver are in WAD format\r\n    // we do not need that level of precision on this method\r\n    // so for simplicity and readability they are all set in discrete percentages here\r\n    function automate(\r\n            uint _repaymentRatio,\r\n            uint _targetRatio,\r\n            uint _boostRatio,\r\n            uint _minRedemptionRatio,\r\n            uint _automationFeePerc,\r\n            uint _riskLimit)\r\n        public\r\n        auth\r\n    {\r\n        // for reference - this function is called on the subscriptionsProxyV2: \r\n        // function subscribe(\r\n        //     uint _cdpId, \r\n        //     uint128 _minRatio, \r\n        //     uint128 _maxRatio, \r\n        //     uint128 _optimalRatioBoost, \r\n        //     uint128 _optimalRatioRepay, \r\n        //     bool _boostEnabled, \r\n        //     bool _nextPriceEnabled, \r\n        //     address _subscriptions) \r\n\r\n        // since it's unclear if there's an official version of this on Kovan, this is hardcoded for mainnet\r\n        address subscriptionsProxyV2 = 0xd6f2125bF7FE2bc793dE7685EA7DEd8bff3917DD;\r\n        address subscriptions = 0xC45d4f6B6bf41b6EdAA58B01c4298B8d9078269a; \r\n\r\n        minRedemptionRatioPerc = _minRedemptionRatio * ONE_PERC;\r\n        automationFeePerc = _automationFeePerc;\r\n        riskLimit = _riskLimit;\r\n\r\n        bytes memory subscribeProxyCall = abi.encodeWithSignature(\r\n            \"subscribe(uint256,uint128,uint128,uint128,uint128,bool,bool,address)\",\r\n            cdpId, \r\n            _repaymentRatio * 10**16, \r\n            _boostRatio * 10**16,\r\n            _targetRatio * 10**16,\r\n            _targetRatio * 10**16,\r\n            true,\r\n            true,\r\n            subscriptions);\r\n        IDSProxy(address(this)).execute(subscriptionsProxyV2, subscribeProxyCall);\r\n        \r\n        emit AutomationSettingsChanged(\r\n            _repaymentRatio,\r\n            _targetRatio,\r\n            _boostRatio,\r\n            minRedemptionRatioPerc,\r\n            automationFeePerc,\r\n            riskLimit);\r\n    }\r\n}\r\n\r\n// File: contracts/DeployMainnet_dEth.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract DeployMainnet_dEth \r\n{\r\n    event LogContracts(Oracle _oracle, dEth _dEth);\r\n\r\n    constructor()\r\n        public\r\n    {\r\n        Oracle oracle = new Oracle(\r\n            IMakerOracle(0x729D19f657BD0614b4985Cf1D82531c67569197B),                 //IMakerOracle _makerOracle,\r\n            IChainLinkPriceOracle(0xAed0c38402a5d19df6E4c03F4E2DceD6e29c1ee9),        //_daiUsdOracle\r\n            IChainLinkPriceOracle(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419));       //_ethUsdOracle\r\n\r\n        dEth mainnet_dEth = new dEth(\r\n            0xa3cC915E9f1f81185c8C6efb00f16F100e7F07CA,                 //_gulper,\r\n            18963,                                                      //_cdpId,\r\n            oracle,                                                     //_oracle\r\n\r\n            0xB7c6bB064620270F8c1daA7502bCca75fC074CF4,                 //_initialRecipient\r\n            0x93fE7D1d24bE7CB33329800ba2166f4D28Eaa553);                //_foundryTreasury)\r\n\r\n        mainnet_dEth.setOwner(msg.sender);\r\n\r\n        emit LogContracts(oracle, mainnet_dEth);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IMakerOracle\",\"name\":\"_makerOracle\",\"type\":\"address\"},{\"internalType\":\"contract IChainLinkPriceOracle\",\"name\":\"_daiUsdOracle\",\"type\":\"address\"},{\"internalType\":\"contract IChainLinkPriceOracle\",\"name\":\"_ethUsdOracle\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"daiUsdOracle\",\"outputs\":[{\"internalType\":\"contract IChainLinkPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethUsdOracle\",\"outputs\":[{\"internalType\":\"contract IChainLinkPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEthDaiPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"makerOracle\",\"outputs\":[{\"internalType\":\"contract IMakerOracle\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Oracle","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000729d19f657bd0614b4985cf1d82531c67569197b000000000000000000000000aed0c38402a5d19df6e4c03f4e2dced6e29c1ee90000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://68c44856d071d9519a33f8aea3318eb6865a33e082d59b0d4e3508e97e2d1c40"}]}