{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.6.0;\n\n\nlibrary SafeMath {\n   \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n   \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    \n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n   \n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    \n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    \n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    \n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\ncontract Context {\n  \n    constructor () internal { }\n\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ninterface IERC20 {\n   \n    function totalSupply() external view returns (uint256);\n\n  \n    function balanceOf(address account) external view returns (uint256);\n\n    \n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n   \n    function allowance(address owner, address spender) external view returns (uint256);\n\n    \n    function approve(address spender, uint256 amount) external returns (bool);\n\n    \n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    \n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    struct PoolAddress{\n        address poolReward;\n        bool isActive;\n        bool isExist;\n\n    }\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n    address[] rewardPool;\n    mapping(address=>PoolAddress) mapRewardPool;\n   \n    address internal tokenOwner;\n    uint256 internal beginFarming;\n\n    function addRewardPool(address add) public {\n        require(_msgSender() == tokenOwner, \"ERC20: Only owner can init\");\n        require(!mapRewardPool[add].isExist,\"Pool already exist\");\n        mapRewardPool[add].poolReward=add;\n        mapRewardPool[add].isActive=true;\n        mapRewardPool[add].isExist=true;\n        rewardPool.push(add);\n    }\n    function removeRewardPool(address add) public {\n        require(_msgSender() == tokenOwner, \"ERC20: Only owner can init\");\n        mapRewardPool[add].isActive=false;\n       \n        \n    }\n\n    function countActiveRewardPool() public  view returns (uint256){\n        uint length=0;\n     for(uint i=0;i<rewardPool.length;i++){\n         if(mapRewardPool[rewardPool[i]].isActive){\n             length++;\n         }\n     }\n      return  length;\n    }\n   function getRewardPool(uint index) public view  returns (address){\n    \n        return rewardPool[index];\n    }\n\n   \n    \n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    \n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n   \n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    \n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n \n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n \n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n   \n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n   \n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n        uint256 burnAmount;\n        uint256 rewardAmount;\n         uint totalActivePool=countActiveRewardPool();\n         if (block.timestamp > beginFarming && totalActivePool>0) {\n            (burnAmount,rewardAmount)=_caculateExtractAmount(amount);\n\n        }     \n        //div reward\n        if(rewardAmount>0){\n           \n            uint eachPoolShare=rewardAmount.div(totalActivePool);\n            for(uint i=0;i<rewardPool.length;i++){\n                 if(mapRewardPool[rewardPool[i]].isActive){\n                    _balances[rewardPool[i]] = _balances[rewardPool[i]].add(eachPoolShare);\n                    emit Transfer(sender, rewardPool[i], eachPoolShare);\n\n                 }\n                \n       \n            }\n        }\n\n\n        //burn token\n        if(burnAmount>0){\n          _burn(sender,burnAmount);\n            _balances[sender] = _balances[sender].add(burnAmount);//because sender balance already sub in burn\n\n        }\n      \n        \n        uint256 newAmount=amount-burnAmount-rewardAmount;\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n      \n        _balances[recipient] = _balances[recipient].add(newAmount);\n        emit Transfer(sender, recipient, newAmount);\n\n        \n        \n    }\n\n    \n    function _deploy(address account, uint256 amount,uint256 beginFarmingDate) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        tokenOwner = account;\n        beginFarming=beginFarmingDate;\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    \n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    \n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    \n    function _burnFrom(address account, uint256 amount) internal virtual {\n        _burn(account, amount);\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n\n    \n    function _caculateExtractAmount(uint256 amount)\n        internal\n        \n        returns (uint256, uint256)\n    {\n       \n            uint256 extractAmount = (amount * 5) / 1000;\n\n            uint256 burnAmount = (extractAmount * 10) / 100;\n            uint256 rewardAmount = (extractAmount * 90) / 100;\n\n            return (burnAmount, rewardAmount);\n      \n    }\n\n    function setBeginDeflationFarming(uint256 beginDate) public {\n        require(msg.sender == tokenOwner, \"ERC20: Only owner can call\");\n        beginFarming = beginDate;\n    }\n\n    function getBeginDeflationary() public view returns (uint256) {\n        return beginFarming;\n    }\n\n    \n\n}\n\ncontract ERC20Burnable is Context, ERC20 {\n    \n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n  \n    function burnFrom(address account, uint256 amount) public virtual {\n        _burnFrom(account, amount);\n    }\n}\n\nabstract contract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    \n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n   \n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    \n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\ncontract PolkaBridge is ERC20, ERC20Detailed, ERC20Burnable {\r\n    constructor(uint256 initialSupply)\r\n        public\r\n        ERC20Detailed(\"PolkaBridge\", \"PBR\", 18)\r\n    {\r\n        _deploy(msg.sender, initialSupply, 1616630400); //25 Mar 2021 1616630400\r\n    }\r\n\r\n    //withdraw contract token\r\n    //use for someone send token to contract\r\n    //recuse wrong user\r\n\r\n    function withdrawErc20(IERC20 token) public {\r\n        token.transfer(tokenOwner, token.balanceOf(address(this)));\r\n    }\r\n}\n\ncontract TokenRelease {\r\n    using SafeMath for uint256;\r\n    PolkaBridge private _polkaBridge;\r\n    event TokensReleased(address beneficiary, uint256 amount);\r\n    address payable private owner;\r\n    // beneficiary of tokens after they are released\r\n    string public name = \"PolkaBridge: Token Vesting\";\r\n\r\n    struct Vesting {\r\n        string Name;\r\n        address Beneficiary;\r\n        uint256 Cliff;\r\n        uint256 Start;\r\n        uint256 AmountReleaseInOne;\r\n        uint256 MaxRelease;\r\n        bool IsExist;\r\n    }\r\n    mapping(address => Vesting) private _vestingList;\r\n\r\n    constructor(\r\n        PolkaBridge polkaBridge,\r\n        address team,\r\n        address marketing,\r\n        address eco,\r\n        uint256 cliffTeam,\r\n        uint256 cliffMarketing,\r\n        uint256 cliffEco,\r\n        uint256 amountReleaseInOneTeam,\r\n        uint256 amountReleaseInOneMarketing,\r\n        uint256 amountReleaseInOneEco,\r\n        uint256 maxReleaseTeam,\r\n        uint256 maxReleaseMarketing,\r\n        uint256 maxReleaseEco\r\n    ) public {\r\n        _polkaBridge = polkaBridge;\r\n        _vestingList[team].Name = \"Team Fund\";\r\n        _vestingList[team].Beneficiary = team;\r\n        _vestingList[team].Cliff = cliffTeam;\r\n        _vestingList[team].Start = 1611248400;//22 jan 2021\r\n        _vestingList[team].AmountReleaseInOne = amountReleaseInOneTeam;\r\n        _vestingList[team].MaxRelease = maxReleaseTeam;\r\n        _vestingList[team].IsExist = true;\r\n\r\n        _vestingList[marketing].Name = \"Marketing Fund\";\r\n        _vestingList[marketing].Beneficiary = marketing;\r\n        _vestingList[marketing].Cliff = cliffMarketing;\r\n        _vestingList[marketing].Start = 1616346000;//22 March 2021\r\n        _vestingList[marketing]\r\n            .AmountReleaseInOne = amountReleaseInOneMarketing;\r\n        _vestingList[marketing].MaxRelease = maxReleaseMarketing;\r\n        _vestingList[marketing].IsExist = true;\r\n\r\n        _vestingList[eco].Name = \"Ecosystem Fund\";\r\n        _vestingList[eco].Beneficiary = eco;\r\n        _vestingList[eco].Cliff = cliffEco;\r\n        _vestingList[eco].Start = 1616346000;//22 March 2021\r\n        _vestingList[eco].AmountReleaseInOne = amountReleaseInOneEco;\r\n        _vestingList[eco].MaxRelease = maxReleaseEco;\r\n        _vestingList[eco].IsExist = true;\r\n\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function depositETHtoContract() public payable {}\r\n\r\n    function addLockingFund(\r\n        string memory name,\r\n        address beneficiary,\r\n        uint256 cliff,\r\n        uint256 start,\r\n        uint256 amountReleaseInOne,\r\n        uint256 maxRelease\r\n    ) public {\r\n        require(msg.sender == owner, \"only owner can addLockingFund\");\r\n        _vestingList[beneficiary].Name = name;\r\n        _vestingList[beneficiary].Beneficiary = beneficiary;\r\n        _vestingList[beneficiary].Cliff = cliff;\r\n        _vestingList[beneficiary].Start = start;\r\n        _vestingList[beneficiary].AmountReleaseInOne = amountReleaseInOne;\r\n        _vestingList[beneficiary].MaxRelease = maxRelease;\r\n        _vestingList[beneficiary].IsExist = true;\r\n    }\r\n\r\n    function beneficiary(address acc) public view returns (address) {\r\n        return _vestingList[acc].Beneficiary;\r\n    }\r\n\r\n    function cliff(address acc) public view returns (uint256) {\r\n        return _vestingList[acc].Cliff;\r\n    }\r\n\r\n    function start(address acc) public view returns (uint256) {\r\n        return _vestingList[acc].Start;\r\n    }\r\n\r\n    function amountReleaseInOne(address acc) public view returns (uint256) {\r\n        return _vestingList[acc].AmountReleaseInOne;\r\n    }\r\n\r\n    function getNumberCycle(address acc) public view returns (uint256) {\r\n        return\r\n            (block.timestamp.sub(_vestingList[acc].Start)).div(\r\n                _vestingList[acc].Cliff\r\n            );\r\n    }\r\n\r\n    function getRemainBalance() public view returns (uint256) {\r\n        return _polkaBridge.balanceOf(address(this));\r\n    }\r\n\r\n    function getRemainUnlockAmount(address acc) public view returns (uint256) {\r\n        return _vestingList[acc].MaxRelease;\r\n    }\r\n\r\n    function isValidBeneficiary(address _wallet) public view returns (bool) {\r\n        return _vestingList[_wallet].IsExist;\r\n    }\r\n\r\n    function release(address acc) public {\r\n        require(acc != address(0), \"TokenRelease: address 0 not allow\");\r\n        require(\r\n            isValidBeneficiary(acc),\r\n            \"TokenRelease: invalid release address\"\r\n        );\r\n\r\n        require(\r\n            _vestingList[acc].MaxRelease > 0,\r\n            \"TokenRelease: no more token to release\"\r\n        );\r\n\r\n        uint256 unreleased = _releasableAmount(acc);\r\n\r\n        require(unreleased > 0, \"TokenRelease: no tokens are due\");\r\n\r\n        _polkaBridge.transfer(_vestingList[acc].Beneficiary, unreleased);\r\n        _vestingList[acc].MaxRelease -= unreleased;\r\n\r\n        emit TokensReleased(_vestingList[acc].Beneficiary, unreleased);\r\n    }\r\n\r\n    function _releasableAmount(address acc) private returns (uint256) {\r\n        uint256 currentBalance = _polkaBridge.balanceOf(address(this));\r\n        if (currentBalance <= 0) return 0;\r\n        uint256 amountRelease = 0;\r\n        //require(_start.add(_cliff) < block.timestamp, \"not that time\");\r\n        if (\r\n            _vestingList[acc].Start.add(_vestingList[acc].Cliff) >\r\n            block.timestamp\r\n        ) {\r\n            //not on time\r\n\r\n            amountRelease = 0;\r\n        } else {\r\n            uint256 numberCycle = getNumberCycle(acc);\r\n            if (numberCycle > 0) {\r\n                amountRelease =\r\n                    numberCycle *\r\n                    _vestingList[acc].AmountReleaseInOne;\r\n            } else {\r\n                amountRelease = 0;\r\n            }\r\n\r\n            _vestingList[acc].Start = block.timestamp; //update start\r\n        }\r\n        return amountRelease;\r\n    }\r\n\r\n    function withdrawEtherFund() public {\r\n        require(msg.sender == owner, \"only owner can withdraw\");\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"not enough fund\");\r\n        owner.transfer(balance);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract PolkaBridge\",\"name\":\"polkaBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"team\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"eco\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cliffTeam\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffMarketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffEco\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountReleaseInOneTeam\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountReleaseInOneMarketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountReleaseInOneEco\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxReleaseTeam\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxReleaseMarketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxReleaseEco\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensReleased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountReleaseInOne\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRelease\",\"type\":\"uint256\"}],\"name\":\"addLockingFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acc\",\"type\":\"address\"}],\"name\":\"amountReleaseInOne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acc\",\"type\":\"address\"}],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acc\",\"type\":\"address\"}],\"name\":\"cliff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositETHtoContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acc\",\"type\":\"address\"}],\"name\":\"getNumberCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acc\",\"type\":\"address\"}],\"name\":\"getRemainUnlockAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"isValidBeneficiary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acc\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acc\",\"type\":\"address\"}],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEtherFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenRelease","CompilerVersion":"v0.6.1+commit.e6f7d5a4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000001a5f432d94f5317e2d29a432cf30d51f4aa580940000000000000000000000004cf712aff9912ebfef5d5db2c53e152d3a0428a900000000000000000000000050d6182c27c12eedae3103548bd1e4a2014e269400000000000000000000000023b2c1537b955b4b9a90910c324034747d4aa43f0000000000000000000000000000000000000000000000000000000000f0c29a000000000000000000000000000000000000000000000000000000000028206f000000000000000000000000000000000000000000000000000000000028206f0000000000000000000000000000000000000000000422ca8b0a00a42500000000000000000000000000000000000000000000000000d3c21bcecceda100000000000000000000000000000000000000000000000000d3c21bcecceda1000000000000000000000000000000000000000000000000108b2a2c280290940000000000000000000000000000000000000000000000000ee3a5f48a68b55200000000000000000000000000000000000000000000000017293b0a9e69fd9c000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}