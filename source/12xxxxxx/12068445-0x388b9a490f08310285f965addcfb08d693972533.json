{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.17;\r\n\r\n/***************\r\n**            **\r\n** INTERFACES **\r\n**            **\r\n***************/\r\n\r\n/**\r\n * @title  Interface for Kong ERC20 Token Contract.\r\n */\r\ninterface KongERC20Interface {\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function mint(uint256 mintedAmount, address recipient) external;\r\n  function getMintingLimit() external returns(uint256);\r\n\r\n}\r\n\r\n/**\r\n * @title Interface for EllipticCurve contract.\r\n */\r\ninterface EllipticCurveInterface {\r\n\r\n    function validateSignature(bytes32 message, uint[2] calldata rs, uint[2] calldata Q) external view returns (bool);\r\n\r\n}\r\n\r\n/****************************\r\n**                         **\r\n** OPEN ZEPPELIN CONTRACTS **\r\n**                         **\r\n****************************/\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev These functions deal with verification of Merkle trees (hash trees),\r\n */\r\nlibrary MerkleProof {\r\n    /**\r\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n     * defined by `root`. For this, a `proof` must be provided, containing\r\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n     */\r\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\r\n        bytes32 computedHash = leaf;\r\n\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            bytes32 proofElement = proof[i];\r\n\r\n            if (computedHash <= proofElement) {\r\n                // Hash(current computed hash + current element of the proof)\r\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\r\n            } else {\r\n                // Hash(current element of the proof + current computed hash)\r\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\r\n            }\r\n        }\r\n\r\n        // Check if the computed hash (root) is equal to the provided root\r\n        return computedHash == root;\r\n    }\r\n}\r\n\r\n/**********************************\r\n**                               **\r\n**   REGISTER MERKLE CONTRACT    **\r\n**                               **\r\n**********************************/\r\n\r\n/**\r\n * @title Register Contract.\r\n */\r\ncontract RegisterMerkleRoot {\r\n  using SafeMath for uint256;\r\n\r\n  // Account with the right to adjust the set of minters.\r\n  address public _owner;\r\n\r\n  // Address of the Kong ERC20 account.\r\n  address public _kongERC20Address;\r\n\r\n  // Address of future registry.\r\n  address public _upgradeContract;\r\n\r\n  // Sum of Kong amounts marked as mintable for registered devices.\r\n  uint256 public _totalMintable;\r\n\r\n  // Minters.\r\n  mapping (address => bool) public _minters;\r\n\r\n  // Minting caps.\r\n  mapping (address => uint256) public _mintingCaps;\r\n\r\n  // Minted device.\r\n  struct Device {\r\n    uint256 kongAmount;\r\n    address contractAddress;\r\n  }\r\n\r\n  // Minted devices.\r\n  mapping(bytes32 => Device) internal _devices;\r\n\r\n  // Signers.\r\n  mapping(address => bool) public _signers;\r\n\r\n  struct DeviceRoot {\r\n    bytes32 deviceRoot;\r\n    uint256 deviceKongAmount;\r\n    uint256 totalDevices;\r\n    uint256 totalMintableKong;   \r\n    uint256 mintableTime;\r\n    string  ipfsCid;\r\n    string  arwId;\r\n    uint256 rootTimestamp;\r\n    uint256 rootIndex;\r\n  }\r\n\r\n  mapping(bytes32 => DeviceRoot) internal _deviceRoots;\r\n\r\n  uint256 public _deviceRootCount;\r\n\r\n  struct DeviceRootIndex {\r\n    bytes32 deviceRoot;\r\n  }\r\n\r\n\r\n  mapping(uint256 => DeviceRootIndex) internal _deviceRootIndices;\r\n\r\n  /**\r\n   * @dev Emit when a device merkle root is added.\r\n   */\r\n  event RootAddition(\r\n    bytes32 deviceRoot,\r\n    uint256 deviceKongAmount,\r\n    uint256 totalDevices,\r\n    uint256 totalMintableKong,    \r\n    uint256 mintableTime,\r\n    string  ipfsCid,\r\n    string  arwId,\r\n    uint256 rootTimestamp,\r\n    uint256 rootIndex\r\n  );\r\n\r\n\r\n  event MintKong(\r\n    bytes32 hardwareHash,\r\n    uint256 kongAmount\r\n  );\r\n\r\n  /**\r\n   * @dev Emit when minting rights are delegated / removed.\r\n   */\r\n  event MinterAddition (\r\n    address minter,\r\n    uint256 mintingCap\r\n  );\r\n\r\n  event MinterRemoval (\r\n    address minter\r\n  );\r\n\r\n  /**\r\n   * @dev Emit when contract reference added to a device.\r\n   */\r\n  event AddressAdded (\r\n    bytes32 hardwareHash,\r\n    address contractAddress\r\n  );\r\n\r\n  /**\r\n   * @dev Emit when contract reference added to a device.\r\n   */\r\n  event UpgradeAddressAdded (\r\n    address upgradeAddress\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev Emit when signers are added / removed.\r\n   */\r\n  event SignerAddition (\r\n    address signer\r\n  );\r\n\r\n  event SignerRemoval (\r\n    address signer\r\n  );  \r\n\r\n  /**\r\n   * @dev Constructor.\r\n   */\r\n  constructor(address owner, address kongAddress) public {\r\n\r\n    // Set address of owner.\r\n    _owner = owner;\r\n\r\n    // Set address of Kong ERC20 contract.\r\n    _kongERC20Address = kongAddress;\r\n\r\n    // Set minting cap of owner account.\r\n    _mintingCaps[_owner] = (2 ** 25 + 2 ** 24 + 2 ** 23 + 2 ** 22) * 10 ** 18;\r\n\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account but owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(_owner == msg.sender, 'Can only be called by owner.');\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account but owner or registered minter.\r\n   */\r\n  modifier onlyOwnerOrMinter() {\r\n    require(_owner == msg.sender || _minters[msg.sender] == true, 'Can only be called by owner or minter.');\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account but owner or registered signer.\r\n   */\r\n  modifier onlyOwnerOrSigner() {\r\n    require(_owner == msg.sender || _signers[msg.sender] == true, 'Can only be called by owner or signer.');\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account but registered signer.\r\n   */\r\n  // modifier onlySigner() {\r\n  //   require(_signers[msg.sender] == true, 'Can only be called by signer.');\r\n  //   _;\r\n  // }\r\n\r\n  /**\r\n   * @dev Endow `newMinter` with right to add mintable devices up to `mintingCap`.\r\n   */\r\n  function delegateMintingRights(\r\n    address newMinter,\r\n    uint256 mintingCap\r\n  )\r\n    public\r\n    onlyOwner\r\n  {\r\n    // Delegate minting rights.\r\n    _mintingCaps[_owner] = _mintingCaps[_owner].sub(mintingCap);\r\n    _mintingCaps[newMinter] = _mintingCaps[newMinter].add(mintingCap);\r\n\r\n    // Add newMinter to dictionary of minters.\r\n    _minters[newMinter] = true;\r\n\r\n    // Emit event.\r\n    emit MinterAddition(newMinter, _mintingCaps[newMinter]);\r\n  }\r\n\r\n  /**\r\n   * @dev Remove address from the mapping of _minters.\r\n   */\r\n  function removeMintingRights(\r\n    address minter\r\n  )\r\n    public\r\n    onlyOwner\r\n  {\r\n    // Cannot remove rights from _owner.\r\n    require(_owner != minter, 'Cannot remove owner from minters.');\r\n\r\n    // Adjust minting rights.\r\n    _mintingCaps[_owner] = _mintingCaps[_owner].add(_mintingCaps[minter]);\r\n    _mintingCaps[minter] = 0;\r\n\r\n    // Deactivate minter.\r\n    _minters[minter] = false;\r\n\r\n    // Emit event.\r\n    emit MinterRemoval(minter);\r\n  }\r\n\r\n  /**\r\n   * @dev Add a new signer contract which can carry out specific tasks.\r\n   */\r\n  function addSigner(\r\n    address newSigner\r\n  )\r\n    public\r\n    onlyOwner\r\n  {\r\n    // Add newSigner to dictionary of signers.\r\n    _signers[newSigner] = true;\r\n\r\n    // Emit event.\r\n    emit SignerAddition(newSigner);\r\n  }\r\n\r\n  /**\r\n   * @dev Add a new signer contract which can carry out specific tasks.\r\n   */\r\n  function removeSigner(\r\n    address signer\r\n  )\r\n    public\r\n    onlyOwner\r\n  {\r\n    // Add newSigner to dictionary of signers.\r\n    _signers[signer] = false;\r\n\r\n    // Emit event.\r\n    emit SignerRemoval(signer);\r\n  }\r\n\r\n  /**\r\n   * @dev Add upgrade contract address.\r\n   */\r\n  function addUpgradeAddress(\r\n    address upgradeAddress\r\n  )\r\n    public\r\n    onlyOwner\r\n  {\r\n    // Add upgrade address.\r\n    _upgradeContract = upgradeAddress;\r\n\r\n    // Emit event.\r\n    emit UpgradeAddressAdded(upgradeAddress);\r\n  }\r\n\r\n  /**\r\n   * @dev Add a new device merkle root.\r\n   */\r\n  function addRoot(\r\n    bytes32 deviceRootHash,\r\n    bytes32 deviceRoot,\r\n    uint256 deviceKongAmount,\r\n    uint256 totalDevices,\r\n    uint256 totalMintableKong,\r\n    uint256 mintableTime,    \r\n    string memory ipfsCid,\r\n    string memory arwId\r\n  )\r\n    public\r\n    onlyOwnerOrMinter\r\n  {\r\n    // Hash the device root which is the key to the mapping.\r\n    bytes32 calculatedRootHash = sha256(abi.encodePacked(deviceRoot));\r\n\r\n    require(deviceRootHash == calculatedRootHash, 'Invalid root hash.');\r\n\r\n    // Verify that this root has not been registered yet.\r\n    require(_deviceRoots[deviceRootHash].deviceRoot == 0, 'Already registered.');\r\n\r\n    // Verify the cumulative limit for mintable Kong has not been exceeded. We can also register devices that are not Kong mintable.\r\n    if (totalMintableKong > 0 && deviceKongAmount > 0) {\r\n\r\n      require(totalMintableKong == deviceKongAmount * totalDevices, 'Incorrect Kong per device.');\r\n\r\n      uint256 _maxMinted = KongERC20Interface(_kongERC20Address).getMintingLimit();\r\n      require(_totalMintable.add(totalMintableKong) <= _maxMinted, 'Exceeds cumulative limit.');\r\n\r\n      // Increment _totalMintable.\r\n      _totalMintable += totalMintableKong;\r\n\r\n      // Adjust minting cap. Throws on underflow / Guarantees minter does not exceed its limit.\r\n      _mintingCaps[msg.sender] = _mintingCaps[msg.sender].sub(totalMintableKong);\r\n    }\r\n\r\n    // Increment the device root count.\r\n    _deviceRootCount++;\r\n\r\n    // Set rootCount.\r\n    uint256 rootIndex = _deviceRootCount;\r\n\r\n    // Set timestamp for when we added this root.\r\n    uint256 rootTimestamp = block.timestamp;\r\n\r\n    // Create device struct.\r\n    _deviceRoots[deviceRootHash] = DeviceRoot(\r\n      deviceRoot,\r\n      deviceKongAmount,\r\n      totalDevices,\r\n      totalMintableKong,\r\n      mintableTime,    \r\n      ipfsCid,\r\n      arwId,\r\n      rootTimestamp,\r\n      rootIndex\r\n    );\r\n\r\n     // Create device index struct.\r\n    _deviceRootIndices[rootIndex] = DeviceRootIndex(\r\n      deviceRoot\r\n    );   \r\n\r\n    emit RootAddition(\r\n      deviceRoot,\r\n      deviceKongAmount,\r\n      totalDevices,\r\n      totalMintableKong,    \r\n      mintableTime,\r\n      ipfsCid,\r\n      arwId,\r\n      rootTimestamp,\r\n      rootIndex\r\n    );\r\n  }  \r\n\r\n  /**\r\n   * @dev Mint root Kong amount to `recipient`.\r\n   */\r\n  function mintKong(\r\n    bytes32[] calldata proof,\r\n    bytes32 root,\r\n    bytes32 hardwareHash,\r\n    address recipient\r\n  )\r\n    external\r\n    onlyOwnerOrMinter\r\n  {\r\n    // Hash the device root which is the key to the mapping.\r\n    bytes32 rootHash = sha256(abi.encodePacked(root));\r\n\r\n    // Get associated device root.\r\n    DeviceRoot memory r = _deviceRoots[rootHash];\r\n\r\n    require(r.deviceRoot == root, 'Invalid root.');\r\n\r\n    // Make sure proof time is mintable\r\n    require(block.timestamp >= r.mintableTime, 'Cannot mint yet.');\r\n\r\n    // Verify device is in proof.\r\n    require(verifyProof(proof, r.deviceRoot, hardwareHash, r.deviceKongAmount), 'Device not found in root.');\r\n\r\n    // Check minter contract to see if device is minted.\r\n    require(_devices[hardwareHash].kongAmount == 0, 'Already minted.');\r\n\r\n    // Set value of Kong amount, implicitly indicating minted.\r\n    _devices[hardwareHash].kongAmount = r.deviceKongAmount;\r\n\r\n    // Get associated device root to store changes.\r\n    DeviceRoot storage s = _deviceRoots[rootHash];\r\n\r\n    // Decrement totalMintableKong and devices.\r\n    s.totalMintableKong = s.totalMintableKong.sub(r.deviceKongAmount);\r\n    s.totalDevices = s.totalDevices.sub(1);\r\n\r\n    // Mint.\r\n    KongERC20Interface(_kongERC20Address).mint(r.deviceKongAmount, recipient);\r\n\r\n    emit MintKong(\r\n      hardwareHash,\r\n      r.deviceKongAmount\r\n    );   \r\n  }\r\n\r\n  /**\r\n   * @dev Associate a smart contract address with the device.\r\n   */\r\n  function addAddress(\r\n    bytes32 primaryPublicKeyHash,\r\n    bytes32 secondaryPublicKeyHash,\r\n    bytes32 tertiaryPublicKeyHash,    \r\n    bytes32 hardwareSerial,\r\n    address contractAddress\r\n  )\r\n    external\r\n    onlyOwnerOrSigner\r\n  {\r\n    // Hash all the keys in order to calculate the hardwareHash.\r\n    bytes32 hardwareHash = sha256(abi.encodePacked(primaryPublicKeyHash, secondaryPublicKeyHash, tertiaryPublicKeyHash, hardwareSerial));    \r\n    \r\n    require(_devices[hardwareHash].contractAddress == address(0), 'Already has address.');\r\n\r\n    _devices[hardwareHash].contractAddress = contractAddress;\r\n\r\n    emit AddressAdded(\r\n      hardwareHash,\r\n      contractAddress\r\n    );    \r\n  }\r\n\r\n  function isDeviceMintable(\r\n    bytes32 hardwareHash\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    require(_devices[hardwareHash].kongAmount == 0, 'Device already minted.');\r\n\r\n    return true;\r\n  }\r\n\r\n  function getDeviceAddress(\r\n    bytes32 hardwareHash\r\n  )\r\n    external\r\n    view\r\n    returns (address)\r\n  {\r\n    return _devices[hardwareHash].contractAddress;\r\n  } \r\n\r\n  function verifyRoot(bytes32 root\r\n  )\r\n    public\r\n    view\r\n    returns (bytes32)\r\n  {\r\n    // Hash the device root which is the key to the mapping.\r\n    bytes32 rootHash = sha256(abi.encodePacked(root));\r\n\r\n    // Get associated device root.\r\n    DeviceRoot memory r = _deviceRoots[rootHash];\r\n\r\n    return r.deviceRoot;   \r\n  } \r\n\r\n  function verifyProof(\r\n    bytes32[] memory proof, \r\n    bytes32 root, \r\n    bytes32 hardwareHash, \r\n    uint256 kongAmount\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    // Hash the device root which is the key to the mapping.\r\n    bytes32 rootHash = sha256(abi.encodePacked(root));\r\n\r\n    // Get associated device root.\r\n    DeviceRoot memory r = _deviceRoots[rootHash];\r\n\r\n    require(r.deviceRoot == root, 'Invalid root.');    \r\n\r\n    bytes32 encodeLeaf = keccak256(abi.encodePacked(hardwareHash));\r\n\r\n    require(r.deviceKongAmount == kongAmount, 'Invalid Kong amount.');\r\n\r\n    return MerkleProof.verify(proof, r.deviceRoot, encodeLeaf);\r\n  }\r\n\r\n  /**\r\n   * @dev Return root registration information.\r\n   */\r\n  function getRootDetails(\r\n    bytes32 root\r\n  )\r\n    external\r\n    view\r\n    returns (uint256, uint256, uint256, uint256, string memory, string memory, uint256, uint256)\r\n  {\r\n    // Hash the device root which is the key to the mapping.\r\n    bytes32 rootHash = sha256(abi.encodePacked(root));\r\n\r\n    // Get associated device root.\r\n    DeviceRoot memory r = _deviceRoots[rootHash];\r\n\r\n    return (\r\n      r.deviceKongAmount,\r\n      r.totalDevices,\r\n      r.totalMintableKong,\r\n      r.mintableTime,\r\n      r.ipfsCid,\r\n      r.arwId,\r\n      r.rootTimestamp,\r\n      r.rootIndex\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Return root registration information.\r\n   */\r\n  function getRootByIndex(\r\n    uint256 rootIndex\r\n  )\r\n    external\r\n    view\r\n    returns (bytes32)\r\n  {\r\n    // Get associated device root.\r\n    DeviceRootIndex memory i = _deviceRootIndices[rootIndex];\r\n\r\n    return (\r\n      i.deviceRoot\r\n    );  \r\n  }  \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kongAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hardwareHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"AddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hardwareHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kongAmount\",\"type\":\"uint256\"}],\"name\":\"MintKong\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintingCap\",\"type\":\"uint256\"}],\"name\":\"MinterAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"MinterRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"deviceRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deviceKongAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDevices\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalMintableKong\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintableTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ipfsCid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"arwId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rootTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rootIndex\",\"type\":\"uint256\"}],\"name\":\"RootAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"SignerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"SignerRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"upgradeAddress\",\"type\":\"address\"}],\"name\":\"UpgradeAddressAdded\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"_deviceRootCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_kongERC20Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_minters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_mintingCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_signers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalMintable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_upgradeContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"primaryPublicKeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"secondaryPublicKeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"tertiaryPublicKeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"hardwareSerial\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"addAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"deviceRootHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"deviceRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deviceKongAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDevices\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMintableKong\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintableTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsCid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"arwId\",\"type\":\"string\"}],\"name\":\"addRoot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSigner\",\"type\":\"address\"}],\"name\":\"addSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"upgradeAddress\",\"type\":\"address\"}],\"name\":\"addUpgradeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintingCap\",\"type\":\"uint256\"}],\"name\":\"delegateMintingRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hardwareHash\",\"type\":\"bytes32\"}],\"name\":\"getDeviceAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rootIndex\",\"type\":\"uint256\"}],\"name\":\"getRootByIndex\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"getRootDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hardwareHash\",\"type\":\"bytes32\"}],\"name\":\"isDeviceMintable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"hardwareHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"mintKong\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"removeMintingRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"removeSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"hardwareHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"kongAmount\",\"type\":\"uint256\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"verifyRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RegisterMerkleRoot","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ab35d3476251c6b614dc2eb36380d7af1232d822000000000000000000000000177f2ace25f81fc50f9f6e9193adf5ac758e8098","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://234a144e605e2b1654c808ef69474ab520ec7a763e5933e142dafc21652c3f9d"}]}