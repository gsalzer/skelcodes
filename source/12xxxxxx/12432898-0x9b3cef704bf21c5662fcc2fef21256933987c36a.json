{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.12;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ninterface StandardToken {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    \r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n        \r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IYearnVault{\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function withdraw(uint256 amount) external;\r\n    function pricePerShare() external view returns(uint256);\r\n    function deposit(uint256 _amount) external;\r\n    //function deposit(uint256 _amount, address recipient) external returns(uint256);\r\n}\r\n\r\ninterface IWETH is StandardToken{\r\n    function withdraw(uint256 amount) external returns(uint256);\r\n    function deposit() external payable;\r\n}\r\n\r\ninterface IStakeAndYield {\r\n    function getRewardToken() external view returns(address);\r\n    function totalSupply(uint256 stakeType) external view returns(uint256);\r\n    function notifyRewardAmount(uint256 reward, uint256 stakeType) external;\r\n}\r\n\r\ninterface IAutomaticMarketMaker {\r\n    function buy(uint256 _tokenAmount) external payable;\r\n    function sell(uint256 tokenAmount, uint256 _etherAmount) external;\r\n    function calculatePurchaseReturn(uint256 etherAmount) external returns (uint256);\r\n    function calculateSaleReturn(uint256 tokenAmount) external returns (uint256);\r\n    function withdrawPayments(address payable payee) external;\r\n}\r\n\r\ninterface ICurve{\r\n    function get_virtual_price() external view returns(uint256);\r\n    function add_liquidity(uint256[2] memory amounts, uint256 min_amounts) external payable returns(uint256);\r\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 _min_amount) external returns(uint256);\r\n}\r\n\r\n\r\ncontract Controller is Ownable {\r\n    using SafeMath for uint256;\r\n    uint256 MAX_INT = type(uint256).max;\r\n    \r\n    IWETH public weth = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    address public DEUS = 0x3b62F3820e0B035cc4aD602dECe6d796BC325325;\r\n    address public AETH = 0xaA17A236F2bAdc98DDc0Cf999AbB47D47Fc0A6Cf;\r\n\r\n    IUniswapV2Router02 public uniswapRouter = IUniswapV2Router02(\r\n    \t0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n    );\r\n\r\n    IYearnVault public yweth = IYearnVault(0xa9fE4601811213c340e850ea305481afF02f5b28);\r\n    IAutomaticMarketMaker public AMM = IAutomaticMarketMaker(0xD77700fC3C78d1Cb3aCb1a9eAC891ff59bC7946D);\r\n    ICurve curve = ICurve(0xA96A65c051bF88B4095Ee1f2451C2A9d43F53Ae2);\r\n\r\n    // strategy => vault\r\n    mapping (address => address) public strategies;\r\n\r\n    // vault => strategy\r\n    mapping (address => address) public vaults;\r\n\r\n    // vault => exitToken\r\n    mapping (address => address) public exitTokens;\r\n\r\n    // vault => multiplier\r\n    mapping (address => uint256) public multipliers;\r\n\r\n    mapping (address => uint256) public strategyBalances;\r\n\r\n    address public operator;\r\n\r\n    uint256 public minBuyFromAMM = 1 ether;\r\n\r\n\r\n\r\n    modifier onlyOwnerOrOperator(){\r\n        require(\r\n            msg.sender == owner() || msg.sender == operator,\r\n            \"!owner\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor() public{\r\n   \t\tStandardToken(weth).approve(address(uniswapRouter), MAX_INT);\r\n\t\tStandardToken(weth).approve(address(yweth), MAX_INT);\r\n        StandardToken(DEUS).approve(address(uniswapRouter), MAX_INT);\r\n    }\r\n\r\n    modifier onlyStrategy(){\r\n    \trequire(strategies[msg.sender] != address(0), \"!strategy\");\r\n    \t_;\r\n    }\r\n\r\n    modifier onlyVault(){\r\n    \trequire(vaults[msg.sender] != address(0), \"!vault\");\r\n    \t_;\r\n    }\r\n\r\n    modifier onlyExitableVault(){\r\n        require(vaults[msg.sender] != address(0) &&\r\n            exitTokens[msg.sender] != address(0)\r\n            , \"!exitable vault\");\r\n        _;\r\n    }\r\n\r\n    receive() external payable {\r\n\t}\r\n\r\n    function depositWETH() external payable{\r\n        weth.deposit{value: msg.value}();\r\n    }\r\n\r\n    function depositAETH() external payable{\r\n        curve.add_liquidity{value: msg.value}([msg.value, 0],\r\n            0\r\n        );\r\n    }\r\n\r\n\tfunction addStrategy(address vault, address strategy, \r\n        address exitToken, uint256 multiplier,\r\n        address yearnDepositToken,\r\n        address yearnVault\r\n        ) external onlyOwner{\r\n\t\trequire(vault != address(0) && strategy!=address(0), \"0x0\");\r\n\t\tstrategies[strategy] = vault;\r\n\t\tvaults[vault] = strategy;\r\n\r\n        exitTokens[vault] = exitToken;\r\n        multipliers[vault] = multiplier;\r\n\r\n        if(yearnDepositToken != address(0)){\r\n\t\t  StandardToken(yearnDepositToken).approve(yearnVault, MAX_INT);\r\n        }\r\n\t}\r\n\r\n\tfunction delStrategy(address vault, address strategy) external onlyOwner{\r\n\t\trequire(vault != address(0) && strategy!=address(0), \"0x0\");\r\n\t\tstrategies[strategy] = address(0);\r\n\t\tvaults[vault] = address(0);\r\n\t}\r\n\r\n    function setOperator(address _addr) public onlyOwner{\r\n        operator = _addr;\r\n    }\r\n\r\n    function setMultiplier(\r\n        address vault, \r\n        uint256 multiplier\r\n    ) external onlyOwnerOrOperator{\r\n        require(vaults[vault] != address(0), \"!vault\");\r\n        multipliers[vault] = multiplier;\r\n    }\r\n\r\n\tfunction withdrawETH(uint256 amount) public onlyStrategy{\r\n\t\tmsg.sender.transfer(amount);\r\n\t}\r\n\r\n    function sendExitToken(\r\n        address _user,\r\n        uint256 _amount\r\n    ) public onlyExitableVault{\r\n        uint256 amount = _amount.mul(multipliers[msg.sender]).div(1 ether);\r\n        require(amount > 0, \"0 amount\");\r\n        StandardToken(exitTokens[msg.sender]).transfer(\r\n            _user, amount\r\n        );\r\n    }\r\n\r\n\tfunction depositTokenForStrategy(\r\n        uint256 amount, \r\n        address yearnVault\r\n    ) public onlyStrategy{\r\n        IYearnVault v = IYearnVault(yearnVault);\r\n        uint256 balanceBefore = v.balanceOf(address(this));\r\n        v.deposit(amount);\r\n        uint256 balance = v.balanceOf(address(this)).sub(\r\n            balanceBefore\r\n        );\r\n        strategyBalances[msg.sender].add(balance);\r\n\t}\r\n\r\n    function withdrawForStrategy(\r\n        uint256 sharesToWithdraw, \r\n        address yearnVault\r\n        ) public onlyStrategy{\r\n\r\n        IYearnVault v = IYearnVault(yearnVault);\r\n        strategyBalances[msg.sender].sub(sharesToWithdraw);   \r\n        v.withdraw(sharesToWithdraw);\r\n    }\r\n\r\n\tfunction buyForStrategy(\r\n\t\tuint256 amount,\r\n        address rewardToken,\r\n        address recipient\r\n    ) public onlyStrategy{\r\n    \taddress[] memory path;\r\n\r\n        uint256[] memory amounts;\r\n        uint256 tokenAmount = amount;\r\n        if(amount < minBuyFromAMM){\r\n            path = new address[](3);\r\n        \tpath[0] = address(weth);\r\n        \tpath[1] = DEUS;\r\n        \tpath[2] = rewardToken;\r\n        }else{\r\n            path = new address[](2);\r\n            path[0] = DEUS;\r\n            path[1] = rewardToken;\r\n\r\n            weth.withdraw(amount);\r\n            tokenAmount = AMM.calculatePurchaseReturn(amount);\r\n            AMM.buy{value: amount}(tokenAmount);\r\n        }\r\n\r\n        amounts = uniswapRouter.swapExactTokensForTokens(\r\n            tokenAmount, 1, path, recipient, block.timestamp\r\n        );\r\n\r\n    \tIStakeAndYield(recipient).notifyRewardAmount(\r\n    \t\tamounts[amounts.length-1], \r\n    \t\t2 // yield\r\n    \t);\r\n\t}\r\n\r\n    function setMinBuyFromAMM(uint256 _val) public onlyOwner{\r\n        minBuyFromAMM = _val;\r\n    }\r\n\r\n\tfunction emergencyWithdrawETH(uint256 amount, address addr) public onlyOwner{\r\n\t\trequire(addr != address(0));\r\n\t\tpayable(addr).transfer(amount);\r\n\t}\r\n\r\n\tfunction emergencyWithdrawERC20Tokens(address _tokenAddr, address _to, uint _amount) public onlyOwner {\r\n        StandardToken(_tokenAddr).transfer(_to, _amount);\r\n    }\r\n\r\n    function getStrategy(address vault) public view returns(address){\r\n        return vaults[vault];\r\n    }\r\n\r\n    function strategyBalance(address stra) public view returns(uint256){\r\n        return strategyBalances[stra];\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AMM\",\"outputs\":[{\"internalType\":\"contract IAutomaticMarketMaker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEUS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exitToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"yearnDepositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"yearnVault\",\"type\":\"address\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"buyForStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"delStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"yearnVault\",\"type\":\"address\"}],\"name\":\"depositTokenForStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositWETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"emergencyWithdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exitTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"getStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBuyFromAMM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"multipliers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendExitToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"setMinBuyFromAMM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"setMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stra\",\"type\":\"address\"}],\"name\":\"strategyBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategyBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sharesToWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"yearnVault\",\"type\":\"address\"}],\"name\":\"withdrawForStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yweth\",\"outputs\":[{\"internalType\":\"contract IYearnVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Controller","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1d3050d596891c9d8f139791fe2ea9db19fe52ec2e1d9fa84fd52d1efe3a8dad"}]}