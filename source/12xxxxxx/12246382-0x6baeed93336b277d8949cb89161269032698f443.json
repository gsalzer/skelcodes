{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/NFT/BatchMintNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IRockstar {\\n  /**\\n   * @dev mints a unique NFT\\n   */\\n  function safeMint(address recipient, string memory metadata) external returns (bool);\\n\\n  /**\\n   * @dev renounces ownership\\n   */\\n  function renounceOwnership() external;\\n}\\n\\n/**\\n * @title Rockstar\\n * @dev Script to deploy batch transactions of NFTs\\n */\\ncontract BatchMintNFT {\\n\\n  constructor() public {}\\n\\n  /**\\n   * @notice Mass produces NFTs in a batched transaction\\n   * @param token the address of the NFT token that needs to be mintedd\\n   * @param recipients the array of address of recipients who will receive these tokens\\n   * @param metadatas the array of metadata associated with each NFT\\n   * @param startpos the start position in NFT order\\n   * @param num the number of tokens to be minted\\n   */\\n  function produceNFTs(address token, address[] memory recipients, string[] memory metadatas, uint8 startpos, uint8 num) public {\\n    require(recipients.length == 100, \\\"BatchDeploy::batchDeployNFTs: Needs exact 100 recipients\\\");\\n    require(recipients.length == metadatas.length, \\\"BatchDeploy::batchDeployNFTs: recipients and metaddata count mismatch\\\");\\n\\n    IRockstar rockstar = IRockstar(token);\\n\\n    for (uint i=startpos; i<num; i++) {\\n      // Deploy NFTs\\n      rockstar.safeMint(recipients[i], metadatas[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice revokes ownership from the NFT Smart Contract\\n   * @param token The address of the token from which ownership needs to be revoked\\n   */\\n  function revokeOwnership(address token) external {\\n    IRockstar rockstar = IRockstar(token);\\n    rockstar.renounceOwnership();\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"metadatas\",\"type\":\"string[]\"},{\"internalType\":\"uint8\",\"name\":\"startpos\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"num\",\"type\":\"uint8\"}],\"name\":\"produceNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"revokeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BatchMintNFT","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}