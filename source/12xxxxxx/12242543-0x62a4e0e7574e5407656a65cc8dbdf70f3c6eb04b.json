{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\ninterface ManagementList {\r\n    function isManager(address accountAddress) external returns (bool);\r\n}\r\n\r\ncontract Manageable {\r\n    ManagementList public managementList;\r\n\r\n    constructor(address _managementListAddress) {\r\n        managementList = ManagementList(_managementListAddress);\r\n    }\r\n\r\n    modifier onlyManagers() {\r\n        bool isManager = managementList.isManager(msg.sender);\r\n        require(isManager, \"ManagementList: caller is not a manager\");\r\n        _;\r\n    }\r\n}\r\n\r\ncontract EarnRegistry is Manageable {\r\n    mapping(uint256 => address) private _assets;\r\n    uint256 public numAssets;\r\n    mapping(address => uint256) private isRegistered;\r\n    address public managementListAddress;\r\n\r\n    constructor(\r\n        address _managementListAddress,\r\n        address[] memory _initialAddresses\r\n    ) Manageable(_managementListAddress) {\r\n        managementListAddress = _managementListAddress;\r\n        require(\r\n            _managementListAddress != address(0),\r\n            \"Missing management list address\"\r\n        );\r\n        if (_initialAddresses.length > 0) {\r\n            addAssets(_initialAddresses);\r\n        }\r\n    }\r\n\r\n    function addAsset(address assetAddress) public onlyManagers {\r\n        if (isRegistered[assetAddress] == 0) {\r\n            numAssets += 1;\r\n            _assets[numAssets] = assetAddress;\r\n            isRegistered[assetAddress] = numAssets;\r\n        }\r\n    }\r\n\r\n    function addAssets(address[] memory assetAddresses) public onlyManagers {\r\n        for (uint256 i = 0; i < assetAddresses.length; i++) {\r\n            address assetAddress = assetAddresses[i];\r\n            addAsset(assetAddress);\r\n        }\r\n    }\r\n\r\n    function removeAsset(address assetAddress) external onlyManagers {\r\n        if (isRegistered[assetAddress] != 0) {\r\n            uint256 registryIndex = isRegistered[assetAddress];\r\n            delete _assets[registryIndex];\r\n            delete isRegistered[assetAddress];\r\n            numAssets -= 1;\r\n        }\r\n    }\r\n\r\n    function assets() external view returns (address[] memory) {\r\n        address[] memory assetList = new address[](numAssets);\r\n        for (uint256 i = 0; i < numAssets; i++) {\r\n            address assetAddress = _assets[i + 1];\r\n            assetList[i] = assetAddress;\r\n        }\r\n        return assetList;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_managementListAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_initialAddresses\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"addAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assetAddresses\",\"type\":\"address[]\"}],\"name\":\"addAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementList\",\"outputs\":[{\"internalType\":\"contract ManagementList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementListAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"removeAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EarnRegistry","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f64e58ee8c7badc741a7ea98fb654880843856740000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000016de59092dae5ccf4a1e6439d611fd0653f0bd01000000000000000000000000d6ad7a6750a7593e092a9b218d66c0a814a3436e00000000000000000000000083f798e925bcd4017eb265844fddabb448f1707d000000000000000000000000f61718057901f84c4eec4339ef8f0d86d2b4560000000000000000000000000073a052500105205d34daf004eab301916da8190f00000000000000000000000004aa51bbcb46541455ccf1b8bef2ebc5d3787ec9000000000000000000000000c2cb1040220768554cf699b0d863a3cd4324ce3200000000000000000000000026ea744e5b887e5205727f55dfbe8685e3b21951000000000000000000000000e6354ed5bc4b393a5aad09f21c46e101e692d44700000000000000000000000004bc0ab673d88ae9dbc9da2380cb6b79c4bca9ae","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b47cb5fbf09787c6d87e8c7220080f18f81e176b7c52e5847581da29d3aeaf53"}]}