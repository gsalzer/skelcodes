{"status":"1","message":"OK","result":[{"SourceCode":"{\"IERC20.sol\":{\"content\":\"/**\\r\\n* SPDX-License-Identifier: MIT\\r\\n*\\r\\n* Copyright (c) 2016-2019 zOS Global Limited\\r\\n*\\r\\n*/\\r\\npragma solidity \\u003e=0.8;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\r\\n * the optional functions; to access them see `ERC20Detailed`.\\r\\n */\\r\\n\\r\\ninterface IERC20 {\\r\\n\\r\\n    // Optional functions\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a `Transfer` event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when `approve` or `transferFrom` are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * \\u003e Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an `Approval` event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a `Transfer` event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to `approve`. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"IERC677Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity \\u003e=0.8;\\r\\n\\r\\ninterface IERC677Receiver {\\r\\n    \\r\\n    function onTokenTransfer(address from, uint256 amount, bytes calldata data) external returns (bool);\\r\\n\\r\\n}\"},\"ITokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copied from https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/UniswapV2Router02.sol\\r\\npragma solidity \\u003e=0.8;\\r\\n\\r\\ninterface ITokenReceiver {\\r\\n\\r\\n    function onTokenTransfer(address token, address from, uint256 amount, bytes calldata data) external;\\r\\n\\r\\n}\"},\"IUniswapV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copied from https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/UniswapV2Router02.sol\\r\\npragma solidity \\u003e=0.8;\\r\\n\\r\\ninterface IUniswapV2 {\\r\\n\\r\\n        function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n                external payable returns (uint[] memory amounts);\\r\\n\\r\\n        function getAmountsIn(uint amountOut, address[] memory path)\\r\\n                external view returns (uint[] memory amounts);\\r\\n\\r\\n        function getAmountsOut(uint amountIn, address[] memory path)\\r\\n                external view returns (uint[] memory amounts);\\r\\n        \\r\\n        function WETH() external pure returns (address);\\r\\n}\"},\"Market.sol\":{\"content\":\"/**\\r\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\r\\n*\\r\\n* MIT License with Automated License Fee Payments\\r\\n*\\r\\n* Copyright (c) 2020 Aktionariat AG (aktionariat.com)\\r\\n*\\r\\n* Permission is hereby granted to any person obtaining a copy of this software\\r\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\r\\n* without restriction, including without limitation the rights to use, copy,\\r\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\r\\n* Software, and to permit persons to whom the Software is furnished to do so,\\r\\n* subject to the following conditions:\\r\\n*\\r\\n* - The above copyright notice and this permission notice shall be included in\\r\\n*   all copies or substantial portions of the Software.\\r\\n* - All automated license fee payments integrated into this and related Software\\r\\n*   are preserved.\\r\\n*\\r\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n* SOFTWARE.\\r\\n*/\\r\\npragma solidity \\u003e=0.8;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IUniswapV2.sol\\\";\\r\\nimport \\\"./ITokenReceiver.sol\\\";\\r\\nimport \\\"./IERC677Receiver.sol\\\";\\r\\n\\r\\ncontract Market is Ownable {\\r\\n\\r\\n    address public paymenthub;\\r\\n\\r\\n    address public immutable base;  // ERC-20 currency\\r\\n    address public immutable token; // ERC-20 share token\\r\\n\\r\\n    address public constant copyright = 0x29Fe8914e76da5cE2d90De98a64d0055f199d06D; // Aktionariat AG\\r\\n\\r\\n    uint256 private price; // current offer price, without drift\\r\\n    uint256 public increment; // increment\\r\\n\\r\\n    uint256 public driftStart;\\r\\n    uint256 public timeToDrift; // seconds until drift pushes price by one drift increment\\r\\n    int256 public driftIncrement;\\r\\n\\r\\n    uint8 private constant licenseFeeBps = 90;\\r\\n\\r\\n    uint8 private constant BUYING_ENABLED = 0x1;\\r\\n    uint8 private constant SELLING_ENABLED = 0x2;\\r\\n\\r\\n    // more bits to be used by payment hub\\r\\n    uint256 public settings = BUYING_ENABLED | SELLING_ENABLED;\\r\\n\\r\\n    event Trade(address indexed token, address who, bytes ref, int amount, address base, uint totPrice, uint fee, uint newprice);\\r\\n\\r\\n    constructor(address shareToken, uint256 price_, uint256 increment_, address baseCurrency, address owner) {\\r\\n        base = baseCurrency;\\r\\n        token = shareToken;\\r\\n        price = price_;\\r\\n        increment = increment_;\\r\\n        paymenthub = address(0x0); // TODO: set default once address known\\r\\n        transferOwnership(owner);\\r\\n    }\\r\\n\\r\\n    function setPrice(uint256 newPrice, uint256 newIncrement) public onlyOwner {\\r\\n        anchorPrice(newPrice);\\r\\n        increment = newIncrement;\\r\\n    }\\r\\n\\r\\n    function hasDrift() public view returns (bool) {\\r\\n        return timeToDrift != 0;\\r\\n    }\\r\\n\\r\\n    // secondsPerStep should be negative for downwards drift\\r\\n    function setDrift(uint256 secondsPerStep, int256 newDriftIncrement) public onlyOwner {\\r\\n        anchorPrice(getPrice());\\r\\n        timeToDrift = secondsPerStep;\\r\\n        driftIncrement = newDriftIncrement;\\r\\n    }\\r\\n\\r\\n    function anchorPrice(uint256 currentPrice) private {\\r\\n        price = currentPrice;\\r\\n        driftStart = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function getPrice() public view returns (uint256) {\\r\\n        return getPriceAtTime(block.timestamp);\\r\\n    }\\r\\n\\r\\n    function getPriceAtTime(uint256 timestamp) public view returns (uint256) {\\r\\n        if (hasDrift()){\\r\\n            uint256 passed = timestamp - driftStart;\\r\\n            int256 drifted = int256(passed / timeToDrift) * driftIncrement;\\r\\n            int256 driftedPrice = int256(price) + drifted;\\r\\n            if (driftedPrice \\u003c 0){\\r\\n                return 0;\\r\\n            } else {\\r\\n                return uint256(driftedPrice);\\r\\n            }\\r\\n        } else {\\r\\n            return price;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function buy(address from, uint256 paid, bytes calldata ref) internal returns (uint256) {\\r\\n        uint shares = getShares(paid);\\r\\n        uint costs = notifyTraded(from, shares, ref);\\r\\n        if (costs \\u003c paid){\\r\\n            IERC20(base).transfer(from, paid - costs);\\r\\n        }\\r\\n        IERC20(token).transfer(from, shares);\\r\\n        return shares;\\r\\n    }\\r\\n\\r\\n    function notifyTraded(address from, uint256 shares, bytes calldata ref) internal returns (uint256) {\\r\\n        require(hasSetting(BUYING_ENABLED));\\r\\n        uint costs = getBuyPrice(shares);\\r\\n        price = price + (shares * increment);\\r\\n        emit Trade(token, from, ref, int256(shares), base, costs, 0, getPrice());\\r\\n        return costs;\\r\\n    }\\r\\n\\r\\n    function notifyTrade(address buyer, uint256 shares, bytes calldata ref) public onlyOwner {\\r\\n        notifyTraded(buyer, shares, ref);\\r\\n    }\\r\\n\\r\\n    function notifyTradeAndTransfer(address buyer, uint256 shares, bytes calldata ref) public onlyOwner {\\r\\n        notifyTraded(buyer, shares, ref);\\r\\n        IERC20(token).transfer(buyer, shares);\\r\\n    }\\r\\n\\r\\n    function notifyTrades(address[] calldata buyers, uint256[] calldata shares, bytes[] calldata ref) public onlyOwner {\\r\\n        for (uint i = 0; i \\u003c buyers.length; i++) {\\r\\n            notifyTraded(buyers[i], shares[i], ref[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function notifyTradesAndTransfer(address[] calldata buyers, uint256[] calldata shares, bytes[] calldata ref) public onlyOwner {\\r\\n        for (uint i = 0; i \\u003c buyers.length; i++) {\\r\\n            notifyTradeAndTransfer(buyers[i], shares[i], ref[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Payment hub might actually have sent another accepted token, including Ether.\\r\\n     */\\r\\n    function processIncoming(address token_, address from, uint256 amount, bytes calldata ref) public payable returns (uint256) {\\r\\n        require(msg.sender == token_ || msg.sender == base || msg.sender == paymenthub);\\r\\n        if (token_ == token){\\r\\n            return sell(from, amount, ref);\\r\\n        } else if (token_ == base){\\r\\n            return buy(from, amount, ref);\\r\\n        } else {\\r\\n            require(false);\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ERC-677 recipient\\r\\n    function onTokenTransfer(address from, uint256 amount, bytes calldata ref) public returns (bool) {\\r\\n        processIncoming(msg.sender, from, amount, ref);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // ITokenReceiver\\r\\n    function onTokenTransfer(address token_, address from, uint256 amount, bytes calldata ref) public {\\r\\n        processIncoming(token_, from, amount, ref);\\r\\n    }\\r\\n\\r\\n    function buyingEnabled() public view returns (bool){\\r\\n        return hasSetting(BUYING_ENABLED);\\r\\n    }\\r\\n\\r\\n    function sellingEnabled() public view returns (bool){\\r\\n        return hasSetting(SELLING_ENABLED);\\r\\n    }\\r\\n\\r\\n    function hasSetting(uint256 setting) private view returns (bool) {\\r\\n        return settings \\u0026 setting == setting;\\r\\n    }\\r\\n\\r\\n    function sell(address recipient, uint256 amount, bytes calldata ref) internal returns (uint256) {\\r\\n        require(hasSetting(SELLING_ENABLED));\\r\\n        uint256 totPrice = getSellPrice(amount);\\r\\n        IERC20 baseToken = IERC20(base);\\r\\n        uint256 fee = getLicenseFee(totPrice);\\r\\n        if (fee \\u003e 0){\\r\\n            baseToken.transfer(copyright, fee);\\r\\n        }\\r\\n        baseToken.transfer(recipient, totPrice - fee);\\r\\n        price -= amount * increment;\\r\\n        emit Trade(token, recipient, ref, -int256(amount), base, totPrice, fee, getPrice());\\r\\n        return totPrice;\\r\\n    }\\r\\n\\r\\n    function getLicenseFee(uint256 totPrice) public pure returns (uint256) {\\r\\n        return totPrice * licenseFeeBps / 10000;\\r\\n    }\\r\\n\\r\\n    function getSellPrice(uint256 shares) public view returns (uint256) {\\r\\n        return getPrice(getPrice() - (shares * increment), shares);\\r\\n    }\\r\\n\\r\\n    function getBuyPrice(uint256 shares) public view returns (uint256) {\\r\\n        return getPrice(getPrice(), shares);\\r\\n    }\\r\\n\\r\\n    function getPrice(uint256 lowest, uint256 shares) internal view returns (uint256){\\r\\n        if (shares == 0) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            uint256 highest = lowest + (shares - 1) * increment;\\r\\n            return ((lowest + highest) / 2) * shares;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getShares(uint256 money) public view returns (uint256) {\\r\\n        uint256 currentPrice = getPrice();\\r\\n        uint256 min = 0;\\r\\n        uint256 max = money / currentPrice;\\r\\n        while (min \\u003c max){\\r\\n            uint256 middle = (min + max)/2;\\r\\n            uint256 totalPrice = getPrice(currentPrice, middle);\\r\\n            if (money \\u003e totalPrice){\\r\\n                min = middle + 1;\\r\\n            } else {\\r\\n                max = middle;\\r\\n            }\\r\\n        }\\r\\n        return min;\\r\\n    }\\r\\n\\r\\n    function withdrawEther(uint256 amount) public ownerOrHub() {\\r\\n        payable(msg.sender).transfer(amount); // return change\\r\\n    }\\r\\n\\r\\n    function approve(address erc20, address who, uint256 amount) public onlyOwner() {\\r\\n        IERC20(erc20).approve(who, amount);\\r\\n    }\\r\\n\\r\\n    function withdraw(address ercAddress, address to, uint256 amount) public ownerOrHub() {\\r\\n        IERC20(ercAddress).transfer(to, amount);\\r\\n    }\\r\\n\\r\\n    function setPaymentHub(address hub) public onlyOwner() {\\r\\n        paymenthub = hub;\\r\\n    }\\r\\n\\r\\n    function setSettings(uint256 settings_) public onlyOwner() {\\r\\n        settings = settings_;\\r\\n    }\\r\\n\\r\\n    function setEnabled(bool newBuyingEnabled, bool newSellingEnabled) public onlyOwner() {\\r\\n        if (newBuyingEnabled != hasSetting(BUYING_ENABLED)){\\r\\n            settings ^= BUYING_ENABLED;\\r\\n        }\\r\\n        if (newSellingEnabled != hasSetting(SELLING_ENABLED)){\\r\\n            settings ^= SELLING_ENABLED;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    modifier ownerOrHub() {\\r\\n        require(owner == msg.sender || paymenthub == msg.sender, \\\"not owner\\\");\\r\\n        _;\\r\\n    }\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n//\\r\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\r\\n//\\r\\n// Modifications:\\r\\n// - Replaced Context._msgSender() with msg.sender\\r\\n// - Made leaner\\r\\n\\r\\npragma solidity \\u003e=0.8;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract Ownable {\\r\\n\\r\\n    address public owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () {\\r\\n        owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner == msg.sender, \\\"not owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        emit OwnershipTransferred(owner, newOwner);\\r\\n        owner = newOwner;\\r\\n    }\\r\\n}\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"increment_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"baseCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"ref\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newprice\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"base\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"copyright\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"driftIncrement\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"driftStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"getBuyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totPrice\",\"type\":\"uint256\"}],\"name\":\"getLicenseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getPriceAtTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"getSellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"money\",\"type\":\"uint256\"}],\"name\":\"getShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasDrift\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ref\",\"type\":\"bytes\"}],\"name\":\"notifyTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ref\",\"type\":\"bytes\"}],\"name\":\"notifyTradeAndTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"buyers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"ref\",\"type\":\"bytes[]\"}],\"name\":\"notifyTrades\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"buyers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"ref\",\"type\":\"bytes[]\"}],\"name\":\"notifyTradesAndTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ref\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ref\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymenthub\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ref\",\"type\":\"bytes\"}],\"name\":\"processIncoming\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"secondsPerStep\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"newDriftIncrement\",\"type\":\"int256\"}],\"name\":\"setDrift\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newBuyingEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"newSellingEnabled\",\"type\":\"bool\"}],\"name\":\"setEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hub\",\"type\":\"address\"}],\"name\":\"setPaymentHub\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newIncrement\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"settings_\",\"type\":\"uint256\"}],\"name\":\"setSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeToDrift\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ercAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Market","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004ebb0f72679834371f42d19ec7cbd89d3822ccd200000000000000000000000000000000000000000000152d02c7e14af68000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4272071ecadd69d933adcd19ca99fe80664fc08000000000000000000000000292a9bbf7860adc3982c2030bdecf085126e8ca9","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9fb9e248aebe28bb295e596d2c7caf4a470189688e9428710a4e6aaa0349aa18"}]}