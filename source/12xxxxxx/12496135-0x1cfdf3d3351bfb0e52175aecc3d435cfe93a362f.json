{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/mnt/c/Users/ds/Documents/stkr/stkr-smart-contract/legacy/contracts/Governable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract Governable is Initializable {\\r\\n    address public governor;\\r\\n\\r\\n    event GovernorshipTransferred(address indexed previousGovernor, address indexed newGovernor);\\r\\n\\r\\n    /**\\r\\n     * @dev Contract initializer.\\r\\n     * called once by the factory at time of deployment\\r\\n     */\\r\\n    function initialize(address governor_) virtual public initializer {\\r\\n        governor = governor_;\\r\\n        emit GovernorshipTransferred(address(0), governor);\\r\\n    }\\r\\n\\r\\n    modifier governance() {\\r\\n        require(msg.sender == governor);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the current governor to relinquish control of the contract.\\r\\n     * @notice Renouncing to governorship will leave the contract without an governor.\\r\\n     * It will not be possible to call the functions with the `governance.js`\\r\\n     * modifier anymore.\\r\\n     */\\r\\n    function renounceGovernorship() public governance {\\r\\n        emit GovernorshipTransferred(governor, address(0));\\r\\n        governor = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the current governor to transfer control of the contract to a newGovernor.\\r\\n     * @param newGovernor The address to transfer governorship to.\\r\\n     */\\r\\n    function transferGovernorship(address newGovernor) public governance {\\r\\n        _transferGovernorship(newGovernor);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers control of the contract to a newGovernor.\\r\\n     * @param newGovernor The address to transfer governorship to.\\r\\n     */\\r\\n    function _transferGovernorship(address newGovernor) internal {\\r\\n        require(newGovernor != address(0));\\r\\n        emit GovernorshipTransferred(governor, newGovernor);\\r\\n        governor = newGovernor;\\r\\n    }\\r\\n\\r\\n    uint256[50] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/mnt/c/Users/ds/Documents/stkr/stkr-smart-contract/legacy/contracts/SystemParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.6.11;\\r\\n\\r\\nimport \\\"./Governable.sol\\\";\\r\\n\\r\\ncontract SystemParameters is Governable {\\r\\n\\r\\n    // Minimum ankr staking amount to be abel to initialize a pool\\r\\n    uint256 public PROVIDER_MINIMUM_STAKING;\\r\\n\\r\\n    // Minimum staking amount for pool participants\\r\\n    uint256 public REQUESTER_MINIMUM_POOL_STAKING; // 0.1 ETH\\r\\n\\r\\n    // Ethereum staking amount\\r\\n    uint256 public ETHEREUM_STAKING_AMOUNT;\\r\\n\\r\\n    uint256 public EXIT_BLOCKS;\\r\\n\\r\\n    function initialize() external initializer {\\r\\n        PROVIDER_MINIMUM_STAKING = 100000 ether;\\r\\n        REQUESTER_MINIMUM_POOL_STAKING = 500 finney;\\r\\n        ETHEREUM_STAKING_AMOUNT = 4 ether;\\r\\n        EXIT_BLOCKS = 24;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/mnt/c/Users/ds/Documents/stkr/stkr-smart-contract/legacy/contracts/lib/Lockable.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.11;\\r\\n\\r\\nabstract contract Lockable {\\r\\n    mapping(address => bool) private _locks;\\r\\n\\r\\n    modifier unlocked(address addr) {\\r\\n        require(!_locks[addr], \\\"Reentrancy protection\\\");\\r\\n        _locks[addr] = true;\\r\\n        _;\\r\\n        _locks[addr] = false;\\r\\n    }\\r\\n\\r\\n    uint256[50] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/mnt/c/Users/ds/Documents/stkr/stkr-smart-contract/legacy/contracts/lib/Pausable.sol\": {\r\n      \"content\": \"pragma solidity 0.6.11;\\r\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract Pausable is  OwnableUpgradeSafe {\\r\\n    mapping (bytes32 => bool) internal _paused;\\r\\n\\r\\n    modifier whenNotPaused(bytes32 action) {\\r\\n        require(!_paused[action], \\\"This action currently paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function togglePause(bytes32 action) public onlyOwner {\\r\\n        _paused[action] = !_paused[action];\\r\\n    }\\r\\n\\r\\n    function isPaused(bytes32 action) public view returns(bool) {\\r\\n        return _paused[action];\\r\\n    }\\r\\n\\r\\n    uint256[50] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/mnt/c/Users/ds/Documents/stkr/stkr-smart-contract/legacy/contracts/lib/interfaces/IAETH.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IAETH is IERC20 {\\r\\n\\r\\n    function burn(uint256 amount) external;\\r\\n\\r\\n    function updateMicroPoolContract(address microPoolContract) external;\\r\\n\\r\\n    function ratio() external view returns (uint256);\\r\\n\\r\\n    function mintFrozen(address account, uint256 amount) external;\\r\\n\\r\\n    function mint(address account, uint256 amount) external returns (uint256);\\r\\n\\r\\n    function mintApprovedTo(address account, address spender, uint256 amount) external;\\r\\n\\r\\n    function mintPool() payable external;\\r\\n\\r\\n    function fundPool(uint256 poolIndex, uint256 amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/mnt/c/Users/ds/Documents/stkr/stkr-smart-contract/legacy/contracts/lib/interfaces/IConfig.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.11;\\r\\n\\r\\ninterface IConfig {\\r\\n    function getConfig(bytes32 config) external view returns (uint256);\\r\\n\\r\\n    function setConfig(bytes32 config, uint256 value) external;\\r\\n}\"\r\n    },\r\n    \"/mnt/c/Users/ds/Documents/stkr/stkr-smart-contract/legacy/contracts/lib/interfaces/IDepositContract.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.11;\\r\\n\\r\\ninterface IDepositContract {\\r\\n    /// @notice A processed deposit event.\\r\\n    event DepositEvent(\\r\\n        bytes pubkey,\\r\\n        bytes withdrawal_credentials,\\r\\n        bytes amount,\\r\\n        bytes signature,\\r\\n        bytes index\\r\\n    );\\r\\n\\r\\n    /// @notice Submit a Phase 0 DepositData object.\\r\\n    /// @param pubkey A BLS12-381 public key.\\r\\n    /// @param withdrawal_credentials Commitment to a public key for withdrawals.\\r\\n    /// @param signature A BLS12-381 signature.\\r\\n    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\\r\\n    /// Used as a protection against malformed input.\\r\\n    function deposit(\\r\\n        bytes calldata pubkey,\\r\\n        bytes calldata withdrawal_credentials,\\r\\n        bytes calldata signature,\\r\\n        bytes32 deposit_data_root\\r\\n    ) external payable;\\r\\n\\r\\n    /// @notice Query the current deposit root hash.\\r\\n    /// @return The deposit root hash.\\r\\n    function get_deposit_root() external view returns (bytes32);\\r\\n\\r\\n    /// @notice Query the current deposit count.\\r\\n    /// @return The deposit count encoded as a little endian 64-bit number.\\r\\n    function get_deposit_count() external view returns (bytes memory);\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"/mnt/c/Users/ds/Documents/stkr/stkr-smart-contract/legacy/contracts/lib/interfaces/IFETH.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IFETH is IERC20 {\\r\\n\\r\\n    function mint(address account, uint256 shares, uint256 sent) external;\\r\\n\\r\\n    function updateReward(uint256 newReward) external returns (uint256);\\r\\n\\r\\n    function lockShares(address account, uint256 shares) external;\\r\\n\\r\\n    function unlockShares(uint256 shares) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/mnt/c/Users/ds/Documents/stkr/stkr-smart-contract/legacy/contracts/lib/interfaces/IStaking.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.11;\\r\\n\\r\\ninterface IStaking {\\r\\n    function compensateLoss(address provider, uint256 ethAmount) external returns (bool, uint256, uint256);\\r\\n\\r\\n    function freeze(address user, uint256 amount) external returns (bool);\\r\\n\\r\\n    function unfreeze(address user, uint256 amount) external returns (bool);\\r\\n\\r\\n    function frozenStakesOf(address staker) external view returns (uint256);\\r\\n\\r\\n    function stakesOf(address staker) external view returns (uint256);\\r\\n\\r\\n    function frozenDepositsOf(address staker) external view returns (uint256);\\r\\n\\r\\n    function depositsOf(address staker) external view returns (uint256);\\r\\n\\r\\n    function deposit() external;\\r\\n\\r\\n    function deposit(address user) external;\\r\\n}\"\r\n    },\r\n    \"/mnt/c/Users/ds/Documents/stkr/stkr-smart-contract/legacy/contracts/upgrades/GlobalPool_R31.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.6.11;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../lib/interfaces/IDepositContract.sol\\\";\\r\\nimport \\\"../SystemParameters.sol\\\";\\r\\nimport \\\"../lib/Lockable.sol\\\";\\r\\nimport \\\"../lib/interfaces/IAETH.sol\\\";\\r\\nimport \\\"../lib/interfaces/IFETH.sol\\\";\\r\\nimport \\\"../lib/interfaces/IConfig.sol\\\";\\r\\nimport \\\"../lib/interfaces/IStaking.sol\\\";\\r\\nimport \\\"../lib/interfaces/IDepositContract.sol\\\";\\r\\nimport \\\"../lib/Pausable.sol\\\";\\r\\n\\r\\ncontract GlobalPool_R31 is Lockable, Pausable {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n    using Math for uint256;\\r\\n\\r\\n    /* staker events */\\r\\n    event StakePending(address indexed staker, uint256 amount);\\r\\n    event StakeConfirmed(address indexed staker, uint256 amount);\\r\\n    event StakeRemoved(address indexed staker, uint256 amount);\\r\\n\\r\\n    /* pool events */\\r\\n    event PoolOnGoing(bytes pool);\\r\\n    event PoolCompleted(bytes pool);\\r\\n\\r\\n    /* provider events */\\r\\n    event ProviderSlashedAnkr(address indexed provider, uint256 ankrAmount, uint256 etherEquivalence);\\r\\n    event ProviderSlashedEth(address indexed provider, uint256 amount);\\r\\n    event ProviderToppedUpEth(address indexed provider, uint256 amount);\\r\\n    event ProviderToppedUpAnkr(address indexed provider, uint256 amount);\\r\\n    event ProviderExited(address indexed provider);\\r\\n\\r\\n    /* rewards (AETH) */\\r\\n    event RewardClaimed(address indexed staker, uint256 amount, bool isAETH);\\r\\n\\r\\n    // deleted fields\\r\\n    mapping(address => uint256) private _pendingUserStakes; // deleted\\r\\n\\r\\n    mapping(address => uint256) private _userStakes;\\r\\n    mapping(address => uint256) private _rewards;\\r\\n    mapping(address => uint256) private _claims;\\r\\n    mapping(address => uint256) private _etherBalances;\\r\\n    mapping(address => uint256) private _slashings;\\r\\n    mapping(address => uint256) private _exits;\\r\\n\\r\\n    // deleted fields\\r\\n    address[] private _pendingStakers; // deleted\\r\\n    uint256 private _pendingAmount; // deleted\\r\\n    uint256 private _totalStakes; // deleted\\r\\n    uint256 private _totalRewards; // deleted\\r\\n\\r\\n    IAETH private _aethContract;\\r\\n    IStaking private _stakingContract;\\r\\n    SystemParameters private _systemParameters;\\r\\n    address private _depositContract;\\r\\n\\r\\n    // deleted fields\\r\\n    address[] private _pendingTemp; // deleted\\r\\n    uint256[50] private __gap; // deleted\\r\\n    uint256 private _lastPendingStakerPointer; // deleted\\r\\n\\r\\n    IConfig private _configContract;\\r\\n\\r\\n    // deleted fields\\r\\n    mapping(address => uint256) private _pendingEtherBalances; // deleted\\r\\n\\r\\n    address private _operator;\\r\\n\\r\\n    // deleted fields\\r\\n    mapping(address => uint256[2]) private _fETHRewards; // deleted\\r\\n\\r\\n    mapping(address => uint256) private _aETHRewards;\\r\\n    IFETH private _fethContract;\\r\\n\\r\\n    // deleted fields\\r\\n    uint256 private _fethMintBase; // deleted\\r\\n\\r\\n    modifier notExitRecently(address provider) {\\r\\n        require(block.number > _exits[provider].add(_configContract.getConfig(\\\"EXIT_BLOCKS\\\")), \\\"Recently exited\\\");\\r\\n        delete _exits[msg.sender];\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOperator() {\\r\\n        require(msg.sender == owner() || msg.sender == _operator, \\\"Operator: not allowed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function initialize(IAETH aethContract, SystemParameters parameters, address depositContract) public initializer {\\r\\n        __Ownable_init();\\r\\n\\r\\n        _depositContract = depositContract;\\r\\n        _aethContract = aethContract;\\r\\n        _systemParameters = parameters;\\r\\n\\r\\n        _paused[\\\"topUpETH\\\"] = true;\\r\\n        _paused[\\\"topUpANKR\\\"] = true;\\r\\n    }\\r\\n\\r\\n    function pushToBeacon(bytes calldata pubkey, bytes calldata withdrawal_credentials, bytes calldata signature, bytes32 deposit_data_root) public onlyOperator {\\r\\n        require(address(this).balance >= 32 ether, \\\"pending ethers not enough\\\");\\r\\n        IDepositContract(_depositContract).deposit{value : 32 ether}(pubkey, withdrawal_credentials, signature, deposit_data_root);\\r\\n        emit PoolOnGoing(pubkey);\\r\\n    }\\r\\n\\r\\n    function stake() public whenNotPaused(\\\"stake\\\") notExitRecently(msg.sender) unlocked(msg.sender) payable {\\r\\n        _stake(msg.sender, msg.value, true);\\r\\n    }\\r\\n\\r\\n    function customStake(address[] memory addresses, uint256[] memory amounts) public payable onlyOperator {\\r\\n        require(addresses.length == amounts.length, \\\"Addresses and amounts length must be equal\\\");\\r\\n        uint256 totalSent = 0;\\r\\n        for (uint256 i = 0; i < amounts.length; i++) {\\r\\n            totalSent += amounts[i];\\r\\n            _stake(addresses[i], amounts[i], false);\\r\\n        }\\r\\n        require(msg.value == totalSent, \\\"Total value must be same with sent\\\");\\r\\n    }\\r\\n\\r\\n    function _stake(address staker, uint256 value, bool payRewards) private {\\r\\n        uint256 minimumStaking = _configContract.getConfig(\\\"REQUESTER_MINIMUM_POOL_STAKING\\\");\\r\\n        require(value >= minimumStaking, \\\"Value must be greater than zero\\\");\\r\\n        require(value % minimumStaking == 0, \\\"Value must be multiple of minimum staking amount\\\");\\r\\n        _userStakes[staker] = _userStakes[staker].add(value);\\r\\n        uint256 _ratio = _aethContract.ratio();\\r\\n        if (payRewards) {\\r\\n            uint256 shares = value.mul(_ratio).div(1e18);\\r\\n            _aethContract.mint(address(this), shares);\\r\\n            _aETHRewards[staker] = _aETHRewards[staker].add(shares);\\r\\n        }\\r\\n        emit StakePending(staker, value);\\r\\n        emit StakeConfirmed(staker, value);\\r\\n    }\\r\\n\\r\\n    function topUpETH() public whenNotPaused(\\\"topUpETH\\\") notExitRecently(msg.sender) payable {\\r\\n        require(_configContract.getConfig(\\\"PROVIDER_MINIMUM_ETH_STAKING\\\") <= msg.value, \\\"Value must be greater than minimum amount\\\");\\r\\n        _etherBalances[msg.sender] = _etherBalances[msg.sender].add(msg.value);\\r\\n        _stake(msg.sender, msg.value, true);\\r\\n        emit ProviderToppedUpEth(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    function topUpANKR(uint256 amount) public whenNotPaused(\\\"topUpANKR\\\") notExitRecently(msg.sender) {\\r\\n        require(_configContract.getConfig(\\\"PROVIDER_MINIMUM_ANKR_STAKING\\\") <= amount, \\\"Value must be greater than minimum amount\\\");\\r\\n        require(_stakingContract.freeze(msg.sender, amount), \\\"Not enough allowance or balance\\\");\\r\\n        emit ProviderToppedUpAnkr(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function providerExit() public {\\r\\n        int256 available = availableEtherBalanceOf(msg.sender);\\r\\n        address staker = msg.sender;\\r\\n        require(available > 0, \\\"Provider balance should be positive for exit\\\");\\r\\n        _exits[staker] = block.number;\\r\\n        _etherBalances[staker] = 0;\\r\\n        _slashings[staker] = 0;\\r\\n        uint256 value = uint256(available);\\r\\n        uint256 _ratio = _aethContract.ratio();\\r\\n        _aETHRewards[staker] = _aETHRewards[staker].add(value.mul(_ratio).div(1e18));\\r\\n        emit ProviderExited(msg.sender);\\r\\n    }\\r\\n\\r\\n    function claimableAETHRewardOf(address staker) public view returns (uint256) {\\r\\n        uint256 blocked = _etherBalances[staker];\\r\\n        uint256 reward = _rewards[staker].sub(_claims[staker]);\\r\\n        reward = blocked >= reward ? 0 : reward.sub(blocked);\\r\\n        return _aETHRewards[staker].add(reward);\\r\\n    }\\r\\n\\r\\n    function claimableFETHRewardOf(address staker) public view returns (uint256) {\\r\\n        return claimableAETHRewardOf(staker).mul(1e18).div(_aethContract.ratio());\\r\\n    }\\r\\n\\r\\n    function claimableAETHFRewardOf(address staker) public view returns (uint256) {\\r\\n        return claimableFETHRewardOf(staker);\\r\\n    }\\r\\n\\r\\n    function claimAETH() whenNotPaused(\\\"claim\\\") public {\\r\\n        address staker = msg.sender;\\r\\n        uint256 claimableShares = claimableAETHRewardOf(staker);\\r\\n        require(claimableShares > 0, \\\"claimable reward zero\\\");\\r\\n        _aETHRewards[staker] = 0;\\r\\n        uint256 oldReward = _rewards[staker].sub(_claims[staker]);\\r\\n        if (oldReward > 0) {\\r\\n            _claims[staker] = _claims[staker].add(oldReward);\\r\\n        }\\r\\n        _aethContract.mint(staker, claimableShares);\\r\\n        emit RewardClaimed(staker, claimableShares, true);\\r\\n    }\\r\\n\\r\\n    function claimFETH() whenNotPaused(\\\"claim\\\") public {\\r\\n        address staker = msg.sender;\\r\\n        uint256 claimableShares = claimableAETHRewardOf(staker);\\r\\n        require(claimableShares > 0, \\\"claimable reward zero\\\");\\r\\n        _aETHRewards[staker] = 0;\\r\\n        uint256 oldReward = _rewards[staker].sub(_claims[staker]);\\r\\n        if (oldReward > 0) {\\r\\n            _claims[staker] = _claims[staker].add(oldReward);\\r\\n        }\\r\\n        _aethContract.mintApprovedTo(staker, address(_fethContract), claimableShares);\\r\\n        _fethContract.lockShares(staker, claimableShares);\\r\\n        emit RewardClaimed(staker, claimableShares, false);\\r\\n    }\\r\\n\\r\\n    function availableEtherBalanceOf(address provider) public view returns (int256) {\\r\\n        return int256(etherBalanceOf(provider)) - int256(slashingsOf(provider));\\r\\n    }\\r\\n\\r\\n    function etherBalanceOf(address provider) public view returns (uint256) {\\r\\n        return _etherBalances[provider];\\r\\n    }\\r\\n\\r\\n    function slashingsOf(address provider) public view returns (uint256) {\\r\\n        return _slashings[provider];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Slash eth, returns remaining needs to be slashed\\r\\n    */\\r\\n    function slashETH(address provider, uint256 amount) public unlocked(provider) onlyOwner returns (uint256 remaining) {\\r\\n        require(amount > 0, \\\"Amount should be greater than zero\\\");\\r\\n        uint256 available = availableEtherBalanceOf(provider) > 0 ? uint256(availableEtherBalanceOf(provider)) : 0;\\r\\n        uint256 toBeSlashed = amount.min(available);\\r\\n        if (toBeSlashed == 0) return amount;\\r\\n        _slashings[provider] = _slashings[provider].add(toBeSlashed);\\r\\n        remaining = amount.sub(toBeSlashed);\\r\\n        emit ProviderSlashedEth(provider, toBeSlashed);\\r\\n    }\\r\\n\\r\\n    function updateAETHContract(address payable aEthContract) external onlyOwner {\\r\\n        _aethContract = IAETH(aEthContract);\\r\\n    }\\r\\n\\r\\n    function updateFETHContract(address payable fEthContract) external onlyOwner {\\r\\n        _fethContract = IFETH(fEthContract);\\r\\n    }\\r\\n\\r\\n    function updateConfigContract(address configContract) external onlyOwner {\\r\\n        _configContract = IConfig(configContract);\\r\\n    }\\r\\n\\r\\n    function updateStakingContract(address stakingContract) external onlyOwner {\\r\\n        _stakingContract = IStaking(stakingContract);\\r\\n    }\\r\\n\\r\\n    function changeOperator(address operator) public onlyOwner {\\r\\n        _operator = operator;\\r\\n    }\\r\\n\\r\\n    function depositContractAddress() public view returns (address) {\\r\\n        return _depositContract;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n\\n\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pool\",\"type\":\"bytes\"}],\"name\":\"PoolCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pool\",\"type\":\"bytes\"}],\"name\":\"PoolOnGoing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"ProviderExited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ankrAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"etherEquivalence\",\"type\":\"uint256\"}],\"name\":\"ProviderSlashedAnkr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProviderSlashedEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProviderToppedUpAnkr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProviderToppedUpEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAETH\",\"type\":\"bool\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakePending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"availableEtherBalanceOf\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"changeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"claimableAETHFRewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"claimableAETHRewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"claimableFETHRewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"customStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"etherBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAETH\",\"name\":\"aethContract\",\"type\":\"address\"},{\"internalType\":\"contract SystemParameters\",\"name\":\"parameters\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositContract\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"action\",\"type\":\"bytes32\"}],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"providerExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"withdrawal_credentials\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"deposit_data_root\",\"type\":\"bytes32\"}],\"name\":\"pushToBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"slashETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"slashingsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"action\",\"type\":\"bytes32\"}],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"topUpANKR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topUpETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"aEthContract\",\"type\":\"address\"}],\"name\":\"updateAETHContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"configContract\",\"type\":\"address\"}],\"name\":\"updateConfigContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"fEthContract\",\"type\":\"address\"}],\"name\":\"updateFETHContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingContract\",\"type\":\"address\"}],\"name\":\"updateStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GlobalPool_R31","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}