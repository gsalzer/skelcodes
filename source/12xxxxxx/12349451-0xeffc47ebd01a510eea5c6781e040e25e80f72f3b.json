{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-04-27\r\n*/\r\n\r\npragma solidity ^0.4.23;\r\npragma experimental ABIEncoderV2;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\n// SPDX-License-Identifier: Unlicensed\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n}\r\n\r\ncontract deracle is Ownable{\r\n\r\n    struct User{\r\n        int32 Id;\r\n        int8 ReferCount;\r\n        int8 Level;\r\n        int32 UplineId;\r\n        int32 LeftId;\r\n        int32 RightId;\r\n        int32 Position;\r\n        int32 ReferralId;\r\n        address OwnerAddress;\r\n        bool IsPayout;\r\n        bool IsEndGamePayout;\r\n        uint CreatedBlock;\r\n        uint CreatedTime;\r\n    }\r\n    \r\n    mapping(uint32 => User) userlistbypos;\r\n    mapping(uint32 => User) userlistbyid;\r\n    mapping(address => int32[]) public userids;\r\n    \r\n    int8 public currentLevel;\r\n    int public userCounter = 0;\r\n    int idcounter = 3;\r\n    uint32 public nextPosition = 1;\r\n    address public token;\r\n    address public owner;\r\n    address private keeper;\r\n    address public maintainer;\r\n    uint public ExpiryInvestmentTimestamp;\r\n    bool public IsExpired;\r\n    uint public PayoutAmount;\r\n    uint public MainterPayoutAmount;\r\n    int public UnpaidUserCount;\r\n    int public nextUnpaidUser = 3;\r\n    \r\n    IERC20 public ERC20Interface;\r\n\r\n    struct Transfer {\r\n        address contract_;\r\n        address to_;\r\n        uint256 amount_;\r\n        bool failed_;\r\n    }\r\n    \r\n    /**\r\n     * @dev Event to notify if transfer successful or failed * after account approval verified */\r\n    event TransferSuccessful(\r\n        address indexed from_,\r\n        address indexed to_,\r\n        uint256 amount_\r\n    );\r\n\r\n    event TransferFailed(\r\n        address indexed from_,\r\n        address indexed to_,\r\n        uint256 amount_\r\n    );\r\n    \r\n    /**\r\n     * @dev a list of all transfers successful or unsuccessful */\r\n    Transfer public transaction;\r\n    \r\n    // uint public investamt = 500000000;\r\n    // uint public referralamt = 250000000;\r\n    // uint public maintaineramt = 50000000;\r\n    \r\n    uint public investamt = 100000;\r\n    uint public referralamt = 50000;\r\n    uint public maintaineramt = 10000;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function Invest(int8 quantity, uint32 uplineId) public returns (bool){\r\n        require(quantity > 0, \"Minimum Investment Quantity Is 1\");\r\n        require(isUserExists(uplineId), \"Referral Id Does Not Exist\");\r\n        require(isContractAlive(), \"Contract terminated. Investment was helt for more than 365 days\");\r\n        for(int32 j =0; j < quantity; j++){\r\n            //Pay the platform\r\n            require(!IsExpired, \"Contract terminated. Investment was helt for more than 365 days\");\r\n            require(depositTokens(uplineId));\r\n            \r\n            \r\n            User memory user;\r\n            int32[] memory array = new int32[](1);\r\n            array[0] = 1;\r\n            if(nextPosition == 1){\r\n                \r\n                user.Id = 1;\r\n                user.ReferCount = 0;\r\n                user.Level = 0;\r\n                user.UplineId = -1;\r\n                user.LeftId = -1;\r\n                user.RightId = -1;\r\n                user.Position = 1;\r\n                user.ReferralId = -1;\r\n                user.OwnerAddress = msg.sender;\r\n                user.IsPayout = true;\r\n                user.IsEndGamePayout = true;\r\n                user.CreatedBlock = 0;\r\n                user.CreatedTime = 0;\r\n                \r\n                userlistbyid[1] = user;\r\n                userlistbypos[1] = user;\r\n                \r\n                nextPosition = 2;\r\n            }\r\n            userCounter += idcounter;\r\n            \r\n            //GET UPLINE\r\n            User memory upline = userlistbyid[uint32(uplineId)];\r\n            \r\n            \r\n            //CHECK WHICH SLOT UPLINE MADE\r\n            int32 connectedUplineId = 0;\r\n            int32 uplinereferred = upline.ReferCount;\r\n            if (uplinereferred < 2) //1st / 2nd leg\r\n            {\r\n                connectedUplineId = insertNext(uplineId);\r\n            }\r\n            else //3rd LEG , RESET , FIND THE SUITABLE NODE\r\n            {\r\n                connectedUplineId = insertThird(uplineId);\r\n            }\r\n                \r\n            int isrightleg = 0;\r\n            if (userlistbyid[uint32(connectedUplineId)].LeftId != -1) {\r\n                isrightleg = 1;\r\n                userlistbyid[uint32(connectedUplineId)].RightId = int32(userCounter);\r\n            }\r\n            else\r\n            {\r\n                userlistbyid[uint32(connectedUplineId)].LeftId = int32(userCounter);\r\n            }\r\n                \r\n            user.Id = int32(userCounter);\r\n            user.ReferCount = 0;\r\n            user.Level = userlistbyid[uint32(connectedUplineId)].Level + 1;\r\n            user.UplineId = int32(connectedUplineId);\r\n            user.LeftId = -1;\r\n            user.RightId = -1;\r\n            user.Position = int32((userlistbyid[uint32(connectedUplineId)].Position * 2) + isrightleg);\r\n            user.OwnerAddress = msg.sender;\r\n            user.ReferralId  = int32(uplineId);\r\n            user.IsPayout = false;\r\n            user.IsEndGamePayout = false;\r\n            user.CreatedBlock = block_call();\r\n            user.CreatedTime = time_call();\r\n    \r\n            if(user.Level > currentLevel){\r\n                currentLevel = user.Level;\r\n            }\r\n            userlistbyid[uint32(userCounter)] = user;\r\n            userlistbypos[uint32(user.Position)] = user;\r\n            userids[msg.sender].push(int32(user.Id));\r\n            ExpiryInvestmentTimestamp = time_call() + 365 days;\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function isUserExists(uint32 userid) view internal returns (bool) {\r\n        if(nextPosition == 1){\r\n            return true;\r\n        }\r\n        \r\n        if(userid == 1){\r\n            return false;\r\n        }\r\n        \r\n        return (userlistbyid[uint32(userid)].Id != 0);\r\n    }\r\n    \r\n    function isContractAlive() view internal returns (bool){\r\n        if(nextPosition == 1){\r\n            return true;\r\n        }\r\n        \r\n        if(time_call() < ExpiryInvestmentTimestamp){\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    function block_call() view internal returns (uint256 blocknumber){\r\n        return block.number; \r\n    }\r\n    \r\n    function time_call() view internal returns (uint256 timestamp){\r\n        return now;\r\n    }\r\n    \r\n    function insertNext(uint32 uplineId) internal returns (int32 connectedUplineId){\r\n        \r\n        while(true){\r\n            if(userlistbypos[uint32(nextPosition)].Id != 0){\r\n                nextPosition++;\r\n            }\r\n            else{\r\n                break;\r\n            }\r\n        }\r\n        \r\n        int32 previouslevelfirstuplineid = -1;\r\n        \r\n        if (nextPosition % 2 == 0)\r\n        {\r\n            previouslevelfirstuplineid = int32((nextPosition) / 2);\r\n        }\r\n        else\r\n        {\r\n            previouslevelfirstuplineid = int32((nextPosition - 1) / 2);\r\n        }\r\n        connectedUplineId = userlistbypos[uint32(previouslevelfirstuplineid)].Id;\r\n        userlistbyid[uint32(uplineId)].ReferCount++;\r\n        nextPosition++;\r\n        \r\n        while(true){\r\n            if(userlistbypos[uint32(nextPosition)].Id != 0){\r\n                nextPosition++;\r\n            }\r\n            else{\r\n                break;\r\n            }\r\n        }\r\n        \r\n    }\r\n    \r\n    function insertThird(uint32 uplineId) internal returns (int32 connectedUplineId){\r\n        //RESET THE UPLINE COUNT\r\n        userlistbyid[uint32(uplineId)].ReferCount = 0;\r\n\r\n        //FIND SUITABLE NODE\r\n        // get the left if empty direct use , if not empty then compare global position value , \r\n        // if global position more then most right then move next level , until global position is in the middle of left and right then v just loop that particular level\r\n        uint32 leftposition = uint32(userlistbyid[uint32(uplineId)].Position);\r\n        uint32 rightposition = uint32(userlistbyid[uint32(uplineId)].Position);\r\n        \r\n        while(true){\r\n            leftposition = uint32(leftposition * 2);\r\n            rightposition = uint32(rightposition * 2 + 1);\r\n            \r\n            if(nextPosition < leftposition){\r\n                //Find empty node between left to rightposition\r\n                uint32 tempPosition = leftposition;\r\n                uint32 count = rightposition - leftposition + 1;\r\n                for(uint32 i = 0; i < count; i++){\r\n                    if(userlistbypos[tempPosition + i].Id == 0){\r\n                        connectedUplineId = userlistbypos[(tempPosition + i) / 2].Id;\r\n                        return connectedUplineId;\r\n                    }\r\n                }\r\n                \r\n            }\r\n            \r\n            if(leftposition == nextPosition){\r\n                connectedUplineId = userlistbypos[nextPosition / 2].Id;\r\n                return connectedUplineId;\r\n            }\r\n            \r\n            if(rightposition == nextPosition){\r\n                connectedUplineId = userlistbypos[(nextPosition - 1) / 2].Id;\r\n                return connectedUplineId;\r\n            }\r\n            \r\n            if(nextPosition > leftposition && nextPosition < rightposition){\r\n                //Inset at next Postion\r\n                if(nextPosition % 2 == 0){\r\n                    connectedUplineId = userlistbypos[nextPosition / 2].Id;\r\n                    return connectedUplineId;\r\n                }\r\n                else{\r\n                    connectedUplineId = userlistbypos[(nextPosition - 1) / 2].Id;\r\n                    return connectedUplineId;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    function depositTokens(\r\n        uint32 uplineId\r\n    )  internal returns (bool success){\r\n        require(token != 0x0);\r\n\r\n        address contract_ = token;\r\n        address from_ = msg.sender;\r\n\r\n        ERC20Interface = IERC20(contract_);\r\n\r\n        //Transfer to contract\r\n        if (investamt > ERC20Interface.allowance(from_, address(this))) {\r\n            emit TransferFailed(from_, keeper, investamt);\r\n            revert();\r\n        }\r\n        ERC20Interface.transferFrom(from_, address(this), investamt);\r\n        emit TransferSuccessful(from_, address(this), investamt);\r\n        \r\n        if(nextPosition != 1){\r\n            //Transfer to referral\r\n            ERC20Interface.transfer(userlistbyid[uplineId].OwnerAddress , referralamt);\r\n        }\r\n         //Maintainer payout\r\n        MainterPayoutAmount = MainterPayoutAmount + maintaineramt;\r\n        UnpaidUserCount++;\r\n\r\n        return true;\r\n    }\r\n    \r\n    function Payout3XReward(uint32 UserId) public{\r\n        require(!IsExpired, \"Contract has expired.\");\r\n        require(msg.sender == userlistbyid[UserId].OwnerAddress, \"Only owner of the investment can claim 3X payment\");\r\n        \r\n        if(checkPayoutTree(UserId)){\r\n            Payout(UserId); \r\n        }\r\n        \r\n    }\r\n    \r\n    function checkPayoutTree(uint32 UserId) view public returns(bool){\r\n        \r\n        if(userlistbyid[UserId].IsPayout){\r\n            return false;\r\n        }\r\n        \r\n        int32[] memory list = new int32[](2);\r\n        User memory user;\r\n        \r\n        if(userlistbyid[uint32(UserId)].LeftId != -1){\r\n            user = userlistbyid[uint32(userlistbyid[UserId].LeftId)];\r\n            if(user.LeftId != -1 && user.RightId != 1){\r\n                list[0] = user.LeftId;\r\n                list[1] = user.RightId;\r\n                \r\n                for(uint i = 0; i < list.length; i++){\r\n                    user = userlistbyid[uint32(list[i])];\r\n                    if(user.LeftId == -1 || user.RightId == -1){\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n            else{\r\n                return false;\r\n            }\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n            \r\n        if(userlistbyid[uint32(UserId)].RightId != -1){\r\n            user = userlistbyid[uint32(userlistbyid[uint32(UserId)].RightId)];\r\n            if(user.LeftId != -1 && user.RightId != 1){\r\n                list[0] = user.LeftId;\r\n                list[1] = user.RightId;\r\n                \r\n                i = 0;\r\n                for(i = 0; i < list.length; i++){\r\n                    user = userlistbyid[uint32(list[i])];\r\n                    if(user.LeftId == -1 || user.RightId == -1){\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n            else{\r\n                return false;\r\n            }\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n    \r\n    \r\n    \r\n    function Payout(uint32 UserId) internal{\r\n        require(userlistbyid[UserId].IsPayout == false, \"User already received 3x payout\");\r\n        if(userlistbyid[UserId].IsPayout == false){\r\n            userlistbyid[UserId].IsPayout = true;\r\n            ERC20Interface.transfer(userlistbyid[UserId].OwnerAddress, investamt*3);\r\n            UnpaidUserCount--;\r\n        }\r\n    }\r\n    \r\n    function PayoutMaintainer() public onlyOwner{\r\n        require(maintainer != 0x0, \"No mainter account set for payout\");\r\n        require(MainterPayoutAmount > 0, \"Mainter payout balance is 0\");\r\n        \r\n        if(MainterPayoutAmount != 0){\r\n            \r\n            address contract_ = token;\r\n            ERC20Interface = IERC20(contract_);\r\n\r\n            if(nextPosition != 1){\r\n                //Transfer to maintainer\r\n                ERC20Interface.transfer(maintainer , MainterPayoutAmount);\r\n                MainterPayoutAmount = 0;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function getUserByAddress(address userAddress) view public returns (int32[] useridlist){\r\n        return userids[userAddress];\r\n    }\r\n    \r\n    function getUserIds(address userAddress) view public returns (int32[]){\r\n        return userids[userAddress];\r\n    }\r\n    \r\n    \r\n    function GetTreeByUserId(uint32 UserId, bool report) view public returns (User[]){\r\n        //Get Position\r\n        uint32 userposition = uint32(userlistbyid[uint32(UserId)].Position);\r\n        //Try to return all data base on position\r\n        uint userCount = 0;\r\n        if(report){\r\n            userCount = uint((2 ** (uint(currentLevel) + 1)) - 1);\r\n        }\r\n        else{\r\n            userCount = 15;\r\n        }\r\n        User[] memory userlist = new User[](userCount);\r\n        uint counter = 0;\r\n        uint32 availablenodes = 2;\r\n        int8 userlevel = 2;\r\n        \r\n        userlist[counter] = userlistbyid[uint32(userlistbypos[userposition].Id)];\r\n        counter++;\r\n        \r\n        while(true){\r\n            userposition = userposition * 2;\r\n            \r\n            for(uint32 i = 0; i < availablenodes; i++){\r\n                userlist[counter] = userlistbyid[uint32(userlistbypos[userposition + i].Id)];\r\n                counter++;\r\n            }\r\n            \r\n            availablenodes = availablenodes * 2;\r\n            userlevel++;\r\n            if(report == false){\r\n                if(availablenodes > 8){\r\n                    break;\r\n                }\r\n            }\r\n            else{\r\n                if(userlevel > currentLevel){\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return userlist;\r\n    }\r\n    \r\n    function GetUserById(uint32 userId) view public returns(User user){\r\n        user = userlistbyid[userId];\r\n    }\r\n    \r\n    function CheckInvestmentExpiry() public onlyOwner{\r\n        require(!isContractAlive(), \"Contract is alive.\");\r\n        require(PayoutAmount == 0, \"Contract balance is already calculated.\");\r\n        \r\n        if(MainterPayoutAmount != 0){\r\n            PayoutMaintainer();\r\n        }\r\n        \r\n        //Current Date - last Investment Date >= 365 days from last investment date timestamp\r\n        if(!isContractAlive()){\r\n            IsExpired = true;\r\n            uint contractBalance = ERC20Interface.balanceOf(address(this));\r\n            PayoutAmount = uint(contractBalance / uint(UnpaidUserCount));\r\n        }\r\n    }\r\n    \r\n    function RemainingInvestorPayout(uint quantity) public onlyOwner returns (bool){\r\n        require(IsExpired, \"Contract Is Still Alive\");\r\n        require(userCounter >= nextUnpaidUser, \"All users are paid\");\r\n        \r\n        for(uint32 i = 0; i < quantity; i++){\r\n            if(userlistbyid[uint32(nextUnpaidUser)].IsPayout == false && userlistbyid[uint32(nextUnpaidUser)].IsEndGamePayout == false){\r\n                userlistbyid[uint32(nextUnpaidUser)].IsEndGamePayout = true;\r\n                ERC20Interface.transfer(userlistbyid[uint32(nextUnpaidUser)].OwnerAddress, PayoutAmount);\r\n                UnpaidUserCount--;\r\n            }\r\n            nextUnpaidUser += idcounter;\r\n            if(nextUnpaidUser > userCounter){\r\n                return true;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function GetContractBalance() view public returns(uint){\r\n        return ERC20Interface.balanceOf(address(this)) - MainterPayoutAmount;\r\n    }\r\n    \r\n    function GetMaintainerAmount() view public returns(uint){\r\n        return MainterPayoutAmount;\r\n    }\r\n        \r\n    function GetExpiryInvestmentTimestamp() view public returns(uint){\r\n        return ExpiryInvestmentTimestamp;\r\n    }\r\n    \r\n    function GetIsExpired() view public returns (bool){\r\n        return IsExpired;\r\n    }\r\n    \r\n    function GetUnpaidUserCount() view public returns (int){\r\n        return UnpaidUserCount;\r\n    }\r\n    \r\n    function setMaintainer(address address_)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(address_ != 0x0);\r\n        maintainer = address_;\r\n        return true;\r\n    }\r\n    \r\n    function setToken(address address_)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(address_ != 0x0);\r\n        token = address_;\r\n        return true;\r\n    }\r\n    \r\n    function testSetExpiryTrue() public{\r\n        ExpiryInvestmentTimestamp = time_call() - 366 days;\r\n    }\r\n    \r\n    function testSetExpiryFalse() public{\r\n        ExpiryInvestmentTimestamp = time_call();\r\n        IsExpired = false;\r\n        PayoutAmount = 0;\r\n    }\r\n    \r\n    // function clearRemaingBalance() public onlyOwner{\r\n    //     require(IsExpired);\r\n    //     require(PayoutAmount > 0);\r\n    //     require(UnpaidUserCount == 0);\r\n    //     ERC20Interface.transfer(maintainer , GetContractBalance());\r\n    // }\r\n    \r\n    function sosPayout() public onlyOwner{\r\n        ERC20Interface.transfer(msg.sender , GetContractBalance());\r\n        ERC20Interface.transfer(msg.sender , GetMaintainerAmount());\r\n        IsExpired = true;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"PayoutAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"setMaintainer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sosPayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC20Interface\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextPosition\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ExpiryInvestmentTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investamt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userids\",\"outputs\":[{\"name\":\"\",\"type\":\"int32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMaintainerAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"testSetExpiryFalse\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserIds\",\"outputs\":[{\"name\":\"\",\"type\":\"int32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserByAddress\",\"outputs\":[{\"name\":\"useridlist\",\"type\":\"int32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetIsExpired\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"CheckInvestmentExpiry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetExpiryInvestmentTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"testSetExpiryTrue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralamt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextUnpaidUser\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maintainer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"UserId\",\"type\":\"uint32\"}],\"name\":\"checkPayoutTree\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"int8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IsExpired\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MainterPayoutAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"PayoutMaintainer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetUnpaidUserCount\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transaction\",\"outputs\":[{\"name\":\"contract_\",\"type\":\"address\"},{\"name\":\"to_\",\"type\":\"address\"},{\"name\":\"amount_\",\"type\":\"uint256\"},{\"name\":\"failed_\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userId\",\"type\":\"uint32\"}],\"name\":\"GetUserById\",\"outputs\":[{\"components\":[{\"name\":\"Id\",\"type\":\"int32\"},{\"name\":\"ReferCount\",\"type\":\"int8\"},{\"name\":\"Level\",\"type\":\"int8\"},{\"name\":\"UplineId\",\"type\":\"int32\"},{\"name\":\"LeftId\",\"type\":\"int32\"},{\"name\":\"RightId\",\"type\":\"int32\"},{\"name\":\"Position\",\"type\":\"int32\"},{\"name\":\"ReferralId\",\"type\":\"int32\"},{\"name\":\"OwnerAddress\",\"type\":\"address\"},{\"name\":\"IsPayout\",\"type\":\"bool\"},{\"name\":\"IsEndGamePayout\",\"type\":\"bool\"},{\"name\":\"CreatedBlock\",\"type\":\"uint256\"},{\"name\":\"CreatedTime\",\"type\":\"uint256\"}],\"name\":\"user\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"UserId\",\"type\":\"uint32\"},{\"name\":\"report\",\"type\":\"bool\"}],\"name\":\"GetTreeByUserId\",\"outputs\":[{\"components\":[{\"name\":\"Id\",\"type\":\"int32\"},{\"name\":\"ReferCount\",\"type\":\"int8\"},{\"name\":\"Level\",\"type\":\"int8\"},{\"name\":\"UplineId\",\"type\":\"int32\"},{\"name\":\"LeftId\",\"type\":\"int32\"},{\"name\":\"RightId\",\"type\":\"int32\"},{\"name\":\"Position\",\"type\":\"int32\"},{\"name\":\"ReferralId\",\"type\":\"int32\"},{\"name\":\"OwnerAddress\",\"type\":\"address\"},{\"name\":\"IsPayout\",\"type\":\"bool\"},{\"name\":\"IsEndGamePayout\",\"type\":\"bool\"},{\"name\":\"CreatedBlock\",\"type\":\"uint256\"},{\"name\":\"CreatedTime\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maintaineramt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"UserId\",\"type\":\"uint32\"}],\"name\":\"Payout3XReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"RemainingInvestorPayout\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UnpaidUserCount\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"quantity\",\"type\":\"int8\"},{\"name\":\"uplineId\",\"type\":\"uint32\"}],\"name\":\"Invest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from_\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to_\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"TransferSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from_\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to_\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"TransferFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"deracle","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a22603e25d29835a94976d591cff9b7e17b2db47bbd5fa3adf65b7d66cb8b78a"}]}