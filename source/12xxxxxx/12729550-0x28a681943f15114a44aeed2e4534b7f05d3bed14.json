{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.6;\r\npragma abicoder v2;\r\n\r\ncontract AleToschiSwitchPriceDumper {\r\n\r\n    address private owner = msg.sender;\r\n\r\n    uint256 public immutable fromBlock;\r\n\r\n    uint256 public blockNumber;\r\n    mapping(address => uint256) public pricePerETH;\r\n\r\n    address[] private _tokenAddresses;\r\n    address[] private _liquidityPoolAddresses;\r\n\r\n    IAMM public amm;\r\n\r\n    event PriceDump(address indexed from, address indexed to, uint256 pricePerETH);\r\n\r\n    constructor(uint256 _fromBlock, address[] memory tokenAddresses, address[] memory liquidityPoolAddresses, address ammAddress) {\r\n        fromBlock = _fromBlock;\r\n        _tokenAddresses = tokenAddresses;\r\n        _liquidityPoolAddresses = liquidityPoolAddresses;\r\n        amm = IAMM(ammAddress);\r\n    }\r\n\r\n    receive() external payable {\r\n        _ensureTime();\r\n    }\r\n\r\n    function addresses() external view returns(address[] memory tokenAddresses, address[] memory liquidityPoolAddresses) {\r\n        return (tokenAddresses = _tokenAddresses, liquidityPoolAddresses = _liquidityPoolAddresses);\r\n    }\r\n\r\n    function _ensureTime() private view {\r\n        require(blockNumber == 0, \"Already dumped BRO\");\r\n        require(block.number >= fromBlock, \"Too early to dump BRO\");\r\n    }\r\n\r\n    function dump() external {\r\n        _ensureTime();\r\n        require(msg.sender == owner, \"Unauthorized\");\r\n        (address ethereumAddress,,) = amm.data();\r\n\r\n        address[] memory path = new address[](1);\r\n        path[0] = ethereumAddress;\r\n\r\n        SwapData memory data = SwapData({\r\n            enterInETH : false,\r\n            exitInETH : true,\r\n            liquidityPoolAddresses : new address[](1),\r\n            path : path,\r\n            inputToken : address(0),\r\n            amount : 0,\r\n            receiver : address(this)\r\n        });\r\n\r\n        for(uint256 i = 0; i < _tokenAddresses.length; i++) {\r\n            uint256 unity = 1 * (10**IERC20(_tokenAddresses[i]).decimals());\r\n            IERC20(_tokenAddresses[i]).approve(address(amm), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\r\n            data.inputToken = _tokenAddresses[i];\r\n            data.amount = unity;\r\n            data.liquidityPoolAddresses[0] = _liquidityPoolAddresses[i];\r\n            emit PriceDump(_tokenAddresses[i], ethereumAddress, pricePerETH[_tokenAddresses[i]] = amm.swapLiquidity(data));\r\n        }\r\n        blockNumber = block.number;\r\n        owner.call{value : address(this).balance}(\"\");\r\n    }\r\n}\r\n\r\nstruct SwapData {\r\n    bool enterInETH;\r\n    bool exitInETH;\r\n    address[] liquidityPoolAddresses;\r\n    address[] path;\r\n    address inputToken;\r\n    uint256 amount;\r\n    address receiver;\r\n}\r\n\r\ninterface IAMM {\r\n    function data() external view returns(address ethereumAddress, uint256 maxTokensPerLiquidityPool, bool hasUniqueLiquidityPools);\r\n    function swapLiquidity(SwapData calldata data) external payable returns(uint256);\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns(uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromBlock\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"liquidityPoolAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"ammAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePerETH\",\"type\":\"uint256\"}],\"name\":\"PriceDump\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"liquidityPoolAddresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amm\",\"outputs\":[{\"internalType\":\"contract IAMM\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dump\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pricePerETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"AleToschiSwitchPriceDumper","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000c2f93100000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000100000000000000000000000000b2645b366b15285cfe547c7e480c8753835e21dc00000000000000000000000000000000000000000000000000000000000000030000000000000000000000007b123f53421b1bf8533339bfbdc7c98aa94163db00000000000000000000000034612903db071e888a4dadcaa416d3ee263a87b90000000000000000000000009e78b8274e1d6a76a0dbbf90418894df27cbceb5000000000000000000000000000000000000000000000000000000000000000300000000000000000000000009946d4e4ccde2a28ef269d26d9423034f5333e1000000000000000000000000418eb2f342d8189d480506ed814bcdf8cac5225400000000000000000000000002d436dc483f445f63aac45b37db0ee661949842","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c71e103d190a80a8e51b34817567822363b61d113553bf0a9cffa4dcc3b2d664"}]}