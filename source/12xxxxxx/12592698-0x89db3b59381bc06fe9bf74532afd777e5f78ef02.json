{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./contracts/dao/Implementation.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Daiquilibrium devs, based on the works of the Dynamic Dollar Devs and the Empty Set Squad\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./Market.sol\\\";\\nimport \\\"./Regulator.sol\\\";\\nimport \\\"./Bonding.sol\\\";\\nimport \\\"./Govern.sol\\\";\\nimport \\\"./Bootstrapper.sol\\\";\\nimport \\\"../Constants.sol\\\";\\nimport \\\"../vault/IImplementation.sol\\\";\\nimport \\\"../vault/IVault.sol\\\";\\nimport \\\"../vault/IYearnVault.sol\\\";\\nimport \\\"../staking/RewardsDistribution.sol\\\";\\n\\ncontract Implementation is IImplementation, State, Bonding, Market, Regulator, Govern, Bootstrapper {\\n    using SafeMath for uint256;\\n\\n    event Advance(uint256 indexed epoch, uint256 block, uint256 timestamp);\\n\\n    function initialize() initializer public {\\n        address rewardsDistribution = 0x772918d032cFd4Ff09Ea7Af623e56E2D8D96bB65;\\n        //Withdraw from the vault to RewardsDistribution\\n        IVault(Constants.getMultisigAddress()).submitTransaction(\\n            address(dai()),\\n            0,\\n            abi.encodeWithSignature(\\\"transfer(address,uint256)\\\",\\n                rewardsDistribution,\\n                dai().balanceOf(Constants.getMultisigAddress()))\\n        );\\n    }\\n\\n    function advance() external {\\n        Bootstrapper.step();\\n        Bonding.step();\\n        Regulator.step();\\n        Market.step();\\n\\n        emit Advance(epoch(), block.number, block.timestamp);\\n    }\\n\\n\\n    //The executed transaction is withdrawing from the vault\\n    //All DAI is sent to the StakingRewards contract and distributed over 7 days\\n    function transactionExecuted(uint256 transactionId) external {\\n        RewardsDistribution rewardsDistribution = RewardsDistribution(0x772918d032cFd4Ff09Ea7Af623e56E2D8D96bB65);\\n        address stakingRewards = 0xb1c4426C86082D91a6c097fC588E5D5d8dD1f5a8;\\n        uint amount = dai().balanceOf(address(rewardsDistribution));\\n        rewardsDistribution.removeRewardDistribution(0);\\n        rewardsDistribution.addRewardDistribution(stakingRewards, amount);\\n        rewardsDistribution.distributeRewards(amount);\\n    }\\n\\n    function transactionFailed(uint256 transactionId) external {\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/dao/Market.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Daiquilibrium devs, based on the works of the Dynamic Dollar Devs and the Empty Set Squad\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./Curve.sol\\\";\\nimport \\\"./Comptroller.sol\\\";\\nimport \\\"../Constants.sol\\\";\\n\\ncontract Market is Comptroller, Curve {\\n    using SafeMath for uint256;\\n\\n    bytes32 private constant FILE = \\\"Market\\\";\\n\\n    event CouponExpiration(uint256 indexed epoch, uint256 couponsExpired, uint256 lessRedeemable, uint256 lessDebt, uint256 newBonded);\\n    event CouponPurchase(address indexed account, uint256 indexed epoch, uint256 dollarAmount, uint256 couponAmount);\\n    event CouponRedemption(address indexed account, uint256 indexed epoch, uint256 couponAmount);\\n    event CouponBurn(address indexed account, uint256 indexed epoch, uint256 couponAmount);\\n    event CouponTransfer(address indexed from, address indexed to, uint256 indexed epoch, uint256 value);\\n    event CouponApproval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function step() internal {\\n        expireCouponsForEpoch(epoch());\\n    }\\n\\n    function expireCouponsForEpoch(uint256 epoch) private {\\n        uint256 expiredAmount = expiringCoupons(epoch);\\n        (uint256 lessRedeemable, uint256 lessDebt, uint256 newBonded) = (0, 0, 0);\\n\\n        expireCoupons(epoch);\\n\\n        uint256 totalRedeemable = totalRedeemable();\\n        uint256 totalCoupons = totalCoupons();\\n        if (totalRedeemable > totalCoupons) {\\n            lessRedeemable = totalRedeemable.sub(totalCoupons);\\n            burnRedeemable(lessRedeemable);\\n            (, lessDebt, newBonded) = increaseSupply(lessRedeemable);\\n        }\\n\\n        emit CouponExpiration(epoch, expiredAmount, lessRedeemable, lessDebt, newBonded);\\n    }\\n\\n    function baseCouponPremium(uint256 amount) public view returns (uint256) {\\n        return calculateBasePremium(dollar().totalSupply(), totalDebt(), amount);\\n    }\\n\\n    function additionalCouponPremium(uint256 amount, uint256 expirationPeriod) public pure returns (uint256) {\\n        return calculateAdditionalPremium(amount, expirationPeriod > 2 ? expirationPeriod - 2 : 1);\\n    }\\n\\n    function couponPremium(uint256 amount, uint256 expirationPeriod) public view returns (uint256) {\\n        return calculateCouponPremium(dollar().totalSupply(), totalDebt(), amount, expirationPeriod > 2 ? expirationPeriod - 2 : 1);\\n    }\\n\\n    function couponRedemptionPenalty(uint256 couponEpoch, uint256 couponAmount, uint256 expirationPeriod) public view returns (uint256) {\\n        uint timeIntoEpoch = timeInEpoch();\\n        uint couponAge = epoch() - couponEpoch;\\n\\n        uint couponEpochDecay = currentEpochDuration().div(2) * (expirationPeriod - couponAge) / expirationPeriod;\\n\\n        if(timeIntoEpoch > couponEpochDecay) {\\n            return 0;\\n        }\\n\\n        Decimal.D256 memory couponEpochInitialPenalty = Constants.getInitialCouponRedemptionPenalty().div(Decimal.D256({value: expirationPeriod })).mul(Decimal.D256({value: expirationPeriod - couponAge}));\\n        Decimal.D256 memory couponEpochDecayedPenalty = couponEpochInitialPenalty.div(Decimal.D256({value: couponEpochDecay})).mul(Decimal.D256({value: couponEpochDecay - timeIntoEpoch}));\\n\\n        return Decimal.D256({value: couponAmount}).mul(couponEpochDecayedPenalty).value;\\n    }\\n\\n    //updates coupons to DAIQIP-3\\n    function updateCoupons(uint256 _epoch, uint256 expirationPeriod) external {\\n        uint256 balance = balanceOfCoupons(msg.sender, _epoch);\\n\\n        Require.that(\\n            balance > 0,\\n            FILE,\\n            \\\"No coupons\\\"\\n        );\\n\\n        Require.that(\\n            couponExpirationForAccount(msg.sender, _epoch) == 0,\\n            FILE,\\n            \\\"Coupons already updated\\\"\\n        );\\n\\n        uint256 expiration = _epoch.add(expirationPeriod);\\n\\n        Require.that(\\n            epoch() < expiration && expirationPeriod <= 100000,\\n            FILE,\\n            \\\"Invalid expiration\\\"\\n        );\\n\\n        uint256 bonus = balance.div(100);\\n        uint256 newBalance = balance.add(bonus);\\n        \\n        _state.accounts[msg.sender].coupons[_epoch] = newBalance;\\n        _state.balance.coupons = _state.balance.coupons.add(bonus);\\n        _state3.couponExpirationsByAccount[msg.sender][_epoch] = expiration;\\n        _state3.expiringCouponsByEpoch[expiration] = _state3.expiringCouponsByEpoch[expiration].add(newBalance);\\n    }\\n\\n    function purchaseCoupons(uint256 dollarAmount, uint256 expirationPeriod) external returns (uint256) {\\n        Require.that(\\n            dollarAmount > 0,\\n            FILE,\\n            \\\"Must purchase non-zero amount\\\"\\n        );\\n\\n        Require.that(\\n            totalDebt() >= dollarAmount,\\n            FILE,\\n            \\\"Not enough debt\\\"\\n        );\\n\\n        Require.that(\\n            expirationPeriod > 2 && expirationPeriod <= 100000,\\n            FILE,\\n            \\\"Invalid expiration period\\\"\\n        );\\n\\n        Require.that(\\n            balanceOfCoupons(msg.sender, epoch()) == 0 || couponExpirationForAccount(msg.sender, epoch()) > 0,\\n            FILE,\\n            \\\"Coupons not updated\\\"\\n        );\\n\\n        Require.that(\\n            couponExpirationForAccount(msg.sender, epoch()) == 0 || couponExpirationForAccount(msg.sender, epoch()) == epoch().add(expirationPeriod),\\n            FILE,\\n            \\\"Cannot set different expiration\\\"\\n        );\\n\\n        uint256 epoch = epoch();\\n        uint256 couponAmount = dollarAmount.add(couponPremium(dollarAmount, expirationPeriod));\\n        burnFromAccount(msg.sender, dollarAmount);\\n        incrementBalanceOfCoupons(msg.sender, epoch, couponAmount, epoch.add(expirationPeriod));\\n\\n        emit CouponPurchase(msg.sender, epoch, dollarAmount, couponAmount);\\n\\n        return couponAmount;\\n    }\\n\\n    function redeemCoupons(uint256 couponEpoch, uint256 couponAmount) external {\\n        require(epoch().sub(couponEpoch) >= 2, \\\"Market: Too early to redeem\\\");\\n        require(balanceOfCoupons(msg.sender, couponEpoch) > couponAmount, \\\"Market: Insufficient coupon balance\\\");\\n        require(couponExpirationForAccount(msg.sender, couponEpoch) > 0, \\\"Market: Coupons not updated\\\");\\n\\n        decrementBalanceOfCoupons(msg.sender, couponEpoch, couponAmount, \\\"Market: Insufficient coupon balance\\\");\\n\\n        uint burnAmount = couponRedemptionPenalty(couponEpoch, couponAmount, couponExpirationForAccount(msg.sender, couponEpoch).sub(couponEpoch));\\n        uint256 redeemAmount = couponAmount - burnAmount;\\n        \\n        redeemToAccount(msg.sender, redeemAmount);\\n\\n        if(burnAmount > 0){\\n            emit CouponBurn(msg.sender, couponEpoch, burnAmount);\\n        }\\n\\n        emit CouponRedemption(msg.sender, couponEpoch, redeemAmount);\\n    }\\n\\n    function redeemCoupons(uint256 couponEpoch, uint256 couponAmount, uint256 minOutput) external {\\n        require(epoch().sub(couponEpoch) >= 2, \\\"Market: Too early to redeem\\\");\\n        require(balanceOfCoupons(msg.sender, couponEpoch) >= couponAmount, \\\"Market: Insufficient coupon balance\\\");\\n        require(couponExpirationForAccount(msg.sender, couponEpoch) > 0, \\\"Market: Coupons not updated\\\");\\n\\n        decrementBalanceOfCoupons(msg.sender, couponEpoch, couponAmount, \\\"Market: Insufficient coupon balance\\\");\\n        \\n        uint burnAmount = couponRedemptionPenalty(couponEpoch, couponAmount, couponExpirationForAccount(msg.sender, couponEpoch).sub(couponEpoch));\\n        uint256 redeemAmount = couponAmount - burnAmount;\\n\\n        Require.that(\\n            redeemAmount >= minOutput,\\n            FILE,\\n            \\\"Insufficient output amount\\\"\\n        );\\n        \\n        redeemToAccount(msg.sender, redeemAmount);\\n\\n        if(burnAmount > 0){\\n            emit CouponBurn(msg.sender, couponEpoch, burnAmount);\\n        }\\n\\n        emit CouponRedemption(msg.sender, couponEpoch, redeemAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/dao/Curve.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Daiquilibrium devs, based on the works of the Dynamic Dollar Devs and the Empty Set Squad\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../external/Decimal.sol\\\";\\nimport \\\"../Constants.sol\\\";\\n\\ncontract Curve {\\n    using SafeMath for uint256;\\n    using Decimal for Decimal.D256;\\n\\n    function calculateCouponPremium(\\n        uint256 totalSupply,\\n        uint256 totalDebt,\\n        uint256 amount,\\n        uint256 expirationPeriod\\n    ) internal pure returns (uint256) {\\n        return basePremium(totalSupply, totalDebt, amount).add(additionalPremium(expirationPeriod)).mul(amount).asUint256();\\n    }\\n\\n    function calculateBasePremium(uint256 totalSupply, uint256 totalDebt, uint256 amount) internal pure returns (uint256) {\\n        return basePremium(totalSupply, totalDebt, amount).mul(amount).asUint256();\\n    }\\n\\n    function calculateAdditionalPremium(uint256 amount, uint256 expirationPeriod) internal pure returns (uint256) {\\n        return additionalPremium(expirationPeriod).mul(amount).asUint256();\\n    }\\n\\n    function basePremium(\\n        uint256 totalSupply,\\n        uint256 totalDebt,\\n        uint256 amount\\n    ) private pure returns (Decimal.D256 memory) {\\n        Decimal.D256 memory debtRatio = Decimal.ratio(totalDebt, totalSupply);\\n        Decimal.D256 memory debtRatioUpperBound = Constants.getDebtRatioCap();\\n\\n        uint256 totalSupplyEnd = totalSupply.sub(amount);\\n        uint256 totalDebtEnd = totalDebt.sub(amount);\\n        Decimal.D256 memory debtRatioEnd = Decimal.ratio(totalDebtEnd, totalSupplyEnd);\\n\\n        if (debtRatio.greaterThan(debtRatioUpperBound)) {\\n            if (debtRatioEnd.greaterThan(debtRatioUpperBound)) {\\n                return curve(debtRatioUpperBound);\\n            }\\n\\n            Decimal.D256 memory premiumCurve = curveMean(debtRatioEnd, debtRatioUpperBound);\\n            Decimal.D256 memory premiumCurveDelta = debtRatioUpperBound.sub(debtRatioEnd);\\n            Decimal.D256 memory premiumFlat = curve(debtRatioUpperBound);\\n            Decimal.D256 memory premiumFlatDelta = debtRatio.sub(debtRatioUpperBound);\\n            return (premiumCurve.mul(premiumCurveDelta)).add(premiumFlat.mul(premiumFlatDelta))\\n                .div(premiumCurveDelta.add(premiumFlatDelta));\\n        }\\n\\n        return curveMean(debtRatioEnd, debtRatio);\\n    }\\n\\n    // 0.3 / (1 + P * 0.05)\\n    function additionalPremium(uint256 expirationPeriod) private pure returns (Decimal.D256 memory) {\\n        return Decimal.D256({ value: 30e16 }).div(\\n            Decimal.one().add(Decimal.D256({ value: 5e16 }).mul(expirationPeriod.sub(1)))\\n        );\\n    }\\n\\n    // 1/(6(1-R)^2)-1/6\\n    function curve(Decimal.D256 memory debtRatio) private pure returns (Decimal.D256 memory) {\\n        return Decimal.one().div(\\n            Decimal.from(6).mul((Decimal.one().sub(debtRatio)).pow(2))\\n        ).sub(Decimal.ratio(1, 6));\\n    }\\n\\n    // 1/(6(1-R)(1-R'))-1/6\\n    function curveMean(\\n        Decimal.D256 memory lower,\\n        Decimal.D256 memory upper\\n    ) private pure returns (Decimal.D256 memory) {\\n        if (lower.equals(upper)) {\\n            return curve(lower);\\n        }\\n\\n        return Decimal.one().div(\\n            Decimal.from(6).mul(Decimal.one().sub(upper)).mul(Decimal.one().sub(lower))\\n        ).sub(Decimal.ratio(1, 6));\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/external/Decimal.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2019 dYdX Trading Inc.\\n    Copyright 2020 Dynamic Dollar Devs, based on the works of the Empty Set Squad\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity ^0.5.7;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title Decimal\\n * @author dYdX\\n *\\n * Library that defines a fixed-point number with 18 decimal places.\\n */\\nlibrary Decimal {\\n    using SafeMath for uint256;\\n\\n    // ============ Constants ============\\n\\n    uint256 constant BASE = 10**18;\\n\\n    // ============ Structs ============\\n\\n\\n    struct D256 {\\n        uint256 value;\\n    }\\n\\n    // ============ Static Functions ============\\n\\n    function zero()\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: 0 });\\n    }\\n\\n    function one()\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: BASE });\\n    }\\n\\n    function from(\\n        uint256 a\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: a.mul(BASE) });\\n    }\\n\\n    function ratio(\\n        uint256 a,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: getPartial(a, BASE, b) });\\n    }\\n\\n    // ============ Self Functions ============\\n\\n    function add(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.add(b.mul(BASE)) });\\n    }\\n\\n    function sub(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.sub(b.mul(BASE)) });\\n    }\\n\\n    function sub(\\n        D256 memory self,\\n        uint256 b,\\n        string memory reason\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.sub(b.mul(BASE), reason) });\\n    }\\n\\n    function mul(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.mul(b) });\\n    }\\n\\n    function div(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.div(b) });\\n    }\\n\\n    function pow(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        if (b == 0) {\\n            return from(1);\\n        }\\n\\n        D256 memory temp = D256({ value: self.value });\\n        for (uint256 i = 1; i < b; i++) {\\n            temp = mul(temp, self);\\n        }\\n\\n        return temp;\\n    }\\n\\n    function add(\\n        D256 memory self,\\n        D256 memory b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.add(b.value) });\\n    }\\n\\n    function sub(\\n        D256 memory self,\\n        D256 memory b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.sub(b.value) });\\n    }\\n\\n    function sub(\\n        D256 memory self,\\n        D256 memory b,\\n        string memory reason\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.sub(b.value, reason) });\\n    }\\n\\n    function mul(\\n        D256 memory self,\\n        D256 memory b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: getPartial(self.value, b.value, BASE) });\\n    }\\n\\n    function div(\\n        D256 memory self,\\n        D256 memory b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: getPartial(self.value, BASE, b.value) });\\n    }\\n\\n    function equals(D256 memory self, D256 memory b) internal pure returns (bool) {\\n        return self.value == b.value;\\n    }\\n\\n    function greaterThan(D256 memory self, D256 memory b) internal pure returns (bool) {\\n        return compareTo(self, b) == 2;\\n    }\\n\\n    function lessThan(D256 memory self, D256 memory b) internal pure returns (bool) {\\n        return compareTo(self, b) == 0;\\n    }\\n\\n    function greaterThanOrEqualTo(D256 memory self, D256 memory b) internal pure returns (bool) {\\n        return compareTo(self, b) > 0;\\n    }\\n\\n    function lessThanOrEqualTo(D256 memory self, D256 memory b) internal pure returns (bool) {\\n        return compareTo(self, b) < 2;\\n    }\\n\\n    function isZero(D256 memory self) internal pure returns (bool) {\\n        return self.value == 0;\\n    }\\n\\n    function asUint256(D256 memory self) internal pure returns (uint256) {\\n        return self.value.div(BASE);\\n    }\\n\\n    // ============ Core Methods ============\\n\\n    function getPartial(\\n        uint256 target,\\n        uint256 numerator,\\n        uint256 denominator\\n    )\\n    private\\n    pure\\n    returns (uint256)\\n    {\\n        return target.mul(numerator).div(denominator);\\n    }\\n\\n    function compareTo(\\n        D256 memory a,\\n        D256 memory b\\n    )\\n    private\\n    pure\\n    returns (uint256)\\n    {\\n        if (a.value == b.value) {\\n            return 1;\\n        }\\n        return a.value > b.value ? 2 : 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/Constants.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Daiquilibrium devs, based on the works of the Dynamic Dollar Devs and the Empty Set Squad\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./external/Decimal.sol\\\";\\n\\nlibrary Constants {\\n    /* Chain */\\n    uint256 private constant CHAIN_ID = 1; // Mainnet\\n\\n    /* Bootstrapping */\\n    uint256 private constant TARGET_SUPPLY = 25e24; // 25M DAIQ\\n    uint256 private constant BOOTSTRAPPING_PRICE = 154e16; // 1.54 DAI (targeting 4.5% inflation)\\n\\n    /* Oracle */\\n    address private constant DAI = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\\n    uint256 private constant ORACLE_RESERVE_MINIMUM = 1e22; // 10,000 DAI\\n\\n    /* Bonding */\\n    uint256 private constant INITIAL_STAKE_MULTIPLE = 1e6; // 100 DAIQ -> 100M DAIQS\\n\\n    /* Epoch */\\n    struct EpochStrategy {\\n        uint256 offset;\\n        uint256 minPeriod;\\n        uint256 maxPeriod;\\n    }\\n\\n    uint256 private constant EPOCH_OFFSET = 86400; //1 day\\n    uint256 private constant EPOCH_MIN_PERIOD = 1800; //30 minutes\\n    uint256 private constant EPOCH_MAX_PERIOD = 7200; //2 hours\\n\\n    /* Governance */\\n    uint256 private constant GOVERNANCE_PERIOD = 13;\\n    uint256 private constant GOVERNANCE_QUORUM = 20e16; // 20%\\n    uint256 private constant GOVERNANCE_SUPER_MAJORITY = 66e16; // 66%\\n    uint256 private constant GOVERNANCE_EMERGENCY_DELAY = 3; // 3 epochs\\n\\n    /* DAO */\\n    uint256 private constant DAI_ADVANCE_INCENTIVE_CAP = 150e18; //150 DAI\\n    uint256 private constant ADVANCE_INCENTIVE = 100e18; // 100 DAIQ\\n    uint256 private constant DAO_EXIT_LOCKUP_EPOCHS = 0; // 24 epochs fluid\\n\\n    /* Pool */\\n    uint256 private constant POOL_EXIT_LOCKUP_EPOCHS = 0; // 12 epochs fluid\\n\\n    /* Market */\\n    uint256 private constant COUPON_EXPIRATION = 360;\\n    uint256 private constant DEBT_RATIO_CAP = 40e16; // 40%\\n    uint256 private constant INITIAL_COUPON_REDEMPTION_PENALTY = 50e16; // 50%\\n\\n    /* Regulator */\\n    uint256 private constant SUPPLY_CHANGE_DIVISOR = 12e18; // 12\\n    uint256 private constant SUPPLY_CHANGE_LIMIT = 10e16; // 10%\\n    uint256 private constant ORACLE_POOL_RATIO = 60; // 60%\\n\\n    /**\\n     * Getters\\n     */\\n    function getDAIAddress() internal pure returns (address) {\\n        return DAI;\\n    }\\n\\n    function getPairAddress() internal pure returns (address) {\\n        return address(0x26B4B107dCe673C00D59D71152136327cF6dFEBf);\\n    }\\n\\n    function getMultisigAddress() internal pure returns (address) {\\n        return address(0x7c066d74dd5ff4E0f3CB881eD197d49C96cA1771);\\n    }\\n\\n    function getMarketingMultisigAddress() internal pure returns (address) {\\n        return address(0x0BCbDfd1ab7c2cBb6a8612f3300f214a779cb520);\\n    }\\n\\n    function getOracleReserveMinimum() internal pure returns (uint256) {\\n        return ORACLE_RESERVE_MINIMUM;\\n    }\\n\\n    function getEpochStrategy() internal pure returns (EpochStrategy memory) {\\n        return EpochStrategy({\\n            offset: EPOCH_OFFSET,\\n            minPeriod: EPOCH_MIN_PERIOD,\\n            maxPeriod: EPOCH_MAX_PERIOD\\n        });\\n    }\\n\\n    function getInitialStakeMultiple() internal pure returns (uint256) {\\n        return INITIAL_STAKE_MULTIPLE;\\n    }\\n\\n    function getBootstrappingTarget() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.from(TARGET_SUPPLY);\\n    }\\n\\n    function getBootstrappingPrice() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.D256({value: BOOTSTRAPPING_PRICE});\\n    }\\n\\n    function getGovernancePeriod() internal pure returns (uint256) {\\n        return GOVERNANCE_PERIOD;\\n    }\\n\\n    function getGovernanceQuorum() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.D256({value: GOVERNANCE_QUORUM});\\n    }\\n\\n    function getGovernanceSuperMajority() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.D256({value: GOVERNANCE_SUPER_MAJORITY});\\n    }\\n\\n    function getGovernanceEmergencyDelay() internal pure returns (uint256) {\\n        return GOVERNANCE_EMERGENCY_DELAY;\\n    }\\n\\n    function getAdvanceIncentive() internal pure returns (uint256) {\\n        return ADVANCE_INCENTIVE;\\n    }\\n\\n    function getDaiAdvanceIncentiveCap() internal pure returns (uint256) {\\n        return DAI_ADVANCE_INCENTIVE_CAP;\\n    }\\n\\n    function getDAOExitLockupEpochs() internal pure returns (uint256) {\\n        return DAO_EXIT_LOCKUP_EPOCHS;\\n    }\\n\\n    function getPoolExitLockupEpochs() internal pure returns (uint256) {\\n        return POOL_EXIT_LOCKUP_EPOCHS;\\n    }\\n\\n    function getDebtRatioCap() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.D256({value: DEBT_RATIO_CAP});\\n    }\\n    \\n    function getInitialCouponRedemptionPenalty() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.D256({value: INITIAL_COUPON_REDEMPTION_PENALTY});\\n    }\\n\\n    function getSupplyChangeLimit() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.D256({value: SUPPLY_CHANGE_LIMIT});\\n    }\\n\\n    function getSupplyChangeDivisor() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.D256({value: SUPPLY_CHANGE_DIVISOR});\\n    }\\n\\n    function getOraclePoolRatio() internal pure returns (uint256) {\\n        return ORACLE_POOL_RATIO;\\n    }\\n\\n    function getChainId() internal pure returns (uint256) {\\n        return CHAIN_ID;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/dao/Comptroller.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Daiquilibrium devs, based on the works of the Dynamic Dollar Devs and the Empty Set Squad\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./Setters.sol\\\";\\nimport \\\"../external/Require.sol\\\";\\n\\ncontract Comptroller is Setters {\\n    using SafeMath for uint256;\\n\\n    bytes32 private constant FILE = \\\"Comptroller\\\";\\n\\n    function mintToAccount(address account, uint256 amount) internal {\\n        dollar().mint(account, amount);\\n\\n        if (!bootstrappingAt(epoch())) \\n            increaseDebt(amount);\\n\\n        balanceCheck();\\n    }\\n\\n    function burnFromAccount(address account, uint256 amount) internal {\\n        dollar().transferFrom(account, address(this), amount);\\n        dollar().burn(amount);\\n        decrementTotalDebt(amount, \\\"Comptroller: not enough outstanding debt\\\");\\n\\n        balanceCheck();\\n    }\\n\\n    function redeemToAccount(address account, uint256 amount) internal {\\n        dollar().transfer(account, amount);\\n        decrementTotalRedeemable(amount, \\\"Comptroller: not enough redeemable balance\\\");\\n\\n        balanceCheck();\\n    }\\n\\n    function burnRedeemable(uint256 amount) internal {\\n        dollar().burn(amount);\\n        decrementTotalRedeemable(amount, \\\"Comptroller: not enough redeemable balance\\\");\\n\\n        balanceCheck();\\n    }\\n\\n    function increaseDebt(uint256 amount) internal {\\n        incrementTotalDebt(amount);\\n        resetDebt(Constants.getDebtRatioCap());\\n\\n        balanceCheck();\\n    }\\n\\n    function decreaseDebt(uint256 amount) internal {\\n        decrementTotalDebt(amount, \\\"Comptroller: not enough debt\\\");\\n\\n        balanceCheck();\\n    }\\n\\n    function increaseSupply(uint256 newSupply) internal returns (uint256, uint256, uint256) {\\n        (uint256 newRedeemable, uint256 lessDebt, uint256 poolReward) = (0, 0, 0);\\n\\n        // 1. True up redeemable pool\\n        uint256 totalRedeemable = totalRedeemable();\\n        uint256 totalCoupons = totalCoupons();\\n        if (totalRedeemable < totalCoupons) {\\n\\n            // Get new redeemable coupons\\n            newRedeemable = totalCoupons.sub(totalRedeemable);\\n            // Pad with Pool's potential cut\\n            newRedeemable = newRedeemable.mul(100).div(SafeMath.sub(100, Constants.getOraclePoolRatio()));\\n            // Cap at newSupply\\n            newRedeemable = newRedeemable > newSupply ? newSupply : newRedeemable;\\n            // Determine Pool's final cut\\n            poolReward = newRedeemable.mul(Constants.getOraclePoolRatio()).div(100);\\n            // Determine Redeemable's final cut\\n            newRedeemable = newRedeemable.sub(poolReward);\\n            \\n            mintToPool(poolReward);\\n            mintToRedeemable(newRedeemable);\\n\\n            newSupply = newSupply.sub(poolReward);\\n            newSupply = newSupply.sub(newRedeemable);\\n        }\\n        // 2. Eliminate debt\\n        uint256 totalDebt = totalDebt();\\n        if (newSupply > 0 && totalDebt > 0) {\\n            lessDebt = totalDebt > newSupply ? newSupply : totalDebt;\\n            decreaseDebt(lessDebt);\\n\\n            newSupply = newSupply.sub(lessDebt);\\n        }\\n\\n        // 3. Payout to bonded\\n        if (totalBonded() == 0) {\\n            newSupply = 0;\\n        }\\n        if (newSupply > 0) {\\n            mintToBonded(newSupply);\\n        }\\n\\n        return (newRedeemable, lessDebt, newSupply.add(poolReward));\\n    }\\n\\n    function resetDebt(Decimal.D256 memory targetDebtRatio) internal {\\n        uint256 targetDebt = targetDebtRatio.mul(dollar().totalSupply()).asUint256();\\n        uint256 currentDebt = totalDebt();\\n\\n        if (currentDebt > targetDebt) {\\n            uint256 lessDebt = currentDebt.sub(targetDebt);\\n            decreaseDebt(lessDebt);\\n        }\\n    }\\n\\n    function balanceCheck() private {\\n        Require.that(\\n            dollar().balanceOf(address(this)) >= totalBonded().add(totalStaged()).add(totalRedeemable()),\\n            FILE,\\n            \\\"Inconsistent balances\\\"\\n        );\\n    }\\n\\n    function mintToBonded(uint256 amount) private {\\n        Require.that(\\n            totalBonded() > 0,\\n            FILE,\\n            \\\"Cant mint to empty pool\\\"\\n        );\\n\\n        uint256 poolAmount = amount.mul(Constants.getOraclePoolRatio()).div(100);\\n        uint256 daoAmount = amount > poolAmount ? amount.sub(poolAmount) : 0;\\n\\n        mintToPool(poolAmount);\\n        mintToDAO(daoAmount);\\n\\n        balanceCheck();\\n    }\\n\\n    function mintToDAO(uint256 amount) private {\\n        if (amount > 0) {\\n            dollar().mint(address(this), amount);\\n            incrementTotalBonded(amount);\\n        }\\n    }\\n\\n    function mintToPool(uint256 amount) private {\\n        if (amount > 0) {\\n            dollar().mint(pool(), amount);\\n        }\\n    }\\n\\n    function mintToRedeemable(uint256 amount) private {\\n        dollar().mint(address(this), amount);\\n        incrementTotalRedeemable(amount);\\n\\n        balanceCheck();\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/dao/Setters.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Daiquilibrium devs, based on the works of the Dynamic Dollar Devs and the Empty Set Squad\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./State.sol\\\";\\nimport \\\"./Getters.sol\\\";\\n\\ncontract Setters is State, Getters {\\n    using SafeMath for uint256;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * ERC20 Interface\\n     */\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool) {\\n        return false;\\n    }\\n\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        return false;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\\n        return false;\\n    }\\n\\n    /**\\n     * Global\\n     */\\n\\n    function incrementTotalBonded(uint256 amount) internal {\\n        _state.balance.bonded = _state.balance.bonded.add(amount);\\n    }\\n\\n    function decrementTotalBonded(uint256 amount, string memory reason) internal {\\n        _state.balance.bonded = _state.balance.bonded.sub(amount, reason);\\n    }\\n\\n    function incrementTotalDebt(uint256 amount) internal {\\n        _state.balance.debt = _state.balance.debt.add(amount);\\n    }\\n\\n    function decrementTotalDebt(uint256 amount, string memory reason) internal {\\n        _state.balance.debt = _state.balance.debt.sub(amount, reason);\\n    }\\n\\n    function setDebtToZero() internal {\\n        _state.balance.debt = 0;\\n    }\\n\\n    function incrementTotalRedeemable(uint256 amount) internal {\\n        _state.balance.redeemable = _state.balance.redeemable.add(amount);\\n    }\\n\\n    function decrementTotalRedeemable(uint256 amount, string memory reason) internal {\\n        _state.balance.redeemable = _state.balance.redeemable.sub(amount, reason);\\n    }\\n\\n    /**\\n     * Account\\n     */\\n\\n    function incrementBalanceOf(address account, uint256 amount) internal {\\n        _state.accounts[account].balance = _state.accounts[account].balance.add(amount);\\n        _state.balance.supply = _state.balance.supply.add(amount);\\n\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function decrementBalanceOf(address account, uint256 amount, string memory reason) internal {\\n        _state.accounts[account].balance = _state.accounts[account].balance.sub(amount, reason);\\n        _state.balance.supply = _state.balance.supply.sub(amount, reason);\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function incrementBalanceOfStaged(address account, uint256 amount) internal {\\n        _state.accounts[account].staged = _state.accounts[account].staged.add(amount);\\n        _state.balance.staged = _state.balance.staged.add(amount);\\n    }\\n\\n    function decrementBalanceOfStaged(address account, uint256 amount, string memory reason) internal {\\n        _state.accounts[account].staged = _state.accounts[account].staged.sub(amount, reason);\\n        _state.balance.staged = _state.balance.staged.sub(amount, reason);\\n    }\\n\\n    function incrementBalanceOfCoupons(address account, uint256 epoch, uint256 amount, uint256 expiration) internal {\\n        _state.accounts[account].coupons[epoch] = _state.accounts[account].coupons[epoch].add(amount); //Adds coupons to user's balance\\n        _state.balance.coupons = _state.balance.coupons.add(amount); //increments total outstanding coupons\\n        _state3.couponExpirationsByAccount[account][epoch] = expiration; //sets the expiration epoch for the user's coupons\\n        _state3.expiringCouponsByEpoch[expiration] = _state3.expiringCouponsByEpoch[expiration].add(amount); //Increments the number of expiring coupons in epoch\\n    }\\n\\n    function decrementBalanceOfCoupons(address account, uint256 epoch, uint256 amount, string memory reason) internal {\\n        _state.accounts[account].coupons[epoch] = _state.accounts[account].coupons[epoch].sub(amount, reason);\\n        uint256 expiration = _state3.couponExpirationsByAccount[account][epoch];\\n        _state3.expiringCouponsByEpoch[expiration] = _state3.expiringCouponsByEpoch[expiration].sub(amount, reason);\\n        _state.balance.coupons = _state.balance.coupons.sub(amount, reason);\\n    }\\n\\n    function unfreeze(address account) internal {\\n        _state.accounts[account].fluidUntil = epoch().add(Constants.getDAOExitLockupEpochs());\\n    }\\n\\n    function updateAllowanceCoupons(address owner, address spender, uint256 amount) internal {\\n        _state.accounts[owner].couponAllowances[spender] = amount;\\n    }\\n\\n    function decrementAllowanceCoupons(address owner, address spender, uint256 amount, string memory reason) internal {\\n        _state.accounts[owner].couponAllowances[spender] =\\n            _state.accounts[owner].couponAllowances[spender].sub(amount, reason);\\n    }\\n\\n    /**\\n     * Epoch\\n     */\\n\\n    function setDAIAdvanceIncentive(uint256 value) internal {\\n        _state.epoch.daiAdvanceIncentive = value;\\n    }\\n\\n    function shouldDistributeDAI(bool should) internal {\\n        _state.epoch.shouldDistributeDAI = should;\\n    }\\n\\n    function setBootstrappingPeriod(uint256 epochs) internal {\\n        _state.epoch.bootstrapping = epochs;\\n    }\\n\\n    function initializeEpochs() internal {\\n        _state.epoch.currentStart = block.timestamp;\\n        _state.epoch.currentPeriod = Constants.getEpochStrategy().offset;\\n    }\\n\\n    function incrementEpoch() internal {\\n        _state.epoch.current = _state.epoch.current.add(1);\\n        _state.epoch.currentStart = _state.epoch.currentStart.add(_state.epoch.currentPeriod);\\n    }\\n\\n    function adjustPeriod(Decimal.D256 memory price) internal {\\n        Decimal.D256 memory normalizedPrice;\\n        if (price.greaterThan(Decimal.one())) \\n            normalizedPrice = Decimal.one().div(price);\\n        else\\n            normalizedPrice = price;\\n        \\n        Constants.EpochStrategy memory epochStrategy = Constants.getEpochStrategy();\\n        \\n        _state.epoch.currentPeriod = normalizedPrice\\n            .mul(epochStrategy.maxPeriod.sub(epochStrategy.minPeriod))\\n            .add(epochStrategy.minPeriod)\\n            .asUint256();\\n    }\\n\\n    function snapshotTotalBonded() internal {\\n        _state.epochs[epoch()].bonded = totalSupply();\\n    }\\n\\n    function expireCoupons(uint256 epoch) internal {\\n        _state.balance.coupons = _state.balance.coupons.sub( _state3.expiringCouponsByEpoch[epoch]);\\n        _state3.expiringCouponsByEpoch[epoch] = 0;\\n    }\\n\\n    /**\\n    * FixedSwap\\n    */\\n\\n    function incrementContributions(uint256 amount) internal {\\n        _state.bootstrapping.contributions = _state.bootstrapping.contributions.add(amount);\\n    }\\n\\n    function decrementContributions(uint256 amount) internal {\\n        _state.bootstrapping.contributions = _state.bootstrapping.contributions.sub(amount);\\n    }\\n\\n    /**\\n     * Governance\\n     */\\n\\n    function createCandidate(address candidate, uint256 period) internal {\\n        _state.candidates[candidate].start = epoch();\\n        _state.candidates[candidate].period = period;\\n    }\\n\\n    function recordVote(address account, address candidate, Candidate.Vote vote) internal {\\n        _state.candidates[candidate].votes[account] = vote;\\n    }\\n\\n    function incrementApproveFor(address candidate, uint256 amount) internal {\\n        _state.candidates[candidate].approve = _state.candidates[candidate].approve.add(amount);\\n    }\\n\\n    function decrementApproveFor(address candidate, uint256 amount, string memory reason) internal {\\n        _state.candidates[candidate].approve = _state.candidates[candidate].approve.sub(amount, reason);\\n    }\\n\\n    function incrementRejectFor(address candidate, uint256 amount) internal {\\n        _state.candidates[candidate].reject = _state.candidates[candidate].reject.add(amount);\\n    }\\n\\n    function decrementRejectFor(address candidate, uint256 amount, string memory reason) internal {\\n        _state.candidates[candidate].reject = _state.candidates[candidate].reject.sub(amount, reason);\\n    }\\n\\n    function placeLock(address account, address candidate) internal {\\n        uint256 currentLock = _state.accounts[account].lockedUntil;\\n        uint256 newLock = startFor(candidate).add(periodFor(candidate));\\n        if (newLock > currentLock) {\\n            _state.accounts[account].lockedUntil = newLock;\\n        }\\n    }\\n\\n    function initialized(address candidate) internal {\\n        _state.candidates[candidate].initialized = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/dao/State.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Daiquilibrium devs, based on the works of the Dynamic Dollar Devs and the Empty Set Squad\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\\nimport \\\"../token/IDollar.sol\\\";\\nimport \\\"../oracle/IOracle.sol\\\";\\nimport \\\"../external/Decimal.sol\\\";\\n\\ncontract Account {\\n    enum Status {\\n        Frozen,\\n        Fluid,\\n        Locked\\n    }\\n\\n    struct State {\\n        uint256 staged;\\n        uint256 balance;\\n        mapping(uint256 => uint256) coupons;\\n        mapping(address => uint256) couponAllowances; //unused since DAIQIP-3\\n        uint256 fluidUntil;\\n        uint256 lockedUntil;\\n    }\\n}\\n\\ncontract Bootstrapping {\\n    struct State {\\n        uint256 contributions;\\n    }\\n}\\n\\ncontract Epoch {\\n    struct Global {\\n        uint256 current;\\n        uint256 currentStart;\\n        uint256 currentPeriod;\\n        uint256 bootstrapping;\\n        uint256 daiAdvanceIncentive;\\n        bool shouldDistributeDAI;\\n    }\\n\\n    struct Coupons {\\n        uint256 outstanding; //unused since DAIQIP-3\\n        uint256 expiration; //unused since DAIQIP-3\\n        uint256[] expiring; //unused since DAIQIP-3\\n    }\\n\\n    struct State {\\n        uint256 bonded;\\n        Coupons coupons; //unused since DAIQIP-3\\n    }\\n}\\n\\ncontract Candidate {\\n    enum Vote {\\n        UNDECIDED,\\n        APPROVE,\\n        REJECT\\n    }\\n\\n    struct State {\\n        uint256 start;\\n        uint256 period;\\n        uint256 approve;\\n        uint256 reject;\\n        mapping(address => Vote) votes;\\n        bool initialized;\\n    }\\n}\\n\\ncontract Storage {\\n    struct Provider {\\n        IDollar dollar;\\n        IOracle oracle;\\n        address pool;\\n    }\\n\\n    struct Balance {\\n        uint256 supply;\\n        uint256 bonded;\\n        uint256 staged;\\n        uint256 redeemable;\\n        uint256 debt;\\n        uint256 coupons;\\n    }\\n\\n    struct State {\\n        Epoch.Global epoch;\\n        Bootstrapping.State bootstrapping;\\n        Balance balance;\\n        Provider provider;\\n\\n        mapping(address => Account.State) accounts;\\n        mapping(uint256 => Epoch.State) epochs;\\n        mapping(address => Candidate.State) candidates;\\n    }\\n\\n    struct State3 {\\n        mapping(address => mapping(uint256 => uint256)) couponExpirationsByAccount;\\n        mapping(uint256 => uint256) expiringCouponsByEpoch;\\n    }\\n}\\n\\ncontract State {\\n    Storage.State _state;\\n\\n    //DAIQIP-3\\n    Storage.State3 _state3;\\n}\\n\"\r\n    },\r\n    \"./contracts/token/IDollar.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Daiquilibrium devs, based on the works of the Dynamic Dollar Devs and the Empty Set Squad\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract IDollar is IERC20 {\\n    function burn(uint256 amount) public;\\n    function burnFrom(address account, uint256 amount) public;\\n    function mint(address account, uint256 amount) public returns (bool);\\n}\\n\"\r\n    },\r\n    \"./contracts/oracle/IOracle.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Daiquilibrium devs, based on the works of the Dynamic Dollar Devs and the Empty Set Squad\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../external/Decimal.sol\\\";\\n\\ncontract IOracle {\\n    function setup() public;\\n    function capture() public returns (Decimal.D256 memory, bool);\\n    function pair() external view returns (address);\\n}\"\r\n    },\r\n    \"./contracts/dao/Getters.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Daiquilibrium devs, based on the works of the Dynamic Dollar Devs and the Empty Set Squad\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./State.sol\\\";\\nimport \\\"../Constants.sol\\\";\\n\\ncontract Getters is State {\\n    using SafeMath for uint256;\\n    using Decimal for Decimal.D256;\\n\\n    bytes32 private constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * ERC20 Interface\\n     */\\n\\n    function name() public view returns (string memory) {\\n        return \\\"DAIQ Stake\\\";\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return \\\"DAIQS\\\";\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return 18;\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _state.accounts[account].balance;\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _state.balance.supply;\\n    }\\n\\n    function allowance(address owner, address spender) external view returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * Global\\n     */\\n\\n    function dollar() public view returns (IDollar) {\\n        return _state.provider.dollar;\\n    }\\n\\n    function oracle() public view returns (IOracle) {\\n        return _state.provider.oracle;\\n    }\\n\\n    function pool() public view returns (address) {\\n        return _state.provider.pool;\\n    }\\n\\n    function dai() public view returns (IERC20) {\\n        return IERC20(Constants.getDAIAddress());\\n    }\\n\\n    function totalBonded() public view returns (uint256) {\\n        return _state.balance.bonded;\\n    }\\n\\n    function totalStaged() public view returns (uint256) {\\n        return _state.balance.staged;\\n    }\\n\\n    function totalDebt() public view returns (uint256) {\\n        return _state.balance.debt;\\n    }\\n\\n    function totalRedeemable() public view returns (uint256) {\\n        return _state.balance.redeemable;\\n    }\\n\\n    function totalCoupons() public view returns (uint256) {\\n        return _state.balance.coupons;\\n    }\\n\\n    function totalNet() public view returns (uint256) {\\n        return dollar().totalSupply().sub(totalDebt());\\n    }\\n\\n    /**\\n     * Account\\n     */\\n\\n    function balanceOfStaged(address account) public view returns (uint256) {\\n        return _state.accounts[account].staged;\\n    }\\n\\n    function balanceOfBonded(address account) public view returns (uint256) {\\n        uint256 totalSupply = totalSupply();\\n        if (totalSupply == 0) {\\n            return 0;\\n        }\\n        return totalBonded().mul(balanceOf(account)).div(totalSupply);\\n    }\\n\\n    function balanceOfCoupons(address account, uint256 _epoch) public view returns (uint256) {\\n        uint256 expiration = couponExpirationForAccount(account, _epoch);\\n        \\n        if (expiration > 0 && epoch() >= expiration) {\\n            return 0;\\n        }\\n\\n        return _state.accounts[account].coupons[_epoch];\\n    }\\n\\n    function couponExpirationForAccount(address account, uint256 epoch) public view returns (uint256) {\\n        return _state3.couponExpirationsByAccount[account][epoch];\\n    }\\n\\n    function statusOf(address account) public view returns (Account.Status) {\\n        //if (_state.accounts[account].lockedUntil > epoch()) {\\n        //    return Account.Status.Locked;\\n        //}\\n\\n        return epoch() >= _state.accounts[account].fluidUntil ? Account.Status.Frozen : Account.Status.Fluid;\\n    }\\n\\n    function allowanceCoupons(address owner, address spender) public view returns (uint256) {\\n        return _state.accounts[owner].couponAllowances[spender];\\n    }\\n\\n    /**\\n    * Epoch\\n    */\\n\\n    function epoch() public view returns (uint256) {\\n        return _state.epoch.current;\\n    }\\n\\n    function epochTime() public view returns (uint256) {\\n        return block.timestamp >= nextEpochStart()\\n            ? epoch().add(1)\\n            : epoch();\\n    }\\n\\n    function timeInEpoch() public view returns (uint256) {\\n        return block.timestamp.sub(_state.epoch.currentStart);\\n    }\\n\\n    function timeLeftInEpoch() public view returns (uint256) {\\n        if (block.timestamp > nextEpochStart()) \\n            return 0;\\n\\n        return nextEpochStart().sub(block.timestamp);\\n    }\\n\\n    function currentEpochDuration() public view returns (uint256) {\\n        return _state.epoch.currentPeriod;\\n    }\\n\\n    function nextEpochStart() public view returns (uint256) {\\n        return _state.epoch.currentStart.add(_state.epoch.currentPeriod);\\n    }\\n\\n    function currentEpochStart() public view returns (uint256) {\\n        return _state.epoch.currentStart;\\n    }\\n\\n    function expiringCoupons(uint256 epoch) public view returns (uint256) {\\n        return _state3.expiringCouponsByEpoch[epoch];\\n    }\\n\\n    function totalBondedAt(uint256 epoch) public view returns (uint256) {\\n        return _state.epochs[epoch].bonded;\\n    }\\n\\n    function bootstrappingPeriod() public view returns (uint256) {\\n        return 0;\\n    }\\n\\n    function bootstrappingAt(uint256 epoch) public view returns (bool) {\\n        return epoch <= bootstrappingPeriod();\\n    }\\n\\n    function daiAdvanceIncentive() public view returns (uint256) {\\n        return _state.epoch.daiAdvanceIncentive;\\n    }\\n\\n    function shouldDistributeDAI() public view returns (bool) {\\n        return _state.epoch.shouldDistributeDAI;\\n    }\\n\\n    /**\\n    * FixedSwap\\n    */\\n\\n    function totalContributions() public view returns (uint256) {\\n        return _state.bootstrapping.contributions;\\n    }\\n\\n    /**\\n     * Governance\\n     */\\n\\n    function recordedVote(address account, address candidate) public view returns (Candidate.Vote) {\\n        return _state.candidates[candidate].votes[account];\\n    }\\n\\n    function startFor(address candidate) public view returns (uint256) {\\n        return _state.candidates[candidate].start;\\n    }\\n\\n    function periodFor(address candidate) public view returns (uint256) {\\n        return _state.candidates[candidate].period;\\n    }\\n\\n    function approveFor(address candidate) public view returns (uint256) {\\n        return _state.candidates[candidate].approve;\\n    }\\n\\n    function rejectFor(address candidate) public view returns (uint256) {\\n        return _state.candidates[candidate].reject;\\n    }\\n\\n    function votesFor(address candidate) public view returns (uint256) {\\n        return approveFor(candidate).add(rejectFor(candidate));\\n    }\\n\\n    function isNominated(address candidate) public view returns (bool) {\\n        return _state.candidates[candidate].start > 0;\\n    }\\n\\n    function isInitialized(address candidate) public view returns (bool) {\\n        return _state.candidates[candidate].initialized;\\n    }\\n\\n    function implementation() public view returns (address impl) {\\n        bytes32 slot = IMPLEMENTATION_SLOT;\\n        assembly {\\n            impl := sload(slot)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/external/Require.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2019 dYdX Trading Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity ^0.5.7;\\n\\n/**\\n * @title Require\\n * @author dYdX\\n *\\n * Stringifies parameters to pretty-print revert messages. Costs more gas than regular require()\\n */\\nlibrary Require {\\n\\n    // ============ Constants ============\\n\\n    uint256 constant ASCII_ZERO = 48; // '0'\\n    uint256 constant ASCII_RELATIVE_ZERO = 87; // 'a' - 10\\n    uint256 constant ASCII_LOWER_EX = 120; // 'x'\\n    bytes2 constant COLON = 0x3a20; // ': '\\n    bytes2 constant COMMA = 0x2c20; // ', '\\n    bytes2 constant LPAREN = 0x203c; // ' <'\\n    byte constant RPAREN = 0x3e; // '>'\\n    uint256 constant FOUR_BIT_MASK = 0xf;\\n\\n    // ============ Library Functions ============\\n\\n    function that(\\n        bool must,\\n        bytes32 file,\\n        bytes32 reason\\n    )\\n    internal\\n    pure\\n    {\\n        if (!must) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        stringifyTruncated(file),\\n                        COLON,\\n                        stringifyTruncated(reason)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    function that(\\n        bool must,\\n        bytes32 file,\\n        bytes32 reason,\\n        uint256 payloadA\\n    )\\n    internal\\n    pure\\n    {\\n        if (!must) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        stringifyTruncated(file),\\n                        COLON,\\n                        stringifyTruncated(reason),\\n                        LPAREN,\\n                        stringify(payloadA),\\n                        RPAREN\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    function that(\\n        bool must,\\n        bytes32 file,\\n        bytes32 reason,\\n        uint256 payloadA,\\n        uint256 payloadB\\n    )\\n    internal\\n    pure\\n    {\\n        if (!must) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        stringifyTruncated(file),\\n                        COLON,\\n                        stringifyTruncated(reason),\\n                        LPAREN,\\n                        stringify(payloadA),\\n                        COMMA,\\n                        stringify(payloadB),\\n                        RPAREN\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    function that(\\n        bool must,\\n        bytes32 file,\\n        bytes32 reason,\\n        address payloadA\\n    )\\n    internal\\n    pure\\n    {\\n        if (!must) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        stringifyTruncated(file),\\n                        COLON,\\n                        stringifyTruncated(reason),\\n                        LPAREN,\\n                        stringify(payloadA),\\n                        RPAREN\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    function that(\\n        bool must,\\n        bytes32 file,\\n        bytes32 reason,\\n        address payloadA,\\n        uint256 payloadB\\n    )\\n    internal\\n    pure\\n    {\\n        if (!must) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        stringifyTruncated(file),\\n                        COLON,\\n                        stringifyTruncated(reason),\\n                        LPAREN,\\n                        stringify(payloadA),\\n                        COMMA,\\n                        stringify(payloadB),\\n                        RPAREN\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    function that(\\n        bool must,\\n        bytes32 file,\\n        bytes32 reason,\\n        address payloadA,\\n        uint256 payloadB,\\n        uint256 payloadC\\n    )\\n    internal\\n    pure\\n    {\\n        if (!must) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        stringifyTruncated(file),\\n                        COLON,\\n                        stringifyTruncated(reason),\\n                        LPAREN,\\n                        stringify(payloadA),\\n                        COMMA,\\n                        stringify(payloadB),\\n                        COMMA,\\n                        stringify(payloadC),\\n                        RPAREN\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    function that(\\n        bool must,\\n        bytes32 file,\\n        bytes32 reason,\\n        bytes32 payloadA\\n    )\\n    internal\\n    pure\\n    {\\n        if (!must) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        stringifyTruncated(file),\\n                        COLON,\\n                        stringifyTruncated(reason),\\n                        LPAREN,\\n                        stringify(payloadA),\\n                        RPAREN\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    function that(\\n        bool must,\\n        bytes32 file,\\n        bytes32 reason,\\n        bytes32 payloadA,\\n        uint256 payloadB,\\n        uint256 payloadC\\n    )\\n    internal\\n    pure\\n    {\\n        if (!must) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        stringifyTruncated(file),\\n                        COLON,\\n                        stringifyTruncated(reason),\\n                        LPAREN,\\n                        stringify(payloadA),\\n                        COMMA,\\n                        stringify(payloadB),\\n                        COMMA,\\n                        stringify(payloadC),\\n                        RPAREN\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    // ============ Private Functions ============\\n\\n    function stringifyTruncated(\\n        bytes32 input\\n    )\\n    private\\n    pure\\n    returns (bytes memory)\\n    {\\n        // put the input bytes into the result\\n        bytes memory result = abi.encodePacked(input);\\n\\n        // determine the length of the input by finding the location of the last non-zero byte\\n        for (uint256 i = 32; i > 0; ) {\\n            // reverse-for-loops with unsigned integer\\n            /* solium-disable-next-line security/no-modify-for-iter-var */\\n            i--;\\n\\n            // find the last non-zero byte in order to determine the length\\n            if (result[i] != 0) {\\n                uint256 length = i + 1;\\n\\n                /* solium-disable-next-line security/no-inline-assembly */\\n                assembly {\\n                    mstore(result, length) // r.length = length;\\n                }\\n\\n                return result;\\n            }\\n        }\\n\\n        // all bytes are zero\\n        return new bytes(0);\\n    }\\n\\n    function stringify(\\n        uint256 input\\n    )\\n    private\\n    pure\\n    returns (bytes memory)\\n    {\\n        if (input == 0) {\\n            return \\\"0\\\";\\n        }\\n\\n        // get the final string length\\n        uint256 j = input;\\n        uint256 length;\\n        while (j != 0) {\\n            length++;\\n            j /= 10;\\n        }\\n\\n        // allocate the string\\n        bytes memory bstr = new bytes(length);\\n\\n        // populate the string starting with the least-significant character\\n        j = input;\\n        for (uint256 i = length; i > 0; ) {\\n            // reverse-for-loops with unsigned integer\\n            /* solium-disable-next-line security/no-modify-for-iter-var */\\n            i--;\\n\\n            // take last decimal digit\\n            bstr[i] = byte(uint8(ASCII_ZERO + (j % 10)));\\n\\n            // remove the last decimal digit\\n            j /= 10;\\n        }\\n\\n        return bstr;\\n    }\\n\\n    function stringify(\\n        address input\\n    )\\n    private\\n    pure\\n    returns (bytes memory)\\n    {\\n        uint256 z = uint256(input);\\n\\n        // addresses are \\\"0x\\\" followed by 20 bytes of data which take up 2 characters each\\n        bytes memory result = new bytes(42);\\n\\n        // populate the result with \\\"0x\\\"\\n        result[0] = byte(uint8(ASCII_ZERO));\\n        result[1] = byte(uint8(ASCII_LOWER_EX));\\n\\n        // for each byte (starting from the lowest byte), populate the result with two characters\\n        for (uint256 i = 0; i < 20; i++) {\\n            // each byte takes two characters\\n            uint256 shift = i * 2;\\n\\n            // populate the least-significant character\\n            result[41 - shift] = char(z & FOUR_BIT_MASK);\\n            z = z >> 4;\\n\\n            // populate the most-significant character\\n            result[40 - shift] = char(z & FOUR_BIT_MASK);\\n            z = z >> 4;\\n        }\\n\\n        return result;\\n    }\\n\\n    function stringify(\\n        bytes32 input\\n    )\\n    private\\n    pure\\n    returns (bytes memory)\\n    {\\n        uint256 z = uint256(input);\\n\\n        // bytes32 are \\\"0x\\\" followed by 32 bytes of data which take up 2 characters each\\n        bytes memory result = new bytes(66);\\n\\n        // populate the result with \\\"0x\\\"\\n        result[0] = byte(uint8(ASCII_ZERO));\\n        result[1] = byte(uint8(ASCII_LOWER_EX));\\n\\n        // for each byte (starting from the lowest byte), populate the result with two characters\\n        for (uint256 i = 0; i < 32; i++) {\\n            // each byte takes two characters\\n            uint256 shift = i * 2;\\n\\n            // populate the least-significant character\\n            result[65 - shift] = char(z & FOUR_BIT_MASK);\\n            z = z >> 4;\\n\\n            // populate the most-significant character\\n            result[64 - shift] = char(z & FOUR_BIT_MASK);\\n            z = z >> 4;\\n        }\\n\\n        return result;\\n    }\\n\\n    function char(\\n        uint256 input\\n    )\\n    private\\n    pure\\n    returns (byte)\\n    {\\n        // return ASCII digit (0-9)\\n        if (input < 10) {\\n            return byte(uint8(input + ASCII_ZERO));\\n        }\\n\\n        // return ASCII letter (a-f)\\n        return byte(uint8(input + ASCII_RELATIVE_ZERO));\\n    }\\n}\"\r\n    },\r\n    \"./contracts/dao/Regulator.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Daiquilibrium devs, based on the works of the Dynamic Dollar Devs and the Empty Set Squad\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./Comptroller.sol\\\";\\nimport \\\"../external/Decimal.sol\\\";\\nimport \\\"../Constants.sol\\\";\\n\\ncontract Regulator is Comptroller {\\n    using SafeMath for uint256;\\n    using Decimal for Decimal.D256;\\n\\n    event SupplyIncrease(uint256 indexed epoch, uint256 epochPeriod, uint256 price, uint256 newRedeemable, uint256 lessDebt, uint256 newBonded);\\n    event SupplyDecrease(uint256 indexed epoch, uint256 epochPeriod, uint256 price, uint256 newDebt);\\n    event SupplyNeutral(uint256 indexed epoch, uint256 epochPeriod);\\n\\n    function step() internal {\\n        Decimal.D256 memory price = oracleCapture();\\n        adjustPeriod(price);\\n\\n        if (price.greaterThan(Decimal.one())) {\\n            setDebtToZero();\\n            growSupply(price);\\n            return;\\n        }\\n\\n        if (price.lessThan(Decimal.one())) {\\n            decrementTotalRedeemable(totalRedeemable(), \\\"Blockchain broke???????\\\");\\n            shrinkSupply(price);\\n            return;\\n        }\\n\\n        emit SupplyNeutral(epoch(), currentEpochDuration());\\n    }\\n\\n    function shrinkSupply(Decimal.D256 memory price) private {\\n        Decimal.D256 memory delta = limit(Decimal.one().sub(price));\\n        uint256 newDebt = delta.mul(totalNet()).asUint256();\\n        increaseDebt(newDebt);\\n\\n        emit SupplyDecrease(epoch(), currentEpochDuration(), price.value, newDebt);\\n        return;\\n    }\\n\\n    function growSupply(Decimal.D256 memory price) private {\\n        Decimal.D256 memory delta = limit(price.sub(Decimal.one()).div(Constants.getSupplyChangeDivisor()));\\n        uint256 newSupply = delta.mul(totalNet()).asUint256();\\n        (uint256 newRedeemable, uint256 lessDebt, uint256 newBonded) = increaseSupply(newSupply);\\n        emit SupplyIncrease(epoch(), currentEpochDuration(), price.value, newRedeemable, lessDebt, newBonded);\\n    }\\n\\n    function limit(Decimal.D256 memory delta) internal view returns (Decimal.D256 memory) {\\n        Decimal.D256 memory supplyChangeLimit = Constants.getSupplyChangeLimit();\\n\\n        return delta.greaterThan(supplyChangeLimit) ? supplyChangeLimit : delta;\\n    }\\n\\n    function oracleCapture() private returns (Decimal.D256 memory) {\\n        (Decimal.D256 memory price, bool valid) = oracle().capture();\\n\\n        if (bootstrappingAt(epoch().sub(1))) {\\n            return Constants.getBootstrappingPrice();\\n        }\\n        if (!valid) {\\n            return Decimal.one();\\n        }\\n\\n        return price;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/dao/Bonding.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Daiquilibrium devs, based on the works of the Dynamic Dollar Devs and the Empty Set Squad\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./Setters.sol\\\";\\nimport \\\"./Permission.sol\\\";\\nimport \\\"../external/Require.sol\\\";\\nimport \\\"../Constants.sol\\\";\\n\\ncontract Bonding is Setters, Permission {\\n    using SafeMath for uint256;\\n\\n    bytes32 private constant FILE = \\\"Bonding\\\";\\n\\n    event Deposit(address indexed account, uint256 value);\\n    event Withdraw(address indexed account, uint256 value);\\n    event Bond(address indexed account, uint256 start, uint256 value, uint256 valueUnderlying);\\n    event Unbond(address indexed account, uint256 start, uint256 value, uint256 valueUnderlying);\\n\\n    function step() internal {\\n        Require.that(\\n            epochTime() > epoch(),\\n            FILE,\\n            \\\"Still current epoch\\\"\\n        );\\n\\n        snapshotTotalBonded();\\n        incrementEpoch();\\n    }\\n\\n    function deposit(uint256 value) external {\\n        Require.that(\\n            value > 0,\\n            FILE,\\n            \\\"Insufficient deposit amount\\\"\\n        );\\n\\n        dollar().transferFrom(msg.sender, address(this), value);\\n        incrementBalanceOfStaged(msg.sender, value);\\n\\n        emit Deposit(msg.sender, value);\\n    }\\n\\n    function withdraw(uint256 value) external onlyFrozenOrLocked(msg.sender) {\\n        dollar().transfer(msg.sender, value);\\n        decrementBalanceOfStaged(msg.sender, value, \\\"Bonding: insufficient staged balance\\\");\\n\\n        emit Withdraw(msg.sender, value);\\n    }\\n\\n    function bond(uint256 value) external onlyFrozenOrFluid(msg.sender) {\\n        unfreeze(msg.sender);\\n\\n        uint256 balance = totalBonded() == 0 ?\\n            value.mul(Constants.getInitialStakeMultiple()) :\\n            value.mul(totalSupply()).div(totalBonded());\\n        incrementBalanceOf(msg.sender, balance);\\n\\n        incrementTotalBonded(value);\\n        decrementBalanceOfStaged(msg.sender, value, \\\"Bonding: insufficient staged balance\\\");\\n\\n        emit Bond(msg.sender, epoch().add(1), balance, value);\\n    }\\n\\n    function unbond(uint256 value) external onlyFrozenOrFluid(msg.sender) {\\n        unfreeze(msg.sender);\\n\\n        uint256 staged = value.mul(balanceOfBonded(msg.sender)).div(balanceOf(msg.sender));\\n        incrementBalanceOfStaged(msg.sender, staged);\\n        decrementTotalBonded(staged, \\\"Bonding: insufficient total bonded\\\");\\n        decrementBalanceOf(msg.sender, value, \\\"Bonding: insufficient balance\\\");\\n\\n        emit Unbond(msg.sender, epoch().add(1), value, staged);\\n    }\\n\\n    function unbondUnderlying(uint256 value) external onlyFrozenOrFluid(msg.sender) {\\n        unfreeze(msg.sender);\\n\\n        uint256 balance = value.mul(totalSupply()).div(totalBonded());\\n        incrementBalanceOfStaged(msg.sender, value);\\n        decrementTotalBonded(value, \\\"Bonding: insufficient total bonded\\\");\\n        decrementBalanceOf(msg.sender, balance, \\\"Bonding: insufficient balance\\\");\\n\\n        emit Unbond(msg.sender, epoch().add(1), balance, value);\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/dao/Permission.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Daiquilibrium devs, based on the works of the Dynamic Dollar Devs and the Empty Set Squad\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Setters.sol\\\";\\nimport \\\"../external/Require.sol\\\";\\n\\ncontract Permission is Setters {\\n\\n    bytes32 private constant FILE = \\\"Permission\\\";\\n\\n    // Can modify account state\\n    modifier onlyFrozenOrFluid(address account) {\\n        Require.that(\\n            statusOf(account) != Account.Status.Locked,\\n            FILE,\\n            \\\"Not frozen or fluid\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    // Can participate in balance-dependant activities\\n    modifier onlyFrozenOrLocked(address account) {\\n        Require.that(\\n            statusOf(account) != Account.Status.Fluid,\\n            FILE,\\n            \\\"Not frozen or locked\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    modifier initializer() {\\n        Require.that(\\n            !isInitialized(implementation()),\\n            FILE,\\n            \\\"Already initialized\\\"\\n        );\\n\\n        initialized(implementation());\\n\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/dao/Govern.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Daiquilibrium devs, based on the works of the Dynamic Dollar Devs and the Empty Set Squad\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./Setters.sol\\\";\\nimport \\\"./Permission.sol\\\";\\nimport \\\"./Upgradeable.sol\\\";\\nimport \\\"../external/Require.sol\\\";\\nimport \\\"../external/Decimal.sol\\\";\\nimport \\\"../Constants.sol\\\";\\n\\ncontract Govern is Setters, Permission, Upgradeable {\\n    using SafeMath for uint256;\\n    using Decimal for Decimal.D256;\\n\\n    bytes32 private constant FILE = \\\"Govern\\\";\\n\\n    event Proposal(address indexed candidate, address indexed account, uint256 indexed start, uint256 period);\\n    event Vote(address indexed account, address indexed candidate, Candidate.Vote vote, uint256 bonded);\\n    event Commit(address indexed account, address indexed candidate);\\n\\n    function vote(address candidate, Candidate.Vote vote) external onlyFrozenOrLocked(msg.sender) {\\n        Require.that(\\n            balanceOf(msg.sender) > 0,\\n            FILE,\\n            \\\"Must have stake\\\"\\n        );\\n\\n        if (!isNominated(candidate)) {\\n            Require.that(\\n                canPropose(msg.sender),\\n                FILE,\\n                \\\"Not enough stake to propose\\\"\\n            );\\n\\n            createCandidate(candidate, Constants.getGovernancePeriod());\\n            emit Proposal(candidate, msg.sender, epoch(), Constants.getGovernancePeriod());\\n        }\\n\\n        Require.that(\\n            epoch() < startFor(candidate).add(periodFor(candidate)),\\n            FILE,\\n            \\\"Ended\\\"\\n        );\\n\\n        uint256 bonded = balanceOf(msg.sender);\\n        Candidate.Vote recordedVote = recordedVote(msg.sender, candidate);\\n        if (vote == recordedVote) {\\n            return;\\n        }\\n\\n        if (recordedVote == Candidate.Vote.REJECT) {\\n            decrementRejectFor(candidate, bonded, \\\"Govern: Insufficient reject\\\");\\n        }\\n        if (recordedVote == Candidate.Vote.APPROVE) {\\n            decrementApproveFor(candidate, bonded, \\\"Govern: Insufficient approve\\\");\\n        }\\n        if (vote == Candidate.Vote.REJECT) {\\n            incrementRejectFor(candidate, bonded);\\n        }\\n        if (vote == Candidate.Vote.APPROVE) {\\n            incrementApproveFor(candidate, bonded);\\n        }\\n\\n        recordVote(msg.sender, candidate, vote);\\n        placeLock(msg.sender, candidate);\\n\\n        emit Vote(msg.sender, candidate, vote, bonded);\\n    }\\n\\n    function commit(address candidate) external {\\n        Require.that(\\n            isNominated(candidate),\\n            FILE,\\n            \\\"Not nominated\\\"\\n        );\\n\\n        uint256 endsAfter = startFor(candidate).add(periodFor(candidate)).sub(1);\\n\\n        Require.that(\\n            epoch() > endsAfter,\\n            FILE,\\n            \\\"Not ended\\\"\\n        );\\n\\n        Require.that(\\n            Decimal.ratio(votesFor(candidate), totalBondedAt(endsAfter)).greaterThan(Constants.getGovernanceQuorum()),\\n            FILE,\\n            \\\"Must have quorom\\\"\\n        );\\n\\n        Require.that(\\n            approveFor(candidate) > rejectFor(candidate),\\n            FILE,\\n            \\\"Not approved\\\"\\n        );\\n\\n        upgradeTo(candidate);\\n\\n        emit Commit(msg.sender, candidate);\\n    }\\n\\n    function emergencyCommit(address candidate) external {\\n        Require.that(\\n            isNominated(candidate),\\n            FILE,\\n            \\\"Not nominated\\\"\\n        );\\n\\n        Require.that(\\n            block.timestamp > currentEpochStart().add(currentEpochDuration().mul(Constants.getGovernanceEmergencyDelay())),\\n            FILE,\\n            \\\"Epoch synced\\\"\\n        );\\n\\n        Require.that(\\n            Decimal.ratio(approveFor(candidate), totalSupply()).greaterThan(Constants.getGovernanceSuperMajority()),\\n            FILE,\\n            \\\"Must have super majority\\\"\\n        );\\n\\n        Require.that(\\n            approveFor(candidate) > rejectFor(candidate),\\n            FILE,\\n            \\\"Not approved\\\"\\n        );\\n\\n        upgradeTo(candidate);\\n\\n        emit Commit(msg.sender, candidate);\\n    }\\n\\n    function canPropose(address account) private view returns (bool) {\\n        if (totalBonded() == 0) {\\n            return false;\\n        }\\n\\n        Decimal.D256 memory stake = Decimal.ratio(balanceOf(account), totalSupply());\\n        return stake.greaterThan(Decimal.ratio(5, 1000)); // 0.5%\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/dao/Upgradeable.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2018-2019 zOS Global Limited\\n    Copyright 2020 Dynamic Dollar Devs, based on the works of the Empty Set Squad\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/utils/Address.sol\\\";\\nimport \\\"./State.sol\\\";\\n\\n/**\\n * Based off of, and designed to interface with, openzeppelin/upgrades package\\n */\\ncontract Upgradeable is State {\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 private constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     * @param implementation Address of the new implementation.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    function initialize() public;\\n\\n    /**\\n     * @dev Upgrades the proxy to a new implementation.\\n     * @param newImplementation Address of the new implementation.\\n     */\\n    function upgradeTo(address newImplementation) internal {\\n        setImplementation(newImplementation);\\n\\n        (bool success, bytes memory reason) = newImplementation.delegatecall(abi.encodeWithSignature(\\\"initialize()\\\"));\\n        require(success, string(reason));\\n\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation address of the proxy.\\n     * @param newImplementation Address of the new implementation.\\n     */\\n    function setImplementation(address newImplementation) private {\\n        require(OpenZeppelinUpgradesAddress.isContract(newImplementation), \\\"Cannot set a proxy implementation to a non-contract address\\\");\\n\\n        bytes32 slot = IMPLEMENTATION_SLOT;\\n\\n        assembly {\\n            sstore(slot, newImplementation)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/dao/Bootstrapper.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./Comptroller.sol\\\";\\nimport \\\"../external/Require.sol\\\";\\n\\ncontract Bootstrapper is Comptroller {\\n\\n    bytes32 private constant FILE = \\\"Bootstrapper\\\";\\n\\n    event Swap(address indexed sender, uint256 amount, uint256 contributions);\\n    event Incentivization(address indexed account, uint256 amount);\\n    event DAIIncentivization(address indexed account, uint256 amount);\\n    event MixedIncentivization(address indexed account, uint256 daiqAmount, uint256 daiAmount);\\n\\n    function step() internal {\\n        if (epoch() == 0) {\\n            uint256 bootstrapInflation = Constants.getBootstrappingPrice().sub(Decimal.one()).div(Constants.getSupplyChangeDivisor()).value;\\n            uint256 supply = dollar().totalSupply().mul(1e18);\\n            uint256 supplyTarget = Constants.getBootstrappingTarget().value;\\n            uint256 epochs = 0;\\n\\n            if (supply > 0)\\n                while(supply < supplyTarget) {\\n                    supply = supply + supply * bootstrapInflation / 1e18;\\n                    epochs ++;\\n                }\\n\\n            setBootstrappingPeriod(epochs > 0 ? epochs - 1 : 0);\\n\\n            uint256 daiIncentive = epochs > 0 ? totalContributions().div(epochs) : Constants.getDaiAdvanceIncentiveCap();\\n            setDAIAdvanceIncentive(\\n                daiIncentive > 0\\n                    ? daiIncentive > Constants.getDaiAdvanceIncentiveCap()\\n                        ? Constants.getDaiAdvanceIncentiveCap()\\n                        : daiIncentive\\n                    : Constants.getAdvanceIncentive()\\n            );\\n\\n            shouldDistributeDAI(true);\\n        }\\n\\n        if (shouldDistributeDAI()) {\\n            uint256 balance = dai().balanceOf(address(this));\\n            uint256 incentive = daiAdvanceIncentive();\\n\\n            if (balance > incentive) {\\n                dai().transfer(msg.sender, incentive);\\n                emit DAIIncentivization(msg.sender, incentive);\\n            }\\n            else {\\n                uint256 daiqIncentive = incentive.sub(balance);\\n                dai().transfer(msg.sender, balance);\\n                mintToAccount(msg.sender, daiqIncentive);\\n                emit MixedIncentivization(msg.sender, daiqIncentive, balance);\\n                \\n                shouldDistributeDAI(false);\\n            }\\n        }\\n        else {\\n            // Mint advance reward to sender\\n            uint256 incentive = Constants.getAdvanceIncentive();\\n            mintToAccount(msg.sender, incentive);\\n            emit Incentivization(msg.sender, incentive);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"./contracts/vault/IImplementation.sol\": {\r\n      \"content\": \"pragma solidity ^0.5;\\n\\ninterface IImplementation {\\n    function transactionExecuted(uint256 transactionId) external;\\n    function transactionFailed(uint256 transactionId) external;\\n}\"\r\n    },\r\n    \"./contracts/vault/IVault.sol\": {\r\n      \"content\": \"pragma solidity ^0.5;\\n\\ninterface IVault {\\n    \\n    function submitTransaction(address destination, uint value, bytes calldata data) external returns (uint);\\n\\n}\"\r\n    },\r\n    \"./contracts/vault/IYearnVault.sol\": {\r\n      \"content\": \"pragma solidity ^0.5;\\n\\ninterface IYearnVault {\\n    function deposit(uint _amount, address recipient) external returns (uint256);\\n    function balanceOf(address arg0) external view returns (uint256);\\n    function pricePerShare() external view returns (uint256);\\n}\"\r\n    },\r\n    \"./contracts/staking/RewardsDistribution.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\n// Inheritance\\nimport \\\"./Owned.sol\\\";\\nimport \\\"./interfaces/IRewardsDistribution.sol\\\";\\n\\n// Libraires\\nimport \\\"./SafeDecimalMath.sol\\\";\\n\\n// Internal references\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IRewardsDistribution.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/source/contracts/rewardsdistribution\\ncontract RewardsDistribution is Owned, IRewardsDistribution {\\n    using SafeMath for uint;\\n    using SafeDecimalMath for uint;\\n\\n    /**\\n     * @notice Authorised address able to call distributeRewards\\n     */\\n    address public authority;\\n\\n    /**\\n     * @notice Address of the Synthetix ProxyERC20\\n     */\\n    address public stakingToken;\\n\\n    /**\\n     * @notice An array of addresses and amounts to send\\n     */\\n    DistributionData[] public distributions;\\n\\n    /**\\n     * @dev _authority maybe the underlying synthetix contract.\\n     * Remember to set the authority on a synthetix upgrade\\n     */\\n    constructor(\\n        address _owner,\\n        address _authority,\\n        address _stakingToken\\n    ) public Owned(_owner) {\\n        authority = _authority;\\n        stakingToken = _stakingToken;\\n    }\\n\\n    // ========== EXTERNAL SETTERS ==========\\n\\n    function setStakingToken(address _stakingToken) external onlyOwner {\\n        stakingToken = _stakingToken;\\n    }\\n\\n    /**\\n     * @notice Set the address of the contract authorised to call distributeRewards()\\n     * @param _authority Address of the authorised calling contract.\\n     */\\n    function setAuthority(address _authority) external onlyOwner {\\n        authority = _authority;\\n    }\\n\\n    // ========== EXTERNAL FUNCTIONS ==========\\n\\n    /**\\n     * @notice Adds a Rewards DistributionData struct to the distributions\\n     * array. Any entries here will be iterated and rewards distributed to\\n     * each address when tokens are sent to this contract and distributeRewards()\\n     * is called by the autority.\\n     * @param destination An address to send rewards tokens too\\n     * @param amount The amount of rewards tokens to send\\n     */\\n    function addRewardDistribution(address destination, uint amount) external onlyOwner returns (bool) {\\n        require(destination != address(0), \\\"Cant add a zero address\\\");\\n        require(amount != 0, \\\"Cant add a zero amount\\\");\\n\\n        DistributionData memory rewardsDistribution = DistributionData(destination, amount);\\n        distributions.push(rewardsDistribution);\\n\\n        emit RewardDistributionAdded(distributions.length - 1, destination, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Deletes a RewardDistribution from the distributions\\n     * so it will no longer be included in the call to distributeRewards()\\n     * @param index The index of the DistributionData to delete\\n     */\\n    function removeRewardDistribution(uint index) external onlyOwner {\\n        require(index <= distributions.length - 1, \\\"index out of bounds\\\");\\n\\n        // shift distributions indexes across\\n        for (uint i = index; i < distributions.length - 1; i++) {\\n            distributions[i] = distributions[i + 1];\\n        }\\n        distributions.length--;\\n\\n        // Since this function must shift all later entries down to fill the\\n        // gap from the one it removed, it could in principle consume an\\n        // unbounded amount of gas. However, the number of entries will\\n        // presumably always be very low.\\n    }\\n\\n    /**\\n     * @notice Edits a RewardDistribution in the distributions array.\\n     * @param index The index of the DistributionData to edit\\n     * @param destination The destination address. Send the same address to keep or different address to change it.\\n     * @param amount The amount of tokens to edit. Send the same number to keep or change the amount of tokens to send.\\n     */\\n    function editRewardDistribution(\\n        uint index,\\n        address destination,\\n        uint amount\\n    ) external onlyOwner returns (bool) {\\n        require(index <= distributions.length - 1, \\\"index out of bounds\\\");\\n\\n        distributions[index].destination = destination;\\n        distributions[index].amount = amount;\\n\\n        return true;\\n    }\\n\\n    function distributeRewards(uint amount) external returns (bool) {\\n        require(amount > 0, \\\"Nothing to distribute\\\");\\n        require(msg.sender == authority, \\\"Caller is not authorised\\\");\\n        require(stakingToken != address(0), \\\"StakingToken is not set\\\");\\n        require(\\n            IERC20(stakingToken).balanceOf(address(this)) >= amount,\\n            \\\"RewardsDistribution contract does not have enough tokens to distribute\\\"\\n        );\\n\\n        uint remainder = amount;\\n\\n        // Iterate the array of distributions sending the configured amounts\\n        for (uint i = 0; i < distributions.length; i++) {\\n            if (distributions[i].destination != address(0) || distributions[i].amount != 0) {\\n                remainder = remainder.sub(distributions[i].amount);\\n\\n                // Transfer the SNX\\n                IERC20(stakingToken).transfer(distributions[i].destination, distributions[i].amount);\\n\\n                // If the contract implements RewardsDistributionRecipient.sol, inform it how many SNX its received.\\n                bytes memory payload = abi.encodeWithSignature(\\\"notifyRewardAmount(uint256)\\\", distributions[i].amount);\\n\\n                // solhint-disable avoid-low-level-calls\\n                (bool success, ) = distributions[i].destination.call(payload);\\n\\n                if (!success) {\\n                    // Note: we're ignoring the return value as it will fail for contracts that do not implement RewardsDistributionRecipient.sol\\n                }\\n            }\\n        }\\n\\n        emit RewardsDistributed(amount);\\n        return true;\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    /**\\n     * @notice Retrieve the length of the distributions array\\n     */\\n    function distributionsLength() external view returns (uint) {\\n        return distributions.length;\\n    }\\n\\n    /* ========== Events ========== */\\n\\n    event RewardDistributionAdded(uint index, address destination, uint amount);\\n    event RewardsDistributed(uint amount);\\n}\\n\"\r\n    },\r\n    \"./contracts/staking/Owned.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.17;\\n\\n// https://docs.synthetix.io/contracts/source/contracts/owned\\ncontract Owned {\\n    address public owner;\\n    address public nominatedOwner;\\n\\n    constructor(address _owner) public {\\n        require(_owner != address(0), \\\"Owner address cannot be 0\\\");\\n        owner = _owner;\\n        emit OwnerChanged(address(0), _owner);\\n    }\\n\\n    function nominateNewOwner(address _owner) external onlyOwner {\\n        nominatedOwner = _owner;\\n        emit OwnerNominated(_owner);\\n    }\\n\\n    function acceptOwnership() external {\\n        require(msg.sender == nominatedOwner, \\\"You must be nominated before you can accept ownership\\\");\\n        emit OwnerChanged(owner, nominatedOwner);\\n        owner = nominatedOwner;\\n        nominatedOwner = address(0);\\n    }\\n\\n    modifier onlyOwner {\\n        _onlyOwner();\\n        _;\\n    }\\n\\n    function _onlyOwner() private view {\\n        require(msg.sender == owner, \\\"Only the contract owner may perform this action\\\");\\n    }\\n\\n    event OwnerNominated(address newOwner);\\n    event OwnerChanged(address oldOwner, address newOwner);\\n}\\n\"\r\n    },\r\n    \"./contracts/staking/interfaces/IRewardsDistribution.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24;\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/irewardsdistribution\\ninterface IRewardsDistribution {\\n    // Structs\\n    struct DistributionData {\\n        address destination;\\n        uint amount;\\n    }\\n\\n    // Views\\n    function authority() external view returns (address);\\n\\n    function distributions(uint index) external view returns (address destination, uint amount); // DistributionData\\n\\n    function distributionsLength() external view returns (uint);\\n\\n    // Mutative Functions\\n    function distributeRewards(uint amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"./contracts/staking/SafeDecimalMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.17;\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/source/libraries/safedecimalmath\\nlibrary SafeDecimalMath {\\n    using SafeMath for uint;\\n\\n    /* Number of decimal places in the representations. */\\n    uint8 public constant decimals = 18;\\n    uint8 public constant highPrecisionDecimals = 27;\\n\\n    /* The number representing 1.0. */\\n    uint public constant UNIT = 10**uint(decimals);\\n\\n    /* The number representing 1.0 for higher fidelity numbers. */\\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\\n\\n    /**\\n     * @return Provides an interface to UNIT.\\n     */\\n    function unit() external pure returns (uint) {\\n        return UNIT;\\n    }\\n\\n    /**\\n     * @return Provides an interface to PRECISE_UNIT.\\n     */\\n    function preciseUnit() external pure returns (uint) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\\n     * decimals.\\n     *\\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\\n     * so that product must be less than 2**256. As this is an integer division,\\n     * the internal division always rounds down. This helps save on gas. Rounding\\n     * is more expensive on gas.\\n     */\\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return x.mul(y) / UNIT;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of the specified precision unit.\\n     *\\n     * @dev The operands should be in the form of a the specified unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function _multiplyDecimalRound(\\n        uint x,\\n        uint y,\\n        uint precisionUnit\\n    ) private pure returns (uint) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a precise unit.\\n     *\\n     * @dev The operands should be in the precise unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a standard unit.\\n     *\\n     * @dev The operands should be in the standard unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\\n        return _multiplyDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is a high\\n     * precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\\n     * this is an integer division, the result is always rounded down.\\n     * This helps save on gas. Rounding is more expensive on gas.\\n     */\\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return x.mul(UNIT).div(y);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * decimal in the precision unit specified in the parameter.\\n     *\\n     * @dev y is divided after the product of x and the specified precision unit\\n     * is evaluated, so the product of x and the specified precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function _divideDecimalRound(\\n        uint x,\\n        uint y,\\n        uint precisionUnit\\n    ) private pure returns (uint) {\\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\\n\\n        if (resultTimesTen % 10 >= 5) {\\n            resultTimesTen += 10;\\n        }\\n\\n        return resultTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * standard precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and the standard precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\\n        return _divideDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * high precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the high precision unit\\n     * is evaluated, so the product of x and the high precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Convert a standard decimal representation to a high precision one.\\n     */\\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\\n    }\\n\\n    /**\\n     * @dev Convert a high precision decimal to a standard decimal representation.\\n     */\\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n\\n    // Computes `a - b`, setting the value to 0 if b > a.\\n    function floorsub(uint a, uint b) internal pure returns (uint) {\\n        return b >= a ? 0 : a - b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * Utility library of inline functions on addresses\\n *\\n * Source https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-solidity/v2.1.3/contracts/utils/Address.sol\\n * This contract is copied here and renamed from the original to avoid clashes in the compiled artifacts\\n * when the user imports a zos-lib contract (that transitively causes this contract to be compiled and added to the\\n * build/artifacts folder) as well as the vanilla Address implementation from an openzeppelin version.\\n */\\nlibrary OpenZeppelinUpgradesAddress {\\n    /**\\n     * Returns whether the target address is a contract\\n     * @dev This function will return false if invoked during the constructor of a contract,\\n     * as the code is not actually created until after the constructor finishes.\\n     * @param account address of the account to check\\n     * @return whether the target address is a contract\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        // XXX Currently there is no better way to check if there is a contract in an address\\n        // than to check the size of the code at that address.\\n        // See https://ethereum.stackexchange.com/a/14016/36603\\n        // for more details about how this works.\\n        // TODO Check this again before the Serenity release, because all addresses will be\\n        // contracts then.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Advance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueUnderlying\",\"type\":\"uint256\"}],\"name\":\"Bond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"Commit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CouponApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"couponAmount\",\"type\":\"uint256\"}],\"name\":\"CouponBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"couponsExpired\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lessRedeemable\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lessDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBonded\",\"type\":\"uint256\"}],\"name\":\"CouponExpiration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dollarAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"couponAmount\",\"type\":\"uint256\"}],\"name\":\"CouponPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"couponAmount\",\"type\":\"uint256\"}],\"name\":\"CouponRedemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CouponTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DAIIncentivization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Incentivization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiqAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiAmount\",\"type\":\"uint256\"}],\"name\":\"MixedIncentivization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"Proposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDebt\",\"type\":\"uint256\"}],\"name\":\"SupplyDecrease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRedeemable\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lessDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBonded\",\"type\":\"uint256\"}],\"name\":\"SupplyIncrease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochPeriod\",\"type\":\"uint256\"}],\"name\":\"SupplyNeutral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contributions\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueUnderlying\",\"type\":\"uint256\"}],\"name\":\"Unbond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum Candidate.Vote\",\"name\":\"vote\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonded\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationPeriod\",\"type\":\"uint256\"}],\"name\":\"additionalCouponPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"advance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowanceCoupons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"approveFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfBonded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"balanceOfCoupons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfStaged\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"baseCouponPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"bond\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"bootstrappingAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bootstrappingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"couponExpirationForAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationPeriod\",\"type\":\"uint256\"}],\"name\":\"couponPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"couponEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"couponAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationPeriod\",\"type\":\"uint256\"}],\"name\":\"couponRedemptionPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentEpochDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentEpochStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daiAdvanceIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dollar\",\"outputs\":[{\"internalType\":\"contract IDollar\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"emergencyCommit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"epochTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"expiringCoupons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"isNominated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextEpochStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"periodFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dollarAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationPeriod\",\"type\":\"uint256\"}],\"name\":\"purchaseCoupons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"recordedVote\",\"outputs\":[{\"internalType\":\"enum Candidate.Vote\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"couponEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"couponAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutput\",\"type\":\"uint256\"}],\"name\":\"redeemCoupons\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"couponEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"couponAmount\",\"type\":\"uint256\"}],\"name\":\"redeemCoupons\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"rejectFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shouldDistributeDAI\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"startFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"statusOf\",\"outputs\":[{\"internalType\":\"enum Account.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeInEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeLeftInEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBonded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"totalBondedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalContributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCoupons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalNet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRedeemable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStaged\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"transactionExecuted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"transactionFailed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"unbond\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"unbondUnderlying\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationPeriod\",\"type\":\"uint256\"}],\"name\":\"updateCoupons\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"internalType\":\"enum Candidate.Vote\",\"name\":\"vote\",\"type\":\"uint8\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"votesFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Implementation","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://fadced1680e9dcba050fbf6ce1dff3f7eddd701449747fdad11ff6ffb3706a26"}]}