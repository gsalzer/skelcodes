{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.7.6;\r\n\r\ncontract UpkeepPerformCounterRestrictive {\r\n    event PerformingUpkeep (\r\n        bool eligible,\r\n        address from,\r\n        uint256 initialCall,\r\n        uint256 nextEligible,\r\n        uint256 blockNumber\r\n    );\r\n  uint256 public initialCall = 0;\r\n  uint256 public nextEligible = 0;\r\n  uint256 public testRange;\r\n  uint256 public averageEligibilityCadence;\r\n  uint256 count = 0;\r\n  constructor(uint256 _testRange, uint256 _averageEligibilityCadence) {\r\n    testRange = _testRange;\r\n    averageEligibilityCadence = _averageEligibilityCadence;\r\n  }\r\n  function checkUpkeep(bytes calldata data) external returns (bool, bytes memory) {\r\n    return (eligible(), bytes(\"\"));\r\n  }\r\n  function performUpkeep(bytes calldata data) external {\r\n    bool eligible = eligible();\r\n    uint256 blockNum = block.number;\r\n    emit PerformingUpkeep(eligible, tx.origin, initialCall, nextEligible, blockNum);\r\n    require(eligible);\r\n    if (initialCall == 0) {\r\n      initialCall = blockNum;\r\n    }\r\n    nextEligible = (blockNum + rand() % (averageEligibilityCadence * 2)) + 1;\r\n    count++;\r\n  }\r\n  function getCountPerforms() view public returns(uint256) {\r\n    return count;\r\n  }\r\n  function eligible() view internal returns(bool) {\r\n    return initialCall == 0 ||\r\n      (\r\n        block.number - initialCall < testRange &&\r\n        block.number > nextEligible\r\n      );\r\n  }\r\n  function checkEligible() view public returns(bool) {\r\n    return eligible();\r\n  }\r\n  function reset() external {\r\n      initialCall = 0;\r\n      count = 0;\r\n  }\r\n  function setSpread(uint _newTestRange, uint _newAverageEligibilityCadence) external {\r\n    testRange = _newTestRange;\r\n    averageEligibilityCadence = _newAverageEligibilityCadence;\r\n  }\r\n  function rand() private view returns (uint256) {\r\n    return uint256(keccak256(abi.encode(blockhash(block.number - 1), address(this))));\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_testRange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_averageEligibilityCadence\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"eligible\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialCall\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextEligible\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"PerformingUpkeep\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"averageEligibilityCadence\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCountPerforms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEligible\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTestRange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newAverageEligibilityCadence\",\"type\":\"uint256\"}],\"name\":\"setSpread\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"UpkeepPerformCounterRestrictive","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000004650000000000000000000000000000000000000000000000000000000000000003c","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://dff664a92e9755d886443903fdeb6637345db0c67b9cb20a061ef7c20eba85a9"}]}