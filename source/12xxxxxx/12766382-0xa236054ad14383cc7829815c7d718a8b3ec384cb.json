{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nhttps://t.me/thexofficial\r\nhttps://thex.world\r\nhttps://twitter.com/TheXToken\r\n*/\r\n\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context \r\n{\r\n    address private _owner;\r\n    address internal _creator;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        _creator = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n}\r\n\r\ncontract THEX is Context, IERC20, Ownable \r\n{\r\n    using SafeMath for uint256;\r\n    string private constant _name = \"The X Token\";\r\n    string private constant _symbol = \"TheX\";\r\n    uint8 private constant _decimals = 9;\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _pairings;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant _tTotal = 1000000000000 * 10**9;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n    uint256 private _fee = 5;\r\n    mapping(address => uint256) private _tradecooldown; // trade-wide to prevent malicious disruption of bidding process\r\n    address private _topRank;\r\n    uint256 private _topScore;\r\n    bool private _awarded;\r\n    address payable private _liquidity;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen = false;\r\n    bool private liquidityAdded = false;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n    uint256 private _transactionLimit = _tTotal;\r\n\r\n    event AuctionAward(address indexed winner, uint256 value);\r\n    \r\n    constructor(address payable addr) \r\n    {\r\n        _liquidity = addr;\r\n        _rOwned[address(this)] = _rTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) \r\n    {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) \r\n    {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) \r\n    {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) \r\n    {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) \r\n    {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function TopRankScore() public view returns (uint256) \r\n    {\r\n        return _topScore;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) \r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) \r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) \r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) \r\n    {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,\"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function addPairing(address addr) external\r\n    {\r\n        require(_msgSender() == _creator, \"Trade pairings can only be added by contract creator\");\r\n        _pairings[addr] = true;\r\n    }\r\n        \r\n    function addLiquidity() external onlyOwner() \r\n    {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        swapEnabled = true;\r\n        liquidityAdded = true;\r\n        _transactionLimit = 5000000000 * 10**9; //0.5%\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router),type(uint256).max);\r\n        _pairings[uniswapV2Pair] = true;\r\n    }\r\n    \r\n    function openTrading() public onlyOwner \r\n    {\r\n        require(liquidityAdded);\r\n        tradingOpen = true;\r\n    }\r\n    \r\n    function tokenFromReflection(uint256 rAmount) private view returns (uint256) \r\n    {\r\n        require(rAmount <= _rTotal,\"Amount must be less than total reflections\");\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n    \r\n    function _approve(address owner, address spender, uint256 amount) private \r\n    {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function _transfer(address from, address to, uint256 amount) private \r\n    {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to] || inSwap)\r\n        {\r\n            uint256 rate = _getRate();\r\n            _rOwned[from] = _rOwned[from].sub(amount.mul(rate));\r\n            _rOwned[to] = _rOwned[to].add(amount.mul(rate));\r\n            emit Transfer(from, to, amount);\r\n        }\r\n        else\r\n        {\r\n            if (_pairings[from] && to != address(uniswapV2Router)) \r\n            {\r\n                require(tradingOpen);\r\n                require(amount <= _transactionLimit);\r\n                require(_tradecooldown[to] < block.timestamp);\r\n                _tradecooldown[to] = block.timestamp + (60 seconds);\r\n                \r\n                if (_awarded || amount > _topScore)\r\n                {// check auction state\r\n                    _topRank = to;\r\n                    _topScore = amount;\r\n                    _awarded = false;\r\n                }\r\n            }\r\n            uint256 award = 0;\r\n            if (!_pairings[from] && swapEnabled) \r\n            {\r\n                require(amount <= balanceOf(uniswapV2Pair).mul(3).div(100) && amount <= _transactionLimit, \"TheX: price impact too high\");\r\n                require(_tradecooldown[from] < block.timestamp);\r\n                \r\n                _convertFeeToLiqAddr();\r\n\r\n                _tradecooldown[from] = block.timestamp + (10 minutes);\r\n                \r\n                if (_topRank != address(0) && _topRank != from)\r\n                {// we have a valid bidder\r\n                    award = amount.mul(_fee).div(100);\r\n                    _awarded = true;\r\n                }\r\n            }\r\n            _tokenTransfer(from, to, amount, award);\r\n        }\r\n    }\r\n    function _convertFeeToLiqAddr() private\r\n    {\r\n        uint256 bal = balanceOf(address(this));\r\n        uint256 pool = balanceOf(uniswapV2Pair);\r\n        if (bal > pool.mul(3).div(100))\r\n            bal = pool.mul(2).div(100);\r\n        if (bal > pool.div(500))\r\n        {\r\n          inSwap = true;\r\n          address[] memory path = new address[](2);\r\n          path[0] = address(this);\r\n          path[1] = uniswapV2Router.WETH();\r\n          _approve(address(this), address(uniswapV2Router), bal);\r\n          uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(bal, 0, path, address(this), block.timestamp);\r\n          uint256 contractETHBalance = address(this).balance;\r\n          if (contractETHBalance > 0) \r\n              _liquidity.transfer(contractETHBalance);\r\n          inSwap = false;\r\n        }\r\n    }\r\n    function _tokenTransfer(address from, address to, uint256 amount, uint256 award) private \r\n    {\r\n        uint256 rate = _getRate();\r\n        \r\n        _rOwned[from] =_rOwned[from].sub(amount.mul(rate));\r\n        uint256 rfee = amount.mul(rate).mul(_fee).div(100);\r\n        _rOwned[to] = _rOwned[to].add(amount.mul(rate).sub(rfee).sub(rfee).sub(award.mul(rate)));\r\n        if (award > 0 && _topRank != address(0))\r\n        {\r\n            _rOwned[_topRank] = _rOwned[_topRank].add(award.mul(rate));\r\n        }\r\n        _reflectFee(rfee, amount.mul(_fee).div(100));\r\n        if (award > 0 && _topRank != address(0))\r\n        {\r\n            emit Transfer(from, _topRank, award);\r\n            emit AuctionAward(_topRank, award);\r\n        }\r\n        emit Transfer(from, to, amount.mul(50 - _fee).div(50).sub(award));\r\n    }\r\n    \r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\r\n        require(maxTxPercent > 0, \"Amount must be greater than 0\");\r\n        _transactionLimit = _tTotal.mul(maxTxPercent).div(10**2);\r\n    }\r\n    \r\n    function _reflectFee(uint256 rFee, uint256 tFee) private\r\n    {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rFee);\r\n    }\r\n    function manualswap() external {\r\n        require(_msgSender() == _liquidity);\r\n        inSwap = true;\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), contractBalance);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(contractBalance, 0, path, address(this), block.timestamp);\r\n        inSwap = false;\r\n    }\r\n\r\n    function manualsend() external {\r\n        require(_msgSender() == _liquidity);\r\n        uint256 contractETHBalance = address(this).balance;\r\n        _liquidity.transfer(contractETHBalance);\r\n    }\r\n    receive() external payable {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AuctionAward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TopRankScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addPairing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"THEX","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004c00f38d73a1d48e5fd246a45e2175b3ad6b3c04","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f50afd2c73e47bd1db4916c6df0220e42f31571eaac64db9793505b947d7be0a"}]}