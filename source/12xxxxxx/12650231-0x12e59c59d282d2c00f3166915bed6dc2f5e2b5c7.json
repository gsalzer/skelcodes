{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IArbitraryMessageBridge {\r\n    function messageSender() external view returns (address);\r\n    function maxGasPerTx() external view returns (uint256);\r\n    function transactionHash() external view returns (bytes32);\r\n    function messageId() external view returns (bytes32);\r\n    function messageSourceChainId() external view returns (bytes32);\r\n    function messageCallStatus(bytes32 _messageId) external view returns (bool);\r\n    function failedMessageDataHash(bytes32 _messageId) external view returns (bytes32);\r\n    function failedMessageReceiver(bytes32 _messageId) external view returns (address);\r\n    function failedMessageSender(bytes32 _messageId) external view returns (address);\r\n    function requireToPassMessage(address _contract, bytes memory _data, uint256 _gas) external returns (bytes32);\r\n}\r\n\r\ninterface IMessengerWrapper {\r\n    function sendCrossDomainMessage(bytes memory _calldata) external;\r\n    function verifySender(address l1BridgeCaller, bytes memory _data) external;\r\n}\r\n\r\nabstract contract MessengerWrapper is IMessengerWrapper {\r\n    address public immutable l1BridgeAddress;\r\n\r\n    constructor(address _l1BridgeAddress) internal {\r\n        l1BridgeAddress = _l1BridgeAddress;\r\n    }\r\n\r\n    modifier onlyL1Bridge {\r\n        require(msg.sender == l1BridgeAddress, \"MW: Sender must be the L1 Bridge\");\r\n        _;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev A MessengerWrapper for xDai - https://www.xdaichain.com/ (also see https://docs.tokenbridge.net/)\r\n * @notice Deployed on layer-1\r\n */\r\n\r\ncontract XDaiMessengerWrapper is MessengerWrapper {\r\n\r\n    IArbitraryMessageBridge public l1MessengerAddress;\r\n    /// @notice The xDai AMB uses bytes32 for chainId instead of uint256\r\n    bytes32 public l2ChainId;\r\n    address public ambBridge;\r\n    address public immutable l2BridgeAddress;\r\n    uint256 public immutable defaultGasLimit;\r\n\r\n    constructor(\r\n        address _l1BridgeAddress,\r\n        address _l2BridgeAddress,\r\n        IArbitraryMessageBridge _l1MessengerAddress,\r\n        uint256 _defaultGasLimit,\r\n        uint256 _l2ChainId,\r\n        address _ambBridge\r\n    )\r\n        public\r\n        MessengerWrapper(_l1BridgeAddress)\r\n    {\r\n        l2BridgeAddress = _l2BridgeAddress;\r\n        l1MessengerAddress = _l1MessengerAddress;\r\n        defaultGasLimit = _defaultGasLimit;\r\n        l2ChainId = bytes32(_l2ChainId);\r\n        ambBridge = _ambBridge;\r\n    }\r\n\r\n    /**\r\n     * @dev Sends a message to the l2BridgeAddress from layer-1\r\n     * @param _calldata The data that l2BridgeAddress will be called with\r\n     */\r\n    function sendCrossDomainMessage(bytes memory _calldata) public override onlyL1Bridge {\r\n        l1MessengerAddress.requireToPassMessage(\r\n            l2BridgeAddress,\r\n            _calldata,\r\n            defaultGasLimit\r\n        );\r\n    }\r\n\r\n    /// @notice message data is not needed for message verification with the xDai AMB\r\n    function verifySender(address l1BridgeCaller, bytes memory) public override {\r\n        require(l1MessengerAddress.messageSender() == l2BridgeAddress, \"L2_XDAI_BRG: Invalid cross-domain sender\");\r\n        require(l1BridgeCaller == ambBridge, \"L2_XDAI_BRG: Caller is not the expected sender\");\r\n\r\n        // With the xDai AMB, it is best practice to also check the source chainId\r\n        // https://docs.tokenbridge.net/amb-bridge/how-to-develop-xchain-apps-by-amb#receive-a-method-call-from-the-amb-bridge\r\n        require(l1MessengerAddress.messageSourceChainId() == l2ChainId, \"L2_XDAI_BRG: Invalid source Chain ID\");\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1BridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2BridgeAddress\",\"type\":\"address\"},{\"internalType\":\"contract IArbitraryMessageBridge\",\"name\":\"_l1MessengerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_defaultGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_l2ChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ambBridge\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ambBridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1BridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1MessengerAddress\",\"outputs\":[{\"internalType\":\"contract IArbitraryMessageBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2BridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2ChainId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"sendCrossDomainMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1BridgeCaller\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"verifySender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"XDaiMessengerWrapper","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"50000","ConstructorArguments":"0000000000000000000000003666f603cc164936c1b87e207f36beba4ac5f18a00000000000000000000000025d8039bb044dc227f741a9e381ca4ceae2e6ae80000000000000000000000004c36d2919e407f0cc2ee3c993ccf8ac26d9ce64e00000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000640000000000000000000000004c36d2919e407f0cc2ee3c993ccf8ac26d9ce64e","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9ba34c69c3a16414a15e55660de73a7d3861a5ad5352b1ad698466ea9b945382"}]}