{"status":"1","message":"OK","result":[{"SourceCode":"// This contract was copied from https://github.com/OpenZeppelin/openzeppelin-contracts/\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n* @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n* checks.\r\n*\r\n* Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n* in bugs, because programmers usually assume that an overflow raises an\r\n* error, which is the standard behavior in high level programming languages.\r\n* `SafeMath` restores this intuition by reverting the transaction when an\r\n* operation overflows.\r\n*\r\n* Using this library instead of the unchecked operations eliminates an entire\r\n* class of bugs, so it's recommended to use it always.\r\n*/\r\nlibrary SafeMath {\r\n   /**\r\n    * @dev Returns the addition of two unsigned integers, reverting on\r\n    * overflow.\r\n    *\r\n    * Counterpart to Solidity's `+` operator.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - Addition cannot overflow.\r\n    */\r\n   function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       uint256 c = a + b;\r\n       require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n       return c;\r\n   }\r\n\r\n   /**\r\n    * @dev Returns the subtraction of two unsigned integers, reverting on\r\n    * overflow (when the result is negative).\r\n    *\r\n    * Counterpart to Solidity's `-` operator.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - Subtraction cannot overflow.\r\n    */\r\n   function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       return sub(a, b, \"SafeMath: subtraction overflow\");\r\n   }\r\n\r\n   /**\r\n    * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n    * overflow (when the result is negative).\r\n    *\r\n    * Counterpart to Solidity's `-` operator.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - Subtraction cannot overflow.\r\n    */\r\n   function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n       require(b <= a, errorMessage);\r\n       uint256 c = a - b;\r\n\r\n       return c;\r\n   }\r\n\r\n   /**\r\n    * @dev Returns the multiplication of two unsigned integers, reverting on\r\n    * overflow.\r\n    *\r\n    * Counterpart to Solidity's `*` operator.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - Multiplication cannot overflow.\r\n    */\r\n   function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n       // benefit is lost if 'b' is also tested.\r\n       // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n       if (a == 0) {\r\n           return 0;\r\n       }\r\n\r\n       uint256 c = a * b;\r\n       require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n       return c;\r\n   }\r\n\r\n   /**\r\n    * @dev Returns the integer division of two unsigned integers. Reverts on\r\n    * division by zero. The result is rounded towards zero.\r\n    *\r\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n    * uses an invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - The divisor cannot be zero.\r\n    */\r\n   function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       return div(a, b, \"SafeMath: division by zero\");\r\n   }\r\n\r\n   /**\r\n    * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n    * division by zero. The result is rounded towards zero.\r\n    *\r\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n    * uses an invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - The divisor cannot be zero.\r\n    */\r\n   function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n       require(b > 0, errorMessage);\r\n       uint256 c = a / b;\r\n       // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n       return c;\r\n   }\r\n\r\n   /**\r\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n    * Reverts when dividing by zero.\r\n    *\r\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n    * invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - The divisor cannot be zero.\r\n    */\r\n   function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       return mod(a, b, \"SafeMath: modulo by zero\");\r\n   }\r\n\r\n   /**\r\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n    * Reverts with custom message when dividing by zero.\r\n    *\r\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n    * invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - The divisor cannot be zero.\r\n    */\r\n   function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n       require(b != 0, errorMessage);\r\n       return a % b;\r\n   }\r\n}\r\n// This contract was copied from https://github.com/OpenZeppelin/openzeppelin-contracts/\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Interface of the ERC20 standard as defined in the EIP.\r\n*/\r\ninterface IERC20 {\r\n   /**\r\n    * @dev Returns the amount of tokens in existence.\r\n    */\r\n   function totalSupply() external view returns (uint256);\r\n\r\n   /**\r\n    * @dev Returns the amount of tokens owned by `account`.\r\n    */\r\n   function balanceOf(address account) external view returns (uint256);\r\n\r\n   /**\r\n    * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n    *\r\n    * Returns a boolean value indicating whether the operation succeeded.\r\n    *\r\n    * Emits a {Transfer} event.\r\n    */\r\n   function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n   /**\r\n    * @dev Returns the remaining number of tokens that `spender` will be\r\n    * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n    * zero by default.\r\n    *\r\n    * This value changes when {approve} or {transferFrom} are called.\r\n    */\r\n   function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n   /**\r\n    * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n    *\r\n    * Returns a boolean value indicating whether the operation succeeded.\r\n    *\r\n    * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n    * that someone may use both the old and the new allowance by unfortunate\r\n    * transaction ordering. One possible solution to mitigate this race\r\n    * condition is to first reduce the spender's allowance to 0 and set the\r\n    * desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    *\r\n    * Emits an {Approval} event.\r\n    */\r\n   function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n   /**\r\n    * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n    * allowance mechanism. `amount` is then deducted from the caller's\r\n    * allowance.\r\n    *\r\n    * Returns a boolean value indicating whether the operation succeeded.\r\n    *\r\n    * Emits a {Transfer} event.\r\n    */\r\n   function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n   /**\r\n    * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n    * another (`to`).\r\n    *\r\n    * Note that `value` may be zero.\r\n    */\r\n   event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n   /**\r\n    * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n    * a call to {approve}. `value` is the new allowance.\r\n    */\r\n   event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n// This contract was copied from https://github.com/OpenZeppelin/openzeppelin-contracts/\r\n\r\n\r\n\r\n\r\n/*\r\n* @dev Provides information about the current execution context, including the\r\n* sender of the transaction and its data. While these are generally available\r\n* via msg.sender and msg.data, they should not be accessed in such a direct\r\n* manner, since when dealing with GSN meta-transactions the account sending and\r\n* paying for execution may not be the actual sender (as far as an application\r\n* is concerned).\r\n*\r\n* This contract is only required for intermediate, library-like contracts.\r\n*/\r\nabstract contract Context {\r\n   function _msgSender() internal view virtual returns (address payable) {\r\n       return msg.sender;\r\n   }\r\n\r\n   function _msgData() internal view virtual returns (bytes memory) {\r\n       this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n       return msg.data;\r\n   }\r\n}\r\n// Copyright (c) 2019-2020 revolutionpopuli.com\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n\r\n\r\n\r\n\r\n// This contract was copied from https://github.com/OpenZeppelin/openzeppelin-contracts/\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Contract module which provides a basic access control mechanism, where\r\n* there is an account (an owner) that can be granted exclusive access to\r\n* specific functions.\r\n*\r\n* By default, the owner account will be the one that deploys the contract. This\r\n* can later be changed with {transferOwnership}.\r\n*\r\n* This module is used through inheritance. It will make available the modifier\r\n* `onlyOwner`, which can be applied to your functions to restrict their use to\r\n* the owner.\r\n*/\r\nabstract contract Ownable is Context {\r\n   address private _owner;\r\n\r\n   event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n   /**\r\n    * @dev Initializes the contract setting the deployer as the initial owner.\r\n    */\r\n   constructor () internal {\r\n       address msgSender = _msgSender();\r\n       _owner = msgSender;\r\n       emit OwnershipTransferred(address(0), msgSender);\r\n   }\r\n\r\n   /**\r\n    * @dev Returns the address of the current owner.\r\n    */\r\n   function owner() public view returns (address) {\r\n       return _owner;\r\n   }\r\n\r\n   /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n   modifier onlyOwner() {\r\n       require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n       _;\r\n   }\r\n\r\n   /**\r\n    * @dev Leaves the contract without owner. It will not be possible to call\r\n    * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n    *\r\n    * NOTE: Renouncing ownership will leave the contract without an owner,\r\n    * thereby removing any functionality that is only available to the owner.\r\n    */\r\n   function renounceOwnership() public virtual onlyOwner {\r\n       emit OwnershipTransferred(_owner, address(0));\r\n       _owner = address(0);\r\n   }\r\n\r\n   /**\r\n    * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n    * Can only be called by the current owner.\r\n    */\r\n   function transferOwnership(address newOwner) public virtual onlyOwner {\r\n       require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n       emit OwnershipTransferred(_owner, newOwner);\r\n       _owner = newOwner;\r\n   }\r\n}\r\n\r\n// Copyright (c) 2019-2020 revolutionpopuli.com\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n\r\n\r\n\r\n\r\n// This contract was copied from https://github.com/OpenZeppelin/openzeppelin-contracts/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Implementation of the {IERC20} interface.\r\n*\r\n* This implementation is agnostic to the way tokens are created. This means\r\n* that a supply mechanism has to be added in a derived contract using {_mint}.\r\n* For a generic mechanism see {ERC20PresetMinterPauser}.\r\n*\r\n* TIP: For a detailed writeup see our guide\r\n* https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n* to implement supply mechanisms].\r\n*\r\n* We have followed general OpenZeppelin guidelines: functions revert instead\r\n* of returning `false` on failure. This behavior is nonetheless conventional\r\n* and does not conflict with the expectations of ERC20 applications.\r\n*\r\n* Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n* This allows applications to reconstruct the allowance for all accounts just\r\n* by listening to said events. Other implementations of the EIP may not emit\r\n* these events, as it isn't required by the specification.\r\n*\r\n* Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n* functions have been added to mitigate the well-known issues around setting\r\n* allowances. See {IERC20-approve}.\r\n*/\r\ncontract ERC20 is Context, IERC20 {\r\n   using SafeMath for uint256;\r\n\r\n   mapping (address => uint256) private _balances;\r\n\r\n   mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n   uint256 private _totalSupply;\r\n\r\n   string private _name;\r\n   string private _symbol;\r\n   uint8 private _decimals;\r\n\r\n   /**\r\n    * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n    * a default value of 18.\r\n    *\r\n    * To select a different value for {decimals}, use {_setupDecimals}.\r\n    *\r\n    * All three of these values are immutable: they can only be set once during\r\n    * construction.\r\n    */\r\n   constructor (string memory name_, string memory symbol_) public {\r\n       _name = name_;\r\n       _symbol = symbol_;\r\n       _decimals = 18;\r\n   }\r\n\r\n   /**\r\n    * @dev Returns the name of the token.\r\n    */\r\n   function name() public view returns (string memory) {\r\n       return _name;\r\n   }\r\n\r\n   /**\r\n    * @dev Returns the symbol of the token, usually a shorter version of the\r\n    * name.\r\n    */\r\n   function symbol() public view returns (string memory) {\r\n       return _symbol;\r\n   }\r\n\r\n   /**\r\n    * @dev Returns the number of decimals used to get its user representation.\r\n    * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n    * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n    *\r\n    * Tokens usually opt for a value of 18, imitating the relationship between\r\n    * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n    * called.\r\n    *\r\n    * NOTE: This information is only used for _display_ purposes: it in\r\n    * no way affects any of the arithmetic of the contract, including\r\n    * {IERC20-balanceOf} and {IERC20-transfer}.\r\n    */\r\n   function decimals() public view returns (uint8) {\r\n       return _decimals;\r\n   }\r\n\r\n   /**\r\n    * @dev See {IERC20-totalSupply}.\r\n    */\r\n   function totalSupply() public view override returns (uint256) {\r\n       return _totalSupply;\r\n   }\r\n\r\n   /**\r\n    * @dev See {IERC20-balanceOf}.\r\n    */\r\n   function balanceOf(address account) public view override returns (uint256) {\r\n       return _balances[account];\r\n   }\r\n\r\n   /**\r\n    * @dev See {IERC20-transfer}.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `recipient` cannot be the zero address.\r\n    * - the caller must have a balance of at least `amount`.\r\n    */\r\n   function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n       _transfer(_msgSender(), recipient, amount);\r\n       return true;\r\n   }\r\n\r\n   /**\r\n    * @dev See {IERC20-allowance}.\r\n    */\r\n   function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n       return _allowances[owner][spender];\r\n   }\r\n\r\n   /**\r\n    * @dev See {IERC20-approve}.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `spender` cannot be the zero address.\r\n    */\r\n   function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n       _approve(_msgSender(), spender, amount);\r\n       return true;\r\n   }\r\n\r\n   /**\r\n    * @dev See {IERC20-transferFrom}.\r\n    *\r\n    * Emits an {Approval} event indicating the updated allowance. This is not\r\n    * required by the EIP. See the note at the beginning of {ERC20}.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `sender` and `recipient` cannot be the zero address.\r\n    * - `sender` must have a balance of at least `amount`.\r\n    * - the caller must have allowance for ``sender``'s tokens of at least\r\n    * `amount`.\r\n    */\r\n   function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n       _transfer(sender, recipient, amount);\r\n       _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n       return true;\r\n   }\r\n\r\n   /**\r\n    * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n    *\r\n    * This is an alternative to {approve} that can be used as a mitigation for\r\n    * problems described in {IERC20-approve}.\r\n    *\r\n    * Emits an {Approval} event indicating the updated allowance.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `spender` cannot be the zero address.\r\n    */\r\n   function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n       _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n       return true;\r\n   }\r\n\r\n   /**\r\n    * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n    *\r\n    * This is an alternative to {approve} that can be used as a mitigation for\r\n    * problems described in {IERC20-approve}.\r\n    *\r\n    * Emits an {Approval} event indicating the updated allowance.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `spender` cannot be the zero address.\r\n    * - `spender` must have allowance for the caller of at least\r\n    * `subtractedValue`.\r\n    */\r\n   function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n       _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n       return true;\r\n   }\r\n\r\n   /**\r\n    * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n    *\r\n    * This is internal function is equivalent to {transfer}, and can be used to\r\n    * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n    *\r\n    * Emits a {Transfer} event.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `sender` cannot be the zero address.\r\n    * - `recipient` cannot be the zero address.\r\n    * - `sender` must have a balance of at least `amount`.\r\n    */\r\n   function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n       require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n       require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n       _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n       _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n       _balances[recipient] = _balances[recipient].add(amount);\r\n       emit Transfer(sender, recipient, amount);\r\n   }\r\n\r\n   /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n    * the total supply.\r\n    *\r\n    * Emits a {Transfer} event with `from` set to the zero address.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `to` cannot be the zero address.\r\n    */\r\n   function _mint(address account, uint256 amount) internal virtual {\r\n       require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n       _beforeTokenTransfer(address(0), account, amount);\r\n\r\n       _totalSupply = _totalSupply.add(amount);\r\n       _balances[account] = _balances[account].add(amount);\r\n       emit Transfer(address(0), account, amount);\r\n   }\r\n\r\n   /**\r\n    * @dev Destroys `amount` tokens from `account`, reducing the\r\n    * total supply.\r\n    *\r\n    * Emits a {Transfer} event with `to` set to the zero address.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `account` cannot be the zero address.\r\n    * - `account` must have at least `amount` tokens.\r\n    */\r\n   function _burn(address account, uint256 amount) internal virtual {\r\n       require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n       _beforeTokenTransfer(account, address(0), amount);\r\n\r\n       _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n       _totalSupply = _totalSupply.sub(amount);\r\n       emit Transfer(account, address(0), amount);\r\n   }\r\n\r\n   /**\r\n    * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n    *\r\n    * This internal function is equivalent to `approve`, and can be used to\r\n    * e.g. set automatic allowances for certain subsystems, etc.\r\n    *\r\n    * Emits an {Approval} event.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `owner` cannot be the zero address.\r\n    * - `spender` cannot be the zero address.\r\n    */\r\n   function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n       require(owner != address(0), \"ERC20: approve from the zero address\");\r\n       require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n       _allowances[owner][spender] = amount;\r\n       emit Approval(owner, spender, amount);\r\n   }\r\n\r\n   /**\r\n    * @dev Sets {decimals} to a value other than the default one of 18.\r\n    *\r\n    * WARNING: This function should only be called from the constructor. Most\r\n    * applications that interact with token contracts will not expect\r\n    * {decimals} to ever change, and may work incorrectly if it does.\r\n    */\r\n   function _setupDecimals(uint8 decimals_) internal {\r\n       _decimals = decimals_;\r\n   }\r\n\r\n   /**\r\n    * @dev Hook that is called before any transfer of tokens. This includes\r\n    * minting and burning.\r\n    *\r\n    * Calling conditions:\r\n    *\r\n    * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n    * will be to transferred to `to`.\r\n    * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n    * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n    * - `from` and `to` are never both zero.\r\n    *\r\n    * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n    */\r\n   function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// Copyright (c) 2019-2020 revolutionpopuli.com\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n\r\n\r\n\r\n\r\n// This contract was copied from https://github.com/OpenZeppelin/openzeppelin-contracts/\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Contract module which allows children to implement an emergency stop\r\n* mechanism that can be triggered by an authorized account.\r\n*\r\n* This module is used through inheritance. It will make available the\r\n* modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n* the functions of your contract. Note that they will not be pausable by\r\n* simply including this module, only once the modifiers are put in place.\r\n*/\r\nabstract contract Pausable is Context {\r\n   /**\r\n    * @dev Emitted when the pause is triggered by `account`.\r\n    */\r\n   event Paused(address account);\r\n\r\n   /**\r\n    * @dev Emitted when the pause is lifted by `account`.\r\n    */\r\n   event Unpaused(address account);\r\n\r\n   bool private _paused;\r\n\r\n   /**\r\n    * @dev Initializes the contract in unpaused state.\r\n    */\r\n   constructor () internal {\r\n       _paused = false;\r\n   }\r\n\r\n   /**\r\n    * @dev Returns true if the contract is paused, and false otherwise.\r\n    */\r\n   function paused() public view returns (bool) {\r\n       return _paused;\r\n   }\r\n\r\n   /**\r\n    * @dev Modifier to make a function callable only when the contract is not paused.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - The contract must not be paused.\r\n    */\r\n   modifier whenNotPaused() virtual {\r\n       require(!_paused, \"Pausable: paused\");\r\n       _;\r\n   }\r\n\r\n   /**\r\n    * @dev Modifier to make a function callable only when the contract is paused.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - The contract must be paused.\r\n    */\r\n   modifier whenPaused() {\r\n       require(_paused, \"Pausable: not paused\");\r\n       _;\r\n   }\r\n\r\n   /**\r\n    * @dev Triggers stopped state.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - The contract must not be paused.\r\n    */\r\n   function _pause() internal virtual whenNotPaused {\r\n       _paused = true;\r\n       emit Paused(_msgSender());\r\n   }\r\n\r\n   /**\r\n    * @dev Returns to normal state.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - The contract must be paused.\r\n    */\r\n   function _unpause() internal virtual whenPaused {\r\n       _paused = false;\r\n       emit Unpaused(_msgSender());\r\n   }\r\n}\r\n\r\n\r\n\r\ncontract PausableWithException is Pausable, Ownable {\r\n   mapping(address => bool) public exceptions;\r\n\r\n   modifier whenNotPaused() override {\r\n       require(!paused() || hasException(_msgSender()), \"Pausable: paused (and no exception)\");\r\n\r\n       _;\r\n   }\r\n\r\n   modifier whenNotPausedWithoutException() {\r\n       require(!paused(), \"Pausable: paused\");\r\n\r\n       _;\r\n   }\r\n\r\n   function hasException(address _account) public view returns (bool) {\r\n       return exceptions[_account];\r\n   }\r\n\r\n   function setPausableException(address _account, bool _status) external whenNotPaused onlyOwner {\r\n       exceptions[_account] = _status;\r\n   }\r\n}\r\n\r\n\r\ncontract Token is ERC20, PausableWithException {\r\n   constructor(string memory name, string memory symbol) ERC20(name, symbol) {}\r\n\r\n   function pause() public onlyOwner {\r\n       super._pause();\r\n   }\r\n\r\n   function unpause() public onlyOwner {\r\n       super._unpause();\r\n   }\r\n\r\n   function transfer(address recipient, uint256 amount) public override whenNotPaused returns (bool) {\r\n       return super.transfer(recipient, amount);\r\n   }\r\n\r\n   function transferFrom(address sender, address recipient, uint256 amount) public override whenNotPausedWithoutException returns (bool) {\r\n       return super.transferFrom(sender, recipient, amount);\r\n   }\r\n\r\n   function mint(address account, uint amount) public onlyOwner whenNotPaused {\r\n       _mint(account, amount);\r\n   }\r\n\r\n   function burn(address account, uint amount) public onlyOwner {\r\n       _burn(account, amount);\r\n   }\r\n}\r\n\r\n// This contract was copied from https://github.com/OpenZeppelin/openzeppelin-contracts/\r\n\r\n\r\n\r\n\r\n\r\n\r\n// This contract was copied from https://github.com/OpenZeppelin/openzeppelin-contracts/\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Collection of functions related to the address type\r\n*/\r\nlibrary Address {\r\n   /**\r\n    * @dev Returns true if `account` is a contract.\r\n    *\r\n    * [IMPORTANT]\r\n    * ====\r\n    * It is unsafe to assume that an address for which this function returns\r\n    * false is an externally-owned account (EOA) and not a contract.\r\n    *\r\n    * Among others, `isContract` will return false for the following\r\n    * types of addresses:\r\n    *\r\n    *  - an externally-owned account\r\n    *  - a contract in construction\r\n    *  - an address where a contract will be created\r\n    *  - an address where a contract lived, but was destroyed\r\n    * ====\r\n    */\r\n   function isContract(address account) internal view returns (bool) {\r\n       // This method relies on extcodesize, which returns 0 for contracts in\r\n       // construction, since the code is only stored at the end of the\r\n       // constructor execution.\r\n\r\n       uint256 size;\r\n       // solhint-disable-next-line no-inline-assembly\r\n       assembly { size := extcodesize(account) }\r\n       return size > 0;\r\n   }\r\n\r\n   /**\r\n    * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n    * `recipient`, forwarding all available gas and reverting on errors.\r\n    *\r\n    * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n    * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n    * imposed by `transfer`, making them unable to receive funds via\r\n    * `transfer`. {sendValue} removes this limitation.\r\n    *\r\n    * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n    *\r\n    * IMPORTANT: because control is transferred to `recipient`, care must be\r\n    * taken to not create reentrancy vulnerabilities. Consider using\r\n    * {ReentrancyGuard} or the\r\n    * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n    */\r\n   function sendValue(address payable recipient, uint256 amount) internal {\r\n       require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n       // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n       (bool success, ) = recipient.call{ value: amount }(\"\");\r\n       require(success, \"Address: unable to send value, recipient may have reverted\");\r\n   }\r\n\r\n   /**\r\n    * @dev Performs a Solidity function call using a low level `call`. A\r\n    * plain`call` is an unsafe replacement for a function call: use this\r\n    * function instead.\r\n    *\r\n    * If `target` reverts with a revert reason, it is bubbled up by this\r\n    * function (like regular Solidity function calls).\r\n    *\r\n    * Returns the raw returned data. To convert to the expected return value,\r\n    * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `target` must be a contract.\r\n    * - calling `target` with `data` must not revert.\r\n    *\r\n    * _Available since v3.1._\r\n    */\r\n   function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n       return functionCall(target, data, \"Address: low-level call failed\");\r\n   }\r\n\r\n   /**\r\n    * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n    * `errorMessage` as a fallback revert reason when `target` reverts.\r\n    *\r\n    * _Available since v3.1._\r\n    */\r\n   function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n       return functionCallWithValue(target, data, 0, errorMessage);\r\n   }\r\n\r\n   /**\r\n    * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n    * but also transferring `value` wei to `target`.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - the calling contract must have an ETH balance of at least `value`.\r\n    * - the called Solidity function must be `payable`.\r\n    *\r\n    * _Available since v3.1._\r\n    */\r\n   function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n       return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n   }\r\n\r\n   /**\r\n    * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n    * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n    *\r\n    * _Available since v3.1._\r\n    */\r\n   function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n       require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n       require(isContract(target), \"Address: call to non-contract\");\r\n\r\n       // solhint-disable-next-line avoid-low-level-calls\r\n       (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n       return _verifyCallResult(success, returndata, errorMessage);\r\n   }\r\n\r\n   /**\r\n    * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n    * but performing a static call.\r\n    *\r\n    * _Available since v3.3._\r\n    */\r\n   function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n       return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n   }\r\n\r\n   /**\r\n    * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n    * but performing a static call.\r\n    *\r\n    * _Available since v3.3._\r\n    */\r\n   function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n       require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n       // solhint-disable-next-line avoid-low-level-calls\r\n       (bool success, bytes memory returndata) = target.staticcall(data);\r\n       return _verifyCallResult(success, returndata, errorMessage);\r\n   }\r\n\r\n   /**\r\n    * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n    * but performing a delegate call.\r\n    *\r\n    * _Available since v3.3._\r\n    */\r\n   function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n       return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n   }\r\n\r\n   /**\r\n    * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n    * but performing a delegate call.\r\n    *\r\n    * _Available since v3.3._\r\n    */\r\n   function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n       require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n       // solhint-disable-next-line avoid-low-level-calls\r\n       (bool success, bytes memory returndata) = target.delegatecall(data);\r\n       return _verifyCallResult(success, returndata, errorMessage);\r\n   }\r\n\r\n   function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n       if (success) {\r\n           return returndata;\r\n       } else {\r\n           // Look for revert reason and bubble it up if present\r\n           if (returndata.length > 0) {\r\n               // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n               // solhint-disable-next-line no-inline-assembly\r\n               assembly {\r\n                   let returndata_size := mload(returndata)\r\n                   revert(add(32, returndata), returndata_size)\r\n               }\r\n           } else {\r\n               revert(errorMessage);\r\n           }\r\n       }\r\n   }\r\n}\r\n\r\n\r\n/**\r\n* @title SafeERC20\r\n* @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n* contract returns false). Tokens that return no value (and instead revert or\r\n* throw on failure) are also supported, non-reverting calls are assumed to be\r\n* successful.\r\n* To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n* which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n*/\r\nlibrary SafeERC20 {\r\n   using SafeMath for uint256;\r\n   using Address for address;\r\n\r\n   function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n       _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n   }\r\n\r\n   function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n       _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n   }\r\n\r\n   /**\r\n    * @dev Deprecated. This function has issues similar to the ones found in\r\n    * {IERC20-approve}, and its usage is discouraged.\r\n    *\r\n    * Whenever possible, use {safeIncreaseAllowance} and\r\n    * {safeDecreaseAllowance} instead.\r\n    */\r\n   function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n       // safeApprove should only be called when setting an initial allowance,\r\n       // or when resetting it to zero. To increase and decrease it, use\r\n       // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n       // solhint-disable-next-line max-line-length\r\n       require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n           \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n       );\r\n       _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n   }\r\n\r\n   function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n       uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n       _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n   }\r\n\r\n   function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n       uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n       _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n   }\r\n\r\n   /**\r\n    * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n    * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n    * @param token The token targeted by the call.\r\n    * @param data The call data (encoded using abi.encode or one of its variants).\r\n    */\r\n   function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n       // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n       // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n       // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n       bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n       if (returndata.length > 0) { // Return data is optional\r\n           // solhint-disable-next-line max-line-length\r\n           require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n       }\r\n   }\r\n}\r\n\r\n\r\n// Copyright (c) 2019-2020 revolutionpopuli.com\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Copyright (c) 2019-2020 revolutionpopuli.com\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract TokenEscrow is Ownable {\r\n   using SafeMath for uint256;\r\n   using SafeERC20 for Token;\r\n\r\n   struct Share {\r\n       uint256 proportion;\r\n       uint256 periods;\r\n       uint256 periodLength;\r\n   }\r\n\r\n   uint256 public unlockStart;\r\n   uint256 public totalShare;\r\n\r\n   mapping(address => Share) public shares;\r\n   mapping(address => uint256) public unlocked;\r\n\r\n   Token public token;\r\n\r\n   constructor(Token _token) {\r\n       token = _token;\r\n   }\r\n\r\n   function setUnlockStart(uint256 _unlockStart) external virtual onlyOwner {\r\n       require(unlockStart == 0, \"unlockStart should be == 0\");\r\n       require(_unlockStart >= block.timestamp, \"_unlockStart should be >= block.timestamp\");\r\n\r\n       unlockStart = _unlockStart;\r\n   }\r\n\r\n   function addShare(address _beneficiary, uint256 _proportion, uint256 _periods, uint256 _periodLength) external onlyOwner {\r\n       shares[_beneficiary] = Share(shares[_beneficiary].proportion.add(_proportion),_periods,_periodLength);\r\n       totalShare = totalShare.add(_proportion);\r\n   }\r\n\r\n   // If the time of freezing expired will return the funds to the owner.\r\n   function unlockFor(address _beneficiary) public {\r\n       require(unlockStart > 0, \"unlockStart should be > 0\");\r\n       require(\r\n           block.timestamp >= (unlockStart.add(shares[_beneficiary].periodLength)),\r\n           \"block.timestamp should be >= (unlockStart.add(shares[_beneficiary].periodLength))\"\r\n       );\r\n\r\n       uint256 share = shares[_beneficiary].proportion;\r\n       uint256 periodsSinceUnlockStart = ((block.timestamp).sub(unlockStart)).div(shares[_beneficiary].periodLength);\r\n\r\n       if (periodsSinceUnlockStart < shares[_beneficiary].periods) {\r\n           share = share.mul(periodsSinceUnlockStart).div(shares[_beneficiary].periods);\r\n       }\r\n\r\n       share = share.sub(unlocked[_beneficiary]);\r\n\r\n       if (share > 0) {\r\n           unlocked[_beneficiary] = unlocked[_beneficiary].add(share);\r\n           uint256 unlockedToken = token.balanceOf(address(this)).mul(share).div(totalShare);\r\n           totalShare = totalShare.sub(share);\r\n           token.safeTransfer(_beneficiary,unlockedToken);\r\n       }\r\n   }\r\n}\r\n\r\n\r\ncontract Creator {\r\n   Token public token = new Token('RevolutionPopuli ERC20 Token', 'RVP');\r\n   TokenEscrow public tokenEscrow;\r\n\r\n   constructor() {\r\n       token.transferOwnership(msg.sender);\r\n   }\r\n\r\n   function createTokenEscrow() external returns (TokenEscrow) {\r\n       tokenEscrow = new TokenEscrow(token);\r\n       tokenEscrow.transferOwnership(msg.sender);\r\n\r\n       return tokenEscrow;\r\n   }\r\n}\r\n\r\n\r\ncontract TokenSale is Ownable {\r\n   using SafeMath for uint256;\r\n   using SafeERC20 for Token;\r\n\r\n   uint constant public MIN_ETH = 0.1 ether; // !!! for real ICO change to 1 ether\r\n   uint constant public WINDOW_DURATION = 23 hours; // !!! for real ICO change to 23 hours\r\n\r\n   uint constant public MARKETING_SHARE = 200000000 ether;\r\n   uint constant public TEAM_MEMBER_1_SHARE = 50000000 ether;\r\n   uint constant public TEAM_MEMBER_2_SHARE = 50000000 ether;\r\n   uint constant public TEAM_MEMBER_3_SHARE = 50000000 ether;\r\n   uint constant public TEAM_MEMBER_4_SHARE = 50000000 ether;\r\n   uint constant public REVPOP_FOUNDATION_SHARE = 200000000 ether;\r\n   uint constant public REVPOP_FOUNDATION_PERIOD_LENGTH = 365 days; // !!! for real ICO change to 365 days\r\n   uint constant public REVPOP_FOUNDATION_PERIODS = 10; // 10 years (!!! for real ICO it would be 10 years)\r\n   uint constant public REVPOP_COMPANY_SHARE = 200000000 ether;\r\n   uint constant public REVPOP_COMPANY_PERIOD_LENGTH = 365 days; // !!! for real ICO change to 365 days\r\n   uint constant public REVPOP_COMPANY_PERIODS = 10; // 10 years (!!! for real ICO it would be 10 years)\r\n\r\n   address[9] public wallets = [\r\n       // RevPop.org foundation\r\n       0x26be1e82026BB50742bBF765c8b1665bCB763c4c,\r\n\r\n       // RevPop company\r\n       0x4A2d3b4475dA7E634154F1868e689705bDCEEF4c,\r\n\r\n       // Marketing\r\n       0x73d3F88BF15EB48e94E6583968041cC850d61D62,\r\n\r\n       // Team member 1\r\n       0x1F3eFCe792f9744d919eee34d23e054631351eBc,\r\n\r\n       // Team member 2\r\n       0xEB7bb38D821219aE20d3Df7A80A161563CDe5f1b,\r\n\r\n       // Team member 3\r\n       0x9F3868cF5FEdb90Df9D9974A131dE6B56B3aA7Ca,\r\n\r\n       // Team member 4\r\n       0xE7320724CA4C20aEb193472D3082593f6c58A3C5,\r\n\r\n       // Unsold tokens taker\r\n       0xCde8311aa7AAbECDEf84179D93a04005C8C549c0,\r\n\r\n       // Beneficiarry\r\n       0x8B104136F8c1FC63fBA34cb46c42c7af5532f80e\r\n   ];\r\n\r\n   Token public token;                   // The Token token itself\r\n   TokenEscrow public tokenEscrow;\r\n\r\n   uint public totalSupply;           // Total Token amount created\r\n\r\n   uint public firstWindowStartTime;  // Time of window 1 opening\r\n   uint public createPerFirstWindow;  // Tokens sold in window 1\r\n\r\n   uint public otherWindowsStartTime; // Time of other windows opening\r\n   uint public numberOfOtherWindows;  // Number of other windows\r\n   uint public createPerOtherWindow;  // Tokens sold in each window after window 1\r\n\r\n   uint public totalBoughtTokens;\r\n   uint public totalRaisedETH;\r\n   uint public totalBulkPurchasedTokens;\r\n\r\n   uint public collectedUnsoldTokensBeforeWindow = 0;\r\n\r\n   bool public initialized = false;\r\n   bool public tokensPerPeriodAreSet = false;\r\n   bool public distributedShares = false;\r\n   bool public began = false;\r\n   bool public tokenSalePaused = false;\r\n\r\n   mapping(uint => uint) public dailyTotals;\r\n   mapping(uint => mapping(address => uint)) public userBuys;\r\n   mapping(uint => mapping(address => bool)) public claimed;\r\n\r\n   event LogBuy           (uint window, address user, uint amount);\r\n   event LogClaim         (uint window, address user, uint amount);\r\n   event LogCollect       (uint amount);\r\n   event LogCollectUnsold (uint amount);\r\n\r\n   constructor(Creator creator) {\r\n       token = creator.token();\r\n\r\n       require(token.totalSupply() == 0, \"Total supply of Token should be 0\");\r\n\r\n       tokenEscrow = creator.createTokenEscrow();\r\n\r\n       require(tokenEscrow.owner() == address(this), \"Invalid owner of the TokenEscrow\");\r\n       require(tokenEscrow.unlockStart() == 0, \"TokenEscrow.unlockStart should be 0\");\r\n   }\r\n\r\n   function renounceOwnership() public override onlyOwner {\r\n       require(address(this).balance == 0, \"address(this).balance should be == 0\");\r\n\r\n       super.renounceOwnership();\r\n   }\r\n\r\n   function initialize(\r\n       uint _totalSupply,\r\n       uint _firstWindowStartTime,\r\n       uint _otherWindowsStartTime,\r\n       uint _numberOfOtherWindows\r\n   ) public onlyOwner {\r\n       require(token.owner() == address(this), \"Invalid owner of the Token\");\r\n       token.setPausableException(address(tokenEscrow), true);\r\n       token.setPausableException(address(this), true);\r\n       token.setPausableException(wallets[2], true);\r\n       token.setPausableException(wallets[7], true);\r\n\r\n       require(initialized == false, \"initialized should be == false\");\r\n       require(_totalSupply > 0, \"_totalSupply should be > 0\");\r\n       require(_firstWindowStartTime < _otherWindowsStartTime, \"_firstWindowStartTime should be < _otherWindowsStartTime\");\r\n       require(_numberOfOtherWindows > 0, \"_numberOfOtherWindows should be > 0\");\r\n       require(_totalSupply > totalReservedTokens(), \"_totalSupply should be more than totalReservedTokens()\");\r\n\r\n       numberOfOtherWindows = _numberOfOtherWindows;\r\n       totalSupply = _totalSupply;\r\n       firstWindowStartTime = _firstWindowStartTime;\r\n       otherWindowsStartTime = _otherWindowsStartTime;\r\n\r\n       initialized = true;\r\n\r\n       token.mint(address(this), totalSupply);\r\n   }\r\n\r\n   function addBulkPurchasers(address[] memory _purchasers, uint[] memory _tokens) public onlyOwner {\r\n       require(initialized == true, \"initialized should be == true\");\r\n       require(tokensPerPeriodAreSet == false, \"tokensPerPeriodAreSet should be == false\");\r\n\r\n       uint count = _purchasers.length;\r\n\r\n       require(count > 0, \"count should be > 0\");\r\n       require(count == _tokens.length, \"count should be == _tokens.length\");\r\n\r\n       for (uint i = 0; i < count; i++) {\r\n           require(_tokens[i] > 0, \"_tokens[i] should be > 0\");\r\n           token.safeTransfer(_purchasers[i], _tokens[i]);\r\n           totalBulkPurchasedTokens = totalBulkPurchasedTokens.add(_tokens[i]);\r\n       }\r\n\r\n       require(\r\n           token.balanceOf(address(this)) > totalReservedTokens(),\r\n           \"token.balanceOf(address(this)) should be > totalReservedTokens() after bulk purchases\"\r\n       );\r\n   }\r\n\r\n   function setTokensPerPeriods(uint _firstPeriodTokens, uint _otherPeriodTokens) public onlyOwner {\r\n       require(initialized == true, \"initialized should be == true\");\r\n       require(began == false, \"began should be == false\");\r\n\r\n       tokensPerPeriodAreSet = true;\r\n\r\n       uint totalTokens = _firstPeriodTokens.add(_otherPeriodTokens.mul(numberOfOtherWindows));\r\n\r\n       require(\r\n           totalSupply.sub(totalReservedTokens()).sub(totalBulkPurchasedTokens) == totalTokens,\r\n           \"totalSupply.sub(totalReservedTokens()).sub(totalBulkPurchasedTokens) should be == totalTokens\"\r\n       );\r\n\r\n       createPerFirstWindow = _firstPeriodTokens;\r\n       createPerOtherWindow = _otherPeriodTokens;\r\n   }\r\n\r\n   function distributeShares() public onlyOwner {\r\n       require(tokensPerPeriodAreSet == true, \"tokensPerPeriodAreSet should be == true\");\r\n       require(distributedShares == false, \"distributedShares should be == false\");\r\n\r\n       distributedShares = true;\r\n\r\n       token.safeTransfer(address(tokenEscrow), REVPOP_COMPANY_SHARE.add(REVPOP_FOUNDATION_SHARE));\r\n       token.safeTransfer(wallets[2], MARKETING_SHARE);\r\n       token.safeTransfer(wallets[3], TEAM_MEMBER_1_SHARE);\r\n       token.safeTransfer(wallets[4], TEAM_MEMBER_2_SHARE);\r\n       token.safeTransfer(wallets[5], TEAM_MEMBER_3_SHARE);\r\n       token.safeTransfer(wallets[6], TEAM_MEMBER_4_SHARE);\r\n\r\n       tokenEscrow.addShare(wallets[0], 50, REVPOP_FOUNDATION_PERIODS, REVPOP_FOUNDATION_PERIOD_LENGTH);\r\n       tokenEscrow.addShare(wallets[1], 50, REVPOP_COMPANY_PERIODS, REVPOP_COMPANY_PERIOD_LENGTH);\r\n       tokenEscrow.setUnlockStart(time());\r\n\r\n       // We pause all transfers and minting.\r\n       // We allow to use transfer() function ONLY for tokenEscrow contract,\r\n       // because it is an escrow and it should allow to transfer tokens to a certain party.\r\n       pauseTokenTransfer();\r\n   }\r\n\r\n   function totalReservedTokens() internal pure returns (uint) {\r\n       return MARKETING_SHARE\r\n           .add(TEAM_MEMBER_1_SHARE)\r\n           .add(TEAM_MEMBER_2_SHARE)\r\n           .add(TEAM_MEMBER_3_SHARE)\r\n           .add(TEAM_MEMBER_4_SHARE)\r\n           .add(REVPOP_COMPANY_SHARE)\r\n           .add(REVPOP_FOUNDATION_SHARE);\r\n   }\r\n\r\n   function begin() public onlyOwner {\r\n       require(distributedShares == true, \"distributedShares should be == true\");\r\n       require(began == false, \"began should be == false\");\r\n\r\n       began = true;\r\n   }\r\n\r\n   function pauseTokenTransfer() public onlyOwner {\r\n       token.pause();\r\n   }\r\n\r\n   function unpauseTokenTransfer() public onlyOwner {\r\n       token.unpause();\r\n   }\r\n\r\n   function pauseTokenSale() public onlyOwner {\r\n       tokenSalePaused = true;\r\n   }\r\n\r\n   function unpauseTokenSale() public onlyOwner {\r\n       tokenSalePaused = false;\r\n   }\r\n\r\n   function burnTokens(address account, uint amount) public onlyOwner {\r\n       token.burn(account, amount);\r\n   }\r\n\r\n   function removePausableException(address _address) public onlyOwner {\r\n       token.setPausableException(_address, false);\r\n   }\r\n\r\n   function time() internal view returns (uint) {\r\n       return block.timestamp;\r\n   }\r\n\r\n   function today() public view returns (uint) {\r\n       return windowFor(time());\r\n   }\r\n\r\n   function windowDuration() public virtual pure returns (uint) {\r\n       return WINDOW_DURATION;\r\n   }\r\n\r\n   // Each window is windowDuration() (23 hours) long so that end-of-window rotates\r\n   // around the clock for all timezones.\r\n   function windowFor(uint timestamp) public view returns (uint) {\r\n       return timestamp < otherWindowsStartTime\r\n       ? 0\r\n       : timestamp.sub(otherWindowsStartTime).div(windowDuration()).add(1);\r\n   }\r\n\r\n   function createOnWindow(uint window) public view returns (uint) {\r\n       return window == 0 ? createPerFirstWindow : createPerOtherWindow;\r\n   }\r\n\r\n   // This method provides the buyer some protections regarding which\r\n   // day the buy order is submitted and the maximum price prior to\r\n   // applying this payment that will be allowed.\r\n   function buyWithLimit(uint window, uint limit) public payable {\r\n       require(began == true, \"began should be == true\");\r\n       require(tokenSalePaused == false, \"tokenSalePaused should be == false\");\r\n       require(time() >= firstWindowStartTime, \"time() should be >= firstWindowStartTime\");\r\n       require(today() <= numberOfOtherWindows, \"today() should be <= numberOfOtherWindows\");\r\n       require(msg.value >= MIN_ETH, \"msg.value should be >= MIN_ETH\");\r\n       require(window >= today(), \"window should be >= today()\");\r\n       require(window <= numberOfOtherWindows, \"window should be <= numberOfOtherWindows\");\r\n\r\n       if (limit != 0) {\r\n           require(dailyTotals[window] <= limit, \"dailyTotals[window] should be <= limit\");\r\n       }\r\n\r\n       userBuys[window][msg.sender] = userBuys[window][msg.sender].add(msg.value);\r\n       dailyTotals[window] = dailyTotals[window].add(msg.value);\r\n       totalRaisedETH = totalRaisedETH.add(msg.value);\r\n\r\n       emit LogBuy(window, msg.sender, msg.value);\r\n   }\r\n\r\n   function buy() public payable {\r\n       buyWithLimit(today(), 0);\r\n   }\r\n\r\n   fallback() external payable {\r\n       buy();\r\n   }\r\n\r\n   receive() external payable {\r\n       buy();\r\n   }\r\n\r\n   function claim(uint window) public {\r\n       require(began == true, \"began should be == true\");\r\n       require(today() > window, \"today() should be > window\");\r\n\r\n       if (claimed[window][msg.sender] || dailyTotals[window] == 0 || userBuys[window][msg.sender] == 0) {\r\n           return;\r\n       }\r\n\r\n       // 100 ether below is 100% * 10^18\r\n       uint256 userEthShare = userBuys[window][msg.sender].mul(100 ether).div(dailyTotals[window]);\r\n       uint256 reward = (createOnWindow(window)).mul(userEthShare).div(100 ether);\r\n\r\n       totalBoughtTokens = totalBoughtTokens.add(reward);\r\n       claimed[window][msg.sender] = true;\r\n       token.safeTransfer(msg.sender, reward);\r\n\r\n       emit LogClaim(window, msg.sender, reward);\r\n   }\r\n\r\n   function claimAll() public {\r\n       require(began == true, \"began should be == true\");\r\n\r\n       for (uint i = 0; i < today(); i++) {\r\n           claim(i);\r\n       }\r\n   }\r\n\r\n   // Crowdsale owners can collect ETH  number of times\r\n   function collect() public {\r\n       require(began == true, \"began should be == true\");\r\n       require(today() > 0, \"today() should be > 0\");\r\n       // Prevent recycling during window 0\r\n\r\n       uint balance = address(this).balance;\r\n       payable(wallets[8]).transfer(address(this).balance);\r\n\r\n       emit LogCollect(balance);\r\n   }\r\n\r\n   function collectUnsoldTokens(uint window) public {\r\n       require(began == true, \"began should be == true\");\r\n       require(today() > 0, \"today() should be > 0\");\r\n       require(window <= today(), \"window should be <= today()\");\r\n       require(window > collectedUnsoldTokensBeforeWindow, \"window should be > collectedUnsoldTokensBeforeWindow\");\r\n\r\n       uint unsoldTokens = 0;\r\n\r\n       for (uint i = collectedUnsoldTokensBeforeWindow; i < window; i++) {\r\n           uint dailyTotal = dailyTotals[i];\r\n\r\n           if (dailyTotal == 0) {\r\n               unsoldTokens = unsoldTokens.add(i == 0 ? createPerFirstWindow : createPerOtherWindow);\r\n           }\r\n       }\r\n\r\n       collectedUnsoldTokensBeforeWindow = window;\r\n\r\n       if (unsoldTokens > 0) {\r\n           token.safeTransfer(wallets[7], unsoldTokens);\r\n       }\r\n\r\n       emit LogCollectUnsold(unsoldTokens);\r\n   }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exceptions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"hasException\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setPausableException\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Token","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001c5265766f6c7574696f6e506f70756c6920455243323020546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000035256500000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5f9274a0abcabb80b1dacac94c61cae32799e79de2be672342ee89606bfa2627"}]}