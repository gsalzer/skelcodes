{"status":"1","message":"OK","result":[{"SourceCode":"{\"Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: -- üí∞Ô∏è --\\n\\npragma solidity ^0.8.0;\\n\\ninterface ITokenContract {\\n\\n    function transfer(\\n        address _to,\\n        uint256 _value\\n    )\\n        external\\n        returns\\n    (\\n        bool success\\n    );\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    )\\n        external\\n        returns\\n    (\\n        bool success\\n    );\\n}\"},\"WiseFunder.sol\":{\"content\":\"// SPDX-License-Identifier: -- üí∞Ô∏è --\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Interfaces.sol\\\";\\n\\ncontract WiseFunder {\\n\\n    ITokenContract public immutable WISE_TOKEN;\\n\\n    address public immutable FUND_OWNER;\\n    uint256 public immutable THRESHOLD;\\n    uint256 public immutable TIMESTAMP;\\n\\n    uint256 public totalFunded;\\n    uint256 public totalFunders;\\n\\n    bool public hasClaimed;\\n\\n    mapping(address =\\u003e uint256) public balanceMap;\\n    mapping(uint256 =\\u003e address) public fundersMap;\\n\\n    event FundraiserCreated(\\n        address indexed fundOwner,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n\\n    event NewFunder(\\n        uint256 indexed funderIndex,\\n        address indexed funderAddress,\\n        uint256 tokenAmount\\n    );\\n\\n    event FundsAdded(\\n        address indexed funderAddress,\\n        uint256 tokenAmount\\n    );\\n\\n    event FundsClaimed(\\n        address indexed fundOwner,\\n        uint256 totalFunded\\n    );\\n\\n    event RefundIssued(\\n        address indexed refundAddress,\\n        uint256 amount\\n    );\\n\\n    modifier onlyOwner {\\n        require(\\n            msg.sender == FUND_OWNER,\\n            \\u0027WiseFunder: invalid address\\u0027\\n        );\\n        _;\\n    }\\n\\n    modifier fundingOpen {\\n        require(\\n            block.timestamp \\u003c TIMESTAMP,\\n            \\u0027WiseFunder: funding closed\\u0027\\n        );\\n        _;\\n    }\\n\\n    modifier fundingClosed {\\n        require(\\n            block.timestamp \\u003e= TIMESTAMP,\\n            \\u0027WiseFunder: ongoing funding\\u0027\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        address _wiseToken,\\n        address _fundOwner,\\n        uint256 _tokenAmount,\\n        uint256 _timeAmount\\n    ) {\\n        WISE_TOKEN = ITokenContract(\\n            _wiseToken\\n        );\\n\\n        FUND_OWNER = _fundOwner;\\n        THRESHOLD = _tokenAmount;\\n        TIMESTAMP = block.timestamp + _timeAmount;\\n\\n        emit FundraiserCreated(\\n            _fundOwner,\\n            _tokenAmount,\\n            _timeAmount\\n        );\\n    }\\n\\n    function fundTokens(\\n        uint256 _tokenAmount\\n    )\\n        external\\n        fundingOpen\\n    {\\n        require(\\n            totalFunded \\u003c THRESHOLD,\\n            \\u0027WiseFunder: already funded\\u0027\\n        );\\n\\n        _fundTokens(msg.sender, address(this),\\n            _adjustAmount(totalFunded, _tokenAmount,\\n                THRESHOLD\\n            )\\n        );\\n    }\\n\\n    function _fundTokens(\\n        address _funderAddress,\\n        address _contractAddress,\\n        uint256 _funderAmount\\n    )\\n        private\\n    {\\n        WISE_TOKEN.transferFrom(\\n            _funderAddress,\\n            _contractAddress,\\n            _funderAmount\\n        );\\n\\n        _traceBalanceMap(\\n            _funderAddress,\\n            _funderAmount\\n        );\\n\\n        totalFunded =\\n        totalFunded + _funderAmount;\\n\\n        emit FundsAdded(\\n            _funderAddress,\\n            _funderAmount\\n        );\\n    }\\n\\n    function claimToken()\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            totalFunded \\u003e= THRESHOLD,\\n            \\u0027WiseFunder: not funded\\u0027\\n        );\\n\\n        require(\\n            hasClaimed == false,\\n            \\u0027WiseFunder: already claimed\\u0027\\n        );\\n\\n        hasClaimed = true;\\n\\n        WISE_TOKEN.transfer(\\n            FUND_OWNER,\\n            totalFunded\\n        );\\n\\n        emit FundsClaimed(\\n            FUND_OWNER,\\n            totalFunded\\n        );\\n    }\\n\\n    function refundTokens()\\n        external\\n        fundingClosed\\n    {\\n        require(\\n            totalFunded \\u003c THRESHOLD,\\n            \\u0027WiseFunder: funded\\u0027\\n        );\\n\\n        _refundTokens(\\n            msg.sender,\\n            balanceMap[msg.sender]\\n        );\\n    }\\n\\n    function _refundTokens(\\n        address _refundAddress,\\n        uint256 _refundAmount\\n    )\\n        private\\n    {\\n        balanceMap[_refundAddress] = 0;\\n\\n        WISE_TOKEN.transfer(\\n            _refundAddress,\\n            _refundAmount\\n        );\\n\\n        emit RefundIssued(\\n            _refundAddress,\\n            _refundAmount\\n        );\\n    }\\n\\n    function _traceBalanceMap(\\n        address _funderAddress,\\n        uint256 _funderAmount\\n    )\\n        private\\n    {\\n        if (balanceMap[_funderAddress] == 0) {\\n            _fundersIncrease(\\n                _funderAddress,\\n                _funderAmount\\n            );\\n        }\\n\\n        _balanceIncrease(\\n            _funderAddress,\\n            _funderAmount\\n        );\\n    }\\n\\n    function _balanceIncrease(\\n        address _funderAddress,\\n        uint256 _funderAmount\\n    )\\n        private\\n    {\\n        balanceMap[_funderAddress] =\\n        balanceMap[_funderAddress] + _funderAmount;\\n    }\\n\\n    function _fundersIncrease(\\n        address _funderAddress,\\n        uint256 _funderAmount\\n    )\\n        private\\n    {\\n        totalFunders =\\n        totalFunders + 1;\\n\\n        fundersMap[totalFunders] = _funderAddress;\\n\\n        emit NewFunder(\\n            totalFunders,\\n            _funderAddress,\\n            _funderAmount\\n        );\\n    }\\n\\n    function _adjustAmount(\\n        uint256 _totalFunded,\\n        uint256 _tokenAmount,\\n        uint256 _thresholdAmount\\n    )\\n        private\\n        pure\\n        returns (uint256)\\n    {\\n        return _isOverflow(\\n            _tokenAmount,\\n            _totalFunded,\\n            _thresholdAmount\\n        )\\n            ? _thresholdAmount - _totalFunded\\n            : _tokenAmount;\\n    }\\n\\n    function _isOverflow(\\n        uint256 _totalFunded,\\n        uint256 _tokenAmount,\\n        uint256 _thresholdValue\\n    )\\n        private\\n        pure\\n        returns (bool)\\n    {\\n        return _totalFunded + _tokenAmount \\u003e _thresholdValue;\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wiseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fundOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FundraiserCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"funderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"FundsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFunded\",\"type\":\"uint256\"}],\"name\":\"FundsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"funderIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"funderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"NewFunder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundIssued\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FUND_OWNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIMESTAMP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WISE_TOKEN\",\"outputs\":[{\"internalType\":\"contract ITokenContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"fundTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fundersMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFunders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"WiseFunder","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000066a0f676479cee1d7373f3dc2e2952778bff5bd6000000000000000000000000fb5ce3078999c7346b9abde072bad104f8f6ef090000000000000000000000000000000000000000000034f086f3b33b684000000000000000000000000000000000000000000000000000000000000000278d00","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://38c2f255a30264671c80315e4d87bcb38892dc5bf22ec990baf4546e1918f7f6"}]}