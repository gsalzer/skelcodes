{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/treasury/noSwapping/NoSwappingLiquidationStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n\\nimport {PermissionAdmin} from '@kyber.network/utils-sc/contracts/PermissionAdmin.sol';\\nimport {PermissionOperators} from '@kyber.network/utils-sc/contracts/PermissionOperators.sol';\\nimport {IERC20Ext} from '@kyber.network/utils-sc/contracts/IERC20Ext.sol';\\nimport {IPool} from '../../interfaces/liquidation/IPool.sol';\\nimport {INoSwappingLiquidationStrategy} from '../../interfaces/liquidation/INoSwappingLiquidationStrategy.sol';\\n\\n/// @dev The simplest liquidation strategy which requests funds from TreasuryPool and\\n/// \\ttransfer directly to treasury pool, no actual liquidation happens\\ncontract NoSwappingLiquidationStrategy is PermissionAdmin, PermissionOperators,\\n\\tINoSwappingLiquidationStrategy {\\n\\n  IPool private _treasuryPool;\\n  address payable private _rewardPool;\\n\\n  constructor(\\n    address admin,\\n    address treasuryPoolAddress,\\n    address payable rewardPoolAddress\\n  ) PermissionAdmin(admin) {\\n    _setTreasuryPool(treasuryPoolAddress);\\n    _setRewardPool(rewardPoolAddress);\\n  }\\n\\n  function updateTreasuryPool(address pool) external override onlyAdmin {\\n    _setTreasuryPool(pool);\\n  }\\n\\n  function updateRewardPool(address payable pool) external override onlyAdmin {\\n    _setRewardPool(pool);\\n  }\\n\\n  /** @dev Fast forward tokens from fee pool to treasury pool\\n  * @param sources list of source tokens to liquidate\\n  * @param amounts list of amounts corresponding to each source token\\n  */\\n  function liquidate(IERC20Ext[] calldata sources, uint256[] calldata amounts)\\n\\t\\texternal override\\n\\t{\\n\\t\\t// check for sources and amounts length will be done in fee pool\\n\\t\\t_treasuryPool.withdrawFunds(sources, amounts, _rewardPool);\\n\\t\\temit Liquidated(msg.sender, sources, amounts);\\n\\t}\\n\\n  function treasuryPool() external override view returns (address) {\\n    return address(_treasuryPool);\\n  }\\n\\n  function rewardPool() external override view returns (address) {\\n    return _rewardPool;\\n  }\\n\\n  function _setTreasuryPool(address _pool) internal {\\n    require(_pool != address(0), 'invalid treasury pool');\\n    _treasuryPool = IPool(_pool);\\n    emit TreasuryPoolSet(_pool);\\n  }\\n\\n  function _setRewardPool(address payable _pool) internal {\\n    require(_pool != address(0), 'invalid reward pool');\\n    _rewardPool = _pool;\\n    emit RewardPoolSet(_pool);\\n  }\\n}\\n\"\r\n    },\r\n    \"@kyber.network/utils-sc/contracts/PermissionAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n\\nabstract contract PermissionAdmin {\\n    address public admin;\\n    address public pendingAdmin;\\n\\n    event AdminClaimed(address newAdmin, address previousAdmin);\\n\\n    event TransferAdminPending(address pendingAdmin);\\n\\n    constructor(address _admin) {\\n        require(_admin != address(0), \\\"admin 0\\\");\\n        admin = _admin;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"only admin\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows the current admin to set the pendingAdmin address.\\n     * @param newAdmin The address to transfer ownership to.\\n     */\\n    function transferAdmin(address newAdmin) public onlyAdmin {\\n        require(newAdmin != address(0), \\\"new admin 0\\\");\\n        emit TransferAdminPending(newAdmin);\\n        pendingAdmin = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Allows the current admin to set the admin in one tx. Useful initial deployment.\\n     * @param newAdmin The address to transfer ownership to.\\n     */\\n    function transferAdminQuickly(address newAdmin) public onlyAdmin {\\n        require(newAdmin != address(0), \\\"admin 0\\\");\\n        emit TransferAdminPending(newAdmin);\\n        emit AdminClaimed(newAdmin, admin);\\n        admin = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Allows the pendingAdmin address to finalize the change admin process.\\n     */\\n    function claimAdmin() public {\\n        require(pendingAdmin == msg.sender, \\\"not pending\\\");\\n        emit AdminClaimed(pendingAdmin, admin);\\n        admin = pendingAdmin;\\n        pendingAdmin = address(0);\\n    }\\n}\\n\"\r\n    },\r\n    \"@kyber.network/utils-sc/contracts/PermissionOperators.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./PermissionAdmin.sol\\\";\\n\\n\\nabstract contract PermissionOperators is PermissionAdmin {\\n    uint256 private constant MAX_GROUP_SIZE = 50;\\n\\n    mapping(address => bool) internal operators;\\n    address[] internal operatorsGroup;\\n\\n    event OperatorAdded(address newOperator, bool isAdd);\\n\\n    modifier onlyOperator() {\\n        require(operators[msg.sender], \\\"only operator\\\");\\n        _;\\n    }\\n\\n    function getOperators() external view returns (address[] memory) {\\n        return operatorsGroup;\\n    }\\n\\n    function addOperator(address newOperator) public onlyAdmin {\\n        require(!operators[newOperator], \\\"operator exists\\\"); // prevent duplicates.\\n        require(operatorsGroup.length < MAX_GROUP_SIZE, \\\"max operators\\\");\\n\\n        emit OperatorAdded(newOperator, true);\\n        operators[newOperator] = true;\\n        operatorsGroup.push(newOperator);\\n    }\\n\\n    function removeOperator(address operator) public onlyAdmin {\\n        require(operators[operator], \\\"not operator\\\");\\n        operators[operator] = false;\\n\\n        for (uint256 i = 0; i < operatorsGroup.length; ++i) {\\n            if (operatorsGroup[i] == operator) {\\n                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];\\n                operatorsGroup.pop();\\n                emit OperatorAdded(operator, false);\\n                break;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@kyber.network/utils-sc/contracts/IERC20Ext.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\n/**\\n * @dev Interface extending ERC20 standard to include decimals() as\\n *      it is optional in the OpenZeppelin IERC20 interface.\\n */\\ninterface IERC20Ext is IERC20 {\\n    /**\\n     * @dev This function is required as Kyber requires to interact\\n     *      with token.decimals() with many of its operations.\\n     */\\n    function decimals() external view returns (uint8 digits);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/liquidation/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n\\nimport {IERC20Ext} from '@kyber.network/utils-sc/contracts/IERC20Ext.sol';\\n\\ninterface IPool {\\n\\n  event AuthorizedStrategy(address indexed strategy);\\n  event UnauthorizedStrategy(address indexed strategy);\\n  event Paused(address indexed sender);\\n  event Unpaused(address indexed sender);\\n  event WithdrawToken(\\n    IERC20Ext indexed token,\\n    address indexed sender,\\n    address indexed recipient,\\n    uint256 amount\\n  );\\n\\n  function pause() external;\\n  function unpause() external;\\n  function authorizeStrategies(address[] calldata strategies) external;\\n  function unauthorizeStrategies(address[] calldata strategies) external;\\n  function withdrawFunds(\\n    IERC20Ext[] calldata tokens,\\n    uint256[] calldata amounts,\\n    address payable recipient\\n  ) external;\\n  function isPaused() external view returns (bool);\\n  function isAuthorizedStrategy(address strategy) external view returns (bool);\\n  function getAuthorizedStrategiesLength() external view returns (uint256);\\n  function getAuthorizedStrategyAt(uint256 index) external view returns (address);\\n  function getAllAuthorizedStrategies()\\n    external view returns (address[] memory strategies);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/liquidation/INoSwappingLiquidationStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport {IERC20Ext} from '@kyber.network/utils-sc/contracts/IERC20Ext.sol';\\n\\n\\ninterface INoSwappingLiquidationStrategy {\\n  event TreasuryPoolSet(address indexed treasuryPool);\\n  event RewardPoolSet(address indexed rewardPool);\\n  event Liquidated(address sender, IERC20Ext[] sources, uint256[] amounts);\\n\\n  function updateTreasuryPool(address pool) external;\\n  function updateRewardPool(address payable pool) external;\\n  function liquidate(IERC20Ext[] calldata sources, uint256[] calldata amounts) external;\\n  function treasuryPool() external view returns (address);\\n  function rewardPool() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasuryPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"rewardPoolAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"}],\"name\":\"AdminClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20Ext[]\",\"name\":\"sources\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAdd\",\"type\":\"bool\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardPool\",\"type\":\"address\"}],\"name\":\"RewardPoolSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingAdmin\",\"type\":\"address\"}],\"name\":\"TransferAdminPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasuryPool\",\"type\":\"address\"}],\"name\":\"TreasuryPoolSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Ext[]\",\"name\":\"sources\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminQuickly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"updateRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"updateTreasuryPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NoSwappingLiquidationStrategy","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"0000000000000000000000006758a66cd25fef7767a44895041678fc4ae9afd00000000000000000000000000e590bb5f02a0c38888bffb45dee050b8fb60bda000000000000000000000000d2d0a0557e5b78e29542d440ec968f9253daa2e2","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}