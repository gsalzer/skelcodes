{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.7.4;\r\n\r\ninterface IFlashToken {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function mint(address to, uint256 value) external returns (bool);\r\n\r\n    function burn(uint256 value) external returns (bool);\r\n}\r\n\r\n\r\n// A library for performing overflow-safe math, courtesy of DappHub: https://github.com/dapphub/ds-math/blob/d0ef6d6a5f/src/math.sol\r\n// Modified to include only the essentials\r\nlibrary SafeMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"MATH:: ADD_OVERFLOW\");\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"MATH:: SUB_UNDERFLOW\");\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"MATH:: MUL_OVERFLOW\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"MATH:: DIVISION_BY_ZERO\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary MerkleProof {\r\n    /**\r\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n     * defined by `root`. For this, a `proof` must be provided, containing\r\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n     */\r\n    function verify(\r\n        bytes32[] memory proof,\r\n        bytes32 root,\r\n        bytes32 leaf\r\n    ) internal pure returns (bool) {\r\n        bytes32 computedHash = leaf;\r\n\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            bytes32 proofElement = proof[i];\r\n\r\n            if (computedHash <= proofElement) {\r\n                // Hash(current computed hash + current element of the proof)\r\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\r\n            } else {\r\n                // Hash(current element of the proof + current computed hash)\r\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\r\n            }\r\n        }\r\n\r\n        // Check if the computed hash (root) is equal to the provided root\r\n        return computedHash == root;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract ClaimContract {\r\n    using MerkleProof for bytes;\r\n    using SafeMath for uint256;\r\n\r\n    enum MigrationType { V1_UNCLAIMED, HOLDER, STAKER }\r\n\r\n    address public constant FLASH_TOKEN_V1 = 0xB4467E8D621105312a914F1D42f10770C0Ffe3c8;\r\n    address public constant FLASH_TOKEN_V2 = 0x20398aD62bb2D930646d45a6D4292baa0b860C1f;\r\n    bytes32 public constant MERKLE_ROOT = 0x56dc616cf485d230be34e774839fc4b1b11b0ab99b92d594f7f16f4065f7e814;\r\n    uint256 public constant V1_UNCLAIMED_DEADLINE = 1617235140;\r\n\r\n    mapping(uint256 => uint256) private claimedBitMap;\r\n\r\n    event Claimed(uint256 index, address sender, uint256 amount);\r\n\r\n    function isClaimed(uint256 index) public view returns (bool) {\r\n        uint256 claimedWordIndex = index / 256;\r\n        uint256 claimedBitIndex = index % 256;\r\n        uint256 claimedWord = claimedBitMap[claimedWordIndex];\r\n        uint256 mask = (1 << claimedBitIndex);\r\n        return claimedWord & mask == mask;\r\n    }\r\n\r\n    function _setClaimed(uint256 index) private {\r\n        uint256 claimedWordIndex = index / 256;\r\n        uint256 claimedBitIndex = index % 256;\r\n        claimedBitMap[claimedWordIndex] = claimedBitMap[claimedWordIndex] | (1 << claimedBitIndex);\r\n    }\r\n\r\n    function _getMigratableAmountAndTransferV1(address _user, uint256 _balance) private returns (uint256 flashV2Mint) {\r\n        uint256 flashV1Balance = IFlashToken(FLASH_TOKEN_V1).balanceOf(_user);\r\n        flashV2Mint = flashV1Balance >= _balance ? _balance : flashV1Balance;\r\n        IFlashToken(FLASH_TOKEN_V1).transferFrom(_user, address(this), flashV2Mint);\r\n    }\r\n\r\n    function claim(\r\n        uint256 index,\r\n        uint256 balance,\r\n        uint256 bonusAmount,\r\n        uint256 expiry,\r\n        uint256 expireAfter,\r\n        MigrationType migrationType,\r\n        bytes32[] calldata merkleProof\r\n    ) external {\r\n        require(!isClaimed(index), \"FlashV2Migration: Already claimed.\");\r\n\r\n        address user = msg.sender;\r\n\r\n        require(\r\n            MerkleProof.verify(\r\n                merkleProof,\r\n                MERKLE_ROOT,\r\n                keccak256(\r\n                    abi.encodePacked(index, user, balance, bonusAmount, expiry, expireAfter, uint256(migrationType))\r\n                )\r\n            ),\r\n            \"FlashV2Migration: Invalid proof.\"\r\n        );\r\n\r\n        uint256 flashV2Mint = balance;\r\n\r\n        if (migrationType == MigrationType.V1_UNCLAIMED) {\r\n            require(block.timestamp <= V1_UNCLAIMED_DEADLINE, \"FlashV2Migration: V1 claim time expired.\");\r\n        } else if (migrationType == MigrationType.HOLDER) {\r\n            flashV2Mint = _getMigratableAmountAndTransferV1(user, balance);\r\n        } else if (migrationType == MigrationType.STAKER) {\r\n            if (expireAfter > block.timestamp) {\r\n                uint256 burnAmount = balance.mul(expireAfter.sub(block.timestamp)).mul(75e16).div(expiry.mul(1e18));\r\n                flashV2Mint = balance.sub(burnAmount);\r\n            }\r\n        } else {\r\n            revert(\"FlashV2Migration: Invalid migration type\");\r\n        }\r\n\r\n        _setClaimed(index);\r\n\r\n        IFlashToken(FLASH_TOKEN_V2).mint(user, flashV2Mint.add(bonusAmount));\r\n\r\n        emit Claimed(index, user, flashV2Mint);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FLASH_TOKEN_V1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FLASH_TOKEN_V2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MERKLE_ROOT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"V1_UNCLAIMED_DEADLINE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expireAfter\",\"type\":\"uint256\"},{\"internalType\":\"enum ClaimContract.MigrationType\",\"name\":\"migrationType\",\"type\":\"uint8\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ClaimContract","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4a689a2d87519d04da4bef5245af63e1a0fb43921126f5ce7d4cc3ecfea80677"}]}