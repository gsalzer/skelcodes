{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/OpenOracleFrameworkTWAP.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\ninterface IOpenOracleFramework {\\r\\n    /**\\r\\n    * @dev getHistoricalFeeds function lets the caller receive historical values for a given timestamp\\r\\n    *\\r\\n    * @param feedIDs the array of feedIds\\r\\n    * @param timestamps the array of timestamps\\r\\n    */\\r\\n    function getHistoricalFeeds(uint256[] memory feedIDs, uint256[] memory timestamps) external view returns (uint256[] memory);\\r\\n\\r\\n    /**\\r\\n    * @dev getFeeds function lets anyone call the oracle to receive data (maybe pay an optional fee)\\r\\n    *\\r\\n    * @param feedIDs the array of feedIds\\r\\n    */\\r\\n    function getFeeds(uint256[] memory feedIDs) external view returns (uint256[] memory, uint256[] memory, uint256[] memory);\\r\\n\\r\\n    /**\\r\\n    * @dev getFeed function lets anyone call the oracle to receive data (maybe pay an optional fee)\\r\\n    *\\r\\n    * @param feedID the array of feedId\\r\\n    */\\r\\n    function getFeed(uint256 feedID) external view returns (uint256, uint256, uint256);\\r\\n\\r\\n    /**\\r\\n    * @dev getFeedList function returns the metadata of a feed\\r\\n    *\\r\\n    * @param feedIDs the array of feedId\\r\\n    */\\r\\n    function getFeedList(uint256[] memory feedIDs) external view returns(string[] memory, uint256[] memory, uint256[] memory, uint256[] memory, uint256[] memory);\\r\\n}\\r\\n\\r\\ncontract OOFTWAP {\\r\\n\\r\\n    // using Openzeppelin contracts for SafeMath and Address\\r\\n    using Address for address;\\r\\n\\r\\n    constructor() {\\r\\n        \\r\\n    }\\r\\n\\r\\n    //---------------------------view functions ---------------------------\\r\\n\\r\\n    function getTWAP(IOpenOracleFramework OOFContract, uint256[] memory feedIDs, uint256[] memory timestampstart, uint256[] memory timestampfinish, bool strictMode) external view returns (uint256[] memory TWAP) {\\r\\n\\r\\n            uint256 feedLen = feedIDs.length;\\r\\n            TWAP = new uint256[](feedLen);\\r\\n            uint256[] memory timeslot = new uint256[](feedLen);\\r\\n\\r\\n            require(feedIDs.length == timestampstart.length && feedIDs.length == timestampfinish.length, \\\"Feeds and Timestamps must match\\\");\\r\\n\\r\\n            (,,timeslot,,) = OOFContract.getFeedList(feedIDs);\\r\\n\\r\\n            for (uint c = 0; c < feedLen; c++) {\\r\\n\\r\\n                uint256 twapCount = timestampfinish[c] / timeslot[c] - timestampstart[c] / timeslot[c] + 1;\\r\\n                uint256[] memory twapFeedIDs = new uint256[](twapCount);\\r\\n                uint256[] memory timestampToCheck = new uint256[](twapCount);\\r\\n                uint256 twapTotal;\\r\\n\\r\\n                uint256[] memory totals = new uint256[](twapCount);\\r\\n\\r\\n                for (uint s = 0; s < twapCount; s++) {\\r\\n                    timestampToCheck[s] = timestampstart[c] + s * timeslot[c];\\r\\n                    twapFeedIDs[s] = feedIDs[c];\\r\\n                }\\r\\n\\r\\n                totals = OOFContract.getHistoricalFeeds(twapFeedIDs, timestampToCheck);\\r\\n\\r\\n                uint256 twapLen;\\r\\n\\r\\n                if (strictMode) {\\r\\n                    require(totals[0] != 0 && totals[totals.length-1] != 0, \\\"Strict Mode: no 0 values for first and last element\\\");\\r\\n                }\\r\\n\\r\\n                for (uint t = 0; t < totals.length; t++){\\r\\n                    if (totals[t] != 0) {\\r\\n                        twapTotal += totals[t];\\r\\n                        twapLen += 1;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                if (twapLen > 0) {\\r\\n                    TWAP[c] = twapTotal / twapLen;\\r\\n                } else {\\r\\n                    TWAP[c] = 0;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            return (TWAP);\\r\\n    }\\r\\n\\r\\n    function lastTWAP(IOpenOracleFramework OOFContract, uint256[] memory feedIDs, uint256[] memory timeWindows) external view returns (uint256[] memory TWAP) {\\r\\n\\r\\n        TWAP = new uint256[](feedIDs.length);\\r\\n        uint256[] memory timeslot = new uint256[](feedIDs.length);\\r\\n\\r\\n        (,,timeslot,,) = OOFContract.getFeedList(feedIDs);\\r\\n\\r\\n        for (uint c = 0; c < feedIDs.length; c++) {\\r\\n            uint256 timestampfinish = block.timestamp;\\r\\n            uint256 timestampstart = timestampfinish - timeWindows[c];\\r\\n\\r\\n            uint256 twapCount = timestampfinish / timeslot[c] - timestampstart / timeslot[c] + 1;\\r\\n            uint256[] memory twapFeedIDs = new uint256[](twapCount);\\r\\n            uint256[] memory timestampToCheck = new uint256[](twapCount);\\r\\n            uint256 twapTotal;\\r\\n\\r\\n            uint256[] memory totals = new uint256[](twapCount);\\r\\n\\r\\n            for (uint s = 0; s < twapCount; s++) {\\r\\n                timestampToCheck[s] = timestampstart + s * timeslot[c];\\r\\n                twapFeedIDs[s] = feedIDs[c];\\r\\n            }\\r\\n\\r\\n            totals = OOFContract.getHistoricalFeeds(twapFeedIDs, timestampToCheck);\\r\\n\\r\\n            uint256 twapLen;\\r\\n\\r\\n            for (uint t = 0; t < totals.length; t++){\\r\\n                if (totals[t] != 0) {\\r\\n                    twapTotal += totals[t];\\r\\n                    twapLen += 1;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (twapLen > 0) {\\r\\n                uint256 feedValue;\\r\\n                (feedValue,,) = OOFContract.getFeed(feedIDs[c]);\\r\\n                TWAP[c] = (twapTotal + feedValue) / (twapLen + 1);\\r\\n            } else {\\r\\n                TWAP[c] = 0;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (TWAP);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contract IOpenOracleFramework\",\"name\":\"OOFContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"feedIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"timestampstart\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"timestampfinish\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"strictMode\",\"type\":\"bool\"}],\"name\":\"getTWAP\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"TWAP\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOpenOracleFramework\",\"name\":\"OOFContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"feedIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"timeWindows\",\"type\":\"uint256[]\"}],\"name\":\"lastTWAP\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"TWAP\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"OOFTWAP","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}