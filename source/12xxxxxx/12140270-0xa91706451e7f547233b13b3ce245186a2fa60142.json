{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.7.0;\r\n\r\ninterface ILpStaking {\r\n    function feeWithdraw(address to) external;\r\n    function setFeeRate(uint256 _feeRate) external;\r\n    function setEmergencyStop(bool _emergencyStop) external;\r\n    function getAccumulateFee() external view returns (uint256);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface IStakingRewardsWbtc {\r\n    function notifyRewardAmount(uint256 reward, uint256 duration) external;\r\n}\r\n\r\n\r\ncontract MarsLpStakingController {\r\n    bool internal initialized;\r\n    // 不需要owner，不需要operator的设置接口，私钥泄露了直接更新实现合约即可\r\n    address public operator;\r\n    address public wbtc;\r\n    address public weth;\r\n    address public marsStakingForWbtc;\r\n    address public wbtc_weth_pair;\r\n    address[] public lpStakings;\r\n    mapping(address => address) stakingRewardToken;\r\n\r\n    function initialize(address _operator) public {\r\n        require(!initialized, \"already initialized\");\r\n        initialized = true;\r\n        operator = _operator;\r\n        // mainnet\r\n        wbtc = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\r\n        weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n        wbtc_weth_pair = 0xBb2b8038a1640196FbE3e38816F3e67Cba72D940;\r\n        marsStakingForWbtc = 0x51a710218eC2ba2Ac459ee28ec37c6dF7fe18E11;\r\n        // testnet\r\n//        wbtc = 0x5F2D686E3141Cd1E16b0FE1e80f5CF8e128351aB;\r\n//        weth = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\r\n//        wbtc_weth_pair = 0x393244f2D96035c04aF658E0C7e70a3dd174e6B2;\r\n//        marsStakingForWbtc = 0x0bEC73826299C21fD4F6D10E485C02A670aa6bb7;\r\n    }\r\n\r\n    function setLpStakingFeeRate(address staking, uint256 _feeRate) external onlyOperator {\r\n        require(stakingRewardToken[staking] != address(0), \"not added.\");\r\n        ILpStaking(staking).setFeeRate(_feeRate);\r\n    }\r\n\r\n    function addStakingAndRewardToken(address staking, address rewardToken) external onlyOperator {\r\n        require(stakingRewardToken[staking] == address(0), \"already added.\");\r\n        lpStakings.push(staking);\r\n        stakingRewardToken[staking] = rewardToken;\r\n    }\r\n\r\n    // minimalWbtcPrice 为 btc / eth 价格. 当前价格下输入30即可\r\n    function distributeReward(uint256 minimalWbtcPrice) external onlyOperator {\r\n        uint256 totalWbtc = 0;\r\n        for (uint256 i=0; i<lpStakings.length; i++) {\r\n            address lpStaking = lpStakings[i];\r\n            address rewardToken = stakingRewardToken[lpStaking];\r\n            uint256 accumulateFee = ILpStaking(lpStaking).getAccumulateFee();\r\n            if (rewardToken == wbtc) {\r\n                ILpStaking(lpStaking).feeWithdraw(marsStakingForWbtc);\r\n                totalWbtc += accumulateFee;\r\n            } else {\r\n                ILpStaking(lpStaking).feeWithdraw(address(this));\r\n                IWETH(weth).deposit{value: accumulateFee}();\r\n                assert(IWETH(weth).transfer(wbtc_weth_pair, accumulateFee));\r\n                (uint256 wbtcReserve, uint256 wethReserve, ) = IUniswapV2Pair(wbtc_weth_pair).getReserves();\r\n                uint256 amountOut = getAmountOut(accumulateFee, wethReserve, wbtcReserve);\r\n                uint256 actualPrice = accumulateFee / 1e10 / amountOut;\r\n                require(actualPrice >= minimalWbtcPrice, \"price move\");\r\n                IUniswapV2Pair(wbtc_weth_pair).swap(amountOut, 0, marsStakingForWbtc, new bytes(0));\r\n                totalWbtc += amountOut;\r\n            }\r\n        }\r\n\r\n        if (totalWbtc > 0) {\r\n            IStakingRewardsWbtc(marsStakingForWbtc).notifyRewardAmount(totalWbtc, 864000);\r\n        }\r\n    }\r\n\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) public pure returns (uint amountOut) {\r\n        require(amountIn > 0, 'MarsStakingController: INSUFFICIENT_INPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'MarsStakingController: INSUFFICIENT_LIQUIDITY');\r\n        uint amountInWithFee = amountIn * 997;\r\n        uint numerator = amountInWithFee * reserveOut;\r\n        uint denominator = reserveIn * 1000 + amountInWithFee;\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(msg.sender == operator, \"!operator\");\r\n        _;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"addStakingAndRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimalWbtcPrice\",\"type\":\"uint256\"}],\"name\":\"distributeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpStakings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marsStakingForWbtc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"name\":\"setLpStakingFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbtc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbtc_weth_pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"MarsLpStakingController","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://54ddd9b6d1e00e53f066df309a3c164eb0349ab7df0754761dc39560943339d2"}]}