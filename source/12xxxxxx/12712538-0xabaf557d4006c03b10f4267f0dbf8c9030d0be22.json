{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/C/Users/I324994/timeBank/contracts/Crowdsale.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Crowdsale\\r\\n * @dev Crowdsale is a base contract for managing a token crowdsale,\\r\\n * allowing investors to purchase tokens with ether. This contract implements\\r\\n * such functionality in its most fundamental form and can be extended to provide additional\\r\\n * functionality and/or custom behavior.\\r\\n * The external interface represents the basic interface for purchasing tokens, and conforms\\r\\n * the base architecture for crowdsales. It is *not* intended to be modified / overridden.\\r\\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\\r\\n * the methods to add functionality. Consider using 'super' where appropriate to concatenate\\r\\n * behavior.\\r\\n */\\r\\ncontract Crowdsale is ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // The token being sold\\r\\n    IERC20 private _token;\\r\\n\\r\\n    // Address where funds are collected\\r\\n    address payable private _wallet;\\r\\n\\r\\n    // How many token units a buyer gets per wei.\\r\\n    // The rate is the conversion between wei and the smallest and indivisible token unit.\\r\\n    // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\\r\\n    // 1 wei will give you 1 unit, or 0.001 TOK.\\r\\n    uint256 private _rate;\\r\\n\\r\\n  struct _DateTime {\\r\\n        uint16 year;\\r\\n        uint8 month;\\r\\n        uint8 day;\\r\\n        uint8 hour;\\r\\n        uint8 minute;\\r\\n        uint8 second;\\r\\n        uint8 weekday;\\r\\n    }\\r\\n    uint256 initialMonth;\\r\\n    uint256 initialYear;\\r\\n    uint256 constant DAY_IN_SECONDS = 86400;\\r\\n    uint256 constant YEAR_IN_SECONDS = 31536000;\\r\\n    uint256 constant LEAP_YEAR_IN_SECONDS = 31622400;\\r\\n\\r\\n    uint256 constant HOUR_IN_SECONDS = 3600;\\r\\n    uint256 constant MINUTE_IN_SECONDS = 60;\\r\\n\\r\\n    uint16 constant ORIGIN_YEAR = 1970;\\r\\n\\r\\n    // Amount of wei raised\\r\\n    uint256 private _weiRaised;\\r\\n\\r\\n    /**\\r\\n     * Event for token purchase logging\\r\\n     * @param purchaser who paid for the tokens\\r\\n     * @param beneficiary who got the tokens\\r\\n     * @param value weis paid for purchase\\r\\n     * @param amount amount of tokens purchased\\r\\n     */\\r\\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @param rate Number of token units a buyer gets per wei\\r\\n     * @dev The rate is the conversion between wei and the smallest and indivisible\\r\\n     * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\\r\\n     * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\\r\\n     * @param wallet Address where collected funds will be forwarded to\\r\\n     * @param token Address of the token being sold\\r\\n     */\\r\\n    constructor (uint256 rate, address payable wallet, IERC20 token) public {\\r\\n        require(rate > 0, \\\"Crowdsale: rate is 0\\\");\\r\\n        require(wallet != address(0), \\\"Crowdsale: wallet is the zero address\\\");\\r\\n        require(address(token) != address(0), \\\"Crowdsale: token is the zero address\\\");\\r\\n        initialMonth = getMonth(block.timestamp);\\r\\n        initialYear = getYear(block.timestamp);\\r\\n        _rate = rate;\\r\\n        _wallet = wallet;\\r\\n        _token = token;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev fallback function ***DO NOT OVERRIDE***\\r\\n     * Note that other contracts will transfer funds with a base gas stipend\\r\\n     * of 2300, which is not enough to call buyTokens. Consider calling\\r\\n     * buyTokens directly when purchasing tokens from a contract.\\r\\n     */\\r\\n    receive () external payable {\\r\\n        buyTokens(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the token being sold.\\r\\n     */\\r\\n    function token() public view returns (IERC20) {\\r\\n        return _token;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the address where funds are collected.\\r\\n     */\\r\\n    function wallet() public view returns (address payable) {\\r\\n        return _wallet;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the number of token units a buyer gets per wei.\\r\\n     */\\r\\n    function rate() public view virtual returns (uint256) {\\r\\n        return _rate;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the amount of wei raised.\\r\\n     */\\r\\n    function weiRaised() public view returns (uint256) {\\r\\n        return _weiRaised;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev low level token purchase ***DO NOT OVERRIDE***\\r\\n     * This function has a non-reentrancy guard, so it shouldn't be called by\\r\\n     * another `nonReentrant` function.\\r\\n     * @param beneficiary Recipient of the token purchase\\r\\n     */\\r\\n    function buyTokens(address beneficiary) public nonReentrant payable {\\r\\n        uint256 weiAmount = msg.value;\\r\\n        uint256 divbase = getMonth(block.timestamp) - initialMonth + 1 + 12 * (getYear(block.timestamp) - initialYear);\\r\\n        _rate = DAY_IN_SECONDS.div(divbase) ;\\r\\n        _preValidatePurchase(beneficiary, weiAmount);\\r\\n\\r\\n        // calculate token amount to be created\\r\\n        uint256 tokens = _getTokenAmount(weiAmount);\\r\\n\\r\\n        // update state\\r\\n        _weiRaised = _weiRaised.add(weiAmount);\\r\\n\\r\\n        _processPurchase(beneficiary, tokens);\\r\\n        emit TokensPurchased(msg.sender, beneficiary, weiAmount, tokens);\\r\\n\\r\\n        _updatePurchasingState(beneficiary, weiAmount);\\r\\n\\r\\n        _forwardFunds();\\r\\n        _postValidatePurchase(beneficiary, weiAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met.\\r\\n     * Use `super` in contracts that inherit from Crowdsale to extend their validations.\\r\\n     * Example from CappedCrowdsale.sol's _preValidatePurchase method:\\r\\n     *     super._preValidatePurchase(beneficiary, weiAmount);\\r\\n     *     require(weiRaised().add(weiAmount) <= cap);\\r\\n     * @param beneficiary Address performing the token purchase\\r\\n     * @param weiAmount Value in wei involved in the purchase\\r\\n     */\\r\\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view virtual {\\r\\n        require(beneficiary != address(0), \\\"Crowdsale: beneficiary is the zero address\\\");\\r\\n        require(weiAmount != 0, \\\"Crowdsale: weiAmount is 0\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid\\r\\n     * conditions are not met.\\r\\n     * @param beneficiary Address performing the token purchase\\r\\n     * @param weiAmount Value in wei involved in the purchase\\r\\n     */\\r\\n    function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal view virtual{\\r\\n        // solhint-disable-previous-line no-empty-blocks\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends\\r\\n     * its tokens.\\r\\n     * @param beneficiary Address performing the token purchase\\r\\n     * @param tokenAmount Number of tokens to be emitted\\r\\n     */\\r\\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal virtual{\\r\\n        _token.safeTransfer(beneficiary, tokenAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Executed when a purchase has been validated and is ready to be executed. Doesn't necessarily emit/send\\r\\n     * tokens.\\r\\n     * @param beneficiary Address receiving the tokens\\r\\n     * @param tokenAmount Number of tokens to be purchased\\r\\n     */\\r\\n    function _processPurchase(address beneficiary, uint256 tokenAmount) internal virtual{\\r\\n        _deliverTokens(beneficiary, tokenAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override for extensions that require an internal state to check for validity (current user contributions,\\r\\n     * etc.)\\r\\n     * @param beneficiary Address receiving the tokens\\r\\n     * @param weiAmount Value in wei involved in the purchase\\r\\n     */\\r\\n    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal virtual{\\r\\n        // solhint-disable-previous-line no-empty-blocks\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override to extend the way in which ether is converted to tokens.\\r\\n     * @param weiAmount Value in wei to be converted into tokens\\r\\n     * @return Number of tokens that can be purchased with the specified _weiAmount\\r\\n     */\\r\\n    function _getTokenAmount(uint256 weiAmount) internal view virtual returns (uint256) {\\r\\n        return weiAmount.mul(_rate);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Determines how ETH is stored/forwarded on purchases.\\r\\n     */\\r\\n    function _forwardFunds() internal virtual{\\r\\n        _wallet.transfer(msg.value);\\r\\n    }\\r\\n\\r\\n     function leapYearsBefore(uint256 year) internal pure returns (uint256) {\\r\\n        year -= 1;\\r\\n        return year / 4 - year / 100 + year / 400;\\r\\n    }\\r\\n\\r\\n    function isLeapYear(uint16 year) internal pure returns (bool) {\\r\\n        if (year % 4 != 0) {\\r\\n            return false;\\r\\n        }\\r\\n        if (year % 100 != 0) {\\r\\n            return true;\\r\\n        }\\r\\n        if (year % 400 != 0) {\\r\\n            return false;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getDaysInMonth(uint8 month, uint16 year)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint8)\\r\\n    {\\r\\n        if (\\r\\n            month == 1 ||\\r\\n            month == 3 ||\\r\\n            month == 5 ||\\r\\n            month == 7 ||\\r\\n            month == 8 ||\\r\\n            month == 10 ||\\r\\n            month == 12\\r\\n        ) {\\r\\n            return 31;\\r\\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\\r\\n            return 30;\\r\\n        } else if (isLeapYear(year)) {\\r\\n            return 29;\\r\\n        } else {\\r\\n            return 28;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getMonth(uint256 timestamp) internal pure returns (uint8) {\\r\\n        return parseTimestamp(timestamp).month;\\r\\n    }\\r\\n\\r\\n    function getDay(uint256 timestamp) internal pure returns (uint8) {\\r\\n        return parseTimestamp(timestamp).day;\\r\\n    }\\r\\n\\r\\n    function getHour(uint256 timestamp) internal pure returns (uint8) {\\r\\n        return uint8((timestamp / 60 / 60) % 24);\\r\\n    }\\r\\n\\r\\n    function getMinute(uint256 timestamp) internal pure returns (uint8) {\\r\\n        return uint8((timestamp / 60) % 60);\\r\\n    }\\r\\n\\r\\n    function getSecond(uint256 timestamp) internal pure returns (uint8) {\\r\\n        return uint8(timestamp % 60);\\r\\n    }\\r\\n\\r\\n    function getWeekday(uint256 timestamp) internal pure returns (uint8) {\\r\\n        return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\\r\\n    }\\r\\n\\r\\n    function parseTimestamp(uint256 timestamp)\\r\\n        internal\\r\\n        pure\\r\\n        returns (_DateTime memory dt)\\r\\n    {\\r\\n        uint256 secondsAccountedFor = 0;\\r\\n        uint256 buf;\\r\\n        uint8 i;\\r\\n\\r\\n        // Year\\r\\n        dt.year = getYear(timestamp);\\r\\n        buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\\r\\n\\r\\n        secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\\r\\n        secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\\r\\n\\r\\n        // Month\\r\\n        uint256 secondsInMonth;\\r\\n        for (i = 1; i <= 12; i++) {\\r\\n            secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\\r\\n            if (secondsInMonth + secondsAccountedFor > timestamp) {\\r\\n                dt.month = i;\\r\\n                break;\\r\\n            }\\r\\n            secondsAccountedFor += secondsInMonth;\\r\\n        }\\r\\n\\r\\n        // Day\\r\\n        for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\\r\\n            if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\\r\\n                dt.day = i;\\r\\n                break;\\r\\n            }\\r\\n            secondsAccountedFor += DAY_IN_SECONDS;\\r\\n        }\\r\\n\\r\\n        // Hour\\r\\n        dt.hour = getHour(timestamp);\\r\\n\\r\\n        // Minute\\r\\n        dt.minute = getMinute(timestamp);\\r\\n\\r\\n        // Second\\r\\n        dt.second = getSecond(timestamp);\\r\\n\\r\\n        // Day of week.\\r\\n        dt.weekday = getWeekday(timestamp);\\r\\n    }\\r\\n\\r\\n    function getYear(uint256 timestamp) internal pure returns (uint16) {\\r\\n        uint256 secondsAccountedFor = 0;\\r\\n        uint16 year;\\r\\n        uint256 numLeapYears;\\r\\n\\r\\n        // Year\\r\\n        year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\\r\\n        numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\\r\\n\\r\\n        secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\\r\\n        secondsAccountedFor +=\\r\\n            YEAR_IN_SECONDS *\\r\\n            (year - ORIGIN_YEAR - numLeapYears);\\r\\n\\r\\n        while (secondsAccountedFor > timestamp) {\\r\\n            if (isLeapYear(uint16(year - 1))) {\\r\\n                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\\r\\n            } else {\\r\\n                secondsAccountedFor -= YEAR_IN_SECONDS;\\r\\n            }\\r\\n            year -= 1;\\r\\n        }\\r\\n        return year;\\r\\n    }\\r\\n\\r\\n\\r\\n}\"\r\n    },\r\n    \"/C/Users/I324994/timeBank/contracts/TimeBank.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\nimport \\\"./Crowdsale.sol\\\";\\r\\n\\r\\ncontract TimeBank is Crowdsale {\\r\\n\\r\\n    address timeGuardian;\\r\\n    constructor(\\r\\n        uint256 rate,    // the hour rate\\r\\n        address payable wallet,\\r\\n        IERC20 token\\r\\n    )\\r\\n        Crowdsale(rate, wallet, token)\\r\\n        public\\r\\n    {\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n *\\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\\n * metering changes introduced in the Istanbul hardfork.\\n */\\ncontract ReentrancyGuard {\\n    bool private _notEntered;\\n\\n    constructor () internal {\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"TimeBank","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000151800000000000000000000000008e453be8b6a83334c2dd75d142f986faf7a882df000000000000000000000000909a89f5c898179293cf39422c7f75be830c7439","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}