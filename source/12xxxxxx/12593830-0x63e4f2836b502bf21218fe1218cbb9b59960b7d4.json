{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"deploy/@jarvis-network/uma-core/contracts/common/implementation/FixedPoint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../../../../@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../../../../../@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\n\\n/**\\n * @title Library for fixed point arithmetic on uints\\n */\\nlibrary FixedPoint {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For unsigned values:\\n    //   This can represent a value up to (2^256 - 1)/10^18 = ~10^59. 10^59 will be stored internally as uint256 10^77.\\n    uint256 private constant FP_SCALING_FACTOR = 10**18;\\n\\n    // --------------------------------------- UNSIGNED -----------------------------------------------------------------------------\\n    struct Unsigned {\\n        uint256 rawValue;\\n    }\\n\\n    /**\\n     * @notice Constructs an `Unsigned` from an unscaled uint, e.g., `b=5` gets stored internally as `5*(10**18)`.\\n     * @param a uint to convert into a FixedPoint.\\n     * @return the converted FixedPoint.\\n     */\\n    function fromUnscaledUint(uint256 a) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.mul(FP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue == fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue > fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue >= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue < fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue <= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Unsigned` to an unscaled uint, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return add(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled uint256 from an `Unsigned`, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return sub(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Unsigned` from an unscaled uint256, reverting on overflow.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return sub(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as a uint256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because FP_SCALING_FACTOR != 0.\\n        return Unsigned(a.rawValue.mul(b.rawValue) / FP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        uint256 mulRaw = a.rawValue.mul(b.rawValue);\\n        uint256 mulFloor = mulRaw / FP_SCALING_FACTOR;\\n        uint256 mod = mulRaw.mod(FP_SCALING_FACTOR);\\n        if (mod != 0) {\\n            return Unsigned(mulFloor.add(1));\\n        } else {\\n            return Unsigned(mulFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as a uint256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Unsigned(a.rawValue.mul(FP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled uint256 by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a uint256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return div(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        uint256 aScaled = a.rawValue.mul(FP_SCALING_FACTOR);\\n        uint256 divFloor = aScaled.div(b.rawValue);\\n        uint256 mod = aScaled.mod(b.rawValue);\\n        if (mod != 0) {\\n            return Unsigned(divFloor.add(1));\\n        } else {\\n            return Unsigned(divFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Unsigned(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with a uint256 as the second parameter. Therefore we need to convert b into an Unsigned.\\n        // This creates the possibility of overflow if b is very large.\\n        return divCeil(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Unsigned` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory output) {\\n        output = fromUnscaledUint(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n\\n    // ------------------------------------------------- SIGNED -------------------------------------------------------------\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For signed values:\\n    //   This can represent a value up (or down) to +-(2^255 - 1)/10^18 = ~10^58. 10^58 will be stored internally as int256 10^76.\\n    int256 private constant SFP_SCALING_FACTOR = 10**18;\\n\\n    struct Signed {\\n        int256 rawValue;\\n    }\\n\\n    function fromSigned(Signed memory a) internal pure returns (Unsigned memory) {\\n        require(a.rawValue >= 0, \\\"Negative value provided\\\");\\n        return Unsigned(uint256(a.rawValue));\\n    }\\n\\n    function fromUnsigned(Unsigned memory a) internal pure returns (Signed memory) {\\n        require(a.rawValue <= uint256(type(int256).max), \\\"Unsigned too large\\\");\\n        return Signed(int256(a.rawValue));\\n    }\\n\\n    /**\\n     * @notice Constructs a `Signed` from an unscaled int, e.g., `b=5` gets stored internally as `5*(10**18)`.\\n     * @param a int to convert into a FixedPoint.Signed.\\n     * @return the converted FixedPoint.Signed.\\n     */\\n    function fromUnscaledInt(int256 a) internal pure returns (Signed memory) {\\n        return Signed(a.mul(SFP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a int256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue == fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue > fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue >= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue < fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue <= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Signed` to an unscaled int, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return add(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled int256 from an `Signed`, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return sub(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Signed` from an unscaled int256, reverting on overflow.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n        return sub(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as an int256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because SFP_SCALING_FACTOR != 0.\\n        return Signed(a.rawValue.mul(b.rawValue) / SFP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        int256 mulRaw = a.rawValue.mul(b.rawValue);\\n        int256 mulTowardsZero = mulRaw / SFP_SCALING_FACTOR;\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = mulRaw % SFP_SCALING_FACTOR;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(mulTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(mulTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as an int256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Signed(a.rawValue.mul(SFP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled int256 by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a an int256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n        return div(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        int256 aScaled = a.rawValue.mul(SFP_SCALING_FACTOR);\\n        int256 divTowardsZero = aScaled.div(b.rawValue);\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = aScaled % b.rawValue;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(divTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(divTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Signed(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with an int256 as the second parameter. Therefore we need to convert b into an Signed.\\n        // This creates the possibility of overflow if b is very large.\\n        return divAwayFromZero(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Signed` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a uint256 (negative exponents are not allowed).\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Signed memory a, uint256 b) internal pure returns (Signed memory output) {\\n        output = fromUnscaledInt(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/math/SignedSafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/derivative/common/FeePayerPartyLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from '../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {\\n  StoreInterface\\n} from '../../../@jarvis-network/uma-core/contracts/oracle/interfaces/StoreInterface.sol';\\nimport {SafeERC20} from '../../../@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport {\\n  FixedPoint\\n} from '../../../@jarvis-network/uma-core/contracts/common/implementation/FixedPoint.sol';\\nimport {FeePayerParty} from './FeePayerParty.sol';\\n\\n/** @notice - A library to support FeePayerParty contract\\n */\\nlibrary FeePayerPartyLib {\\n  using FixedPoint for FixedPoint.Unsigned;\\n  using FeePayerPartyLib for FixedPoint.Unsigned;\\n  using SafeERC20 for IERC20;\\n\\n  //----------------------------------------\\n  // Events\\n  //----------------------------------------\\n\\n  event RegularFeesPaid(uint256 indexed regularFee, uint256 indexed lateFee);\\n  event FinalFeesPaid(uint256 indexed amount);\\n\\n  //----------------------------------------\\n  // External functions\\n  //----------------------------------------\\n\\n  // Pays UMA DVM regular fees (as a % of the collateral pool) to the Store contract.\\n  // These must be paid periodically for the life of the contract. If the contract has not paid its regular fee\\n  // in a week or more then a late penalty is applied which is sent to the caller. If the amount of\\n  // fees owed are greater than the pfc, then this will pay as much as possible from the available collateral.\\n  // An event is only fired if the fees charged are greater than 0.\\n  function payRegularFees(\\n    FeePayerParty.FeePayerData storage feePayerData,\\n    StoreInterface store,\\n    uint256 time,\\n    FixedPoint.Unsigned memory collateralPool\\n  ) external returns (FixedPoint.Unsigned memory totalPaid) {\\n    // Exit early if there is no collateral from which to pay fees.\\n    if (collateralPool.isEqual(0)) {\\n      // Note: set the lastPaymentTime in this case so the contract is credited for paying during periods when it\\n      // has no locked collateral.\\n      feePayerData.lastPaymentTime = time;\\n      return totalPaid;\\n    }\\n\\n    // Exit early if fees were already paid during this block.\\n    if (feePayerData.lastPaymentTime == time) {\\n      return totalPaid;\\n    }\\n\\n    FixedPoint.Unsigned memory regularFee;\\n    FixedPoint.Unsigned memory latePenalty;\\n\\n    (regularFee, latePenalty) = store.computeRegularFee(\\n      feePayerData.lastPaymentTime,\\n      time,\\n      collateralPool\\n    );\\n    feePayerData.lastPaymentTime = time;\\n\\n    totalPaid = regularFee.add(latePenalty);\\n    if (totalPaid.isEqual(0)) {\\n      return totalPaid;\\n    }\\n\\n    // If the effective fees paid as a % of the pfc is > 100%, then we need to reduce it and make the contract pay\\n    // as much of the fee that it can (up to 100% of its pfc). We'll reduce the late penalty first and then the\\n    // regular fee, which has the effect of paying the store first, followed by the caller if there is any fee remaining.\\n    if (totalPaid.isGreaterThan(collateralPool)) {\\n      FixedPoint.Unsigned memory deficit = totalPaid.sub(collateralPool);\\n      FixedPoint.Unsigned memory latePenaltyReduction =\\n        FixedPoint.min(latePenalty, deficit);\\n      latePenalty = latePenalty.sub(latePenaltyReduction);\\n      deficit = deficit.sub(latePenaltyReduction);\\n      regularFee = regularFee.sub(FixedPoint.min(regularFee, deficit));\\n      totalPaid = collateralPool;\\n    }\\n\\n    emit RegularFeesPaid(regularFee.rawValue, latePenalty.rawValue);\\n\\n    feePayerData.cumulativeFeeMultiplier._adjustCumulativeFeeMultiplier(\\n      totalPaid,\\n      collateralPool\\n    );\\n\\n    if (regularFee.isGreaterThan(0)) {\\n      feePayerData.collateralCurrency.safeIncreaseAllowance(\\n        address(store),\\n        regularFee.rawValue\\n      );\\n      store.payOracleFeesErc20(\\n        address(feePayerData.collateralCurrency),\\n        regularFee\\n      );\\n    }\\n\\n    if (latePenalty.isGreaterThan(0)) {\\n      feePayerData.collateralCurrency.safeTransfer(\\n        msg.sender,\\n        latePenalty.rawValue\\n      );\\n    }\\n    return totalPaid;\\n  }\\n\\n  // Pays UMA Oracle final fees of `amount` in `collateralCurrency` to the Store contract. Final fee is a flat fee\\n  // charged for each price request. If payer is the contract, adjusts internal bookkeeping variables. If payer is not\\n  // the contract, pulls in `amount` of collateral currency.\\n  function payFinalFees(\\n    FeePayerParty.FeePayerData storage feePayerData,\\n    StoreInterface store,\\n    address payer,\\n    FixedPoint.Unsigned memory amount\\n  ) external {\\n    if (amount.isEqual(0)) {\\n      return;\\n    }\\n\\n    // Pull the collateral from the payer.\\n    feePayerData.collateralCurrency.safeTransferFrom(\\n      payer,\\n      address(this),\\n      amount.rawValue\\n    );\\n\\n    emit FinalFeesPaid(amount.rawValue);\\n\\n    feePayerData.collateralCurrency.safeIncreaseAllowance(\\n      address(store),\\n      amount.rawValue\\n    );\\n    store.payOracleFeesErc20(address(feePayerData.collateralCurrency), amount);\\n  }\\n\\n  //Call to the internal one (see _getFeeAdjustedCollateral)\\n  function getFeeAdjustedCollateral(\\n    FixedPoint.Unsigned memory rawCollateral,\\n    FixedPoint.Unsigned memory cumulativeFeeMultiplier\\n  ) external pure returns (FixedPoint.Unsigned memory collateral) {\\n    return rawCollateral._getFeeAdjustedCollateral(cumulativeFeeMultiplier);\\n  }\\n\\n  // Decrease rawCollateral by a fee-adjusted collateralToRemove amount. Fee adjustment scales up collateralToRemove\\n  // by dividing it by cumulativeFeeMultiplier. There is potential for this quotient to be floored, therefore\\n  // rawCollateral is decreased by less than expected. Because this method is usually called in conjunction with an\\n  // actual removal of collateral from this contract, return the fee-adjusted amount that the rawCollateral is\\n  // decreased by so that the caller can minimize error between collateral removed and rawCollateral debited.\\n  function removeCollateral(\\n    FixedPoint.Unsigned storage rawCollateral,\\n    FixedPoint.Unsigned memory collateralToRemove,\\n    FixedPoint.Unsigned memory cumulativeFeeMultiplier\\n  ) external returns (FixedPoint.Unsigned memory removedCollateral) {\\n    FixedPoint.Unsigned memory initialBalance =\\n      rawCollateral._getFeeAdjustedCollateral(cumulativeFeeMultiplier);\\n    FixedPoint.Unsigned memory adjustedCollateral =\\n      collateralToRemove._convertToRawCollateral(cumulativeFeeMultiplier);\\n    rawCollateral.rawValue = rawCollateral.sub(adjustedCollateral).rawValue;\\n    removedCollateral = initialBalance.sub(\\n      rawCollateral._getFeeAdjustedCollateral(cumulativeFeeMultiplier)\\n    );\\n  }\\n\\n  // Increase rawCollateral by a fee-adjusted collateralToAdd amount. Fee adjustment scales up collateralToAdd\\n  // by dividing it by cumulativeFeeMultiplier. There is potential for this quotient to be floored, therefore\\n  // rawCollateral is increased by less than expected. Because this method is usually called in conjunction with an\\n  // actual addition of collateral to this contract, return the fee-adjusted amount that the rawCollateral is\\n  // increased by so that the caller can minimize error between collateral added and rawCollateral credited.\\n  // NOTE: This return value exists only for the sake of symmetry with _removeCollateral. We don't actually use it\\n  // because we are OK if more collateral is stored in the contract than is represented by rawTotalPositionCollateral.\\n  function addCollateral(\\n    FixedPoint.Unsigned storage rawCollateral,\\n    FixedPoint.Unsigned memory collateralToAdd,\\n    FixedPoint.Unsigned memory cumulativeFeeMultiplier\\n  ) external returns (FixedPoint.Unsigned memory addedCollateral) {\\n    FixedPoint.Unsigned memory initialBalance =\\n      rawCollateral._getFeeAdjustedCollateral(cumulativeFeeMultiplier);\\n    FixedPoint.Unsigned memory adjustedCollateral =\\n      collateralToAdd._convertToRawCollateral(cumulativeFeeMultiplier);\\n    rawCollateral.rawValue = rawCollateral.add(adjustedCollateral).rawValue;\\n    addedCollateral = rawCollateral\\n      ._getFeeAdjustedCollateral(cumulativeFeeMultiplier)\\n      .sub(initialBalance);\\n  }\\n\\n  //Call to the internal one (see _convertToRawCollateral)\\n  function convertToRawCollateral(\\n    FixedPoint.Unsigned memory collateral,\\n    FixedPoint.Unsigned memory cumulativeFeeMultiplier\\n  ) external pure returns (FixedPoint.Unsigned memory rawCollateral) {\\n    return collateral._convertToRawCollateral(cumulativeFeeMultiplier);\\n  }\\n\\n  //----------------------------------------\\n  // Internal functions\\n  //----------------------------------------\\n\\n  // Scale the cumulativeFeeMultiplier by the ratio of fees paid to the current available collateral.\\n  function _adjustCumulativeFeeMultiplier(\\n    FixedPoint.Unsigned storage cumulativeFeeMultiplier,\\n    FixedPoint.Unsigned memory amount,\\n    FixedPoint.Unsigned memory currentPfc\\n  ) internal {\\n    FixedPoint.Unsigned memory effectiveFee = amount.divCeil(currentPfc);\\n    cumulativeFeeMultiplier.rawValue = cumulativeFeeMultiplier\\n      .mul(FixedPoint.fromUnscaledUint(1).sub(effectiveFee))\\n      .rawValue;\\n  }\\n\\n  // Returns the user's collateral minus any fees that have been subtracted since it was originally\\n  // deposited into the contract. Note: if the contract has paid fees since it was deployed, the raw\\n  // value should be larger than the returned value.\\n  function _getFeeAdjustedCollateral(\\n    FixedPoint.Unsigned memory rawCollateral,\\n    FixedPoint.Unsigned memory cumulativeFeeMultiplier\\n  ) internal pure returns (FixedPoint.Unsigned memory collateral) {\\n    return rawCollateral.mul(cumulativeFeeMultiplier);\\n  }\\n\\n  // Converts a user-readable collateral value into a raw value that accounts for already-assessed fees. If any fees\\n  // have been taken from this contract in the past, then the raw value will be larger than the user-readable value.\\n  function _convertToRawCollateral(\\n    FixedPoint.Unsigned memory collateral,\\n    FixedPoint.Unsigned memory cumulativeFeeMultiplier\\n  ) internal pure returns (FixedPoint.Unsigned memory rawCollateral) {\\n    return collateral.div(cumulativeFeeMultiplier);\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"deploy/@jarvis-network/uma-core/contracts/oracle/interfaces/StoreInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../../../@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../common/implementation/FixedPoint.sol\\\";\\n\\n/**\\n * @title Interface that allows financial contracts to pay oracle fees for their use of the system.\\n */\\ninterface StoreInterface {\\n    /**\\n     * @notice Pays Oracle fees in ETH to the store.\\n     * @dev To be used by contracts whose margin currency is ETH.\\n     */\\n    function payOracleFees() external payable;\\n\\n    /**\\n     * @notice Pays oracle fees in the margin currency, erc20Address, to the store.\\n     * @dev To be used if the margin currency is an ERC20 token rather than ETH.\\n     * @param erc20Address address of the ERC20 token used to pay the fee.\\n     * @param amount number of tokens to transfer. An approval for at least this amount must exist.\\n     */\\n    function payOracleFeesErc20(address erc20Address, FixedPoint.Unsigned calldata amount) external;\\n\\n    /**\\n     * @notice Computes the regular oracle fees that a contract should pay for a period.\\n     * @param startTime defines the beginning time from which the fee is paid.\\n     * @param endTime end time until which the fee is paid.\\n     * @param pfc \\\"profit from corruption\\\", or the maximum amount of margin currency that a\\n     * token sponsor could extract from the contract through corrupting the price feed in their favor.\\n     * @return regularFee amount owed for the duration from start to end time for the given pfc.\\n     * @return latePenalty for paying the fee after the deadline.\\n     */\\n    function computeRegularFee(\\n        uint256 startTime,\\n        uint256 endTime,\\n        FixedPoint.Unsigned calldata pfc\\n    ) external view returns (FixedPoint.Unsigned memory regularFee, FixedPoint.Unsigned memory latePenalty);\\n\\n    /**\\n     * @notice Computes the final oracle fees that a contract should pay at settlement.\\n     * @param currency token used to pay the final fee.\\n     * @return finalFee amount due.\\n     */\\n    function computeFinalFee(address currency) external view returns (FixedPoint.Unsigned memory);\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/derivative/common/FeePayerParty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from '../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {\\n  AdministrateeInterface\\n} from '../../../@jarvis-network/uma-core/contracts/oracle/interfaces/AdministrateeInterface.sol';\\nimport {\\n  StoreInterface\\n} from '../../../@jarvis-network/uma-core/contracts/oracle/interfaces/StoreInterface.sol';\\nimport {\\n  FinderInterface\\n} from '../../../@jarvis-network/uma-core/contracts/oracle/interfaces/FinderInterface.sol';\\nimport {\\n  OracleInterfaces\\n} from '../../../@jarvis-network/uma-core/contracts/oracle/implementation/Constants.sol';\\nimport {SafeMath} from '../../../@openzeppelin/contracts/math/SafeMath.sol';\\nimport {SafeERC20} from '../../../@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport {\\n  FixedPoint\\n} from '../../../@jarvis-network/uma-core/contracts/common/implementation/FixedPoint.sol';\\nimport {FeePayerPartyLib} from './FeePayerPartyLib.sol';\\nimport {\\n  Testable\\n} from '../../../@jarvis-network/uma-core/contracts/common/implementation/Testable.sol';\\nimport {\\n  Lockable\\n} from '../../../@jarvis-network/uma-core/contracts/common/implementation/Lockable.sol';\\n\\n/**\\n * @title FeePayer contract.\\n * @notice Provides fee payment functionality for the PerpetualParty contracts.\\n * contract is abstract as each derived contract that inherits `FeePayer` must implement `pfc()`.\\n */\\nabstract contract FeePayerParty is AdministrateeInterface, Testable, Lockable {\\n  using SafeMath for uint256;\\n  using FixedPoint for FixedPoint.Unsigned;\\n  using FeePayerPartyLib for FixedPoint.Unsigned;\\n  using FeePayerPartyLib for FeePayerData;\\n  using SafeERC20 for IERC20;\\n\\n  struct FeePayerData {\\n    // The collateral currency used to back the positions in this contract.\\n    IERC20 collateralCurrency;\\n    // Finder contract used to look up addresses for UMA system contracts.\\n    FinderInterface finder;\\n    // Tracks the last block time when the fees were paid.\\n    uint256 lastPaymentTime;\\n    // Tracks the cumulative fees that have been paid by the contract for use by derived contracts.\\n    // The multiplier starts at 1, and is updated by computing cumulativeFeeMultiplier * (1 - effectiveFee).\\n    // Put another way, the cumulativeFeeMultiplier is (1 - effectiveFee1) * (1 - effectiveFee2) ...\\n    // For example:\\n    // The cumulativeFeeMultiplier should start at 1.\\n    // If a 1% fee is charged, the multiplier should update to .99.\\n    // If another 1% fee is charged, the multiplier should be 0.99^2 (0.9801).\\n    FixedPoint.Unsigned cumulativeFeeMultiplier;\\n  }\\n\\n  //----------------------------------------\\n  // Storage\\n  //----------------------------------------\\n\\n  FeePayerData public feePayerData;\\n\\n  //----------------------------------------\\n  // Events\\n  //----------------------------------------\\n\\n  event RegularFeesPaid(uint256 indexed regularFee, uint256 indexed lateFee);\\n  event FinalFeesPaid(uint256 indexed amount);\\n\\n  //----------------------------------------\\n  // Modifiers\\n  //----------------------------------------\\n\\n  // modifier that calls payRegularFees().\\n  modifier fees {\\n    // Note: the regular fee is applied on every fee-accruing transaction, where the total change is simply the\\n    // regular fee applied linearly since the last update. This implies that the compounding rate depends on the\\n    // frequency of update transactions that have this modifier, and it never reaches the ideal of continuous\\n    // compounding. This approximate-compounding pattern is common in the Ethereum ecosystem because of the\\n    // complexity of compounding data on-chain.\\n    payRegularFees();\\n    _;\\n  }\\n  modifier onlyThisContract {\\n    require(msg.sender == address(this), 'Caller is not this contract');\\n    _;\\n  }\\n\\n  //----------------------------------------\\n  // Constructor\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Constructs FeePayerParty contract. Called by child contracts\\n   * @param _collateralAddress ERC20 token that is used as the underlying collateral for the synthetic.\\n   * @param _finderAddress UMA protocol Finder used to discover other protocol contracts.\\n   * @param _timerAddress Contract that stores the current time in a testing environment.\\n   * Must be set to 0x0 for production environments that use live time.\\n   */\\n  constructor(\\n    address _collateralAddress,\\n    address _finderAddress,\\n    address _timerAddress\\n  ) public Testable(_timerAddress) {\\n    feePayerData.collateralCurrency = IERC20(_collateralAddress);\\n    feePayerData.finder = FinderInterface(_finderAddress);\\n    feePayerData.lastPaymentTime = getCurrentTime();\\n    feePayerData.cumulativeFeeMultiplier = FixedPoint.fromUnscaledUint(1);\\n  }\\n\\n  //----------------------------------------\\n  // External functions\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Pays UMA Oracle final fees of `amount` in `collateralCurrency` to the Store contract. Final fee is a flat fee\\n   * @param payer The address that pays the fees\\n   * @param amount Amount of fees to be paid\\n   */\\n  function payFinalFees(address payer, FixedPoint.Unsigned memory amount)\\n    external\\n    onlyThisContract\\n  {\\n    _payFinalFees(payer, amount);\\n  }\\n\\n  /**\\n   * @notice Gets the collateral currency of the derivative\\n   * @return Collateral currency\\n   */\\n  function collateralCurrency()\\n    public\\n    view\\n    virtual\\n    nonReentrantView()\\n    returns (IERC20)\\n  {\\n    return feePayerData.collateralCurrency;\\n  }\\n\\n  /**\\n   * @notice Pays UMA DVM regular fees (as a % of the collateral pool) to the Store contract.\\n   * @dev These must be paid periodically for the life of the contract. If the contract has not paid its regular fee\\n   * in a week or more then a late penalty is applied which is sent to the caller. If the amount of\\n   * fees owed are greater than the pfc, then this will pay as much as possible from the available collateral.\\n   * An event is only fired if the fees charged are greater than 0.\\n   * @return totalPaid Amount of collateral that the contract paid (sum of the amount paid to the Store and caller).\\n   * This returns 0 and exit early if there is no pfc, fees were already paid during the current block, or the fee rate is 0.\\n   */\\n  function payRegularFees()\\n    public\\n    nonReentrant()\\n    returns (FixedPoint.Unsigned memory totalPaid)\\n  {\\n    StoreInterface store = _getStore();\\n    uint256 time = getCurrentTime();\\n    FixedPoint.Unsigned memory collateralPool = _pfc();\\n    totalPaid = feePayerData.payRegularFees(store, time, collateralPool);\\n    return totalPaid;\\n  }\\n\\n  /**\\n   * @notice Gets the current profit from corruption for this contract in terms of the collateral currency.\\n   * @dev This is equivalent to the collateral pool available from which to pay fees. Therefore, derived contracts are\\n   * expected to implement this so that pay-fee methods can correctly compute the owed fees as a % of PfC.\\n   * @return pfc value for equal to the current profit from corruption denominated in collateral currency.\\n   */\\n  function pfc()\\n    public\\n    view\\n    override\\n    nonReentrantView()\\n    returns (FixedPoint.Unsigned memory)\\n  {\\n    return _pfc();\\n  }\\n\\n  //----------------------------------------\\n  // Internal functions\\n  //----------------------------------------\\n\\n  // Pays UMA Oracle final fees of `amount` in `collateralCurrency` to the Store contract. Final fee is a flat fee\\n  // charged for each price request. If payer is the contract, adjusts internal bookkeeping variables. If payer is not\\n  // the contract, pulls in `amount` of collateral currency.\\n  function _payFinalFees(address payer, FixedPoint.Unsigned memory amount)\\n    internal\\n  {\\n    StoreInterface store = _getStore();\\n    feePayerData.payFinalFees(store, payer, amount);\\n  }\\n\\n  function _pfc() internal view virtual returns (FixedPoint.Unsigned memory);\\n\\n  // Get Store Contract to which fees will be paid\\n  function _getStore() internal view returns (StoreInterface) {\\n    return\\n      StoreInterface(\\n        feePayerData.finder.getImplementationAddress(OracleInterfaces.Store)\\n      );\\n  }\\n\\n  // Calculate final fees to be paid\\n  function _computeFinalFees()\\n    internal\\n    view\\n    returns (FixedPoint.Unsigned memory finalFees)\\n  {\\n    StoreInterface store = _getStore();\\n    return store.computeFinalFee(address(feePayerData.collateralCurrency));\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@jarvis-network/uma-core/contracts/oracle/interfaces/AdministrateeInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../common/implementation/FixedPoint.sol\\\";\\n\\n/**\\n * @title Interface that all financial contracts expose to the admin.\\n */\\ninterface AdministrateeInterface {\\n    /**\\n     * @notice Initiates the shutdown process, in case of an emergency.\\n     */\\n    function emergencyShutdown() external;\\n\\n    /**\\n     * @notice A core contract method called independently or as a part of other financial contract transactions.\\n     * @dev It pays fees and moves money between margin accounts to make sure they reflect the NAV of the contract.\\n     */\\n    function remargin() external;\\n\\n    /**\\n     * @notice Gets the current profit from corruption for this contract in terms of the collateral currency.\\n     * @dev This is equivalent to the collateral pool available from which to pay fees. Therefore, derived contracts are\\n     * expected to implement this so that pay-fee methods can correctly compute the owed fees as a % of PfC.\\n     * @return pfc value for equal to the current profit from corruption denominated in collateral currency.\\n     */\\n    function pfc() external view returns (FixedPoint.Unsigned memory);\\n}\\n\"\r\n    },\r\n    \"deploy/@jarvis-network/uma-core/contracts/oracle/interfaces/FinderInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\n\\n/**\\n * @title Provides addresses of the live contracts implementing certain interfaces.\\n * @dev Examples are the Oracle or Store interfaces.\\n */\\ninterface FinderInterface {\\n    /**\\n     * @notice Updates the address of the contract that implements `interfaceName`.\\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\n     * @param implementationAddress address of the deployed contract that implements the interface.\\n     */\\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress) external;\\n\\n    /**\\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\\n     * @param interfaceName queried interface.\\n     * @return implementationAddress address of the deployed contract that implements the interface.\\n     */\\n    function getImplementationAddress(bytes32 interfaceName) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"deploy/@jarvis-network/uma-core/contracts/oracle/implementation/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\n\\n/**\\n * @title Stores common interface names used throughout the DVM by registration in the Finder.\\n */\\nlibrary OracleInterfaces {\\n    bytes32 public constant Oracle = \\\"Oracle\\\";\\n    bytes32 public constant IdentifierWhitelist = \\\"IdentifierWhitelist\\\";\\n    bytes32 public constant Store = \\\"Store\\\";\\n    bytes32 public constant FinancialContractsAdmin = \\\"FinancialContractsAdmin\\\";\\n    bytes32 public constant Registry = \\\"Registry\\\";\\n    bytes32 public constant CollateralWhitelist = \\\"CollateralWhitelist\\\";\\n    bytes32 public constant OptimisticOracle = \\\"OptimisticOracle\\\";\\n}\\n\"\r\n    },\r\n    \"deploy/@jarvis-network/uma-core/contracts/common/implementation/Testable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\n\\nimport \\\"./Timer.sol\\\";\\n\\n/**\\n * @title Base class that provides time overrides, but only if being run in test mode.\\n */\\nabstract contract Testable {\\n    // If the contract is being run on the test network, then `timerAddress` will be the 0x0 address.\\n    // Note: this variable should be set on construction and never modified.\\n    address public timerAddress;\\n\\n    /**\\n     * @notice Constructs the Testable contract. Called by child contracts.\\n     * @param _timerAddress Contract that stores the current time in a testing environment.\\n     * Must be set to 0x0 for production environments that use live time.\\n     */\\n    constructor(address _timerAddress) internal {\\n        timerAddress = _timerAddress;\\n    }\\n\\n    /**\\n     * @notice Reverts if not running in test mode.\\n     */\\n    modifier onlyIfTest {\\n        require(timerAddress != address(0x0));\\n        _;\\n    }\\n\\n    /**\\n     * @notice Sets the current time.\\n     * @dev Will revert if not running in test mode.\\n     * @param time timestamp to set current Testable time to.\\n     */\\n    function setCurrentTime(uint256 time) external onlyIfTest {\\n        Timer(timerAddress).setCurrentTime(time);\\n    }\\n\\n    /**\\n     * @notice Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode.\\n     * Otherwise, it will return the block timestamp.\\n     * @return uint for the current Testable timestamp.\\n     */\\n    function getCurrentTime() public view returns (uint256) {\\n        if (timerAddress != address(0x0)) {\\n            return Timer(timerAddress).getCurrentTime();\\n        } else {\\n            return now; // solhint-disable-line not-rely-on-time\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@jarvis-network/uma-core/contracts/common/implementation/Lockable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\n\\n/**\\n * @title A contract that provides modifiers to prevent reentrancy to state-changing and view-only methods. This contract\\n * is inspired by https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\\n * and https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol.\\n */\\ncontract Lockable {\\n    bool private _notEntered;\\n\\n    constructor() internal {\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _preEntranceCheck();\\n        _preEntranceSet();\\n        _;\\n        _postEntranceReset();\\n    }\\n\\n    /**\\n     * @dev Designed to prevent a view-only method from being re-entered during a call to a `nonReentrant()` state-changing method.\\n     */\\n    modifier nonReentrantView() {\\n        _preEntranceCheck();\\n        _;\\n    }\\n\\n    // Internal methods are used to avoid copying the require statement's bytecode to every `nonReentrant()` method.\\n    // On entry into a function, `_preEntranceCheck()` should always be called to check if the function is being re-entered.\\n    // Then, if the function modifies state, it should call `_postEntranceSet()`, perform its logic, and then call `_postEntranceReset()`.\\n    // View-only methods can simply call `_preEntranceCheck()` to make sure that it is not being re-entered.\\n    function _preEntranceCheck() internal view {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n    }\\n\\n    function _preEntranceSet() internal {\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n    }\\n\\n    function _postEntranceReset() internal {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@jarvis-network/uma-core/contracts/common/implementation/Timer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\n\\n/**\\n * @title Universal store of current contract time for testing environments.\\n */\\ncontract Timer {\\n    uint256 private currentTime;\\n\\n    constructor() public {\\n        currentTime = now; // solhint-disable-line not-rely-on-time\\n    }\\n\\n    /**\\n     * @notice Sets the current time.\\n     * @dev Will revert if not running in test mode.\\n     * @param time timestamp to set `currentTime` to.\\n     */\\n    function setCurrentTime(uint256 time) external {\\n        currentTime = time;\\n    }\\n\\n    /**\\n     * @notice Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode.\\n     * Otherwise, it will return the block timestamp.\\n     * @return uint256 for the current Testable timestamp.\\n     */\\n    function getCurrentTime() public view returns (uint256) {\\n        return currentTime;\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/Deployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ISynthereumFinder} from './interfaces/IFinder.sol';\\nimport {ISynthereumDeployer} from './interfaces/IDeployer.sol';\\nimport {\\n  ISynthereumFactoryVersioning\\n} from './interfaces/IFactoryVersioning.sol';\\nimport {ISynthereumRegistry} from './registries/interfaces/IRegistry.sol';\\nimport {ISynthereumManager} from './interfaces/IManager.sol';\\nimport {IERC20} from '../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {IDeploymentSignature} from './interfaces/IDeploymentSignature.sol';\\nimport {\\n  ISynthereumPoolDeployment\\n} from '../synthereum-pool/common/interfaces/IPoolDeployment.sol';\\nimport {\\n  IDerivativeDeployment\\n} from '../derivative/common/interfaces/IDerivativeDeployment.sol';\\nimport {\\n  ISelfMintingDerivativeDeployment\\n} from '../derivative/self-minting/common/interfaces/ISelfMintingDerivativeDeployment.sol';\\nimport {IRole} from '../base/interfaces/IRole.sol';\\nimport {SynthereumInterfaces, FactoryInterfaces} from './Constants.sol';\\nimport {Address} from '../../@openzeppelin/contracts/utils/Address.sol';\\nimport {EnumerableSet} from '../../@openzeppelin/contracts/utils/EnumerableSet.sol';\\nimport {\\n  Lockable\\n} from '../../@jarvis-network/uma-core/contracts/common/implementation/Lockable.sol';\\nimport {AccessControl} from '../../@openzeppelin/contracts/access/AccessControl.sol';\\n\\ncontract SynthereumDeployer is ISynthereumDeployer, AccessControl, Lockable {\\n  using Address for address;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  bytes32 public constant MAINTAINER_ROLE = keccak256('Maintainer');\\n\\n  bytes32 private constant ADMIN_ROLE = 0x00;\\n\\n  bytes32 private constant POOL_ROLE = keccak256('Pool');\\n\\n  bytes32 private constant MINTER_ROLE = keccak256('Minter');\\n\\n  bytes32 private constant BURNER_ROLE = keccak256('Burner');\\n\\n  //Describe role structure\\n  struct Roles {\\n    address admin;\\n    address maintainer;\\n  }\\n\\n  //----------------------------------------\\n  // State variables\\n  //----------------------------------------\\n\\n  ISynthereumFinder public synthereumFinder;\\n\\n  //----------------------------------------\\n  // Events\\n  //----------------------------------------\\n\\n  event PoolDeployed(\\n    uint8 indexed poolVersion,\\n    address indexed derivative,\\n    address indexed newPool\\n  );\\n  event DerivativeDeployed(\\n    uint8 indexed derivativeVersion,\\n    address indexed pool,\\n    address indexed newDerivative\\n  );\\n  event SelfMintingDerivativeDeployed(\\n    uint8 indexed selfMintingDerivativeVersion,\\n    address indexed selfMintingDerivative\\n  );\\n\\n  //----------------------------------------\\n  // Modifiers\\n  //----------------------------------------\\n\\n  modifier onlyMaintainer() {\\n    require(\\n      hasRole(MAINTAINER_ROLE, msg.sender),\\n      'Sender must be the maintainer'\\n    );\\n    _;\\n  }\\n\\n  //----------------------------------------\\n  // Constructor\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Constructs the SynthereumDeployer contract\\n   * @param _synthereumFinder Synthereum finder contract\\n   * @param _roles Admin and Maintainer roles\\n   */\\n  constructor(ISynthereumFinder _synthereumFinder, Roles memory _roles) public {\\n    synthereumFinder = _synthereumFinder;\\n    _setRoleAdmin(DEFAULT_ADMIN_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setRoleAdmin(MAINTAINER_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setupRole(DEFAULT_ADMIN_ROLE, _roles.admin);\\n    _setupRole(MAINTAINER_ROLE, _roles.maintainer);\\n  }\\n\\n  //----------------------------------------\\n  // External functions\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Deploys derivative and pool linking the contracts together\\n   * @param derivativeVersion Version of derivative contract\\n   * @param poolVersion Version of the pool contract\\n   * @param derivativeParamsData Input params of derivative constructor\\n   * @param poolParamsData Input params of pool constructor\\n   * @return derivative Derivative contract deployed\\n   * @return pool Pool contract deployed\\n   */\\n  function deployPoolAndDerivative(\\n    uint8 derivativeVersion,\\n    uint8 poolVersion,\\n    bytes calldata derivativeParamsData,\\n    bytes calldata poolParamsData\\n  )\\n    external\\n    override\\n    onlyMaintainer\\n    nonReentrant\\n    returns (IDerivativeDeployment derivative, ISynthereumPoolDeployment pool)\\n  {\\n    ISynthereumFactoryVersioning factoryVersioning = getFactoryVersioning();\\n    derivative = deployDerivative(\\n      factoryVersioning,\\n      derivativeVersion,\\n      derivativeParamsData\\n    );\\n    checkDerivativeRoles(derivative);\\n    pool = deployPool(\\n      factoryVersioning,\\n      poolVersion,\\n      derivative,\\n      poolParamsData\\n    );\\n    checkPoolDeployment(pool, poolVersion);\\n    checkPoolAndDerivativeMatching(pool, derivative, true);\\n    setDerivativeRoles(derivative, pool, false);\\n    setSyntheticTokenRoles(derivative);\\n    ISynthereumRegistry poolRegistry = getPoolRegistry();\\n    poolRegistry.register(\\n      pool.syntheticTokenSymbol(),\\n      pool.collateralToken(),\\n      poolVersion,\\n      address(pool)\\n    );\\n    emit PoolDeployed(poolVersion, address(derivative), address(pool));\\n    emit DerivativeDeployed(\\n      derivativeVersion,\\n      address(pool),\\n      address(derivative)\\n    );\\n  }\\n\\n  /**\\n   * @notice Deploys a pool and links it with an already existing derivative\\n   * @param poolVersion Version of the pool contract\\n   * @param poolParamsData Input params of pool constructor\\n   * @param derivative Existing derivative contract to link with the new pool\\n   * @return pool Pool contract deployed\\n   */\\n  function deployOnlyPool(\\n    uint8 poolVersion,\\n    bytes calldata poolParamsData,\\n    IDerivativeDeployment derivative\\n  )\\n    external\\n    override\\n    onlyMaintainer\\n    nonReentrant\\n    returns (ISynthereumPoolDeployment pool)\\n  {\\n    ISynthereumFactoryVersioning factoryVersioning = getFactoryVersioning();\\n    pool = deployPool(\\n      factoryVersioning,\\n      poolVersion,\\n      derivative,\\n      poolParamsData\\n    );\\n    checkPoolDeployment(pool, poolVersion);\\n    checkPoolAndDerivativeMatching(pool, derivative, true);\\n    setPoolRole(derivative, pool);\\n    ISynthereumRegistry poolRegistry = getPoolRegistry();\\n    poolRegistry.register(\\n      pool.syntheticTokenSymbol(),\\n      pool.collateralToken(),\\n      poolVersion,\\n      address(pool)\\n    );\\n    emit PoolDeployed(poolVersion, address(derivative), address(pool));\\n  }\\n\\n  /**\\n   * @notice Deploys a derivative and option to links it with an already existing pool\\n   * @param derivativeVersion Version of the derivative contract\\n   * @param derivativeParamsData Input params of derivative constructor\\n   * @param pool Existing pool contract to link with the new derivative\\n   * @return derivative Derivative contract deployed\\n   */\\n  function deployOnlyDerivative(\\n    uint8 derivativeVersion,\\n    bytes calldata derivativeParamsData,\\n    ISynthereumPoolDeployment pool\\n  )\\n    external\\n    override\\n    onlyMaintainer\\n    nonReentrant\\n    returns (IDerivativeDeployment derivative)\\n  {\\n    ISynthereumFactoryVersioning factoryVersioning = getFactoryVersioning();\\n    derivative = deployDerivative(\\n      factoryVersioning,\\n      derivativeVersion,\\n      derivativeParamsData\\n    );\\n    checkDerivativeRoles(derivative);\\n    if (address(pool) != address(0)) {\\n      checkPoolAndDerivativeMatching(pool, derivative, false);\\n      checkPoolRegistration(pool);\\n      setDerivativeRoles(derivative, pool, false);\\n    } else {\\n      setDerivativeRoles(derivative, pool, true);\\n    }\\n    setSyntheticTokenRoles(derivative);\\n    emit DerivativeDeployed(\\n      derivativeVersion,\\n      address(pool),\\n      address(derivative)\\n    );\\n  }\\n\\n  /**\\n   * @notice Deploys a self minting derivative contract\\n   * @param selfMintingDerVersion Version of the self minting derivative contract\\n   * @param selfMintingDerParamsData Input params of self minting derivative constructor\\n   * @return selfMintingDerivative Self minting derivative contract deployed\\n   */\\n  function deployOnlySelfMintingDerivative(\\n    uint8 selfMintingDerVersion,\\n    bytes calldata selfMintingDerParamsData\\n  )\\n    external\\n    override\\n    onlyMaintainer\\n    nonReentrant\\n    returns (ISelfMintingDerivativeDeployment selfMintingDerivative)\\n  {\\n    ISynthereumFactoryVersioning factoryVersioning = getFactoryVersioning();\\n    selfMintingDerivative = deploySelfMintingDerivative(\\n      factoryVersioning,\\n      selfMintingDerVersion,\\n      selfMintingDerParamsData\\n    );\\n    checkSelfMintingDerivativeDeployment(\\n      selfMintingDerivative,\\n      selfMintingDerVersion\\n    );\\n    address tokenCurrency = address(selfMintingDerivative.tokenCurrency());\\n    addSyntheticTokenRoles(tokenCurrency, address(selfMintingDerivative));\\n    ISynthereumRegistry selfMintingRegistry = getSelfMintingRegistry();\\n    selfMintingRegistry.register(\\n      selfMintingDerivative.syntheticTokenSymbol(),\\n      selfMintingDerivative.collateralCurrency(),\\n      selfMintingDerVersion,\\n      address(selfMintingDerivative)\\n    );\\n    emit SelfMintingDerivativeDeployed(\\n      selfMintingDerVersion,\\n      address(selfMintingDerivative)\\n    );\\n  }\\n\\n  //----------------------------------------\\n  // Internal functions\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Deploys a derivative contract of a particular version\\n   * @param factoryVersioning factory versioning contract\\n   * @param derivativeVersion Version of derivate contract to deploy\\n   * @param derivativeParamsData Input parameters of constructor of derivative\\n   * @return derivative Derivative deployed\\n   */\\n  function deployDerivative(\\n    ISynthereumFactoryVersioning factoryVersioning,\\n    uint8 derivativeVersion,\\n    bytes memory derivativeParamsData\\n  ) internal returns (IDerivativeDeployment derivative) {\\n    address derivativeFactory =\\n      factoryVersioning.getFactoryVersion(\\n        FactoryInterfaces.DerivativeFactory,\\n        derivativeVersion\\n      );\\n    bytes memory derivativeDeploymentResult =\\n      derivativeFactory.functionCall(\\n        abi.encodePacked(\\n          getDeploymentSignature(derivativeFactory),\\n          derivativeParamsData\\n        ),\\n        'Wrong derivative deployment'\\n      );\\n    derivative = IDerivativeDeployment(\\n      abi.decode(derivativeDeploymentResult, (address))\\n    );\\n  }\\n\\n  /**\\n   * @notice Deploys a pool contract of a particular version\\n   * @param factoryVersioning factory versioning contract\\n   * @param poolVersion Version of pool contract to deploy\\n   * @param poolParamsData Input parameters of constructor of the pool\\n   * @return pool Pool deployed\\n   */\\n  function deployPool(\\n    ISynthereumFactoryVersioning factoryVersioning,\\n    uint8 poolVersion,\\n    IDerivativeDeployment derivative,\\n    bytes memory poolParamsData\\n  ) internal returns (ISynthereumPoolDeployment pool) {\\n    address poolFactory =\\n      factoryVersioning.getFactoryVersion(\\n        FactoryInterfaces.PoolFactory,\\n        poolVersion\\n      );\\n    bytes memory poolDeploymentResult =\\n      poolFactory.functionCall(\\n        abi.encodePacked(\\n          getDeploymentSignature(poolFactory),\\n          bytes32(uint256(address(derivative))),\\n          poolParamsData\\n        ),\\n        'Wrong pool deployment'\\n      );\\n    pool = ISynthereumPoolDeployment(\\n      abi.decode(poolDeploymentResult, (address))\\n    );\\n  }\\n\\n  /**\\n   * @notice Deploys a self minting derivative contract of a particular version\\n   * @param factoryVersioning factory versioning contract\\n   * @param selfMintingDerVersion Version of self minting derivate contract to deploy\\n   * @param selfMintingDerParamsData Input parameters of constructor of self minting derivative\\n   * @return selfMintingDerivative Self minting derivative deployed\\n   */\\n  function deploySelfMintingDerivative(\\n    ISynthereumFactoryVersioning factoryVersioning,\\n    uint8 selfMintingDerVersion,\\n    bytes calldata selfMintingDerParamsData\\n  ) internal returns (ISelfMintingDerivativeDeployment selfMintingDerivative) {\\n    address selfMintingDerFactory =\\n      factoryVersioning.getFactoryVersion(\\n        FactoryInterfaces.SelfMintingFactory,\\n        selfMintingDerVersion\\n      );\\n    bytes memory selfMintingDerDeploymentResult =\\n      selfMintingDerFactory.functionCall(\\n        abi.encodePacked(\\n          getDeploymentSignature(selfMintingDerFactory),\\n          selfMintingDerParamsData\\n        ),\\n        'Wrong self-minting derivative deployment'\\n      );\\n    selfMintingDerivative = ISelfMintingDerivativeDeployment(\\n      abi.decode(selfMintingDerDeploymentResult, (address))\\n    );\\n  }\\n\\n  /**\\n   * @notice Grants admin role of derivative contract to Manager contract\\n   * Assing POOL_ROLE of the derivative contract to a pool if bool set to True\\n   * @param derivative Derivative contract\\n   * @param pool Pool contract\\n   * @param isOnlyDerivative A boolean value that can be set to true/false\\n   */\\n  function setDerivativeRoles(\\n    IDerivativeDeployment derivative,\\n    ISynthereumPoolDeployment pool,\\n    bool isOnlyDerivative\\n  ) internal {\\n    IRole derivativeRoles = IRole(address(derivative));\\n    if (!isOnlyDerivative) {\\n      derivativeRoles.grantRole(POOL_ROLE, address(pool));\\n    }\\n    derivativeRoles.grantRole(ADMIN_ROLE, address(getManager()));\\n    derivativeRoles.renounceRole(ADMIN_ROLE, address(this));\\n  }\\n\\n  /**\\n   * @notice Sets roles of the synthetic token contract to a derivative\\n   * @param derivative Derivative contract\\n   */\\n  function setSyntheticTokenRoles(IDerivativeDeployment derivative) internal {\\n    IRole tokenCurrency = IRole(address(derivative.tokenCurrency()));\\n    if (\\n      !tokenCurrency.hasRole(MINTER_ROLE, address(derivative)) ||\\n      !tokenCurrency.hasRole(BURNER_ROLE, address(derivative))\\n    ) {\\n      addSyntheticTokenRoles(address(tokenCurrency), address(derivative));\\n    }\\n  }\\n\\n  /**\\n   * @notice Grants minter and burner role of syntehtic token to derivative\\n   * @param tokenCurrency Address of the token contract\\n   * @param derivative Derivative contract\\n   */\\n  function addSyntheticTokenRoles(address tokenCurrency, address derivative)\\n    internal\\n  {\\n    ISynthereumManager manager = getManager();\\n    address[] memory contracts = new address[](2);\\n    bytes32[] memory roles = new bytes32[](2);\\n    address[] memory accounts = new address[](2);\\n    contracts[0] = tokenCurrency;\\n    contracts[1] = tokenCurrency;\\n    roles[0] = MINTER_ROLE;\\n    roles[1] = BURNER_ROLE;\\n    accounts[0] = derivative;\\n    accounts[1] = derivative;\\n    manager.grantSynthereumRole(contracts, roles, accounts);\\n  }\\n\\n  /**\\n   * @notice Grants pool role of derivative to pool\\n   * @param derivative Derivative contract\\n   * @param pool Pool contract\\n   */\\n  function setPoolRole(\\n    IDerivativeDeployment derivative,\\n    ISynthereumPoolDeployment pool\\n  ) internal {\\n    ISynthereumManager manager = getManager();\\n    address[] memory contracts = new address[](1);\\n    bytes32[] memory roles = new bytes32[](1);\\n    address[] memory accounts = new address[](1);\\n    contracts[0] = address(derivative);\\n    roles[0] = POOL_ROLE;\\n    accounts[0] = address(pool);\\n    manager.grantSynthereumRole(contracts, roles, accounts);\\n  }\\n\\n  //----------------------------------------\\n  // Internal view functions\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Get factory versioning contract from the finder\\n   * @return factoryVersioning Factory versioning contract\\n   */\\n  function getFactoryVersioning()\\n    internal\\n    view\\n    returns (ISynthereumFactoryVersioning factoryVersioning)\\n  {\\n    factoryVersioning = ISynthereumFactoryVersioning(\\n      synthereumFinder.getImplementationAddress(\\n        SynthereumInterfaces.FactoryVersioning\\n      )\\n    );\\n  }\\n\\n  /**\\n   * @notice Get pool registry contract from the finder\\n   * @return poolRegistry Registry of pools\\n   */\\n  function getPoolRegistry()\\n    internal\\n    view\\n    returns (ISynthereumRegistry poolRegistry)\\n  {\\n    poolRegistry = ISynthereumRegistry(\\n      synthereumFinder.getImplementationAddress(\\n        SynthereumInterfaces.PoolRegistry\\n      )\\n    );\\n  }\\n\\n  /**\\n   * @notice Get self minting registry contract from the finder\\n   * @return selfMintingRegistry Registry of self-minting derivatives\\n   */\\n  function getSelfMintingRegistry()\\n    internal\\n    view\\n    returns (ISynthereumRegistry selfMintingRegistry)\\n  {\\n    selfMintingRegistry = ISynthereumRegistry(\\n      synthereumFinder.getImplementationAddress(\\n        SynthereumInterfaces.SelfMintingRegistry\\n      )\\n    );\\n  }\\n\\n  /**\\n   * @notice Get manager contract from the finder\\n   * @return manager Synthereum manager\\n   */\\n  function getManager() internal view returns (ISynthereumManager manager) {\\n    manager = ISynthereumManager(\\n      synthereumFinder.getImplementationAddress(SynthereumInterfaces.Manager)\\n    );\\n  }\\n\\n  /**\\n   * @notice Get signature of function to deploy a contract\\n   * @param factory Factory contract\\n   * @return signature Signature of deployment function of the factory\\n   */\\n  function getDeploymentSignature(address factory)\\n    internal\\n    view\\n    returns (bytes4 signature)\\n  {\\n    signature = IDeploymentSignature(factory).deploymentSignature();\\n  }\\n\\n  /**\\n   * @notice Check derivative roles temporarily assigned to the deployer\\n   * @param derivative Derivative contract\\n   */\\n  function checkDerivativeRoles(IDerivativeDeployment derivative)\\n    internal\\n    view\\n  {\\n    address[] memory derivativeAdmins = derivative.getAdminMembers();\\n    require(derivativeAdmins.length == 1, 'The derivative must have one admin');\\n    require(\\n      derivativeAdmins[0] == address(this),\\n      'The derivative admin must be the deployer'\\n    );\\n    address[] memory derivativePools = derivative.getPoolMembers();\\n    require(derivativePools.length == 0, 'The derivative must have no pools');\\n  }\\n\\n  /**\\n   * @notice Check correct finder and version of the deployed pool\\n   * @param pool Contract pool to check\\n   * @param version Pool version to check\\n   */\\n  function checkPoolDeployment(ISynthereumPoolDeployment pool, uint8 version)\\n    internal\\n    view\\n  {\\n    require(\\n      pool.synthereumFinder() == synthereumFinder,\\n      'Wrong finder in pool deployment'\\n    );\\n    require(pool.version() == version, 'Wrong version in pool deployment');\\n  }\\n\\n  /**\\n   * @notice Check correct collateral and synthetic token matching between pool and derivative\\n   * @param pool Pool contract\\n   * @param derivative Derivative contract\\n   * @param isPoolLinked Flag that defines if pool is linked with derivative\\n   */\\n  function checkPoolAndDerivativeMatching(\\n    ISynthereumPoolDeployment pool,\\n    IDerivativeDeployment derivative,\\n    bool isPoolLinked\\n  ) internal view {\\n    require(\\n      pool.collateralToken() == derivative.collateralCurrency(),\\n      'Wrong collateral matching'\\n    );\\n    require(\\n      pool.syntheticToken() == derivative.tokenCurrency(),\\n      'Wrong synthetic token matching'\\n    );\\n    if (isPoolLinked) {\\n      require(\\n        pool.isDerivativeAdmitted(address(derivative)),\\n        'Pool doesnt support derivative'\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @notice Check correct registration of a pool with PoolRegistry\\n   * @param pool Contract pool to check\\n   */\\n  function checkPoolRegistration(ISynthereumPoolDeployment pool) internal view {\\n    ISynthereumRegistry poolRegistry = getPoolRegistry();\\n    require(\\n      poolRegistry.isDeployed(\\n        pool.syntheticTokenSymbol(),\\n        pool.collateralToken(),\\n        pool.version(),\\n        address(pool)\\n      ),\\n      'Pool not registred'\\n    );\\n  }\\n\\n  /**\\n   * @notice Check correct finder and version of the deployed self minting derivative\\n   * @param selfMintingDerivative Self minting derivative to check\\n   * @param version Self minting derivative version to check\\n   */\\n  function checkSelfMintingDerivativeDeployment(\\n    ISelfMintingDerivativeDeployment selfMintingDerivative,\\n    uint8 version\\n  ) internal view {\\n    require(\\n      selfMintingDerivative.synthereumFinder() == synthereumFinder,\\n      'Wrong finder in self-minting deployment'\\n    );\\n    require(\\n      selfMintingDerivative.version() == version,\\n      'Wrong version in self-minting deployment'\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/interfaces/IFinder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Provides addresses of the contracts implementing certain interfaces.\\n */\\ninterface ISynthereumFinder {\\n  /**\\n   * @notice Updates the address of the contract that implements `interfaceName`.\\n   * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\n   * @param implementationAddress address of the deployed contract that implements the interface.\\n   */\\n  function changeImplementationAddress(\\n    bytes32 interfaceName,\\n    address implementationAddress\\n  ) external;\\n\\n  /**\\n   * @notice Gets the address of the contract that implements the given `interfaceName`.\\n   * @param interfaceName queried interface.\\n   * @return implementationAddress Address of the deployed contract that implements the interface.\\n   */\\n  function getImplementationAddress(bytes32 interfaceName)\\n    external\\n    view\\n    returns (address);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/interfaces/IDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.12;\\n\\nimport {IERC20} from '../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {\\n  ISynthereumPoolDeployment\\n} from '../../synthereum-pool/common/interfaces/IPoolDeployment.sol';\\nimport {\\n  IDerivativeDeployment\\n} from '../../derivative/common/interfaces/IDerivativeDeployment.sol';\\nimport {\\n  ISelfMintingDerivativeDeployment\\n} from '../../derivative/self-minting/common/interfaces/ISelfMintingDerivativeDeployment.sol';\\nimport {EnumerableSet} from '../../../@openzeppelin/contracts/utils/EnumerableSet.sol';\\n\\n/**\\n * @title Provides interface with functions of Synthereum deployer\\n */\\ninterface ISynthereumDeployer {\\n  /**\\n   * @notice Deploys derivative and pool linking the contracts together\\n   * @param derivativeVersion Version of derivative contract\\n   * @param poolVersion Version of the pool contract\\n   * @param derivativeParamsData Input params of derivative constructor\\n   * @param poolParamsData Input params of pool constructor\\n   * @return derivative Derivative contract deployed\\n   * @return pool Pool contract deployed\\n   */\\n  function deployPoolAndDerivative(\\n    uint8 derivativeVersion,\\n    uint8 poolVersion,\\n    bytes calldata derivativeParamsData,\\n    bytes calldata poolParamsData\\n  )\\n    external\\n    returns (IDerivativeDeployment derivative, ISynthereumPoolDeployment pool);\\n\\n  /**\\n   * @notice Deploys a pool and links it with an already existing derivative\\n   * @param poolVersion Version of the pool contract\\n   * @param poolParamsData Input params of pool constructor\\n   * @param derivative Existing derivative contract to link with the new pool\\n   * @return pool Pool contract deployed\\n   */\\n  function deployOnlyPool(\\n    uint8 poolVersion,\\n    bytes calldata poolParamsData,\\n    IDerivativeDeployment derivative\\n  ) external returns (ISynthereumPoolDeployment pool);\\n\\n  /**\\n   * @notice Deploys a derivative and option to links it with an already existing pool\\n   * @param derivativeVersion Version of the derivative contract\\n   * @param derivativeParamsData Input params of derivative constructor\\n   * @param pool Existing pool contract to link with the new derivative\\n   * @return derivative Derivative contract deployed\\n   */\\n  function deployOnlyDerivative(\\n    uint8 derivativeVersion,\\n    bytes calldata derivativeParamsData,\\n    ISynthereumPoolDeployment pool\\n  ) external returns (IDerivativeDeployment derivative);\\n\\n  function deployOnlySelfMintingDerivative(\\n    uint8 selfMintingDerVersion,\\n    bytes calldata selfMintingDerParamsData\\n  ) external returns (ISelfMintingDerivativeDeployment selfMintingDerivative);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/interfaces/IFactoryVersioning.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Provides addresses of different versions of pools factory and derivative factory\\n */\\ninterface ISynthereumFactoryVersioning {\\n  /** @notice Sets a Factory\\n   * @param factoryType Type of factory\\n   * @param version Version of the factory to be set\\n   * @param factory The pool factory address to be set\\n   */\\n  function setFactory(\\n    bytes32 factoryType,\\n    uint8 version,\\n    address factory\\n  ) external;\\n\\n  /** @notice Removes a factory\\n   * @param factoryType The type of factory to be removed\\n   * @param version Version of the factory to be removed\\n   */\\n  function removeFactory(bytes32 factoryType, uint8 version) external;\\n\\n  /** @notice Gets a factory contract address\\n   * @param factoryType The type of factory to be checked\\n   * @param version Version of the factory to be checked\\n   * @return factory Address of the factory contract\\n   */\\n  function getFactoryVersion(bytes32 factoryType, uint8 version)\\n    external\\n    view\\n    returns (address factory);\\n\\n  /** @notice Gets the number of factory versions for a specific type\\n   * @param factoryType The type of factory to be checked\\n   * @return numberOfVersions Total number of versions for a specific factory\\n   */\\n  function numberOfVerisonsOfFactory(bytes32 factoryType)\\n    external\\n    view\\n    returns (uint256 numberOfVersions);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/registries/interfaces/IRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from '../../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/**\\n * @title Provides interface with functions of SynthereumRegistry\\n */\\n\\ninterface ISynthereumRegistry {\\n  /**\\n   * @notice Allow the deployer to register an element\\n   * @param syntheticTokenSymbol Symbol of the syntheticToken\\n   * @param collateralToken Collateral ERC20 token of the element deployed\\n   * @param version Version of the element deployed\\n   * @param element Address of the element deployed\\n   */\\n  function register(\\n    string calldata syntheticTokenSymbol,\\n    IERC20 collateralToken,\\n    uint8 version,\\n    address element\\n  ) external;\\n\\n  /**\\n   * @notice Returns if a particular element exists or not\\n   * @param syntheticTokenSymbol Synthetic token symbol of the element\\n   * @param collateralToken ERC20 contract of collateral currency\\n   * @param version Version of the element\\n   * @param element Contract of the element to check\\n   * @return isElementDeployed Returns true if a particular element exists, otherwise false\\n   */\\n  function isDeployed(\\n    string calldata syntheticTokenSymbol,\\n    IERC20 collateralToken,\\n    uint8 version,\\n    address element\\n  ) external view returns (bool isElementDeployed);\\n\\n  /**\\n   * @notice Returns all the elements with partcular symbol, collateral and version\\n   * @param syntheticTokenSymbol Synthetic token symbol of the element\\n   * @param collateralToken ERC20 contract of collateral currency\\n   * @param version Version of the element\\n   * @return List of all elements\\n   */\\n  function getElements(\\n    string calldata syntheticTokenSymbol,\\n    IERC20 collateralToken,\\n    uint8 version\\n  ) external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns all the synthetic token symbol used\\n   * @return List of all synthetic token symbol\\n   */\\n  function getSyntheticTokens() external view returns (string[] memory);\\n\\n  /**\\n   * @notice Returns all the versions used\\n   * @return List of all versions\\n   */\\n  function getVersions() external view returns (uint8[] memory);\\n\\n  /**\\n   * @notice Returns all the collaterals used\\n   * @return List of all collaterals\\n   */\\n  function getCollaterals() external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/interfaces/IManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.12;\\n\\nimport {IDerivative} from '../../derivative/common/interfaces/IDerivative.sol';\\n\\ninterface ISynthereumManager {\\n  /**\\n   * @notice Allow to add roles in derivatives and synthetic tokens contracts\\n   * @param contracts Derivatives or Synthetic role contracts\\n   * @param roles Roles id\\n   * @param accounts Addresses to which give the grant\\n   */\\n  function grantSynthereumRole(\\n    address[] calldata contracts,\\n    bytes32[] calldata roles,\\n    address[] calldata accounts\\n  ) external;\\n\\n  /**\\n   * @notice Allow to revoke roles in derivatives and synthetic tokens contracts\\n   * @param contracts Derivatives or Synthetic role contracts\\n   * @param roles Roles id\\n   * @param accounts Addresses to which revoke the grant\\n   */\\n  function revokeSynthereumRole(\\n    address[] calldata contracts,\\n    bytes32[] calldata roles,\\n    address[] calldata accounts\\n  ) external;\\n\\n  /**\\n   * @notice Allow to renounce roles in derivatives and synthetic tokens contracts\\n   * @param contracts Derivatives or Synthetic role contracts\\n   * @param roles Roles id\\n   */\\n  function renounceSynthereumRole(\\n    address[] calldata contracts,\\n    bytes32[] calldata roles\\n  ) external;\\n\\n  /**\\n   * @notice Allow to call emergency shutdown in derivative contracts\\n   * @param derivatives Derivate contracts to shutdown\\n   */\\n  function emergencyShutdown(IDerivative[] calldata derivatives) external;\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/interfaces/IDeploymentSignature.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Provides signature of function for deployment\\n */\\ninterface IDeploymentSignature {\\n  /**\\n   * @notice Returns the bytes4 signature of the function used for the deployment of a contract in a factory\\n   * @return signature returns signature of the deployment function\\n   */\\n  function deploymentSignature() external view returns (bytes4 signature);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/synthereum-pool/common/interfaces/IPoolDeployment.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.12;\\n\\nimport {IERC20} from '../../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {ISynthereumFinder} from '../../../core/interfaces/IFinder.sol';\\nimport {IRole} from '../../../base/interfaces/IRole.sol';\\nimport {\\n  IDerivative\\n} from '../../../derivative/common/interfaces/IDerivative.sol';\\n\\n/**\\n * @title Interface that a pool MUST have in order to be included in the deployer\\n */\\ninterface ISynthereumPoolDeployment {\\n  /**\\n   * @notice Get Synthereum finder of the pool\\n   * @return finder Returns finder contract\\n   */\\n  function synthereumFinder() external view returns (ISynthereumFinder finder);\\n\\n  /**\\n   * @notice Get Synthereum version\\n   * @return poolVersion Returns the version of this Synthereum pool\\n   */\\n  function version() external view returns (uint8 poolVersion);\\n\\n  /**\\n   * @notice Get the collateral token\\n   * @return collateralCurrency The ERC20 collateral token\\n   */\\n  function collateralToken() external view returns (IERC20 collateralCurrency);\\n\\n  /**\\n   * @notice Get the synthetic token associated to this pool\\n   * @return syntheticCurrency The ERC20 synthetic token\\n   */\\n  function syntheticToken() external view returns (IERC20 syntheticCurrency);\\n\\n  /**\\n   * @notice Get the synthetic token symbol associated to this pool\\n   * @return symbol The ERC20 synthetic token symbol\\n   */\\n  function syntheticTokenSymbol() external view returns (string memory symbol);\\n\\n  function isDerivativeAdmitted(address derivative)\\n    external\\n    view\\n    returns (bool isAdmitted);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/derivative/common/interfaces/IDerivativeDeployment.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.12;\\n\\nimport {IERC20} from '../../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/**\\n * @title Interface that a derivative MUST have in order to be included in the deployer\\n */\\ninterface IDerivativeDeployment {\\n  /**\\n   * @notice Gets the collateral currency of the derivative\\n   * @return collateral Collateral currency\\n   */\\n  function collateralCurrency() external view returns (IERC20 collateral);\\n\\n  /**\\n   * @notice Get the token currency of the derivative\\n   * @return syntheticCurrency Synthetic token\\n   */\\n  function tokenCurrency() external view returns (IERC20 syntheticCurrency);\\n\\n  /**\\n   * @notice Accessor method for the list of members with admin role\\n   * @return array of addresses with admin role\\n   */\\n  function getAdminMembers() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Accessor method for the list of members with pool role\\n   * @return array of addresses with pool role\\n   */\\n  function getPoolMembers() external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/derivative/self-minting/common/interfaces/ISelfMintingDerivativeDeployment.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.12;\\n\\nimport {IERC20} from '../../../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {ISynthereumFinder} from '../../../../core/interfaces/IFinder.sol';\\n\\n/** @title Interface for interacting with SelfMintingDerivativeDeployment contract\\n */\\ninterface ISelfMintingDerivativeDeployment {\\n  /** @notice Returns the address of the SynthereumFinder contract\\n   */\\n  function synthereumFinder() external view returns (ISynthereumFinder finder);\\n\\n  /** @notice Returns the address of the collateralCurrency contract\\n   */\\n  function collateralCurrency() external view returns (IERC20 collateral);\\n\\n  /** @notice Returns the address of the synthetic token contract\\n   */\\n  function tokenCurrency() external view returns (IERC20 syntheticCurrency);\\n\\n  /** @notice Returns the synthetic token symbol\\n   */\\n  function syntheticTokenSymbol() external view returns (string memory symbol);\\n\\n  /** @notice Returns the version of the deployed self-minting derivative\\n   */\\n  function version() external view returns (uint8 selfMintingversion);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/base/interfaces/IRole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Access role interface\\n */\\ninterface IRole {\\n  /**\\n   * @dev Returns `true` if `account` has been granted `role`.\\n   */\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the number of accounts that have `role`. Can be used\\n   * together with {getRoleMember} to enumerate all bearers of a role.\\n   */\\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns one of the accounts that have `role`. `index` must be a\\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\\n   *\\n   */\\n  function getRoleMember(bytes32 role, uint256 index)\\n    external\\n    view\\n    returns (address);\\n\\n  /**\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\n   * {revokeRole}.\\n   */\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function grantRole(bytes32 role, address account) external;\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function revokeRole(bytes32 role, address account) external;\\n\\n  /**\\n   * @dev Revokes `role` from the calling account.\\n   *\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\n   * if they are compromised (such as when a trusted device is misplaced).\\n   *\\n   * - the caller must be `account`.\\n   */\\n  function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Stores common interface names used throughout Synthereum.\\n */\\nlibrary SynthereumInterfaces {\\n  bytes32 public constant Deployer = 'Deployer';\\n  bytes32 public constant FactoryVersioning = 'FactoryVersioning';\\n  bytes32 public constant TokenFactory = 'TokenFactory';\\n  bytes32 public constant PoolRegistry = 'PoolRegistry';\\n  bytes32 public constant SelfMintingRegistry = 'SelfMintingRegistry';\\n  bytes32 public constant PriceFeed = 'PriceFeed';\\n  bytes32 public constant Manager = 'Manager';\\n  bytes32 public constant SelfMintingController = 'SelfMintingController';\\n}\\n\\nlibrary FactoryInterfaces {\\n  bytes32 public constant PoolFactory = 'PoolFactory';\\n  bytes32 public constant DerivativeFactory = 'DerivativeFactory';\\n  bytes32 public constant SelfMintingFactory = 'SelfMintingFactory';\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/derivative/common/interfaces/IDerivative.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {IDerivativeMain} from './IDerivativeMain.sol';\\nimport {IDerivativeDeployment} from './IDerivativeDeployment.sol';\\n\\n/**\\n * @title Interface that a derivative MUST have in order to be used in the pools\\n */\\ninterface IDerivative is IDerivativeDeployment, IDerivativeMain {\\n\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/derivative/common/interfaces/IDerivativeMain.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from '../../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {ISynthereumFinder} from '../../../core/interfaces/IFinder.sol';\\nimport {\\n  FixedPoint\\n} from '../../../../@jarvis-network/uma-core/contracts/common/implementation/FixedPoint.sol';\\nimport {FeePayerParty} from '../FeePayerParty.sol';\\n\\n/**\\n * @title Interface for interacting with the Derivatives contracts\\n */\\ninterface IDerivativeMain {\\n  /** @notice Deposit funds to a certain derivative contract with specified sponsor\\n   * @param sponsor Address of the sponsor to which the funds will be deposited\\n   * @param collateralAmount Amount of funds to be deposited\\n   */\\n  function depositTo(\\n    address sponsor,\\n    FixedPoint.Unsigned memory collateralAmount\\n  ) external;\\n\\n  /** @notice Deposit funds to the derivative contract where msg sender is the sponsor\\n   * @param collateralAmount Amount of funds to be deposited\\n   */\\n  function deposit(FixedPoint.Unsigned memory collateralAmount) external;\\n\\n  /** @notice Fast withdraw excess collateral from a derivative contract\\n   * @param collateralAmount Amount of funds to be withdrawn\\n   */\\n  function withdraw(FixedPoint.Unsigned memory collateralAmount)\\n    external\\n    returns (FixedPoint.Unsigned memory amountWithdrawn);\\n\\n  /** @notice Request of slow withdraw of collateral from derivative changing GCR\\n   * @param collateralAmount Amount of funds to be withdrawn\\n   */\\n  function requestWithdrawal(FixedPoint.Unsigned memory collateralAmount)\\n    external;\\n\\n  /** @notice Execute withdraw if a slow withdraw request has passed\\n   */\\n  function withdrawPassedRequest()\\n    external\\n    returns (FixedPoint.Unsigned memory amountWithdrawn);\\n\\n  /** @notice Cancel a slow withdraw request\\n   */\\n  function cancelWithdrawal() external;\\n\\n  /** @notice Mint synthetic tokens\\n   * @param collateralAmount Amount of collateral to be locked\\n   * @param numTokens Amount of tokens to be minted based on collateralAmount\\n   */\\n  function create(\\n    FixedPoint.Unsigned memory collateralAmount,\\n    FixedPoint.Unsigned memory numTokens\\n  ) external;\\n\\n  /** @notice Redeem collateral by burning synthetic tokens\\n   * @param numTokens Amount of synthetic tokens to be burned to unlock collateral\\n   */\\n  function redeem(FixedPoint.Unsigned memory numTokens)\\n    external\\n    returns (FixedPoint.Unsigned memory amountWithdrawn);\\n\\n  /** @notice Burning an amount of synthetic tokens to increase GCR\\n   * @param numTokens Amount of synthetic tokens to be burned\\n   */\\n  function repay(FixedPoint.Unsigned memory numTokens) external;\\n\\n  /** @notice Settles the withdraws from an emergency shutdown of a derivative\\n   */\\n  function settleEmergencyShutdown()\\n    external\\n    returns (FixedPoint.Unsigned memory amountWithdrawn);\\n\\n  /** @notice Invokes an emergency shutdown of a derivative\\n   */\\n  function emergencyShutdown() external;\\n\\n  /** @notice Remargin function\\n   */\\n  function remargin() external;\\n\\n  /** @notice Allows withdrawing of excess ERC20 tokens\\n   * @param token The address of the ERC20 token\\n   */\\n  function trimExcess(IERC20 token)\\n    external\\n    returns (FixedPoint.Unsigned memory amount);\\n\\n  /** @notice Gets the collateral locked by a certain sponsor\\n   * @param sponsor The address of the sponsor for which to return amount of collateral locked\\n   */\\n  function getCollateral(address sponsor)\\n    external\\n    view\\n    returns (FixedPoint.Unsigned memory collateralAmount);\\n\\n  /** @notice Gets the address of the SynthereumFinder contract\\n   */\\n  function synthereumFinder() external view returns (ISynthereumFinder finder);\\n\\n  /** @notice Gets the synthetic token symbol associated with the derivative\\n   */\\n  function syntheticTokenSymbol() external view returns (string memory symbol);\\n\\n  /** @notice Gets the price identifier associated with the derivative\\n   */\\n  function priceIdentifier() external view returns (bytes32 identifier);\\n\\n  /** @notice Gets the total collateral locked in a derivative\\n   */\\n  function totalPositionCollateral()\\n    external\\n    view\\n    returns (FixedPoint.Unsigned memory totalCollateral);\\n\\n  /** @notice Gets the total synthetic tokens minted through a derivative\\n   */\\n  function totalTokensOutstanding()\\n    external\\n    view\\n    returns (FixedPoint.Unsigned memory totalTokens);\\n\\n  /** @notice Gets the price at which the emergency shutdown was performed\\n   */\\n  function emergencyShutdownPrice()\\n    external\\n    view\\n    returns (FixedPoint.Unsigned memory emergencyPrice);\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/Finder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ISynthereumFinder} from './interfaces/IFinder.sol';\\nimport {AccessControl} from '../../@openzeppelin/contracts/access/AccessControl.sol';\\n\\n/**\\n * @title Provides addresses of contracts implementing certain interfaces.\\n */\\ncontract SynthereumFinder is ISynthereumFinder, AccessControl {\\n  bytes32 public constant MAINTAINER_ROLE = keccak256('Maintainer');\\n\\n  //Describe role structure\\n  struct Roles {\\n    address admin;\\n    address maintainer;\\n  }\\n\\n  //----------------------------------------\\n  // Storage\\n  //----------------------------------------\\n\\n  mapping(bytes32 => address) public interfacesImplemented;\\n\\n  //----------------------------------------\\n  // Events\\n  //----------------------------------------\\n\\n  event InterfaceImplementationChanged(\\n    bytes32 indexed interfaceName,\\n    address indexed newImplementationAddress\\n  );\\n\\n  //----------------------------------------\\n  // Modifiers\\n  //----------------------------------------\\n\\n  modifier onlyMaintainer() {\\n    require(\\n      hasRole(MAINTAINER_ROLE, msg.sender),\\n      'Sender must be the maintainer'\\n    );\\n    _;\\n  }\\n\\n  //----------------------------------------\\n  // Constructors\\n  //----------------------------------------\\n\\n  constructor(Roles memory _roles) public {\\n    _setRoleAdmin(DEFAULT_ADMIN_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setRoleAdmin(MAINTAINER_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setupRole(DEFAULT_ADMIN_ROLE, _roles.admin);\\n    _setupRole(MAINTAINER_ROLE, _roles.maintainer);\\n  }\\n\\n  //----------------------------------------\\n  // External view\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Updates the address of the contract that implements `interfaceName`.\\n   * @param interfaceName bytes32 of the interface name that is either changed or registered.\\n   * @param implementationAddress address of the implementation contract.\\n   */\\n  function changeImplementationAddress(\\n    bytes32 interfaceName,\\n    address implementationAddress\\n  ) external override onlyMaintainer {\\n    interfacesImplemented[interfaceName] = implementationAddress;\\n\\n    emit InterfaceImplementationChanged(interfaceName, implementationAddress);\\n  }\\n\\n  /**\\n   * @notice Gets the address of the contract that implements the given `interfaceName`.\\n   * @param interfaceName queried interface.\\n   * @return implementationAddress Address of the defined interface.\\n   */\\n  function getImplementationAddress(bytes32 interfaceName)\\n    external\\n    view\\n    override\\n    returns (address)\\n  {\\n    address implementationAddress = interfacesImplemented[interfaceName];\\n    require(implementationAddress != address(0x0), 'Implementation not found');\\n    return implementationAddress;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ISynthereumFinder\",\"name\":\"_synthereumFinder\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maintainer\",\"type\":\"address\"}],\"internalType\":\"struct SynthereumDeployer.Roles\",\"name\":\"_roles\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"derivativeVersion\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDerivative\",\"type\":\"address\"}],\"name\":\"DerivativeDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"poolVersion\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"derivative\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"PoolDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"selfMintingDerivativeVersion\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"selfMintingDerivative\",\"type\":\"address\"}],\"name\":\"SelfMintingDerivativeDeployed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINTAINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"derivativeVersion\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"derivativeParamsData\",\"type\":\"bytes\"},{\"internalType\":\"contract ISynthereumPoolDeployment\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"deployOnlyDerivative\",\"outputs\":[{\"internalType\":\"contract IDerivativeDeployment\",\"name\":\"derivative\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"poolVersion\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"poolParamsData\",\"type\":\"bytes\"},{\"internalType\":\"contract IDerivativeDeployment\",\"name\":\"derivative\",\"type\":\"address\"}],\"name\":\"deployOnlyPool\",\"outputs\":[{\"internalType\":\"contract ISynthereumPoolDeployment\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"selfMintingDerVersion\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"selfMintingDerParamsData\",\"type\":\"bytes\"}],\"name\":\"deployOnlySelfMintingDerivative\",\"outputs\":[{\"internalType\":\"contract ISelfMintingDerivativeDeployment\",\"name\":\"selfMintingDerivative\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"derivativeVersion\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"poolVersion\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"derivativeParamsData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"poolParamsData\",\"type\":\"bytes\"}],\"name\":\"deployPoolAndDerivative\",\"outputs\":[{\"internalType\":\"contract IDerivativeDeployment\",\"name\":\"derivative\",\"type\":\"address\"},{\"internalType\":\"contract ISynthereumPoolDeployment\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"synthereumFinder\",\"outputs\":[{\"internalType\":\"contract ISynthereumFinder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SynthereumDeployer","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d451de78e297b496ee8a4f06dcf991c17580b452000000000000000000000000eb04e2b446cde583f900daff3dd9917fcf6f0586000000000000000000000000cdddd005cf81dc8c4182e27f3079d22fa7c7d35a","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}