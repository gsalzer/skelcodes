{"status":"1","message":"OK","result":[{"SourceCode":"// \"SPDX-License-Identifier: MIT\r\n\r\npragma solidity <=0.7.0;\r\n\r\ncontract Gravity {\r\n    mapping(uint256=>address[]) public rounds;\r\n    uint256 public bftValue;\r\n    uint256 public lastRound;\r\n\r\n    constructor(address[] memory consuls, uint256 newBftValue) public {\r\n        rounds[0] = consuls;\r\n        bftValue = newBftValue;\r\n    }\r\n\r\n    function getConsuls() external view returns(address[] memory) {\r\n        return rounds[lastRound];\r\n    }\r\n\r\n    function getConsulsByRoundId(uint256 roundId) external view returns(address[] memory) {\r\n        return rounds[roundId];\r\n    }\r\n\r\n    function updateConsuls(address[] memory newConsuls, uint8[] memory v, bytes32[] memory r, bytes32[] memory s, uint256 roundId) public {\r\n        uint256 count = 0;\r\n\r\n        require(roundId > lastRound, \"round less last round\");\r\n\r\n        bytes32 dataHash = hashNewConsuls(newConsuls, roundId);\r\n\r\n        address[] memory consuls = rounds[lastRound];\r\n        for(uint i = 0; i < consuls.length; i++) {\r\n            count += ecrecover(dataHash, v[i], r[i], s[i]) == consuls[i] ? 1 : 0;\r\n        }\r\n        require(count >= bftValue, \"invalid bft count\");\r\n\r\n        rounds[roundId] = newConsuls;\r\n        lastRound = roundId;\r\n    }\r\n\r\n    function hashNewConsuls(address[] memory newConsuls, uint256 roundId) public pure returns(bytes32) {\r\n        bytes memory data;\r\n        for(uint i = 0; i < newConsuls.length; i++) {\r\n            data = abi.encodePacked(data, newConsuls[i]);\r\n        }\r\n        \r\n\r\n        return keccak256(abi.encodePacked(data, roundId));\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"consuls\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"newBftValue\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"bftValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConsuls\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getConsulsByRoundId\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newConsuls\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"hashNewConsuls\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newConsuls\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"updateConsuls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Gravity","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000003000000000000000000000000977fa57a02cc421e26099a4f499605cb7dd853d20000000000000000000000006ac9bd01c19abff57119e859652d4a2a5e4f9217000000000000000000000000d13a6cd149336a323f925fd5b660e322e048558e","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://154d5533f9f66b15c150e00a5109b7fbdc026e8bc8ac4ee61a0b8ea3a8c88bbb"}]}