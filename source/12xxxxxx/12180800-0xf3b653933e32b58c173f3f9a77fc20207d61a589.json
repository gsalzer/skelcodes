{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.15;\r\n\r\n/*\r\n:'######::'########:'########::'#######::\r\n'##... ##: ##.....::... ##..::'##.... ##:\r\n ##:::..:: ##:::::::::: ##:::: ##:::: ##:\r\n ##::::::: ######:::::: ##:::: ##:::: ##:\r\n ##::::::: ##...::::::: ##:::: ##:::: ##:\r\n ##::: ##: ##:::::::::: ##:::: ##:::: ##:\r\n. ######:: ########:::: ##::::. #######::\r\n:......:::........:::::..::::::.......:::\r\n\r\nCreator: 773d62b24a9d49e1f990b22e3ef1a9903f44ee809a12d73e660c66c1772c47dd\r\n*/\r\n\r\ncontract Hourglass {\r\n    /*=================================\r\n    =            MODIFIERS            =\r\n    =================================*/\r\n    // only people with tokens\r\n    modifier onlyBagholders() {\r\n        require(myTokens() > 0);\r\n        _;\r\n    }\r\n\r\n    // administrators can:\r\n    // -> change the name of the contract\r\n    // -> change the name of the token\r\n    // -> change the PoS difficulty (How many tokens it costs to hold a masternode, in case it gets crazy high later)\r\n    // they CANNOT:\r\n    // -> take funds\r\n    // -> disable withdrawals\r\n    // -> kill the contract\r\n    // -> change the price of tokens\r\n    modifier onlyAdministrator() {\r\n        address _customerAddress = msg.sender;\r\n        require(administrators[_customerAddress], \"This address is not an admin\");\r\n        _;\r\n    }\r\n\r\n    // ensures that the first tokens in the contract will be equally distributed\r\n    // meaning, no divine dump will be ever possible\r\n    // result: healthy longevity.\r\n    modifier antiEarlyWhale(uint256 _amountOfEthereum) {\r\n        // are we still in the vulnerable phase?\r\n        // if so, enact anti early whale protocol\r\n        if (onlyAmbassadors) {\r\n            address _customerAddress = msg.sender;\r\n\r\n            if (\r\n                (totalEthereumBalance() - _amountOfEthereum) <= ambassadorQuota_\r\n            ) {\r\n                require(\r\n                    // is the customer in the ambassador list?\r\n                    ambassadors_[_customerAddress] == true &&\r\n                        // does the customer purchase exceed the max ambassador quota?\r\n                        (ambassadorAccumulatedQuota_[_customerAddress] +\r\n                            _amountOfEthereum) <=\r\n                        ambassadorMaxPurchase_\r\n                );\r\n\r\n                // updated the accumulated quota\r\n                ambassadorAccumulatedQuota_[_customerAddress] = SafeMath.add(\r\n                    ambassadorAccumulatedQuota_[_customerAddress],\r\n                    _amountOfEthereum\r\n                );\r\n\r\n                // execute\r\n                _;\r\n            } else {\r\n                // in case the trx count drops low, the ambassador phase won't reinitiate\r\n                onlyAmbassadors = false;\r\n                _;\r\n            }\r\n        }\r\n\r\n        // execute\r\n        _;\r\n    }\r\n\r\n    /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n    event onTokenPurchase(\r\n        address indexed customerAddress,\r\n        uint256 incomingEthereum,\r\n        uint256 tokensMinted,\r\n        address indexed referredBy\r\n    );\r\n\r\n    event onTokenSell(\r\n        address indexed customerAddress,\r\n        uint256 tokensBurned,\r\n        uint256 ethereumEarned\r\n    );\r\n\r\n    event onReinvestment(\r\n        address indexed customerAddress,\r\n        uint256 ethereumReinvested,\r\n        uint256 tokensMinted\r\n    );\r\n\r\n    event onWithdraw(\r\n        address indexed customerAddress,\r\n        uint256 ethereumWithdrawn\r\n    );\r\n\r\n    // ERC20\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n    );\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    // When a customer sets up AutoReinvestment\r\n    event onAutoReinvestmentEntry(\r\n        address indexed customerAddress,\r\n        uint256 nextExecutionTime,\r\n        uint256 rewardPerInvocation,\r\n        uint24 period,\r\n        uint256 minimumDividendValue\r\n    );\r\n\r\n    // When a customer stops AutoReinvestment\r\n    event onAutoReinvestmentStop(address indexed customerAddress);\r\n\r\n    /*=====================================\r\n    =            CONFIGURABLES            =\r\n    =====================================*/\r\n    string public name = \"Crystal Elephant Token\";\r\n    string public symbol = \"ECETO\";\r\n    uint8 public constant decimals = 18;\r\n    uint8 internal constant dividendFee_ = 10;\r\n    uint256 internal constant tokenPriceInitial_ = 100e9; // unit: wei\r\n    uint256 internal constant tokenPriceIncremental_ = 10e9; // unit: wei\r\n    uint256 internal constant magnitude = 2**64;\r\n\r\n    // requirement for earning a referral bonus (defaults at 360 tokens)\r\n    uint256 public stakingRequirement = 30e18;\r\n\r\n    // ambassador program\r\n    mapping(address => bool) public ambassadors_;\r\n    uint256 internal constant ambassadorMaxPurchase_ = 4e18; // 4 ETH\r\n    uint256 internal constant ambassadorQuota_ = 100e18; // 100 ETH\r\n\r\n    /*================================\r\n    =            DATASETS            =\r\n    ================================*/\r\n    // amount of tokens for each address (scaled number)\r\n    mapping(address => uint256) internal tokenBalanceLedger_;\r\n\r\n    // TODO: \r\n    // amount of tokens bought with their buy timestamp for each address\r\n    struct TimestampedBalance {\r\n        uint256 value;\r\n        uint256 timestamp;\r\n        uint256 valueSold;\r\n    }\r\n\r\n    mapping(address => TimestampedBalance[])\r\n        internal tokenTimestampedBalanceLedger_;\r\n\r\n    // The start and end index of the unsold timestamped transactions list\r\n    struct Cursor {\r\n        uint256 start;\r\n        uint256 end;\r\n    }\r\n\r\n    mapping(address => Cursor) internal tokenTimestampedBalanceCursor;\r\n\r\n    // mappings to and from referral address\r\n    mapping(address => bytes32) public referralMapping;\r\n    mapping(bytes32 => address) public referralReverseMapping;\r\n\r\n    // The current referral balance\r\n    mapping(address => uint256) public referralBalance_;\r\n    // All time referrals earnings\r\n    mapping(address => uint256) public referralIncome_;\r\n\r\n    mapping(address => int256) internal payoutsTo_;\r\n    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\r\n    uint256 internal tokenSupply_ = 0;\r\n    uint256 internal profitPerShare_;\r\n\r\n    // administrator list (see above on what they can do)\r\n    mapping(address => bool) public administrators;\r\n\r\n    // when this is set to true, only ambassadors can purchase tokens (this prevents a whale premine, it ensures a fairly distributed upper pyramid)\r\n    bool public onlyAmbassadors = true;\r\n\r\n    /*=======================================\r\n    =            PUBLIC FUNCTIONS            =\r\n    =======================================*/\r\n    /*\r\n     * -- APPLICATION ENTRY POINTS --\r\n     */\r\n    constructor() public {\r\n        address owner = msg.sender;\r\n        administrators[owner] = true;\r\n\r\n        ambassadors_[0x8c67C528a78c3142eEbA7A9FB9966c3141ABFc07] = true;\r\n        ambassadors_[0xA3085Dc923e5de6E1919CFaE73a4D4557CF31734] = true;\r\n        ambassadors_[0x62544c00f6458011796605E8E6E7F799E17b1348] = true;\r\n        ambassadors_[0x5357777ddD555a192E1E87b96a93aAdcC463D0f8] = true;\r\n        ambassadors_[0x8713c7d84dA4edC2795EbaBfFdeEF4bB2Ef654Df] = true;\r\n        ambassadors_[0xC8b17a71fE39dB3AdD2438B89C1522d03767ebDA] = true;\r\n        ambassadors_[0x6B6dDbb85000EFCbff006BEa12CeD803Fd0a0B96] = true;\r\n        ambassadors_[0x2F09612675A16E9D97e8A0c27D2285A5d8FB6EBa] = true;\r\n        ambassadors_[0xD82f5174e03E3352a35a933a11100e6c2607Ba1E] = true;\r\n        ambassadors_[0x28eb45DB2c42b56A1C5BC915F4cc47DD79239632] = true;\r\n        ambassadors_[0x12B2398405f49dEc00D7ceEF9C0925e6fc96c51F] = true;\r\n        ambassadors_[0x32c0aE75EF5BEB409a17fcf26fDDb8561EEF8394] = true;\r\n        ambassadors_[0x2FC1DbA620e749E86E51C2d9c42993174E1986ce] = true;\r\n        ambassadors_[0xDBfc64ff6C4d85f42D8411680ebe90aD06bF3E81] = true;\r\n        ambassadors_[0xBD54eb8AD245450e225A77Af5956F2b41301c845] = true;\r\n        ambassadors_[0x58d1a5e3ca23F46E16BcA17849CE327a415A2ee5] = true;\r\n        ambassadors_[0x33a2e739b428508643Ee49d874775e1196178A1c] = true;\r\n        ambassadors_[0x45ADFF324Eb1ac03a6A115dc539052232D4bA980] = true;\r\n        ambassadors_[0x3e666E4B6091263F3A70C004E47a1e172f31Ff42] = true;\r\n        ambassadors_[0x766917c3Ee4AA5164b3A6F01363865efA8CE6fFd] = true;\r\n        ambassadors_[0x3Ee362b5DB70c2935e718f7711B1CCAC7dbAd081] = true;\r\n        ambassadors_[0xcb1A0F26c89fbC1BCb14fE1Ee9a2785BAE419e81] = true;\r\n    }\r\n\r\n    /**\r\n     * Fallback function to handle ethereum that was send straight to the contract\r\n     * Unfortunately we cannot use a referral address this way.\r\n     */\r\n    function() external payable {\r\n        purchaseTokens(msg.sender, msg.value, address(0));\r\n    }\r\n\r\n    /**\r\n     * Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\r\n     */\r\n    function buy(address _referredBy) public payable {\r\n        purchaseTokens(msg.sender, msg.value, _referredBy);\r\n    }\r\n\r\n    /**\r\n     * Converts all of caller's dividends to tokens.\r\n     */\r\n    function reinvest(\r\n        bool isAutoReinvestChecked,\r\n        uint24 period,\r\n        uint256 rewardPerInvocation,\r\n        uint256 minimumDividendValue\r\n    ) public {\r\n        _reinvest(msg.sender);\r\n\r\n        // Setup Auto Reinvestment\r\n        if (isAutoReinvestChecked) {\r\n            _setupAutoReinvest(\r\n                period,\r\n                rewardPerInvocation,\r\n                msg.sender,\r\n                minimumDividendValue\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Alias of sell() and withdraw().\r\n     */\r\n    function exit() public {\r\n        // get token count for caller & sell them all\r\n        address _customerAddress = msg.sender;\r\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\r\n        if (_tokens > 0) sell(_tokens);\r\n        withdraw();\r\n    }\r\n\r\n    /**\r\n     * Withdraws all of the callers earnings.\r\n     */\r\n    function withdraw() public {\r\n        _withdraw(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * Liquifies tokens to ethereum.\r\n     */\r\n    function sell(uint256 _amountOfTokens) public onlyBagholders() {\r\n        // setup data\r\n        address _customerAddress = msg.sender;\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n        uint256 _tokens = _amountOfTokens;\r\n        uint256 _ethereum = tokensToEthereum_(_tokens);\r\n\r\n        uint256 penalty =\r\n            mulDiv(\r\n                calculateAveragePenaltyAndUpdateLedger(\r\n                    _amountOfTokens,\r\n                    _customerAddress\r\n                ),\r\n                _ethereum,\r\n                100\r\n            );\r\n\r\n        uint256 _dividends =\r\n            SafeMath.add(\r\n                penalty,\r\n                SafeMath.div(SafeMath.sub(_ethereum, penalty), dividendFee_)\r\n            );\r\n\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n\r\n        // burn the sold tokens\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(\r\n            tokenBalanceLedger_[_customerAddress],\r\n            _tokens\r\n        );\r\n\r\n        // update dividends tracker\r\n        int256 _updatedPayouts =\r\n            (int256)(profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\r\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\r\n\r\n        if (tokenSupply_ > 0) {\r\n            // update the amount of dividends per token\r\n            profitPerShare_ = SafeMath.add(\r\n                profitPerShare_,\r\n                mulDiv(_dividends, magnitude, tokenSupply_)\r\n            );\r\n        }\r\n\r\n        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum);\r\n    }\r\n\r\n    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\r\n    /**\r\n     * In case the amassador quota is not met, the administrator can manually disable the ambassador phase.\r\n     */\r\n    function disableInitialStage() public onlyAdministrator() {\r\n        onlyAmbassadors = false;\r\n    }\r\n\r\n    function setAdministrator(address _identifier, bool _status)\r\n        public\r\n        onlyAdministrator()\r\n    {\r\n        administrators[_identifier] = _status;\r\n    }\r\n\r\n    /**\r\n     * Precautionary measures in case we need to adjust the masternode rate.\r\n     */\r\n    function setStakingRequirement(uint256 _amountOfTokens)\r\n        public\r\n        onlyAdministrator()\r\n    {\r\n        stakingRequirement = _amountOfTokens;\r\n    }\r\n\r\n    /**\r\n     * If we want to rebrand, we can.\r\n     */\r\n    function setName(string memory _name) public onlyAdministrator() {\r\n        name = _name;\r\n    }\r\n\r\n    /**\r\n     * If we want to rebrand, we can.\r\n     */\r\n    function setSymbol(string memory _symbol) public onlyAdministrator() {\r\n        symbol = _symbol;\r\n    }\r\n\r\n    /*----------  REFERRAL FUNCTIONS  ----------*/\r\n\r\n    function setReferralName(bytes32 ref_name) public returns (bool) {\r\n        referralMapping[msg.sender] = ref_name;\r\n        referralReverseMapping[ref_name] = msg.sender;\r\n        return true;\r\n    }\r\n\r\n    function getReferralAddressForName(bytes32 ref_name)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return referralReverseMapping[ref_name];\r\n    }\r\n\r\n    function getReferralNameForAddress(address ref_address)\r\n        public\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return referralMapping[ref_address];\r\n    }\r\n\r\n    function getReferralBalance() public view returns (uint256, uint256) {\r\n        address _customerAddress = msg.sender;\r\n        return (\r\n            referralBalance_[_customerAddress],\r\n            referralIncome_[_customerAddress]\r\n        );\r\n    }\r\n\r\n    /*------READ FUNCTIONS FOR TIMESTAMPED BALANCE LEDGER-------*/\r\n\r\n    function getCursor() public view returns (uint256, uint256) {\r\n        address _customerAddress = msg.sender;\r\n        Cursor storage cursor = tokenTimestampedBalanceCursor[_customerAddress];\r\n\r\n        return (cursor.start, cursor.end);\r\n    }\r\n\r\n    function getTimestampedBalanceLedger(uint256 counter)\r\n        public\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        TimestampedBalance storage transaction =\r\n            tokenTimestampedBalanceLedger_[_customerAddress][counter];\r\n        return (\r\n            transaction.value,\r\n            transaction.timestamp,\r\n            transaction.valueSold\r\n        );\r\n    }\r\n\r\n    /*----------  HELPERS AND CALCULATORS  ----------*/\r\n    /**\r\n     * Method to view the current Ethereum stored in the contract\r\n     * Example: totalEthereumBalance()\r\n     */\r\n    function totalEthereumBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    /**\r\n     * Retrieve the total token supply.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return tokenSupply_;\r\n    }\r\n\r\n    /**\r\n     * Retrieve the tokens owned by the caller.\r\n     */\r\n    function myTokens() public view returns (uint256) {\r\n        address _customerAddress = msg.sender;\r\n        return balanceOf(_customerAddress);\r\n    }\r\n\r\n    /**\r\n     * Retrieve the dividends owned by the caller.\r\n     * If `_includeReferralBonus` is true, the referral bonus will be included in the calculations.\r\n     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\r\n     * But in the internal calculations, we want them separate.\r\n     */\r\n    function myDividends(bool _includeReferralBonus)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return\r\n            _includeReferralBonus\r\n                ? dividendsOf(_customerAddress) +\r\n                    referralBalance_[_customerAddress]\r\n                : dividendsOf(_customerAddress);\r\n    }\r\n\r\n    /**\r\n     * Retrieve the token balance of any single address.\r\n     */\r\n    function balanceOf(address _customerAddress) public view returns (uint256) {\r\n        return tokenBalanceLedger_[_customerAddress];\r\n    }\r\n\r\n    /**\r\n     * Retrieve the dividend balance of any single address.\r\n     */\r\n    function dividendsOf(address _customerAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return\r\n            (uint256)(\r\n                (int256)(\r\n                    profitPerShare_ * tokenBalanceLedger_[_customerAddress]\r\n                ) - payoutsTo_[_customerAddress]\r\n            ) / magnitude;\r\n    }\r\n\r\n    /**\r\n     * Return the ethereum received on selling 1 individual token.\r\n     * We are not deducting the penalty over here as it's a general sell price\r\n     * the user can use the `calculateEthereumReceived` to get the sell price specific to them\r\n     */\r\n    function sellPrice() public view returns (uint256) {\r\n        if (tokenSupply_ == 0) {\r\n            return tokenPriceInitial_ - tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(1e18);\r\n            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\r\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return the ethereum required for buying 1 individual token.\r\n     */\r\n    function buyPrice() public view returns (uint256) {\r\n        if (tokenSupply_ == 0) {\r\n            return tokenPriceInitial_ + tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(1e18);\r\n            uint256 _taxedEthereum =\r\n                mulDiv(_ethereum, dividendFee_, (dividendFee_ - 1));\r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\r\n     */\r\n    function calculateTokensReceived(uint256 _ethereumToSpend)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 _dividends = SafeMath.div(_ethereumToSpend, dividendFee_);\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    function calculateTokensReinvested() public view returns (uint256) {\r\n        uint256 _ethereumToSpend = myDividends(true);\r\n        uint256 _dividends = SafeMath.div(_ethereumToSpend, dividendFee_);\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    /**\r\n     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\r\n     */\r\n    function calculateEthereumReceived(uint256 _tokensToSell)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(_tokensToSell <= tokenSupply_);\r\n        require(_tokensToSell <= myTokens());\r\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\r\n        address _customerAddress = msg.sender;\r\n\r\n        uint256 penalty =\r\n            mulDiv(\r\n                calculateAveragePenalty(_tokensToSell, _customerAddress),\r\n                _ethereum,\r\n                100\r\n            );\r\n\r\n        uint256 _dividends =\r\n            SafeMath.add(\r\n                penalty,\r\n                SafeMath.div(SafeMath.sub(_ethereum, penalty), dividendFee_)\r\n            );\r\n\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n        return _taxedEthereum;\r\n    }\r\n\r\n    function calculateEthereumTransferred(uint256 _amountOfTokens)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(_amountOfTokens <= tokenSupply_);\r\n        require(_amountOfTokens <= myTokens());\r\n        uint256 _tokenFee = SafeMath.div(_amountOfTokens, dividendFee_);\r\n        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\r\n        return _taxedTokens;\r\n    }\r\n\r\n    /**\r\n     * Calculate the early exit penalty for selling x tokens\r\n     */\r\n    function calculateAveragePenalty(\r\n        uint256 _amountOfTokens,\r\n        address _customerAddress\r\n    ) public view onlyBagholders() returns (uint256) {\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n\r\n        uint256 tokensFound = 0;\r\n        Cursor storage _customerCursor =\r\n            tokenTimestampedBalanceCursor[_customerAddress];\r\n        uint256 counter = _customerCursor.start;\r\n        uint256 averagePenalty = 0;\r\n\r\n        while (counter <= _customerCursor.end) {\r\n            TimestampedBalance storage transaction =\r\n                tokenTimestampedBalanceLedger_[_customerAddress][counter];\r\n            uint256 tokensAvailable =\r\n                SafeMath.sub(transaction.value, transaction.valueSold);\r\n\r\n            uint256 tokensRequired = SafeMath.sub(_amountOfTokens, tokensFound);\r\n\r\n            if (tokensAvailable < tokensRequired) {\r\n                tokensFound += tokensAvailable;\r\n                averagePenalty = SafeMath.add(\r\n                    averagePenalty,\r\n                    SafeMath.mul(\r\n                        _calculatePenalty(transaction.timestamp),\r\n                        tokensAvailable\r\n                    )\r\n                );\r\n            } else if (tokensAvailable <= tokensRequired) {\r\n                averagePenalty = SafeMath.add(\r\n                    averagePenalty,\r\n                    SafeMath.mul(\r\n                        _calculatePenalty(transaction.timestamp),\r\n                        tokensRequired\r\n                    )\r\n                );\r\n                break;\r\n            } else {\r\n                averagePenalty = SafeMath.add(\r\n                    averagePenalty,\r\n                    SafeMath.mul(\r\n                        _calculatePenalty(transaction.timestamp),\r\n                        tokensRequired\r\n                    )\r\n                );\r\n                break;\r\n            }\r\n\r\n            counter = SafeMath.add(counter, 1);\r\n        }\r\n        return SafeMath.div(averagePenalty, _amountOfTokens);\r\n    }\r\n\r\n    /**\r\n     * Calculate the early exit penalty for selling after x days\r\n     */\r\n    function _calculatePenalty(uint256 timestamp)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 gap = block.timestamp - timestamp;\r\n\r\n        if (gap > 30 days) {\r\n            return 0;\r\n        } else if (gap > 20 days) {\r\n            return 25;\r\n        } else if (gap > 10 days) {\r\n            return 50;\r\n        }\r\n        return 75;\r\n    }\r\n\r\n    /**\r\n     * Calculate Token price based on an amount of incoming ethereum\r\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n     */\r\n    function ethereumToTokens_(uint256 _ethereum)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\r\n        uint256 _tokensReceived =\r\n            ((\r\n                SafeMath.sub(\r\n                    (\r\n                        sqrt(\r\n                            (_tokenPriceInitial**2) +\r\n                                (2 *\r\n                                    (tokenPriceIncremental_ * 1e18) *\r\n                                    (_ethereum * 1e18)) +\r\n                                (((tokenPriceIncremental_)**2) *\r\n                                    (tokenSupply_**2)) +\r\n                                (2 *\r\n                                    (tokenPriceIncremental_) *\r\n                                    _tokenPriceInitial *\r\n                                    tokenSupply_)\r\n                        )\r\n                    ),\r\n                    _tokenPriceInitial\r\n                )\r\n            ) / (tokenPriceIncremental_)) - (tokenSupply_);\r\n\r\n        return _tokensReceived;\r\n    }\r\n\r\n    /**\r\n     * Calculate token sell value.\r\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n     */\r\n    function tokensToEthereum_(uint256 _tokens) public view returns (uint256) {\r\n        uint256 tokens_ = (_tokens + 1e18);\r\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\r\n        uint256 _ethereumReceived =\r\n            (SafeMath.sub(\r\n                (((tokenPriceInitial_ +\r\n                    (tokenPriceIncremental_ * (_tokenSupply / 1e18))) -\r\n                    tokenPriceIncremental_) * (tokens_ - 1e18)),\r\n                (tokenPriceIncremental_ * ((tokens_**2 - tokens_) / 1e18)) / 2\r\n            ) / 1e18);\r\n\r\n        return _ethereumReceived;\r\n    }\r\n\r\n    /*==========================================\r\n    =            INTERNAL FUNCTIONS            =\r\n    ==========================================*/\r\n    function purchaseTokens(\r\n        address _customerAddress,\r\n        uint256 _incomingEthereum,\r\n        address _referredBy\r\n    ) internal antiEarlyWhale(_incomingEthereum) returns (uint256) {\r\n        // data setup\r\n        uint256 _undividedDividends =\r\n            SafeMath.div(_incomingEthereum, dividendFee_);\r\n        uint256 _referralBonus = SafeMath.div(_undividedDividends, 3);\r\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\r\n        uint256 _taxedEthereum =\r\n            SafeMath.sub(_incomingEthereum, _undividedDividends);\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n        uint256 _fee = _dividends * magnitude;\r\n\r\n        require(\r\n            _amountOfTokens > 0 &&\r\n                SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_\r\n        );\r\n\r\n        // is the user referred by a masternode?\r\n        if (\r\n            _referredBy != address(0) &&\r\n            _referredBy != _customerAddress &&\r\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\r\n        ) {\r\n            // wealth redistribution\r\n            referralBalance_[_referredBy] = SafeMath.add(\r\n                referralBalance_[_referredBy],\r\n                _referralBonus\r\n            );\r\n            referralIncome_[_referredBy] = SafeMath.add(\r\n                referralIncome_[_referredBy],\r\n                _referralBonus\r\n            );\r\n        } else {\r\n            // no ref purchase\r\n            // add the referral bonus back to the global dividends cake\r\n            _dividends = SafeMath.add(_dividends, _referralBonus);\r\n            _fee = _dividends * magnitude;\r\n        }\r\n\r\n        if (tokenSupply_ > 0) {\r\n            // add tokens to the pool\r\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n\r\n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\r\n            profitPerShare_ += ((_dividends * magnitude) / (tokenSupply_));\r\n\r\n            // calculate the amount of tokens the customer receives over his purchase\r\n            _fee =\r\n                _fee -\r\n                (_fee -\r\n                    (_amountOfTokens *\r\n                        ((_dividends * magnitude) / (tokenSupply_))));\r\n        } else {\r\n            // add tokens to the pool\r\n            tokenSupply_ = _amountOfTokens;\r\n        }\r\n\r\n        // update circulating supply & the ledger address for the customer\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(\r\n            tokenBalanceLedger_[_customerAddress],\r\n            _amountOfTokens\r\n        );\r\n        tokenTimestampedBalanceLedger_[_customerAddress].push(\r\n            TimestampedBalance(_amountOfTokens, block.timestamp, 0)\r\n        );\r\n        tokenTimestampedBalanceCursor[_customerAddress].end += 1;\r\n\r\n        // You don't get dividends for the tokens before they owned them\r\n        int256 _updatedPayouts =\r\n            (int256)(profitPerShare_ * _amountOfTokens - _fee);\r\n        payoutsTo_[_customerAddress] += _updatedPayouts;\r\n\r\n        // fire event\r\n        emit onTokenPurchase(\r\n            _customerAddress,\r\n            _incomingEthereum,\r\n            _amountOfTokens,\r\n            _referredBy\r\n        );\r\n\r\n        emit Transfer(\r\n            address(0),\r\n            _customerAddress,\r\n            _amountOfTokens\r\n        );\r\n\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    function _reinvest(address _customerAddress) internal {\r\n        uint256 _dividends = dividendsOf(_customerAddress);\r\n\r\n        // onlyStronghands\r\n        require(_dividends + referralBalance_[_customerAddress] > 0);\r\n\r\n        payoutsTo_[_customerAddress] += (int256)(_dividends * magnitude);\r\n\r\n        // retrieve ref. bonus\r\n        _dividends += referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n\r\n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\r\n        uint256 _tokens =\r\n            purchaseTokens(_customerAddress, _dividends, address(0));\r\n\r\n        // fire event\r\n        emit onReinvestment(_customerAddress, _dividends, _tokens);\r\n    }\r\n\r\n    function _withdraw(address _customerAddress) internal {\r\n        uint256 _dividends = dividendsOf(_customerAddress); // get ref. bonus later in the code\r\n\r\n        // onlyStronghands\r\n        require(_dividends + referralBalance_[_customerAddress] > 0);\r\n\r\n        // update dividend tracker\r\n        payoutsTo_[_customerAddress] += (int256)(_dividends * magnitude);\r\n\r\n        // add ref. bonus\r\n        _dividends += referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n\r\n        address payable _payableCustomerAddress =\r\n            address(uint160(_customerAddress));\r\n        _payableCustomerAddress.transfer(_dividends);\r\n\r\n        // fire event\r\n        emit onWithdraw(_customerAddress, _dividends);\r\n    }\r\n\r\n    /**\r\n     * Update ledger after transferring x tokens\r\n     */\r\n    function _updateLedgerForTransfer(\r\n        uint256 _amountOfTokens,\r\n        address _customerAddress\r\n    ) internal {\r\n        // Parse through the list of transactions\r\n        uint256 tokensFound = 0;\r\n        Cursor storage _customerCursor =\r\n            tokenTimestampedBalanceCursor[_customerAddress];\r\n        uint256 counter = _customerCursor.start;\r\n\r\n        while (counter <= _customerCursor.end) {\r\n            TimestampedBalance storage transaction =\r\n                tokenTimestampedBalanceLedger_[_customerAddress][counter];\r\n            uint256 tokensAvailable =\r\n                SafeMath.sub(transaction.value, transaction.valueSold);\r\n\r\n            uint256 tokensRequired = SafeMath.sub(_amountOfTokens, tokensFound);\r\n\r\n            if (tokensAvailable < tokensRequired) {\r\n                tokensFound += tokensAvailable;\r\n\r\n                delete tokenTimestampedBalanceLedger_[_customerAddress][\r\n                    counter\r\n                ];\r\n            } else if (tokensAvailable <= tokensRequired) {\r\n                delete tokenTimestampedBalanceLedger_[_customerAddress][\r\n                    counter\r\n                ];\r\n                _customerCursor.start = counter + 1;\r\n                break;\r\n            } else {\r\n                transaction.valueSold += tokensRequired;\r\n                _customerCursor.start = counter;\r\n                break;\r\n            }\r\n            counter += 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate the early exit penalty for selling x tokens and edit the timestamped ledger\r\n     */\r\n    function calculateAveragePenaltyAndUpdateLedger(\r\n        uint256 _amountOfTokens,\r\n        address _customerAddress\r\n    ) internal onlyBagholders() returns (uint256) {\r\n        // Parse through the list of transactions\r\n        uint256 tokensFound = 0;\r\n        Cursor storage _customerCursor =\r\n            tokenTimestampedBalanceCursor[_customerAddress];\r\n        uint256 counter = _customerCursor.start;\r\n        uint256 averagePenalty = 0;\r\n\r\n        while (counter <= _customerCursor.end) {\r\n            TimestampedBalance storage transaction =\r\n                tokenTimestampedBalanceLedger_[_customerAddress][counter];\r\n            uint256 tokensAvailable =\r\n                SafeMath.sub(transaction.value, transaction.valueSold);\r\n\r\n            uint256 tokensRequired = SafeMath.sub(_amountOfTokens, tokensFound);\r\n\r\n            if (tokensAvailable < tokensRequired) {\r\n                tokensFound += tokensAvailable;\r\n                averagePenalty = SafeMath.add(\r\n                    averagePenalty,\r\n                    SafeMath.mul(\r\n                        _calculatePenalty(transaction.timestamp),\r\n                        tokensAvailable\r\n                    )\r\n                );\r\n                delete tokenTimestampedBalanceLedger_[_customerAddress][\r\n                    counter\r\n                ];\r\n            } else if (tokensAvailable <= tokensRequired) {\r\n                averagePenalty = SafeMath.add(\r\n                    averagePenalty,\r\n                    SafeMath.mul(\r\n                        _calculatePenalty(transaction.timestamp),\r\n                        tokensRequired\r\n                    )\r\n                );\r\n                delete tokenTimestampedBalanceLedger_[_customerAddress][\r\n                    counter\r\n                ];\r\n                _customerCursor.start = counter + 1;\r\n                break;\r\n            } else {\r\n                averagePenalty = SafeMath.add(\r\n                    averagePenalty,\r\n                    SafeMath.mul(\r\n                        _calculatePenalty(transaction.timestamp),\r\n                        tokensRequired\r\n                    )\r\n                );\r\n                transaction.valueSold += tokensRequired;\r\n                _customerCursor.start = counter;\r\n                break;\r\n            }\r\n\r\n            counter += 1;\r\n        }\r\n\r\n        return SafeMath.div(averagePenalty, _amountOfTokens);\r\n    }\r\n\r\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\r\n        uint256 z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev calculates x*y and outputs a emulated 512bit number as l being the lower 256bit half and h the upper 256bit half.\r\n     */\r\n    function fullMul(uint256 x, uint256 y)\r\n        public\r\n        pure\r\n        returns (uint256 l, uint256 h)\r\n    {\r\n        uint256 mm = mulmod(x, y, uint256(-1));\r\n        l = x * y;\r\n        h = mm - l;\r\n        if (mm < l) h -= 1;\r\n    }\r\n\r\n    /**\r\n     * @dev calculates x*y/z taking care of phantom overflows.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 z\r\n    ) public pure returns (uint256) {\r\n        (uint256 l, uint256 h) = fullMul(x, y);\r\n        require(h < z);\r\n        uint256 mm = mulmod(x, y, z);\r\n        if (mm > l) h -= 1;\r\n        l -= mm;\r\n        uint256 pow2 = z & -z;\r\n        z /= pow2;\r\n        l /= pow2;\r\n        l += h * ((-pow2) / pow2 + 1);\r\n        uint256 r = 1;\r\n        r *= 2 - z * r;\r\n        r *= 2 - z * r;\r\n        r *= 2 - z * r;\r\n        r *= 2 - z * r;\r\n        r *= 2 - z * r;\r\n        r *= 2 - z * r;\r\n        r *= 2 - z * r;\r\n        r *= 2 - z * r;\r\n        return l * r;\r\n    }\r\n\r\n    /*\r\n     * =========================\r\n     * Auto Reinvestment Feature\r\n     * =========================\r\n     */\r\n\r\n    // uint256 recommendedRewardPerInvocation = 5000000; // 5 TRX\r\n\r\n    struct AutoReinvestEntry {\r\n        uint256 nextExecutionTime;\r\n        uint256 rewardPerInvocation;\r\n        uint256 minimumDividendValue;\r\n        uint24 period;\r\n    }\r\n\r\n    mapping(address => AutoReinvestEntry) internal autoReinvestment;\r\n\r\n    function setupAutoReinvest(\r\n        uint24 period,\r\n        uint256 rewardPerInvocation,\r\n        uint256 minimumDividendValue\r\n    ) public {\r\n        _setupAutoReinvest(\r\n            period,\r\n            rewardPerInvocation,\r\n            msg.sender,\r\n            minimumDividendValue\r\n        );\r\n    }\r\n\r\n    function _setupAutoReinvest(\r\n        uint24 period,\r\n        uint256 rewardPerInvocation,\r\n        address customerAddress,\r\n        uint256 minimumDividendValue\r\n    ) internal {\r\n        autoReinvestment[customerAddress] = AutoReinvestEntry(\r\n            block.timestamp + period,\r\n            rewardPerInvocation,\r\n            minimumDividendValue,\r\n            period\r\n        );\r\n\r\n        // Launch an event that this entry has been created\r\n        emit onAutoReinvestmentEntry(\r\n            customerAddress,\r\n            autoReinvestment[customerAddress].nextExecutionTime,\r\n            rewardPerInvocation,\r\n            period,\r\n            minimumDividendValue\r\n        );\r\n    }\r\n\r\n    // Anyone can call this function and claim the reward\r\n    function invokeAutoReinvest(address _customerAddress)\r\n        external\r\n        returns (uint256)\r\n    {\r\n        AutoReinvestEntry storage entry = autoReinvestment[_customerAddress];\r\n\r\n        if (\r\n            entry.nextExecutionTime > 0 &&\r\n            block.timestamp >= entry.nextExecutionTime\r\n        ) {\r\n            // fetch dividends\r\n            uint256 _dividends = dividendsOf(_customerAddress);\r\n\r\n            // Only execute if the user's dividends are more that the\r\n            // rewardPerInvocation and the minimumDividendValue\r\n            if (\r\n                _dividends > entry.minimumDividendValue &&\r\n                _dividends > entry.rewardPerInvocation\r\n            ) {\r\n                // Deduct the reward from the users dividends\r\n                payoutsTo_[_customerAddress] += (int256)(\r\n                    entry.rewardPerInvocation * magnitude\r\n                );\r\n\r\n                // Update the Auto Reinvestment entry\r\n                entry.nextExecutionTime +=\r\n                    (((block.timestamp - entry.nextExecutionTime) /\r\n                        uint256(entry.period)) + 1) *\r\n                    uint256(entry.period);\r\n\r\n                /*\r\n                 * Do the reinvestment\r\n                 */\r\n                _reinvest(_customerAddress);\r\n\r\n                // Send the caller their reward\r\n                msg.sender.transfer(entry.rewardPerInvocation);\r\n            }\r\n        }\r\n\r\n        return entry.nextExecutionTime;\r\n    }\r\n\r\n    // Read function for the frontend to determine if the user has setup Auto Reinvestment or not\r\n    function getAutoReinvestEntry()\r\n        public\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint24,\r\n            uint256\r\n        )\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        AutoReinvestEntry storage _autoReinvestEntry =\r\n            autoReinvestment[_customerAddress];\r\n        return (\r\n            _autoReinvestEntry.nextExecutionTime,\r\n            _autoReinvestEntry.rewardPerInvocation,\r\n            _autoReinvestEntry.period,\r\n            _autoReinvestEntry.minimumDividendValue\r\n        );\r\n    }\r\n\r\n    // Read function for the scheduling workers determine if the user has setup Auto Reinvestment or not\r\n    function getAutoReinvestEntryOf(address _customerAddress)\r\n        public\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint24,\r\n            uint256\r\n        )\r\n    {\r\n        AutoReinvestEntry storage _autoReinvestEntry =\r\n            autoReinvestment[_customerAddress];\r\n        return (\r\n            _autoReinvestEntry.nextExecutionTime,\r\n            _autoReinvestEntry.rewardPerInvocation,\r\n            _autoReinvestEntry.period,\r\n            _autoReinvestEntry.minimumDividendValue\r\n        );\r\n    }\r\n\r\n    // The user can stop the autoReinvestment whenever they want\r\n    function stopAutoReinvest() external {\r\n        address customerAddress = msg.sender;\r\n        if (autoReinvestment[customerAddress].nextExecutionTime > 0) {\r\n            delete autoReinvestment[customerAddress];\r\n\r\n            // Launch an event that this entry has been deleted\r\n            emit onAutoReinvestmentStop(customerAddress);\r\n        }\r\n    }\r\n\r\n    // Allowance, Approval and Transfer From\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public returns (bool) {\r\n        uint256 final_amount =\r\n            SafeMath.sub(_allowances[sender][msg.sender], amount);\r\n\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, final_amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _toAddress, uint256 _amountOfTokens)\r\n        public\r\n        onlyBagholders\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, _toAddress, _amountOfTokens);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient` after liquifying 10% of the tokens `amount` as dividens.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `_customerAddress` cannot be the zero address.\r\n     * - `_toAddress` cannot be the zero address.\r\n     * - `_customerAddress` must have a balance of at least `_amountOfTokens`.\r\n     */\r\n    function _transfer(\r\n        address _customerAddress,\r\n        address _toAddress,\r\n        uint256 _amountOfTokens\r\n    ) internal {\r\n        require(\r\n            _customerAddress != address(0),\r\n            \"ERC20: transfer from the zero address\"\r\n        );\r\n        require(\r\n            _toAddress != address(0),\r\n            \"ERC20: transfer to the zero address\"\r\n        );\r\n\r\n        // also disables transfers until ambassador phase is over\r\n        // ( we dont want whale premines )\r\n        // make sure we have the requested tokens\r\n        require(\r\n            !onlyAmbassadors &&\r\n                _amountOfTokens <= tokenBalanceLedger_[_customerAddress]\r\n        );\r\n\r\n        // withdraw all outstanding dividends first\r\n        if (\r\n            dividendsOf(_customerAddress) + referralBalance_[_customerAddress] >\r\n            0\r\n        ) {\r\n            _withdraw(_customerAddress);\r\n        }\r\n\r\n        // updating tokenTimestampedBalanceLedger_ for _customerAddress\r\n        _updateLedgerForTransfer(_amountOfTokens, _customerAddress);\r\n\r\n        // liquify 10% of the remaining tokens that are transfered\r\n        // these are dispersed to shareholders\r\n        uint256 _tokenFee = SafeMath.div(_amountOfTokens, dividendFee_);\r\n\r\n        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\r\n        uint256 _dividends = tokensToEthereum_(_tokenFee);\r\n\r\n        // burn the fee tokens\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\r\n\r\n        // exchange tokens\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(\r\n            tokenBalanceLedger_[_customerAddress],\r\n            _amountOfTokens\r\n        );\r\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(\r\n            tokenBalanceLedger_[_toAddress],\r\n            _taxedTokens\r\n        );\r\n\r\n        // updating tokenTimestampedBalanceLedger_ for _toAddress\r\n        tokenTimestampedBalanceLedger_[_toAddress].push(\r\n            TimestampedBalance(_taxedTokens, block.timestamp, 0)\r\n        );\r\n        tokenTimestampedBalanceCursor[_toAddress].end += 1;\r\n\r\n        // update dividend trackers\r\n        payoutsTo_[_customerAddress] -= (int256)(\r\n            profitPerShare_ * _amountOfTokens\r\n        );\r\n        payoutsTo_[_toAddress] += (int256)(profitPerShare_ * _taxedTokens);\r\n\r\n        // disperse dividends among holders\r\n        profitPerShare_ = SafeMath.add(\r\n            profitPerShare_,\r\n            mulDiv(_dividends, magnitude, tokenSupply_)\r\n        );\r\n\r\n        // fire event\r\n        emit Transfer(_customerAddress, _toAddress, _taxedTokens);\r\n    }\r\n\r\n    // Atomically increases the allowance granted to `spender` by the caller.\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint256 final_allowance =\r\n            SafeMath.add(_allowances[msg.sender][spender], addedValue);\r\n\r\n        _approve(msg.sender, spender, final_allowance);\r\n        return true;\r\n    }\r\n\r\n    //Atomically decreases the allowance granted to `spender` by the caller.\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint256 final_allowance =\r\n            SafeMath.sub(_allowances[msg.sender][spender], subtractedValue);\r\n\r\n        _approve(msg.sender, spender, final_allowance);\r\n        return true;\r\n    }\r\n\r\n    // Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextExecutionTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerInvocation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"period\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumDividendValue\",\"type\":\"uint256\"}],\"name\":\"onAutoReinvestmentEntry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"}],\"name\":\"onAutoReinvestmentStop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethereumReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referredBy\",\"type\":\"address\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethereumEarned\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"_calculatePenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"administrators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ambassadors_\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"calculateAveragePenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateEthereumReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"calculateEthereumTransferred\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethereumToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculateTokensReinvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableInitialStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethereum\",\"type\":\"uint256\"}],\"name\":\"ethereumToTokens_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"fullMul\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAutoReinvestEntry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"getAutoReinvestEntryOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCursor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ref_name\",\"type\":\"bytes32\"}],\"name\":\"getReferralAddressForName\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReferralBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref_address\",\"type\":\"address\"}],\"name\":\"getReferralNameForAddress\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"counter\",\"type\":\"uint256\"}],\"name\":\"getTimestampedBalanceLedger\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"invokeAutoReinvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"name\":\"mulDiv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onlyAmbassadors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralBalance_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralIncome_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralMapping\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"referralReverseMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isAutoReinvestChecked\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"period\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerInvocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumDividendValue\",\"type\":\"uint256\"}],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identifier\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAdministrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ref_name\",\"type\":\"bytes32\"}],\"name\":\"setReferralName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"setStakingRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"period\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerInvocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumDividendValue\",\"type\":\"uint256\"}],\"name\":\"setupAutoReinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRequirement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopAutoReinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"tokensToEthereum_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Hourglass","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://2c4790f7928bf9a3a45a9f8993b6a67a03c0e30cb3eae470bc64181e301607b8"}]}