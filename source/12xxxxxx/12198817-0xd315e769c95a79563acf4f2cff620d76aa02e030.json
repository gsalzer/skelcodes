{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.7.5;\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// SafeMath library\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n    \r\n    function ceil(uint a, uint m) internal pure returns (uint r) {\r\n        return (a + m - 1) / m * m;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address payable public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0), \"ERC20: sending to the zero address\");\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(msg.sender, _newOwner);\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// ----------------------------------------------------------------------------\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address tokenOwner) external view returns (uint256 balance);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint256 remaining);\r\n    function transfer(address to, uint256 tokens) external returns (bool success);\r\n    function approve(address spender, uint256 tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint256 tokens) external returns (bool success);\r\n    function burnTokens(uint256 _amount) external;\r\n    \r\n    function calculateFeesBeforeSend(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external view returns (uint256, uint256);\r\n    \r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n}\r\n\r\n\r\ninterface stakeContract {\r\n    function DisributeTxFunds() external;\r\n    function ADDFUNDS(uint256 tokens) external;\r\n}\r\n\r\ncontract FeeDistributor is Owned {\r\n    using SafeMath for uint256;\r\n    \r\n    address public fBNB   = 0x87b1AccE6a1958E522233A737313C086551a5c76;\r\n    address public dev   = 0x94D4Ac11689C6EbbA91cDC1430fc7dfa9a858753;\r\n    bool public perform = false;\r\n\r\n    stakeContract stakingContract; //FEG staking contract address\r\n    stakeContract LPstakingContract; //FEG LP staking contract address\r\n    \r\n    fallback() external payable {\r\n        owner.transfer(msg.value);\r\n    }\r\n    \r\n    receive() external payable{  owner.transfer(msg.value); }\r\n\r\n    constructor(stakeContract _stakingContract, stakeContract _lpStakingContract) {\r\n        owner = msg.sender;\r\n        stakingContract     = _stakingContract;\r\n        LPstakingContract   = _lpStakingContract;\r\n    }\r\n    \r\n    function changeStakingContract(stakeContract _stakingContract) external onlyOwner{\r\n        require(address(_stakingContract) != address(0), \"setting 0 to contract\");\r\n        stakingContract = _stakingContract;\r\n    }\r\n    \r\n    function changeLPStakingContract(stakeContract _lpStakingContract) external onlyOwner{\r\n        require(address(_lpStakingContract) != address(0), \"setting 0 to contract\");\r\n        LPstakingContract = _lpStakingContract;\r\n    }\r\n\r\n    function changedev(address _DEV) external onlyOwner{\r\n        dev = _DEV;\r\n    }\r\n    \r\n    function changePerform(bool _bool) external onlyOwner{\r\n        perform = _bool;\r\n    }\r\n\r\n\r\n    function distributeAll() public{\r\n        \r\n        uint256 amount = IERC20(fBNB).balanceOf(address(this)).mul(uint256(999)).div(1000);\r\n        uint256 amountForToken  = (onePercent(amount).mul(uint256(480))).div(10); \r\n        require(IERC20(fBNB).transfer( address(stakingContract), amountForToken), \"Tokens cannot be transferred from funder account\");\r\n        stakingContract.ADDFUNDS(amountForToken);\r\n        \r\n         uint256 amountForLP     = (onePercent(amount).mul(uint256(320))).div(10);\r\n        require(IERC20(fBNB).transfer( address(LPstakingContract), amountForLP), \"Tokens cannot be transferred from funder account\");\r\n        if(perform==true) {\r\n        LPstakingContract.ADDFUNDS(amountForLP);}        \r\n        \r\n         uint256 amountFinal     = amount.sub(amountForToken.add(amountForLP));\r\n        require(IERC20(fBNB).transfer( address(dev), amountFinal), \"Tokens cannot be transferred from funder account\");\r\n    }\r\n\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Private function to calculate 1% percentage\r\n    // ------------------------------------------------------------------------\r\n    function onePercent(uint256 _tokens) private pure returns (uint256){\r\n        uint256 roundValue = _tokens.ceil(100);\r\n        uint onePercentofTokens = roundValue.mul(100).div(100 * 10**uint(2));\r\n        return onePercentofTokens;\r\n    }\r\n    \r\n    \r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract stakeContract\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"contract stakeContract\",\"name\":\"_lpStakingContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"contract stakeContract\",\"name\":\"_lpStakingContract\",\"type\":\"address\"}],\"name\":\"changeLPStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"changePerform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract stakeContract\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"changeStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_DEV\",\"type\":\"address\"}],\"name\":\"changedev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perform\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"FeeDistributor","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005bcf1f407c0fc922074283b4e11daaf539f6644d00000000000000000000000094d4ac11689c6ebba91cdc1430fc7dfa9a858753","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://64c80a9e91ed46bf6ee6f97fab7b8e803cd869a74887809599f1c7446381f9cc"}]}