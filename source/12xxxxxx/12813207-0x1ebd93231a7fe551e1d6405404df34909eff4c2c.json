{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/cyric/Data/git/witnet/witnet-price-feed-examples/contracts/flattened/EthUsdPriceFeed/FlattenedEthUsdPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\n// File: witnet-ethereum-bridge/contracts/Request.sol\\n/**\\n * @title The serialized form of a Witnet data request\\n */\\ncontract Request {\\n  bytes public bytecode;\\n\\n /**\\n  * @dev A `Request` is constructed around a `bytes memory` value containing a well-formed Witnet data request serialized\\n  * using Protocol Buffers. However, we cannot verify its validity at this point. This implies that contracts using\\n  * the WRB should not be considered trustless before a valid Proof-of-Inclusion has been posted for the requests.\\n  * The hash of the request is computed in the constructor to guarantee consistency. Otherwise there could be a\\n  * mismatch and a data request could be resolved with the result of another.\\n  * @param _bytecode Witnet request in bytes.\\n  */\\n  constructor(bytes memory _bytecode) {\\n    bytecode = _bytecode;\\n  }\\n}\\n// File: witnet-ethereum-bridge/contracts/BufferLib.sol\\n/**\\n * @title A convenient wrapper around the `bytes memory` type that exposes a buffer-like interface\\n * @notice The buffer has an inner cursor that tracks the final offset of every read, i.e. any subsequent read will\\n * start with the byte that goes right after the last one in the previous read.\\n * @dev `uint32` is used here for `cursor` because `uint16` would only enable seeking up to 8KB, which could in some\\n * theoretical use cases be exceeded. Conversely, `uint32` supports up to 512MB, which cannot credibly be exceeded.\\n */\\nlibrary BufferLib {\\n  struct Buffer {\\n    bytes data;\\n    uint32 cursor;\\n  }\\n\\n  // Ensures we access an existing index in an array\\n  modifier notOutOfBounds(uint32 index, uint256 length) {\\n    require(index < length, \\\"Tried to read from a consumed Buffer (must rewind it first)\\\");\\n    _;\\n  }\\n\\n  /**\\n  * @notice Read and consume a certain amount of bytes from the buffer.\\n  * @param _buffer An instance of `BufferLib.Buffer`.\\n  * @param _length How many bytes to read and consume from the buffer.\\n  * @return A `bytes memory` containing the first `_length` bytes from the buffer, counting from the cursor position.\\n  */\\n  function read(Buffer memory _buffer, uint32 _length) internal pure returns (bytes memory) {\\n    // Make sure not to read out of the bounds of the original bytes\\n    require(_buffer.cursor + _length <= _buffer.data.length, \\\"Not enough bytes in buffer when reading\\\");\\n\\n    // Create a new `bytes memory destination` value\\n    bytes memory destination = new bytes(_length);\\n\\n    // Early return in case that bytes length is 0\\n    if (_length != 0) {\\n      bytes memory source = _buffer.data;\\n      uint32 offset = _buffer.cursor;\\n\\n      // Get raw pointers for source and destination\\n      uint sourcePointer;\\n      uint destinationPointer;\\n      assembly {\\n        sourcePointer := add(add(source, 32), offset)\\n        destinationPointer := add(destination, 32)\\n      }\\n      // Copy `_length` bytes from source to destination\\n      memcpy(destinationPointer, sourcePointer, uint(_length));\\n\\n      // Move the cursor forward by `_length` bytes\\n      seek(_buffer, _length, true);\\n    }\\n\\n    return destination;\\n  }\\n\\n  /**\\n  * @notice Read and consume the next byte from the buffer.\\n  * @param _buffer An instance of `BufferLib.Buffer`.\\n  * @return The next byte in the buffer counting from the cursor position.\\n  */\\n  function next(Buffer memory _buffer) internal pure notOutOfBounds(_buffer.cursor, _buffer.data.length) returns (bytes1) {\\n    // Return the byte at the position marked by the cursor and advance the cursor all at once\\n    return _buffer.data[_buffer.cursor++];\\n  }\\n\\n  /**\\n  * @notice Move the inner cursor of the buffer to a relative or absolute position.\\n  * @param _buffer An instance of `BufferLib.Buffer`.\\n  * @param _offset How many bytes to move the cursor forward.\\n  * @param _relative Whether to count `_offset` from the last position of the cursor (`true`) or the beginning of the\\n  * buffer (`true`).\\n  * @return The final position of the cursor (will equal `_offset` if `_relative` is `false`).\\n  */\\n  // solium-disable-next-line security/no-assign-params\\n  function seek(Buffer memory _buffer, uint32 _offset, bool _relative) internal pure returns (uint32) {\\n    // Deal with relative offsets\\n    if (_relative) {\\n      require(_offset + _buffer.cursor > _offset, \\\"Integer overflow when seeking\\\");\\n      _offset += _buffer.cursor;\\n    }\\n    // Make sure not to read out of the bounds of the original bytes\\n    require(_offset <= _buffer.data.length, \\\"Not enough bytes in buffer when seeking\\\");\\n    _buffer.cursor = _offset;\\n    return _buffer.cursor;\\n  }\\n\\n  /**\\n  * @notice Move the inner cursor a number of bytes forward.\\n  * @dev This is a simple wrapper around the relative offset case of `seek()`.\\n  * @param _buffer An instance of `BufferLib.Buffer`.\\n  * @param _relativeOffset How many bytes to move the cursor forward.\\n  * @return The final position of the cursor.\\n  */\\n  function seek(Buffer memory _buffer, uint32 _relativeOffset) internal pure returns (uint32) {\\n    return seek(_buffer, _relativeOffset, true);\\n  }\\n\\n  /**\\n  * @notice Move the inner cursor back to the first byte in the buffer.\\n  * @param _buffer An instance of `BufferLib.Buffer`.\\n  */\\n  function rewind(Buffer memory _buffer) internal pure {\\n    _buffer.cursor = 0;\\n  }\\n\\n  /**\\n  * @notice Read and consume the next byte from the buffer as an `uint8`.\\n  * @param _buffer An instance of `BufferLib.Buffer`.\\n  * @return The `uint8` value of the next byte in the buffer counting from the cursor position.\\n  */\\n  function readUint8(Buffer memory _buffer) internal pure notOutOfBounds(_buffer.cursor, _buffer.data.length) returns (uint8) {\\n    bytes memory bytesValue = _buffer.data;\\n    uint32 offset = _buffer.cursor;\\n    uint8 value;\\n    assembly {\\n      value := mload(add(add(bytesValue, 1), offset))\\n    }\\n    _buffer.cursor++;\\n\\n    return value;\\n  }\\n\\n  /**\\n  * @notice Read and consume the next 2 bytes from the buffer as an `uint16`.\\n  * @param _buffer An instance of `BufferLib.Buffer`.\\n  * @return The `uint16` value of the next 2 bytes in the buffer counting from the cursor position.\\n  */\\n  function readUint16(Buffer memory _buffer) internal pure notOutOfBounds(_buffer.cursor + 1, _buffer.data.length) returns (uint16) {\\n    bytes memory bytesValue = _buffer.data;\\n    uint32 offset = _buffer.cursor;\\n    uint16 value;\\n    assembly {\\n      value := mload(add(add(bytesValue, 2), offset))\\n    }\\n    _buffer.cursor += 2;\\n\\n    return value;\\n  }\\n\\n  /**\\n  * @notice Read and consume the next 4 bytes from the buffer as an `uint32`.\\n  * @param _buffer An instance of `BufferLib.Buffer`.\\n  * @return The `uint32` value of the next 4 bytes in the buffer counting from the cursor position.\\n  */\\n  function readUint32(Buffer memory _buffer) internal pure notOutOfBounds(_buffer.cursor + 3, _buffer.data.length) returns (uint32) {\\n    bytes memory bytesValue = _buffer.data;\\n    uint32 offset = _buffer.cursor;\\n    uint32 value;\\n    assembly {\\n      value := mload(add(add(bytesValue, 4), offset))\\n    }\\n    _buffer.cursor += 4;\\n\\n    return value;\\n  }\\n\\n  /**\\n  * @notice Read and consume the next 8 bytes from the buffer as an `uint64`.\\n  * @param _buffer An instance of `BufferLib.Buffer`.\\n  * @return The `uint64` value of the next 8 bytes in the buffer counting from the cursor position.\\n  */\\n  function readUint64(Buffer memory _buffer) internal pure notOutOfBounds(_buffer.cursor + 7, _buffer.data.length) returns (uint64) {\\n    bytes memory bytesValue = _buffer.data;\\n    uint32 offset = _buffer.cursor;\\n    uint64 value;\\n    assembly {\\n      value := mload(add(add(bytesValue, 8), offset))\\n    }\\n    _buffer.cursor += 8;\\n\\n    return value;\\n  }\\n\\n  /**\\n  * @notice Read and consume the next 16 bytes from the buffer as an `uint128`.\\n  * @param _buffer An instance of `BufferLib.Buffer`.\\n  * @return The `uint128` value of the next 16 bytes in the buffer counting from the cursor position.\\n  */\\n  function readUint128(Buffer memory _buffer) internal pure notOutOfBounds(_buffer.cursor + 15, _buffer.data.length) returns (uint128) {\\n    bytes memory bytesValue = _buffer.data;\\n    uint32 offset = _buffer.cursor;\\n    uint128 value;\\n    assembly {\\n      value := mload(add(add(bytesValue, 16), offset))\\n    }\\n    _buffer.cursor += 16;\\n\\n    return value;\\n  }\\n\\n  /**\\n  * @notice Read and consume the next 32 bytes from the buffer as an `uint256`.\\n  * @return The `uint256` value of the next 32 bytes in the buffer counting from the cursor position.\\n  * @param _buffer An instance of `BufferLib.Buffer`.\\n  */\\n  function readUint256(Buffer memory _buffer) internal pure notOutOfBounds(_buffer.cursor + 31, _buffer.data.length) returns (uint256) {\\n    bytes memory bytesValue = _buffer.data;\\n    uint32 offset = _buffer.cursor;\\n    uint256 value;\\n    assembly {\\n      value := mload(add(add(bytesValue, 32), offset))\\n    }\\n    _buffer.cursor += 32;\\n\\n    return value;\\n  }\\n\\n  /**\\n  * @notice Read and consume the next 2 bytes from the buffer as an IEEE 754-2008 floating point number enclosed in an\\n  * `int32`.\\n  * @dev Due to the lack of support for floating or fixed point arithmetic in the EVM, this method offsets all values\\n  * by 5 decimal orders so as to get a fixed precision of 5 decimal positions, which should be OK for most `float16`\\n  * use cases. In other words, the integer output of this method is 10,000 times the actual value. The input bytes are\\n  * expected to follow the 16-bit base-2 format (a.k.a. `binary16`) in the IEEE 754-2008 standard.\\n  * @param _buffer An instance of `BufferLib.Buffer`.\\n  * @return The `uint32` value of the next 4 bytes in the buffer counting from the cursor position.\\n  */\\n  function readFloat16(Buffer memory _buffer) internal pure returns (int32) {\\n    uint32 bytesValue = readUint16(_buffer);\\n    // Get bit at position 0\\n    uint32 sign = bytesValue & 0x8000;\\n    // Get bits 1 to 5, then normalize to the [-14, 15] range so as to counterweight the IEEE 754 exponent bias\\n    int32 exponent = (int32(bytesValue & 0x7c00) >> 10) - 15;\\n    // Get bits 6 to 15\\n    int32 significand = int32(bytesValue & 0x03ff);\\n\\n    // Add 1024 to the fraction if the exponent is 0\\n    if (exponent == 15) {\\n      significand |= 0x400;\\n    }\\n\\n    // Compute `2 ^ exponent · (1 + fraction / 1024)`\\n    int32 result = 0;\\n    if (exponent >= 0) {\\n      result = int32((int256(1 << uint256(int256(exponent))) * 10000 * int256(uint256(int256(significand)) | 0x400)) >> 10);\\n    } else {\\n      result = int32(((int256(uint256(int256(significand)) | 0x400) * 10000) / int256(1 << uint256(int256(- exponent)))) >> 10);\\n    }\\n\\n    // Make the result negative if the sign bit is not 0\\n    if (sign != 0) {\\n      result *= - 1;\\n    }\\n    return result;\\n  }\\n\\n  /**\\n  * @notice Copy bytes from one memory address into another.\\n  * @dev This function was borrowed from Nick Johnson's `solidity-stringutils` lib, and reproduced here under the terms\\n  * of [Apache License 2.0](https://github.com/Arachnid/solidity-stringutils/blob/master/LICENSE).\\n  * @param _dest Address of the destination memory.\\n  * @param _src Address to the source memory.\\n  * @param _len How many bytes to copy.\\n  */\\n  // solium-disable-next-line security/no-assign-params\\n  function memcpy(uint _dest, uint _src, uint _len) private pure {\\n    require(_len > 0, \\\"Cannot copy 0 bytes\\\");\\n\\n    // Copy word-length chunks while possible\\n    for (; _len >= 32; _len -= 32) {\\n      assembly {\\n        mstore(_dest, mload(_src))\\n      }\\n      _dest += 32;\\n      _src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint mask = 256 ** (32 - _len) - 1;\\n    assembly {\\n      let srcpart := and(mload(_src), not(mask))\\n      let destpart := and(mload(_dest), mask)\\n      mstore(_dest, or(destpart, srcpart))\\n    }\\n  }\\n\\n}\\n// File: witnet-ethereum-bridge/contracts/CBOR.sol\\n/**\\n * @title A minimalistic implementation of “RFC 7049 Concise Binary Object Representation”\\n * @notice This library leverages a buffer-like structure for step-by-step decoding of bytes so as to minimize\\n * the gas cost of decoding them into a useful native type.\\n * @dev Most of the logic has been borrowed from Patrick Gansterer’s cbor.js library: https://github.com/paroga/cbor-js\\n * TODO: add support for Array (majorType = 4)\\n * TODO: add support for Map (majorType = 5)\\n * TODO: add support for Float32 (majorType = 7, additionalInformation = 26)\\n * TODO: add support for Float64 (majorType = 7, additionalInformation = 27)\\n */\\nlibrary CBOR {\\n  using BufferLib for BufferLib.Buffer;\\n\\n  uint32 constant internal UINT32_MAX = type(uint32).max;\\n\\n  uint64 constant internal UINT64_MAX = type(uint64).max;\\n\\n  struct Value {\\n    BufferLib.Buffer buffer;\\n    uint8 initialByte;\\n    uint8 majorType;\\n    uint8 additionalInformation;\\n    uint64 len;\\n    uint64 tag;\\n  }\\n\\n  /**\\n   * @notice Decode a `CBOR.Value` structure into a native `bool` value.\\n   * @param _cborValue An instance of `CBOR.Value`.\\n   * @return The value represented by the input, as a `bool` value.\\n   */\\n  function decodeBool(Value memory _cborValue) public pure returns(bool) {\\n    _cborValue.len = readLength(_cborValue.buffer, _cborValue.additionalInformation);\\n    require(_cborValue.majorType == 7, \\\"Tried to read a `bool` value from a `CBOR.Value` with majorType != 7\\\");\\n    if (_cborValue.len == 20) {\\n      return false;\\n    } else if (_cborValue.len == 21) {\\n      return true;\\n    } else {\\n      revert(\\\"Tried to read `bool` from a `CBOR.Value` with len different than 20 or 21\\\");\\n    }\\n  }\\n\\n  /**\\n   * @notice Decode a `CBOR.Value` structure into a native `bytes` value.\\n   * @param _cborValue An instance of `CBOR.Value`.\\n   * @return The value represented by the input, as a `bytes` value.\\n   */\\n  function decodeBytes(Value memory _cborValue) public pure returns(bytes memory) {\\n    _cborValue.len = readLength(_cborValue.buffer, _cborValue.additionalInformation);\\n    if (_cborValue.len == UINT32_MAX) {\\n      bytes memory bytesData;\\n\\n      // These checks look repetitive but the equivalent loop would be more expensive.\\n      uint32 itemLength = uint32(readIndefiniteStringLength(_cborValue.buffer, _cborValue.majorType));\\n      if (itemLength < UINT32_MAX) {\\n        bytesData = abi.encodePacked(bytesData, _cborValue.buffer.read(itemLength));\\n        itemLength = uint32(readIndefiniteStringLength(_cborValue.buffer, _cborValue.majorType));\\n        if (itemLength < UINT32_MAX) {\\n          bytesData = abi.encodePacked(bytesData, _cborValue.buffer.read(itemLength));\\n        }\\n      }\\n      return bytesData;\\n    } else {\\n      return _cborValue.buffer.read(uint32(_cborValue.len));\\n    }\\n  }\\n\\n  /**\\n   * @notice Decode a `CBOR.Value` structure into a `fixed16` value.\\n   * @dev Due to the lack of support for floating or fixed point arithmetic in the EVM, this method offsets all values\\n   * by 5 decimal orders so as to get a fixed precision of 5 decimal positions, which should be OK for most `fixed16`\\n   * use cases. In other words, the output of this method is 10,000 times the actual value, encoded into an `int32`.\\n   * @param _cborValue An instance of `CBOR.Value`.\\n   * @return The value represented by the input, as an `int128` value.\\n   */\\n  function decodeFixed16(Value memory _cborValue) public pure returns(int32) {\\n    require(_cborValue.majorType == 7, \\\"Tried to read a `fixed` value from a `CBOR.Value` with majorType != 7\\\");\\n    require(_cborValue.additionalInformation == 25, \\\"Tried to read `fixed16` from a `CBOR.Value` with additionalInformation != 25\\\");\\n    return _cborValue.buffer.readFloat16();\\n  }\\n\\n  /**\\n   * @notice Decode a `CBOR.Value` structure into a native `int128[]` value whose inner values follow the same convention.\\n   * as explained in `decodeFixed16`.\\n   * @param _cborValue An instance of `CBOR.Value`.\\n   * @return The value represented by the input, as an `int128[]` value.\\n   */\\n  function decodeFixed16Array(Value memory _cborValue) external pure returns(int32[] memory) {\\n    require(_cborValue.majorType == 4, \\\"Tried to read `int128[]` from a `CBOR.Value` with majorType != 4\\\");\\n\\n    uint64 length = readLength(_cborValue.buffer, _cborValue.additionalInformation);\\n    require(length < UINT64_MAX, \\\"Indefinite-length CBOR arrays are not supported\\\");\\n\\n    int32[] memory array = new int32[](length);\\n    for (uint64 i = 0; i < length; i++) {\\n      Value memory item = valueFromBuffer(_cborValue.buffer);\\n      array[i] = decodeFixed16(item);\\n    }\\n\\n    return array;\\n  }\\n\\n  /**\\n   * @notice Decode a `CBOR.Value` structure into a native `int128` value.\\n   * @param _cborValue An instance of `CBOR.Value`.\\n   * @return The value represented by the input, as an `int128` value.\\n   */\\n  function decodeInt128(Value memory _cborValue) public pure returns(int128) {\\n    if (_cborValue.majorType == 1) {\\n      uint64 length = readLength(_cborValue.buffer, _cborValue.additionalInformation);\\n      return int128(-1) - int128(uint128(length));\\n    } else if (_cborValue.majorType == 0) {\\n      // Any `uint64` can be safely casted to `int128`, so this method supports majorType 1 as well so as to have offer\\n      // a uniform API for positive and negative numbers\\n      return int128(uint128(decodeUint64(_cborValue)));\\n    }\\n    revert(\\\"Tried to read `int128` from a `CBOR.Value` with majorType not 0 or 1\\\");\\n  }\\n\\n  /**\\n   * @notice Decode a `CBOR.Value` structure into a native `int128[]` value.\\n   * @param _cborValue An instance of `CBOR.Value`.\\n   * @return The value represented by the input, as an `int128[]` value.\\n   */\\n  function decodeInt128Array(Value memory _cborValue) external pure returns(int128[] memory) {\\n    require(_cborValue.majorType == 4, \\\"Tried to read `int128[]` from a `CBOR.Value` with majorType != 4\\\");\\n\\n    uint64 length = readLength(_cborValue.buffer, _cborValue.additionalInformation);\\n    require(length < UINT64_MAX, \\\"Indefinite-length CBOR arrays are not supported\\\");\\n\\n    int128[] memory array = new int128[](length);\\n    for (uint64 i = 0; i < length; i++) {\\n      Value memory item = valueFromBuffer(_cborValue.buffer);\\n      array[i] = decodeInt128(item);\\n    }\\n\\n    return array;\\n  }\\n\\n  /**\\n   * @notice Decode a `CBOR.Value` structure into a native `string` value.\\n   * @param _cborValue An instance of `CBOR.Value`.\\n   * @return The value represented by the input, as a `string` value.\\n   */\\n  function decodeString(Value memory _cborValue) public pure returns(string memory) {\\n    _cborValue.len = readLength(_cborValue.buffer, _cborValue.additionalInformation);\\n    if (_cborValue.len == UINT64_MAX) {\\n      bytes memory textData;\\n      bool done;\\n      while (!done) {\\n        uint64 itemLength = readIndefiniteStringLength(_cborValue.buffer, _cborValue.majorType);\\n        if (itemLength < UINT64_MAX) {\\n          textData = abi.encodePacked(textData, readText(_cborValue.buffer, itemLength / 4));\\n        } else {\\n          done = true;\\n        }\\n      }\\n      return string(textData);\\n    } else {\\n      return string(readText(_cborValue.buffer, _cborValue.len));\\n    }\\n  }\\n\\n  /**\\n   * @notice Decode a `CBOR.Value` structure into a native `string[]` value.\\n   * @param _cborValue An instance of `CBOR.Value`.\\n   * @return The value represented by the input, as an `string[]` value.\\n   */\\n  function decodeStringArray(Value memory _cborValue) external pure returns(string[] memory) {\\n    require(_cborValue.majorType == 4, \\\"Tried to read `string[]` from a `CBOR.Value` with majorType != 4\\\");\\n\\n    uint64 length = readLength(_cborValue.buffer, _cborValue.additionalInformation);\\n    require(length < UINT64_MAX, \\\"Indefinite-length CBOR arrays are not supported\\\");\\n\\n    string[] memory array = new string[](length);\\n    for (uint64 i = 0; i < length; i++) {\\n      Value memory item = valueFromBuffer(_cborValue.buffer);\\n      array[i] = decodeString(item);\\n    }\\n\\n    return array;\\n  }\\n\\n  /**\\n   * @notice Decode a `CBOR.Value` structure into a native `uint64` value.\\n   * @param _cborValue An instance of `CBOR.Value`.\\n   * @return The value represented by the input, as an `uint64` value.\\n   */\\n  function decodeUint64(Value memory _cborValue) public pure returns(uint64) {\\n    require(_cborValue.majorType == 0, \\\"Tried to read `uint64` from a `CBOR.Value` with majorType != 0\\\");\\n    return readLength(_cborValue.buffer, _cborValue.additionalInformation);\\n  }\\n\\n  /**\\n   * @notice Decode a `CBOR.Value` structure into a native `uint64[]` value.\\n   * @param _cborValue An instance of `CBOR.Value`.\\n   * @return The value represented by the input, as an `uint64[]` value.\\n   */\\n  function decodeUint64Array(Value memory _cborValue) external pure returns(uint64[] memory) {\\n    require(_cborValue.majorType == 4, \\\"Tried to read `uint64[]` from a `CBOR.Value` with majorType != 4\\\");\\n\\n    uint64 length = readLength(_cborValue.buffer, _cborValue.additionalInformation);\\n    require(length < UINT64_MAX, \\\"Indefinite-length CBOR arrays are not supported\\\");\\n\\n    uint64[] memory array = new uint64[](length);\\n    for (uint64 i = 0; i < length; i++) {\\n      Value memory item = valueFromBuffer(_cborValue.buffer);\\n      array[i] = decodeUint64(item);\\n    }\\n\\n    return array;\\n  }\\n\\n  /**\\n   * @notice Decode a CBOR.Value structure from raw bytes.\\n   * @dev This is the main factory for CBOR.Value instances, which can be later decoded into native EVM types.\\n   * @param _cborBytes Raw bytes representing a CBOR-encoded value.\\n   * @return A `CBOR.Value` instance containing a partially decoded value.\\n   */\\n  function valueFromBytes(bytes memory _cborBytes) external pure returns(Value memory) {\\n    BufferLib.Buffer memory buffer = BufferLib.Buffer(_cborBytes, 0);\\n\\n    return valueFromBuffer(buffer);\\n  }\\n\\n  /**\\n   * @notice Decode a CBOR.Value structure from raw bytes.\\n   * @dev This is an alternate factory for CBOR.Value instances, which can be later decoded into native EVM types.\\n   * @param _buffer A Buffer structure representing a CBOR-encoded value.\\n   * @return A `CBOR.Value` instance containing a partially decoded value.\\n   */\\n  function valueFromBuffer(BufferLib.Buffer memory _buffer) public pure returns(Value memory) {\\n    require(_buffer.data.length > 0, \\\"Found empty buffer when parsing CBOR value\\\");\\n\\n    uint8 initialByte;\\n    uint8 majorType = 255;\\n    uint8 additionalInformation;\\n    uint64 tag = UINT64_MAX;\\n\\n    bool isTagged = true;\\n    while (isTagged) {\\n      // Extract basic CBOR properties from input bytes\\n      initialByte = _buffer.readUint8();\\n      majorType = initialByte >> 5;\\n      additionalInformation = initialByte & 0x1f;\\n\\n      // Early CBOR tag parsing.\\n      if (majorType == 6) {\\n        tag = readLength(_buffer, additionalInformation);\\n      } else {\\n        isTagged = false;\\n      }\\n    }\\n\\n    require(majorType <= 7, \\\"Invalid CBOR major type\\\");\\n\\n    return CBOR.Value(\\n      _buffer,\\n      initialByte,\\n      majorType,\\n      additionalInformation,\\n      0,\\n      tag);\\n  }\\n\\n  // Reads the length of the next CBOR item from a buffer, consuming a different number of bytes depending on the\\n  // value of the `additionalInformation` argument.\\n  function readLength(BufferLib.Buffer memory _buffer, uint8 additionalInformation) private pure returns(uint64) {\\n    if (additionalInformation < 24) {\\n      return additionalInformation;\\n    }\\n    if (additionalInformation == 24) {\\n      return _buffer.readUint8();\\n    }\\n    if (additionalInformation == 25) {\\n      return _buffer.readUint16();\\n    }\\n    if (additionalInformation == 26) {\\n      return _buffer.readUint32();\\n    }\\n    if (additionalInformation == 27) {\\n      return _buffer.readUint64();\\n    }\\n    if (additionalInformation == 31) {\\n      return UINT64_MAX;\\n    }\\n    revert(\\\"Invalid length encoding (non-existent additionalInformation value)\\\");\\n  }\\n\\n  // Read the length of a CBOR indifinite-length item (arrays, maps, byte strings and text) from a buffer, consuming\\n  // as many bytes as specified by the first byte.\\n  function readIndefiniteStringLength(BufferLib.Buffer memory _buffer, uint8 majorType) private pure returns(uint64) {\\n    uint8 initialByte = _buffer.readUint8();\\n    if (initialByte == 0xff) {\\n      return UINT64_MAX;\\n    }\\n    uint64 length = readLength(_buffer, initialByte & 0x1f);\\n    require(length < UINT64_MAX && (initialByte >> 5) == majorType, \\\"Invalid indefinite length\\\");\\n    return length;\\n  }\\n\\n  // Read a text string of a given length from a buffer. Returns a `bytes memory` value for the sake of genericness,\\n  // but it can be easily casted into a string with `string(result)`.\\n  // solium-disable-next-line security/no-assign-params\\n  function readText(BufferLib.Buffer memory _buffer, uint64 _length) private pure returns(bytes memory) {\\n    bytes memory result;\\n    for (uint64 index = 0; index < _length; index++) {\\n      uint8 value = _buffer.readUint8();\\n      if (value & 0x80 != 0) {\\n        if (value < 0xe0) {\\n          value = (value & 0x1f) << 6 |\\n            (_buffer.readUint8() & 0x3f);\\n          _length -= 1;\\n        } else if (value < 0xf0) {\\n          value = (value & 0x0f) << 12 |\\n            (_buffer.readUint8() & 0x3f) << 6 |\\n            (_buffer.readUint8() & 0x3f);\\n          _length -= 2;\\n        } else {\\n          value = (value & 0x0f) << 18 |\\n            (_buffer.readUint8() & 0x3f) << 12 |\\n            (_buffer.readUint8() & 0x3f) << 6  |\\n            (_buffer.readUint8() & 0x3f);\\n          _length -= 3;\\n        }\\n      }\\n      result = abi.encodePacked(result, value);\\n    }\\n    return result;\\n  }\\n}\\n// File: witnet-ethereum-bridge/contracts/Witnet.sol\\n/**\\n * @title A library for decoding Witnet request results\\n * @notice The library exposes functions to check the Witnet request success.\\n * and retrieve Witnet results from CBOR values into solidity types.\\n */\\nlibrary Witnet {\\n  using CBOR for CBOR.Value;\\n\\n  /*\\n   *  STRUCTS\\n   */\\n  struct Result {\\n    bool success;\\n    CBOR.Value cborValue;\\n  }\\n\\n  /*\\n   *  ENUMS\\n   */\\n  enum ErrorCodes {\\n    // 0x00: Unknown error. Something went really bad!\\n    Unknown,\\n    // Script format errors\\n    /// 0x01: At least one of the source scripts is not a valid CBOR-encoded value.\\n    SourceScriptNotCBOR,\\n    /// 0x02: The CBOR value decoded from a source script is not an Array.\\n    SourceScriptNotArray,\\n    /// 0x03: The Array value decoded form a source script is not a valid RADON script.\\n    SourceScriptNotRADON,\\n    /// Unallocated\\n    ScriptFormat0x04,\\n    ScriptFormat0x05,\\n    ScriptFormat0x06,\\n    ScriptFormat0x07,\\n    ScriptFormat0x08,\\n    ScriptFormat0x09,\\n    ScriptFormat0x0A,\\n    ScriptFormat0x0B,\\n    ScriptFormat0x0C,\\n    ScriptFormat0x0D,\\n    ScriptFormat0x0E,\\n    ScriptFormat0x0F,\\n    // Complexity errors\\n    /// 0x10: The request contains too many sources.\\n    RequestTooManySources,\\n    /// 0x11: The script contains too many calls.\\n    ScriptTooManyCalls,\\n    /// Unallocated\\n    Complexity0x12,\\n    Complexity0x13,\\n    Complexity0x14,\\n    Complexity0x15,\\n    Complexity0x16,\\n    Complexity0x17,\\n    Complexity0x18,\\n    Complexity0x19,\\n    Complexity0x1A,\\n    Complexity0x1B,\\n    Complexity0x1C,\\n    Complexity0x1D,\\n    Complexity0x1E,\\n    Complexity0x1F,\\n    // Operator errors\\n    /// 0x20: The operator does not exist.\\n    UnsupportedOperator,\\n    /// Unallocated\\n    Operator0x21,\\n    Operator0x22,\\n    Operator0x23,\\n    Operator0x24,\\n    Operator0x25,\\n    Operator0x26,\\n    Operator0x27,\\n    Operator0x28,\\n    Operator0x29,\\n    Operator0x2A,\\n    Operator0x2B,\\n    Operator0x2C,\\n    Operator0x2D,\\n    Operator0x2E,\\n    Operator0x2F,\\n    // Retrieval-specific errors\\n    /// 0x30: At least one of the sources could not be retrieved, but returned HTTP error.\\n    HTTP,\\n    /// 0x31: Retrieval of at least one of the sources timed out.\\n    RetrievalTimeout,\\n    /// Unallocated\\n    Retrieval0x32,\\n    Retrieval0x33,\\n    Retrieval0x34,\\n    Retrieval0x35,\\n    Retrieval0x36,\\n    Retrieval0x37,\\n    Retrieval0x38,\\n    Retrieval0x39,\\n    Retrieval0x3A,\\n    Retrieval0x3B,\\n    Retrieval0x3C,\\n    Retrieval0x3D,\\n    Retrieval0x3E,\\n    Retrieval0x3F,\\n    // Math errors\\n    /// 0x40: Math operator caused an underflow.\\n    Underflow,\\n    /// 0x41: Math operator caused an overflow.\\n    Overflow,\\n    /// 0x42: Tried to divide by zero.\\n    DivisionByZero,\\n    /// Unallocated\\n    Math0x43,\\n    Math0x44,\\n    Math0x45,\\n    Math0x46,\\n    Math0x47,\\n    Math0x48,\\n    Math0x49,\\n    Math0x4A,\\n    Math0x4B,\\n    Math0x4C,\\n    Math0x4D,\\n    Math0x4E,\\n    Math0x4F,\\n    // Other errors\\n    /// 0x50: Received zero reveals\\n    NoReveals,\\n    /// 0x51: Insufficient consensus in tally precondition clause\\n    InsufficientConsensus,\\n    /// 0x52: Received zero commits\\n    InsufficientCommits,\\n    /// 0x53: Generic error during tally execution\\n    TallyExecution,\\n    /// Unallocated\\n    OtherError0x54,\\n    OtherError0x55,\\n    OtherError0x56,\\n    OtherError0x57,\\n    OtherError0x58,\\n    OtherError0x59,\\n    OtherError0x5A,\\n    OtherError0x5B,\\n    OtherError0x5C,\\n    OtherError0x5D,\\n    OtherError0x5E,\\n    OtherError0x5F,\\n    /// 0x60: Invalid reveal serialization (malformed reveals are converted to this value)\\n    MalformedReveal,\\n    /// Unallocated\\n    OtherError0x61,\\n    OtherError0x62,\\n    OtherError0x63,\\n    OtherError0x64,\\n    OtherError0x65,\\n    OtherError0x66,\\n    OtherError0x67,\\n    OtherError0x68,\\n    OtherError0x69,\\n    OtherError0x6A,\\n    OtherError0x6B,\\n    OtherError0x6C,\\n    OtherError0x6D,\\n    OtherError0x6E,\\n    OtherError0x6F,\\n    // Access errors\\n    /// 0x70: Tried to access a value from an index using an index that is out of bounds\\n    ArrayIndexOutOfBounds,\\n    /// 0x71: Tried to access a value from a map using a key that does not exist\\n    MapKeyNotFound,\\n    /// Unallocated\\n    OtherError0x72,\\n    OtherError0x73,\\n    OtherError0x74,\\n    OtherError0x75,\\n    OtherError0x76,\\n    OtherError0x77,\\n    OtherError0x78,\\n    OtherError0x79,\\n    OtherError0x7A,\\n    OtherError0x7B,\\n    OtherError0x7C,\\n    OtherError0x7D,\\n    OtherError0x7E,\\n    OtherError0x7F,\\n    OtherError0x80,\\n    OtherError0x81,\\n    OtherError0x82,\\n    OtherError0x83,\\n    OtherError0x84,\\n    OtherError0x85,\\n    OtherError0x86,\\n    OtherError0x87,\\n    OtherError0x88,\\n    OtherError0x89,\\n    OtherError0x8A,\\n    OtherError0x8B,\\n    OtherError0x8C,\\n    OtherError0x8D,\\n    OtherError0x8E,\\n    OtherError0x8F,\\n    OtherError0x90,\\n    OtherError0x91,\\n    OtherError0x92,\\n    OtherError0x93,\\n    OtherError0x94,\\n    OtherError0x95,\\n    OtherError0x96,\\n    OtherError0x97,\\n    OtherError0x98,\\n    OtherError0x99,\\n    OtherError0x9A,\\n    OtherError0x9B,\\n    OtherError0x9C,\\n    OtherError0x9D,\\n    OtherError0x9E,\\n    OtherError0x9F,\\n    OtherError0xA0,\\n    OtherError0xA1,\\n    OtherError0xA2,\\n    OtherError0xA3,\\n    OtherError0xA4,\\n    OtherError0xA5,\\n    OtherError0xA6,\\n    OtherError0xA7,\\n    OtherError0xA8,\\n    OtherError0xA9,\\n    OtherError0xAA,\\n    OtherError0xAB,\\n    OtherError0xAC,\\n    OtherError0xAD,\\n    OtherError0xAE,\\n    OtherError0xAF,\\n    OtherError0xB0,\\n    OtherError0xB1,\\n    OtherError0xB2,\\n    OtherError0xB3,\\n    OtherError0xB4,\\n    OtherError0xB5,\\n    OtherError0xB6,\\n    OtherError0xB7,\\n    OtherError0xB8,\\n    OtherError0xB9,\\n    OtherError0xBA,\\n    OtherError0xBB,\\n    OtherError0xBC,\\n    OtherError0xBD,\\n    OtherError0xBE,\\n    OtherError0xBF,\\n    OtherError0xC0,\\n    OtherError0xC1,\\n    OtherError0xC2,\\n    OtherError0xC3,\\n    OtherError0xC4,\\n    OtherError0xC5,\\n    OtherError0xC6,\\n    OtherError0xC7,\\n    OtherError0xC8,\\n    OtherError0xC9,\\n    OtherError0xCA,\\n    OtherError0xCB,\\n    OtherError0xCC,\\n    OtherError0xCD,\\n    OtherError0xCE,\\n    OtherError0xCF,\\n    OtherError0xD0,\\n    OtherError0xD1,\\n    OtherError0xD2,\\n    OtherError0xD3,\\n    OtherError0xD4,\\n    OtherError0xD5,\\n    OtherError0xD6,\\n    OtherError0xD7,\\n    OtherError0xD8,\\n    OtherError0xD9,\\n    OtherError0xDA,\\n    OtherError0xDB,\\n    OtherError0xDC,\\n    OtherError0xDD,\\n    OtherError0xDE,\\n    OtherError0xDF,\\n    // Bridge errors: errors that only belong in inter-client communication\\n    /// 0xE0: Requests that cannot be parsed must always get this error as their result.\\n    /// However, this is not a valid result in a Tally transaction, because invalid requests\\n    /// are never included into blocks and therefore never get a Tally in response.\\n    BridgeMalformedRequest,\\n    /// 0xE1: Witnesses exceeds 100\\n    BridgePoorIncentives,\\n    /// 0xE2: The request is rejected on the grounds that it may cause the submitter to spend or stake an\\n    /// amount of value that is unjustifiably high when compared with the reward they will be getting\\n    BridgeOversizedResult,\\n    /// Unallocated\\n    OtherError0xE3,\\n    OtherError0xE4,\\n    OtherError0xE5,\\n    OtherError0xE6,\\n    OtherError0xE7,\\n    OtherError0xE8,\\n    OtherError0xE9,\\n    OtherError0xEA,\\n    OtherError0xEB,\\n    OtherError0xEC,\\n    OtherError0xED,\\n    OtherError0xEE,\\n    OtherError0xEF,\\n    OtherError0xF0,\\n    OtherError0xF1,\\n    OtherError0xF2,\\n    OtherError0xF3,\\n    OtherError0xF4,\\n    OtherError0xF5,\\n    OtherError0xF6,\\n    OtherError0xF7,\\n    OtherError0xF8,\\n    OtherError0xF9,\\n    OtherError0xFA,\\n    OtherError0xFB,\\n    OtherError0xFC,\\n    OtherError0xFD,\\n    OtherError0xFE,\\n    // This should not exist:\\n    /// 0xFF: Some tally error is not intercepted but should\\n    UnhandledIntercept\\n  }\\n\\n  /*\\n   * Result impl's\\n   */\\n\\n  /**\\n   * @notice Decode raw CBOR bytes into a Result instance.\\n   * @param _cborBytes Raw bytes representing a CBOR-encoded value.\\n   * @return A `Result` instance.\\n   */\\n  function resultFromCborBytes(bytes calldata _cborBytes) external pure returns(Result memory) {\\n    CBOR.Value memory cborValue = CBOR.valueFromBytes(_cborBytes);\\n    return resultFromCborValue(cborValue);\\n  }\\n\\n  /**\\n   * @notice Decode a CBOR value into a Result instance.\\n   * @param _cborValue An instance of `CBOR.Value`.\\n   * @return A `Result` instance.\\n   */\\n  function resultFromCborValue(CBOR.Value memory _cborValue) public pure returns(Result memory) {\\n    // Witnet uses CBOR tag 39 to represent RADON error code identifiers.\\n    // [CBOR tag 39] Identifiers for CBOR: https://github.com/lucas-clemente/cbor-specs/blob/master/id.md\\n    bool success = _cborValue.tag != 39;\\n    return Result(success, _cborValue);\\n  }\\n\\n  /**\\n   * @notice Tell if a Result is successful.\\n   * @param _result An instance of Result.\\n   * @return `true` if successful, `false` if errored.\\n   */\\n  function isOk(Result memory _result) external pure returns(bool) {\\n    return _result.success;\\n  }\\n\\n  /**\\n   * @notice Tell if a Result is errored.\\n   * @param _result An instance of Result.\\n   * @return `true` if errored, `false` if successful.\\n   */\\n  function isError(Result memory _result) external pure returns(bool) {\\n    return !_result.success;\\n  }\\n\\n  /**\\n   * @notice Decode a bytes value from a Result as a `bytes` value.\\n   * @param _result An instance of Result.\\n   * @return The `bytes` decoded from the Result.\\n   */\\n  function asBytes(Result memory _result) external pure returns(bytes memory) {\\n    require(_result.success, \\\"Tried to read bytes value from errored Result\\\");\\n    return _result.cborValue.decodeBytes();\\n  }\\n\\n  /**\\n   * @notice Decode an error code from a Result as a member of `ErrorCodes`.\\n   * @param _result An instance of `Result`.\\n   * @return The `CBORValue.Error memory` decoded from the Result.\\n   */\\n  function asErrorCode(Result memory _result) external pure returns(ErrorCodes) {\\n    uint64[] memory error = asRawError(_result);\\n    if (error.length == 0) {\\n      return ErrorCodes.Unknown;\\n    }\\n\\n    return supportedErrorOrElseUnknown(error[0]);\\n  }\\n\\n  /**\\n   * @notice Generate a suitable error message for a member of `ErrorCodes` and its corresponding arguments.\\n   * @dev WARN: Note that client contracts should wrap this function into a try-catch foreseing potential errors generated in this function\\n   * @param _result An instance of `Result`.\\n   * @return A tuple containing the `CBORValue.Error memory` decoded from the `Result`, plus a loggable error message.\\n   */\\n\\n  function asErrorMessage(Result memory _result) public pure returns (ErrorCodes, string memory) {\\n    uint64[] memory error = asRawError(_result);\\n    if (error.length == 0) {\\n      return (ErrorCodes.Unknown, \\\"Unknown error (no error code)\\\");\\n    }\\n    ErrorCodes errorCode = supportedErrorOrElseUnknown(error[0]);\\n    bytes memory errorMessage;\\n\\n    if (errorCode == ErrorCodes.SourceScriptNotCBOR && error.length >= 2) {\\n        errorMessage = abi.encodePacked(\\\"Source script #\\\", utoa(error[1]), \\\" was not a valid CBOR value\\\");\\n    } else if (errorCode == ErrorCodes.SourceScriptNotArray && error.length >= 2) {\\n        errorMessage = abi.encodePacked(\\\"The CBOR value in script #\\\", utoa(error[1]), \\\" was not an Array of calls\\\");\\n    } else if (errorCode == ErrorCodes.SourceScriptNotRADON && error.length >= 2) {\\n        errorMessage = abi.encodePacked(\\\"The CBOR value in script #\\\", utoa(error[1]), \\\" was not a valid RADON script\\\");\\n    } else if (errorCode == ErrorCodes.RequestTooManySources && error.length >= 2) {\\n        errorMessage = abi.encodePacked(\\\"The request contained too many sources (\\\", utoa(error[1]), \\\")\\\");\\n    } else if (errorCode == ErrorCodes.ScriptTooManyCalls && error.length >= 4) {\\n        errorMessage = abi.encodePacked(\\n          \\\"Script #\\\",\\n          utoa(error[2]),\\n          \\\" from the \\\",\\n          stageName(error[1]),\\n          \\\" stage contained too many calls (\\\",\\n          utoa(error[3]),\\n          \\\")\\\"\\n        );\\n    } else if (errorCode == ErrorCodes.UnsupportedOperator && error.length >= 5) {\\n        errorMessage = abi.encodePacked(\\n        \\\"Operator code 0x\\\",\\n          utohex(error[4]),\\n          \\\" found at call #\\\",\\n          utoa(error[3]),\\n          \\\" in script #\\\",\\n          utoa(error[2]),\\n          \\\" from \\\",\\n          stageName(error[1]),\\n          \\\" stage is not supported\\\"\\n        );\\n    } else if (errorCode == ErrorCodes.HTTP && error.length >= 3) {\\n        errorMessage = abi.encodePacked(\\n          \\\"Source #\\\",\\n          utoa(error[1]),\\n          \\\" could not be retrieved. Failed with HTTP error code: \\\",\\n          utoa(error[2] / 100),\\n          utoa(error[2] % 100 / 10),\\n          utoa(error[2] % 10)\\n        );\\n    } else if (errorCode == ErrorCodes.RetrievalTimeout && error.length >= 2) {\\n        errorMessage = abi.encodePacked(\\n          \\\"Source #\\\",\\n          utoa(error[1]),\\n          \\\" could not be retrieved because of a timeout.\\\"\\n        );\\n    } else if (errorCode == ErrorCodes.Underflow && error.length >= 5) {\\n        errorMessage = abi.encodePacked(\\n          \\\"Underflow at operator code 0x\\\",\\n          utohex(error[4]),\\n          \\\" found at call #\\\",\\n          utoa(error[3]),\\n          \\\" in script #\\\",\\n          utoa(error[2]),\\n          \\\" from \\\",\\n          stageName(error[1]),\\n          \\\" stage\\\"\\n        );\\n    } else if (errorCode == ErrorCodes.Overflow && error.length >= 5) {\\n        errorMessage = abi.encodePacked(\\n          \\\"Overflow at operator code 0x\\\",\\n          utohex(error[4]),\\n          \\\" found at call #\\\",\\n          utoa(error[3]),\\n          \\\" in script #\\\",\\n          utoa(error[2]),\\n          \\\" from \\\",\\n          stageName(error[1]),\\n          \\\" stage\\\"\\n        );\\n    } else if (errorCode == ErrorCodes.DivisionByZero && error.length >= 5) {\\n        errorMessage = abi.encodePacked(\\n          \\\"Division by zero at operator code 0x\\\",\\n          utohex(error[4]),\\n          \\\" found at call #\\\",\\n          utoa(error[3]),\\n          \\\" in script #\\\",\\n          utoa(error[2]),\\n          \\\" from \\\",\\n          stageName(error[1]),\\n          \\\" stage\\\"\\n        );\\n    } else if (errorCode == ErrorCodes.BridgeMalformedRequest) {\\n        errorMessage = \\\"The structure of the request is invalid and it cannot be parsed\\\";\\n    } else if (errorCode == ErrorCodes.BridgePoorIncentives) {\\n        errorMessage = \\\"The request has been rejected by the bridge node due to poor incentives\\\";\\n    } else if (errorCode == ErrorCodes.BridgeOversizedResult) {\\n        errorMessage = \\\"The request result length exceeds a bridge contract defined limit\\\";\\n    } else {\\n        errorMessage = abi.encodePacked(\\\"Unknown error (0x\\\", utohex(error[0]), \\\")\\\");\\n    }\\n\\n    return (errorCode, string(errorMessage));\\n  }\\n\\n  /**\\n   * @notice Decode a raw error from a `Result` as a `uint64[]`.\\n   * @param _result An instance of `Result`.\\n   * @return The `uint64[]` raw error as decoded from the `Result`.\\n   */\\n  function asRawError(Result memory _result) public pure returns(uint64[] memory) {\\n    require(!_result.success, \\\"Tried to read error code from successful Result\\\");\\n    return _result.cborValue.decodeUint64Array();\\n  }\\n\\n  /**\\n   * @notice Decode a boolean value from a Result as an `bool` value.\\n   * @param _result An instance of Result.\\n   * @return The `bool` decoded from the Result.\\n   */\\n  function asBool(Result memory _result) external pure returns(bool) {\\n    require(_result.success, \\\"Tried to read `bool` value from errored Result\\\");\\n    return _result.cborValue.decodeBool();\\n  }\\n\\n  /**\\n   * @notice Decode a fixed16 (half-precision) numeric value from a Result as an `int32` value.\\n   * @dev Due to the lack of support for floating or fixed point arithmetic in the EVM, this method offsets all values.\\n   * by 5 decimal orders so as to get a fixed precision of 5 decimal positions, which should be OK for most `fixed16`.\\n   * use cases. In other words, the output of this method is 10,000 times the actual value, encoded into an `int32`.\\n   * @param _result An instance of Result.\\n   * @return The `int128` decoded from the Result.\\n   */\\n  function asFixed16(Result memory _result) external pure returns(int32) {\\n    require(_result.success, \\\"Tried to read `fixed16` value from errored Result\\\");\\n    return _result.cborValue.decodeFixed16();\\n  }\\n\\n  /**\\n   * @notice Decode an array of fixed16 values from a Result as an `int128[]` value.\\n   * @param _result An instance of Result.\\n   * @return The `int128[]` decoded from the Result.\\n   */\\n  function asFixed16Array(Result memory _result) external pure returns(int32[] memory) {\\n    require(_result.success, \\\"Tried to read `fixed16[]` value from errored Result\\\");\\n    return _result.cborValue.decodeFixed16Array();\\n  }\\n\\n  /**\\n   * @notice Decode a integer numeric value from a Result as an `int128` value.\\n   * @param _result An instance of Result.\\n   * @return The `int128` decoded from the Result.\\n   */\\n  function asInt128(Result memory _result) external pure returns(int128) {\\n    require(_result.success, \\\"Tried to read `int128` value from errored Result\\\");\\n    return _result.cborValue.decodeInt128();\\n  }\\n\\n  /**\\n   * @notice Decode an array of integer numeric values from a Result as an `int128[]` value.\\n   * @param _result An instance of Result.\\n   * @return The `int128[]` decoded from the Result.\\n   */\\n  function asInt128Array(Result memory _result) external pure returns(int128[] memory) {\\n    require(_result.success, \\\"Tried to read `int128[]` value from errored Result\\\");\\n    return _result.cborValue.decodeInt128Array();\\n  }\\n\\n  /**\\n   * @notice Decode a string value from a Result as a `string` value.\\n   * @param _result An instance of Result.\\n   * @return The `string` decoded from the Result.\\n   */\\n  function asString(Result memory _result) external pure returns(string memory) {\\n    require(_result.success, \\\"Tried to read `string` value from errored Result\\\");\\n    return _result.cborValue.decodeString();\\n  }\\n\\n  /**\\n   * @notice Decode an array of string values from a Result as a `string[]` value.\\n   * @param _result An instance of Result.\\n   * @return The `string[]` decoded from the Result.\\n   */\\n  function asStringArray(Result memory _result) external pure returns(string[] memory) {\\n    require(_result.success, \\\"Tried to read `string[]` value from errored Result\\\");\\n    return _result.cborValue.decodeStringArray();\\n  }\\n\\n  /**\\n   * @notice Decode a natural numeric value from a Result as a `uint64` value.\\n   * @param _result An instance of Result.\\n   * @return The `uint64` decoded from the Result.\\n   */\\n  function asUint64(Result memory _result) external pure returns(uint64) {\\n    require(_result.success, \\\"Tried to read `uint64` value from errored Result\\\");\\n    return _result.cborValue.decodeUint64();\\n  }\\n\\n  /**\\n   * @notice Decode an array of natural numeric values from a Result as a `uint64[]` value.\\n   * @param _result An instance of Result.\\n   * @return The `uint64[]` decoded from the Result.\\n   */\\n  function asUint64Array(Result memory _result) external pure returns(uint64[] memory) {\\n    require(_result.success, \\\"Tried to read `uint64[]` value from errored Result\\\");\\n    return _result.cborValue.decodeUint64Array();\\n  }\\n\\n  /**\\n   * @notice Convert a stage index number into the name of the matching Witnet request stage.\\n   * @param _stageIndex A `uint64` identifying the index of one of the Witnet request stages.\\n   * @return The name of the matching stage.\\n   */\\n  function stageName(uint64 _stageIndex) public pure returns(string memory) {\\n    if (_stageIndex == 0) {\\n      return \\\"retrieval\\\";\\n    } else if (_stageIndex == 1) {\\n      return \\\"aggregation\\\";\\n    } else if (_stageIndex == 2) {\\n      return \\\"tally\\\";\\n    } else {\\n      return \\\"unknown\\\";\\n    }\\n  }\\n\\n  /**\\n   * @notice Get an `ErrorCodes` item from its `uint64` discriminant.\\n   * @param _discriminant The numeric identifier of an error.\\n   * @return A member of `ErrorCodes`.\\n   */\\n  function supportedErrorOrElseUnknown(uint64 _discriminant) private pure returns(ErrorCodes) {\\n      return ErrorCodes(_discriminant);\\n  }\\n\\n  /**\\n   * @notice Convert a `uint64` into a 1, 2 or 3 characters long `string` representing its.\\n   * three less significant decimal values.\\n   * @param _u A `uint64` value.\\n   * @return The `string` representing its decimal value.\\n   */\\n  function utoa(uint64 _u) private pure returns(string memory) {\\n    if (_u < 10) {\\n      bytes memory b1 = new bytes(1);\\n      b1[0] = bytes1(uint8(_u) + 48);\\n      return string(b1);\\n    } else if (_u < 100) {\\n      bytes memory b2 = new bytes(2);\\n      b2[0] = bytes1(uint8(_u / 10) + 48);\\n      b2[1] = bytes1(uint8(_u % 10) + 48);\\n      return string(b2);\\n    } else {\\n      bytes memory b3 = new bytes(3);\\n      b3[0] = bytes1(uint8(_u / 100) + 48);\\n      b3[1] = bytes1(uint8(_u % 100 / 10) + 48);\\n      b3[2] = bytes1(uint8(_u % 10) + 48);\\n      return string(b3);\\n    }\\n  }\\n\\n  /**\\n   * @notice Convert a `uint64` into a 2 characters long `string` representing its two less significant hexadecimal values.\\n   * @param _u A `uint64` value.\\n   * @return The `string` representing its hexadecimal value.\\n   */\\n  function utohex(uint64 _u) private pure returns(string memory) {\\n    bytes memory b2 = new bytes(2);\\n    uint8 d0 = uint8(_u / 16) + 48;\\n    uint8 d1 = uint8(_u % 16) + 48;\\n    if (d0 > 57)\\n      d0 += 7;\\n    if (d1 > 57)\\n      d1 += 7;\\n    b2[0] = bytes1(d0);\\n    b2[1] = bytes1(d1);\\n    return string(b2);\\n  }\\n}\\n// File: witnet-ethereum-bridge/contracts/WitnetRequestBoardInterface.sol\\n/**\\n * @title Witnet Requests Board Interface\\n * @notice Interface of a Witnet Request Board (WRB)\\n * It defines how to interact with the WRB in order to support:\\n *  - Post and upgrade a data request\\n *  - Read the result of a dr\\n * @author Witnet Foundation\\n */\\ninterface WitnetRequestBoardInterface {\\n\\n  // Event emitted when a new DR is posted\\n  event PostedRequest(uint256 _id);\\n\\n  // Event emitted when a result is reported\\n  event PostedResult(uint256 _id);\\n\\n  /// @dev Posts a data request into the WRB in expectation that it will be relayed and resolved in Witnet with a total reward that equals to msg.value.\\n  /// @param _requestAddress The request contract address which includes the request bytecode.\\n  /// @return The unique identifier of the data request.\\n  function postDataRequest(address _requestAddress) external payable returns(uint256);\\n\\n  /// @dev Increments the reward of a data request by adding the transaction value to it.\\n  /// @param _id The unique identifier of the data request.\\n  function upgradeDataRequest(uint256 _id) external payable;\\n\\n  /// @dev Retrieves the DR transaction hash of the id from the WRB.\\n  /// @param _id The unique identifier of the data request.\\n  /// @return The hash of the DR transaction\\n  function readDrTxHash (uint256 _id) external view returns(uint256);\\n\\n  /// @dev Retrieves the result (if already available) of one data request from the WRB.\\n  /// @param _id The unique identifier of the data request.\\n  /// @return The result of the DR\\n  function readResult (uint256 _id) external view returns(bytes memory);\\n\\n  /// @notice Verifies if the Witnet Request Board can be upgraded.\\n  /// @return true if contract is upgradable.\\n  function isUpgradable(address _address) external view returns(bool);\\n\\n  /// @dev Estimate the amount of reward we need to insert for a given gas price.\\n  /// @param _gasPrice The gas price for which we need to calculate the rewards.\\n  /// @return The reward to be included for the given gas price.\\n  function estimateGasCost(uint256 _gasPrice) external view returns(uint256);\\n}\\n// File: witnet-ethereum-bridge/contracts/UsingWitnet.sol\\n/**\\n * @title The UsingWitnet contract\\n * @notice Contract writers can inherit this contract in order to create Witnet data requests.\\n */\\nabstract contract UsingWitnet {\\n  using Witnet for Witnet.Result;\\n\\n  WitnetRequestBoardInterface internal immutable wrb;\\n\\n /**\\n  * @notice Include an address to specify the WitnetRequestBoard.\\n  * @param _wrb WitnetRequestBoard address.\\n  */\\n  constructor(address _wrb) {\\n    wrb = WitnetRequestBoardInterface(_wrb);\\n  }\\n\\n  // Provides a convenient way for client contracts extending this to block the execution of the main logic of the\\n  // contract until a particular request has been successfully resolved by Witnet\\n  modifier witnetRequestResolved(uint256 _id) {\\n    require(witnetCheckRequestResolved(_id), \\\"Witnet request is not yet resolved by the Witnet network\\\");\\n    _;\\n  }\\n\\n /**\\n  * @notice Send a new request to the Witnet network with transaction value as result report reward.\\n  * @dev Call to `post_dr` function in the WitnetRequestBoard contract.\\n  * @param _request An instance of the `Request` contract.\\n  * @return Sequencial identifier for the request included in the WitnetRequestBoard.\\n  */\\n  function witnetPostRequest(Request _request) internal returns (uint256) {\\n    return wrb.postDataRequest{value: msg.value}(address(_request));\\n  }\\n\\n /**\\n  * @notice Check if a request has been resolved by Witnet.\\n  * @dev Contracts depending on Witnet should not start their main business logic (e.g. receiving value from third.\\n  * parties) before this method returns `true`.\\n  * @param _id The unique identifier of a request that has been previously sent to the WitnetRequestBoard.\\n  * @return A boolean telling if the request has been already resolved or not.\\n  */\\n  function witnetCheckRequestResolved(uint256 _id) internal view returns (bool) {\\n    // If the result of the data request in Witnet is not the default, then it means that it has been reported as resolved.\\n    return wrb.readDrTxHash(_id) != 0;\\n  }\\n\\n /**\\n  * @notice Upgrade the reward for a Data Request previously included.\\n  * @dev Call to `upgrade_dr` function in the WitnetRequestBoard contract.\\n  * @param _id The unique identifier of a request that has been previously sent to the WitnetRequestBoard.\\n  */\\n  function witnetUpgradeRequest(uint256 _id) internal {\\n    wrb.upgradeDataRequest{value: msg.value}(_id);\\n  }\\n\\n /**\\n  * @notice Read the result of a resolved request.\\n  * @dev Call to `read_result` function in the WitnetRequestBoard contract.\\n  * @param _id The unique identifier of a request that was posted to Witnet.\\n  * @return The result of the request as an instance of `Result`.\\n  */\\n  function witnetReadResult(uint256 _id) internal view returns (Witnet.Result memory) {\\n    return Witnet.resultFromCborBytes(wrb.readResult(_id));\\n  }\\n\\n /**\\n  * @notice Estimate the reward amount.\\n  * @dev Call to `estimate_gas_cost` function in the WitnetRequestBoard contract.\\n  * @param _gasPrice The gas price for which we want to retrieve the estimation.\\n  * @return The reward to be included for the given gas price.\\n  */\\n  function witnetEstimateGasCost(uint256 _gasPrice) internal view returns (uint256) {\\n    return wrb.estimateGasCost(_gasPrice);\\n  }\\n}\\n// File: adomedianizer/contracts/interfaces/IERC2362.sol\\n/**\\n* @dev EIP2362 Interface for pull oracles\\n* https://github.com/adoracles/EIPs/blob/erc-2362/EIPS/eip-2362.md\\n*/\\ninterface IERC2362\\n{\\n\\t/**\\n\\t * @dev Exposed function pertaining to EIP standards\\n\\t * @param _id bytes32 ID of the query\\n\\t * @return int,uint,uint returns the value, timestamp, and status code of query\\n\\t */\\n\\tfunction valueFor(bytes32 _id) external view returns(int256,uint256,uint256);\\n}\\n// File: contracts/requests/EthPrice.sol\\n// The bytecode of the EthPrice request that will be sent to Witnet\\ncontract EthPriceRequest is Request {\\n  constructor () Request(hex\\\"0a920208e38eb187061245122e68747470733a2f2f7777772e6269747374616d702e6e65742f6170692f76322f7469636b65722f6574687573642f1a13841877821864646c6173748218571903e8185b1247122068747470733a2f2f6170692e636f696e6361702e696f2f76322f6173736574731a238618778218616464617461821818018218646870726963655573648218571903e8185b125c123368747470733a2f2f6170692e636f696e70617072696b612e636f6d2f76312f7469636b6572732f6574682d657468657265756d1a258618778218666671756f746573821866635553448218646570726963658218571903e8185b1a0d0a0908051205fa3fc000001003220d0a0908051205fa3fc000001003100a186420012846308094ebdc03\\\") { }\\n}\\n// File: contracts/EthUsdPriceFeed.sol\\n// Import the UsingWitnet library that enables interacting with Witnet\\n\\n// Import the ERC2362 interface\\n\\n// Import the ethPrice request that you created before\\n\\n\\n// Your contract needs to inherit from UsingWitnet\\ncontract EthUsdPriceFeed is UsingWitnet, IERC2362 {\\n\\n  using Witnet for Witnet.Result;\\n\\n  // The public eth price point\\n  uint64 public lastPrice;\\n\\n  // Stores the ID of the last Witnet request\\n  uint256 public lastRequestId;\\n\\n  // Stores the timestamp of the last time the public price point was updated\\n  uint256 public timestamp;\\n\\n  // Tells if an update has been requested but not yet completed\\n  bool public pending;\\n\\n  // The Witnet request object, is set in the constructor\\n  Request public request;\\n\\n  // Emits when the price is updated\\n  event PriceUpdated(uint64);\\n\\n  // Emits when found an error decoding request result\\n  event ResultError(string);\\n\\n  // This is the ERC2362 identifier for a eth price feed, computed as `keccak256(\\\"Price-ETH/USD-3\\\")`\\n  bytes32 constant public ETHUSD3ID = bytes32(hex\\\"dfaa6f747f0f012e8f2069d6ecacff25f5cdf0258702051747439949737fc0b5\\\");\\n\\n  // This constructor does a nifty trick to tell the `UsingWitnet` library where\\n  // to find the Witnet contracts on whatever Ethereum network you use.\\n  constructor (address _wrb) UsingWitnet(_wrb) {\\n    // Instantiate the Witnet request\\n    request = new EthPriceRequest();\\n  }\\n\\n  /**\\n  * @notice Sends `request` to the WitnetRequestBoard.\\n  * @dev This method will only succeed if `pending` is 0.\\n  **/\\n  function requestUpdate() public payable {\\n    require(!pending, \\\"Complete pending request before requesting a new one\\\");\\n\\n    // Send the request to Witnet and store the ID for later retrieval of the result\\n    // The `witnetPostRequest` method comes with `UsingWitnet`\\n    lastRequestId = witnetPostRequest(request);\\n\\n    // Signal that there is already a pending request\\n    pending = true;\\n  }\\n\\n  /**\\n  * @notice Reads the result, if ready, from the WitnetRequestBoard.\\n  * @dev The `witnetRequestAccepted` modifier comes with `UsingWitnet` and allows to\\n  * protect your methods from being called before the request has been successfully\\n  * relayed into Witnet.\\n  **/\\n  function completeUpdate() public witnetRequestResolved(lastRequestId) {\\n    require(pending, \\\"There is no pending update.\\\");\\n\\n    // Read the result of the Witnet request\\n    // The `witnetReadResult` method comes with `UsingWitnet`\\n    Witnet.Result memory result = witnetReadResult(lastRequestId);\\n\\n    // If the Witnet request succeeded, decode the result and update the price point\\n    // If it failed, revert the transaction with a pretty-printed error message\\n    if (result.isOk()) {\\n      lastPrice = result.asUint64();\\n      // solhint-disable-next-line not-rely-on-time\\n      timestamp = block.timestamp;\\n      emit PriceUpdated(lastPrice);\\n    } else {\\n      string memory errorMessage;\\n\\n      // Try to read the value as an error message, catch error bytes if read fails\\n      try result.asErrorMessage() returns (Witnet.ErrorCodes, string memory e) {\\n        errorMessage = e;\\n      }\\n      catch (bytes memory errorBytes){\\n        errorMessage = string(errorBytes);\\n      }\\n      emit ResultError(errorMessage);\\n    }\\n\\n    // In any case, set `pending` to false so a new update can be requested\\n    pending = false;\\n  }\\n\\n  /**\\n  * @notice Exposes the public data point in an ERC2362 compliant way.\\n  * @dev Returns error `400` if queried for an unknown data point, and `404` if `completeUpdate` has never been called\\n  * successfully before.\\n  **/\\n  function valueFor(bytes32 _id) external view override returns(int256, uint256, uint256) {\\n    // Unsupported data point ID\\n    if(_id != ETHUSD3ID) return(0, 0, 400);\\n    // No value is yet available for the queried data point ID\\n    if (timestamp == 0) return(0, 0, 404);\\n\\n    int256 value = int256(uint256(lastPrice));\\n\\n    return(value, timestamp, 200);\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"/home/cyric/Data/git/witnet/witnet-price-feed-examples/contracts/flattened/EthUsdPriceFeed/FlattenedEthUsdPriceFeed.sol\": {\r\n        \"Witnet\": \"0x916aC9636F4Ea9f54f07c9De8fDCd828e1b32c9B\"\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrb\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"ResultError\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETHUSD3ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPrice\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"request\",\"outputs\":[{\"internalType\":\"contract Request\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestUpdate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"valueFor\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EthUsdPriceFeed","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000400dbf3645b345823124aab22d04013a46d9ced5","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}