{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\n// TokenCashier - allow a truste microservice to generate reciepts to be redeemed for tokens\r\n//\r\n// SPDX-License-Identifier: Apache-2.0\r\n// heckles to @deanpierce\r\n\r\ncontract TokenCashier {\r\n    \r\n    address public token = 0x382f5DfE9eE6e309D1B9D622735e789aFde6BADe; // GST\r\n    //address public token = 0xaD6D458402F60fD3Bd25163575031ACDce07538D; // ropDAI (testing)\r\n    ERC20 erc20 = ERC20(token);\r\n\r\n    address public owner = 0x7ab874Eeef0169ADA0d225E9801A3FfFfa26aAC3; // me\r\n    mapping (address => bool) public signers;\r\n\r\n    uint public nonce = 0;\r\n\r\n    // for interacting with the token well\r\n    address public wellAddr=0xFAF829Ee3AFd9641C40076B0eaebd58CCf1CC6ba;\r\n    TokenWell tokenWell = TokenWell(wellAddr);\r\n\r\n    function getBalance() public view returns(uint balance) {\r\n        balance = erc20.balanceOf(address(this));\r\n    }\r\n\r\n    function pumpWell() public {\r\n        tokenWell.pump();\r\n    }\r\n    \r\n    function redeemVoucher(bytes calldata message, bytes32 hash, uint8 v, bytes32 r, bytes32 s) public {\r\n\r\n        // ensure the signature comes from a valid signer\r\n        require(signers[voucherCheck(message,hash, v, r, s)],\"INVALID SIGNATURE\");\r\n\r\n        uint newNonce;\r\n        uint amount;\r\n        address dest;\r\n        (newNonce, amount, dest) = decodeMsg(message); // decode signed message\r\n        \r\n        require(nonce+1==newNonce, \"BAD NONCE\"); // verify the nonce\r\n        nonce+=1;\r\n        \r\n        erc20.transfer(dest,amount); // send the tokens\r\n    }\r\n\r\n    function voucherCheck(bytes memory message, bytes32 hash, uint8 v, bytes32 r, bytes32 s) public pure returns(address signer) {\r\n        \r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n96\"; // 96 bytes long\r\n        bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, message));\r\n\r\n        require(prefixedHash==hash,\"MESSAGE HASH MISMATCH\");\r\n    \r\n        // malleability check from OZ ECDSA.sol \r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        }\r\n\r\n        if (v != 27 && v != 28) {\r\n            revert(\"ECDSA: invalid signature 'v' value\");\r\n        }\r\n    \r\n        // ensure the signature comes from a valid signer\r\n        return ecrecover(hash, v, r, s);\r\n    }\r\n    \r\n    // thanks 3esmit\r\n    function decodeMsg(bytes memory _data) public pure returns(uint newNonce, uint amount, address dest){\r\n        assembly {\r\n            newNonce := mload(add(_data, 32))\r\n            amount   := mload(add(_data, 64))\r\n            dest     := mload(add(_data, 96))\r\n        }\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) public {\r\n        require(msg.sender==owner,\"NOT YOU\");\r\n        owner = newOwner;\r\n    }\r\n    \r\n    function addSigner(address newAddr) public {\r\n        require(msg.sender==owner,\"NOT YOU\");\r\n        signers[newAddr]=true;\r\n    }\r\n    \r\n    function delSigner(address badAddr) public {\r\n        require(msg.sender==owner,\"NOT YOU\");\r\n        signers[badAddr]=false;\r\n    }\r\n}\r\n\r\n\r\ninterface TokenWell{\r\n    function pump() external returns (uint256 balance);\r\n}\r\n\r\ninterface ERC20{\r\n    //function approve(address spender, uint256 value)external returns(bool);\r\n    //function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"addSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"decodeMsg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"badAddr\",\"type\":\"address\"}],\"name\":\"delSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pumpWell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"redeemVoucher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"voucherCheck\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wellAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TokenCashier","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d8b42879e4ce844b9eed9fa84a5906fc64cbea09cffba51e914a36d38f848e03"}]}