{"status":"1","message":"OK","result":[{"SourceCode":"// ___________________________________\r\n// |#######====================#######|\r\n// |#(1)*   Mirror Treasury V1   *(1)#|\r\n// |#**          /===\\             **#|\r\n// |*# {M}      |     |             #*|\r\n// |#*          |     |    O N E    *#|\r\n// |#(1)         \\===/            (1)#|\r\n// |##=========VERSION ONE==========##|\r\n// ------------------------------------\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.8.5;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n}\r\n\r\ninterface IFeeProducer {\r\n    function updateTreasury(address payable newTreasury) external;\r\n\r\n    function queueFeeUpdate(uint16 newFee) external;\r\n\r\n    function executeFeeUpdate() external;\r\n}\r\n\r\ncontract MirrorTreasuryV1 {\r\n    // ============ Mutable Ownership Configuration ============\r\n\r\n    address public owner;\r\n    /**\r\n     * @dev Allows for two-step ownership transfer, whereby the next owner\r\n     * needs to accept the ownership transfer explicitly.\r\n     */\r\n    address public nextOwner;\r\n\r\n    // ============ Events ============\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event ERC20Transfer(\r\n        address indexed token,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount\r\n    );\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"caller is not the owner.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyNextOwner() {\r\n        require(isNextOwner(), \"current owner must set caller as next owner.\");\r\n        _;\r\n    }\r\n\r\n    // ============ Constructor ============\r\n\r\n    constructor(address owner_) {\r\n        owner = owner_;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n    // ============ Ownership ============\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the next owner.\r\n     */\r\n    function isNextOwner() public view returns (bool) {\r\n        return msg.sender == nextOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows a new account (`newOwner`) to accept ownership.\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address nextOwner_) external onlyOwner {\r\n        require(nextOwner_ != address(0), \"Next owner is the zero address.\");\r\n\r\n        nextOwner = nextOwner_;\r\n    }\r\n\r\n    /**\r\n     * @dev Cancel a transfer of ownership to a new account.\r\n     * Can only be called by the current owner.\r\n     */\r\n    function cancelOwnershipTransfer() external onlyOwner {\r\n        delete nextOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to the caller.\r\n     * Can only be called by a new potential owner set by the current owner.\r\n     */\r\n    function acceptOwnership() external onlyNextOwner {\r\n        delete nextOwner;\r\n\r\n        emit OwnershipTransferred(owner, msg.sender);\r\n\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() external onlyOwner {\r\n        emit OwnershipTransferred(owner, address(0));\r\n        owner = address(0);\r\n    }\r\n\r\n    // ============ Funds Administration ============\r\n\r\n    function transferFunds(address payable to, uint256 value)\r\n        external\r\n        onlyOwner\r\n    {\r\n        _sendFunds(to, value);\r\n        emit Transfer(address(this), to, value);\r\n    }\r\n\r\n    function transferERC20(\r\n        address token,\r\n        address payable to,\r\n        uint256 value\r\n    ) external onlyOwner {\r\n        IERC20(token).transfer(to, value);\r\n        emit ERC20Transfer(token, address(this), to, value);\r\n    }\r\n\r\n    // ============ Producer Administration ============\r\n\r\n    function updateProducerTreasury(\r\n        address producer,\r\n        address payable newTreasury\r\n    ) public {\r\n        IFeeProducer(producer).updateTreasury(newTreasury);\r\n    }\r\n\r\n    function queueProducerFeeUpdate(address producer, uint16 newFee) public {\r\n        IFeeProducer(producer).queueFeeUpdate(newFee);\r\n    }\r\n\r\n    function executeProducerFeeUpdate(address producer) public {\r\n        IFeeProducer(producer).executeFeeUpdate();\r\n    }\r\n\r\n    // ============ Private Utils ============\r\n\r\n    function _sendFunds(address payable recipient, uint256 amount) private {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Insufficient balance for send\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Unable to send value: recipient may have reverted\");\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"producer\",\"type\":\"address\"}],\"name\":\"executeProducerFeeUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNextOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"producer\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"newFee\",\"type\":\"uint16\"}],\"name\":\"queueProducerFeeUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nextOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"producer\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"updateProducerTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MirrorTreasuryV1","CompilerVersion":"v0.8.5+commit.a4f2e591","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"0000000000000000000000002330ee705ffd040bb0cba8cb7734dfe00e7c4b57","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://06f98087c8aa2d3ca8dde27a2c5e944aed90b633af8659e92a805b162d5b3962"}]}