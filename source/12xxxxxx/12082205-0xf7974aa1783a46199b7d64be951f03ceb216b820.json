{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/abialy/Documents/Projects/Crypto/defi/oracle/DecentralizedOracle/on-chain-oracle/contracts/PriceFeed.sol\": {\r\n      \"content\": \"// pragma solidity >=0.4.21 <0.6.0;\\npragma solidity >=0.6.6;\\n\\nimport \\\"./interfaces/IPriceFeed.sol\\\";\\nimport \\\"./interfaces/IUpgradable.sol\\\";\\nimport \\\"./library/Ownable.sol\\\";\\n\\ncontract PriceFeed is Ownable, IPriceFeed {\\n\\n  string public feedName;\\n  mapping(uint256 => requestAnswer) public answers;\\n  uint256 currentId;\\n  IUpgradable private upgradable;\\n\\n  constructor (IUpgradable _upgradable, string memory _feedName) public {\\n    feedName = _feedName;\\n    upgradable = _upgradable;\\n  }\\n\\n  function updateFeedName (string memory _feedName) public {\\n    feedName = _feedName;\\n  }\\n  \\n  function getLatestAnswer () public override(IPriceFeed) returns (int256)\\n  {\\n    require(currentId > 0, \\\"Contract is empty.\\\");\\n    return answers[currentId - 1].priceAnswer;\\n  }\\n\\n  function getLatestTimestamp() public override(IPriceFeed) returns (uint256)\\n  {\\n    require(currentId > 0, \\\"Contract is empty.\\\");\\n    return answers[currentId - 1].timestamp;\\n  }\\n\\n  function getTimestamp(uint256 _id) public override(IPriceFeed) returns (uint256)\\n  {\\n    require(currentId > _id, \\\"Id is not exist.\\\");\\n    return answers[_id].timestamp;\\n  }\\n\\n  function getAnswer(uint256 _id) public override(IPriceFeed) returns (int256)\\n  {\\n    require(currentId > _id, \\\"Id is not exist.\\\");\\n    return answers[_id].priceAnswer;\\n  }\\n\\n  function addRequestAnswer(int256 _priceAnswer) public override(IPriceFeed)\\n  {\\n    require(msg.sender == upgradable.getOracleAddress(), \\\"Sender is not oracle.\\\");\\n    answers[currentId] = requestAnswer(\\n      currentId, block.timestamp, _priceAnswer\\n    );\\n    currentId ++;\\n  }\\n}\\n\"\r\n    },\r\n    \"/Users/abialy/Documents/Projects/Crypto/defi/oracle/DecentralizedOracle/on-chain-oracle/contracts/interfaces/IPriceFeed.sol\": {\r\n      \"content\": \"// pragma solidity >=0.4.21 <0.6.0;\\npragma solidity >=0.6.6;\\n\\ninterface IPriceFeed {\\n\\n  struct requestAnswer {\\n      uint256 id;\\n      uint256 timestamp;\\n      int256 priceAnswer;\\n  }\\n\\n  function getLatestAnswer() external returns (int256);\\n  function getLatestTimestamp() external returns (uint256);\\n  function getTimestamp(uint256 _id) external returns (uint256);\\n  function getAnswer(uint256 _id) external returns (int256);\\n  function addRequestAnswer(int256 _priceAnswer) external;\\n}\\n\"\r\n    },\r\n    \"/Users/abialy/Documents/Projects/Crypto/defi/oracle/DecentralizedOracle/on-chain-oracle/contracts/interfaces/IUpgradable.sol\": {\r\n      \"content\": \"// pragma solidity >=0.4.21 <0.6.0;\\npragma solidity >=0.6.6;\\n\\ninterface IUpgradable {\\n  function getOracleAddress() external returns (address);\\n}\\n\"\r\n    },\r\n    \"/Users/abialy/Documents/Projects/Crypto/defi/oracle/DecentralizedOracle/on-chain-oracle/contracts/library/Ownable.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.6;\\r\\n\\r\\ncontract Ownable {\\r\\n    address public owner;\\r\\n\\r\\n    /**\\r\\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\r\\n    * account.\\r\\n    */\\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n    * @dev Throws if called by any account other than the owner.\\r\\n    */\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n    * @param newOwner The address to transfer ownership to.\\r\\n    */\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        if (newOwner != address(0)) {\\r\\n            owner = newOwner;\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IUpgradable\",\"name\":\"_upgradable\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_feedName\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_priceAnswer\",\"type\":\"int256\"}],\"name\":\"addRequestAnswer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"answers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"priceAnswer\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feedName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_feedName\",\"type\":\"string\"}],\"name\":\"updateFeedName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PriceFeed","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000072d30466683c75173a3e475a69fc576edd0ce2ad00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000015556e6973776170204554482f5642544320506f6f6c0000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}