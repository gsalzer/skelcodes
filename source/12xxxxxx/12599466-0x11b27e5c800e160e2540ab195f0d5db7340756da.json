{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"details\": {\r\n        \"constantOptimizer\": true,\r\n        \"cse\": true,\r\n        \"deduplicate\": true,\r\n        \"jumpdestRemover\": true,\r\n        \"orderLiterals\": false,\r\n        \"peephole\": true,\r\n        \"yul\": false\r\n      },\r\n      \"runs\": 256\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"src/token/contracts/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.6.2;\\n\\ncontract TransferHelper {\\n  function multicall (bytes calldata src) external {\\n    assembly {\\n      let ptr := src.offset\\n      let end := add(ptr, src.length)\\n      let to := calldataload(ptr)\\n\\n      ptr := add(ptr, 32)\\n\\n      for {} lt(ptr, end) {} {\\n        let inSize := byte(callvalue(), calldataload(ptr))\\n        ptr := add(ptr, 1)\\n        calldatacopy(callvalue(), ptr, inSize)\\n        ptr := add(ptr, inSize)\\n\\n        let success := call(gas(), to, callvalue(), callvalue(), inSize, callvalue(), callvalue())\\n        if iszero(success) {\\n          returndatacopy(callvalue(), callvalue(), returndatasize())\\n          revert(callvalue(), returndatasize())\\n        }\\n      }\\n    }\\n  }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"src\",\"type\":\"bytes\"}],\"name\":\"multicall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TransferHelper","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"256","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"none"}]}