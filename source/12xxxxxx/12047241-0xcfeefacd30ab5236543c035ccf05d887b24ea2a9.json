{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/mnt/f/eth/graphlinq/GraphLinq.Engine/NodeBlock.GraphLinqPrivateSaleContract/contracts/GraphLinqPrivateSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"./libs/maths/SafeMath.sol\\\";\\r\\nimport \\\"./interfaces/IExtendedERC20.sol\\\";\\r\\n\\r\\ncontract GraphLinqPrivateSale {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n\\r\\n    address private                         _owner;\\r\\n    IExtendedERC20 private                  _glqToken;\\r\\n    mapping(address => uint256) private     _wallets_investment;\\r\\n\\r\\n    uint256 public                          _ethSolded;\\r\\n    uint256 public                          _glqSolded;\\r\\n    uint256 public                          _glqPerEth;\\r\\n    uint256 public                          _maxethPerWallet;\\r\\n    bool public                             _paused = false;\\r\\n    bool public                             _claim = false;\\r\\n\\r\\n    event NewAmountPresale (\\r\\n        uint256 srcAmount,\\r\\n        uint256 glqPereth,\\r\\n        uint256 totalGlq\\r\\n    );\\r\\n\\r\\n    /*\\r\\n    ** Description: constructing the contract basic informations, containing the GLQ token addr, the ratio price eth:GLQ\\r\\n    ** and the max authorized eth amount per wallet\\r\\n    */\\r\\n    constructor(address graphLinqTokenAddr, uint256 glqPereth, uint256 maxethPerWallet)\\r\\n    {\\r\\n        _owner = msg.sender;\\r\\n        _ethSolded = 0;\\r\\n        _glqPerEth = glqPereth;\\r\\n        _glqToken = IExtendedERC20(graphLinqTokenAddr);\\r\\n        _maxethPerWallet = maxethPerWallet;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ** Description: Check that the transaction sender is the GLQ owner\\r\\n    */\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == _owner, \\\"Only the owner can do this action\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ** Receive eth payment for the presale raise\\r\\n    */\\r\\n    receive() external payable {\\r\\n        require(_paused == false, \\\"Presale is paused\\\");\\r\\n        uint256 totalInvested = _wallets_investment[address(msg.sender)].add(msg.value);\\r\\n        require(totalInvested <= _maxethPerWallet, \\\"You depassed the limit of max eth per wallet for the presale.\\\");\\r\\n        _transfertGLQ(msg.value);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ** Description: Set the presale in pause state (no more deposits are accepted once it's turned back)\\r\\n    */\\r\\n    function setPaused(bool value) public payable onlyOwner {\\r\\n        _paused = value;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ** Description: Set the presale claim mode \\r\\n    */\\r\\n    function setClaim(bool value) public payable onlyOwner {\\r\\n        _claim = value;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ** Description: Claim the GLQ once the presale is done\\r\\n    */\\r\\n    function claimGlq() public\\r\\n    {\\r\\n        require(_claim == true, \\\"You cant claim your GLQ yet\\\");\\r\\n        uint256 srcAmount =  _wallets_investment[address(msg.sender)];\\r\\n        require(srcAmount > 0, \\\"You dont have any GLQ to claim\\\");\\r\\n        \\r\\n        uint256 glqAmount = (srcAmount.mul(_glqPerEth)).div(10 ** 18);\\r\\n         require(\\r\\n            _glqToken.balanceOf(address(this)) >= glqAmount,\\r\\n            \\\"No GLQ amount required on the contract\\\"\\r\\n        );\\r\\n        _wallets_investment[address(msg.sender)] = 0;\\r\\n        _glqToken.transfer(msg.sender, glqAmount);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n    ** Description: Return the amount raised from the Presale (as ETH)\\r\\n    */\\r\\n    function getTotalRaisedEth() public view returns(uint256) {\\r\\n        return _ethSolded;\\r\\n    }\\r\\n\\r\\n        /*\\r\\n    ** Description: Return the amount raised from the Presale (as GLQ)\\r\\n    */\\r\\n    function getTotalRaisedGlq() public view returns(uint256) {\\r\\n        return _glqSolded;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ** Description: Return the total amount invested from a specific address\\r\\n    */\\r\\n    function getAddressInvestment(address addr) public view returns(uint256) {\\r\\n        return  _wallets_investment[addr];\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ** Description: Transfer the specific GLQ amount to the payer address\\r\\n    */\\r\\n    function _transfertGLQ(uint256 _srcAmount) private {\\r\\n        uint256 glqAmount = (_srcAmount.mul(_glqPerEth)).div(10 ** 18);\\r\\n        emit NewAmountPresale(\\r\\n            _srcAmount,\\r\\n            _glqPerEth,\\r\\n            glqAmount\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            _glqToken.balanceOf(address(this)) >= glqAmount.add(_glqSolded),\\r\\n            \\\"No GLQ amount required on the contract\\\"\\r\\n        );\\r\\n\\r\\n        _ethSolded += _srcAmount;\\r\\n        _glqSolded += glqAmount;\\r\\n        _wallets_investment[address(msg.sender)] += _srcAmount;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ** Description: Authorize the contract owner to withdraw the raised funds from the presale\\r\\n    */\\r\\n    function withdraw() public payable onlyOwner {\\r\\n        msg.sender.transfer(address(this).balance);\\r\\n        _glqToken.transfer(msg.sender, _glqToken.balanceOf(address(this)));\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/mnt/f/eth/graphlinq/GraphLinq.Engine/NodeBlock.GraphLinqPrivateSaleContract/contracts/interfaces/IExtendedERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IExtendedERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n\\r\\n    function mint(address to, uint256 amount) external;\\r\\n    function burn(address from, uint256 amount) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"\r\n    },\r\n    \"/mnt/f/eth/graphlinq/GraphLinq.Engine/NodeBlock.GraphLinqPrivateSaleContract/contracts/libs/maths/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"graphLinqTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"glqPereth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxethPerWallet\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"glqPereth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalGlq\",\"type\":\"uint256\"}],\"name\":\"NewAmountPresale\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ethSolded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_glqPerEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_glqSolded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxethPerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGlq\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getAddressInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRaisedEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRaisedGlq\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setClaim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"GraphLinqPrivateSale","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000009f9c8ec3534c3ce16f928381372bfbfbfb9f4d240000000000000000000000000000000000000000000097683a4857a4c8e0000000000000000000000000000000000000000000000000000029a2241af62c0000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}