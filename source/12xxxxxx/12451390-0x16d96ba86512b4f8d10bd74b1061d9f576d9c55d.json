{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DynamicVestingEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\n/// @title Dynamic Vesting Escrow\\n/// @author Curve Finance, Yearn Finance, vasa (@vasa-develop)\\n/// @notice A vesting escsrow for dynamic teams, based on Curve vesting escrow\\n/// @dev A vesting escsrow for dynamic teams, based on Curve vesting escrow\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract DynamicVestingEscrow is Ownable {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    /**\\n    Paused: Vesting is paused. Recipient can be Unpaused by the owner.\\n    UnPaused: Vesting is unpaused. The vesting resumes from the time it was paused (in case the recipient was paused).\\n    Terminated: Recipient is terminated, meaning vesting is stopped and claims are blocked forever. No way to go back. \\n    */\\n    enum Status {Terminated, Paused, UnPaused}\\n\\n    struct Recipient {\\n        uint256 startTime; // timestamp at which vesting period will start (should be in future)\\n        uint256 endTime; // timestamp at which vesting period will end (should be in future)\\n        uint256 cliffDuration; // time duration after startTime before which the recipient cannot call claim\\n        uint256 lastPausedAt; // latest timestamp at which vesting was paused\\n        uint256 vestingPerSec; // constant number of tokens that will be vested per second.\\n        uint256 totalVestingAmount; // total amount that can be vested over the vesting period.\\n        uint256 totalClaimed; // total amount of tokens that have been claimed by the recipient.\\n        Status recipientVestingStatus; // current vesting status\\n    }\\n\\n    mapping(address => Recipient) public recipients; // mapping from recipient address to Recipient struct\\n    mapping(address => bool) public lockedTokensSeizedFor; // in case of escrow termination, a mapping to keep track of which\\n    address public token; // vesting token address\\n    // WARNING: The contract assumes that the token address is NOT malicious.\\n\\n    uint256 public dust; // total amount of token that is sitting as dust in this contract (unallocatedSupply)\\n    uint256 public totalClaimed; // total number of tokens that have been claimed.\\n    uint256 public totalAllocatedSupply; // total token allocated to the recipients via addRecipients.\\n    uint256 public ESCROW_TERMINATED_AT; // timestamp at which escow terminated.\\n    address public SAFE_ADDRESS; // an address where all the funds are sent in case any recipient or vesting escrow is terminated.\\n    bool public ALLOW_PAST_START_TIME = false; // a flag that decides if past startTime is allowed for any recipient.\\n    bool public ESCROW_TERMINATED = false; // global switch to terminate the vesting escrow. See more info in terminateVestingEscrow()\\n\\n    modifier escrowNotTerminated() {\\n        // escrow should NOT be in terminated state\\n        require(!ESCROW_TERMINATED, \\\"escrowNotTerminated: escrow terminated\\\");\\n        _;\\n    }\\n\\n    modifier isNonZeroAddress(address recipient) {\\n        // recipient should NOT be a 0 address\\n        require(recipient != address(0), \\\"isNonZeroAddress: 0 address\\\");\\n        _;\\n    }\\n\\n    modifier recipientIsUnpaused(address recipient) {\\n        // recipient should NOT be a 0 address\\n        require(recipient != address(0), \\\"recipientIsUnpaused: 0 address\\\");\\n        // recipient should be in UnPaused status\\n        require(\\n            recipients[recipient].recipientVestingStatus == Status.UnPaused,\\n            \\\"recipientIsUnpaused: recipient NOT in UnPaused state\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier recipientIsNotTerminated(address recipient) {\\n        // recipient should NOT be a 0 address\\n        require(recipient != address(0), \\\"recipientIsNotTerminated: 0 address\\\");\\n        // recipient should NOT be in Terminated status\\n        require(\\n            recipients[recipient].recipientVestingStatus != Status.Terminated,\\n            \\\"recipientIsNotTerminated: recipient terminated\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _token, address _safeAddress) {\\n        // SAFE_ADDRESS should NOT be 0 address\\n        require(_safeAddress != address(0), \\\"constructor: SAFE_ADDRESS cannot be 0 address\\\");\\n        // token should NOT be 0 address\\n        require(_token != address(0), \\\"constructor: token cannot be 0 address\\\");\\n        SAFE_ADDRESS = _safeAddress;\\n        token = _token;\\n    }\\n\\n    /// @notice Terminates the vesting escrow forever.\\n    /// @dev All the vesting states will be freezed, recipients can still claim their vested tokens.\\n    ///      Only owner of the vesting escrow can invoke this function.\\n    ///      Can only be invoked if the escrow is NOT terminated.\\n    function terminateVestingEscrow() external onlyOwner escrowNotTerminated {\\n        // set termination variables\\n        ESCROW_TERMINATED = true;\\n        ESCROW_TERMINATED_AT = block.timestamp;\\n    }\\n\\n    /// @notice Updates the SAFE_ADDRESS\\n    /// @dev It is assumed that the SAFE_ADDRESS is NOT malicious\\n    ///      Only owner of the vesting escrow can invoke this function.\\n    ///      Can only be invoked if the escrow is NOT terminated.\\n    /// @param safeAddress An address where all the tokens are transferred in case of a (recipient/escrow) termination\\n    function updateSafeAddress(address safeAddress) external onlyOwner escrowNotTerminated {\\n        // Check if the safeAddress is NOT a 0 address\\n        require(safeAddress != address(0), \\\"updateSafeAddress: SAFE_ADDRESS cannot be 0 address\\\");\\n        SAFE_ADDRESS = safeAddress;\\n    }\\n\\n    /// @notice Add and fund new recipients.\\n    /// @dev Owner of the vesting escrow needs to approve tokens to this contract\\n    ///      Only owner of the vesting escrow can invoke this function.\\n    ///      Can only be invoked if the escrow is NOT terminated.\\n    /// @param _recipients An array of recipient addresses\\n    /// @param _amounts An array of amounts to be vested by the corresponding recipient addresses\\n    /// @param _startTimes An array of startTimes of the vesting schedule for the corresponding recipient addresses\\n    /// @param _endTimes An array of endTimes of the vesting schedule for the corresponding recipient addresses\\n    /// @param _cliffDurations An array of cliff durations of the vesting schedule for the corresponding recipient addresses\\n    /// @param _totalAmount Total sum of the amounts in the _amounts array\\n    function addRecipients(\\n        address[] calldata _recipients,\\n        uint256[] calldata _amounts,\\n        uint256[] calldata _startTimes,\\n        uint256[] calldata _endTimes,\\n        uint256[] calldata _cliffDurations,\\n        uint256 _totalAmount\\n    ) external onlyOwner escrowNotTerminated {\\n        // Every input should be of equal length (greater than 0)\\n        require(\\n            (_recipients.length == _amounts.length) &&\\n                (_amounts.length == _startTimes.length) &&\\n                (_startTimes.length == _endTimes.length) &&\\n                (_endTimes.length == _cliffDurations.length) &&\\n                (_recipients.length != 0),\\n            \\\"addRecipients: invalid params\\\"\\n        );\\n\\n        // _totalAmount should be greater than 0\\n        require(_totalAmount > 0, \\\"addRecipients: zero totalAmount not allowed\\\");\\n\\n        // transfer funds from the msg.sender\\n        // Will fail if the allowance is less than _totalAmount\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), _totalAmount);\\n\\n        // register _totalAmount before allocation\\n        uint256 _before = _totalAmount;\\n\\n        // populate recipients mapping\\n        for (uint256 i = 0; i < _amounts.length; i++) {\\n            // recipient should NOT be a 0 address\\n            require(_recipients[i] != address(0), \\\"addRecipients: recipient cannot be 0 address\\\");\\n            // if past startTime is NOT allowed, then the startTime should be in future\\n            require(ALLOW_PAST_START_TIME || (_startTimes[i] >= block.timestamp), \\\"addRecipients: invalid startTime\\\");\\n            // endTime should be greater than startTime\\n            require(_endTimes[i] > _startTimes[i], \\\"addRecipients: endTime should be after startTime\\\");\\n            // cliffDuration should be less than vesting duration\\n            require(_cliffDurations[i] < _endTimes[i].sub(_startTimes[i]), \\\"addRecipients: cliffDuration too long\\\");\\n            // amount should be greater than 0\\n            require(_amounts[i] > 0, \\\"addRecipients: vesting amount cannot be 0\\\");\\n            // add recipient to the recipients mapping\\n            recipients[_recipients[i]] = Recipient(\\n                _startTimes[i],\\n                _endTimes[i],\\n                _cliffDurations[i],\\n                0,\\n                // vestingPerSec = totalVestingAmount/(endTimes-(startTime+cliffDuration))\\n                _amounts[i].div(_endTimes[i].sub(_startTimes[i].add(_cliffDurations[i]))),\\n                _amounts[i],\\n                0,\\n                Status.UnPaused\\n            );\\n            // reduce _totalAmount\\n            // Will revert if the _totalAmount is less than sum of _amounts\\n            _totalAmount = _totalAmount.sub(_amounts[i]);\\n        }\\n        // add the allocated token amount to totalAllocatedSupply\\n        totalAllocatedSupply = totalAllocatedSupply.add(_before.sub(_totalAmount));\\n        // register remaining _totalAmount as dust\\n        dust = dust.add(_totalAmount);\\n    }\\n\\n    /// @notice Pause recipient vesting\\n    /// @dev This freezes the vesting schedule for the paused recipient.\\n    ///      Recipient will NOT be able to claim until unpaused.\\n    ///      Only owner of the vesting escrow can invoke this function.\\n    ///      Can only be invoked if the escrow is NOT terminated.\\n    /// @param recipient The recipient address for which vesting will be paused.\\n    function pauseRecipient(address recipient) external onlyOwner escrowNotTerminated isNonZeroAddress(recipient) {\\n        // current recipient status should be UnPaused\\n        require(recipients[recipient].recipientVestingStatus == Status.UnPaused, \\\"pauseRecipient: cannot pause\\\");\\n        // set vesting status of the recipient as Paused\\n        recipients[recipient].recipientVestingStatus = Status.Paused;\\n        // set lastPausedAt timestamp\\n        recipients[recipient].lastPausedAt = block.timestamp;\\n    }\\n\\n    /// @notice UnPause recipient vesting\\n    /// @dev This unfreezes the vesting schedule for the paused recipient. Recipient will be able to claim.\\n    ///      In order to keep vestingPerSec for the recipient a constant, cliffDuration and endTime for the\\n    ///      recipient are shifted by the pause duration so that the recipient resumes with the same state\\n    ///      at the time it was paused.\\n    ///      Only owner of the vesting escrow can invoke this function.\\n    ///      Can only be invoked if the escrow is NOT terminated.\\n    /// @param recipient The recipient address for which vesting will be unpaused.\\n    function unPauseRecipient(address recipient) external onlyOwner escrowNotTerminated isNonZeroAddress(recipient) {\\n        // current recipient status should be Paused\\n        require(recipients[recipient].recipientVestingStatus == Status.Paused, \\\"unPauseRecipient: cannot unpause\\\");\\n        // set vesting status of the recipient as \\\"UnPaused\\\"\\n        recipients[recipient].recipientVestingStatus = Status.UnPaused;\\n        // calculate the time for which the recipient was paused for\\n        uint256 pausedFor = block.timestamp.sub(recipients[recipient].lastPausedAt);\\n        // extend the cliffDuration by the pause duration\\n        recipients[recipient].cliffDuration = recipients[recipient].cliffDuration.add(pausedFor);\\n        // extend the endTime by the pause duration\\n        recipients[recipient].endTime = recipients[recipient].endTime.add(pausedFor);\\n    }\\n\\n    /// @notice Terminate recipient vesting\\n    /// @dev This terminates the vesting schedule for the recipient forever.\\n    ///      Recipient will NOT be able to claim.\\n    ///      Only owner of the vesting escrow can invoke this function.\\n    ///      Can only be invoked if the escrow is NOT terminated.\\n    /// @param recipient The recipient address for which vesting will be terminated.\\n    function terminateRecipient(address recipient) external onlyOwner escrowNotTerminated isNonZeroAddress(recipient) {\\n        // current recipient status should NOT be Terminated\\n        require(recipients[recipient].recipientVestingStatus != Status.Terminated, \\\"terminateRecipient: cannot terminate\\\");\\n        // claim for the user if possible\\n        if (canClaim(recipient)) {\\n            // transfer unclaimed tokens to the recipient\\n            _claimFor(claimableAmountFor(recipient), recipient);\\n            // transfer locked tokens to the SAFE_ADDRESS\\n        }\\n        uint256 _bal = recipients[recipient].totalVestingAmount.sub(recipients[recipient].totalClaimed);\\n        IERC20(token).safeTransfer(SAFE_ADDRESS, _bal);\\n        // set vesting status of the recipient as \\\"Terminated\\\"\\n        recipients[recipient].recipientVestingStatus = Status.Terminated;\\n    }\\n\\n    /// @notice Claim a specific amount of tokens.\\n    /// @dev Claim a specific amount of tokens.\\n    ///      Will revert if amount parameter is greater than the claimable amount\\n    ///      of tokens for the recipient at the time of function invocation.\\n    ///      Can be invoked by any non-terminated recipient.\\n    /// @param amount The amount of tokens recipient wants to claim.\\n    function claim(uint256 amount) external {\\n        _claimFor(amount, msg.sender);\\n    }\\n\\n    // claim tokens for a specific recipient\\n    function _claimFor(uint256 _amount, address _recipient) internal {\\n        // get recipient\\n        Recipient storage recipient = recipients[_recipient];\\n\\n        // recipient should be able to claim\\n        require(canClaim(_recipient), \\\"_claimFor: recipient cannot claim\\\");\\n\\n        // max amount the user can claim right now\\n        uint256 claimableAmount = claimableAmountFor(_recipient);\\n\\n        // amount parameter should be less or equal to than claimable amount\\n        require(_amount <= claimableAmount, \\\"_claimFor: cannot claim passed amount\\\");\\n\\n        // increase user specific totalClaimed\\n        recipient.totalClaimed = recipient.totalClaimed.add(_amount);\\n\\n        // user's totalClaimed should NOT be greater than user's totalVestingAmount\\n        require(recipient.totalClaimed <= recipient.totalVestingAmount, \\\"_claimFor: cannot claim more than you deserve\\\");\\n\\n        // increase global totalClaimed\\n        totalClaimed = totalClaimed.add(_amount);\\n\\n        // totalClaimed should NOT be greater than total totalAllocatedSupply\\n        require(totalClaimed <= totalAllocatedSupply, \\\"_claimFor: cannot claim more than allocated to escrow\\\");\\n\\n        // transfer the amount to the _recipient\\n        IERC20(token).safeTransfer(_recipient, _amount);\\n    }\\n\\n    /// @notice Get total vested tokens for multiple recipients.\\n    /// @dev Reverts if any of the recipients is terminated.\\n    /// @param _recipients An array of non-terminated recipient addresses.\\n    /// @return totalAmount total vested tokens for all _recipients passed.\\n    function batchTotalVestedOf(address[] memory _recipients) public view returns (uint256 totalAmount) {\\n        for (uint256 i = 0; i < _recipients.length; i++) {\\n            totalAmount = totalAmount.add(totalVestedOf(_recipients[i]));\\n        }\\n    }\\n\\n    /// @notice Get total vested tokens of a specific recipient.\\n    /// @dev Reverts if the recipient is terminated.\\n    /// @param recipient A non-terminated recipient address.\\n    /// @return Total vested tokens for the recipient address.\\n    function totalVestedOf(address recipient) public view recipientIsNotTerminated(recipient) returns (uint256) {\\n        // get recipient\\n        Recipient memory _recipient = recipients[recipient];\\n\\n        // totalVested = totalClaimed + claimableAmountFor\\n        return _recipient.totalClaimed.add(claimableAmountFor(recipient));\\n    }\\n\\n    /// @notice Check if a recipient address can successfully invoke claim.\\n    /// @dev Reverts if the recipient is a zero address.\\n    /// @param recipient A zero address recipient address.\\n    /// @return bool representing if the recipient can successfully invoke claim.\\n    function canClaim(address recipient) public view isNonZeroAddress(recipient) returns (bool) {\\n        Recipient memory _recipient = recipients[recipient];\\n\\n        // terminated recipients cannot claim\\n        if (_recipient.recipientVestingStatus == Status.Terminated) {\\n            return false;\\n        }\\n\\n        // In case of a paused recipient\\n        if (_recipient.recipientVestingStatus == Status.Paused) {\\n            return _recipient.lastPausedAt >= _recipient.startTime.add(_recipient.cliffDuration);\\n        }\\n\\n        // In case of a unpaused recipient, recipient can claim if the cliff duration (inclusive) has passed.\\n        return block.timestamp >= _recipient.startTime.add(_recipient.cliffDuration);\\n    }\\n\\n    /// @notice Check the time after (inclusive) which recipient can successfully invoke claim.\\n    /// @dev Reverts if the recipient is a zero address.\\n    /// @param recipient A zero address recipient address.\\n    /// @return Returns the time after (inclusive) which recipient can successfully invoke claim.\\n    function claimStartTimeFor(address recipient)\\n        public\\n        view\\n        escrowNotTerminated\\n        recipientIsUnpaused(recipient)\\n        returns (uint256)\\n    {\\n        return recipients[recipient].startTime.add(recipients[recipient].cliffDuration);\\n    }\\n\\n    /// @notice Get amount of tokens that can be claimed by a recipient at the current timestamp.\\n    /// @dev Reverts if the recipient is terminated.\\n    /// @param recipient A non-terminated recipient address.\\n    /// @return Amount of tokens that can be claimed by a recipient at the current timestamp.\\n    function claimableAmountFor(address recipient) public view recipientIsNotTerminated(recipient) returns (uint256) {\\n        // get recipient\\n        Recipient memory _recipient = recipients[recipient];\\n\\n        // claimable = totalVestingAmount - (totalClaimed + locked)\\n        return _recipient.totalVestingAmount.sub(_recipient.totalClaimed.add(totalLockedOf(recipient)));\\n    }\\n\\n    /// @notice Get total locked (non-vested) tokens for multiple non-terminated recipient addresses.\\n    /// @dev Reverts if any of the recipients is terminated.\\n    /// @param _recipients An array of non-terminated recipient addresses.\\n    /// @return totalAmount Total locked (non-vested) tokens for multiple non-terminated recipient addresses.\\n    function batchTotalLockedOf(address[] memory _recipients) public view returns (uint256 totalAmount) {\\n        for (uint256 i = 0; i < _recipients.length; i++) {\\n            totalAmount = totalAmount.add(totalLockedOf(_recipients[i]));\\n        }\\n    }\\n\\n    /// @notice Get total locked tokens of a specific recipient.\\n    /// @dev Reverts if any of the recipients is terminated.\\n    /// @param recipient A non-terminated recipient address.\\n    /// @return Total locked tokens of a specific recipient.\\n    function totalLockedOf(address recipient) public view recipientIsNotTerminated(recipient) returns (uint256) {\\n        // get recipient\\n        Recipient memory _recipient = recipients[recipient];\\n\\n        // We know that vestingPerSec is constant for a recipient for entirety of their vesting period\\n        // locked = vestingPerSec*(endTime-max(lastPausedAt, startTime+cliffDuration))\\n        if (_recipient.recipientVestingStatus == Status.Paused) {\\n            if (_recipient.lastPausedAt >= _recipient.endTime) {\\n                return 0;\\n            }\\n            return\\n                _recipient.vestingPerSec.mul(\\n                    _recipient.endTime.sub(\\n                        Math.max(_recipient.lastPausedAt, _recipient.startTime.add(_recipient.cliffDuration))\\n                    )\\n                );\\n        }\\n\\n        // Nothing is locked if the recipient passed the endTime\\n        if (block.timestamp >= _recipient.endTime) {\\n            return 0;\\n        }\\n\\n        // in case escrow is terminated, locked amount stays the constant\\n        if (ESCROW_TERMINATED) {\\n            return\\n                _recipient.vestingPerSec.mul(\\n                    _recipient.endTime.sub(\\n                        Math.max(ESCROW_TERMINATED_AT, _recipient.startTime.add(_recipient.cliffDuration))\\n                    )\\n                );\\n        }\\n\\n        // We know that vestingPerSec is constant for a recipient for entirety of their vesting period\\n        // locked = vestingPerSec*(endTime-max(block.timestamp, startTime+cliffDuration))\\n        if (_recipient.recipientVestingStatus == Status.UnPaused) {\\n            return\\n                _recipient.vestingPerSec.mul(\\n                    _recipient.endTime.sub(Math.max(block.timestamp, _recipient.startTime.add(_recipient.cliffDuration)))\\n                );\\n        }\\n    }\\n\\n    /// @notice Allows owner to transfer the ERC20 assets (other than token) to the \\\"to\\\" address in case of any emergency\\n    /// @dev It is assumed that the \\\"to\\\" address is NOT malicious\\n    ///      Only owner of the vesting escrow can invoke this function.\\n    ///      Reverts if the asset address is a zero address or the token address.\\n    ///      Reverts if the to address is a zero address.\\n    /// @param asset Address of the ERC20 asset to be rescued\\n    /// @param to Address to which all ERC20 asset amount will be transferred\\n    /// @return rescued Total amount of asset transferred to the SAFE_ADDRESS.\\n    function inCaseAssetGetStuck(address asset, address to) external onlyOwner returns (uint256 rescued) {\\n        // asset address should NOT be a 0 address\\n        require(asset != address(0), \\\"inCaseAssetGetStuck: asset cannot be 0 address\\\");\\n        // asset address should NOT be the token address\\n        require(asset != token, \\\"inCaseAssetGetStuck: cannot withdraw token\\\");\\n        // to address should NOT a 0 address\\n        require(to != address(0), \\\"inCaseAssetGetStuck: to cannot be 0 address\\\");\\n        // transfer all the balance of the asset this contract hold to the \\\"to\\\" address\\n        rescued = IERC20(asset).balanceOf(address(this));\\n        IERC20(asset).safeTransfer(to, rescued);\\n    }\\n\\n    /// @notice Transfers the dust to the SAFE_ADDRESS.\\n    /// @dev It is assumed that the SAFE_ADDRESS is NOT malicious.\\n    ///      Only owner of the vesting escrow can invoke this function.\\n    /// @return Amount of dust to the SAFE_ADDRESS.\\n    function transferDust() external onlyOwner returns (uint256) {\\n        // precaution for reentrancy attack\\n        if (dust > 0) {\\n            uint256 _dust = dust;\\n            dust = 0;\\n            IERC20(token).safeTransfer(SAFE_ADDRESS, _dust);\\n            return _dust;\\n        }\\n        return 0;\\n    }\\n\\n    /// @notice Transfers the locked (non-vested) tokens of the passed recipients to the SAFE_ADDRESS\\n    /// @dev It is assumed that the SAFE_ADDRESS is NOT malicious\\n    ///      Only owner of the vesting escrow can invoke this function.\\n    ///      Reverts if any of the recipients is terminated.\\n    ///      Can only be invoked if the escrow is terminated.\\n    /// @param _recipients An array of non-terminated recipient addresses.\\n    /// @return totalSeized Total tokens seized from the recipients.\\n    function seizeLockedTokens(address[] calldata _recipients) external onlyOwner returns (uint256 totalSeized) {\\n        // only seize if escrow is terminated\\n        require(ESCROW_TERMINATED, \\\"seizeLockedTokens: escrow not terminated\\\");\\n        // get the total tokens to be seized\\n        for (uint256 i = 0; i < _recipients.length; i++) {\\n            // only seize tokens from the recipients which have not been seized before\\n            if (!lockedTokensSeizedFor[_recipients[i]]) {\\n                totalSeized = totalSeized.add(totalLockedOf(_recipients[i]));\\n                lockedTokensSeizedFor[_recipients[i]] = true;\\n            }\\n        }\\n        // transfer the totalSeized amount to the SAFE_ADDRESS\\n        IERC20(token).safeTransfer(SAFE_ADDRESS, totalSeized);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_safeAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ALLOW_PAST_START_TIME\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ESCROW_TERMINATED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ESCROW_TERMINATED_AT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SAFE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_startTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_endTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_cliffDurations\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmount\",\"type\":\"uint256\"}],\"name\":\"addRecipients\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"}],\"name\":\"batchTotalLockedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"}],\"name\":\"batchTotalVestedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claimStartTimeFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claimableAmountFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dust\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"inCaseAssetGetStuck\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rescued\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedTokensSeizedFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"pauseRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"recipients\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPausedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVestingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"enum DynamicVestingEscrow.Status\",\"name\":\"recipientVestingStatus\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"}],\"name\":\"seizeLockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSeized\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"terminateRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminateVestingEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocatedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"totalLockedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"totalVestedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDust\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unPauseRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safeAddress\",\"type\":\"address\"}],\"name\":\"updateSafeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DynamicVestingEscrow","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"0000000000000000000000004104b135dbc9609fc1a9490e61369036497660c8000000000000000000000000ca67f76bccce3f856fcd38825e3afc43386ec806","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}