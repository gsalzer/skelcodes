{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\ninterface NFTXMinter {\r\n  function mint(uint256[] calldata tokenIds, uint256[] calldata amounts) external returns (uint256);\r\n  function approve(address _spender, uint256 _value) external returns (bool success);\r\n  function balanceOf(address tokenOwner) external returns (uint balance);\r\n}\r\n\r\ninterface SushiSwap {\r\n  function swapExactTokensForETH(uint256 amountIn,\r\n    uint256 amountOutMin, address[] calldata path, address to, uint256 deadline)\r\n    external returns (uint[] memory amounts);\r\n}\r\n\r\ninterface ERC721 {\r\n  function approve(address to, uint256 tokenId) external;\r\n}\r\n\r\ncontract NFTX3 {\r\n  address payable private owner;\r\n\r\n  constructor() {\r\n    owner = payable(msg.sender);\r\n  }\r\n\r\n  // allow getting money\r\n  fallback() external payable {}\r\n  receive() external payable {}\r\n\r\n  // function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n  function onERC721Received(address, address, uint256, bytes calldata) external pure returns(bytes4) { return NFTX3.onERC721Received.selector; }\r\n\r\n  function withdraw() external {\r\n    require(msg.sender == owner);\r\n    owner.transfer(address(this).balance);\r\n  }\r\n\r\n  function money(address payable rarible_to, bytes calldata rarible_data, uint256 rarible_value,\r\n                 NFTXMinter token, ERC721 nft, uint256 tokenId,\r\n                 SushiSwap sushi, uint256 min_profit) external {\r\n    uint256 startingBalance = address(this).balance;\r\n\r\n    // buy the NFT on rarible\r\n    {\r\n      (bool success, ) = rarible_to.call{value:rarible_value}(rarible_data);\r\n      require(success, \"buy failed\");\r\n    }\r\n\r\n    // mint the NFT into a token\r\n    nft.approve(address(token), tokenId);\r\n    {\r\n      uint256[] memory tokenIds = new uint256[](1);\r\n      uint256[] memory amounts = new uint256[](1);\r\n      tokenIds[0] = tokenId;\r\n      amounts[0] = 1;\r\n      token.mint(tokenIds, amounts);\r\n    }\r\n\r\n    // approve the spend for the sushi router\r\n    uint256 tokenAmount = token.balanceOf(address(this));\r\n    token.approve(address(sushi), tokenAmount);\r\n\r\n    // sell the token on SushiSwap\r\n    {\r\n      address[] memory path = new address[](2);\r\n      path[0] = address(token);\r\n      path[1] = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);  // WETH\r\n      sushi.swapExactTokensForETH(tokenAmount, 0, path, address(this), block.timestamp + 15);\r\n    }\r\n\r\n    // revert if we didn't make enough money\r\n    require(address(this).balance > startingBalance, \"not make ANY MONEY :(\");\r\n    require(address(this).balance > (startingBalance + min_profit), \"not make enough money\");\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"rarible_to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rarible_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"rarible_value\",\"type\":\"uint256\"},{\"internalType\":\"contract NFTXMinter\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contract ERC721\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"contract SushiSwap\",\"name\":\"sushi\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"min_profit\",\"type\":\"uint256\"}],\"name\":\"money\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"NFTX3","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e5a765b6a1dfda8a74217ea636f3e2e1931902782e56f7bbae65551796b78ece"}]}