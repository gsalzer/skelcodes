{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.1;\r\n\r\n/*\r\nVERSION DATE: 29/04/2021\r\n*/\r\n\r\nabstract contract TokenAddress \r\n{\r\n\tfunction ownerOf(uint256 tokenId) public view virtual returns (address);\r\n\tfunction getApproved(uint256 tokenId) public view virtual returns (address);\r\n\tfunction transferFrom(address from, address to, uint256 tokenId) public virtual;\r\n}\r\n\r\ncontract Owned \r\n{\r\n\taddress public owner;\r\n\t\r\n    constructor()\r\n\t{\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function changeOwner(address newOwner) public onlyOwner\r\n\t{\r\n\t\trequire(newOwner != address(0), \"wrong address\");\r\n\t\trequire(newOwner != owner, \"wrong address\");\r\n\r\n        owner = newOwner;\r\n    }\r\n\t\r\n\tmodifier onlyOwner {\r\n        require(msg.sender == owner, \"wrong owner\");\r\n        _;\r\n    }\r\n}\r\n\r\ncontract ReturnedAuction is Owned\r\n{\r\n\tstruct Auction\r\n\t{\r\n        address seller;\r\n\t\taddress tokenAddr;\r\n\t\tuint tokenId;\r\n\t\tuint minIncrement;\r\n\t\tuint32 startTime;\r\n\t\tuint32 endTime;\r\n\t\tuint highestBindingBid;\r\n\t\taddress highestBidder;\r\n    }\r\n\r\n\tuint public iterAuction = 0;\r\n\tmapping(uint256 => Auction) idAuction;\t\t\t\t\t\t\r\n\tmapping(address => mapping(uint => uint)) addrAuction;  \t\t// tokenAddr => tokenId => idAuction\r\n\t\r\n\tevent CreateAuction(uint auctionId, address tokenAddr, uint tokenId);\r\n\tevent Bid(uint auctionId, address bidder, uint bid);\r\n\tevent ResolveAuction(uint auctionId, address withdrawalAccount, uint amount);\r\n\t\r\n\tuint256 public feeValue;\r\n\tuint8 public feePercent;\r\n\tuint32 deployTime;\r\n\r\n\tfunction timenow() public view returns(uint32) { return uint32(block.timestamp); }\r\n\r\n\tconstructor(uint8 _feePercent)\r\n\t{\r\n\t\trequire(_feePercent<=50, \"wrong value\");\r\n\t\tfeePercent = _feePercent;\r\n\t\tdeployTime = timenow();\r\n\t}\r\n\t\r\n\tfunction createAuction( \r\n\t\taddress tokenAddr, \r\n\t\tuint256 tokenId, \r\n\t\t\r\n\t\tuint beginPrice,\r\n\t\tuint minIncrement,\r\n\t\t\r\n\t\tuint32 startTime,\r\n\t\tuint32 endTime\r\n\t) public\r\n\t{\r\n\t\tTokenAddress ta = TokenAddress(tokenAddr);\r\n\t\trequire( ta.ownerOf(tokenId) == msg.sender, \"token is not owned\" );\r\n\t\trequire( ta.getApproved(tokenId) == address(this), \"token is not approved\" );\r\n\t\t\r\n\t\trequire(addrAuction[tokenAddr][tokenId]==0, \"auction already exists\");\r\n\t\t\r\n\t\t// up to 1 month (=31*24*3600), the time can be set relative to the current one\r\n\t\tif ( startTime < 2678400 ) startTime += timenow();\r\n\t\tif ( endTime < 2678400 ) endTime += timenow();\r\n\r\n\t\trequire( startTime > deployTime, \"wrong time\" );\r\n\t\trequire( startTime < endTime, \"wrong time\" );\r\n\t\trequire( endTime > timenow(), \"wrong time\" );\r\n\r\n\t\trequire( beginPrice > 0, \"beginPrice is zero\" );\r\n\t\trequire( minIncrement > 0, \"minIncrement is zero\" );\r\n\t\t\r\n        Auction memory auction = Auction(\r\n            msg.sender,\r\n\t\t\ttokenAddr,\r\n\t\t\ttokenId,\r\n\t\t\tminIncrement,\r\n\t\t\tstartTime,\r\n\t\t\tendTime,\r\n\t\t\tbeginPrice,\r\n\t\t\taddress(0)\r\n        );\r\n\r\n\t\titerAuction++;\r\n\t\tidAuction[iterAuction] = auction;\r\n\t\taddrAuction[tokenAddr][tokenId] = iterAuction;\r\n\r\n        emit CreateAuction(iterAuction, tokenAddr, tokenId);\r\n    }\r\n\r\n\tfunction clearAuction( address tokenAddr, uint256 tokenId ) public\r\n\t{\r\n\t\tTokenAddress ta = TokenAddress(tokenAddr);\r\n\t\trequire( ta.ownerOf(tokenId) == msg.sender, \"token is not owned\" );\r\n\t\trequire( ta.getApproved(tokenId) == address(this), \"token is not approved\" );\r\n\t\t\r\n\t\tuint findAuction = addrAuction[tokenAddr][tokenId];\r\n\t\t\r\n\t\trequire( findAuction!=0, \"auction don`t exists\");\r\n\t\t\r\n\t\trequire( idAuction[findAuction].endTime < timenow(), \"auction must be ended\");\r\n\t\trequire( idAuction[findAuction].highestBidder == address(0), \"auction must be resolved\");\r\n\t\t\r\n\t\taddrAuction[tokenAddr][tokenId] = 0;\r\n\t}\r\n\r\n\tfunction placeBid(uint256 auctionId) public payable\r\n\t{\r\n\t\trequire(auctionId > 0 && auctionId <= iterAuction, \"wrong auctionId\");\r\n\t\tAuction storage auction = idAuction[auctionId];\r\n\t\t\r\n\t\trequire( timenow() >= auction.startTime, \"auction hasn't started yet\" );\r\n\t\trequire( timenow() <= auction.endTime, \"auction already ended\" );\r\n\t\t\r\n\t\trequire(msg.sender != auction.seller, \"bidder equal owner\");\r\n\t\trequire(msg.sender != auction.highestBidder, \"bidder equal highestBidder\");\r\n\t\t\r\n\t\tuint newBid = msg.value;\r\n\t\trequire(newBid >= auction.highestBindingBid + auction.minIncrement, \"not overbid\" );\r\n\r\n\t\tif (auction.highestBidder != address(0)) payable(auction.highestBidder).transfer(auction.highestBindingBid);\r\n\r\n\t\tauction.highestBindingBid = newBid;\r\n\t\tauction.highestBidder = msg.sender;\t\r\n\r\n\t\temit Bid(auctionId, msg.sender, newBid);\r\n\t}\r\n\r\n\tfunction getAuction(uint256 auctionId) public view returns\r\n    (\r\n        address seller,\r\n\t\taddress tokenAddr,\r\n\t\tuint tokenId,\r\n        uint minIncrement,\r\n        uint32 startTime,\r\n\t\tuint32 endTime,\r\n\t\tuint highestBindingBid,\r\n\t\taddress highestBidder,\r\n\t\tstring memory status\r\n    ){\r\n\t\trequire(auctionId > 0 && auctionId <= iterAuction, \"wrong auctionId\");\r\n\t\tAuction storage auction = idAuction[auctionId];\r\n\t\t\r\n\t\tseller = auction.seller;\r\n\t\ttokenAddr = auction.tokenAddr;\r\n\t\ttokenId = auction.tokenId;\r\n        minIncrement = auction.minIncrement;\r\n        startTime = auction.startTime;\r\n\t\tendTime = auction.endTime;\r\n\t\thighestBindingBid = auction.highestBindingBid;\r\n\t\thighestBidder = auction.highestBidder;\r\n\t\t\r\n\t\tif ( timenow() < auction.startTime ) status = \"waiting\";\r\n\t\telse\r\n\t\tif ( timenow() < auction.endTime ) status = \"bidding\";\r\n\t\telse \r\n\t\tstatus = \"ended\";\r\n    }\r\n\r\n\tfunction resolveAuction(uint256 auctionId) public\r\n\t{\r\n\t\trequire(auctionId > 0 && auctionId <= iterAuction, \"wrong auctionId\");\r\n\t\tAuction storage auction = idAuction[auctionId];\r\n\t\t\r\n\t\trequire( timenow() > auction.endTime, \"auction hasn't ended yet\" );\r\n\t\trequire( msg.sender == auction.seller || msg.sender == auction.highestBidder, \"only seller or winner\" );\r\n\r\n\t\tuint withdrawalAmount = auction.highestBindingBid;\r\n\t\trequire(withdrawalAmount != 0, \"withdrawalAmount is zero\");\r\n\t\tauction.highestBindingBid = 0;\r\n\r\n\t\trequire(auction.highestBidder != address(0), \"auction must be cleared\");\r\n\r\n\t\tTokenAddress ta = TokenAddress(auction.tokenAddr);\r\n\t\t\r\n\t\taddrAuction[auction.tokenAddr][auction.tokenId] = 0;\r\n\t\t\r\n\t\taddress withdrawalAccount;\r\n\t\t\r\n\t\tif( ta.ownerOf(auction.tokenId) == auction.seller && ta.getApproved(auction.tokenId) == address(this) )\r\n\t\t{\r\n\t\t\twithdrawalAccount = auction.seller;\r\n\t\t\t\r\n\t\t\tuint curFee = withdrawalAmount * feePercent / 100;\r\n\t\t\tfeeValue = feeValue + curFee;\r\n\t\t\twithdrawalAmount = withdrawalAmount - curFee;\r\n\t\t\t\r\n\t\t\tta.transferFrom(auction.seller, auction.highestBidder, auction.tokenId);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\twithdrawalAccount = auction.highestBidder;\r\n\t\t}\r\n\t\t\r\n\t\tpayable(withdrawalAccount).transfer(withdrawalAmount);\r\n\t\t\r\n\t\tResolveAuction(auctionId, withdrawalAccount, withdrawalAmount);\r\n\t}\r\n\r\n\tfunction withdrawFee() onlyOwner public\r\n\t{\r\n\t\trequire( feeValue > 0, \"fee is empty\" );\r\n\r\n\t\tuint256 tmpFeeGame = feeValue;\r\n\t\tfeeValue = 0;\r\n\t\t\r\n\t\tpayable(owner).transfer(tmpFeeGame);\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_feePercent\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"CreateAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawalAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ResolveAuction\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"clearAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"beginPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minIncrement\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getAuction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minIncrement\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"highestBindingBid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iterAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"resolveAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timenow\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ReturnedAuction","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000000a","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://74d3d3fa320d1aa0e09cf3e67372cbdc123d1304da0341d027a76157a9493a2d"}]}