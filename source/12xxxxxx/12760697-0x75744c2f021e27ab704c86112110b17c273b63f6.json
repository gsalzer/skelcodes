{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity 0.8.1;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    //event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StarHolder\r\n{\r\n    struct TokenLock\r\n    {\r\n        address owner;\r\n        uint256 amount;\r\n        uint256 unlockDate;\r\n    }\r\n    \r\n    IERC20 STARLightToken;\r\n    \r\n    constructor()\r\n    {\r\n        STARLightToken = IERC20(0x2bBF4f7B8Ab300Db01d45662769821Da6E400ef4);\r\n    }\r\n    \r\n    mapping(address => TokenLock[]) public userToTokenLocks;\r\n    \r\n    /////////////////\r\n    // Lock functions\r\n    \r\n    function lockToken(uint256 _amount, uint256 _lock) external\r\n    {\r\n        require(_lock > 0 && _lock < 4);\r\n        \r\n        STARLightToken.transferFrom(msg.sender, address(this), _amount);\r\n        \r\n        uint256 unlockDate;\r\n        \r\n        if(_lock == 1) unlockDate = block.timestamp + 31540000000; // 1 year lock\r\n        if(_lock == 2) unlockDate = block.timestamp + 63070000000; // 2 year lock\r\n        if(_lock == 3) unlockDate = block.timestamp + 94610000000; // 3 year lock\r\n        \r\n        userToTokenLocks[msg.sender].push(TokenLock(\r\n            msg.sender,\r\n            _amount,\r\n            unlockDate\r\n        ));\r\n    }\r\n    \r\n    /////////////////////\r\n    // Withdraw functions\r\n    \r\n    function withdrawLockedToken(uint256 _index) external\r\n    {\r\n        TokenLock memory lock = userToTokenLocks[msg.sender][_index];\r\n        \r\n        require(block.timestamp >= lock.unlockDate, \"You are almost there, please HODL a little longer!! \");\r\n\r\n        STARLightToken.transfer(msg.sender, lock.amount);\r\n        \r\n        delete userToTokenLocks[msg.sender][_index];\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lock\",\"type\":\"uint256\"}],\"name\":\"lockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userToTokenLocks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"withdrawLockedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StarHolder","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":"ipfs://816566e4949ac348144cb9a73c94f0a8977f86562b8788dd6064c3a8ee48c39f"}]}