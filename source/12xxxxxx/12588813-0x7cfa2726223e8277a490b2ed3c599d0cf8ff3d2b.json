{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/TokenSwap.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ncontract TokenSwap is Ownable {\r\n\r\n    event AdminWalletUpdated(address addr);\r\n    event LockIntervalUpdated(uint256 interval);\r\n    event LockPercentageUpdated(uint256 percentage);\r\n    event MinDepositUpdated(uint256 amount);\r\n\r\n    event TokenWithdrawed(uint256 amount);\r\n\r\n    event PhaseCreated(uint256 startTime, uint256 endTime, uint256 swapRate);\r\n    event PhaseTimeUpdated(uint256 phaseId, uint256 startTime, uint256 endTime);\r\n    event SwapRateUpdated(uint256 phaseId, uint256 swapRate);\r\n\r\n    event Swapped(uint256 phaseId, address account, uint256 ethDeposit, uint256 ethRefund, uint256 tokenSwap, uint256 tokenLock, string referralCode);\r\n\r\n    event TokenClaimed(uint256 phaseId, address account, uint256 amount);\r\n    event TotalTokenClaimed(address account, uint256 amount);\r\n\r\n    IERC20 private _token;\r\n\r\n    address private _adminWallet;\r\n\r\n    uint256 private _lockInterval;\r\n\r\n    uint256 private _lockPercentage;\r\n\r\n    uint256 private _minDeposit;\r\n\r\n    struct ReferralCodeInfo {\r\n        uint128 amount; // ETH\r\n        uint128 numSwap;\r\n    }\r\n\r\n    // Mapping referral code to statistics information\r\n    mapping(string => ReferralCodeInfo) private _referralCodes;\r\n\r\n    struct PhaseInfo {\r\n        uint128 startTime;\r\n        uint128 endTime;\r\n        uint256 swapRate;\r\n    }\r\n\r\n    uint256 private _totalPhases;\r\n\r\n    // Mapping phase id to phase information\r\n    mapping(uint256 => PhaseInfo) private _phases;\r\n\r\n    struct LockedBalanceInfo {\r\n        uint128 amount; // Token\r\n        uint128 releaseTime;\r\n    }\r\n\r\n    uint256 private _totalLockedBalance;\r\n\r\n    // Mapping phase id to user address and locked balance information\r\n    mapping(uint256 => mapping(address => LockedBalanceInfo)) private _lockedBalances;\r\n\r\n    mapping(address => uint256[]) private _boughtPhases;\r\n\r\n    /**\r\n     * @dev Throws if phase doesn't exist\r\n     */\r\n    modifier phaseExist(uint256 phaseId) {\r\n        require(_phases[phaseId].swapRate > 0, \"TokenSwap: phase doesn't exist\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets initial values\r\n     */\r\n    constructor(address token, address adminWallet)\r\n    {\r\n        _token = IERC20(token);\r\n\r\n        _adminWallet = adminWallet;\r\n\r\n        _lockInterval = 6 * 30 days; // 6 months\r\n\r\n        _lockPercentage = 75; // 75%\r\n\r\n        _minDeposit = 0.5 ether;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns smart contract information\r\n     */\r\n    function getContractInfo()\r\n        public\r\n        view\r\n        returns (uint256, uint256, uint256, uint256, uint256, uint256, address, address)\r\n    {\r\n        return (\r\n            _lockInterval, _lockPercentage, _totalLockedBalance, _totalPhases, _token.balanceOf(address(this)), _minDeposit,\r\n            _adminWallet, address(_token)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Updates admin wallet address where contains ETH user deposited\r\n     * to smart contract for swapping\r\n     */\r\n    function updateAdminWallet(address adminWallet)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(adminWallet != address(0), \"TokenSwap: address is invalid\");\r\n\r\n        _adminWallet = adminWallet;\r\n\r\n        emit AdminWalletUpdated(adminWallet);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates lock interval\r\n     */\r\n    function updateLockInterval(uint256 lockInterval)\r\n        public\r\n        onlyOwner\r\n    {\r\n        _lockInterval = lockInterval;\r\n\r\n        emit LockIntervalUpdated(lockInterval);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates lock percentage\r\n     */\r\n    function updateLockPercentage(uint256 lockPercentage)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(lockPercentage <= 100, \"TokenSwap: percentage is invalid\");\r\n\r\n        _lockPercentage = lockPercentage;\r\n\r\n        emit LockPercentageUpdated(lockPercentage);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates minimum deposit amount\r\n     */\r\n    function updateMinDeposit(uint256 minDeposit)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(minDeposit > 0, \"TokenSwap: amount is invalid\");\r\n\r\n        _minDeposit = minDeposit;\r\n\r\n        emit MinDepositUpdated(minDeposit);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws token out of this smart contract and transfer to \r\n     * admin wallet\r\n     *\r\n     * Admin can withdraw all tokens that includes locked token of user in case emergency\r\n     */\r\n    function withdrawToken(uint256 amount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(amount > 0, \"TokenSwap: amount is invalid\");\r\n\r\n        _token.transfer(_adminWallet, amount);\r\n\r\n        emit TokenWithdrawed(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Creates new phase\r\n     */\r\n    function createPhase(uint256 startTime, uint256 endTime, uint256 swapRate)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(startTime >= block.timestamp && startTime > _phases[_totalPhases].endTime && startTime < endTime, \"TokenSwap: time is invalid\");\r\n\r\n        require(swapRate > 0, \"TokenSwap: rate is invalid\");\r\n\r\n        _totalPhases++;\r\n\r\n        _phases[_totalPhases] = PhaseInfo(uint128(startTime), uint128(endTime), swapRate);\r\n\r\n        emit PhaseCreated(startTime, endTime, swapRate);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates phase time\r\n     */\r\n    function updatePhaseTime(uint256 phaseId, uint256 startTime, uint256 endTime)\r\n        public\r\n        onlyOwner\r\n        phaseExist(phaseId)\r\n    {\r\n        PhaseInfo storage phase = _phases[phaseId];\r\n\r\n        if (startTime != 0) {\r\n            phase.startTime = uint128(startTime);\r\n        }\r\n\r\n        if (endTime != 0) {\r\n            phase.endTime = uint128(endTime);\r\n        }\r\n\r\n        require((startTime == 0 || startTime >= block.timestamp) && phase.startTime < phase.endTime, \"TokenSwap: time is invalid\");\r\n\r\n        emit PhaseTimeUpdated(phaseId, startTime, endTime);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates swap rate\r\n     */\r\n    function updateSwapRate(uint256 phaseId, uint256 swapRate)\r\n        public\r\n        onlyOwner\r\n        phaseExist(phaseId)\r\n    {\r\n        require(swapRate > 0, \"TokenSwap: rate is invalid\");\r\n\r\n        _phases[phaseId].swapRate = swapRate;\r\n\r\n        emit SwapRateUpdated(phaseId, swapRate);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns phase information\r\n     */\r\n    function getPhaseInfo(uint256 phaseId)\r\n        public\r\n        view\r\n        returns (PhaseInfo memory)\r\n    {\r\n        return _phases[phaseId];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns current active phase information\r\n     */\r\n    function getActivePhaseInfo()\r\n        public\r\n        view\r\n        returns (uint256, PhaseInfo memory)\r\n    {\r\n        uint256 currentTime = block.timestamp;\r\n\r\n        for (uint256 i = 1; i <= _totalPhases; i++) {\r\n            PhaseInfo memory phase = _phases[i];\r\n\r\n            if (currentTime < phase.endTime) {\r\n                return (i, phase);\r\n            }\r\n        }\r\n\r\n        return (0, _phases[0]);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns referral code information\r\n     */\r\n    function getReferralCodeInfo(string memory referralCode)\r\n        public\r\n        view\r\n        returns (ReferralCodeInfo memory)\r\n    {\r\n        return _referralCodes[referralCode];\r\n    }\r\n\r\n    /**\r\n     * @dev Swaps ETH to token\r\n     */\r\n    function swap(uint256 phaseId, string memory referralCode)\r\n        public\r\n        payable\r\n    {\r\n        require(msg.value >= _minDeposit, \"TokenSwap: msg.value is invalid\");\r\n\r\n        PhaseInfo memory phase = _phases[phaseId];\r\n\r\n        require(block.timestamp >= phase.startTime && block.timestamp < phase.endTime, \"TokenSwap: not in swapping time\");\r\n\r\n        uint256 remain = _token.balanceOf(address(this)) - _totalLockedBalance;\r\n\r\n        require(remain > 0, \"TokenSwap: not enough token\");\r\n\r\n        uint256 amount = msg.value * phase.swapRate / 1 ether;\r\n\r\n        uint refund;\r\n\r\n        // Calculates redundant money\r\n        if (amount > remain) {\r\n            refund = (amount - remain) * 1 ether / phase.swapRate;\r\n            amount = remain;\r\n        }\r\n\r\n        // Refunds redundant money for user\r\n        if (refund > 0) {\r\n            payable(_msgSender()).transfer(refund);\r\n        }\r\n\r\n        // Transfers money to admin wallet\r\n        payable(_adminWallet).transfer(msg.value - refund);\r\n\r\n        // Calculates number of tokens that will be locked\r\n        uint256 locked = amount * _lockPercentage / 100;\r\n\r\n        // Transfers token for user\r\n        _token.transfer(_msgSender(), amount - locked);\r\n\r\n        // Manages total locked tokens in smart contract\r\n        _totalLockedBalance += locked;\r\n\r\n        // Manages locked tokens by user\r\n        LockedBalanceInfo storage balance = _lockedBalances[phaseId][_msgSender()];\r\n        balance.amount += uint128(locked);\r\n        balance.releaseTime = uint128(phase.startTime + _lockInterval);\r\n\r\n        // Manages referral codes\r\n        ReferralCodeInfo storage referral = _referralCodes[referralCode];\r\n        referral.amount += uint128(msg.value - refund);\r\n        referral.numSwap++;\r\n\r\n        uint256[] storage phases = _boughtPhases[_msgSender()];\r\n\r\n        if (phases.length == 0 || phases[phases.length - 1] != phaseId) {\r\n            phases.push(phaseId);\r\n        }\r\n\r\n        emit Swapped(phaseId, _msgSender(), msg.value, refund, amount, locked, referralCode);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns token balance of user in smart contract that includes\r\n     * claimable and unclaimable\r\n     */\r\n    function getTokenBalance(address account)\r\n        public\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        uint256 currentTime = block.timestamp;\r\n\r\n        uint256 balance;\r\n\r\n        uint256 lockedBalance;\r\n\r\n        uint256[] memory phases = _boughtPhases[account];\r\n\r\n        for (uint256 i = 0; i < phases.length; i++) {\r\n            LockedBalanceInfo memory info = _lockedBalances[phases[i]][account];\r\n\r\n            if (info.amount == 0) {\r\n                continue;\r\n            }\r\n\r\n            if (info.releaseTime <= currentTime) {\r\n                balance += info.amount;\r\n\r\n            } else {\r\n                lockedBalance += info.amount;\r\n            }\r\n        }\r\n\r\n        return (balance, lockedBalance);\r\n    }\r\n\r\n    /**\r\n     * @dev Claims the remainning token after lock time end\r\n     */\r\n    function claimToken()\r\n        public\r\n    {\r\n        address msgSender = _msgSender();\r\n\r\n        uint256 currentTime = block.timestamp;\r\n\r\n        uint256 balance;\r\n\r\n        uint256[] memory phases = _boughtPhases[msgSender];\r\n\r\n        uint256 length = phases.length;\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            LockedBalanceInfo memory info = _lockedBalances[phases[i]][msgSender];\r\n\r\n            uint256 amount = info.amount;\r\n\r\n            if (amount == 0) {\r\n                continue;\r\n            }\r\n\r\n            if (info.releaseTime <= currentTime) {\r\n                balance += amount;\r\n\r\n                emit TokenClaimed(phases[i], msgSender, amount);\r\n\r\n                delete _lockedBalances[phases[i]][msgSender];\r\n            }\r\n        }\r\n\r\n        require(balance > 0, \"TokenSwap: balance isn't enough\");\r\n\r\n        _totalLockedBalance -= balance;\r\n\r\n        _token.transfer(msgSender, balance);\r\n\r\n        emit TotalTokenClaimed(msgSender, balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns locked balance information\r\n     */\r\n    function getLockedBalanceInfo(uint256 phaseId, address account)\r\n        public\r\n        view\r\n        returns (LockedBalanceInfo memory)\r\n    {\r\n        return _lockedBalances[phaseId][account];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns phases that user bought\r\n     */\r\n    function getBoughtPhases(address account)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        return _boughtPhases[account];\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adminWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AdminWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"LockIntervalUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"LockPercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MinDepositUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapRate\",\"type\":\"uint256\"}],\"name\":\"PhaseCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"PhaseTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapRate\",\"type\":\"uint256\"}],\"name\":\"SwapRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethRefund\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenSwap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenLock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"referralCode\",\"type\":\"string\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TotalTokenClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapRate\",\"type\":\"uint256\"}],\"name\":\"createPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActivePhaseInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"startTime\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endTime\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"swapRate\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenSwap.PhaseInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBoughtPhases\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phaseId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLockedBalanceInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releaseTime\",\"type\":\"uint128\"}],\"internalType\":\"struct TokenSwap.LockedBalanceInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phaseId\",\"type\":\"uint256\"}],\"name\":\"getPhaseInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"startTime\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endTime\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"swapRate\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenSwap.PhaseInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"referralCode\",\"type\":\"string\"}],\"name\":\"getReferralCodeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"numSwap\",\"type\":\"uint128\"}],\"internalType\":\"struct TokenSwap.ReferralCodeInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phaseId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"referralCode\",\"type\":\"string\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminWallet\",\"type\":\"address\"}],\"name\":\"updateAdminWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockInterval\",\"type\":\"uint256\"}],\"name\":\"updateLockInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockPercentage\",\"type\":\"uint256\"}],\"name\":\"updateLockPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minDeposit\",\"type\":\"uint256\"}],\"name\":\"updateMinDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phaseId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"updatePhaseTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phaseId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapRate\",\"type\":\"uint256\"}],\"name\":\"updateSwapRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenSwap","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000692accdd8b86692427e0aa4752ae917df01cc56f000000000000000000000000930c2ef8a91e7c2d9703a14cfe612c8af0f970bf","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7ac7d86a0fcb55d4a03826e061934594c0bb11f55717a36af35e1be73d4cfe60"}]}