{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity 0.6.12;\r\ninterface IGoaldDAO {\r\n    /** Returns the number of goalds deployed from this DAO. */\r\n    function getGoaldCount() external view returns (uint256);\r\n\r\n    /** Returns the current address that fees will be sent to. */\r\n    function getProxyAddress() external view returns (address);\r\n\r\n    /** Called if the DAO manager is no longer a holder after burning the initialization tokens. */\r\n    function initializeDecreasesHolders() external;\r\n\r\n    /** Called if the DAO manager is now a holder after claiming the initialization tokens. */\r\n    function issuanceIncreasesHolders() external;\r\n    \r\n    /** Makes this DAO ready for deployments (regardless of whether or not there are authorized ones). */\r\n    function makeReady(uint256 governanceStage, uint256 idOffset) external;\r\n\r\n    /** Update the reward balances prior to the transfer completing. */\r\n    function preTransfer(address sender, address recipient) external;\r\n\r\n    /** Updates holder counts after doing a transfer. */\r\n    function postTransfer(address sender, uint256 senderBefore, uint256 senderAfter, uint256 recipientBefore, uint256 recipientAfter) external;\r\n\r\n    /** Called when the DAO has been initialized. */\r\n    function updateGovernanceStage() external;\r\n}\r\n\r\ncontract GoaldToken is ERC20 {\r\n    address public _manager = msg.sender;\r\n\r\n    /** @dev The DAO versions. DAOs only become invalid if they have a security vulnerability that compromises this contract. */\r\n    address[] private _daoAddresses;\r\n    mapping(address => uint256) private _isValidDAO;\r\n    uint256 private constant UNTRACKED_DAO = 0;\r\n    uint256 private constant VALID_DAO     = 1;\r\n    uint256 private constant INVALID_DAO   = 2;\r\n\r\n    /** @dev The number of decimals is small to allow for rewards of tokens with substantially different exchange rates. */\r\n    uint8   private constant DECIMALS = 2;\r\n\r\n    /** \r\n     * @dev The minimum amount of tokens necessary to be eligible for a reward. This is \"one token\", considering decimal places. We\r\n     * are choosing two decimal places because we are initially targeting WBTC, which has 8. This way we can do a minimum reward ratio\r\n     * of 1 / 1,000,000 of a WBTC, relative to our token. So at $25,000 (2020 value), the minimum reward would be $250 (assuming we\r\n     * have issued all 10,000 tokens).\r\n     */\r\n    uint256 private constant REWARD_THRESHOLD = 10**uint256(DECIMALS);\r\n\r\n    /**\r\n     * @dev The maximum supply is 210,000 tokens. 110,000 tokens are burned on initiating the DAO; 10,000 are given to Bittrees for\r\n     * initial management. The remainder are minted on a decreasing schedule based on the total number of deployed Goalds.\r\n     */\r\n    uint256 private constant MAX_SUPPLY = 210000 * REWARD_THRESHOLD;\r\n\r\n    /** @dev The base token URI for the Goald metadata. */\r\n    string  private _baseTokenURI;\r\n\r\n    /** @dev The total number of deployed Goalds across all DAOs. */\r\n    uint256 private _goaldCount;\r\n\r\n    /**\r\n     * @dev The stage of the governance token. Tokens can be issued based on deployments regardless of what stage we are in.\r\n     *      0: Created, with no governance protocol initiated. The initial governance issuance can be claimed.\r\n     *      1: Initial governance issuance has been claimed.\r\n     *      2: The governance protocal has been initiated.\r\n     *      3: All governance tokens have been issued.\r\n     */\r\n    uint256 private constant STAGE_INITIAL               = 0;\r\n    uint256 private constant STAGE_ISSUANCE_CLAIMED      = 1;\r\n    uint256 private constant STAGE_DAO_INITIATED         = 2;\r\n    uint256 private constant STAGE_ALL_GOVERNANCE_ISSUED = 3;\r\n    uint256 private _governanceStage;\r\n\r\n    // Reentrancy reversions are the only calls to revert (in this contract) that do not have reasons. We add a third state, 'frozen'\r\n    // to allow for locking non-admin functions. The contract may be permanently frozen if it has been upgraded.\r\n    uint256 private constant RE_NOT_ENTERED = 1;\r\n    uint256 private constant RE_ENTERED     = 2;\r\n    uint256 private constant RE_FROZEN      = 3;\r\n    uint256 private _status;\r\n\r\n    // Separate reentrancy status to further guard against arbitrary calls against a DAO contract via `unsafeCallDAO()`.\r\n    uint256 private _daoStatus;\r\n\r\n    // Override decimal places to 2. See `GoaldProxy.REWARD_THRESHOLD`.\r\n    constructor() ERC20(\"Goald\", \"GOALD\") public {\r\n        _setupDecimals(DECIMALS);\r\n        _status    = RE_FROZEN;\r\n        _daoStatus = RE_NOT_ENTERED;\r\n    }\r\n\r\n    /// Events ///\r\n    \r\n    event DAOStatusChanged(address daoAddress, uint256 status);\r\n\r\n    event DAOUpgraded(address daoAddress);\r\n\r\n    event GoaldDeployed(address goaldAddress);\r\n\r\n    event ManagerChanged(address newManager);\r\n\r\n    /// Admin ///\r\n\r\n    /** Freezes the contract. Only admin functions can be called. */\r\n    function freeze() external {\r\n        // Reentrancy guard.\r\n        require(_status == RE_NOT_ENTERED);\r\n        require(msg.sender == _manager, \"Not manager\");\r\n\r\n        _status = RE_FROZEN;\r\n    }\r\n\r\n    /** Sets the status of a given DAO. */\r\n    function setDAOStatus(address daoAddress, uint256 index, uint256 status) external {\r\n        // Reentrancy guard.\r\n        require(_status == RE_NOT_ENTERED || _status == RE_FROZEN);\r\n        require(msg.sender == _manager, \"Not manager\");\r\n\r\n        // Validate the index as well.\r\n        require(_daoAddresses[index] == daoAddress, \"Non-matching DAO index\");\r\n\r\n        // Validate the status.\r\n        require(status == VALID_DAO || status == INVALID_DAO, \"Invalid status\");\r\n        uint256 currentStatus = _isValidDAO[daoAddress];\r\n        require(currentStatus != status && (currentStatus == VALID_DAO || currentStatus == INVALID_DAO), \"Invalid current status\");\r\n\r\n        // Update the status.\r\n        _isValidDAO[daoAddress] = status;\r\n\r\n        // Hello world!\r\n        emit DAOStatusChanged(daoAddress, status);\r\n    }\r\n\r\n    function setManager(address newManager) external {\r\n        // Reentrancy guard.\r\n        require(_status == RE_NOT_ENTERED || _status == RE_FROZEN);\r\n        require(msg.sender == _manager,      \"Not manager\");\r\n        require(newManager != address(0),    \"Can't be zero address\");\r\n        require(newManager != address(this), \"Can't be this address\");\r\n\r\n        // If the issuance has been claimed but the DAO has not been initialized, then the new manager must be able to initialize it.\r\n        require((_governanceStage != STAGE_ISSUANCE_CLAIMED) || (balanceOf(newManager) > 110000 * REWARD_THRESHOLD), \"New manager can't init DAO\");\r\n\r\n        _manager = newManager;\r\n\r\n        // Hello world!\r\n        emit ManagerChanged(newManager);\r\n    }\r\n\r\n    /** Unfreezes the contract. Non-admin functions can again be called. */\r\n    function unfreeze() external {\r\n        // Reentrancy guard.\r\n        require(_status == RE_FROZEN);\r\n        require(msg.sender == _manager, \"Not manager\");\r\n\r\n        _status = RE_NOT_ENTERED;\r\n    }\r\n\r\n    /** Upgrades to the new DAO version. Can only be done when frozen. */\r\n    function upgradeDAO(address daoAddress) external {\r\n        // Reentrancy guard.\r\n        require(_status == RE_FROZEN);\r\n        _status = RE_ENTERED;\r\n\r\n        // It must be a contract.\r\n        uint256 codeSize;\r\n        assembly { codeSize := extcodesize(daoAddress) }\r\n        require(codeSize > 0, \"Not a contract\");\r\n\r\n        // Make sure it hasn't been tracked yet.\r\n        require(_isValidDAO[daoAddress] == UNTRACKED_DAO, \"DAO already tracked\");\r\n\r\n        // Upgrade the DAO.\r\n        _daoAddresses.push(daoAddress);\r\n        _isValidDAO[daoAddress] = VALID_DAO;\r\n\r\n        // Enable the DAO.\r\n        IGoaldDAO(daoAddress).makeReady(_governanceStage, _goaldCount);\r\n\r\n        // Hello world!\r\n        emit DAOUpgraded(daoAddress);\r\n\r\n        // By storing the original amount once again, a refund is triggered (see https://eips.ethereum.org/EIPS/eip-2200).\r\n        _status = RE_FROZEN;\r\n    }\r\n\r\n    /// Goalds ///\r\n\r\n    /** Gets the base url for Goald metadata. */\r\n    function getBaseTokenURI() external view returns (string memory) {\r\n        return _baseTokenURI;\r\n    }\r\n\r\n    /** Gets the total number of deployed Goalds. */\r\n    function getGoaldCount() external view returns (uint256) {\r\n        return _goaldCount;\r\n    }\r\n\r\n    /** Returns the address of the DAO which deployed the Goald. */\r\n    function getGoaldDAO(uint256 id) external view returns (address) {\r\n        require(id < _goaldCount, \"ID too large\");\r\n\r\n        uint256 addressesCount = _daoAddresses.length;\r\n        uint256 index;\r\n        uint256 goaldCount;\r\n        address goaldAddress;\r\n\r\n        for (; index < addressesCount; index ++) {\r\n            goaldAddress = _daoAddresses[index];\r\n            goaldCount += IGoaldDAO(goaldAddress).getGoaldCount();\r\n            if (id <= goaldCount) {\r\n                return goaldAddress;\r\n            }\r\n        }\r\n\r\n        revert(\"Unknown DAO\");\r\n    }\r\n\r\n    /**\r\n     * Called when a deployer deploys a new Goald (via the DAO contract). Currently we use this to distribute the governance token\r\n     * according to the following schedule. An additional 120,000 tokens will be claimable by the deployer of this proxy. This will\r\n     * create a total supply of 210,000 tokens. Once the governance protocal is set up, 110,000 tokens will be burned to initiate that\r\n     * mechanism. That will leave 10% ownership for the deployer of the contract, with the remaining 90% disbused on Goald creations.\r\n     * No rewards can be paid out before the governance protocal has been initiated.\r\n     *\r\n     *      # Goalds    # Tokens\r\n     *       0 -  9       1000\r\n     *      10 - 19        900\r\n     *      20 - 29        800\r\n     *      30 - 39        700\r\n     *      40 - 49        600\r\n     *      50 - 59        500\r\n     *      60 - 69        400\r\n     *      70 - 79        300\r\n     *      80 - 89        200\r\n     *      90 - 99        100\r\n     *       < 3600         10\r\n     */\r\n    function goaldDeployed(address recipient, address goaldAddress) external returns (uint256) {\r\n        // Reentrancy guard.\r\n        require(_daoStatus == RE_NOT_ENTERED);\r\n\r\n        // Validate the caller.\r\n        require(msg.sender == _daoAddresses[_daoAddresses.length - 1], \"Caller not latest DAO\");\r\n        require(_isValidDAO[msg.sender] == VALID_DAO, \"Caller not valid DAO\");\r\n\r\n        // Hello world!\r\n        emit GoaldDeployed(goaldAddress);\r\n\r\n        uint256 goaldCount = _goaldCount++;\r\n        if (_governanceStage == STAGE_ALL_GOVERNANCE_ISSUED) {\r\n            return 0;\r\n        }\r\n\r\n        // Calculate the amount of tokens issued based on the schedule.\r\n        uint256 amount;\r\n        if        (goaldCount <   10) {\r\n            amount = 1000;\r\n        } else if (goaldCount <   20) {\r\n            amount =  900;\r\n        } else if (goaldCount <   30) {\r\n            amount =  800;\r\n        } else if (goaldCount <   40) {\r\n            amount =  700;\r\n        } else if (goaldCount <   50) {\r\n            amount =  600;\r\n        } else if (goaldCount <   60) {\r\n            amount =  500;\r\n        } else if (goaldCount <   70) {\r\n            amount =  400;\r\n        } else if (goaldCount <   80) {\r\n            amount =  300;\r\n        } else if (goaldCount <   90) {\r\n            amount =  200;\r\n        } else if (goaldCount <  100) {\r\n            amount =  100;\r\n        } else if (goaldCount < 3600) {\r\n            amount =   10;\r\n        }\r\n        \r\n        // We have issued all tokens, so move to the last stage of governance. This will short circuit this function on future calls.\r\n        // This will result in unnecessary gas if the DAO is never initiated and all 3600 token-earning goalds are created. But the\r\n        // DAO should be initiated long before that.\r\n        else if (_governanceStage == STAGE_DAO_INITIATED) {\r\n            _governanceStage = STAGE_ALL_GOVERNANCE_ISSUED;\r\n        }\r\n\r\n        if (amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // Validate the recipient.\r\n        require(_isValidDAO[recipient] == UNTRACKED_DAO, \"Can't be DAO\");\r\n        require(recipient != address(0), \"Can't be zero address\");\r\n        require(recipient != address(this), \"Can't be Goald token\");\r\n\r\n        // Validate the amount.\r\n        uint256 totalSupply = totalSupply();\r\n        require(amount + totalSupply > totalSupply, \"Overflow error\");\r\n        require(amount + totalSupply < MAX_SUPPLY, \"Exceeds supply\");\r\n        \r\n        // Mint the tokens.\r\n        _mint(recipient, amount * REWARD_THRESHOLD);\r\n\r\n        return amount;\r\n    }\r\n\r\n    /** Sets the base url for Goald metadata. */\r\n    function setBaseTokenURI(string calldata baseTokenURI) external {\r\n        // Reentrancy guard.\r\n        require(_status == RE_NOT_ENTERED || _status == RE_FROZEN);\r\n        require(msg.sender == _manager, \"Not manager\");\r\n\r\n        _baseTokenURI = baseTokenURI;\r\n    }\r\n\r\n    /// Governance ///\r\n\r\n    /** Claims the initial issuance of the governance token to enable bootstrapping the DAO. */\r\n    function claimIssuance() external {\r\n        // Reentrancy guard.\r\n        require(_status == RE_NOT_ENTERED);\r\n        require(msg.sender == _manager,            \"Not manager\");\r\n        require(_governanceStage == STAGE_INITIAL, \"Already claimed\");\r\n\r\n        // We are creating a new holder.\r\n        if (balanceOf(_manager) < REWARD_THRESHOLD) {\r\n            uint256 index;\r\n            uint256 count = _daoAddresses.length;\r\n            for (; index < count; index ++) {\r\n                IGoaldDAO(_daoAddresses[index]).issuanceIncreasesHolders();\r\n            }\r\n        }\r\n\r\n        // Mint the tokens.\r\n        _mint(_manager, 120000 * REWARD_THRESHOLD);\r\n\r\n        // Update the governance stage.\r\n        _governanceStage = STAGE_ISSUANCE_CLAIMED;\r\n    }\r\n\r\n    /** Returns the address of the DAO at the given index. */\r\n    function getDAOAddressAt(uint256 index) external view returns (address) {\r\n        return _daoAddresses[index];\r\n    }\r\n\r\n    /** Returns the number of historical DAO addresses. */\r\n    function getDAOCount() external view returns (uint256) {\r\n        return _daoAddresses.length;\r\n    }\r\n\r\n    /** Returns the status of the DAO with the given address. */\r\n    function getDAOStatus(address daoAddress) external view returns (uint256) {\r\n        return _isValidDAO[daoAddress];\r\n    }\r\n\r\n    /** Gets the latest dao address, so long as it's valid. */\r\n    function getLatestDAO() external view returns (address) {\r\n        address daoAddress = _daoAddresses[_daoAddresses.length - 1];\r\n        require(_isValidDAO[daoAddress] == VALID_DAO, \"Latest DAO invalid\");\r\n\r\n        return daoAddress;\r\n    }\r\n\r\n    /** Returns the current stage of the DAO's governance. */\r\n    function getGovernanceStage() external view returns (uint256) {\r\n        return _governanceStage;\r\n    }\r\n\r\n    /** Releases management to the DAO. */\r\n    function initializeDAO() external {\r\n        // Reentrancy guard.\r\n        require(_status == RE_NOT_ENTERED);\r\n        _status = RE_ENTERED;\r\n\r\n        require(msg.sender == _manager,                     \"Not manager\");\r\n        require(_governanceStage == STAGE_ISSUANCE_CLAIMED, \"Issuance unclaimed\");\r\n\r\n        // Burn the tokens.\r\n        uint256 startingBalance = balanceOf(_manager);\r\n        require(startingBalance >= 110000 * REWARD_THRESHOLD, \"Not enough tokens\");\r\n        _burn(_manager, 110000 * REWARD_THRESHOLD);\r\n\r\n        // Update the stage.\r\n        _governanceStage = STAGE_DAO_INITIATED;\r\n\r\n        uint256 count = _daoAddresses.length;\r\n\r\n        // If the manager no longer is a holder we need to tell the latest DAO.\r\n        if (count > 0 && startingBalance - (110000 * REWARD_THRESHOLD) < REWARD_THRESHOLD) {\r\n            IGoaldDAO(_daoAddresses[count - 1]).initializeDecreasesHolders();\r\n        }\r\n\r\n        // Tell the DAOs so they can create rewards.\r\n        uint256 index;\r\n        for (; index < count; index++) {\r\n            IGoaldDAO(_daoAddresses[index]).updateGovernanceStage();\r\n        }\r\n\r\n        // By storing the original amount once again, a refund is triggered (see https://eips.ethereum.org/EIPS/eip-2200).\r\n        _status = RE_NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * Executes a function on the DAO. Only the manager can call this function. This guards against reentrancy so any called function\r\n     * cannot execute a call against this contract. This code is duplicated with `unsafeCallDAO()` in place of having an internal\r\n     * `_callDAO()` since reentrancy guarding is not guaranteed.\r\n     *\r\n     * @param daoAddress Which DAO is being called.\r\n     * @param encodedData The non-packed, abi encoded calldata that will be included with the function call.\r\n     */\r\n    function safeCallDAO(address daoAddress, bytes calldata encodedData) external returns (bytes memory) {\r\n        // Reentrancy guard. We check against both normal reentrancy and DAO call reentrancy.\r\n        require(_status    == RE_NOT_ENTERED);\r\n        require(_daoStatus == RE_NOT_ENTERED);\r\n        _status = RE_ENTERED;\r\n        _daoStatus = RE_ENTERED;\r\n\r\n        require(msg.sender == _manager, \"Not manager\");\r\n        // `_isValidDAO` since DAOs can be disabled. Use `unsafeCallDAO()` if a call must be made to an invalid DAO.\r\n        require(_isValidDAO[daoAddress] == VALID_DAO, \"Not a valid DAO\");\r\n\r\n        // Call the function, bubbling on errors.\r\n        (bool success, bytes memory returnData) = daoAddress.call(encodedData);\r\n\r\n        // By storing the original amount once again, a refund is triggered (see https://eips.ethereum.org/EIPS/eip-2200).\r\n        _status = RE_NOT_ENTERED;\r\n        _daoStatus = RE_NOT_ENTERED;\r\n\r\n        // See @OpenZeppelin.Address._functionCallWithValue()\r\n        if (success) {\r\n            return returnData;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returnData.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returnData_size := mload(returnData)\r\n                    revert(add(32, returnData), returnData_size)\r\n                }\r\n            } else {\r\n                revert();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Executes a function on the DAO. Only the manager can call this function. This DOES NOT guard against reentrancy. Do not use\r\n     * this unless reentrancy is needed or the call is made to an invlaid contract. Otherwise use `safeCallDAO()`. This code is\r\n     * duplicated in place of having an internal `_callDAO()` since reentrancy guarding is not guaranteed.\r\n     *\r\n     * @param daoAddress Which DAO is being called.\r\n     * @param encodedData The non-packed, abi encoded calldata that will be included with the function call.\r\n     */\r\n    function unsafeCallDAO(address daoAddress, bytes calldata encodedData) external returns (bytes memory) {\r\n        // Reentrancy guard. We check against both normal reentrancy and DAO call reentrancy.\r\n        require(_daoStatus == RE_NOT_ENTERED);\r\n        _daoStatus = RE_ENTERED;\r\n\r\n        require(msg.sender == _manager, \"Not manager\");\r\n        // `_isValidDAO` since DAOs can be disabled.\r\n        require(_isValidDAO[daoAddress] != UNTRACKED_DAO, \"DAO not tracked\");\r\n\r\n        // Call the function, bubbling on errors.\r\n        (bool success, bytes memory returnData) = daoAddress.call(encodedData);\r\n\r\n        // By storing the original amount once again, a refund is triggered (see https://eips.ethereum.org/EIPS/eip-2200).\r\n        _daoStatus = RE_NOT_ENTERED;\r\n        \r\n        // See @OpenZeppelin.Address._functionCallWithValue()\r\n        if (success) {\r\n            return returnData;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returnData.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returnData_size := mload(returnData)\r\n                    revert(add(32, returnData), returnData_size)\r\n                }\r\n            } else {\r\n                revert();\r\n            }\r\n        }\r\n    }\r\n\r\n    /// ERC20 Overrides ///\r\n\r\n    /** This is overridden so we can update the reward balancees prior to the transfer completing. */\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        // Reentrancy guard.\r\n        require(_status == RE_NOT_ENTERED);\r\n        _status = RE_ENTERED;\r\n\r\n        // Preserve the original balances so we know if we need to change `_rewardHolders`. We need to call `pre()` and `post()` on\r\n        // every DAO version to make sure that the reward balances are updated correctly.\r\n        uint256 senderBefore = balanceOf(msg.sender);\r\n        uint256 recipientBefore = balanceOf(recipient);\r\n\r\n        // Update reward balances.\r\n        uint256 count = _daoAddresses.length;\r\n        uint256 index;\r\n        for (; index < count; index ++) {\r\n            IGoaldDAO(_daoAddresses[index]).preTransfer(msg.sender, recipient);\r\n        }\r\n        \r\n        // Transfer the tokens.\r\n        super.transfer(recipient, amount);\r\n        \r\n        // Update holder counts.\r\n        index = 0;\r\n        for (; index < count; index ++) {\r\n            IGoaldDAO(_daoAddresses[index]).postTransfer(msg.sender, senderBefore, balanceOf(msg.sender), recipientBefore, balanceOf(recipient));\r\n        }\r\n\r\n        // By storing the original amount once again, a refund is triggered (see https://eips.ethereum.org/EIPS/eip-2200).\r\n        _status = RE_NOT_ENTERED;\r\n\r\n        return true;\r\n    }\r\n\r\n    /** This is overridden so we can update the reward balancees prior to the transfer completing. */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        // Reentrancy guard.\r\n        require(_status == RE_NOT_ENTERED);\r\n        _status = RE_ENTERED;\r\n\r\n        // Preserve the original balances so we know if we need to change `_rewardHolders`. We need to call `pre()` and `post()` on\r\n        // every DAO version to make sure that the reward balances are updated correctly.\r\n        uint256 senderBefore = balanceOf(sender);\r\n        uint256 recipientBefore = balanceOf(recipient);\r\n\r\n        // Update reward balances.\r\n        uint256 count = _daoAddresses.length;\r\n        uint256 index;\r\n        for (; index < count; index ++) {\r\n            IGoaldDAO(_daoAddresses[index]).preTransfer(sender, recipient);\r\n        }\r\n        \r\n        // Transfer the tokens.\r\n        super.transferFrom(sender, recipient, amount);\r\n        \r\n        // Update holder counts.\r\n        index = 0;\r\n        for (; index < count; index ++) {\r\n            IGoaldDAO(_daoAddresses[index]).postTransfer(sender, senderBefore, balanceOf(sender), recipientBefore, balanceOf(recipient));\r\n        }\r\n\r\n        // By storing the original amount once again, a refund is triggered (see https://eips.ethereum.org/EIPS/eip-2200).\r\n        _status = RE_NOT_ENTERED;\r\n\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"daoAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"DAOStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"daoAddress\",\"type\":\"address\"}],\"name\":\"DAOUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"goaldAddress\",\"type\":\"address\"}],\"name\":\"GoaldDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimIssuance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getDAOAddressAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDAOCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"daoAddress\",\"type\":\"address\"}],\"name\":\"getDAOStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGoaldCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getGoaldDAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernanceStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestDAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"goaldAddress\",\"type\":\"address\"}],\"name\":\"goaldDeployed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"daoAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"encodedData\",\"type\":\"bytes\"}],\"name\":\"safeCallDAO\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseTokenURI\",\"type\":\"string\"}],\"name\":\"setBaseTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"daoAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"setDAOStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unfreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"daoAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"encodedData\",\"type\":\"bytes\"}],\"name\":\"unsafeCallDAO\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"daoAddress\",\"type\":\"address\"}],\"name\":\"upgradeDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GoaldToken","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b42d28226cc2a3d75fba564d2d9d50af3b39b7ed489e852f1b565890f42f69f0"}]}