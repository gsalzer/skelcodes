{"status":"1","message":"OK","result":[{"SourceCode":"// ███████╗░█████╗░██████╗░██████╗░███████╗██████╗░░░░███████╗██╗\r\n// ╚════██║██╔══██╗██╔══██╗██╔══██╗██╔════╝██╔══██╗░░░██╔════╝██║\r\n// ░░███╔═╝███████║██████╔╝██████╔╝█████╗░░██████╔╝░░░█████╗░░██║\r\n// ██╔══╝░░██╔══██║██╔═══╝░██╔═══╝░██╔══╝░░██╔══██╗░░░██╔══╝░░██║\r\n// ███████╗██║░░██║██║░░░░░██║░░░░░███████╗██║░░██║██╗██║░░░░░██║\r\n// ╚══════╝╚═╝░░╚═╝╚═╝░░░░░╚═╝░░░░░╚══════╝╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝\r\n// Copyright (C) 2020 zapper\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 2 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n\r\n///@author Zapper\r\n///@notice Registry for Curve Pools with Utility functions.\r\n\r\n// File: contracts/oz/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/oz/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/oz/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: contracts/oz/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/oz/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n\r\n\r\n            bytes32 accountHash\r\n         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account)\r\n        internal\r\n        pure\r\n        returns (address payable)\r\n    {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/oz/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(\r\n            value\r\n        );\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeERC20: decreased allowance below zero\"\r\n        );\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Curve/Curve_Registry_V2.sol\r\n\r\npragma solidity ^0.5.7;\r\n\r\ninterface ICurveAddressProvider {\r\n    function get_registry() external view returns (address);\r\n\r\n    function get_address(uint256 _id) external view returns (address);\r\n}\r\n\r\ninterface ICurveRegistry {\r\n    function get_pool_from_lp_token(address lpToken)\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function get_lp_token(address swapAddress) external view returns (address);\r\n\r\n    function get_n_coins(address _pool)\r\n        external\r\n        view\r\n        returns (uint256[2] memory);\r\n\r\n    function get_coins(address _pool) external view returns (address[8] memory);\r\n\r\n    function get_underlying_coins(address _pool)\r\n        external\r\n        view\r\n        returns (address[8] memory);\r\n}\r\n\r\ninterface ICurveFactoryRegistry {\r\n    function get_n_coins(address _pool)\r\n        external\r\n        view\r\n        returns (uint256, uint256);\r\n\r\n    function get_coins(address _pool) external view returns (address[2] memory);\r\n\r\n    function get_underlying_coins(address _pool)\r\n        external\r\n        view\r\n        returns (address[8] memory);\r\n}\r\n\r\ncontract Curve_Registry_V2 is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    ICurveAddressProvider\r\n        private constant CurveAddressProvider = ICurveAddressProvider(\r\n        0x0000000022D53366457F9d5E68Ec105046FC4383\r\n    );\r\n    ICurveRegistry public CurveRegistry;\r\n\r\n    ICurveFactoryRegistry public FactoryRegistry;\r\n\r\n    address\r\n        private constant wbtcToken = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\r\n    address\r\n        private constant sbtcCrvToken = 0x075b1bb99792c9E1041bA13afEf80C91a1e70fB3;\r\n    address\r\n        internal constant ETHAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    mapping(address => bool) public shouldAddUnderlying;\r\n    mapping(address => address) private depositAddresses;\r\n\r\n    constructor() public {\r\n        CurveRegistry = ICurveRegistry(CurveAddressProvider.get_registry());\r\n        FactoryRegistry = ICurveFactoryRegistry(\r\n            CurveAddressProvider.get_address(3)\r\n        );\r\n    }\r\n\r\n    function isCurvePool(address swapAddress) public view returns (bool) {\r\n        if (CurveRegistry.get_lp_token(swapAddress) != address(0)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function isFactoryPool(address swapAddress) public view returns (bool) {\r\n        if (FactoryRegistry.get_coins(swapAddress)[0] != address(0)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n    @notice This function is used to get the curve pool deposit address\r\n    @notice The deposit address is used for pools with wrapped (c, y) tokens\r\n    @param swapAddress Curve swap address for the pool\r\n    @return curve pool deposit address or the swap address not mapped\r\n    */\r\n    function getDepositAddress(address swapAddress)\r\n        external\r\n        view\r\n        returns (address depositAddress)\r\n    {\r\n        depositAddress = depositAddresses[swapAddress];\r\n        if (depositAddress == address(0)) return swapAddress;\r\n    }\r\n\r\n    /**\r\n    @notice This function is used to get the curve pool swap address\r\n    @notice The token and swap address is the same for metapool factory pools\r\n    @param swapAddress Curve swap address for the pool\r\n    @return curve pool swap address or address(0) if pool doesnt exist\r\n    */\r\n    function getSwapAddress(address tokenAddress)\r\n        external\r\n        view\r\n        returns (address swapAddress)\r\n    {\r\n        swapAddress = CurveRegistry.get_pool_from_lp_token(tokenAddress);\r\n        if (swapAddress != address(0)) {\r\n            return swapAddress;\r\n        }\r\n        if (isFactoryPool(swapAddress)) {\r\n            return tokenAddress;\r\n        }\r\n        return address(0);\r\n    }\r\n\r\n    /**\r\n    @notice This function is used to check the curve pool token address\r\n    @notice The token and swap address is the same for metapool factory pools\r\n    @param swapAddress Curve swap address for the pool\r\n    @return curve pool token address or address(0) if pool doesnt exist\r\n    */\r\n    function getTokenAddress(address swapAddress)\r\n        external\r\n        view\r\n        returns (address tokenAddress)\r\n    {\r\n        tokenAddress = CurveRegistry.get_lp_token(swapAddress);\r\n        if (tokenAddress != address(0)) {\r\n            return tokenAddress;\r\n        }\r\n        if (isFactoryPool(swapAddress)) {\r\n            return swapAddress;\r\n        }\r\n        return address(0);\r\n    }\r\n\r\n    /**\r\n    @notice Checks the number of non-underlying tokens in a pool\r\n    @param swapAddress Curve swap address for the pool\r\n    @return number of underlying tokens in the pool\r\n    */\r\n    function getNumTokens(address swapAddress) public view returns (uint256) {\r\n        if (isCurvePool(swapAddress)) {\r\n            return CurveRegistry.get_n_coins(swapAddress)[0];\r\n        } else {\r\n            (uint256 numTokens, ) = FactoryRegistry.get_n_coins(swapAddress);\r\n            return numTokens;\r\n        }\r\n    }\r\n\r\n    /**\r\n    @notice This function is used to check if the curve pool is a metapool\r\n    @notice all factory pools are metapools\r\n    @param swapAddress Curve swap address for the pool\r\n    @return true if the pool is a metapool, false otherwise\r\n    */\r\n    function isMetaPool(address swapAddress) public view returns (bool) {\r\n        if (isCurvePool(swapAddress)) {\r\n            uint256[2] memory poolTokenCounts = CurveRegistry.get_n_coins(\r\n                swapAddress\r\n            );\r\n            if (poolTokenCounts[0] == poolTokenCounts[1]) return false;\r\n            else return true;\r\n        }\r\n        if (isFactoryPool(swapAddress)) return true;\r\n    }\r\n\r\n    /**\r\n    @notice This function returns an array of underlying pool token addresses\r\n    @param swapAddress Curve swap address for the pool\r\n    @return returns 4 element array containing the addresses of the pool tokens (0 address if pool contains < 4 tokens)\r\n    */\r\n    function getPoolTokens(address swapAddress)\r\n        public\r\n        view\r\n        returns (address[4] memory poolTokens)\r\n    {\r\n        if (isMetaPool(swapAddress)) {\r\n            if (isFactoryPool(swapAddress)) {\r\n                address[2] memory poolUnderlyingCoins = FactoryRegistry\r\n                    .get_coins(swapAddress);\r\n                for (uint256 i = 0; i < 2; i++) {\r\n                    poolTokens[i] = poolUnderlyingCoins[i];\r\n                }\r\n            } else {\r\n                address[8] memory poolUnderlyingCoins = CurveRegistry.get_coins(\r\n                    swapAddress\r\n                );\r\n                for (uint256 i = 0; i < 2; i++) {\r\n                    poolTokens[i] = poolUnderlyingCoins[i];\r\n                }\r\n            }\r\n\r\n            return poolTokens;\r\n        } else {\r\n            address[8] memory poolUnderlyingCoins;\r\n            if (isBtcPool(swapAddress) && !isMetaPool(swapAddress)) {\r\n                poolUnderlyingCoins = CurveRegistry.get_coins(swapAddress);\r\n            } else {\r\n                poolUnderlyingCoins = CurveRegistry.get_underlying_coins(\r\n                    swapAddress\r\n                );\r\n            }\r\n            for (uint256 i = 0; i < 4; i++) {\r\n                poolTokens[i] = poolUnderlyingCoins[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    @notice This function checks if the curve pool contains WBTC\r\n    @param swapAddress Curve swap address for the pool\r\n    @return true if the pool contains WBTC, false otherwise\r\n    */\r\n    function isBtcPool(address swapAddress) public view returns (bool) {\r\n        address[8] memory poolTokens = CurveRegistry.get_coins(swapAddress);\r\n        for (uint256 i = 0; i < 4; i++) {\r\n            if (poolTokens[i] == wbtcToken || poolTokens[i] == sbtcCrvToken)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n    @notice This function checks if the curve pool contains ETH\r\n    @param swapAddress Curve swap address for the pool\r\n    @return true if the pool contains ETH, false otherwise\r\n    */\r\n    function isEthPool(address swapAddress) external view returns (bool) {\r\n        address[8] memory poolTokens = CurveRegistry.get_coins(swapAddress);\r\n        for (uint256 i = 0; i < 4; i++) {\r\n            if (poolTokens[i] == ETHAddress) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n    @notice This function is used to check if the pool contains the token\r\n    @param swapAddress Curve swap address for the pool\r\n    @param tokenContractAddress contract address of the token\r\n    @return true if the pool contains the token, false otherwise\r\n    @return index of the token in the pool, 0 if pool does not contain the token\r\n    */\r\n    function isUnderlyingToken(\r\n        address swapAddress,\r\n        address tokenContractAddress\r\n    ) external view returns (bool, uint256) {\r\n        address[4] memory poolTokens = getPoolTokens(swapAddress);\r\n        for (uint256 i = 0; i < 4; i++) {\r\n            if (poolTokens[i] == address(0)) return (false, 0);\r\n            if (poolTokens[i] == tokenContractAddress) return (true, i);\r\n        }\r\n    }\r\n\r\n    /**\r\n    @notice Updates to the latest curve registry from the address provider\r\n    */\r\n    function update_curve_registry() external onlyOwner {\r\n        address new_address = CurveAddressProvider.get_registry();\r\n\r\n        require(address(CurveRegistry) != new_address, \"Already updated\");\r\n\r\n        CurveRegistry = ICurveRegistry(new_address);\r\n    }\r\n\r\n    /**\r\n    @notice Updates to the latest curve registry from the address provider\r\n    */\r\n    function update_factory_registry() external onlyOwner {\r\n        address new_address = CurveAddressProvider.get_address(3);\r\n\r\n        require(address(FactoryRegistry) != new_address, \"Already updated\");\r\n\r\n        FactoryRegistry = ICurveFactoryRegistry(new_address);\r\n    }\r\n\r\n    /**\r\n    @notice Add new pools which use the _use_underlying bool\r\n    @param swapAddresses Curve swap addresses for the pool\r\n    @param addUnderlying True if underlying tokens are always added\r\n    */\r\n    function updateShouldAddUnderlying(\r\n        address[] calldata swapAddresses,\r\n        bool[] calldata addUnderlying\r\n    ) external onlyOwner {\r\n        require(\r\n            swapAddresses.length == addUnderlying.length,\r\n            \"Mismatched arrays\"\r\n        );\r\n        for (uint256 i = 0; i < swapAddresses.length; i++) {\r\n            shouldAddUnderlying[swapAddresses[i]] = addUnderlying[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n    @notice Add new pools which use uamounts for add_liquidity\r\n    @param swapAddresses Curve swap addresses to map from\r\n    @param _depositAddresses Curve deposit addresses to map to\r\n    */\r\n    function updateDepositAddresses(\r\n        address[] calldata swapAddresses,\r\n        address[] calldata _depositAddresses\r\n    ) external onlyOwner {\r\n        require(\r\n            swapAddresses.length == _depositAddresses.length,\r\n            \"Mismatched arrays\"\r\n        );\r\n        for (uint256 i = 0; i < swapAddresses.length; i++) {\r\n            depositAddresses[swapAddresses[i]] = _depositAddresses[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n    //@notice Add new pools which use the _use_underlying bool\r\n    */\r\n    function withdrawTokens(address[] calldata tokens) external onlyOwner {\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            uint256 qty;\r\n\r\n            if (tokens[i] == ETHAddress) {\r\n                qty = address(this).balance;\r\n                Address.sendValue(Address.toPayable(owner()), qty);\r\n            } else {\r\n                qty = IERC20(tokens[i]).balanceOf(address(this));\r\n                IERC20(tokens[i]).safeTransfer(owner(), qty);\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"CurveRegistry\",\"outputs\":[{\"internalType\":\"contract ICurveRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FactoryRegistry\",\"outputs\":[{\"internalType\":\"contract ICurveFactoryRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"}],\"name\":\"getDepositAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"depositAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"}],\"name\":\"getNumTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"}],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"address[4]\",\"name\":\"poolTokens\",\"type\":\"address[4]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getSwapAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"}],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"}],\"name\":\"isBtcPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"}],\"name\":\"isCurvePool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"}],\"name\":\"isEthPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"}],\"name\":\"isFactoryPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"}],\"name\":\"isMetaPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"}],\"name\":\"isUnderlyingToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldAddUnderlying\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"swapAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_depositAddresses\",\"type\":\"address[]\"}],\"name\":\"updateDepositAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"swapAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"addUnderlying\",\"type\":\"bool[]\"}],\"name\":\"updateShouldAddUnderlying\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"update_curve_registry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"update_factory_registry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Curve_Registry_V2","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":"bzzr://395c0c92ecca41e560913094a58364b9605ee4d50ee5a321b7a4e6985a7f3722"}]}