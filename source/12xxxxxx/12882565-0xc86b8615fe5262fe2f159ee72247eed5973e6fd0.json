{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n  abstract contract Manager {\r\n    function last(address) virtual public returns (uint);\r\n    function cdpCan(address, uint, address) virtual public view returns (uint);\r\n    function ilks(uint) virtual public view returns (bytes32);\r\n    function owns(uint) virtual public view returns (address);\r\n    function urns(uint) virtual public view returns (address);\r\n    function vat() virtual public view returns (address);\r\n    function open(bytes32, address) virtual public returns (uint);\r\n    function give(uint, address) virtual public;\r\n    function cdpAllow(uint, address, uint) virtual public;\r\n    function urnAllow(address, uint) virtual public;\r\n    function frob(uint, int, int) virtual public;\r\n    function flux(uint, address, uint) virtual public;\r\n    function move(uint, address, uint) virtual public;\r\n    function exit(address, uint, address, uint) virtual public;\r\n    function quit(uint, address) virtual public;\r\n    function enter(address, uint) virtual public;\r\n    function shift(uint, uint) virtual public;\r\n}  abstract contract Vat {\r\n\r\n    struct Urn {\r\n        uint256 ink;   // Locked Collateral  [wad]\r\n        uint256 art;   // Normalised Debt    [wad]\r\n    }\r\n\r\n    struct Ilk {\r\n        uint256 Art;   // Total Normalised Debt     [wad]\r\n        uint256 rate;  // Accumulated Rates         [ray]\r\n        uint256 spot;  // Price with Safety Margin  [ray]\r\n        uint256 line;  // Debt Ceiling              [rad]\r\n        uint256 dust;  // Urn Debt Floor            [rad]\r\n    }\r\n\r\n    mapping (bytes32 => mapping (address => Urn )) public urns;\r\n    mapping (bytes32 => Ilk)                       public ilks;\r\n    mapping (bytes32 => mapping (address => uint)) public gem;  // [wad]\r\n\r\n    function can(address, address) virtual public view returns (uint);\r\n    function dai(address) virtual public view returns (uint);\r\n    function frob(bytes32, address, address, address, int, int) virtual public;\r\n    function hope(address) virtual public;\r\n    function move(address, address, uint) virtual public;\r\n    function fork(bytes32, address, address, int, int) virtual public;\r\n}  abstract contract PipInterface {\r\n    function read() public virtual returns (bytes32);\r\n}  abstract contract Spotter {\r\n    struct Ilk {\r\n        PipInterface pip;\r\n        uint256 mat;\r\n    }\r\n\r\n    mapping (bytes32 => Ilk) public ilks;\r\n\r\n    uint256 public par;\r\n\r\n}  contract DSMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x / y;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint256 constant WAD = 10**18;\r\n    uint256 constant RAY = 10**27;\r\n\r\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}  interface ERC20 {\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        external\r\n        returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    function decimals() external view returns (uint256 digits);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}  library Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}  library SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}  library SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     */\r\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function _callOptionalReturn(ERC20 token, bytes memory data) private {\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}  contract AdminAuth {\r\n\r\n    using SafeERC20 for ERC20;\r\n\r\n    address public owner;\r\n    address public admin;\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(admin == msg.sender);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = 0xBc841B0dE0b93205e912CFBBd1D0c160A1ec6F00;\r\n        admin = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9;\r\n    }\r\n\r\n    /// @notice Admin is set by owner first time, after that admin is super role and has permission to change owner\r\n    /// @param _admin Address of multisig that becomes admin\r\n    function setAdminByOwner(address _admin) public {\r\n        require(msg.sender == owner);\r\n        require(admin == address(0));\r\n\r\n        admin = _admin;\r\n    }\r\n\r\n    /// @notice Admin is able to set new admin\r\n    /// @param _admin Address of multisig that becomes new admin\r\n    function setAdminByAdmin(address _admin) public {\r\n        require(msg.sender == admin);\r\n\r\n        admin = _admin;\r\n    }\r\n\r\n    /// @notice Admin is able to change owner\r\n    /// @param _owner Address of new owner\r\n    function setOwnerByAdmin(address _owner) public {\r\n        require(msg.sender == admin);\r\n\r\n        owner = _owner;\r\n    }\r\n\r\n    /// @notice Destroy the contract\r\n    function kill() public onlyOwner {\r\n        selfdestruct(payable(owner));\r\n    }\r\n\r\n    /// @notice  withdraw stuck funds\r\n    function withdrawStuckFunds(address _token, uint _amount) public onlyOwner {\r\n        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\r\n            payable(owner).transfer(_amount);\r\n        } else {\r\n            ERC20(_token).safeTransfer(owner, _amount);\r\n        }\r\n    }\r\n}  contract DefisaverLogger {\r\n    event LogEvent(\r\n        address indexed contractAddress,\r\n        address indexed caller,\r\n        string indexed logName,\r\n        bytes data\r\n    );\r\n\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function Log(address _contract, address _caller, string memory _logName, bytes memory _data)\r\n        public\r\n    {\r\n        emit LogEvent(_contract, _caller, _logName, _data);\r\n    }\r\n}  abstract contract GasTokenInterface is ERC20 {\r\n    function free(uint256 value) public virtual returns (bool success);\r\n\r\n    function freeUpTo(uint256 value) public virtual returns (uint256 freed);\r\n\r\n    function freeFrom(address from, uint256 value) public virtual returns (bool success);\r\n\r\n    function freeFromUpTo(address from, uint256 value) public virtual returns (uint256 freed);\r\n}  contract GasBurner {\r\n    // solhint-disable-next-line const-name-snakecase\r\n    GasTokenInterface public constant gasToken = GasTokenInterface(0x0000000000b3F879cb30FE243b4Dfee438691c04);\r\n\r\n    modifier burnGas(uint _amount) {\r\n        if (gasToken.balanceOf(address(this)) >= _amount) {\r\n            gasToken.free(_amount);\r\n        }\r\n\r\n        _;\r\n    }\r\n}  contract BotRegistry is AdminAuth {\r\n\r\n    mapping (address => bool) public botList;\r\n\r\n    constructor() public {\r\n        botList[0x776B4a13093e30B05781F97F6A4565B6aa8BE330] = true;\r\n\r\n        botList[0xAED662abcC4FA3314985E67Ea993CAD064a7F5cF] = true;\r\n        botList[0xa5d330F6619d6bF892A5B87D80272e1607b3e34D] = true;\r\n        botList[0x5feB4DeE5150B589a7f567EA7CADa2759794A90A] = true;\r\n        botList[0x7ca06417c1d6f480d3bB195B80692F95A6B66158] = true;\r\n    }\r\n\r\n    function setBot(address _botAddr, bool _state) public onlyOwner {\r\n        botList[_botAddr] = _state;\r\n    }\r\n\r\n}    \r\n\r\ncontract DFSExchangeData {\r\n\r\n    // first is empty to keep the legacy order in place\r\n    enum ExchangeType { _, OASIS, KYBER, UNISWAP, ZEROX }\r\n\r\n    enum ActionType { SELL, BUY }\r\n\r\n    struct OffchainData {\r\n        address wrapper;\r\n        address exchangeAddr;\r\n        address allowanceTarget;\r\n        uint256 price;\r\n        uint256 protocolFee;\r\n        bytes callData;\r\n    }\r\n\r\n    struct ExchangeData {\r\n        address srcAddr;\r\n        address destAddr;\r\n        uint256 srcAmount;\r\n        uint256 destAmount;\r\n        uint256 minPrice;\r\n        uint256 dfsFeeDivider; // service fee divider\r\n        address user; // user to check special fee\r\n        address wrapper;\r\n        bytes wrapperData;\r\n        OffchainData offchainData;\r\n    }\r\n\r\n    function packExchangeData(ExchangeData memory _exData) public pure returns(bytes memory) {\r\n        return abi.encode(_exData);\r\n    }\r\n\r\n    function unpackExchangeData(bytes memory _data) public pure returns(ExchangeData memory _exData) {\r\n        _exData = abi.decode(_data, (ExchangeData));\r\n    }\r\n}  /// @title Implements enum Method\r\nabstract contract StaticV2 {\r\n\r\n    enum Method { Boost, Repay }\r\n\r\n    struct CdpHolder {\r\n        uint128 minRatio;\r\n        uint128 maxRatio;\r\n        uint128 optimalRatioBoost;\r\n        uint128 optimalRatioRepay;\r\n        address owner;\r\n        uint cdpId;\r\n        bool boostEnabled;\r\n        bool nextPriceEnabled;\r\n    }\r\n\r\n    struct SubPosition {\r\n        uint arrPos;\r\n        bool subscribed;\r\n    }\r\n}    \r\n\r\n\r\n\r\nabstract contract ISubscriptionsV2 is StaticV2 {\r\n\r\n    function getOwner(uint _cdpId) external view virtual returns(address);\r\n    function getSubscribedInfo(uint _cdpId) public view virtual returns(bool, uint128, uint128, uint128, uint128, address, uint coll, uint debt);\r\n    function getCdpHolder(uint _cdpId) public view virtual returns (bool subscribed, CdpHolder memory);\r\n}  abstract contract DSProxyInterface {\r\n\r\n    /// Truffle wont compile if this isn't commented\r\n    // function execute(bytes memory _code, bytes memory _data)\r\n    //     public virtual\r\n    //     payable\r\n    //     returns (address, bytes32);\r\n\r\n    function execute(address _target, bytes memory _data) public virtual payable returns (bytes32);\r\n\r\n    function setCache(address _cacheAddr) public virtual payable returns (bool);\r\n\r\n    function owner() public virtual returns (address);\r\n}  /// @title Implements logic for calling MCDSaverProxy always from same contract\r\ncontract MCDMonitorProxyV2 is AdminAuth {\r\n\r\n    uint public CHANGE_PERIOD;\r\n    uint public MIN_CHANGE_PERIOD = 6 * 1 hours;\r\n    address public monitor;\r\n    address public newMonitor;\r\n    address public lastMonitor;\r\n    uint public changeRequestedTimestamp;\r\n\r\n    event MonitorChangeInitiated(address oldMonitor, address newMonitor);\r\n    event MonitorChangeCanceled();\r\n    event MonitorChangeFinished(address monitor);\r\n    event MonitorChangeReverted(address monitor);\r\n\r\n    modifier onlyMonitor() {\r\n        require (msg.sender == monitor);\r\n        _;\r\n    }\r\n\r\n    constructor(uint _changePeriod) public {\r\n        CHANGE_PERIOD = _changePeriod * 1 hours;\r\n    }\r\n\r\n    /// @notice Only monitor contract is able to call execute on users proxy\r\n    /// @param _owner Address of cdp owner (users DSProxy address)\r\n    /// @param _saverProxy Address of MCDSaverProxy\r\n    /// @param _data Data to send to MCDSaverProxy\r\n    function callExecute(address _owner, address _saverProxy, bytes memory _data) public payable onlyMonitor {\r\n        // execute reverts if calling specific method fails\r\n        DSProxyInterface(_owner).execute{value: msg.value}(_saverProxy, _data);\r\n\r\n        // return if anything left\r\n        if (address(this).balance > 0) {\r\n            msg.sender.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    /// @notice Allowed users are able to set Monitor contract without any waiting period first time\r\n    /// @param _monitor Address of Monitor contract\r\n    function setMonitor(address _monitor) public onlyOwner {\r\n        require(monitor == address(0));\r\n        monitor = _monitor;\r\n    }\r\n\r\n    /// @notice Allowed users are able to start procedure for changing monitor\r\n    /// @dev after CHANGE_PERIOD needs to call confirmNewMonitor to actually make a change\r\n    /// @param _newMonitor address of new monitor\r\n    function changeMonitor(address _newMonitor) public onlyOwner {\r\n        require(changeRequestedTimestamp == 0);\r\n\r\n        changeRequestedTimestamp = now;\r\n        lastMonitor = monitor;\r\n        newMonitor = _newMonitor;\r\n\r\n        emit MonitorChangeInitiated(lastMonitor, newMonitor);\r\n    }\r\n\r\n    /// @notice At any point allowed users are able to cancel monitor change\r\n    function cancelMonitorChange() public onlyOwner {\r\n        require(changeRequestedTimestamp > 0);\r\n\r\n        changeRequestedTimestamp = 0;\r\n        newMonitor = address(0);\r\n\r\n        emit MonitorChangeCanceled();\r\n    }\r\n\r\n    /// @notice Anyone is able to confirm new monitor after CHANGE_PERIOD if process is started\r\n    function confirmNewMonitor() public onlyOwner {\r\n        require((changeRequestedTimestamp + CHANGE_PERIOD) < now);\r\n        require(changeRequestedTimestamp != 0);\r\n        require(newMonitor != address(0));\r\n\r\n        monitor = newMonitor;\r\n        newMonitor = address(0);\r\n        changeRequestedTimestamp = 0;\r\n\r\n        emit MonitorChangeFinished(monitor);\r\n    }\r\n\r\n    /// @notice Its possible to revert monitor to last used monitor\r\n    function revertMonitor() public onlyOwner {\r\n        require(lastMonitor != address(0));\r\n\r\n        monitor = lastMonitor;\r\n\r\n        emit MonitorChangeReverted(monitor);\r\n    }\r\n\r\n    function setChangePeriod(uint _periodInHours) public onlyOwner {\r\n        require(_periodInHours * 1 hours > MIN_CHANGE_PERIOD);\r\n\r\n        CHANGE_PERIOD = _periodInHours * 1 hours;\r\n    }\r\n\r\n}    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Implements logic that allows bots to call Boost and Repay\r\ncontract MCDMonitorV2 is DSMath, AdminAuth, GasBurner, StaticV2 {\r\n\r\n    uint public MAX_GAS_PRICE = 800000000000; // 800 gwei\r\n\r\n    uint public REPAY_GAS_COST = 1000000;\r\n    uint public BOOST_GAS_COST = 1000000;\r\n\r\n    bytes4 public REPAY_SELECTOR = 0xf360ce20;\r\n    bytes4 public BOOST_SELECTOR = 0x8ec2ae25;\r\n\r\n    MCDMonitorProxyV2 public monitorProxyContract;\r\n    ISubscriptionsV2 public subscriptionsContract;\r\n    address public mcdSaverTakerAddress;\r\n\r\n    address public constant BOT_REGISTRY_ADDRESS = 0x637726f8b08a7ABE3aE3aCaB01A80E2d8ddeF77B;\r\n\r\n    address public constant PROXY_PERMISSION_ADDR = 0x5a4f877CA808Cca3cB7c2A194F80Ab8588FAE26B;\r\n\r\n    Manager public manager = Manager(0x5ef30b9986345249bc32d8928B7ee64DE9435E39);\r\n    Vat public vat = Vat(0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B);\r\n    Spotter public spotter = Spotter(0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3);\r\n\r\n    DefisaverLogger public constant logger = DefisaverLogger(0x5c55B921f590a89C1Ebe84dF170E655a82b62126);\r\n\r\n    modifier onlyApproved() {\r\n        require(BotRegistry(BOT_REGISTRY_ADDRESS).botList(msg.sender), \"Not auth bot\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _monitorProxy, address _subscriptions, address _mcdSaverTakerAddress) public {\r\n        monitorProxyContract = MCDMonitorProxyV2(_monitorProxy);\r\n        subscriptionsContract = ISubscriptionsV2(_subscriptions);\r\n        mcdSaverTakerAddress = _mcdSaverTakerAddress;\r\n    }\r\n\r\n    /// @notice Bots call this method to repay for user when conditions are met\r\n    /// @dev If the contract ownes gas token it will try and use it for gas price reduction\r\n    function repayFor(\r\n        DFSExchangeData.ExchangeData memory _exchangeData,\r\n        uint _cdpId,\r\n        uint _nextPrice,\r\n        address _joinAddr\r\n    ) public payable onlyApproved {\r\n\r\n        (bool isAllowed, uint ratioBefore) = canCall(Method.Repay, _cdpId, _nextPrice);\r\n        require(isAllowed);\r\n\r\n        uint gasCost = calcGasCost(REPAY_GAS_COST);\r\n\r\n        address owner = subscriptionsContract.getOwner(_cdpId);\r\n\r\n        monitorProxyContract.callExecute{value: msg.value}(\r\n            owner,\r\n            mcdSaverTakerAddress,\r\n            abi.encodeWithSelector(REPAY_SELECTOR, _exchangeData, _cdpId, gasCost, _joinAddr, 0));\r\n\r\n\r\n        (bool isGoodRatio, uint ratioAfter) = ratioGoodAfter(Method.Repay, _cdpId, _nextPrice);\r\n        require(isGoodRatio);\r\n\r\n        returnEth();\r\n\r\n        logger.Log(address(this), owner, \"AutomaticMCDRepay\", abi.encode(ratioBefore, ratioAfter));\r\n    }\r\n\r\n    /// @notice Bots call this method to boost for user when conditions are met\r\n    /// @dev If the contract ownes gas token it will try and use it for gas price reduction\r\n    function boostFor(\r\n        DFSExchangeData.ExchangeData memory _exchangeData,\r\n        uint _cdpId,\r\n        uint _nextPrice,\r\n        address _joinAddr\r\n    ) public payable onlyApproved {\r\n\r\n        (bool isAllowed, uint ratioBefore) = canCall(Method.Boost, _cdpId, _nextPrice);\r\n        require(isAllowed);\r\n\r\n        uint gasCost = calcGasCost(BOOST_GAS_COST);\r\n\r\n        address owner = subscriptionsContract.getOwner(_cdpId);\r\n\r\n        monitorProxyContract.callExecute{value: msg.value}(\r\n            owner,\r\n            mcdSaverTakerAddress,\r\n            abi.encodeWithSelector(BOOST_SELECTOR, _exchangeData, _cdpId, gasCost, _joinAddr, 0));\r\n\r\n        (bool isGoodRatio, uint ratioAfter) = ratioGoodAfter(Method.Boost, _cdpId, _nextPrice);\r\n        require(isGoodRatio);\r\n\r\n        returnEth();\r\n\r\n        logger.Log(address(this), owner, \"AutomaticMCDBoost\", abi.encode(ratioBefore, ratioAfter));\r\n    }\r\n\r\n/******************* INTERNAL METHODS ********************************/\r\n    function returnEth() internal {\r\n        // return if some eth left\r\n        if (address(this).balance > 0) {\r\n            msg.sender.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n/******************* STATIC METHODS ********************************/\r\n\r\n    /// @notice Returns an address that owns the CDP\r\n    /// @param _cdpId Id of the CDP\r\n    function getOwner(uint _cdpId) public view returns(address) {\r\n        return manager.owns(_cdpId);\r\n    }\r\n\r\n    /// @notice Gets CDP info (collateral, debt)\r\n    /// @param _cdpId Id of the CDP\r\n    /// @param _ilk Ilk of the CDP\r\n    function getCdpInfo(uint _cdpId, bytes32 _ilk) public view returns (uint, uint) {\r\n        address urn = manager.urns(_cdpId);\r\n\r\n        (uint collateral, uint debt) = vat.urns(_ilk, urn);\r\n        (,uint rate,,,) = vat.ilks(_ilk);\r\n\r\n        return (collateral, rmul(debt, rate));\r\n    }\r\n\r\n    /// @notice Gets a price of the asset\r\n    /// @param _ilk Ilk of the CDP\r\n    function getPrice(bytes32 _ilk) public view returns (uint) {\r\n        (, uint mat) = spotter.ilks(_ilk);\r\n        (,,uint spot,,) = vat.ilks(_ilk);\r\n\r\n        return rmul(rmul(spot, spotter.par()), mat);\r\n    }\r\n\r\n    /// @notice Gets CDP ratio\r\n    /// @param _cdpId Id of the CDP\r\n    /// @param _nextPrice Next price for user\r\n    function getRatio(uint _cdpId, uint _nextPrice) public view returns (uint) {\r\n        bytes32 ilk = manager.ilks(_cdpId);\r\n        uint price = (_nextPrice == 0) ? getPrice(ilk) : _nextPrice;\r\n\r\n        (uint collateral, uint debt) = getCdpInfo(_cdpId, ilk);\r\n\r\n        if (debt == 0) return 0;\r\n\r\n        return rdiv(wmul(collateral, price), debt) / (10 ** 18);\r\n    }\r\n\r\n    /// @notice Checks if Boost/Repay could be triggered for the CDP\r\n    /// @dev Called by MCDMonitor to enforce the min/max check\r\n    function canCall(Method _method, uint _cdpId, uint _nextPrice) public view returns(bool, uint) {\r\n        bool subscribed;\r\n        CdpHolder memory holder;\r\n        (subscribed, holder) = subscriptionsContract.getCdpHolder(_cdpId);\r\n\r\n        // check if cdp is subscribed\r\n        if (!subscribed) return (false, 0);\r\n\r\n        // check if using next price is allowed\r\n        if (_nextPrice > 0 && !holder.nextPriceEnabled) return (false, 0);\r\n\r\n        // check if boost and boost allowed\r\n        if (_method == Method.Boost && !holder.boostEnabled) return (false, 0);\r\n\r\n        // check if owner is still owner\r\n        if (getOwner(_cdpId) != holder.owner) return (false, 0);\r\n\r\n        uint currRatio = getRatio(_cdpId, _nextPrice);\r\n\r\n        if (_method == Method.Repay) {\r\n            return (currRatio < holder.minRatio, currRatio);\r\n        } else if (_method == Method.Boost) {\r\n            return (currRatio > holder.maxRatio, currRatio);\r\n        }\r\n    }\r\n\r\n    /// @dev After the Boost/Repay check if the ratio doesn't trigger another call\r\n    function ratioGoodAfter(Method _method, uint _cdpId, uint _nextPrice) public view returns(bool, uint) {\r\n        CdpHolder memory holder;\r\n\r\n        (, holder) = subscriptionsContract.getCdpHolder(_cdpId);\r\n\r\n        uint currRatio = getRatio(_cdpId, _nextPrice);\r\n\r\n        if (_method == Method.Repay) {\r\n            return (currRatio < holder.maxRatio, currRatio);\r\n        } else if (_method == Method.Boost) {\r\n            return (currRatio > holder.minRatio, currRatio);\r\n        }\r\n    }\r\n\r\n    /// @notice Calculates gas cost (in Eth) of tx\r\n    /// @dev Gas price is limited to MAX_GAS_PRICE to prevent attack of draining user CDP\r\n    /// @param _gasAmount Amount of gas used for the tx\r\n    function calcGasCost(uint _gasAmount) public view returns (uint) {\r\n        uint gasPrice = tx.gasprice <= MAX_GAS_PRICE ? tx.gasprice : MAX_GAS_PRICE;\r\n\r\n        return mul(gasPrice, _gasAmount);\r\n    }\r\n\r\n/******************* OWNER ONLY OPERATIONS ********************************/\r\n\r\n    /// @notice Allows owner to change gas cost for boost operation, but only up to 3 millions\r\n    /// @param _gasCost New gas cost for boost method\r\n    function changeBoostGasCost(uint _gasCost) public onlyOwner {\r\n        require(_gasCost < 3000000);\r\n\r\n        BOOST_GAS_COST = _gasCost;\r\n    }\r\n\r\n    /// @notice Allows owner to change gas cost for repay operation, but only up to 3 millions\r\n    /// @param _gasCost New gas cost for repay method\r\n    function changeRepayGasCost(uint _gasCost) public onlyOwner {\r\n        require(_gasCost < 3000000);\r\n\r\n        REPAY_GAS_COST = _gasCost;\r\n    }\r\n\r\n    /// @notice Allows owner to change max gas price\r\n    /// @param _maxGasPrice New max gas price\r\n    function changeMaxGasPrice(uint _maxGasPrice) public onlyOwner {\r\n        require(_maxGasPrice < 1000000000000);\r\n\r\n        MAX_GAS_PRICE = _maxGasPrice;\r\n    }\r\n\r\n  \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_monitorProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_subscriptions\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mcdSaverTakerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BOOST_GAS_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOOST_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOT_REGISTRY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_GAS_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_PERMISSION_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REPAY_GAS_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REPAY_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"srcAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dfsFeeDivider\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"wrapperData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct DFSExchangeData.OffchainData\",\"name\":\"offchainData\",\"type\":\"tuple\"}],\"internalType\":\"struct DFSExchangeData.ExchangeData\",\"name\":\"_exchangeData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_cdpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_joinAddr\",\"type\":\"address\"}],\"name\":\"boostFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasAmount\",\"type\":\"uint256\"}],\"name\":\"calcGasCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum StaticV2.Method\",\"name\":\"_method\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_cdpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"name\":\"canCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasCost\",\"type\":\"uint256\"}],\"name\":\"changeBoostGasCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxGasPrice\",\"type\":\"uint256\"}],\"name\":\"changeMaxGasPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasCost\",\"type\":\"uint256\"}],\"name\":\"changeRepayGasCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasToken\",\"outputs\":[{\"internalType\":\"contract GasTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cdpId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_ilk\",\"type\":\"bytes32\"}],\"name\":\"getCdpInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cdpId\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ilk\",\"type\":\"bytes32\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cdpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"name\":\"getRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logger\",\"outputs\":[{\"internalType\":\"contract DefisaverLogger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"contract Manager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mcdSaverTakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"monitorProxyContract\",\"outputs\":[{\"internalType\":\"contract MCDMonitorProxyV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum StaticV2.Method\",\"name\":\"_method\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_cdpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"name\":\"ratioGoodAfter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"srcAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dfsFeeDivider\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"wrapperData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct DFSExchangeData.OffchainData\",\"name\":\"offchainData\",\"type\":\"tuple\"}],\"internalType\":\"struct DFSExchangeData.ExchangeData\",\"name\":\"_exchangeData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_cdpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_joinAddr\",\"type\":\"address\"}],\"name\":\"repayFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdminByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdminByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwnerByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spotter\",\"outputs\":[{\"internalType\":\"contract Spotter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionsContract\",\"outputs\":[{\"internalType\":\"contract ISubscriptionsV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"contract Vat\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MCDMonitorV2","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001816a86c4da59395522a42b871bf11a4e96a1c7a000000000000000000000000c45d4f6b6bf41b6edaa58b01c4298b8d9078269a0000000000000000000000005dc041f94c81f2479cc8b1e4c77e23790918147e","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://af753411b6bd5acf8861527a9a7721d381d1d8f76242305d1b18457e9cfc290a"}]}