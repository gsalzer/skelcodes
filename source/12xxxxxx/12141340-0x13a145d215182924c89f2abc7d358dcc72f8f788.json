{"status":"1","message":"OK","result":[{"SourceCode":"/**\nUniLend Finance FlashLoan Contract\n*/\n\npragma solidity 0.6.2;\n\n\n// SPDX-License-Identifier: MIT\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// SPDX-License-Identifier: MIT\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// SPDX-License-Identifier: MIT\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// SPDX-License-Identifier: MIT\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// SPDX-License-Identifier: MIT\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n\n// SPDX-License-Identifier: MIT\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// SPDX-License-Identifier: MIT\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\ncontract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n/**\n* @title IFlashLoanReceiver interface\n* @notice Interface for the Unilend fee IFlashLoanReceiver.\n* @dev implement this interface to develop a flashloan-compatible flashLoanReceiver contract\n**/\ninterface IFlashLoanReceiver {\n    function executeOperation(address _reserve, uint256 _amount, uint256 _fee, bytes calldata _params) external;\n}\n\nlibrary EthAddressLib {\n\n    /**\n    * @dev returns the address used within the protocol to identify ETH\n    * @return the address assigned to ETH\n     */\n    function ethAddress() internal pure returns(address) {\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    }\n}\n\ncontract UnilendFDonation {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    \n    uint public defaultReleaseRate;\n    bool public disableSetCore;\n    mapping(address => uint) public releaseRate;\n    mapping(address => uint) public lastReleased;\n    address public core;\n    \n    constructor() public {\n        core = msg.sender;\n        defaultReleaseRate = 11574074074075; // ~1% / day\n    }\n    \n    \n    modifier onlyCore {\n        require(\n            core == msg.sender,\n            \"Not Permitted\"\n        );\n        _;\n    }\n    \n    \n    event NewDonation(address indexed donator, uint amount);\n    event Released(address indexed to, uint amount);\n    event ReleaseRate(address indexed token, uint rate);\n    \n    \n    \n    function balanceOfToken(address _token) external view returns(uint) {\n        return IERC20(_token).balanceOf(address(this));\n    }\n    \n    function getReleaseRate(address _token) public view returns (uint) {\n        if(releaseRate[_token] > 0){\n            return releaseRate[_token];\n        } \n        else {\n            return defaultReleaseRate;\n        }\n    }\n    \n    function getCurrentRelease(address _token, uint timestamp) public view returns (uint availRelease){\n        uint tokenBalance = IERC20(_token).balanceOf( address(this) );\n        \n        uint remainingRate = ( timestamp.sub( lastReleased[_token] ) ).mul( getReleaseRate(_token) );\n        uint maxRate = 100 * 10**18;\n        \n        if(remainingRate > maxRate){ remainingRate = maxRate; }\n        availRelease = ( tokenBalance.mul( remainingRate )).div(10**20);\n    }\n    \n    \n    function donate(address _token, uint amount) external returns(bool) {\n        require(amount > 0, \"Amount can't be zero\");\n        releaseTokens(_token);\n        \n        IERC20(_token).safeTransferFrom(msg.sender, address(this), amount);\n        \n        emit NewDonation(msg.sender, amount);\n        \n        return true;\n    }\n    \n    function disableSetNewCore() external onlyCore {\n        require(!disableSetCore, \"Already disabled\");\n        disableSetCore = true;\n    }\n    \n    function setCoreAddress(address _newAddress) external onlyCore {\n        require(!disableSetCore, \"SetCoreAddress disabled\");\n        core = _newAddress;\n    }\n    \n    function setReleaseRate(address _token, uint _newRate) external onlyCore {\n        releaseTokens(_token);\n        \n        releaseRate[_token] = _newRate;\n        \n        emit ReleaseRate(_token, _newRate);\n    }\n    \n    function releaseTokens(address _token) public {\n        uint tokenBalance = IERC20(_token).balanceOf( address(this) );\n        \n        if(tokenBalance > 0){\n            uint remainingRate = ( block.timestamp.sub( lastReleased[_token] ) ).mul( getReleaseRate(_token) );\n            uint maxRate = 100 * 10**18;\n            \n            lastReleased[_token] = block.timestamp;\n            \n            if(remainingRate > maxRate){ remainingRate = maxRate; }\n            uint totalReleased = ( tokenBalance.mul( remainingRate )).div(10**20);\n            \n            if(totalReleased > 0){\n                IERC20(_token).safeTransfer(core, totalReleased);\n                \n                emit Released(core, totalReleased);\n            }\n        } \n        else {\n            lastReleased[_token] = block.timestamp;\n        }\n    }\n}\n\n// SPDX-License-Identifier: MIT\nlibrary Math {\n    function min(uint x, uint y) internal pure returns (uint z) {\n        z = x < y ? x : y;\n    }\n\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function sqrt(uint y) internal pure returns (uint z) {\n        if (y > 3) {\n            z = y;\n            uint x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}\n\ncontract UFlashLoanPool is ERC20 {\n    using SafeMath for uint256;\n    \n    address public token;\n    address payable public core;\n    \n    \n    constructor(\n        address _token,\n        string memory _name,\n        string memory _symbol\n    ) ERC20(_name, _symbol) public {\n        token = _token;\n        \n        core = payable(msg.sender);\n    }\n    \n    modifier onlyCore {\n        require(\n            core == msg.sender,\n            \"Not Permitted\"\n        );\n        _;\n    }\n    \n    \n    \n    function calculateShare(uint _totalShares, uint _totalAmount, uint _amount) internal pure returns (uint){\n        if(_totalShares == 0){\n            return Math.sqrt(_amount.mul( _amount ));\n        } else {\n            return (_amount).mul( _totalShares ).div( _totalAmount );\n        }\n    }\n    \n    function getShareValue(uint _totalAmount, uint _totalSupply, uint _amount) internal pure returns (uint){\n        return ( _amount.mul(_totalAmount) ).div( _totalSupply );\n    }\n    \n    function getShareByValue(uint _totalAmount, uint _totalSupply, uint _valueAmount) internal pure returns (uint){\n        return ( _valueAmount.mul(_totalSupply) ).div( _totalAmount );\n    }\n    \n    \n    function deposit(address _recipient, uint amount) external onlyCore returns(uint) {\n        uint _totalSupply = totalSupply();\n        \n        uint tokenBalance;\n        if(EthAddressLib.ethAddress() == token){\n            tokenBalance = address(core).balance;\n        } \n        else {\n            tokenBalance = IERC20(token).balanceOf(core);\n        }\n        \n        uint ntokens = calculateShare(_totalSupply, tokenBalance.sub(amount), amount);\n        \n        require(ntokens > 0, 'Insufficient Liquidity Minted');\n        \n        // MINT uTokens\n        _mint(_recipient, ntokens);\n        \n        return ntokens;\n    }\n    \n    \n    function redeem(address _recipient, uint tok_amount) external onlyCore returns(uint) {\n        require(tok_amount > 0, 'Insufficient Liquidity Burned');\n        require(balanceOf(_recipient) >= tok_amount, \"Balance Exceeds Requested\");\n        \n        uint tokenBalance;\n        if(EthAddressLib.ethAddress() == token){\n            tokenBalance = address(core).balance;\n        } \n        else {\n            tokenBalance = IERC20(token).balanceOf(core);\n        }\n        \n        uint poolAmount = getShareValue(tokenBalance, totalSupply(), tok_amount);\n        \n        require(tokenBalance >= poolAmount, \"Not enough Liquidity\");\n        \n        // BURN uTokens\n        _burn(_recipient, tok_amount);\n        \n        return poolAmount;\n    }\n    \n    \n    function redeemUnderlying(address _recipient, uint amount) external onlyCore returns(uint) {\n        uint tokenBalance;\n        if(EthAddressLib.ethAddress() == token){\n            tokenBalance = address(core).balance;\n        } \n        else {\n            tokenBalance = IERC20(token).balanceOf(core);\n        }\n        \n        uint tok_amount = getShareByValue(tokenBalance, totalSupply(), amount);\n        \n        require(tok_amount > 0, 'Insufficient Liquidity Burned');\n        require(balanceOf(_recipient) >= tok_amount, \"Balance Exceeds Requested\");\n        require(tokenBalance >= amount, \"Not enough Liquidity\");\n        \n        // BURN uTokens\n        _burn(_recipient, tok_amount);\n        \n        return tok_amount;\n    }\n    \n    \n    function balanceOfUnderlying(address _address, uint timestamp) public view returns (uint _bal) {\n        uint _balance = balanceOf(_address);\n        \n        if(_balance > 0){\n            uint tokenBalance;\n            if(EthAddressLib.ethAddress() == token){\n                tokenBalance = address(core).balance;\n            } \n            else {\n                tokenBalance = IERC20(token).balanceOf(core);\n            }\n            \n            address donationAddress = UnilendFlashLoanCore( core ).donationAddress();\n            uint _balanceDonation = UnilendFDonation( donationAddress ).getCurrentRelease(token, timestamp);\n            uint _totalPoolAmount = tokenBalance.add(_balanceDonation);\n            \n            _bal = getShareValue(_totalPoolAmount, totalSupply(), _balance);\n        } \n    }\n    \n    \n    function poolBalanceOfUnderlying(uint timestamp) public view returns (uint _bal) {\n        uint tokenBalance;\n        if(EthAddressLib.ethAddress() == token){\n            tokenBalance = address(core).balance;\n        } \n        else {\n            tokenBalance = IERC20(token).balanceOf(core);\n        }\n        \n        if(tokenBalance > 0){\n            address donationAddress = UnilendFlashLoanCore( core ).donationAddress();\n            uint _balanceDonation = UnilendFDonation( donationAddress ).getCurrentRelease(token, timestamp);\n            uint _totalPoolAmount = tokenBalance.add(_balanceDonation);\n            \n            _bal = _totalPoolAmount;\n        } \n    }\n}\n\ncontract UnilendFlashLoanCore is Context, ReentrancyGuard {\n    using SafeMath for uint256;\n    using SafeERC20 for ERC20;\n    \n    address public admin;\n    address payable public distributorAddress;\n    address public donationAddress;\n    \n    mapping(address => address) public Pools;\n    mapping(address => address) public Assets;\n    uint public poolLength;\n    \n    \n    uint256 private FLASHLOAN_FEE_TOTAL = 5;\n    uint256 private FLASHLOAN_FEE_PROTOCOL = 3000;\n    \n    \n    constructor() public {\n        admin = msg.sender;\n    }\n    \n    \n    /**\n    * @dev emitted when a flashloan is executed\n    * @param _target the address of the flashLoanReceiver\n    * @param _reserve the address of the reserve\n    * @param _amount the amount requested\n    * @param _totalFee the total fee on the amount\n    * @param _protocolFee the part of the fee for the protocol\n    * @param _timestamp the timestamp of the action\n    **/\n    event FlashLoan(\n        address indexed _target,\n        address indexed _reserve,\n        uint256 _amount,\n        uint256 _totalFee,\n        uint256 _protocolFee,\n        uint256 _timestamp\n    );\n    \n    event PoolCreated(address indexed token, address pool, uint);\n    \n    /**\n    * @dev emitted during a redeem action.\n    * @param _reserve the address of the reserve\n    * @param _user the address of the user\n    * @param _amount the amount to be deposited\n    * @param _timestamp the timestamp of the action\n    **/\n    event RedeemUnderlying(\n        address indexed _reserve,\n        address indexed _user,\n        uint256 _amount,\n        uint256 _timestamp\n    );\n    \n    /**\n    * @dev emitted on deposit\n    * @param _reserve the address of the reserve\n    * @param _user the address of the user\n    * @param _amount the amount to be deposited\n    * @param _timestamp the timestamp of the action\n    **/\n    event Deposit(\n        address indexed _reserve,\n        address indexed _user,\n        uint256 _amount,\n        uint256 _timestamp\n    );\n    \n    /**\n    * @dev only lending pools configurator can use functions affected by this modifier\n    **/\n    modifier onlyAdmin {\n        require(\n            admin == msg.sender,\n            \"The caller must be a admin\"\n        );\n        _;\n    }\n    \n    /**\n    * @dev functions affected by this modifier can only be invoked if the provided _amount input parameter\n    * is not zero.\n    * @param _amount the amount provided\n    **/\n    modifier onlyAmountGreaterThanZero(uint256 _amount) {\n        require(_amount > 0, \"Amount must be greater than 0\");\n        _;\n    }\n    \n    receive() payable external {}\n    \n    /**\n    * @dev returns the fee applied to a flashloan and the portion to redirect to the protocol, in basis points.\n    **/\n    function getFlashLoanFeesInBips() public view returns (uint256, uint256) {\n        return (FLASHLOAN_FEE_TOTAL, FLASHLOAN_FEE_PROTOCOL);\n    }\n    \n    /**\n    * @dev gets the bulk uToken contract address for the reserves\n    * @param _reserves the array of reserve address\n    * @return the address of the uToken contract\n    **/\n    function getPools(address[] calldata _reserves) external view returns (address[] memory) {\n        address[] memory _addresss = new address[](_reserves.length);\n        address[] memory _reserves_ = _reserves;\n        \n        for (uint i=0; i<_reserves_.length; i++) {\n            _addresss[i] = Pools[_reserves_[i]];\n        }\n        \n        return _addresss;\n    }\n    \n    \n    /**\n    * @dev balance of underlying asset for user address\n    * @param _reserve reserve address\n    * @param _address user address\n    * @param timestamp timestamp of query\n    **/\n    function balanceOfUnderlying(address _reserve, address _address, uint timestamp) public view returns (uint _bal) {\n        if(Pools[_reserve] != address(0)){\n            _bal = UFlashLoanPool(Pools[_reserve]).balanceOfUnderlying(_address, timestamp);\n        }\n    }\n    \n    /**\n    * @dev balance of underlying asset for pool\n    * @param _reserve reserve address\n    * @param timestamp timestamp of query\n    **/\n    function poolBalanceOfUnderlying(address _reserve, uint timestamp) public view returns (uint _bal) {\n        if(Pools[_reserve] != address(0)){\n            _bal = UFlashLoanPool(Pools[_reserve]).poolBalanceOfUnderlying(timestamp);\n        }\n    }\n    \n    \n    /**\n    * @dev set new admin for contract.\n    * @param _admin the address of new admin\n    **/\n    function setAdmin(address _admin) external onlyAdmin {\n        require(_admin != address(0), \"UnilendV1: ZERO ADDRESS\");\n        admin = _admin;\n    }\n    \n    /**\n    * @dev set new distributor address.\n    * @param _address new address\n    **/\n    function setDistributorAddress(address payable _address) external onlyAdmin {\n        require(_address != address(0), \"UnilendV1: ZERO ADDRESS\");\n        distributorAddress = _address;\n    }\n    \n    /**\n    * @dev disable changing donation pool donation address.\n    **/\n    function setDonationDisableNewCore() external onlyAdmin {\n        UnilendFDonation(donationAddress).disableSetNewCore();\n    }\n    \n    /**\n    * @dev set new core address for donation pool.\n    * @param _newAddress new address\n    **/\n    function setDonationCoreAddress(address _newAddress) external onlyAdmin {\n        require(_newAddress != address(0), \"UnilendV1: ZERO ADDRESS\");\n        UnilendFDonation(donationAddress).setCoreAddress(_newAddress);\n    }\n    \n    /**\n    * @dev set new release rate from donation pool for token\n    * @param _reserve reserve address\n    * @param _newRate new rate of release\n    **/\n    function setDonationReleaseRate(address _reserve, uint _newRate) external onlyAdmin {\n        require(_reserve != address(0), \"UnilendV1: ZERO ADDRESS\");\n        UnilendFDonation(donationAddress).setReleaseRate(_reserve, _newRate);\n    }\n    \n    /**\n    * @dev set new flash loan fees.\n    * @param _newFeeTotal total fee\n    * @param _newFeeProtocol protocol fee\n    **/\n    function setFlashLoanFeesInBips(uint _newFeeTotal, uint _newFeeProtocol) external onlyAdmin returns (bool) {\n        require(_newFeeTotal > 0 && _newFeeTotal < 10000, \"UnilendV1: INVALID TOTAL FEE RANGE\");\n        require(_newFeeProtocol > 0 && _newFeeProtocol < 10000, \"UnilendV1: INVALID PROTOCOL FEE RANGE\");\n        \n        FLASHLOAN_FEE_TOTAL = _newFeeTotal;\n        FLASHLOAN_FEE_PROTOCOL = _newFeeProtocol;\n        \n        return true;\n    }\n    \n\n    /**\n    * @dev transfers to the user a specific amount from the reserve.\n    * @param _reserve the address of the reserve where the transfer is happening\n    * @param _user the address of the user receiving the transfer\n    * @param _amount the amount being transferred\n    **/\n    function transferToUser(address _reserve, address payable _user, uint256 _amount) internal {\n        require(_user != address(0), \"UnilendV1: USER ZERO ADDRESS\");\n        \n        if (_reserve != EthAddressLib.ethAddress()) {\n            ERC20(_reserve).safeTransfer(_user, _amount);\n        } else {\n            //solium-disable-next-line\n            (bool result, ) = _user.call{value: _amount, gas: 50000}(\"\");\n            require(result, \"Transfer of ETH failed\");\n        }\n    }\n    \n    /**\n    * @dev transfers to the protocol fees of a flashloan to the fees collection address\n    * @param _token the address of the token being transferred\n    * @param _amount the amount being transferred\n    **/\n    function transferFlashLoanProtocolFeeInternal(address _token, uint256 _amount) internal {\n        if (_token != EthAddressLib.ethAddress()) {\n            ERC20(_token).safeTransfer(distributorAddress, _amount);\n        } else {\n            (bool result, ) = distributorAddress.call{value: _amount, gas: 50000}(\"\");\n            require(result, \"Transfer of ETH failed\");\n        }\n    }\n    \n    \n    /**\n    * @dev allows smartcontracts to access the liquidity of the pool within one transaction,\n    * as long as the amount taken plus a fee is returned. NOTE There are security concerns for developers of flashloan receiver contracts\n    * that must be kept into consideration.\n    * @param _receiver The address of the contract receiving the funds. The receiver should implement the IFlashLoanReceiver interface.\n    * @param _reserve the address of the principal reserve\n    * @param _amount the amount requested for this flashloan\n    **/\n    function flashLoan(address _receiver, address _reserve, uint256 _amount, bytes calldata _params)\n        external\n        nonReentrant\n        onlyAmountGreaterThanZero(_amount)\n    {\n        //check that the reserve has enough available liquidity\n        uint256 availableLiquidityBefore = _reserve == EthAddressLib.ethAddress()\n            ? address(this).balance\n            : IERC20(_reserve).balanceOf(address(this));\n\n        require(\n            availableLiquidityBefore >= _amount,\n            \"There is not enough liquidity available to borrow\"\n        );\n\n        (uint256 totalFeeBips, uint256 protocolFeeBips) = getFlashLoanFeesInBips();\n        //calculate amount fee\n        uint256 amountFee = _amount.mul(totalFeeBips).div(10000);\n\n        //protocol fee is the part of the amountFee reserved for the protocol - the rest goes to depositors\n        uint256 protocolFee = amountFee.mul(protocolFeeBips).div(10000);\n        require(\n            amountFee > 0 && protocolFee > 0,\n            \"The requested amount is too small for a flashLoan.\"\n        );\n\n        //get the FlashLoanReceiver instance\n        IFlashLoanReceiver receiver = IFlashLoanReceiver(_receiver);\n\n        //transfer funds to the receiver\n        transferToUser(_reserve, payable(_receiver), _amount);\n\n        //execute action of the receiver\n        receiver.executeOperation(_reserve, _amount, amountFee, _params);\n\n        //check that the actual balance of the core contract includes the returned amount\n        uint256 availableLiquidityAfter = _reserve == EthAddressLib.ethAddress()\n            ? address(this).balance\n            : IERC20(_reserve).balanceOf(address(this));\n\n        require(\n            availableLiquidityAfter == availableLiquidityBefore.add(amountFee),\n            \"The actual balance of the protocol is inconsistent\"\n        );\n        \n        transferFlashLoanProtocolFeeInternal(_reserve, protocolFee);\n\n        //solium-disable-next-line\n        emit FlashLoan(_receiver, _reserve, _amount, amountFee, protocolFee, block.timestamp);\n    }\n    \n    \n    \n    \n    \n    /**\n    * @dev deposits The underlying asset into the reserve. A corresponding amount of the overlying asset (uTokens) is minted.\n    * @param _reserve the address of the reserve\n    * @param _amount the amount to be deposited\n    **/\n    function deposit(address _reserve, uint _amount) external \n        payable\n        nonReentrant\n        onlyAmountGreaterThanZero(_amount)\n    returns(uint mintedTokens) {\n        require(Pools[_reserve] != address(0), 'UnilendV1: POOL NOT FOUND');\n        \n        UnilendFDonation(donationAddress).releaseTokens(_reserve);\n        \n        address _user = msg.sender;\n        \n        if (_reserve != EthAddressLib.ethAddress()) {\n            require(msg.value == 0, \"User is sending ETH along with the ERC20 transfer.\");\n            \n            uint reserveBalance = IERC20(_reserve).balanceOf(address(this));\n            \n            ERC20(_reserve).safeTransferFrom(_user, address(this), _amount);\n            \n            _amount = ( IERC20(_reserve).balanceOf(address(this)) ).sub(reserveBalance);\n        } else {\n            require(msg.value >= _amount, \"The amount and the value sent to deposit do not match\");\n\n            if (msg.value > _amount) {\n                //send back excess ETH\n                uint256 excessAmount = msg.value.sub(_amount);\n                \n                (bool result, ) = _user.call{value: excessAmount, gas: 50000}(\"\");\n                require(result, \"Transfer of ETH failed\");\n            }\n        }\n        \n        mintedTokens = UFlashLoanPool(Pools[_reserve]).deposit(msg.sender, _amount);\n        \n        emit Deposit(_reserve, msg.sender, _amount, block.timestamp);\n    }\n    \n    \n    /**\n    * @dev Redeems the uTokens for underlying assets.\n    * @param _reserve the address of the reserve\n    * @param _amount the amount uTokens to be redeemed\n    **/\n    function redeem(address _reserve, uint _amount) external returns(uint redeemTokens) {\n        require(Pools[_reserve] != address(0), 'UnilendV1: POOL NOT FOUND');\n        \n        UnilendFDonation(donationAddress).releaseTokens(_reserve);\n        \n        redeemTokens = UFlashLoanPool(Pools[_reserve]).redeem(msg.sender, _amount);\n        \n        //transfer funds to the user\n        transferToUser(_reserve, payable(msg.sender), redeemTokens);\n        \n        emit RedeemUnderlying(_reserve, msg.sender, redeemTokens, block.timestamp);\n    }\n    \n    /**\n    * @dev Redeems the underlying amount of assets.\n    * @param _reserve the address of the reserve\n    * @param _amount the underlying amount to be redeemed\n    **/\n    function redeemUnderlying(address _reserve, uint _amount) external returns(uint token_amount) {\n        require(Pools[_reserve] != address(0), 'UnilendV1: POOL NOT FOUND');\n        \n        UnilendFDonation(donationAddress).releaseTokens(_reserve);\n        \n        token_amount = UFlashLoanPool(Pools[_reserve]).redeemUnderlying(msg.sender, _amount);\n        \n        //transfer funds to the user\n        transferToUser(_reserve, payable(msg.sender), _amount);\n        \n        emit RedeemUnderlying(_reserve, msg.sender, _amount, block.timestamp);\n    }\n    \n    \n    \n    /**\n    * @dev Creates pool for asset.\n    * This function is executed by the overlying uToken contract in response to a redeem action.\n    * @param _reserve the address of the reserve\n    **/\n    function createPool(address _reserve) public returns (address) {\n        require(Pools[_reserve] == address(0), 'UnilendV1: POOL ALREADY CREATED');\n        \n        ERC20 asset = ERC20(_reserve);\n        \n        string memory uTokenName;\n        string memory uTokenSymbol;\n        \n        if(_reserve == EthAddressLib.ethAddress()){\n            uTokenName = string(abi.encodePacked(\"UnilendV1 - ETH\"));\n            uTokenSymbol = string(abi.encodePacked(\"uETH\"));\n        } \n        else {\n            uTokenName = string(abi.encodePacked(\"UnilendV1 - \", asset.name()));\n            uTokenSymbol = string(abi.encodePacked(\"u\", asset.symbol()));\n        }\n        \n        UFlashLoanPool _poolMeta = new UFlashLoanPool(_reserve, uTokenName, uTokenSymbol);\n        \n        address _poolAddress = address(_poolMeta);\n        \n        Pools[_reserve] = _poolAddress;\n        Assets[_poolAddress] = _reserve;\n        \n        poolLength++;\n        \n        emit PoolCreated(_reserve, _poolAddress, poolLength);\n        \n        return _poolAddress;\n    }\n    \n    /**\n    * @dev Creates donation contract (one-time).\n    **/\n    function createDonationContract() external returns (address) {\n        require(donationAddress == address(0), 'UnilendV1: DONATION ADDRESS ALREADY CREATED');\n        \n        UnilendFDonation _donationMeta = new UnilendFDonation();\n        donationAddress = address(_donationMeta);\n        \n        return donationAddress;\n    }\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"FlashLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"RedeemUnderlying\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Assets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_bal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createDonationContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintedTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFlashLoanFeesInBips\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_reserves\",\"type\":\"address[]\"}],\"name\":\"getPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"poolBalanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_bal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeemUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"token_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setDistributorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setDonationCoreAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setDonationDisableNewCore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"setDonationReleaseRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFeeTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newFeeProtocol\",\"type\":\"uint256\"}],\"name\":\"setFlashLoanFeesInBips\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"UnilendFlashLoanCore","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}