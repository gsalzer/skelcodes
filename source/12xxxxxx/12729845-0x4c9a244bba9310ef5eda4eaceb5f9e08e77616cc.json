{"status":"1","message":"OK","result":[{"SourceCode":"{\"CamTVToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.4.24;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./ERC20Detailed.sol\\\";\\r\\n\\r\\ncontract CAMToken is ERC20, ERC20Detailed {\\r\\n    constructor(uint256 initialSupply) ERC20Detailed(\\\"CAM Token\\\", \\\"CAM\\\", 0) public {\\r\\n        _mint(msg.sender, initialSupply);\\r\\n        _initManagers(msg.sender);\\r\\n    }\\r\\n}\"},\"ERC20.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\r\\n * of returning `false` on failure. This behavior is nonetheless conventional\\r\\n * and does not conflict with the expectations of ERC20 applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn\\u0027t required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is IERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowed;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n  \\r\\n    address[] public addresses;\\r\\n  \\r\\n    mapping (address =\\u003e bool) public whitelisted;\\r\\n  \\r\\n    mapping(address =\\u003e bool) public managers;\\r\\n    address[] managersArray;\\r\\n\\r\\n    /**\\r\\n    * @dev Total number of tokens in existence\\r\\n    */\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n  \\r\\n    function addManager(address newManagerAddress) public restricted{\\r\\n        require(!managers[newManagerAddress]);\\r\\n        \\r\\n        managers[newManagerAddress] = true;\\r\\n        managersArray.push(newManagerAddress);\\r\\n    }\\r\\n    \\r\\n    function deleteManager(address managerAddress) public restricted{\\r\\n        require(managers[managerAddress]);\\r\\n        require(managersArray.length \\u003e 1);\\r\\n        \\r\\n        delete managers[managerAddress];\\r\\n        \\r\\n        //remove from array\\r\\n        for(uint i = 0; i \\u003c managersArray.length; i++)\\r\\n        {\\r\\n            if(managersArray[i] == managerAddress)\\r\\n            {\\r\\n                delete managersArray[i];\\r\\n                //managersArray.length--;\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function viewManagers() public view returns (address[] memory){\\r\\n        return managersArray;\\r\\n    }\\r\\n    \\r\\n    function getAddressLength() public view returns(uint256) {\\r\\n        return addresses.length;\\r\\n    }\\r\\n    \\r\\n    function getWhitelistedAddressStatusFromIndex(uint256 index) public view returns(bool){\\r\\n        return whitelisted[addresses[index]];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Gets the balance of the specified address.\\r\\n    * @param owner The address to query the the balance of.\\r\\n    * @return An uint256 representing the amount owned by the passed address.\\r\\n    */\\r\\n    function balanceOf(address owner) public view returns (uint256) {\\r\\n        return _balances[owner];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\\r\\n    * @param owner address The address which owns the funds.\\r\\n    * @param spender address The address which will spend the funds.\\r\\n    * @return A uint256 specifying the amount of tokens still available for the spender.\\r\\n    */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    )\\r\\n    public\\r\\n    view\\r\\n    returns (uint256)\\r\\n    {\\r\\n        return _allowed[owner][spender];\\r\\n    }\\r\\n  \\r\\n    function assign(address to, uint256 value) restricted {\\r\\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\\r\\n        _balances[to] = _balances[to].add(value);\\r\\n    }\\r\\n  \\r\\n\\r\\n    /**\\r\\n    * @dev Transfer token for a specified address\\r\\n    * @param to The address to transfer to.\\r\\n    * @param value The amount to be transferred.\\r\\n    */\\r\\n    function transfer(address to, uint256 value) public returns (bool) {\\r\\n        if(!managers[msg.sender]) {\\r\\n            if(now \\u003c 1672531260)\\r\\n                revert(\\\"You cannot move your tokens until 01/01/2023!\\\");\\r\\n            require(whitelisted[to], \\\"ERC20: address not in whitelist\\\");\\r\\n        }\\r\\n    \\r\\n        require(value \\u003c= _balances[msg.sender]);\\r\\n        require(to != address(0));\\r\\n\\r\\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\\r\\n        _balances[to] = _balances[to].add(value);\\r\\n        emit Transfer(msg.sender, to, value);\\r\\n        return true;\\r\\n    }\\r\\n  \\r\\n    function addWhitelistAddress(address newWhitelistedAddress) public restricted {\\r\\n        whitelisted[newWhitelistedAddress] = true;\\r\\n        // whitelistAmount = whitelistAmount + 1;\\r\\n        addresses.push(newWhitelistedAddress);\\r\\n    }\\r\\n\\r\\n    function addWhitelistAddresses(address[] memory newWhitelistedAddresses) public restricted {\\r\\n        for(uint48 i=0; i \\u003c newWhitelistedAddresses.length; i++) {\\r\\n            whitelisted[newWhitelistedAddresses[i]] = true;\\r\\n            addresses.push(newWhitelistedAddresses[i]);\\r\\n        }\\r\\n    }\\r\\n \\r\\n    function removeWhitelistedAddress(address addressToRemove) public restricted {\\r\\n        require(whitelisted[addressToRemove]);\\r\\n        whitelisted[addressToRemove] = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\r\\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\\r\\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\r\\n    * race condition is to first reduce the spender\\u0027s allowance to 0 and set the desired value afterwards:\\r\\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n    * @param spender The address which will spend the funds.\\r\\n    * @param value The amount of tokens to be spent.\\r\\n    */\\r\\n    function approve(address spender, uint256 value) public returns (bool) {\\r\\n        require(spender != address(0));\\r\\n\\r\\n        _allowed[msg.sender][spender] = value;\\r\\n        emit Approval(msg.sender, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Transfer tokens from one address to another\\r\\n    * @param from address The address which you want to send tokens from\\r\\n    * @param to address The address which you want to transfer to\\r\\n    * @param value uint256 the amount of tokens to be transferred\\r\\n    */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    )\\r\\n    public\\r\\n    returns (bool)\\r\\n    {\\r\\n        if(!managers[msg.sender]) {\\r\\n            if(now \\u003c 1672531260)\\r\\n                revert(\\\"You cannot move your tokens until 01/01/2023!\\\");\\r\\n            require(whitelisted[to], \\\"ERC20: address not in whitelist\\\");\\r\\n        }\\r\\n        \\r\\n        require(value \\u003c= _balances[from]);\\r\\n        require(value \\u003c= _allowed[from][msg.sender]);\\r\\n        require(to != address(0));\\r\\n\\r\\n        _balances[from] = _balances[from].sub(value);\\r\\n        _balances[to] = _balances[to].add(value);\\r\\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\r\\n        emit Transfer(from, to, value);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n    /**\\r\\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\\r\\n    * approve should be called when allowed_[_spender] == 0. To increment\\r\\n    * allowed value is better to use this function to avoid 2 calls (and wait until\\r\\n    * the first transaction is mined)\\r\\n    * From MonolithDAO Token.sol\\r\\n    * @param spender The address which will spend the funds.\\r\\n    * @param addedValue The amount of tokens to increase the allowance by.\\r\\n    */\\r\\n    function increaseAllowance(\\r\\n        address spender,\\r\\n        uint256 addedValue\\r\\n    )\\r\\n    public\\r\\n    returns (bool)\\r\\n    {\\r\\n        require(spender != address(0));\\r\\n\\r\\n        _allowed[msg.sender][spender] = (\\r\\n        _allowed[msg.sender][spender].add(addedValue));\\r\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\\r\\n    * approve should be called when allowed_[_spender] == 0. To decrement\\r\\n    * allowed value is better to use this function to avoid 2 calls (and wait until\\r\\n    * the first transaction is mined)\\r\\n    * From MonolithDAO Token.sol\\r\\n    * @param spender The address which will spend the funds.\\r\\n    * @param subtractedValue The amount of tokens to decrease the allowance by.\\r\\n    */\\r\\n    function decreaseAllowance(\\r\\n        address spender,\\r\\n        uint256 subtractedValue\\r\\n    )\\r\\n    public\\r\\n    returns (bool)\\r\\n    {\\r\\n        require(spender != address(0));\\r\\n        _allowed[msg.sender][spender] = (\\r\\n        _allowed[msg.sender][spender].sub(subtractedValue));\\r\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Internal function that mints an amount of the token and assigns it to\\r\\n    * an account. This encapsulates the modification of balances such that the\\r\\n    * proper events are emitted.\\r\\n    * @param account The account that will receive the created tokens.\\r\\n    * @param amount The amount that will be created.\\r\\n    */\\r\\n    function _mint(address account, uint256 amount) internal {\\r\\n        require(account != 0);\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n  \\r\\n    function _initManagers(address firstAdmin) internal {\\r\\n        managers[firstAdmin] = true;\\r\\n        managersArray.push(firstAdmin);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Function that burns an amount of the token of a given\\r\\n    * account.\\r\\n    * @param amount The amount that will be burnt.\\r\\n    */\\r\\n    function burn(uint256 amount) public restricted {\\r\\n        address account = managersArray[0];\\r\\n        \\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n    /**\\r\\n    * @dev Internal function that burns an amount of the token of a given\\r\\n    * account, deducting from the sender\\u0027s allowance for said account. Uses the\\r\\n    * internal burn function.\\r\\n    * @param account The account whose tokens will be burnt.\\r\\n    * @param amount The amount that will be burnt.\\r\\n    */\\r\\n    function _burnFrom(address account, uint256 amount) internal {\\r\\n        require(amount \\u003c= _allowed[account][msg.sender]);\\r\\n\\r\\n        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\\r\\n        // this function needs to emit an event with the updated approval.\\r\\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\\r\\n        burn(amount);\\r\\n    }\\r\\n  \\r\\n    modifier restricted() {\\r\\n        require(managers[msg.sender], \\\"ERC20: Manager not found\\\");\\r\\n        _;\\r\\n    }\\r\\n}\"},\"ERC20Detailed.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @title ERC20Detailed token\\r\\n * @dev The decimals are only for visualization purposes.\\r\\n * All the operations are done using the smallest and indivisible token unit,\\r\\n * just as on Ethereum all the operations are done in wei.\\r\\n */\\r\\ncontract ERC20Detailed is IERC20 {\\r\\n  string private _name;\\r\\n  string private _symbol;\\r\\n  uint8 private _decimals;\\r\\n\\r\\n  constructor(string memory name, string memory symbol, uint8 decimals) public {\\r\\n    _name = name;\\r\\n    _symbol = symbol;\\r\\n    _decimals = decimals;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @return the name of the token.\\r\\n   */\\r\\n  function name() public view returns(string memory) {\\r\\n    return _name;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @return the symbol of the token.\\r\\n   */\\r\\n  function symbol() public view returns(string memory) {\\r\\n    return _symbol;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @return the number of decimals of the token.\\r\\n   */\\r\\n  function decimals() public view returns(uint8) {\\r\\n    return _decimals;\\r\\n  }\\r\\n}\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  function balanceOf(address who) external view returns (uint256);\\r\\n\\r\\n  function allowance(address owner, address spender)\\r\\n    external view returns (uint256);\\r\\n\\r\\n  function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n  function approve(address spender, uint256 value)\\r\\n    external returns (bool);\\r\\n\\r\\n  function transferFrom(address from, address to, uint256 value)\\r\\n    external returns (bool);\\r\\n\\r\\n  event Transfer(\\r\\n    address indexed from,\\r\\n    address indexed to,\\r\\n    uint256 value\\r\\n  );\\r\\n\\r\\n  event Approval(\\r\\n    address indexed owner,\\r\\n    address indexed spender,\\r\\n    uint256 value\\r\\n  );\\r\\n}\"},\"Migrations.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\n\\r\\ncontract Migrations {\\r\\n  address public owner;\\r\\n  uint public last_completed_migration;\\r\\n\\r\\n  constructor() public {\\r\\n    owner = msg.sender;\\r\\n  }\\r\\n\\r\\n  modifier restricted() {\\r\\n    if (msg.sender == owner) _;\\r\\n  }\\r\\n\\r\\n  function setCompleted(uint completed) public restricted {\\r\\n    last_completed_migration = completed;\\r\\n  }\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWhitelistedAddresses\",\"type\":\"address[]\"}],\"name\":\"addWhitelistAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newManagerAddress\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddressLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addressToRemove\",\"type\":\"address\"}],\"name\":\"removeWhitelistedAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getWhitelistedAddressStatusFromIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWhitelistedAddress\",\"type\":\"address\"}],\"name\":\"addWhitelistAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"managerAddress\",\"type\":\"address\"}],\"name\":\"deleteManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"assign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewManagers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"managers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CAMToken","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000002160ec0","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"bzzr://c050769094401bdd6144a7d92b07a55880a1b4a3d51a9920cae167d29894dd65"}]}