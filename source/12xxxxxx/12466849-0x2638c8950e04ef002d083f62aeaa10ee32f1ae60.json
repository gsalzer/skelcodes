{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-07-26\r\n*/\r\n\r\npragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface ManagerLike {\r\n    function ilks(uint) external view returns (bytes32);\r\n    function owns(uint) external view returns (address);\r\n    function urns(uint) external view returns (address);\r\n    function vat() external view returns (address);\r\n}\r\n\r\ninterface CdpsLike {\r\n    function getCdpsAsc(address, address) external view returns (uint[] memory, address[] memory, bytes32[] memory);\r\n}\r\n\r\ninterface VatLike {\r\n    function ilks(bytes32) external view returns (uint, uint, uint, uint, uint);\r\n    function dai(address) external view returns (uint);\r\n    function urns(bytes32, address) external view returns (uint, uint);\r\n    function gem(bytes32, address) external view returns (uint);\r\n}\r\n\r\ninterface JugLike {\r\n    function ilks(bytes32) external view returns (uint, uint);\r\n    function base() external view returns (uint);\r\n}\r\n\r\ninterface PotLike {\r\n    function dsr() external view returns (uint);\r\n    function pie(address) external view returns (uint);\r\n    function chi() external view returns (uint);\r\n}\r\n\r\ninterface SpotLike {\r\n    function ilks(bytes32) external view returns (PipLike, uint);\r\n}\r\n\r\ninterface PipLike {\r\n    function peek() external view returns (bytes32, bool);\r\n}\r\n\r\ninterface InstaMcdAddress {\r\n    function manager() external view returns (address);\r\n    function vat() external view returns (address);\r\n    function jug() external view returns (address);\r\n    function spot() external view returns (address);\r\n    function pot() external view returns (address);\r\n    function getCdps() external view returns (address);\r\n}\r\n\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        z = x - y <= x ? x - y : 0;\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Helpers is DSMath {\r\n    /**\r\n     * @dev get MakerDAO MCD Address contract\r\n     */\r\n    function getMcdAddresses() public pure returns (address) {\r\n        return 0xF23196DF1C440345DE07feFbe556a5eF0dcD29F0;\r\n    }\r\n\r\n    struct VaultData {\r\n        uint id;\r\n        bytes32 colType;\r\n        uint collateral;\r\n        uint art;\r\n        address owner;\r\n    }\r\n\r\n    struct VaultIds {\r\n        address owner;\r\n        uint[] id;\r\n    }\r\n\r\n    struct ColInfo {\r\n        uint price;\r\n        uint rate;\r\n        bytes32 ilk;\r\n    }\r\n\r\n    /**\r\n     * @dev Convert String to bytes32.\r\n    */\r\n    function stringToBytes32(string memory str) internal pure returns (bytes32 result) {\r\n        require(bytes(str).length != 0, \"String-Empty\");\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            result := mload(add(str, 32))\r\n        }\r\n    }\r\n\r\n    function getColPrice(bytes32 ilk) internal view returns (uint price, uint rate) {\r\n        address spot = InstaMcdAddress(getMcdAddresses()).spot();\r\n        address vat = InstaMcdAddress(getMcdAddresses()).vat();\r\n        (, uint mat) = SpotLike(spot).ilks(ilk);\r\n        (,uint _rate,uint spotPrice,,) = VatLike(vat).ilks(ilk);\r\n        rate = _rate;\r\n        price = rmul(mat, spotPrice);\r\n    }\r\n}\r\n\r\n\r\ncontract VaultResolver is Helpers {\r\n    function getVaultByIds(uint[] calldata ids) external view returns (VaultData[] memory) {\r\n        address manager = InstaMcdAddress(getMcdAddresses()).manager();\r\n        VatLike vat = VatLike(ManagerLike(manager).vat());\r\n        uint len = ids.length;\r\n        VaultData[] memory vaults = new VaultData[](len);\r\n        for (uint i = 0; i < len; i++) {\r\n            address urn = ManagerLike(manager).urns(ids[i]);\r\n            bytes32 ilk = ManagerLike(manager).ilks(ids[i]);\r\n            (uint ink, uint art) = vat.urns(ilk, urn);\r\n            vaults[i] = VaultData(\r\n                ids[i],\r\n                ilk,\r\n                ink,\r\n                art,\r\n                ManagerLike(manager).owns(ids[i])\r\n            );\r\n        }\r\n        return vaults;\r\n    }\r\n\r\n\r\n    function getIds(address[] calldata owners) external view returns (VaultIds[] memory) {\r\n        address manager = InstaMcdAddress(getMcdAddresses()).manager();\r\n        address cdpManger = InstaMcdAddress(getMcdAddresses()).getCdps();\r\n        uint len = owners.length;\r\n        VaultIds[] memory vaultIds = new VaultIds[](len);\r\n        for (uint i = 0; i < len; i++) {\r\n            (uint[] memory ids,,) = CdpsLike(cdpManger).getCdpsAsc(manager, owners[i]);\r\n            vaultIds[i] = VaultIds(\r\n                owners[i],\r\n                ids\r\n            );\r\n        }\r\n        return vaultIds;\r\n    }\r\n\r\n    function getColInfo(string[] memory name) public view returns (ColInfo[] memory) {\r\n        ColInfo[] memory colInfo = new ColInfo[](name.length);\r\n\r\n        for (uint i = 0; i < name.length; i++) {\r\n            bytes32 ilk = stringToBytes32(name[i]);\r\n            (uint price, uint rate) = getColPrice(ilk);\r\n            colInfo[i] = ColInfo(\r\n                price,\r\n                rate,\r\n                ilk\r\n            );\r\n        }\r\n        return colInfo;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"name\",\"type\":\"string[]\"}],\"name\":\"getColInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"}],\"internalType\":\"struct Helpers.ColInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"}],\"name\":\"getIds\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"id\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Helpers.VaultIds[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMcdAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"getVaultByIds\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"colType\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"art\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct Helpers.VaultData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"VaultResolver","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cd5c2f7f8278dbe0d1bdd497bc4a15d0715a0962960441cda3641887bf89da62"}]}