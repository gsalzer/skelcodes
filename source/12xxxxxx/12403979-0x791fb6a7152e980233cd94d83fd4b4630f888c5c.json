{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/poolMaster/PoolMaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport {IERC20Ext} from '@kyber.network/utils-sc/contracts/IERC20Ext.sol';\\nimport {ERC20, ERC20Burnable} from '@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport {ReentrancyGuard} from '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\\nimport {\\n  PermissionAdmin,\\n  PermissionOperators\\n} from '@kyber.network/utils-sc/contracts/PermissionOperators.sol';\\nimport {IKyberStaking} from '../interfaces/staking/IKyberStaking.sol';\\nimport {IRewardsDistributor} from '../interfaces/rewardDistribution/IRewardsDistributor.sol';\\nimport {IKyberGovernance} from '../interfaces/governance/IKyberGovernance.sol';\\n\\ninterface INewKNC {\\n  function mintWithOldKnc(uint256 amount) external;\\n\\n  function oldKNC() external view returns (address);\\n}\\n\\ninterface IKyberNetworkProxy {\\n  function swapEtherToToken(IERC20Ext token, uint256 minConversionRate)\\n    external\\n    payable\\n    returns (uint256 destAmount);\\n\\n  function swapTokenToToken(\\n    IERC20Ext src,\\n    uint256 srcAmount,\\n    IERC20Ext dest,\\n    uint256 minConversionRate\\n  ) external returns (uint256 destAmount);\\n}\\n\\ncontract PoolMaster is PermissionAdmin, PermissionOperators, ReentrancyGuard, ERC20Burnable {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20Ext;\\n  struct Fees {\\n    uint256 mintFeeBps;\\n    uint256 claimFeeBps;\\n    uint256 burnFeeBps;\\n  }\\n  event FeesSet(uint256 mintFeeBps, uint256 burnFeeBps, uint256 claimFeeBps);\\n  enum FeeTypes {MINT, CLAIM, BURN}\\n  IERC20Ext internal constant ETH_ADDRESS = IERC20Ext(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n  uint256 internal constant PRECISION = (10**18);\\n  uint256 internal constant BPS = 10000;\\n  uint256 internal constant MAX_FEE_BPS = 1000; // 10%\\n  uint256 internal constant INITIAL_SUPPLY_MULTIPLIER = 10;\\n  Fees public adminFees;\\n  uint256 public withdrawableAdminFees;\\n  IKyberNetworkProxy public kyberProxy;\\n  IKyberStaking public immutable kyberStaking;\\n  IRewardsDistributor public rewardsDistributor;\\n  IKyberGovernance public kyberGovernance;\\n  IERC20Ext public immutable newKnc;\\n  IERC20Ext private immutable oldKnc;\\n\\n  receive() external payable {}\\n\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    IKyberNetworkProxy _kyberProxy,\\n    IKyberStaking _kyberStaking,\\n    IKyberGovernance _kyberGovernance,\\n    IRewardsDistributor _rewardsDistributor,\\n    uint256 _mintFeeBps,\\n    uint256 _claimFeeBps,\\n    uint256 _burnFeeBps\\n  ) ERC20(_name, _symbol) PermissionAdmin(msg.sender) {\\n    kyberProxy = _kyberProxy;\\n    kyberStaking = _kyberStaking;\\n    kyberGovernance = _kyberGovernance;\\n    rewardsDistributor = _rewardsDistributor;\\n    address _newKnc = address(_kyberStaking.kncToken());\\n    newKnc = IERC20Ext(_newKnc);\\n    IERC20Ext _oldKnc = IERC20Ext(INewKNC(_newKnc).oldKNC());\\n    oldKnc = _oldKnc;\\n    _oldKnc.safeApprove(_newKnc, type(uint256).max);\\n    IERC20Ext(_newKnc).safeApprove(address(_kyberStaking), type(uint256).max);\\n    _changeFees(_mintFeeBps, _claimFeeBps, _burnFeeBps);\\n  }\\n\\n  function changeKyberProxy(IKyberNetworkProxy _kyberProxy) external onlyAdmin {\\n    kyberProxy = _kyberProxy;\\n  }\\n\\n  function changeRewardsDistributor(IRewardsDistributor _rewardsDistributor) external onlyAdmin {\\n    rewardsDistributor = _rewardsDistributor;\\n  }\\n\\n  function changeGovernance(IKyberGovernance _kyberGovernance) external onlyAdmin {\\n    kyberGovernance = _kyberGovernance;\\n  }\\n\\n  function changeFees(\\n    uint256 _mintFeeBps,\\n    uint256 _claimFeeBps,\\n    uint256 _burnFeeBps\\n  ) external onlyAdmin {\\n    _changeFees(_mintFeeBps, _claimFeeBps, _burnFeeBps);\\n  }\\n\\n  function depositWithOldKnc(uint256 tokenWei) external {\\n    oldKnc.safeTransferFrom(msg.sender, address(this), tokenWei);\\n    INewKNC(address(newKnc)).mintWithOldKnc(tokenWei);\\n    _deposit(tokenWei, msg.sender);\\n  }\\n\\n  function depositWithNewKnc(uint256 tokenWei) external {\\n    newKnc.safeTransferFrom(msg.sender, address(this), tokenWei);\\n    _deposit(tokenWei, msg.sender);\\n  }\\n\\n  /*\\n   * @notice Called by users burning their token\\n   * @dev Calculates pro rata KNC and redeems from staking contract\\n   * @param tokensToRedeem\\n   */\\n  function withdraw(uint256 tokensToRedeemTwei) external nonReentrant {\\n    require(balanceOf(msg.sender) >= tokensToRedeemTwei, 'insufficient balance');\\n    uint256 proRataKnc = getLatestStake().mul(tokensToRedeemTwei).div(totalSupply());\\n    _unstake(proRataKnc);\\n    proRataKnc = _administerAdminFee(FeeTypes.BURN, proRataKnc);\\n    super._burn(msg.sender, tokensToRedeemTwei);\\n    newKnc.safeTransfer(msg.sender, proRataKnc);\\n  }\\n\\n  /*\\n   * @notice Vote on KyberDAO campaigns\\n   * @dev Admin calls with relevant params for each campaign in an epoch\\n   * @param proposalIds: DAO proposalIds\\n   * @param optionBitMasks: corresponding voting options\\n   */\\n  function vote(uint256[] calldata proposalIds, uint256[] calldata optionBitMasks)\\n    external\\n    onlyOperator\\n  {\\n    require(proposalIds.length == optionBitMasks.length, 'invalid length');\\n    for (uint256 i = 0; i < proposalIds.length; i++) {\\n      kyberGovernance.submitVote(proposalIds[i], optionBitMasks[i]);\\n    }\\n  }\\n\\n  /*\\n   * @notice Claim accumulated reward thus far\\n   * @notice Will apply admin fee to KNC token.\\n   * Admin fee for other tokens applied after liquidation to KNC\\n   * @dev Admin or operator calls with relevant params\\n   * @param cycle - sourced from Kyber API\\n   * @param index - sourced from Kyber API\\n   * @param tokens - ERC20 fee tokens\\n   * @param merkleProof - sourced from Kyber API\\n   */\\n  function claimReward(\\n    uint256 cycle,\\n    uint256 index,\\n    IERC20Ext[] calldata tokens,\\n    uint256[] calldata cumulativeAmounts,\\n    bytes32[] calldata merkleProof\\n  ) external onlyOperator {\\n    rewardsDistributor.claim(cycle, index, address(this), tokens, cumulativeAmounts, merkleProof);\\n    uint256 availableKnc = _administerAdminFee(FeeTypes.CLAIM, getAvailableNewKncBalanceTwei());\\n    _stake(availableKnc);\\n  }\\n\\n  /*\\n   * @notice Will liquidate ETH or ERC20 tokens to KNC\\n   * @notice Will apply admin fee after liquidations\\n   * @notice Token allowance should have been given to proxy for liquidation\\n   * @dev Admin or operator calls with relevant params\\n   * @param tokens - ETH / ERC20 tokens to be liquidated to KNC\\n   * @param minRates - kyberProxy.getExpectedRate(eth/token => knc)\\n   */\\n  function liquidateTokensToKnc(IERC20Ext[] calldata tokens, uint256[] calldata minRates)\\n    external\\n    onlyOperator\\n  {\\n    require(tokens.length == minRates.length, 'unequal lengths');\\n    for (uint256 i = 0; i < tokens.length; i++) {\\n      if (tokens[i] == ETH_ADDRESS) {\\n        // leave 1 wei for gas optimizations\\n        kyberProxy.swapEtherToToken{value: address(this).balance.sub(1)}(newKnc, minRates[i]);\\n      } else if (tokens[i] != newKnc) {\\n        // token allowance should have been given\\n        // leave 1 twei for gas optimizations\\n        kyberProxy.swapTokenToToken(\\n          tokens[i],\\n          tokens[i].balanceOf(address(this)).sub(1),\\n          newKnc,\\n          minRates[i]\\n        );\\n      }\\n    }\\n    uint256 availableKnc = _administerAdminFee(FeeTypes.CLAIM, getAvailableNewKncBalanceTwei());\\n    _stake(availableKnc);\\n  }\\n\\n  /*\\n   * @notice Called by admin on deployment for KNC\\n   * @dev Approves Kyber Proxy contract to trade KNC\\n   * @param Token to approve on proxy contract\\n   * @param Pass _giveAllowance as true to give max allowance, otherwise resets to zero\\n   */\\n  function approveKyberProxyContract(IERC20Ext token, bool giveAllowance) external onlyOperator {\\n    require(token != newKnc, 'knc not allowed');\\n    uint256 amount = giveAllowance ? type(uint256).max : 0;\\n    token.safeApprove(address(kyberProxy), amount);\\n  }\\n\\n  function withdrawAdminFee() external onlyOperator {\\n    uint256 fee = withdrawableAdminFees.sub(1);\\n    withdrawableAdminFees = 1;\\n    newKnc.safeTransfer(admin, fee);\\n  }\\n\\n  function stakeAdminFee() external onlyOperator {\\n    uint256 fee = withdrawableAdminFees.sub(1);\\n    withdrawableAdminFees = 1;\\n    _deposit(fee, admin);\\n  }\\n\\n  /*\\n   * @notice Returns KNC balance staked to the DAO\\n   */\\n  function getLatestStake() public view returns (uint256 latestStake) {\\n    (latestStake, , ) = kyberStaking.getLatestStakerData(address(this));\\n  }\\n\\n  /*\\n   * @notice Returns KNC balance available to stake\\n   */\\n  function getAvailableNewKncBalanceTwei() public view returns (uint256) {\\n    return newKnc.balanceOf(address(this)).sub(withdrawableAdminFees);\\n  }\\n\\n  /*\\n   * @notice Returns fee (in basis points) depending on fee type\\n   */\\n  function getFeeRate(FeeTypes _type) public view returns (uint256) {\\n    if (_type == FeeTypes.MINT) return adminFees.mintFeeBps;\\n    else if (_type == FeeTypes.CLAIM) return adminFees.claimFeeBps;\\n    return adminFees.burnFeeBps;\\n  }\\n\\n  /*\\n   * @notice For APY calculation, returns rate of 1 pool master token to KNC\\n   */\\n  function getProRataKnc() public view returns (uint256) {\\n    if (totalSupply() == 0) return 0;\\n    return getLatestStake().mul(PRECISION).div(totalSupply());\\n  }\\n\\n  function _changeFees(\\n    uint256 _mintFeeBps,\\n    uint256 _claimFeeBps,\\n    uint256 _burnFeeBps\\n  ) internal {\\n    require(_mintFeeBps <= MAX_FEE_BPS, 'bad mint bps');\\n    require(_claimFeeBps <= MAX_FEE_BPS, 'bad claim bps');\\n    require(_burnFeeBps >= 10 && _burnFeeBps <= MAX_FEE_BPS, 'bad burn bps');\\n    adminFees = Fees({\\n      mintFeeBps: _mintFeeBps,\\n      claimFeeBps: _claimFeeBps,\\n      burnFeeBps: _burnFeeBps\\n    });\\n    emit FeesSet(_mintFeeBps, _claimFeeBps, _burnFeeBps);\\n  }\\n\\n  /*\\n   * @notice returns the amount after fee deduction\\n   */\\n  function _administerAdminFee(FeeTypes _feeType, uint256 rewardAmount)\\n    internal\\n    returns (uint256)\\n  {\\n    uint256 adminFeeToDeduct = rewardAmount.mul(getFeeRate(_feeType)).div(BPS);\\n    withdrawableAdminFees = withdrawableAdminFees.add(adminFeeToDeduct);\\n    return rewardAmount.sub(adminFeeToDeduct);\\n  }\\n\\n  /*\\n   * @notice Calculate and stake new KNC to staking contract\\n   * then mints appropriate amount to user\\n   */\\n  function _deposit(uint256 tokenWei, address user) internal {\\n    uint256 balanceBefore = getLatestStake();\\n    if (user != admin) _administerAdminFee(FeeTypes.MINT, tokenWei);\\n    uint256 depositAmount = getAvailableNewKncBalanceTwei();\\n    _stake(depositAmount);\\n    uint256 mintAmount = _calculateMintAmount(balanceBefore, depositAmount);\\n    return super._mint(user, mintAmount);\\n  }\\n\\n  /*\\n   * @notice KyberDAO deposit\\n   */\\n  function _stake(uint256 amount) private {\\n    if (amount > 0) kyberStaking.deposit(amount);\\n  }\\n\\n  /*\\n   * @notice KyberDAO withdraw\\n   */\\n  function _unstake(uint256 amount) private {\\n    kyberStaking.withdraw(amount);\\n  }\\n\\n  /*\\n   * @notice Calculates proportional issuance according to KNC contribution\\n   * @notice Fund starts at ratio of INITIAL_SUPPLY_MULTIPLIER/1 == token supply/ KNC balance\\n   * and approaches 1/1 as rewards accrue in KNC\\n   * @param kncBalanceBefore used to determine ratio of incremental to current KNC\\n   */\\n  function _calculateMintAmount(uint256 kncBalanceBefore, uint256 depositAmount)\\n    private\\n    view\\n    returns (uint256 mintAmount)\\n  {\\n    uint256 totalSupply = totalSupply();\\n    if (totalSupply == 0)\\n      return (kncBalanceBefore.add(depositAmount)).mul(INITIAL_SUPPLY_MULTIPLIER);\\n    mintAmount = depositAmount.mul(totalSupply).div(kncBalanceBefore);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@kyber.network/utils-sc/contracts/IERC20Ext.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\n/**\\n * @dev Interface extending ERC20 standard to include decimals() as\\n *      it is optional in the OpenZeppelin IERC20 interface.\\n */\\ninterface IERC20Ext is IERC20 {\\n    /**\\n     * @dev This function is required as Kyber requires to interact\\n     *      with token.decimals() with many of its operations.\\n     */\\n    function decimals() external view returns (uint8 digits);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@kyber.network/utils-sc/contracts/PermissionOperators.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./PermissionAdmin.sol\\\";\\n\\n\\nabstract contract PermissionOperators is PermissionAdmin {\\n    uint256 private constant MAX_GROUP_SIZE = 50;\\n\\n    mapping(address => bool) internal operators;\\n    address[] internal operatorsGroup;\\n\\n    event OperatorAdded(address newOperator, bool isAdd);\\n\\n    modifier onlyOperator() {\\n        require(operators[msg.sender], \\\"only operator\\\");\\n        _;\\n    }\\n\\n    function getOperators() external view returns (address[] memory) {\\n        return operatorsGroup;\\n    }\\n\\n    function addOperator(address newOperator) public onlyAdmin {\\n        require(!operators[newOperator], \\\"operator exists\\\"); // prevent duplicates.\\n        require(operatorsGroup.length < MAX_GROUP_SIZE, \\\"max operators\\\");\\n\\n        emit OperatorAdded(newOperator, true);\\n        operators[newOperator] = true;\\n        operatorsGroup.push(newOperator);\\n    }\\n\\n    function removeOperator(address operator) public onlyAdmin {\\n        require(operators[operator], \\\"not operator\\\");\\n        operators[operator] = false;\\n\\n        for (uint256 i = 0; i < operatorsGroup.length; ++i) {\\n            if (operatorsGroup[i] == operator) {\\n                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];\\n                operatorsGroup.pop();\\n                emit OperatorAdded(operator, false);\\n                break;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/staking/IKyberStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport {IEpochUtils} from './IEpochUtils.sol';\\n\\ninterface IKyberStaking is IEpochUtils {\\n  event Delegated(\\n    address indexed staker,\\n    address indexed representative,\\n    uint256 indexed epoch,\\n    bool isDelegated\\n  );\\n  event Deposited(uint256 curEpoch, address indexed staker, uint256 amount);\\n  event Withdraw(uint256 indexed curEpoch, address indexed staker, uint256 amount);\\n\\n  function initAndReturnStakerDataForCurrentEpoch(address staker)\\n    external\\n    returns (\\n      uint256 stake,\\n      uint256 delegatedStake,\\n      address representative\\n    );\\n\\n  function deposit(uint256 amount) external;\\n\\n  function delegate(address dAddr) external;\\n\\n  function withdraw(uint256 amount) external;\\n\\n  /**\\n   * @notice return combine data (stake, delegatedStake, representative) of a staker\\n   * @dev allow to get staker data up to current epoch + 1\\n   */\\n  function getStakerData(address staker, uint256 epoch)\\n    external\\n    view\\n    returns (\\n      uint256 stake,\\n      uint256 delegatedStake,\\n      address representative\\n    );\\n\\n  function getLatestStakerData(address staker)\\n    external\\n    view\\n    returns (\\n      uint256 stake,\\n      uint256 delegatedStake,\\n      address representative\\n    );\\n\\n  /**\\n   * @notice return raw data of a staker for an epoch\\n   *         WARN: should be used only for initialized data\\n   *          if data has not been initialized, it will return all 0\\n   *          pool master shouldn't use this function to compute/distribute rewards of pool members\\n   */\\n  function getStakerRawData(address staker, uint256 epoch)\\n    external\\n    view\\n    returns (\\n      uint256 stake,\\n      uint256 delegatedStake,\\n      address representative\\n    );\\n\\n  function kncToken() external view returns (IERC20);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/rewardDistribution/IRewardsDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport {IERC20Ext} from '@kyber.network/utils-sc/contracts/IERC20Ext.sol';\\n\\n\\ninterface IRewardsDistributor {\\n  event Claimed(\\n    uint256 indexed cycle,\\n    address indexed user,\\n    IERC20Ext[] tokens,\\n    uint256[] claimAmounts\\n  );\\n\\n  /**\\n   * @dev Claim accumulated rewards for a set of tokens at a given cycle number\\n   * @param cycle cycle number\\n   * @param index user reward info index in the array of reward info\\n   * during merkle tree generation\\n   * @param user wallet address of reward beneficiary\\n   * @param tokens array of tokens claimable by reward beneficiary\\n   * @param cumulativeAmounts cumulative token amounts claimable by reward beneficiary\\n   * @param merkleProof merkle proof of claim\\n   * @return claimAmounts actual claimed token amounts sent to the reward beneficiary\\n   **/\\n  function claim(\\n    uint256 cycle,\\n    uint256 index,\\n    address user,\\n    IERC20Ext[] calldata tokens,\\n    uint256[] calldata cumulativeAmounts,\\n    bytes32[] calldata merkleProof\\n  ) external returns (uint256[] memory claimAmounts);\\n\\n  /**\\n   * @dev Checks whether a claim is valid or not\\n   * @param cycle cycle number\\n   * @param index user reward info index in the array of reward info\\n   * during merkle tree generation\\n   * @param user wallet address of reward beneficiary\\n   * @param tokens array of tokens claimable by reward beneficiary\\n   * @param cumulativeAmounts cumulative token amounts claimable by reward beneficiary\\n   * @param merkleProof merkle proof of claim\\n   * @return true if valid claim, false otherwise\\n   **/\\n  function isValidClaim(\\n    uint256 cycle,\\n    uint256 index,\\n    address user,\\n    IERC20Ext[] calldata tokens,\\n    uint256[] calldata cumulativeAmounts,\\n    bytes32[] calldata merkleProof\\n  ) external view returns (bool);\\n\\n  /**\\n   * @dev Fetch accumulated claimed rewards for a set of tokens since the first cycle\\n   * @param user wallet address of reward beneficiary\\n   * @param tokens array of tokens claimed by reward beneficiary\\n   * @return userClaimedAmounts claimed token amounts by reward beneficiary since the first cycle\\n   **/\\n  function getClaimedAmounts(address user, IERC20Ext[] calldata tokens)\\n    external\\n    view\\n    returns (uint256[] memory userClaimedAmounts);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/governance/IKyberGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport {IExecutorWithTimelock} from './IExecutorWithTimelock.sol';\\nimport {IVotingPowerStrategy} from './IVotingPowerStrategy.sol';\\n\\ninterface IKyberGovernance {\\n  enum ProposalState {\\n    Pending,\\n    Canceled,\\n    Active,\\n    Failed,\\n    Succeeded,\\n    Queued,\\n    Expired,\\n    Executed,\\n    Finalized\\n  }\\n  enum ProposalType {Generic, Binary}\\n\\n  /// For Binary proposal, optionBitMask is 0/1/2\\n  /// For Generic proposal, optionBitMask is bitmask of voted options\\n  struct Vote {\\n    uint32 optionBitMask;\\n    uint224 votingPower;\\n  }\\n\\n  struct ProposalWithoutVote {\\n    uint256 id;\\n    ProposalType proposalType;\\n    address creator;\\n    IExecutorWithTimelock executor;\\n    IVotingPowerStrategy strategy;\\n    address[] targets;\\n    uint256[] weiValues;\\n    string[] signatures;\\n    bytes[] calldatas;\\n    bool[] withDelegatecalls;\\n    string[] options;\\n    uint256[] voteCounts;\\n    uint256 totalVotes;\\n    uint256 maxVotingPower;\\n    uint256 startTime;\\n    uint256 endTime;\\n    uint256 executionTime;\\n    string link;\\n    bool executed;\\n    bool canceled;\\n  }\\n\\n  struct Proposal {\\n    ProposalWithoutVote proposalData;\\n    mapping(address => Vote) votes;\\n  }\\n\\n  struct BinaryProposalParams {\\n    address[] targets;\\n    uint256[] weiValues;\\n    string[] signatures;\\n    bytes[] calldatas;\\n    bool[] withDelegatecalls;\\n  }\\n\\n  /**\\n   * @dev emitted when a new binary proposal is created\\n   * @param proposalId id of the binary proposal\\n   * @param creator address of the creator\\n   * @param executor ExecutorWithTimelock contract that will execute the proposal\\n   * @param strategy votingPowerStrategy contract to calculate voting power\\n   * @param targets list of contracts called by proposal's associated transactions\\n   * @param weiValues list of value in wei for each propoposal's associated transaction\\n   * @param signatures list of function signatures (can be empty) to be used\\n   *     when created the callData\\n   * @param calldatas list of calldatas: if associated signature empty,\\n   *     calldata ready, else calldata is arguments\\n   * @param withDelegatecalls boolean, true = transaction delegatecalls the taget,\\n   *    else calls the target\\n   * @param startTime timestamp when vote starts\\n   * @param endTime timestamp when vote ends\\n   * @param link URL link of the proposal\\n   * @param maxVotingPower max voting power for this proposal\\n   **/\\n  event BinaryProposalCreated(\\n    uint256 proposalId,\\n    address indexed creator,\\n    IExecutorWithTimelock indexed executor,\\n    IVotingPowerStrategy indexed strategy,\\n    address[] targets,\\n    uint256[] weiValues,\\n    string[] signatures,\\n    bytes[] calldatas,\\n    bool[] withDelegatecalls,\\n    uint256 startTime,\\n    uint256 endTime,\\n    string link,\\n    uint256 maxVotingPower\\n  );\\n\\n  /**\\n   * @dev emitted when a new generic proposal is created\\n   * @param proposalId id of the generic proposal\\n   * @param creator address of the creator\\n   * @param executor ExecutorWithTimelock contract that will execute the proposal\\n   * @param strategy votingPowerStrategy contract to calculate voting power\\n   * @param options list of proposal vote options\\n   * @param startTime timestamp when vote starts\\n   * @param endTime timestamp when vote ends\\n   * @param link URL link of the proposal\\n   * @param maxVotingPower max voting power for this proposal\\n   **/\\n  event GenericProposalCreated(\\n    uint256 proposalId,\\n    address indexed creator,\\n    IExecutorWithTimelock indexed executor,\\n    IVotingPowerStrategy indexed strategy,\\n    string[] options,\\n    uint256 startTime,\\n    uint256 endTime,\\n    string link,\\n    uint256 maxVotingPower\\n  );\\n\\n  /**\\n   * @dev emitted when a proposal is canceled\\n   * @param proposalId id of the proposal\\n   **/\\n  event ProposalCanceled(uint256 proposalId);\\n\\n  /**\\n   * @dev emitted when a proposal is queued\\n   * @param proposalId id of the proposal\\n   * @param executionTime time when proposal underlying transactions can be executed\\n   * @param initiatorQueueing address of the initiator of the queuing transaction\\n   **/\\n  event ProposalQueued(\\n    uint256 indexed proposalId,\\n    uint256 executionTime,\\n    address indexed initiatorQueueing\\n  );\\n  /**\\n   * @dev emitted when a proposal is executed\\n   * @param proposalId id of the proposal\\n   * @param initiatorExecution address of the initiator of the execution transaction\\n   **/\\n  event ProposalExecuted(uint256 proposalId, address indexed initiatorExecution);\\n  /**\\n   * @dev emitted when a vote is registered\\n   * @param proposalId id of the proposal\\n   * @param voter address of the voter\\n   * @param voteOptions vote options selected by voter\\n   * @param votingPower Power of the voter/vote\\n   **/\\n  event VoteEmitted(\\n    uint256 indexed proposalId,\\n    address indexed voter,\\n    uint32 indexed voteOptions,\\n    uint224 votingPower\\n  );\\n\\n  /**\\n   * @dev emitted when a vote is registered\\n   * @param proposalId id of the proposal\\n   * @param voter address of the voter\\n   * @param voteOptions vote options selected by voter\\n   * @param oldVotingPower Old power of the voter/vote\\n   * @param newVotingPower New power of the voter/vote\\n   **/\\n  event VotingPowerChanged(\\n    uint256 indexed proposalId,\\n    address indexed voter,\\n    uint32 indexed voteOptions,\\n    uint224 oldVotingPower,\\n    uint224 newVotingPower\\n  );\\n\\n  event DaoOperatorTransferred(address indexed newDaoOperator);\\n\\n  event ExecutorAuthorized(address indexed executor);\\n\\n  event ExecutorUnauthorized(address indexed executor);\\n\\n  event VotingPowerStrategyAuthorized(address indexed strategy);\\n\\n  event VotingPowerStrategyUnauthorized(address indexed strategy);\\n\\n  /**\\n   * @dev Function is triggered when users withdraw from staking and change voting power\\n   */\\n  function handleVotingPowerChanged(\\n    address staker,\\n    uint256 newVotingPower,\\n    uint256[] calldata proposalIds\\n  ) external;\\n\\n  /**\\n   * @dev Creates a Binary Proposal (needs to be validated by the Proposal Validator)\\n   * @param executor The ExecutorWithTimelock contract that will execute the proposal\\n   * @param strategy voting power strategy of the proposal\\n   * @param executionParams data for execution, includes\\n   *   targets list of contracts called by proposal's associated transactions\\n   *   weiValues list of value in wei for each proposal's associated transaction\\n   *   signatures list of function signatures (can be empty)\\n   *        to be used when created the callData\\n   *   calldatas list of calldatas: if associated signature empty,\\n   *        calldata ready, else calldata is arguments\\n   *   withDelegatecalls boolean, true = transaction delegatecalls the taget,\\n   *        else calls the target\\n   * @param startTime start timestamp to allow vote\\n   * @param endTime end timestamp of the proposal\\n   * @param link link to the proposal description\\n   **/\\n  function createBinaryProposal(\\n    IExecutorWithTimelock executor,\\n    IVotingPowerStrategy strategy,\\n    BinaryProposalParams memory executionParams,\\n    uint256 startTime,\\n    uint256 endTime,\\n    string memory link\\n  ) external returns (uint256 proposalId);\\n\\n  /**\\n   * @dev Creates a Generic Proposal\\n   * @param executor ExecutorWithTimelock contract that will execute the proposal\\n   * @param strategy votingPowerStrategy contract to calculate voting power\\n   * @param options list of proposal vote options\\n   * @param startTime timestamp when vote starts\\n   * @param endTime timestamp when vote ends\\n   * @param link URL link of the proposal\\n   **/\\n  function createGenericProposal(\\n    IExecutorWithTimelock executor,\\n    IVotingPowerStrategy strategy,\\n    string[] memory options,\\n    uint256 startTime,\\n    uint256 endTime,\\n    string memory link\\n  ) external returns (uint256 proposalId);\\n\\n  /**\\n   * @dev Cancels a Proposal,\\n   * either at anytime by guardian\\n   * or when proposal is Pending/Active and threshold no longer reached\\n   * @param proposalId id of the proposal\\n   **/\\n  function cancel(uint256 proposalId) external;\\n\\n  /**\\n   * @dev Queue the proposal (If Proposal Succeeded)\\n   * @param proposalId id of the proposal to queue\\n   **/\\n  function queue(uint256 proposalId) external;\\n\\n  /**\\n   * @dev Execute the proposal (If Proposal Queued)\\n   * @param proposalId id of the proposal to execute\\n   **/\\n  function execute(uint256 proposalId) external payable;\\n\\n  /**\\n   * @dev Function allowing msg.sender to vote for/against a proposal\\n   * @param proposalId id of the proposal\\n   * @param optionBitMask vote option(s) selected\\n   **/\\n  function submitVote(uint256 proposalId, uint256 optionBitMask) external;\\n\\n  /**\\n   * @dev Function to register the vote of user that has voted offchain via signature\\n   * @param proposalId id of the proposal\\n   * @param choice the bit mask of voted options\\n   * @param v v part of the voter signature\\n   * @param r r part of the voter signature\\n   * @param s s part of the voter signature\\n   **/\\n  function submitVoteBySignature(\\n    uint256 proposalId,\\n    uint256 choice,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @dev Add new addresses to the list of authorized executors\\n   * @param executors list of new addresses to be authorized executors\\n   **/\\n  function authorizeExecutors(address[] calldata executors) external;\\n\\n  /**\\n   * @dev Remove addresses to the list of authorized executors\\n   * @param executors list of addresses to be removed as authorized executors\\n   **/\\n  function unauthorizeExecutors(address[] calldata executors) external;\\n\\n  /**\\n   * @dev Add new addresses to the list of authorized strategies\\n   * @param strategies list of new addresses to be authorized strategies\\n   **/\\n  function authorizeVotingPowerStrategies(address[] calldata strategies) external;\\n\\n  /**\\n   * @dev Remove addresses to the list of authorized strategies\\n   * @param strategies list of addresses to be removed as authorized strategies\\n   **/\\n  function unauthorizeVotingPowerStrategies(address[] calldata strategies) external;\\n\\n  /**\\n   * @dev Returns whether an address is an authorized executor\\n   * @param executor address to evaluate as authorized executor\\n   * @return true if authorized\\n   **/\\n  function isExecutorAuthorized(address executor) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether an address is an authorized strategy\\n   * @param strategy address to evaluate as authorized strategy\\n   * @return true if authorized\\n   **/\\n  function isVotingPowerStrategyAuthorized(address strategy) external view returns (bool);\\n\\n  /**\\n   * @dev Getter the address of the guardian, that can mainly cancel proposals\\n   * @return The address of the guardian\\n   **/\\n  function getDaoOperator() external view returns (address);\\n\\n  /**\\n   * @dev Getter of the proposal count (the current number of proposals ever created)\\n   * @return the proposal count\\n   **/\\n  function getProposalsCount() external view returns (uint256);\\n\\n  /**\\n   * @dev Getter of a proposal by id\\n   * @param proposalId id of the proposal to get\\n   * @return the proposal as ProposalWithoutVote memory object\\n   **/\\n  function getProposalById(uint256 proposalId) external view returns (ProposalWithoutVote memory);\\n\\n  /**\\n   * @dev Getter of the vote data of a proposal by id\\n   * including totalVotes, voteCounts and options\\n   * @param proposalId id of the proposal\\n   * @return (totalVotes, voteCounts, options)\\n   **/\\n  function getProposalVoteDataById(uint256 proposalId)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256[] memory,\\n      string[] memory\\n    );\\n\\n  /**\\n   * @dev Getter of the Vote of a voter about a proposal\\n   * Note: Vote is a struct: ({uint32 bitOptionMask, uint224 votingPower})\\n   * @param proposalId id of the proposal\\n   * @param voter address of the voter\\n   * @return The associated Vote memory object\\n   **/\\n  function getVoteOnProposal(uint256 proposalId, address voter)\\n    external\\n    view\\n    returns (Vote memory);\\n\\n  /**\\n   * @dev Get the current state of a proposal\\n   * @param proposalId id of the proposal\\n   * @return The current state if the proposal\\n   **/\\n  function getProposalState(uint256 proposalId) external view returns (ProposalState);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@kyber.network/utils-sc/contracts/PermissionAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n\\nabstract contract PermissionAdmin {\\n    address public admin;\\n    address public pendingAdmin;\\n\\n    event AdminClaimed(address newAdmin, address previousAdmin);\\n\\n    event TransferAdminPending(address pendingAdmin);\\n\\n    constructor(address _admin) {\\n        require(_admin != address(0), \\\"admin 0\\\");\\n        admin = _admin;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"only admin\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows the current admin to set the pendingAdmin address.\\n     * @param newAdmin The address to transfer ownership to.\\n     */\\n    function transferAdmin(address newAdmin) public onlyAdmin {\\n        require(newAdmin != address(0), \\\"new admin 0\\\");\\n        emit TransferAdminPending(newAdmin);\\n        pendingAdmin = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Allows the current admin to set the admin in one tx. Useful initial deployment.\\n     * @param newAdmin The address to transfer ownership to.\\n     */\\n    function transferAdminQuickly(address newAdmin) public onlyAdmin {\\n        require(newAdmin != address(0), \\\"admin 0\\\");\\n        emit TransferAdminPending(newAdmin);\\n        emit AdminClaimed(newAdmin, admin);\\n        admin = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Allows the pendingAdmin address to finalize the change admin process.\\n     */\\n    function claimAdmin() public {\\n        require(pendingAdmin == msg.sender, \\\"not pending\\\");\\n        emit AdminClaimed(pendingAdmin, admin);\\n        admin = pendingAdmin;\\n        pendingAdmin = address(0);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/staking/IEpochUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface IEpochUtils {\\n  function epochPeriodInSeconds() external view returns (uint256);\\n\\n  function firstEpochStartTime() external view returns (uint256);\\n\\n  function getCurrentEpochNumber() external view returns (uint256);\\n\\n  function getEpochNumber(uint256 timestamp) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/governance/IExecutorWithTimelock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport {IKyberGovernance} from './IKyberGovernance.sol';\\n\\ninterface IExecutorWithTimelock {\\n  /**\\n   * @dev emitted when a new pending admin is set\\n   * @param newPendingAdmin address of the new pending admin\\n   **/\\n  event NewPendingAdmin(address newPendingAdmin);\\n\\n  /**\\n   * @dev emitted when a new admin is set\\n   * @param newAdmin address of the new admin\\n   **/\\n  event NewAdmin(address newAdmin);\\n\\n  /**\\n   * @dev emitted when a new delay (between queueing and execution) is set\\n   * @param delay new delay\\n   **/\\n  event NewDelay(uint256 delay);\\n\\n  /**\\n   * @dev emitted when a new (trans)action is Queued.\\n   * @param actionHash hash of the action\\n   * @param target address of the targeted contract\\n   * @param value wei value of the transaction\\n   * @param signature function signature of the transaction\\n   * @param data function arguments of the transaction or callData if signature empty\\n   * @param executionTime time at which to execute the transaction\\n   * @param withDelegatecall boolean, true = transaction delegatecalls the target, else calls the target\\n   **/\\n  event QueuedAction(\\n    bytes32 actionHash,\\n    address indexed target,\\n    uint256 value,\\n    string signature,\\n    bytes data,\\n    uint256 executionTime,\\n    bool withDelegatecall\\n  );\\n\\n  /**\\n   * @dev emitted when an action is Cancelled\\n   * @param actionHash hash of the action\\n   * @param target address of the targeted contract\\n   * @param value wei value of the transaction\\n   * @param signature function signature of the transaction\\n   * @param data function arguments of the transaction or callData if signature empty\\n   * @param executionTime time at which to execute the transaction\\n   * @param withDelegatecall boolean, true = transaction delegatecalls the target, else calls the target\\n   **/\\n  event CancelledAction(\\n    bytes32 actionHash,\\n    address indexed target,\\n    uint256 value,\\n    string signature,\\n    bytes data,\\n    uint256 executionTime,\\n    bool withDelegatecall\\n  );\\n\\n  /**\\n   * @dev emitted when an action is Cancelled\\n   * @param actionHash hash of the action\\n   * @param target address of the targeted contract\\n   * @param value wei value of the transaction\\n   * @param signature function signature of the transaction\\n   * @param data function arguments of the transaction or callData if signature empty\\n   * @param executionTime time at which to execute the transaction\\n   * @param withDelegatecall boolean, true = transaction delegatecalls the target, else calls the target\\n   * @param resultData the actual callData used on the target\\n   **/\\n  event ExecutedAction(\\n    bytes32 actionHash,\\n    address indexed target,\\n    uint256 value,\\n    string signature,\\n    bytes data,\\n    uint256 executionTime,\\n    bool withDelegatecall,\\n    bytes resultData\\n  );\\n\\n  /**\\n   * @dev Function, called by Governance, that queue a transaction, returns action hash\\n   * @param target smart contract target\\n   * @param value wei value of the transaction\\n   * @param signature function signature of the transaction\\n   * @param data function arguments of the transaction or callData if signature empty\\n   * @param executionTime time at which to execute the transaction\\n   * @param withDelegatecall boolean, true = transaction delegatecalls the target, else calls the target\\n   **/\\n  function queueTransaction(\\n    address target,\\n    uint256 value,\\n    string memory signature,\\n    bytes memory data,\\n    uint256 executionTime,\\n    bool withDelegatecall\\n  ) external returns (bytes32);\\n\\n  /**\\n   * @dev Function, called by Governance, that cancels a transaction, returns the callData executed\\n   * @param target smart contract target\\n   * @param value wei value of the transaction\\n   * @param signature function signature of the transaction\\n   * @param data function arguments of the transaction or callData if signature empty\\n   * @param executionTime time at which to execute the transaction\\n   * @param withDelegatecall boolean, true = transaction delegatecalls the target, else calls the target\\n   **/\\n  function executeTransaction(\\n    address target,\\n    uint256 value,\\n    string memory signature,\\n    bytes memory data,\\n    uint256 executionTime,\\n    bool withDelegatecall\\n  ) external payable returns (bytes memory);\\n\\n  /**\\n   * @dev Function, called by Governance, that cancels a transaction, returns action hash\\n   * @param target smart contract target\\n   * @param value wei value of the transaction\\n   * @param signature function signature of the transaction\\n   * @param data function arguments of the transaction or callData if signature empty\\n   * @param executionTime time at which to execute the transaction\\n   * @param withDelegatecall boolean, true = transaction delegatecalls the target, else calls the target\\n   **/\\n  function cancelTransaction(\\n    address target,\\n    uint256 value,\\n    string memory signature,\\n    bytes memory data,\\n    uint256 executionTime,\\n    bool withDelegatecall\\n  ) external returns (bytes32);\\n\\n  /**\\n   * @dev Getter of the current admin address (should be governance)\\n   * @return The address of the current admin\\n   **/\\n  function getAdmin() external view returns (address);\\n\\n  /**\\n   * @dev Getter of the current pending admin address\\n   * @return The address of the pending admin\\n   **/\\n  function getPendingAdmin() external view returns (address);\\n\\n  /**\\n   * @dev Getter of the delay between queuing and execution\\n   * @return The delay in seconds\\n   **/\\n  function getDelay() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns whether an action (via actionHash) is queued\\n   * @param actionHash hash of the action to be checked\\n   * keccak256(abi.encode(target, value, signature, data, executionTime, withDelegatecall))\\n   * @return true if underlying action of actionHash is queued\\n   **/\\n  function isActionQueued(bytes32 actionHash) external view returns (bool);\\n\\n  /**\\n   * @dev Checks whether a proposal is over its grace period\\n   * @param governance Governance contract\\n   * @param proposalId Id of the proposal against which to test\\n   * @return true of proposal is over grace period\\n   **/\\n  function isProposalOverGracePeriod(IKyberGovernance governance, uint256 proposalId)\\n    external\\n    view\\n    returns (bool);\\n\\n  /**\\n   * @dev Getter of grace period constant\\n   * @return grace period in seconds\\n   **/\\n  function GRACE_PERIOD() external view returns (uint256);\\n\\n  /**\\n   * @dev Getter of minimum delay constant\\n   * @return minimum delay in seconds\\n   **/\\n  function MINIMUM_DELAY() external view returns (uint256);\\n\\n  /**\\n   * @dev Getter of maximum delay constant\\n   * @return maximum delay in seconds\\n   **/\\n  function MAXIMUM_DELAY() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/governance/IVotingPowerStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport {IWithdrawHandler} from '../staking/IWithdrawHandler.sol';\\n\\ninterface IVotingPowerStrategy is IWithdrawHandler {\\n  /**\\n   * @dev call by governance when create a proposal\\n   */\\n  function handleProposalCreation(\\n    uint256 proposalId,\\n    uint256 startTime,\\n    uint256 endTime\\n  ) external;\\n\\n  /**\\n   * @dev call by governance when cancel a proposal\\n   */\\n  function handleProposalCancellation(uint256 proposalId) external;\\n\\n  /**\\n   * @dev call by governance when submitting a vote\\n   * @param choice: unused param for future usage\\n   * @return votingPower of voter\\n   */\\n  function handleVote(\\n    address voter,\\n    uint256 proposalId,\\n    uint256 choice\\n  ) external returns (uint256 votingPower);\\n\\n  /**\\n   * @dev get voter's voting power given timestamp\\n   * @dev for reading purposes and validating voting power for creating/canceling proposal in the furture\\n   * @dev when submitVote, should call 'handleVote' instead\\n   */\\n  function getVotingPower(address voter, uint256 timestamp)\\n    external\\n    view\\n    returns (uint256 votingPower);\\n\\n  /**\\n   * @dev validate that startTime and endTime are suitable for calculating voting power\\n   * @dev with current version, startTime and endTime must be in the sameEpcoh\\n   */\\n  function validateProposalCreation(uint256 startTime, uint256 endTime)\\n    external\\n    view\\n    returns (bool);\\n\\n  /**\\n   * @dev getMaxVotingPower at current time\\n   * @dev call by governance when creating a proposal\\n   */\\n  function getMaxVotingPower() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/staking/IWithdrawHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\n/**\\n * @title Interface for callbacks hooks when user withdraws from staking contract\\n */\\ninterface IWithdrawHandler {\\n  function handleWithdrawal(address staker, uint256 reduceAmount) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"contract IKyberNetworkProxy\",\"name\":\"_kyberProxy\",\"type\":\"address\"},{\"internalType\":\"contract IKyberStaking\",\"name\":\"_kyberStaking\",\"type\":\"address\"},{\"internalType\":\"contract IKyberGovernance\",\"name\":\"_kyberGovernance\",\"type\":\"address\"},{\"internalType\":\"contract IRewardsDistributor\",\"name\":\"_rewardsDistributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintFeeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimFeeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFeeBps\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"}],\"name\":\"AdminClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintFeeBps\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnFeeBps\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimFeeBps\",\"type\":\"uint256\"}],\"name\":\"FeesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAdd\",\"type\":\"bool\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingAdmin\",\"type\":\"address\"}],\"name\":\"TransferAdminPending\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintFeeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimFeeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFeeBps\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Ext\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"giveAllowance\",\"type\":\"bool\"}],\"name\":\"approveKyberProxyContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintFeeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimFeeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFeeBps\",\"type\":\"uint256\"}],\"name\":\"changeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKyberGovernance\",\"name\":\"_kyberGovernance\",\"type\":\"address\"}],\"name\":\"changeGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKyberNetworkProxy\",\"name\":\"_kyberProxy\",\"type\":\"address\"}],\"name\":\"changeKyberProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRewardsDistributor\",\"name\":\"_rewardsDistributor\",\"type\":\"address\"}],\"name\":\"changeRewardsDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20Ext[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"cumulativeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenWei\",\"type\":\"uint256\"}],\"name\":\"depositWithNewKnc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenWei\",\"type\":\"uint256\"}],\"name\":\"depositWithOldKnc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableNewKncBalanceTwei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PoolMaster.FeeTypes\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"getFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"latestStake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProRataKnc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kyberGovernance\",\"outputs\":[{\"internalType\":\"contract IKyberGovernance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kyberProxy\",\"outputs\":[{\"internalType\":\"contract IKyberNetworkProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kyberStaking\",\"outputs\":[{\"internalType\":\"contract IKyberStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Ext[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minRates\",\"type\":\"uint256[]\"}],\"name\":\"liquidateTokensToKnc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newKnc\",\"outputs\":[{\"internalType\":\"contract IERC20Ext\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDistributor\",\"outputs\":[{\"internalType\":\"contract IRewardsDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminQuickly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"proposalIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"optionBitMasks\",\"type\":\"uint256[]\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensToRedeemTwei\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawableAdminFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"PoolMaster","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001600000000000000000000000009aab3f75489902f3a48495025729a0af77d4b11e000000000000000000000000eadb96f1623176144eba2b24e35325220972b3bd0000000000000000000000007ec8fcc26be7e9e85b57e73083e5fe0550d8a7fe0000000000000000000000005ec0dcf4f6f55f28550c70b854082993fdc0d3b200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000015556e61676969204b4e4320506f6f6c4d617374657200000000000000000000000000000000000000000000000000000000000000000000000000000000000004754b4e4300000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}