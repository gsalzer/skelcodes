{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/mudaseriqbal/Documents/Developer/Luner/nifter.contracts/contracts/active/IERC1155TokenCreator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @title IERC1155 Non-Fungible Token Creator basic interface\\n */\\ninterface IERC1155TokenCreator {\\n    /**\\n     * @dev Gets the creator of the token\\n     * @param _tokenId uint256 ID of the token\\n     * @return address of the creator\\n     */\\n    function tokenCreator(uint256 _tokenId)\\n    external\\n    view\\n    returns (address payable);\\n}\\n\"\r\n    },\r\n    \"/Users/mudaseriqbal/Documents/Developer/Luner/nifter.contracts/contracts/active/INifter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n\\n/**\\n * @dev Interface for interacting with the Nifter contract that holds Nifter beta tokens.\\n */\\ninterface INifter {\\n\\n    /**\\n     * @dev Gets the creator of the token\\n     * @param _tokenId uint256 ID of the token\\n     * @return address of the creator\\n     */\\n    function creatorOfToken(uint256 _tokenId)\\n    external\\n    view\\n    returns (address payable);\\n\\n    /**\\n     * @dev Gets the Service Fee\\n     * @param _tokenId uint256 ID of the token\\n     * @return address of the creator\\n     */\\n    function getServiceFee(uint256 _tokenId)\\n    external\\n    view\\n    returns (uint8);\\n\\n    /**\\n     * @dev Gets the price type\\n     * @param _tokenId uint256 ID of the token\\n     * @param _owner address of the token owner\\n     * @return get the price type\\n     */\\n    function getPriceType(uint256 _tokenId, address _owner)\\n    external\\n    view\\n    returns (uint8);\\n\\n    /**\\n     * @dev update price only from auction.\\n     * @param _price price of the token\\n     * @param _tokenId uint256 id of the token.\\n     * @param _owner address of the token owner\\n     */\\n    function setPrice(uint256 _price, uint256 _tokenId, address _owner) external;\\n\\n    /**\\n     * @dev update bids only from auction.\\n     * @param _bid bid Amount\\n     * @param _bidder bidder address\\n     * @param _tokenId uint256 id of the token.\\n     * @param _owner address of the token owner\\n     */\\n    function setBid(uint256 _bid, address _bidder, uint256 _tokenId, address _owner) external;\\n\\n    /**\\n     * @dev remove token from sale\\n     * @param _tokenId uint256 id of the token.\\n     * @param _owner owner of the token\\n     */\\n    function removeFromSale(uint256 _tokenId, address _owner) external;\\n\\n    /**\\n     * @dev get tokenIds length\\n     */\\n    function getTokenIdsLength() external view returns (uint256);\\n\\n    /**\\n     * @dev get token Id\\n     * @param _index uint256 index\\n     */\\n    function getTokenId(uint256 _index) external view returns (uint256);\\n\\n    /**\\n     * @dev Gets the owners\\n     * @param _tokenId uint256 ID of the token\\n     */\\n    function getOwners(uint256 _tokenId)\\n    external\\n    view\\n    returns (address[] memory owners);\\n\\n    /**\\n     * @dev Gets the is for sale\\n     * @param _tokenId uint256 ID of the token\\n     * @param _owner address of the token owner\\n     */\\n    function getIsForSale(uint256 _tokenId, address _owner) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/Users/mudaseriqbal/Documents/Developer/Luner/nifter.contracts/contracts/active/INifterRoyaltyRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IERC1155TokenCreator.sol\\\";\\n\\n/**\\n * @title IERC1155CreatorRoyalty Token level royalty interface.\\n */\\ninterface INifterRoyaltyRegistry is IERC1155TokenCreator {\\n    /**\\n     * @dev Get the royalty fee percentage for a specific ERC1155 contract.\\n     * @param _tokenId uint256 token ID.\\n     * @return uint8 wei royalty fee.\\n     */\\n    function getTokenRoyaltyPercentage(\\n        uint256 _tokenId\\n    ) external view returns (uint8);\\n\\n    /**\\n     * @dev Utililty function to calculate the royalty fee for a token.\\n     * @param _tokenId uint256 token ID.\\n     * @param _amount uint256 wei amount.\\n     * @return uint256 wei fee.\\n     */\\n    function calculateRoyaltyFee(\\n        uint256 _tokenId,\\n        uint256 _amount\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets the royalty percentage set for an Nifter token\\n     * Requirements:\\n\\n     * - `_percentage` must be <= 100.\\n     * - only the owner of this contract or the creator can call this method.\\n     * @param _tokenId uint256 token ID.\\n     * @param _percentage uint8 wei royalty fee.\\n     */\\n    function setPercentageForTokenRoyalty(\\n        uint256 _tokenId,\\n        uint8 _percentage\\n    ) external returns (uint8);\\n}\\n\"\r\n    },\r\n    \"/Users/mudaseriqbal/Documents/Developer/Luner/nifter.contracts/contracts/active/INifterTokenCreatorRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @title IERC721 Non-Fungible Token Creator basic interface\\n */\\ninterface INifterTokenCreatorRegistry {\\n    /**\\n     * @dev Gets the creator of the token\\n     * @param _tokenId uint256 ID of the token\\n     * @return address of the creator\\n     */\\n    function tokenCreator(uint256 _tokenId)\\n    external\\n    view\\n    returns (address payable);\\n\\n    /**\\n     * @dev Sets the creator of the token\\n     * @param _tokenId uint256 ID of the token\\n     * @param _creator address of the creator for the token\\n     */\\n    function setTokenCreator(\\n        uint256 _tokenId,\\n        address payable _creator\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"/Users/mudaseriqbal/Documents/Developer/Luner/nifter.contracts/contracts/active/NifterTokenCreatorRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./INifterRoyaltyRegistry.sol\\\";\\nimport \\\"./INifterTokenCreatorRegistry.sol\\\";\\nimport \\\"./INifter.sol\\\";\\n\\n/**\\n * @title IERC1155 Non-Fungible Token Creator basic interface\\n */\\ncontract NifterTokenCreatorRegistry is Ownable, INifterTokenCreatorRegistry {\\n    using SafeMath for uint256;\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // State Variables\\n    /////////////////////////////////////////////////////////////////////////\\n\\n    // Mapping of ERC1155 token to it's creator.\\n    mapping(uint256 => address payable)\\n    private tokenCreators;\\n    address public nifter;\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // tokenCreator\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Gets the creator of the token\\n     * @param _tokenId uint256 ID of the token\\n     * @return address of the creator\\n     */\\n    function tokenCreator(uint256 _tokenId)\\n    external\\n    view\\n    override\\n    returns (address payable)\\n    {\\n        if (tokenCreators[_tokenId] != address(0)) {\\n            return tokenCreators[_tokenId];\\n        }\\n\\n        return address(0);\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // setNifter\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Set nifter contract address\\n     * @param _nifter uint256 ID of the token\\n     */\\n    function setNifter(address _nifter) external onlyOwner {\\n        nifter = _nifter;\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // setTokenCreator\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Sets the creator of the token\\n     * @param _tokenId uint256 ID of the token\\n     * @param _creator address of the creator for the token\\n     */\\n    function setTokenCreator(\\n        uint256 _tokenId,\\n        address payable _creator\\n    ) external override {\\n        require(\\n            _creator != address(0),\\n            \\\"setTokenCreator::Cannot set null address as creator\\\"\\n        );\\n\\n        require(msg.sender == nifter || msg.sender == owner(), \\\"setTokenCreator::only nifter and owner allowed\\\");\\n\\n        tokenCreators[_tokenId] = _creator;\\n    }\\n\\n    /**\\n     * @dev restore data from old contract, only call by owner\\n     * @param _oldAddress address of old contract.\\n     * @param _oldNifterAddress get the token ids from the old nifter contract.\\n     * @param _startIndex start index of array\\n     * @param _endIndex end index of array\\n     */\\n    function restore(address _oldAddress, address _oldNifterAddress, uint256 _startIndex, uint256 _endIndex) external onlyOwner {\\n        NifterTokenCreatorRegistry oldContract = NifterTokenCreatorRegistry(_oldAddress);\\n        INifter oldNifterContract = INifter(_oldNifterAddress);\\n\\n        uint256 length = oldNifterContract.getTokenIdsLength();\\n        require(_startIndex < length, \\\"wrong start index\\\");\\n        require(_endIndex <= length, \\\"wrong end index\\\");\\n\\n        for (uint i = _startIndex; i < _endIndex; i++) {\\n            uint256 tokenId = oldNifterContract.getTokenId(i);\\n            if (tokenCreators[tokenId] != address(0)) {\\n                tokenCreators[tokenId] = oldContract.tokenCreator(tokenId);\\n            }\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"nifter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oldNifterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endIndex\",\"type\":\"uint256\"}],\"name\":\"restore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nifter\",\"type\":\"address\"}],\"name\":\"setNifter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"setTokenCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenCreator\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NifterTokenCreatorRegistry","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"byzantium","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}