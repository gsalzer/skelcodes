{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/D/Working/work-O/Densetsu/FamilyManorLLC/contract/contracts/ManorToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.7.3;\\r\\n\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ManorToken {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    address public owner;\\r\\n    address public realtor;\\r\\n    uint256 public end;\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    event Purchase(address indexed buyer, uint256 tokens, uint256 eth);\\r\\n    event PriceUpdate(uint256 _dollar);\\r\\n\\r\\n    string public constant name = \\\"Manor Token\\\";\\r\\n    string public constant symbol = \\\"MT\\\";\\r\\n    uint256 public constant decimals = 18;\\r\\n\\r\\n    uint256 private constant DECIMALS = 18;\\r\\n    uint256 private constant MAX_UINT256 = ~uint256(0) / 1000000000000000000;\\r\\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 1 * 10**DECIMALS;\\r\\n\\r\\n    uint256 private constant TOTAL_GONS = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\\r\\n    uint256 totalGons = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n    uint256 private _totalDeposit;\\r\\n    uint256 private _gonsPerFragment;\\r\\n    mapping(address => uint256) private _gonBalances;\\r\\n\\r\\n    mapping (address => mapping (address => uint256)) private _allowedFragments;\\r\\n\\r\\n    uint256 public dollar;\\r\\n    uint256 public basePrice;\\r\\n    uint256 public priceIncrement;\\r\\n\\r\\n    mapping(address => address) public referrer;\\r\\n    mapping(address => uint256) public refBalances;\\r\\n\\r\\n    constructor(address _owner, address _realtor, uint256 _dollarPrice) {\\r\\n      owner = _owner;\\r\\n      realtor = _realtor;\\r\\n      dollar = uint256(1 ether).div(_dollarPrice);\\r\\n      basePrice = dollar.div(10);\\r\\n      priceIncrement = dollar.div(100);\\r\\n\\r\\n      end = block.timestamp + (58 * 86400); // 58 days\\r\\n      _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\\r\\n      _gonBalances[owner] = TOTAL_GONS;\\r\\n      _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\\r\\n\\r\\n      emit Transfer(address(0), owner, _totalSupply);\\r\\n    }\\r\\n\\r\\n    function isEnded() public view returns(bool) {\\r\\n        return (block.timestamp >= end || _totalDeposit >= dollar.mul(21000000));\\r\\n    }\\r\\n\\r\\n    function _mint(address _user, uint256 _amount) internal{\\r\\n      _gonBalances[_user] = _gonBalances[_user].add(_amount.mul(_gonsPerFragment));\\r\\n      totalGons = totalGons.add(_amount.mul(_gonsPerFragment));\\r\\n      _totalSupply = _totalSupply.add(_amount);\\r\\n      _gonsPerFragment = totalGons.div(_totalSupply);\\r\\n      emit Transfer(address(0), _user, _amount);\\r\\n    }\\r\\n\\r\\n    function _payRefs(address _user, address _ref, uint256 _amount) internal {\\r\\n      _mint(realtor, _amount.div(20));\\r\\n      if(referrer[_user] != address(0)){\\r\\n        refBalances[referrer[_user]] += _amount.div(20);\\r\\n      }\\r\\n      else if(_ref != address(0)){\\r\\n        referrer[_user] = _ref;\\r\\n        refBalances[referrer[_user]] += _amount.div(20);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    function hardcap() external view returns(uint256){\\r\\n      return dollar.mul(21000000);\\r\\n    }\\r\\n\\r\\n    function updateDollar(uint256 usdPrice) external onlyOwner {\\r\\n      dollar = uint256(1 ether).div(usdPrice);\\r\\n      basePrice = dollar.div(10);\\r\\n      priceIncrement = dollar.div(100);\\r\\n      emit PriceUpdate(dollar);\\r\\n    }\\r\\n\\r\\n    function calcPrice(uint256 tokens) public view returns(uint256 _eth){\\r\\n      uint256 rev = _totalDeposit.div(dollar);\\r\\n      uint256 remainder = 100000 - (rev.mod(100000));\\r\\n      uint256 curPrice = basePrice.add(priceIncrement.mul(rev.div(100000)));\\r\\n\\r\\n      if(tokens.mul(curPrice).div(dollar) > remainder){\\r\\n        _eth = remainder.mul(dollar);\\r\\n        tokens = tokens.sub(remainder.mul(dollar).div(curPrice));\\r\\n        for(uint256 x = 0; x < 21; x++){\\r\\n          if(x == 20){\\r\\n            revert(\\\"Amount Exceeds HardCap\\\");\\r\\n          }\\r\\n          uint256 nextPrice = basePrice.add(priceIncrement.mul(rev.div(100000).add(1 + x)));\\r\\n          if(tokens.mul(nextPrice) > dollar.mul(100000)){\\r\\n            _eth += dollar.mul(100000);\\r\\n            tokens = tokens.sub(dollar.mul(100000).div(nextPrice));\\r\\n          }\\r\\n          else{\\r\\n            _eth += tokens.mul(nextPrice);\\r\\n            break;\\r\\n          }\\r\\n        }\\r\\n\\r\\n      }\\r\\n      else{\\r\\n        _eth = tokens.mul(curPrice);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    function calcTokens(uint256 amount) public view returns(uint256 _tokens){\\r\\n      uint256 rev = _totalDeposit.div(dollar);\\r\\n      uint256 remainder = 100000 - (rev.mod(100000));\\r\\n      uint256 curPrice = basePrice.add(priceIncrement.mul(rev.div(100000)));\\r\\n      uint256 dollarSpent = amount.div(dollar);\\r\\n\\r\\n      if(dollarSpent > remainder){\\r\\n        _tokens = remainder.mul(dollar).mul(1 ether).div(curPrice);\\r\\n        amount = amount.sub(remainder.mul(dollar));\\r\\n        for(uint256 x = 0; x < 21; x++){\\r\\n          if(x == 20){\\r\\n            revert(\\\"Amount Exceeds HardCap\\\");\\r\\n          }\\r\\n          uint256 nextPrice = basePrice.add(priceIncrement.mul(rev.div(100000).add(1 + x)));\\r\\n          if(amount > dollar.mul(100000)){\\r\\n            _tokens += dollar.mul(100000).mul(1 ether).div(nextPrice);\\r\\n            amount = amount.sub(dollar.mul(100000));\\r\\n          }\\r\\n          else{\\r\\n            _tokens += amount.mul(1 ether).div(nextPrice);\\r\\n            break;\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n      else{\\r\\n        _tokens = amount.mul(1 ether).div(curPrice);\\r\\n      }\\r\\n\\r\\n    }\\r\\n\\r\\n    function purchaseTokens(address ref) external payable {\\r\\n      require(!isEnded(), \\\"ICO Ended\\\");\\r\\n      require(_totalDeposit + msg.value <= dollar.mul(21000000), \\\"Amount Exceeds HardCap\\\");\\r\\n      uint256 tokensBought = calcTokens(msg.value);\\r\\n\\r\\n      _payRefs(msg.sender, ref, tokensBought);\\r\\n      _totalDeposit += msg.value;\\r\\n\\r\\n      emit Purchase(msg.sender, tokensBought, msg.value);\\r\\n      _mint(msg.sender, tokensBought);\\r\\n\\r\\n    }\\r\\n\\r\\n    function purchaseExactTokens(address ref, uint256 amount) external payable {\\r\\n      require(!isEnded(), \\\"ICO Ended\\\");\\r\\n      uint256 tokenPrice = calcPrice(amount);\\r\\n      require(msg.value >= tokenPrice, \\\"Insufficient Funds Sent\\\");\\r\\n      require(_totalDeposit + tokenPrice <= dollar.mul(21000000), \\\"Amount Exceeds HardCap\\\");\\r\\n\\r\\n      _payRefs(msg.sender, ref, amount);\\r\\n      _totalDeposit += tokenPrice;\\r\\n\\r\\n      _mint(msg.sender, amount);\\r\\n      emit Purchase(msg.sender, amount, tokenPrice);\\r\\n      if(msg.value > tokenPrice){\\r\\n        msg.sender.transfer(msg.value.sub(tokenPrice));\\r\\n      }\\r\\n    }\\r\\n\\r\\n    function claimRefs(uint256 amount) external {\\r\\n      require(isEnded(), \\\"ICO Not Ended\\\");\\r\\n      require(refBalances[msg.sender] >= amount, \\\"Claim Exceeds Balance\\\");\\r\\n      refBalances[msg.sender] -= amount;\\r\\n      _mint(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function clearLiquidity() external onlyOwner{\\r\\n      require(isEnded(), \\\"ICO Not Ended\\\");\\r\\n      _mint(msg.sender, _totalSupply);\\r\\n    }\\r\\n\\r\\n    function withdrawETH(uint256 amount) external onlyOwner{\\r\\n      msg.sender.transfer(amount);\\r\\n    }\\r\\n\\r\\n    function totalSupply()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function totalDeposit()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _totalDeposit;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address who)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _gonBalances[who].div(_gonsPerFragment);\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint256 value)\\r\\n        external\\r\\n        returns (bool)\\r\\n    {\\r\\n        uint256 gonValue = value.mul(_gonsPerFragment);\\r\\n        _gonBalances[msg.sender] = _gonBalances[msg.sender].sub(gonValue);\\r\\n\\r\\n        _gonBalances[to] = _gonBalances[to].add(gonValue.mul(95).div(100));\\r\\n        totalGons = totalGons.sub(gonValue.div(20)); // give everyone else 5%\\r\\n        _gonsPerFragment = totalGons.div(_totalSupply);\\r\\n\\r\\n        emit Transfer(msg.sender, to, value);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner_, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowedFragments[owner_][spender];\\r\\n    }\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 value)\\r\\n        external\\r\\n        returns (bool)\\r\\n    {\\r\\n        _allowedFragments[from][msg.sender] = _allowedFragments[from][msg.sender].sub(value);\\r\\n\\r\\n        uint256 gonValue = value.mul(_gonsPerFragment);\\r\\n        _gonBalances[from] = _gonBalances[from].sub(gonValue);\\r\\n\\r\\n        _gonBalances[to] = _gonBalances[to].add(gonValue.mul(95).div(100));\\r\\n        totalGons = totalGons.sub(gonValue.div(20)); // give everyone else 5%\\r\\n        _gonsPerFragment = totalGons.div(_totalSupply);\\r\\n\\r\\n        emit Transfer(from, to, value);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 value)\\r\\n        external\\r\\n        returns (bool)\\r\\n    {\\r\\n        _allowedFragments[msg.sender][spender] = value;\\r\\n        emit Approval(msg.sender, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue)\\r\\n        external\\r\\n        returns (bool)\\r\\n    {\\r\\n        _allowedFragments[msg.sender][spender] =\\r\\n            _allowedFragments[msg.sender][spender].add(addedValue);\\r\\n        emit Approval(msg.sender, spender, _allowedFragments[msg.sender][spender]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n        external\\r\\n        returns (bool)\\r\\n    {\\r\\n        uint256 oldValue = _allowedFragments[msg.sender][spender];\\r\\n        if (subtractedValue >= oldValue) {\\r\\n            _allowedFragments[msg.sender][spender] = 0;\\r\\n        } else {\\r\\n            _allowedFragments[msg.sender][spender] = oldValue.sub(subtractedValue);\\r\\n        }\\r\\n        emit Approval(msg.sender, spender, _allowedFragments[msg.sender][spender]);\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_realtor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dollarPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_dollar\",\"type\":\"uint256\"}],\"name\":\"PriceUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"calcPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_eth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calcTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimRefs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dollar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceIncrement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"purchaseExactTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"purchaseTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realtor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"refBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdPrice\",\"type\":\"uint256\"}],\"name\":\"updateDollar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ManorToken","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000008cd0b8941af4199787a3a93510fe41534d50e1890000000000000000000000009e9b841f19a6fc5e20c3b4c26ec113e4c4d040e3000000000000000000000000000000000000000000000000000000000000085f","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}