{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity 0.8.6;\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint);\r\n  function balanceOf(address account) external view returns (uint);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint);\r\n  function symbol() external view returns (string memory);\r\n  function decimals() external view returns (uint);\r\n  function approve(address spender, uint amount) external returns (bool);\r\n  function mint(address account, uint amount) external;\r\n  function burn(address account, uint amount) external;\r\n  function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ninterface IPairFactory {\r\n  function pairByTokens(address _tokenA, address _tokenB) external view returns(address);\r\n}\r\n\r\ninterface ILendingPair {\r\n  function checkAccountHealth(address _account) external view;\r\n  function accrueAccount(address _account) external;\r\n  function accrue() external;\r\n  function accountHealth(address _account) external view returns(uint);\r\n  function totalDebt(address _token) external view returns(uint);\r\n  function tokenA() external view returns(address);\r\n  function tokenB() external view returns(address);\r\n  function lpToken(address _token) external view returns(IERC20);\r\n  function debtOf(address _account, address _token) external view returns(uint);\r\n  function pendingDebtTotal(address _token) external view returns(uint);\r\n  function pendingSupplyTotal(address _token) external view returns(uint);\r\n  function deposit(address _token, uint _amount) external;\r\n  function withdraw(address _token, uint _amount) external;\r\n  function borrow(address _token, uint _amount) external;\r\n  function repay(address _token, uint _amount) external;\r\n  function withdrawBorrow(address _token, uint _amount) external;\r\n  function controller() external view returns(IController);\r\n\r\n  function borrowBalance(\r\n    address _account,\r\n    address _borrowedToken,\r\n    address _returnToken\r\n  ) external view returns(uint);\r\n\r\n  function convertTokenValues(\r\n    address _fromToken,\r\n    address _toToken,\r\n    uint    _inputAmount\r\n  ) external view returns(uint);\r\n}\r\n\r\ninterface IInterestRateModel {\r\n  function systemRate(ILendingPair _pair, address _token) external view returns(uint);\r\n  function supplyRatePerBlock(ILendingPair _pair, address _token) external view returns(uint);\r\n  function borrowRatePerBlock(ILendingPair _pair, address _token) external view returns(uint);\r\n}\r\n\r\ninterface IRewardDistribution {\r\n  function distributeReward(address _account, address _token) external;\r\n}\r\n\r\ninterface IController {\r\n  function interestRateModel() external view returns(IInterestRateModel);\r\n  function rewardDistribution() external view returns(IRewardDistribution);\r\n  function feeRecipient() external view returns(address);\r\n  function LIQ_MIN_HEALTH() external view returns(uint);\r\n  function minBorrowUSD() external view returns(uint);\r\n  function liqFeeSystem(address _token) external view returns(uint);\r\n  function liqFeeCaller(address _token) external view returns(uint);\r\n  function liqFeesTotal(address _token) external view returns(uint);\r\n  function colFactor(address _token) external view returns(uint);\r\n  function depositLimit(address _lendingPair, address _token) external view returns(uint);\r\n  function borrowLimit(address _lendingPair, address _token) external view returns(uint);\r\n  function originFee(address _token) external view returns(uint);\r\n  function depositsEnabled() external view returns(bool);\r\n  function borrowingEnabled() external view returns(bool);\r\n  function setFeeRecipient(address _feeRecipient) external;\r\n  function tokenPrice(address _token) external view returns(uint);\r\n  function tokenSupported(address _token) external view returns(bool);\r\n  function setRewardDistribution(address _value) external;\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n  address public pendingOwner;\r\n\r\n  event OwnershipTransferInitiated(address indexed previousOwner, address indexed newOwner);\r\n  event OwnershipTransferConfirmed(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() {\r\n    owner = msg.sender;\r\n    emit OwnershipTransferConfirmed(address(0), owner);\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(isOwner(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  function isOwner() public view returns (bool) {\r\n    return msg.sender == owner;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) external onlyOwner {\r\n    require(_newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferInitiated(owner, _newOwner);\r\n    pendingOwner = _newOwner;\r\n  }\r\n\r\n  function acceptOwnership() external {\r\n    require(msg.sender == pendingOwner, \"Ownable: caller is not pending owner\");\r\n    emit OwnershipTransferConfirmed(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\n// Calling setTotalRewardPerBlock, addPool or setReward, pending rewards will be changed.\r\n// Since all pools are likely to get accrued every hour or so, this is an acceptable deviation.\r\n// Accruing all pools here may consume too much gas.\r\n// up to the point of exceeding the gas limit if there are too many pools.\r\n\r\ncontract RewardDistribution is Ownable {\r\n\r\n  using Address for address;\r\n\r\n  struct Pool {\r\n    address pair;\r\n    address token;\r\n    bool    isSupply;\r\n    uint    points;             // How many allocation points assigned to this pool.\r\n    uint    lastRewardBlock;    // Last block number that reward distribution occurs.\r\n    uint    accRewardsPerToken; // Accumulated total rewards, multiplied by 1e12\r\n  }\r\n\r\n  struct PoolPosition {\r\n    uint pid;\r\n    bool added; // To prevent duplicates.\r\n  }\r\n\r\n  IPairFactory public immutable factory;\r\n  IController  public immutable controller;\r\n  IERC20  public immutable rewardToken;\r\n  Pool[]  public pools;\r\n  uint    public totalRewardPerBlock;\r\n  uint    public totalPoints;\r\n\r\n  // Pair[token][isSupply] supply = true, borrow = false\r\n  mapping (address => mapping (address => mapping (bool => PoolPosition))) public pidByPairToken;\r\n  // rewardSnapshot[pid][account]\r\n  mapping (uint => mapping (address => uint)) public rewardSnapshot;\r\n\r\n  event PoolUpdate(\r\n    uint    indexed pid,\r\n    address indexed pair,\r\n    address indexed token,\r\n    bool    isSupply,\r\n    uint    points\r\n  );\r\n\r\n  event RewardRateUpdate(uint value);\r\n\r\n  constructor(\r\n    IController  _controller,\r\n    IPairFactory _factory,\r\n    IERC20  _rewardToken,\r\n    uint    _totalRewardPerBlock\r\n  ) {\r\n    controller = _controller;\r\n    factory = _factory;\r\n    rewardToken = _rewardToken;\r\n    totalRewardPerBlock = _totalRewardPerBlock;\r\n  }\r\n\r\n  // Lending pair will never call this for feeRecipient\r\n  function distributeReward(address _account, address _token) external {\r\n    _onlyLendingPair();\r\n    address pair = msg.sender;\r\n    _distributeReward(_account, pair, _token, true);\r\n    _distributeReward(_account, pair, _token, false);\r\n  }\r\n\r\n  // Pending rewards will be changed. See class comments.\r\n  function addPool(\r\n    address _pair,\r\n    address _token,\r\n    bool    _isSupply,\r\n    uint    _points\r\n  ) external onlyOwner {\r\n\r\n    require(\r\n      pidByPairToken[_pair][_token][_isSupply].added == false,\r\n      \"RewardDistribution: already added\"\r\n    );\r\n\r\n    require(\r\n      ILendingPair(_pair).tokenA() == _token || ILendingPair(_pair).tokenB() == _token,\r\n      \"RewardDistribution: invalid token\"\r\n    );\r\n\r\n    totalPoints += _points;\r\n\r\n    pools.push(Pool({\r\n      pair:     _pair,\r\n      token:    _token,\r\n      isSupply: _isSupply,\r\n      points:   _points,\r\n      lastRewardBlock: block.number,\r\n      accRewardsPerToken: 0\r\n    }));\r\n\r\n    uint pid = pools.length - 1;\r\n\r\n    pidByPairToken[_pair][_token][_isSupply] = PoolPosition({\r\n      pid: pid,\r\n      added: true\r\n    });\r\n\r\n    emit PoolUpdate(pid, _pair, _token, _isSupply, _points);\r\n  }\r\n\r\n  // Pending rewards will be changed. See class comments.\r\n  function setReward(\r\n    address _pair,\r\n    address _token,\r\n    bool    _isSupply,\r\n    uint    _points\r\n  ) external onlyOwner {\r\n\r\n    uint pid = _getPid(_pair, _token, _isSupply);\r\n    accruePool(pid);\r\n\r\n    totalPoints = totalPoints - pools[pid].points + _points;\r\n    pools[pid].points = _points;\r\n\r\n    emit PoolUpdate(pid, _pair, _token, _isSupply, _points);\r\n  }\r\n\r\n  // Pending rewards will be changed. See class comments.\r\n  function setTotalRewardPerBlock(uint _value) external onlyOwner {\r\n    totalRewardPerBlock = _value;\r\n    emit RewardRateUpdate(_value);\r\n  }\r\n\r\n  function accrueAllPools() public {\r\n      uint length = pools.length;\r\n      for (uint pid = 0; pid < length; ++pid) {\r\n        accruePool(pid);\r\n      }\r\n  }\r\n\r\n  function accruePool(uint _pid) public {\r\n    Pool storage pool = pools[_pid];\r\n    pool.accRewardsPerToken += _pendingRewardPerToken(pool);\r\n    pool.lastRewardBlock = block.number;\r\n  }\r\n\r\n  function pendingSupplyReward(address _account, address _pair, address _token) public view returns(uint) {\r\n    if (_poolExists(_pair, _token, true)) {\r\n      return _pendingAccountReward(_getPid(_pair, _token, true), _account);\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  function pendingBorrowReward(address _account, address _pair, address _token) public view returns(uint) {\r\n    if (_poolExists(_pair, _token, false)) {\r\n      return _pendingAccountReward(_getPid(_pair, _token, false), _account);\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  function pendingTokenReward(address _account, address _pair, address _token) public view returns(uint) {\r\n    return pendingSupplyReward(_account, _pair, _token) + pendingBorrowReward(_account, _pair, _token);\r\n  }\r\n\r\n  function pendingAccountReward(address _account, address _pair) external view returns(uint) {\r\n    ILendingPair pair = ILendingPair(_pair);\r\n    return pendingTokenReward(_account, _pair, pair.tokenA()) + pendingTokenReward(_account, _pair, pair.tokenB());\r\n  }\r\n\r\n  function supplyBlockReward(address _pair, address _token) external view returns(uint) {\r\n    return _poolRewardRate(_pair, _token, true);\r\n  }\r\n\r\n  function borrowBlockReward(address _pair, address _token) external view returns(uint) {\r\n    return _poolRewardRate(_pair, _token, false);\r\n  }\r\n\r\n  function poolLength() external view returns (uint) {\r\n    return pools.length;\r\n  }\r\n\r\n  // Allows to migrate rewards to a new staking contract.\r\n  function migrateRewards(address _recipient, uint _amount) external onlyOwner {\r\n    rewardToken.transfer(_recipient, _amount);\r\n  }\r\n\r\n  function _transferReward(address _to, uint _amount) internal {\r\n    if (_amount > 0) {\r\n      uint rewardTokenBal = rewardToken.balanceOf(address(this));\r\n      if (_amount > rewardTokenBal) {\r\n        rewardToken.transfer(_to, rewardTokenBal);\r\n      } else {\r\n        rewardToken.transfer(_to, _amount);\r\n      }\r\n    }\r\n  }\r\n\r\n  function _distributeReward(address _account, address _pair, address _token, bool _isSupply) internal {\r\n\r\n    if (_poolExists(_pair, _token, _isSupply)) {\r\n\r\n      uint pid = _getPid(_pair, _token, _isSupply);\r\n\r\n      accruePool(pid);\r\n      _transferReward(_account, _pendingAccountReward(pid, _account));\r\n\r\n      Pool memory pool = _getPool(_pair, _token, _isSupply);\r\n      rewardSnapshot[pid][_account] = pool.accRewardsPerToken;\r\n    }\r\n  }\r\n\r\n  function _poolRewardRate(address _pair, address _token, bool _isSupply) internal view returns(uint) {\r\n\r\n    if (_poolExists(_pair, _token, _isSupply)) {\r\n\r\n      Pool memory pool = _getPool(_pair, _token, _isSupply);\r\n      return totalRewardPerBlock * pool.points / totalPoints;\r\n\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  function _pendingAccountReward(uint _pid, address _account) internal view returns(uint) {\r\n    Pool memory pool = pools[_pid];\r\n\r\n    pool.accRewardsPerToken += _pendingRewardPerToken(pool);\r\n    uint rewardsPerTokenDelta = pool.accRewardsPerToken - rewardSnapshot[_pid][_account];\r\n    return rewardsPerTokenDelta * _stakedAccount(pool, _account) / 1e12;\r\n  }\r\n\r\n  function _pendingRewardPerToken(Pool memory _pool) internal view returns(uint) {\r\n    uint totalStaked = _stakedTotal(_pool);\r\n\r\n    if (_pool.lastRewardBlock == 0 || totalStaked == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint blocksElapsed = block.number - _pool.lastRewardBlock;\r\n    return blocksElapsed * _poolRewardRate(_pool.pair, _pool.token, _pool.isSupply) * 1e12 / totalStaked;\r\n  }\r\n\r\n  function _getPool(address _pair, address _token, bool _isSupply) internal view returns(Pool memory) {\r\n    return pools[_getPid(_pair, _token, _isSupply)];\r\n  }\r\n\r\n  function _getPid(address _pair, address _token, bool _isSupply) internal view returns(uint) {\r\n    PoolPosition memory poolPosition = pidByPairToken[_pair][_token][_isSupply];\r\n    require(poolPosition.added, \"RewardDistribution: invalid pool\");\r\n\r\n    return poolPosition.pid;\r\n  }\r\n\r\n  function _poolExists(address _pair, address _token, bool _isSupply) internal view returns(bool) {\r\n    return pidByPairToken[_pair][_token][_isSupply].added;\r\n  }\r\n\r\n  function _stakedTotal(Pool memory _pool) internal view returns(uint) {\r\n    ILendingPair pair = ILendingPair(_pool.pair);\r\n    uint feeRecipientBalance = pair.lpToken(_pool.token).balanceOf(_feeRecipient());\r\n\r\n    if (_pool.isSupply) {\r\n      // stake of feeRecipient should not be included in the reward pool\r\n      return pair.lpToken(_pool.token).totalSupply() - feeRecipientBalance;\r\n    } else {\r\n      // feeRecipient will never have any debt\r\n      return pair.totalDebt(_pool.token);\r\n    }\r\n  }\r\n\r\n  function _stakedAccount(Pool memory _pool, address _account) internal view returns(uint) {\r\n    ILendingPair pair = ILendingPair(_pool.pair);\r\n\r\n    if (_account == _feeRecipient()) {\r\n      return 0;\r\n    } else if (_pool.isSupply) {\r\n      return pair.lpToken(_pool.token).balanceOf(_account);\r\n    } else {\r\n      return pair.debtOf(_pool.token, _account);\r\n    }\r\n  }\r\n\r\n  function _onlyLendingPair() internal view {\r\n\r\n    if (msg.sender.isContract()) {\r\n      address factoryPair = factory.pairByTokens(ILendingPair(msg.sender).tokenA(), ILendingPair(msg.sender).tokenB());\r\n      require(factoryPair == msg.sender, \"RewardDistribution: caller not lending pair\");\r\n\r\n    } else {\r\n      revert(\"RewardDistribution: caller not lending pair\");\r\n    }\r\n  }\r\n\r\n  function _feeRecipient() internal view returns(address) {\r\n    return controller.feeRecipient();\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IController\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"contract IPairFactory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalRewardPerBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSupply\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"name\":\"PoolUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RewardRateUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrueAllPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"accruePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isSupply\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_points\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"borrowBlockReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"distributeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IPairFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"migrateRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"pendingAccountReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"pendingBorrowReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"pendingSupplyReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"pendingTokenReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"pidByPairToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"added\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSupply\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardsPerToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isSupply\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_points\",\"type\":\"uint256\"}],\"name\":\"setReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setTotalRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"supplyBlockReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RewardDistribution","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000045ee906e9cfae0aabdb194d6180a3a119d4376c400000000000000000000000023b74796b72f995e14a5e3ff2156dad9653256cf00000000000000000000000008a75dbc7167714ceac1a8e43a8d643a4edd625a0000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a895c21f7c3f7790c22c7799a8bdbeb442663fcef3579a7b0ec85748651656d6"}]}