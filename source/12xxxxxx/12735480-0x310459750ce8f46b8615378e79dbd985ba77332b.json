{"status":"1","message":"OK","result":[{"SourceCode":"# SPDX-License-Identifier: MIT\r\n# @author Lido <info@lido.fi>\r\n# @version 0.2.12\r\n\r\n\r\nCURVE_ETH_INDEX: constant(uint256) = 0\r\nCURVE_STETH_INDEX: constant(uint256) = 1\r\n\r\n# Note: check out the unstructured storage upgrade guide before making changes\r\n# to the variable order after the deployment to prevent storage collisions\r\n# https://docs.openzeppelin.com/upgrades-plugins/1.x/proxies#unstructured-storage-proxie\r\n\r\nadmin: public(address)\r\nmax_safe_price_difference: public(uint256)\r\nsafe_price_value: public(uint256)\r\nsafe_price_timestamp: public(uint256)\r\ncurve_pool_address: public(address)\r\nstable_swap_oracle_address: public(address)\r\n\r\n\r\ninterface StableSwap:\r\n    def get_dy(i: int128, j: int128, x: uint256) -> uint256: view\r\n\r\n\r\ninterface StableSwapStateOracle:\r\n    def stethPrice() -> uint256: view\r\n\r\n\r\nevent SafePriceUpdated:\r\n    from_price: uint256\r\n    to_price: uint256\r\n\r\nevent AdminChanged:\r\n    admin: address\r\n\r\nevent MaxSafePriceDifferenceChanged:\r\n    max_safe_price_difference: uint256\r\n\r\n@external\r\ndef initialize(\r\n    max_safe_price_difference: uint256,\r\n    stable_swap_oracle_address: address,\r\n    curve_pool_address: address,\r\n    admin: address\r\n):\r\n    \"\"\"\r\n    @dev Initializes the feed.\r\n\r\n    @param max_safe_price_difference maximum allowed safe price change. 10000 equals to 100%. Max value allowed is 1000 (10%)\r\n    @param admin Contract admin address, that's allowed to change the maximum allowed price change\r\n    @param curve_pool_address Curve stEth/Eth pool address\r\n    @param stable_swap_oracle_address Stable swap oracle address\r\n    \"\"\"\r\n    assert self.curve_pool_address == ZERO_ADDRESS\r\n    assert max_safe_price_difference <= 1000\r\n    assert stable_swap_oracle_address != ZERO_ADDRESS\r\n    assert curve_pool_address != ZERO_ADDRESS\r\n\r\n    self.max_safe_price_difference = max_safe_price_difference\r\n    self.admin = admin\r\n    self.stable_swap_oracle_address = stable_swap_oracle_address\r\n    self.curve_pool_address = curve_pool_address\r\n\r\n\r\n@view\r\n@internal\r\ndef _percentage_diff(new: uint256, old: uint256) -> uint256:\r\n    if new > old :\r\n        return (new - old) * 10000 / old\r\n    else:\r\n        return (old - new) * 10000 / old\r\n\r\n\r\n@view\r\n@external\r\ndef safe_price() -> (uint256, uint256):\r\n    \"\"\"\r\n    @dev Returns the cached safe price and its timestamp. Reverts if no cached price was set.\r\n    \"\"\"\r\n    safe_price_timestamp: uint256 = self.safe_price_timestamp\r\n    assert safe_price_timestamp != 0\r\n    return (self.safe_price_value, safe_price_timestamp)\r\n\r\n\r\n@view\r\n@internal\r\ndef _current_price() -> (uint256, bool, uint256):\r\n    pool_price: uint256 = StableSwap(self.curve_pool_address).get_dy(CURVE_STETH_INDEX, CURVE_ETH_INDEX, 10**18)\r\n    oracle_price: uint256 = StableSwapStateOracle(self.stable_swap_oracle_address).stethPrice()\r\n    has_changed_unsafely: bool = self._percentage_diff(pool_price, oracle_price) > self.max_safe_price_difference\r\n    return (pool_price, has_changed_unsafely, oracle_price)\r\n\r\n\r\n@view\r\n@external\r\ndef full_price_info() -> (uint256, bool, uint256):\r\n    \"\"\"\r\n    @dev Returns the current pool price, whether the price is safe, and the anchor price.\r\n    \"\"\"\r\n    current_price: uint256 = 0\r\n    has_changed_unsafely: bool = True\r\n    oracle_price: uint256 = 0\r\n    current_price, has_changed_unsafely, oracle_price = self._current_price()\r\n    is_safe: bool = current_price <= 10**18 and not has_changed_unsafely\r\n    return (current_price, is_safe, oracle_price)\r\n\r\n\r\n@view\r\n@external\r\ndef current_price() -> (uint256, bool):\r\n    \"\"\"\r\n    @dev Returns the current pool price and whether the price is safe.\r\n    \"\"\"\r\n    current_price: uint256 = 0\r\n    has_changed_unsafely: bool = True\r\n    oracle_price: uint256 = 0\r\n    current_price, has_changed_unsafely, oracle_price = self._current_price()\r\n    is_safe: bool = current_price <= 10**18 and not has_changed_unsafely\r\n    return (current_price, is_safe)\r\n\r\n\r\n@internal\r\ndef _update_safe_price() -> uint256:\r\n    price: uint256 = 0\r\n    has_changed_unsafely: bool = True\r\n    _: uint256 = 0\r\n    price, has_changed_unsafely, _ = self._current_price()\r\n    assert not has_changed_unsafely, \"price is not safe\"\r\n\r\n    price = min(10**18, price)\r\n    log SafePriceUpdated(self.safe_price_value, price)\r\n\r\n    self.safe_price_value = price\r\n    self.safe_price_timestamp = block.timestamp\r\n\r\n    return price\r\n\r\n\r\n@external\r\ndef update_safe_price() -> uint256:\r\n    \"\"\"\r\n    @dev Sets the cached safe price to the current pool price.\r\n\r\n    If the price is higher than 10**18, sets the cached safe price to 10**18.\r\n    If the price is not safe for any other reason, reverts.\r\n    \"\"\"\r\n    return self._update_safe_price()\r\n\r\n\r\n@external\r\ndef fetch_safe_price(max_age: uint256) -> (uint256, uint256):\r\n    \"\"\"\r\n    @dev Returns the cached safe price and its timestamp.\r\n\r\n    Calls `update_safe_price()` prior to that if the cached safe price\r\n    is older than `max_age` seconds.\r\n    \"\"\"\r\n    safe_price_timestamp: uint256 = self.safe_price_timestamp\r\n    if safe_price_timestamp == 0 or block.timestamp - safe_price_timestamp > max_age:\r\n        price: uint256 = self._update_safe_price()\r\n        return (price, block.timestamp)\r\n    else:\r\n        return (self.safe_price_value, safe_price_timestamp)\r\n\r\n\r\n@external\r\ndef set_admin(admin: address):\r\n    \"\"\"\r\n    @dev Updates the admin address.\r\n\r\n    May only be called by the current admin.\r\n    \"\"\"\r\n    assert msg.sender == self.admin\r\n    self.admin = admin\r\n    log AdminChanged(admin)\r\n\r\n\r\n@external\r\ndef set_max_safe_price_difference(max_safe_price_difference: uint256):\r\n    \"\"\"\r\n    @dev Updates the maximum difference between the safe price and the time-shifted price.\r\n\r\n    May only be called by the admin.\r\n    Maximal difference accepted is 10% (1000)\r\n    \"\"\"\r\n    assert msg.sender == self.admin\r\n    assert max_safe_price_difference <= 1000\r\n    self.max_safe_price_difference = max_safe_price_difference\r\n    log MaxSafePriceDifferenceChanged(max_safe_price_difference)","ABI":"[{\"name\":\"SafePriceUpdated\",\"inputs\":[{\"name\":\"from_price\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"to_price\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"AdminChanged\",\"inputs\":[{\"name\":\"admin\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"MaxSafePriceDifferenceChanged\",\"inputs\":[{\"name\":\"max_safe_price_difference\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"max_safe_price_difference\",\"type\":\"uint256\"},{\"name\":\"stable_swap_oracle_address\",\"type\":\"address\"},{\"name\":\"curve_pool_address\",\"type\":\"address\"},{\"name\":\"admin\",\"type\":\"address\"}],\"outputs\":[],\"gas\":143068},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"safe_price\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":4702},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"full_price_info\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":15350},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"current_price\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"gas\":15276},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"update_safe_price\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":103863},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"fetch_safe_price\",\"inputs\":[{\"name\":\"max_age\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":106382},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_admin\",\"inputs\":[{\"name\":\"admin\",\"type\":\"address\"}],\"outputs\":[],\"gas\":39075},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_max_safe_price_difference\",\"inputs\":[{\"name\":\"max_safe_price_difference\",\"type\":\"uint256\"}],\"outputs\":[],\"gas\":39109},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admin\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2628},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"max_safe_price_difference\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2658},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"safe_price_value\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2688},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"safe_price_timestamp\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2718},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"curve_pool_address\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2748},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"stable_swap_oracle_address\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2778}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.12","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}