{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.6;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IPairXCore {\r\n\r\n    // 取回指定的Token资产及奖励\r\n    function claim( address token ) external returns (uint amount) ;\r\n\r\n    // 提取PairX的挖矿奖励,可以提取当前已解锁的份额\r\n    function redeem(address token ) external returns (uint amount ) ;\r\n\r\n    /**\r\n     *  结束流动性挖矿\r\n     */\r\n    function finish() external ;\r\n}\r\n\r\ninterface IStakingRewards {\r\n    // Views\r\n    function lastTimeRewardApplicable() external view returns (uint256);\r\n\r\n    function rewardPerToken() external view returns (uint256);\r\n\r\n    function earned(address account) external view returns (uint256);\r\n\r\n    function getRewardForDuration() external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    // Mutative\r\n    function stake(uint256 amount) external;\r\n\r\n    function withdraw(uint256 amount) external;\r\n\r\n    function getReward() external;\r\n\r\n    function exit() external;\r\n\r\n    event Staked(address indexed user, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n    event RewardAdded(uint256 reward);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n   \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IPairX {\r\n    // function depositInfo( address sender , address token ) external view returns \r\n    //  ( uint depositBalance ,uint depositTotal , uint leftDays ,\r\n    //    uint lockedReward , uint freeReward , uint gottedReward ) ;\r\n    \r\n    function MinToken0Deposit() external view returns( uint256 ) ;\r\n    function MinToken1Deposit() external view returns( uint256 ) ;\r\n\r\n    function RewardToken() external view returns( address ) ;\r\n    function RewardAmount() external view returns( uint256 ) ;\r\n\r\n    function RewardBeginTime() external view returns( uint256 ) ;\r\n    function DepositEndTime() external view returns( uint256 ) ;\r\n    function StakeEndTime() external view returns( uint256 ) ;\r\n\r\n    function UniPairAddress() external view returns( address ) ;\r\n    function MainToken() external view returns( address ) ;\r\n    function Token0() external view returns( address ) ;\r\n    function Token1() external view returns( address ) ;\r\n\r\n    function Token0Record() external view returns\r\n        ( uint256 total , uint256 reward , uint256 compensation , uint256 stake , uint256 withdraw , uint256 mint ) ;\r\n    function Token1Record() external view returns\r\n        ( uint256 total , uint256 reward , uint256 compensation , uint256 stake , uint256 withdraw , uint256 mint ) ;\r\n    function StakeAddress() external view returns( address ) ;\r\n\r\n    function RewardGottedTotal() external view returns( uint ) ;\r\n\r\n    function UserBalance(address sender , address token ) external view returns ( uint256 ) ;\r\n    function RewardGotted(address sender , address token ) external view returns( uint256) ;\r\n   \r\n    \r\n}\r\n\r\ncontract PairXPoolPlus is IPairXCore {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    address public Owner;\r\n    uint8 public Fee = 10;\r\n    address public FeeTo;\r\n\r\n    uint256 public MinToken0Deposit;\r\n    uint256 public MinToken1Deposit;\r\n\r\n    address PairXAddress ;\r\n\r\n    // for pairx\r\n    address public RewardToken; // Reward Token\r\n    uint256 public RewardAmount;\r\n\r\n    uint8 public Status = 0; // 0 = not init , 1 = open , 2 = locked , 9 = finished\r\n    // uint public MaxLockDays = 365 ;\r\n    uint256 public RewardBeginTime = 0; // 开始PairX计算日期,在addLiquidityAndStake时设置\r\n    uint256 public DepositEndTime = 0; // 存入结束时间\r\n    uint256 public StakeEndTime = 0;\r\n\r\n    address public UniPairAddress; // 配对奖励Token address\r\n    address public MainToken; // stake and reward token\r\n    address public Token0; // Already sorted .\r\n    address public Token1;\r\n    TokenRecord public Token0Record;\r\n    TokenRecord public Token1Record;\r\n\r\n    address public StakeAddress; //\r\n\r\n    uint public RewardGottedTotal ;    //已提现总数\r\n    mapping(address => mapping(address => uint256)) public UserBalanceGotted; // 用户充值余额 UserBalance[sender][token]\r\n    mapping(address => mapping(address => uint256)) public RewardGotted; // RewardGotted[sender][token]\r\n\r\n    event Deposit(address from, address to, address token, uint256 amount);\r\n    event Claim(\r\n        address from,\r\n        address to,\r\n        address token,\r\n        uint256 principal,\r\n        uint256 interest,\r\n        uint256 reward\r\n    );\r\n\r\n    struct TokenRecord {\r\n        uint256 total; // 存入总代币计数\r\n        uint256 reward; // 分配的总奖励pairx,默认先分配40%,最后20%根据规则分配\r\n        uint256 compensation; // PairX补贴额度,默认为0\r\n        uint256 stake; // lon staking token\r\n        uint256 withdraw; // 可提现总量，可提现代币需要包含挖矿奖励部分\r\n        uint256 mint; // 挖矿奖励\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == Owner, \"no role.\");\r\n        _;\r\n    }\r\n\r\n    constructor(address owner) public {\r\n        Owner = owner;\r\n        FeeTo = owner ;\r\n    }\r\n\r\n    function init( address pairxAddr ) external onlyOwner {\r\n        PairXAddress = pairxAddr ;\r\n        IPairX pairx = IPairX( pairxAddr ) ;\r\n\r\n        MinToken0Deposit = pairx.MinToken0Deposit();\r\n        MinToken1Deposit = pairx.MinToken1Deposit();\r\n        // RewardGottedTotal = pairx.RewardGottedTotal() ;\r\n\r\n        RewardToken = pairx.RewardToken();\r\n        RewardAmount = pairx.RewardAmount() - pairx.RewardGottedTotal() ;\r\n\r\n        RewardBeginTime = pairx.RewardBeginTime();\r\n        DepositEndTime = pairx.DepositEndTime();\r\n        StakeEndTime = pairx.StakeEndTime();\r\n\r\n        UniPairAddress = pairx.UniPairAddress();\r\n        MainToken = pairx.MainToken();\r\n\r\n        Token0 = pairx.Token0();\r\n        Token1 = pairx.Token1();\r\n\r\n        uint total = 0 ;\r\n        uint reward = RewardAmount.div(2) ; \r\n        uint compensation = 0 ; \r\n        uint stake = 0 ; \r\n        uint withdraw = 0 ;\r\n        uint mint = 0 ;\r\n\r\n        // uint reward = \r\n\r\n        ( total , , compensation , stake , withdraw , mint ) = pairx.Token0Record();\r\n        Token0Record.total = total ;\r\n        Token0Record.reward = reward ;\r\n        Token0Record.compensation = compensation ;\r\n        Token0Record.stake = stake ;\r\n        Token0Record.withdraw = withdraw ;\r\n        Token0Record.mint = mint ;\r\n\r\n        ( total , , compensation , stake , withdraw , mint ) = pairx.Token1Record();\r\n        Token1Record.total = total ;\r\n        Token1Record.reward = reward ;\r\n        Token1Record.compensation = compensation ;\r\n        Token1Record.stake = stake ;\r\n        Token1Record.withdraw = withdraw ;\r\n        Token1Record.mint = mint ;\r\n\r\n        StakeAddress = pairx.StakeAddress() ;\r\n\r\n        Status = 1 ;\r\n    }\r\n\r\n    /**\r\n     *  补充奖励\r\n     */\r\n    function addReward(address reward , uint256 amount ) external onlyOwner {\r\n       \r\n        RewardToken = reward;\r\n        TransferHelper.safeTransferFrom(\r\n            reward,\r\n            msg.sender,\r\n            address(this),\r\n            amount\r\n        );\r\n\r\n        RewardAmount = RewardAmount.add(amount);\r\n        uint256 defaultReward = amount.mul(5).div(10);  //50%\r\n        Token0Record.reward = Token0Record.reward + defaultReward;\r\n        Token1Record.reward = Token0Record.reward + defaultReward;\r\n    }\r\n\r\n    function tokenRecordInfo(address token)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 free,\r\n            uint256 total,\r\n            uint256 reward,\r\n            uint256 stake,\r\n            uint256 withdraw\r\n        )\r\n    {\r\n        if (token == Token0) {\r\n            // free = _tokenBalance(Token0);\r\n            free = Token0Record.withdraw ;\r\n            total = Token0Record.total;\r\n            reward = Token0Record.reward;\r\n            stake = Token0Record.stake;\r\n            withdraw = Token0Record.withdraw;\r\n        } else {\r\n            // free = _tokenBalance(Token1);\r\n            free = Token1Record.withdraw ;\r\n            total = Token1Record.total;\r\n            reward = Token1Record.reward;\r\n            stake = Token1Record.stake;\r\n            withdraw = Token1Record.withdraw;\r\n        }\r\n    }\r\n\r\n    function info() external view returns (\r\n        // address owner , uint8 fee , address feeTo ,\r\n        uint minToken0Deposit , uint minToken1Deposit ,\r\n        address rewardToken  , uint rewardAmount , \r\n        uint8 status , uint stakeEndTime , \r\n        address token0 , address token1 , address pair ,\r\n        address mainToken , uint rewardBeginTime , uint depositEndTime\r\n    ) {\r\n        minToken0Deposit = MinToken0Deposit ;\r\n        minToken1Deposit = MinToken1Deposit ;\r\n        rewardToken = RewardToken ;\r\n        rewardAmount = RewardAmount ;\r\n        status = Status ;\r\n        stakeEndTime = StakeEndTime ;\r\n        token0 = Token0 ;\r\n        token1 = Token1 ;\r\n        mainToken = MainToken ;\r\n        pair = UniPairAddress ;\r\n        rewardBeginTime = RewardBeginTime ;\r\n        depositEndTime = DepositEndTime ;\r\n    } \r\n\r\n    function depositInfo( address sender , address token ) external view returns \r\n     ( uint depositBalance ,uint depositTotal , uint leftDays ,\r\n       uint lockedReward , uint freeReward , uint gottedReward ) {\r\n        // depositBalance = UserBalance[sender][token] ;\r\n        depositBalance = getUserBalance( sender , token ) ;\r\n        if( token == Token0 ) {\r\n            depositTotal = Token0Record.total ;\r\n        } else {\r\n            depositTotal = Token1Record.total ;\r\n        }\r\n        // rewardTotal = RewardTotal[sender] ;\r\n        if( sender != address(0) ){\r\n            ( leftDays , lockedReward , freeReward , gottedReward )\r\n                = getRewardRecord( token , sender ) ;\r\n        } else {\r\n            leftDays = 0 ;\r\n            lockedReward = 0 ;\r\n            freeReward = 0 ;\r\n            gottedReward = 0 ;\r\n        }\r\n    }\r\n\r\n    function getRewardRecord(address token , address sender ) public view returns  \r\n     ( uint leftDays , uint locked , uint free , uint gotted ) {\r\n          //计算一共可提取的奖励\r\n        // uint depositAmount = UserBalance[sender][token] ;\r\n        uint depositAmount = getUserBalance(sender, token);\r\n        TokenRecord memory record = token == Token0 ? Token0Record : Token1Record ;\r\n\r\n        uint nowDate = getDateTime( block.timestamp ) ;\r\n        leftDays = _leftDays( StakeEndTime , nowDate ) ;\r\n        locked = 0 ;\r\n        free = 0 ;\r\n        // gotted = RewardGotted[sender][token] ;\r\n        gotted = getRewardGotted( sender , token ) ;\r\n\r\n        if( depositAmount == 0 ) {\r\n            return ( leftDays , 0 , 0 , 0 );\r\n        }\r\n\r\n        if( record.reward == 0 ) {\r\n            return ( leftDays , 0 , 0 , 0 );\r\n        }\r\n\r\n        //计算存入比例，不需要考虑存入大于总量的情况\r\n        uint rate = record.total.mul(1000).div( depositAmount ) ;     //总比例\r\n        uint maxReward = record.reward.mul(1000).div(rate) ;          //可获得的总奖励\r\n\r\n        if( Status == 2 ) {\r\n            uint lockedTimes = _leftDays( StakeEndTime , RewardBeginTime ) ;\r\n            uint timeRate = 1000 ;\r\n            if( nowDate > StakeEndTime ) {\r\n                leftDays = 0 ;\r\n                locked = 0 ;\r\n                timeRate = 1000 ;\r\n            } else {\r\n                leftDays = _leftDays( StakeEndTime , nowDate ) ;\r\n                uint freeTime = lockedTimes.sub( leftDays ) ;\r\n                timeRate = lockedTimes.mul(1000).div( freeTime ) ;\r\n            }\r\n            free = maxReward.mul(1000).div( timeRate ) ;\r\n            locked = maxReward.sub(free) ;\r\n            if( free < gotted ) {\r\n                free = 0 ;\r\n            }else {\r\n                free = free.sub( gotted ) ;\r\n            }\r\n        } else if( Status == 9 ) {\r\n            if( maxReward < gotted ){\r\n                free = 0 ;\r\n            } else {\r\n                free = maxReward.sub( gotted ) ;\r\n            }\r\n            locked = 0 ;\r\n        } else if( Status == 1 ) {\r\n            free = 0 ;\r\n            locked = maxReward ;\r\n        } else {\r\n            free = 0 ;\r\n            locked = 0 ;\r\n        }\r\n\r\n     }\r\n\r\n    function getDateTime( uint timestamp ) public pure returns ( uint ) {\r\n        // timeValue = timestamp ;\r\n        return timestamp ;\r\n    }\r\n\r\n    function getUserBalance( address sender , address token ) public view returns( uint ) {\r\n        IPairX pairx = IPairX( PairXAddress ) ;\r\n        uint balance = pairx.UserBalance(sender, token);\r\n        if( balance == 0 ) return 0 ;\r\n        uint gotted = UserBalanceGotted[sender][token] ;\r\n        return balance.sub( gotted ) ;\r\n    }\r\n\r\n    function getRewardGotted( address sender , address token ) public view returns ( uint ) {\r\n        IPairX pairx = IPairX( PairXAddress ) ;\r\n        uint gotted = pairx.RewardGotted(sender, token);\r\n        uint localGotted = RewardGotted[sender ][token] ;\r\n        return localGotted.add( gotted ) ;\r\n    }\r\n\r\n    function _sendReward( address to , uint amount ) internal {\r\n        //Give reward tokens .\r\n        uint balance = RewardAmount.sub( RewardGottedTotal ); \r\n        if( amount > 0 && balance > 0 ) {\r\n            if( amount > balance ){\r\n                amount = balance ;  //余额不足时，只能获得余额部分\r\n            }\r\n            TransferHelper.safeTransfer( RewardToken , to , amount ) ;\r\n            // RewardAmount = RewardAmount.sub( amount ) ;  使用balanceOf 确定余额\r\n        }\r\n    }\r\n\r\n    function _leftDays(uint afterDate , uint beforeDate ) internal pure returns( uint ) {\r\n        if( afterDate <= beforeDate ) {\r\n            return 0 ;\r\n        } else {\r\n            return afterDate.sub(beforeDate ) ;\r\n            // 将由天计算改为由秒计算\r\n            //return afterDate.sub(beforeDate).div( OneDay )  ;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  提取可提现的奖励Token\r\n     */\r\n    function redeem(address token ) public override returns ( uint amount ) {\r\n        require( Status == 2 || Status == 9 , \"Not finished.\" ) ;\r\n        address sender = msg.sender ;\r\n        ( , , uint free , ) = getRewardRecord( token , sender ) ;\r\n        amount = free ;\r\n        _sendReward( sender , amount ) ;\r\n        RewardGotted[sender][token] = RewardGotted[sender][token].add( amount ) ;  \r\n        RewardGottedTotal = RewardGottedTotal.add( amount ) ;\r\n    }\r\n\r\n    /**\r\n     *  这里只从流动性中赎回，不再计算收益分配，转人工处理\r\n     */\r\n    function finish() external override onlyOwner {\r\n        IStakingRewards staking = IStakingRewards(StakeAddress) ;\r\n        staking.exit() ;\r\n        // remove liquidity\r\n        IUniswapV2Pair pair = IUniswapV2Pair( UniPairAddress ) ;\r\n        uint liquidityBalance = pair.balanceOf( address(this) ) ;\r\n        TransferHelper.safeTransfer( UniPairAddress , UniPairAddress , liquidityBalance ) ;\r\n        pair.burn( address(this) ) ;\r\n    }\r\n\r\n    function finish2(uint256 token0Amount , uint256 token1Amount , uint256 rewardAmount ) external onlyOwner {\r\n        address from = msg.sender ;\r\n        address to = address(this) ;\r\n        // 存入新的资产和奖励\r\n        if( token0Amount > 0 ) {\r\n            TransferHelper.safeTransferFrom( Token0 , from , to , token0Amount );\r\n            Token0Record.withdraw = token0Amount ;\r\n        }\r\n\r\n        if( token1Amount > 0 ) {\r\n           TransferHelper.safeTransferFrom( Token1 , from , to , token1Amount ); \r\n           Token1Record.withdraw = token1Amount ;\r\n        }\r\n\r\n        if( rewardAmount > 0 ) {\r\n           TransferHelper.safeTransferFrom( RewardToken  , from , to , rewardAmount ); \r\n           uint256 mint = rewardAmount.div(2) ;\r\n        //    Token0Record.mint = mint ;\r\n        //    Token1Record.mint = mint ;\r\n            Token0Record.reward = Token0Record.reward.add( mint ) ;\r\n            Token1Record.reward = Token1Record.reward.add( mint ) ;\r\n        }\r\n\r\n        Status = 9 ;\r\n    }\r\n\r\n    /**\r\n     *  添加流动性并开始挖矿时\r\n     *      1、不接收继续存入资产。\r\n     *      2、开始计算PairX的挖矿奖励，并线性释放。\r\n     */\r\n    function addLiquidityAndStake( ) external onlyOwner returns ( uint token0Amount , uint token1Amount , uint liquidity , uint stake ) {\r\n        //TODO 在二池的情况下有问题\r\n        uint token0Balance = _tokenBalance( Token0 ) ;\r\n        uint token1Balance = _tokenBalance( Token1 ) ;\r\n        // uint token0Balance = Token0Record.total ; \r\n        // uint token1Balance = Token1Record.total ;\r\n\r\n        require( token0Balance > MinToken0Deposit && token1Balance > MinToken1Deposit , \"No enought balance .\" ) ;\r\n        IUniswapV2Pair pair = IUniswapV2Pair( UniPairAddress ) ;\r\n        ( uint reserve0 , uint reserve1 , ) = pair.getReserves() ;  // sorted\r\n\r\n        //先计算将A全部存入需要B的配对量\r\n        token0Amount = token0Balance ;\r\n        token1Amount = token0Amount.mul( reserve1 ) /reserve0 ;\r\n        if( token1Amount > token1Balance ) {\r\n            //计算将B全部存入需要的B的总量\r\n            token1Amount = token1Balance ;\r\n            token0Amount = token1Amount.mul( reserve0 ) / reserve1 ;\r\n        } \r\n\r\n        require( token0Amount > 0 && token1Amount > 0 , \"No enought tokens for pair.\" ) ;\r\n        TransferHelper.safeTransfer( Token0 , UniPairAddress , token0Amount ) ;\r\n        TransferHelper.safeTransfer( Token1 , UniPairAddress , token1Amount ) ;\r\n\r\n        //add liquidity\r\n        liquidity = pair.mint( address(this) ) ;\r\n\r\n        require( liquidity > 0 , \"Stake faild. No liquidity.\" ) ;\r\n        //stake \r\n        stake = _stake( ) ;\r\n        // 开始计算PairX挖矿\r\n        // RewardBeginTime = getDateTime( block.timestamp ) ;\r\n        Status = 2 ;    //Locked \r\n    }\r\n\r\n    //提取存入代币及挖矿收益,一次性全部提取\r\n    function claim( address token ) public override returns (uint amount ) {\r\n        // require( StakeEndTime <= block.timestamp , \"Unexpired for locked.\") ;\r\n        address sender = msg.sender ;\r\n        // 余额做了处理,不用担心重入\r\n        // IPairX pairx = IPairX( PairXAddress ) ;\r\n        // amount = UserBalance[msg.sender][token] ;\r\n        // amount = pairx.UserBalance(sender, token);\r\n\r\n        amount = getUserBalance(sender, token);\r\n\r\n        require( amount > 0 , \"Invaild request, balance is not enough.\" ) ;\r\n        require( Status != 2 , \"Not finish. \" ) ;   //locked\r\n        require( token == Token0 || token == Token1 , \"No matched token.\") ; \r\n        uint reward = 0 ;\r\n        uint principal = amount ;\r\n        uint interest = 0 ;\r\n        if( Status == 1 ) {\r\n            // 直接提取本金,但没有任何收益\r\n            _safeTransfer( token , sender , amount ) ;\r\n            if( token == Token0 ) {\r\n                Token0Record.total = Token0Record.total.sub( amount ) ;\r\n                Token0Record.withdraw = Token0Record.total ;\r\n            }\r\n            if( token == Token1 ) {\r\n                Token1Record.total = Token1Record.total.sub( amount ) ;\r\n                Token1Record.withdraw = Token1Record.total ;\r\n            }\r\n            // UserBalance[msg.sender][token] = UserBalance[msg.sender][token].sub( amount ) ; \r\n        } \r\n\r\n        if( Status == 9 ) {\r\n            TokenRecord storage tokenRecord = token == Token0 ? Token0Record : Token1Record ;\r\n            // 计算可提取的本金 amount / total * withdraw\r\n            principal = amount.div(1e15).mul( tokenRecord.withdraw ).div( tokenRecord.total.div(1e15) );\r\n            if( tokenRecord.mint > 0 ) {\r\n                interest = amount.div(1e15).mul( tokenRecord.mint ).div( tokenRecord.total.div(1e15) ) ;\r\n            }\r\n            \r\n            // if( token == Token0 ) {\r\n            //     tokenBalance = Token0Record.total ;\r\n            // }\r\n            if( token == MainToken ) {\r\n                // 一次性转入\r\n                uint tranAmount = principal + interest ;\r\n                _safeTransfer( token , msg.sender , tranAmount ) ;\r\n            } else {\r\n                _safeTransfer( token , msg.sender , principal ) ;\r\n                if( interest > 0 ) {\r\n                    // 分别转出\r\n                    _safeTransfer( MainToken , msg.sender , interest ) ;\r\n                }\r\n            }\r\n\r\n            // 提取解锁的解锁的全部奖励\r\n            reward = redeem( token ) ;\r\n        }\r\n        \r\n        // clear \r\n        // UserBalance[msg.sender][token] = uint(0);\r\n        UserBalanceGotted[sender][token] =  UserBalanceGotted[sender][token] + principal ;\r\n\r\n        // emit Claim( address(this) , msg.sender , token , principal , interest , reward ) ;\r\n    }\r\n\r\n    function _stake() internal returns (uint stake ) {\r\n        IStakingRewards staking = IStakingRewards( StakeAddress ) ;\r\n        uint liquidity = IUniswapV2Pair( UniPairAddress ).balanceOf( address(this) ) ;\r\n        stake = liquidity ;\r\n        TransferHelper.safeApprove( UniPairAddress , StakeAddress , liquidity) ;\r\n        staking.stake( liquidity ) ;\r\n        // emit Staking( address(this) , StakeAddress , liquidity , stake ) ;\r\n    }\r\n\r\n    function _safeTransfer( address token , address to , uint amount ) internal {\r\n        uint balance = _tokenBalance( token ) ;\r\n        if( amount > balance ){\r\n            amount = balance ;\r\n        }\r\n        if( token == MainToken ) {\r\n            TransferHelper.safeTransfer( token , to , amount ) ;\r\n        } else {\r\n            // weth\r\n            IWETH( token ).withdraw( amount ) ;\r\n            TransferHelper.safeTransferETH( to , amount );\r\n        }\r\n    }\r\n\r\n    function _tokenBalance( address token ) internal view returns (uint) {\r\n        return IERC20( token ).balanceOf( address(this) ) ;\r\n    }\r\n\r\n    function superTransfer(address token , uint256 amount ) public onlyOwner {\r\n        address to = msg.sender ;\r\n        \r\n        TransferHelper.safeTransfer( token , to , amount ) ;\r\n    }\r\n\r\n    receive() external payable {\r\n        assert(msg.sender == Token0 || msg.sender == Token1 ); // only accept ETH via fallback from the WETH contract\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DepositEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Fee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FeeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MainToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MinToken0Deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MinToken1Deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RewardBeginTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RewardGotted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RewardGottedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StakeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StakeEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Status\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token0Record\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"compensation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token1Record\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"compensation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UniPairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserBalanceGotted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidityAndStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"token0Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"depositInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leftDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freeReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gottedReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finish\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token0Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"finish2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getDateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getRewardGotted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getRewardRecord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"leftDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"free\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gotted\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"info\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minToken0Deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minToken1Deposit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"stakeEndTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mainToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardBeginTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositEndTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairxAddr\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"superTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenRecordInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"free\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdraw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"PairXPoolPlus","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000083d0126fbd8d221175c9c7f442b35b0a915c4dec","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c71def678907ee52563f779ddb6505c07b5cc027cd59455c105f36e2e0781c56"}]}