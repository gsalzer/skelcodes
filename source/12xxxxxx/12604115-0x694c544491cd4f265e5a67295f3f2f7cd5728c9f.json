{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AddressRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\\\";\\nimport \\\"./interfaces/IAddressRegistry.sol\\\";\\n\\n/**\\n * @title APY.Finance's address registry\\n * @author APY.Finance\\n * @notice The address registry has two important purposes, one which\\n *         is fairly concrete and another abstract.\\n *\\n *         1. The registry enables components of the APY.Finance system\\n *         and external systems to retrieve core addresses reliably\\n *         even when the functionality may move to a different\\n *         address.\\n *\\n *         2. The registry also makes explicit which contracts serve\\n *         as primary entrypoints for interacting with different\\n *         components.  Not every contract is registered here, only\\n *         the ones properly deserving of an identifier.  This helps\\n *         define explicit boundaries between groups of contracts,\\n *         each of which is logically cohesive.\\n */\\ncontract AddressRegistry is\\n    Initializable,\\n    OwnableUpgradeSafe,\\n    IAddressRegistry\\n{\\n    /* ------------------------------- */\\n    /* impl-specific storage variables */\\n    /* ------------------------------- */\\n    /** @notice the same address as the proxy admin; used\\n     *  to protect init functions for upgrades */\\n    address public proxyAdmin;\\n    bytes32[] internal _idList;\\n    mapping(bytes32 => address) internal _idToAddress;\\n\\n    /* ------------------------------- */\\n\\n    event AdminChanged(address);\\n    event AddressRegistered(bytes32 id, address _address);\\n\\n    /**\\n     * @dev Since the proxy delegate calls to this \\\"logic\\\" contract, any\\n     * storage set by the logic contract's constructor during deploy is\\n     * disregarded and this function is needed to initialize the proxy\\n     * contract's storage according to this contract's layout.\\n     *\\n     * Since storage is not set yet, there is no simple way to protect\\n     * calling this function with owner modifiers.  Thus the OpenZeppelin\\n     * `initializer` modifier protects this function from being called\\n     * repeatedly.  It should be called during the deployment so that\\n     * it cannot be called by someone else later.\\n     */\\n    function initialize(address adminAddress) external initializer {\\n        require(adminAddress != address(0), \\\"INVALID_ADMIN\\\");\\n\\n        // initialize ancestor storage\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n\\n        // initialize impl-specific storage\\n        setAdminAddress(adminAddress);\\n    }\\n\\n    /**\\n     * @dev Dummy function to show how one would implement an init function\\n     * for future upgrades.  Note the `initializer` modifier can only be used\\n     * once in the entire contract, so we can't use it here.  Instead,\\n     * we set the proxy admin address as a variable and protect this\\n     * function with `onlyAdmin`, which only allows the proxy admin\\n     * to call this function during upgrades.\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    function initializeUpgrade() external virtual onlyAdmin {}\\n\\n    function setAdminAddress(address adminAddress) public onlyOwner {\\n        require(adminAddress != address(0), \\\"INVALID_ADMIN\\\");\\n        proxyAdmin = adminAddress;\\n        emit AdminChanged(adminAddress);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the proxy admin.\\n     */\\n    modifier onlyAdmin() {\\n        require(msg.sender == proxyAdmin, \\\"ADMIN_ONLY\\\");\\n        _;\\n    }\\n\\n    /// @notice Returns the list of all registered identifiers.\\n    function getIds() public view override returns (bytes32[] memory) {\\n        return _idList;\\n    }\\n\\n    /// @dev block ETHER transfers as the registry will never need it\\n    receive() external payable {\\n        revert(\\\"DONT_SEND_ETHER\\\");\\n    }\\n\\n    /**\\n     * @notice Register address with identifier.\\n     * @dev Using an existing ID will replace the old address with new.\\n     *      Currently there is no way to remove an ID, as attempting to\\n     *      register the zero address will revert.\\n     */\\n    function registerAddress(bytes32 id, address _address) public onlyOwner {\\n        require(_address != address(0), \\\"Invalid address\\\");\\n        if (_idToAddress[id] == address(0)) {\\n            // id wasn't registered before, so add it to the list\\n            _idList.push(id);\\n        }\\n        _idToAddress[id] = _address;\\n        emit AddressRegistered(id, _address);\\n    }\\n\\n    /// @dev Convenient method to register multiple addresses at once.\\n    function registerMultipleAddresses(\\n        bytes32[] calldata ids,\\n        address[] calldata addresses\\n    ) external onlyOwner {\\n        require(ids.length == addresses.length, \\\"Inputs have differing length\\\");\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            bytes32 id = ids[i];\\n            address _address = addresses[i];\\n            registerAddress(id, _address);\\n        }\\n    }\\n\\n    /// @notice Retrieve the address corresponding to the identifier.\\n    function getAddress(bytes32 id) public view override returns (address) {\\n        address _address = _idToAddress[id];\\n        require(_address != address(0), \\\"Missing address\\\");\\n        return _address;\\n    }\\n\\n    /**\\n     * @notice Get the address for the APY Manager.\\n     * @dev Not just a helper function, this makes explicit a key ID\\n     *      for the system.\\n     */\\n    function managerAddress() public view returns (address) {\\n        return getAddress(\\\"manager\\\");\\n    }\\n\\n    /**\\n     * @notice Get the address for the TVLManager,\\n     *         aka the \\\"Chainlink Registry\\\", as it is used by\\n     *         Chainlink nodes to compute the deployed value of the\\n     *         APY.Finance system.\\n     * @dev Not just a helper function, this makes explicit a key ID\\n     *      for the system.\\n     */\\n    function chainlinkRegistryAddress() public view returns (address) {\\n        return getAddress(\\\"chainlinkRegistry\\\");\\n    }\\n\\n    /**\\n     * @notice Get the address for APY.Finance's DAI stablecoin pool.\\n     * @dev Not just a helper function, this makes explicit a key ID\\n     *      for the system.\\n     */\\n    function daiPoolAddress() public view returns (address) {\\n        return getAddress(\\\"daiPool\\\");\\n    }\\n\\n    /**\\n     * @notice Get the address for APY.Finance's USDC stablecoin pool.\\n     * @dev Not just a helper function, this makes explicit a key ID\\n     *      for the system.\\n     */\\n    function usdcPoolAddress() public view returns (address) {\\n        return getAddress(\\\"usdcPool\\\");\\n    }\\n\\n    /**\\n     * @notice Get the address for APY.Finance's USDT stablecoin pool.\\n     * @dev Not just a helper function, this makes explicit a key ID\\n     *      for the system.\\n     */\\n    function usdtPoolAddress() public view returns (address) {\\n        return getAddress(\\\"usdtPool\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n\\n\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAddressRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\n\\n/**\\n * @title Interface to access APY.Finance's address registry\\n * @author APY.Finance\\n * @notice The address registry has two important purposes, one which\\n *         is fairly concrete and another abstract.\\n *\\n *         1. The registry enables components of the APY.Finance system\\n *         and external systems to retrieve core addresses reliably\\n *         even when the functionality may move to a different\\n *         address.\\n *\\n *         2. The registry also makes explicit which contracts serve\\n *         as primary entrypoints for interacting with different\\n *         components.  Not every contract is registered here, only\\n *         the ones properly deserving of an identifier.  This helps\\n *         define explicit boundaries between groups of contracts,\\n *         each of which is logically cohesive.\\n */\\ninterface IAddressRegistry {\\n    /**\\n     * @notice Returns the list of identifiers for core components of\\n     *         the APY.Finance system.\\n     * @return List of identifiers\\n     */\\n    function getIds() external view returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Returns the current address represented by an identifier\\n     *         for a core component.\\n     * @param id Component identifier\\n     * @return The current address represented by an identifier\\n     */\\n    function getAddress(bytes32 id) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/testing/AddressRegistryUpgraded.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../AddressRegistry.sol\\\";\\n\\ncontract AddressRegistryUpgraded is AddressRegistry {\\n    bool public newlyAddedVariable;\\n\\n    function initializeUpgrade() public override onlyAdmin {\\n        newlyAddedVariable = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/PoolToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./interfaces/ILiquidityPool.sol\\\";\\nimport \\\"./interfaces/IDetailedERC20.sol\\\";\\n\\ncontract PoolToken is\\n    ILiquidityPool,\\n    Initializable,\\n    OwnableUpgradeSafe,\\n    ReentrancyGuardUpgradeSafe,\\n    PausableUpgradeSafe,\\n    ERC20UpgradeSafe\\n{\\n    using SafeMath for uint256;\\n    using SafeERC20 for IDetailedERC20;\\n    uint256 public constant DEFAULT_APT_TO_UNDERLYER_FACTOR = 1000;\\n\\n    /* ------------------------------- */\\n    /* impl-specific storage variables */\\n    /* ------------------------------- */\\n    address public proxyAdmin;\\n    bool public addLiquidityLock;\\n    bool public redeemLock;\\n    IDetailedERC20 public underlyer;\\n    AggregatorV3Interface public priceAgg;\\n\\n    /* ------------------------------- */\\n\\n    function initialize(\\n        address adminAddress,\\n        IDetailedERC20 _underlyer,\\n        AggregatorV3Interface _priceAgg\\n    ) external initializer {\\n        require(adminAddress != address(0), \\\"INVALID_ADMIN\\\");\\n        require(address(_underlyer) != address(0), \\\"INVALID_TOKEN\\\");\\n        require(address(_priceAgg) != address(0), \\\"INVALID_AGG\\\");\\n\\n        // initialize ancestor storage\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __ReentrancyGuard_init_unchained();\\n        __Pausable_init_unchained();\\n        __ERC20_init_unchained(\\\"APY Pool Token\\\", \\\"APT\\\");\\n\\n        // initialize impl-specific storage\\n        setAdminAddress(adminAddress);\\n        addLiquidityLock = false;\\n        redeemLock = false;\\n        underlyer = _underlyer;\\n        setPriceAggregator(_priceAgg);\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    function initializeUpgrade() external virtual onlyAdmin {}\\n\\n    function setAdminAddress(address adminAddress) public onlyOwner {\\n        require(adminAddress != address(0), \\\"INVALID_ADMIN\\\");\\n        proxyAdmin = adminAddress;\\n        emit AdminChanged(adminAddress);\\n    }\\n\\n    function setPriceAggregator(AggregatorV3Interface _priceAgg)\\n        public\\n        onlyOwner\\n    {\\n        require(address(_priceAgg) != address(0), \\\"INVALID_AGG\\\");\\n        priceAgg = _priceAgg;\\n        emit PriceAggregatorChanged(address(_priceAgg));\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == proxyAdmin, \\\"ADMIN_ONLY\\\");\\n        _;\\n    }\\n\\n    function lock() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unlock() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"DONT_SEND_ETHER\\\");\\n    }\\n\\n    /**\\n     * @notice Mint corresponding amount of APT tokens for sent token amount.\\n     * @dev If no APT tokens have been minted yet, fallback to a fixed ratio.\\n     */\\n    function addLiquidity(uint256 tokenAmt)\\n        external\\n        virtual\\n        override\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        require(!addLiquidityLock, \\\"LOCKED\\\");\\n        require(tokenAmt > 0, \\\"AMOUNT_INSUFFICIENT\\\");\\n        require(\\n            underlyer.allowance(msg.sender, address(this)) >= tokenAmt,\\n            \\\"ALLOWANCE_INSUFFICIENT\\\"\\n        );\\n\\n        // calculateMintAmount() is not used because deposit value\\n        // is needed for the event\\n        uint256 depositEthValue = getEthValueFromTokenAmount(tokenAmt);\\n        uint256 poolTotalEthValue = getPoolTotalEthValue();\\n        uint256 mintAmount =\\n            _calculateMintAmount(depositEthValue, poolTotalEthValue);\\n\\n        _mint(msg.sender, mintAmount);\\n        underlyer.safeTransferFrom(msg.sender, address(this), tokenAmt);\\n\\n        emit DepositedAPT(\\n            msg.sender,\\n            underlyer,\\n            tokenAmt,\\n            mintAmount,\\n            depositEthValue,\\n            getPoolTotalEthValue()\\n        );\\n    }\\n\\n    function getPoolTotalEthValue() public view virtual returns (uint256) {\\n        return getEthValueFromTokenAmount(underlyer.balanceOf(address(this)));\\n    }\\n\\n    function getAPTEthValue(uint256 amount) public view returns (uint256) {\\n        require(totalSupply() > 0, \\\"INSUFFICIENT_TOTAL_SUPPLY\\\");\\n        return (amount.mul(getPoolTotalEthValue())).div(totalSupply());\\n    }\\n\\n    function getEthValueFromTokenAmount(uint256 amount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (amount == 0) {\\n            return 0;\\n        }\\n        uint256 decimals = underlyer.decimals();\\n        return ((getTokenEthPrice()).mul(amount)).div(10**decimals);\\n    }\\n\\n    function getTokenAmountFromEthValue(uint256 ethValue)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 tokenEthPrice = getTokenEthPrice();\\n        uint256 decimals = underlyer.decimals();\\n        return ((10**decimals).mul(ethValue)).div(tokenEthPrice);\\n    }\\n\\n    function getTokenEthPrice() public view returns (uint256) {\\n        (, int256 price, , , ) = priceAgg.latestRoundData();\\n        require(price > 0, \\\"UNABLE_TO_RETRIEVE_ETH_PRICE\\\");\\n        return uint256(price);\\n    }\\n\\n    /** @notice Disable deposits. */\\n    function lockAddLiquidity() external onlyOwner {\\n        addLiquidityLock = true;\\n        emit AddLiquidityLocked();\\n    }\\n\\n    /** @notice Enable deposits. */\\n    function unlockAddLiquidity() external onlyOwner {\\n        addLiquidityLock = false;\\n        emit AddLiquidityUnlocked();\\n    }\\n\\n    /**\\n     * @notice Redeems APT amount for its underlying token amount.\\n     * @param aptAmount The amount of APT tokens to redeem\\n     */\\n    function redeem(uint256 aptAmount)\\n        external\\n        virtual\\n        override\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        require(!redeemLock, \\\"LOCKED\\\");\\n        require(aptAmount > 0, \\\"AMOUNT_INSUFFICIENT\\\");\\n        require(aptAmount <= balanceOf(msg.sender), \\\"BALANCE_INSUFFICIENT\\\");\\n\\n        uint256 redeemTokenAmt = getUnderlyerAmount(aptAmount);\\n\\n        _burn(msg.sender, aptAmount);\\n        underlyer.safeTransfer(msg.sender, redeemTokenAmt);\\n\\n        emit RedeemedAPT(\\n            msg.sender,\\n            underlyer,\\n            redeemTokenAmt,\\n            aptAmount,\\n            getEthValueFromTokenAmount(redeemTokenAmt),\\n            getPoolTotalEthValue()\\n        );\\n    }\\n\\n    /** @notice Disable APT redeeming. */\\n    function lockRedeem() external onlyOwner {\\n        redeemLock = true;\\n        emit RedeemLocked();\\n    }\\n\\n    /** @notice Enable APT redeeming. */\\n    function unlockRedeem() external onlyOwner {\\n        redeemLock = false;\\n        emit RedeemUnlocked();\\n    }\\n\\n    /** @notice Calculate APT amount to be minted from deposit amount.\\n     *  @param tokenAmt The deposit amount of stablecoin\\n     *  @return The mint amount\\n     */\\n    function calculateMintAmount(uint256 tokenAmt)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 depositEthValue = getEthValueFromTokenAmount(tokenAmt);\\n        uint256 poolTotalEthValue = getPoolTotalEthValue();\\n        return _calculateMintAmount(depositEthValue, poolTotalEthValue);\\n    }\\n\\n    /**\\n     *  @dev amount of APT minted should be in same ratio to APT supply\\n     *       as token amount sent is to contract's token balance, i.e.:\\n     *\\n     *       mint amount / total supply (before deposit)\\n     *       = token amount sent / contract token balance (before deposit)\\n     */\\n    function _calculateMintAmount(\\n        uint256 depositEthAmount,\\n        uint256 totalEthAmount\\n    ) internal view returns (uint256) {\\n        uint256 totalSupply = totalSupply();\\n\\n        if (totalEthAmount == 0 || totalSupply == 0) {\\n            return depositEthAmount.mul(DEFAULT_APT_TO_UNDERLYER_FACTOR);\\n        }\\n\\n        return (depositEthAmount.mul(totalSupply)).div(totalEthAmount);\\n    }\\n\\n    /**\\n     * @notice Get the underlying amount represented by APT amount.\\n     * @param aptAmount The amount of APT tokens\\n     * @return uint256 The underlying value of the APT tokens\\n     */\\n    function getUnderlyerAmount(uint256 aptAmount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return getTokenAmountFromEthValue(getAPTEthValue(aptAmount));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuardUpgradeSafe is Initializable {\\n    bool private _notEntered;\\n\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n\\n\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract PausableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n\\n\\n        _paused = false;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20MinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20UpgradeSafe is Initializable, ContextUpgradeSafe, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n\\n    function __ERC20_init(string memory name, string memory symbol) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name, symbol);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\\n\\n\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n\\n    uint256[44] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILiquidityPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Interface for APY.Finance liquidity pools\\n * @author APY.Finance\\n * @notice Liquidity pools accept deposits and withdrawals of a single token.\\n *         APT is minted and burned to track an account's stake in the pool.\\n *         A Chainlink price aggregator is also set so the total value of the\\n *         pool can be computed.\\n */\\ninterface ILiquidityPool {\\n    event DepositedAPT(\\n        address indexed sender,\\n        IERC20 token,\\n        uint256 tokenAmount,\\n        uint256 aptMintAmount,\\n        uint256 tokenEthValue,\\n        uint256 totalEthValueLocked\\n    );\\n    event RedeemedAPT(\\n        address indexed sender,\\n        IERC20 token,\\n        uint256 redeemedTokenAmount,\\n        uint256 aptRedeemAmount,\\n        uint256 tokenEthValue,\\n        uint256 totalEthValueLocked\\n    );\\n    event AddLiquidityLocked();\\n    event AddLiquidityUnlocked();\\n    event RedeemLocked();\\n    event RedeemUnlocked();\\n    event AdminChanged(address);\\n    event PriceAggregatorChanged(address agg);\\n\\n    /**\\n     * @notice Mint corresponding amount of APT tokens for deposited stablecoin.\\n     * @param amount Amount to deposit of the underlying stablecoin\\n     */\\n    function addLiquidity(uint256 amount) external;\\n\\n    /**\\n     * @notice Redeems APT amount for its underlying stablecoin amount.\\n     * @param tokenAmount The amount of APT tokens to redeem\\n     */\\n    function redeem(uint256 tokenAmount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDetailedERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDetailedERC20 is IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/testing/TestPoolToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\n\\nimport \\\"../PoolToken.sol\\\";\\n\\n/**\\n * @dev Proxy contract to test internal variables and functions\\n *      Should not be used other than in test files!\\n */\\ncontract TestPoolToken is PoolToken {\\n    function mint(address account, uint256 amount) public {\\n        _mint(account, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) public {\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/testing/PoolTokenUpgraded.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../PoolToken.sol\\\";\\n\\ncontract PoolTokenUpgraded is PoolToken {\\n    bool public newlyAddedVariable;\\n\\n    function initializeUpgrade() public override onlyAdmin {\\n        newlyAddedVariable = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/PoolTokenV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SignedSafeMath.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./interfaces/ILiquidityPoolV2.sol\\\";\\nimport \\\"./interfaces/IDetailedERC20.sol\\\";\\nimport \\\"./interfaces/IAddressRegistryV2.sol\\\";\\nimport \\\"./MetaPoolToken.sol\\\";\\n\\n/**\\n * @title APY.Finance Pool Token\\n * @author APY.Finance\\n * @notice This token (APT) is the basic liquidity-provider token used\\n *         within the APY.Finance system.\\n *\\n *         For simplicity, it has been integrated with pool functionality\\n *         enabling users to deposit and withdraw in an underlying token,\\n *         currently one of three stablecoins.\\n *\\n *         Upon deposit of the underlyer, an appropriate amount of APT\\n *         is minted.  This amount is calculated as a share of the pool's\\n *         total value, which may change as strategies gain or lose.\\n *\\n *         The pool's total value is comprised of the value of its balance\\n *         of the underlying stablecoin and also the value of its balance\\n *         of mAPT, an internal token used by the system to track how much\\n *         is owed to the pool.  Every time the PoolManager withdraws funds\\n *         from the pool, mAPT is issued to the pool.\\n *\\n *         Upon redemption of APT (withdrawal), the user will get back\\n *         in the underlying stablecoin, the amount equivalent in value\\n *         to the user's APT share of the pool's total value.\\n *\\n *         Currently the user may not be able to redeem their full APT\\n *         balance, as the majority of funds will be deployed at any\\n *         given time.  Funds will periodically be pushed to the pools\\n *         so that each pool maintains a reserve percentage of the\\n *         pool's total value.\\n *\\n *         Later upgrades to the system will enable users to submit\\n *         withdrawal requests, which will be processed periodically\\n *         and unwind positions to free up funds.\\n */\\ncontract PoolTokenV2 is\\n    ILiquidityPoolV2,\\n    Initializable,\\n    OwnableUpgradeSafe,\\n    ReentrancyGuardUpgradeSafe,\\n    PausableUpgradeSafe,\\n    ERC20UpgradeSafe\\n{\\n    using Address for address;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n    using SafeERC20 for IDetailedERC20;\\n    uint256 public constant DEFAULT_APT_TO_UNDERLYER_FACTOR = 1000;\\n    uint256 internal constant _MAX_INT256 = 2**255 - 1;\\n\\n    event AdminChanged(address);\\n\\n    /* ------------------------------- */\\n    /* impl-specific storage variables */\\n    /* ------------------------------- */\\n\\n    // V1\\n    /// @notice used to protect init functions for upgrades\\n    address public proxyAdmin;\\n    /// @notice true if depositing is locked\\n    bool public addLiquidityLock;\\n    /// @notice true if withdrawing is locked\\n    bool public redeemLock;\\n    /// @notice underlying stablecoin\\n    IDetailedERC20 public underlyer;\\n    /// @notice USD price feed for the stablecoin\\n    // AggregatorV3Interface public priceAgg; <-- removed in V2\\n\\n    // V2\\n    /// @notice registry to fetch core platform addresses from\\n    /// @dev this slot replaces the last V1 slot for the price agg\\n    IAddressRegistryV2 public addressRegistry;\\n    /// @notice seconds since last deposit during which withdrawal fee is charged\\n    uint256 public feePeriod;\\n    /// @notice percentage charged for withdrawal fee\\n    uint256 public feePercentage;\\n    /// @notice time of last deposit\\n    mapping(address => uint256) public lastDepositTime;\\n    /// @notice percentage of pool total value available for immediate withdrawal\\n    uint256 public reservePercentage;\\n\\n    /* ------------------------------- */\\n\\n    /**\\n     * @dev Since the proxy delegate calls to this \\\"logic\\\" contract, any\\n     * storage set by the logic contract's constructor during deploy is\\n     * disregarded and this function is needed to initialize the proxy\\n     * contract's storage according to this contract's layout.\\n     *\\n     * Since storage is not set yet, there is no simple way to protect\\n     * calling this function with owner modifiers.  Thus the OpenZeppelin\\n     * `initializer` modifier protects this function from being called\\n     * repeatedly.  It should be called during the deployment so that\\n     * it cannot be called by someone else later.\\n     *\\n     * NOTE: this function is copied from the V1 contract and has already\\n     * been called during V1 deployment.  It is included here for clarity.\\n     */\\n    function initialize(\\n        address adminAddress,\\n        IDetailedERC20 _underlyer,\\n        AggregatorV3Interface _priceAgg\\n    ) external initializer {\\n        require(adminAddress != address(0), \\\"INVALID_ADMIN\\\");\\n        require(address(_underlyer) != address(0), \\\"INVALID_TOKEN\\\");\\n        require(address(_priceAgg) != address(0), \\\"INVALID_AGG\\\");\\n\\n        // initialize ancestor storage\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __ReentrancyGuard_init_unchained();\\n        __Pausable_init_unchained();\\n        __ERC20_init_unchained(\\\"APY Pool Token\\\", \\\"APT\\\");\\n\\n        // initialize impl-specific storage\\n        setAdminAddress(adminAddress);\\n        addLiquidityLock = false;\\n        redeemLock = false;\\n        underlyer = _underlyer;\\n        // setPriceAggregator(_priceAgg);  <-- deprecated in V2.\\n    }\\n\\n    /**\\n     * @dev Note the `initializer` modifier can only be used once in the\\n     * entire contract, so we can't use it here.  Instead, we protect\\n     * this function with `onlyAdmin`, which allows only the `proxyAdmin`\\n     * address to call this function.  Since that address is in fact\\n     * set to the actual proxy admin during deployment, this ensures\\n     * this function can only be called as part of a delegate call\\n     * during upgrades, i.e. in ProxyAdmin's `upgradeAndCall`.\\n     */\\n    function initializeUpgrade(address _addressRegistry)\\n        external\\n        virtual\\n        onlyAdmin\\n    {\\n        require(_addressRegistry.isContract(), \\\"INVALID_ADDRESS\\\");\\n        addressRegistry = IAddressRegistryV2(_addressRegistry);\\n        feePeriod = 1 days;\\n        feePercentage = 5;\\n        reservePercentage = 5;\\n    }\\n\\n    function setAdminAddress(address adminAddress) public onlyOwner {\\n        require(adminAddress != address(0), \\\"INVALID_ADMIN\\\");\\n        proxyAdmin = adminAddress;\\n        emit AdminChanged(adminAddress);\\n    }\\n\\n    function setAddressRegistry(address payable _addressRegistry)\\n        public\\n        onlyOwner\\n    {\\n        require(Address.isContract(_addressRegistry), \\\"INVALID_ADDRESS\\\");\\n        addressRegistry = IAddressRegistryV2(_addressRegistry);\\n    }\\n\\n    function setFeePeriod(uint256 _feePeriod) public onlyOwner {\\n        feePeriod = _feePeriod;\\n    }\\n\\n    function setFeePercentage(uint256 _feePercentage) public onlyOwner {\\n        feePercentage = _feePercentage;\\n    }\\n\\n    function setReservePercentage(uint256 _reservePercentage) public onlyOwner {\\n        reservePercentage = _reservePercentage;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the proxy admin.\\n     */\\n    modifier onlyAdmin() {\\n        require(msg.sender == proxyAdmin, \\\"ADMIN_ONLY\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Disable both depositing and withdrawals.\\n     *      Note that `addLiquidity` and `redeem` also have individual locks.\\n     */\\n    function lock() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Re-enable both depositing and withdrawals.\\n     *      Note that `addLiquidity` and `redeem` also have individual locks.\\n     */\\n    function unlock() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Mint corresponding amount of APT tokens for deposited stablecoin.\\n     * @dev If no APT tokens have been minted yet, fallback to a fixed ratio.\\n     * @param depositAmount Amount to deposit of the underlying stablecoin\\n     */\\n    function addLiquidity(uint256 depositAmount)\\n        external\\n        virtual\\n        override\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        require(!addLiquidityLock, \\\"LOCKED\\\");\\n        require(depositAmount > 0, \\\"AMOUNT_INSUFFICIENT\\\");\\n        require(\\n            underlyer.allowance(msg.sender, address(this)) >= depositAmount,\\n            \\\"ALLOWANCE_INSUFFICIENT\\\"\\n        );\\n        // solhint-disable-next-line not-rely-on-time\\n        lastDepositTime[msg.sender] = block.timestamp;\\n\\n        // calculateMintAmount() is not used because deposit value\\n        // is needed for the event\\n        uint256 depositValue = getValueFromUnderlyerAmount(depositAmount);\\n        uint256 poolTotalValue = getPoolTotalValue();\\n        uint256 mintAmount = _calculateMintAmount(depositValue, poolTotalValue);\\n\\n        _mint(msg.sender, mintAmount);\\n        underlyer.safeTransferFrom(msg.sender, address(this), depositAmount);\\n\\n        emit DepositedAPT(\\n            msg.sender,\\n            underlyer,\\n            depositAmount,\\n            mintAmount,\\n            depositValue,\\n            getPoolTotalValue()\\n        );\\n    }\\n\\n    /** @notice Disable deposits. */\\n    function lockAddLiquidity() external onlyOwner {\\n        addLiquidityLock = true;\\n        emit AddLiquidityLocked();\\n    }\\n\\n    /** @notice Enable deposits. */\\n    function unlockAddLiquidity() external onlyOwner {\\n        addLiquidityLock = false;\\n        emit AddLiquidityUnlocked();\\n    }\\n\\n    /**\\n     * @notice Redeems APT amount for its underlying stablecoin amount.\\n     * @dev May revert if there is not enough in the pool.\\n     * @param aptAmount The amount of APT tokens to redeem\\n     */\\n    function redeem(uint256 aptAmount)\\n        external\\n        virtual\\n        override\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        require(!redeemLock, \\\"LOCKED\\\");\\n        require(aptAmount > 0, \\\"AMOUNT_INSUFFICIENT\\\");\\n        require(aptAmount <= balanceOf(msg.sender), \\\"BALANCE_INSUFFICIENT\\\");\\n\\n        uint256 redeemUnderlyerAmt = getUnderlyerAmountWithFee(aptAmount);\\n        require(\\n            redeemUnderlyerAmt <= underlyer.balanceOf(address(this)),\\n            \\\"RESERVE_INSUFFICIENT\\\"\\n        );\\n\\n        _burn(msg.sender, aptAmount);\\n        underlyer.safeTransfer(msg.sender, redeemUnderlyerAmt);\\n\\n        emit RedeemedAPT(\\n            msg.sender,\\n            underlyer,\\n            redeemUnderlyerAmt,\\n            aptAmount,\\n            getValueFromUnderlyerAmount(redeemUnderlyerAmt),\\n            getPoolTotalValue()\\n        );\\n    }\\n\\n    /** @notice Disable APT redeeming. */\\n    function lockRedeem() external onlyOwner {\\n        redeemLock = true;\\n        emit RedeemLocked();\\n    }\\n\\n    /** @notice Enable APT redeeming. */\\n    function unlockRedeem() external onlyOwner {\\n        redeemLock = false;\\n        emit RedeemUnlocked();\\n    }\\n\\n    /**\\n     * @notice Calculate APT amount to be minted from deposit amount.\\n     * @param depositAmount The deposit amount of stablecoin\\n     * @return The mint amount\\n     */\\n    function calculateMintAmount(uint256 depositAmount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 depositValue = getValueFromUnderlyerAmount(depositAmount);\\n        uint256 poolTotalValue = getPoolTotalValue();\\n        return _calculateMintAmount(depositValue, poolTotalValue);\\n    }\\n\\n    /**\\n     *  @dev amount of APT minted should be in same ratio to APT supply\\n     *       as deposit value is to pool's total value, i.e.:\\n     *\\n     *       mint amount / total supply\\n     *       = deposit value / pool total value\\n     *\\n     *       For denominators, pre or post-deposit amounts can be used.\\n     *       The important thing is they are consistent, i.e. both pre-deposit\\n     *       or both post-deposit.\\n     */\\n    function _calculateMintAmount(uint256 depositValue, uint256 poolTotalValue)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalSupply = totalSupply();\\n\\n        if (poolTotalValue == 0 || totalSupply == 0) {\\n            return depositValue.mul(DEFAULT_APT_TO_UNDERLYER_FACTOR);\\n        }\\n\\n        return (depositValue.mul(totalSupply)).div(poolTotalValue);\\n    }\\n\\n    /**\\n     * @notice Get the underlying amount represented by APT amount,\\n     *         deducting early withdraw fee, if applicable.\\n     * @dev To check if fee will be applied, use `isEarlyRedeem`.\\n     * @param aptAmount The amount of APT tokens\\n     * @return uint256 The underlyer value of the APT tokens\\n     */\\n    function getUnderlyerAmountWithFee(uint256 aptAmount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 redeemUnderlyerAmt = getUnderlyerAmount(aptAmount);\\n        if (isEarlyRedeem()) {\\n            uint256 fee = redeemUnderlyerAmt.mul(feePercentage).div(100);\\n            redeemUnderlyerAmt = redeemUnderlyerAmt.sub(fee);\\n        }\\n        return redeemUnderlyerAmt;\\n    }\\n\\n    /**\\n     * @notice Get the underlying amount represented by APT amount.\\n     * @param aptAmount The amount of APT tokens\\n     * @return uint256 The underlying value of the APT tokens\\n     */\\n    function getUnderlyerAmount(uint256 aptAmount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (aptAmount == 0) {\\n            return 0;\\n        }\\n        require(totalSupply() > 0, \\\"INSUFFICIENT_TOTAL_SUPPLY\\\");\\n        // the below is mathematically equivalent to:\\n        //\\n        // getUnderlyerAmountFromValue(getAPTValue(aptAmount));\\n        //\\n        // but composing the two functions leads to early loss\\n        // of precision from division, so it's better to do it\\n        // this way:\\n        uint256 underlyerPrice = getUnderlyerPrice();\\n        uint256 decimals = underlyer.decimals();\\n        return\\n            aptAmount\\n                .mul(getPoolTotalValue())\\n                .mul(10**decimals)\\n                .div(totalSupply())\\n                .div(underlyerPrice);\\n    }\\n\\n    /**\\n     * @notice Checks if caller will be charged early withdrawal fee.\\n     * @dev `lastDepositTime` is stored each time user makes a deposit, so\\n     *      the waiting period is restarted on each deposit.\\n     * @return \\\"true\\\" when fee will apply, \\\"false\\\" when it won't.\\n     */\\n    function isEarlyRedeem() public view returns (bool) {\\n        // solhint-disable-next-line not-rely-on-time\\n        return block.timestamp.sub(lastDepositTime[msg.sender]) < feePeriod;\\n    }\\n\\n    /**\\n     * @notice Get the total USD-denominated value (in bits) of the pool's assets,\\n     *         including not only its underlyer balance, but any part of deployed\\n     *         capital that is owed to it.\\n     * @return USD value\\n     */\\n    function getPoolTotalValue() public view virtual returns (uint256) {\\n        uint256 underlyerValue = getPoolUnderlyerValue();\\n        uint256 mAptValue = getDeployedValue();\\n        return underlyerValue.add(mAptValue);\\n    }\\n\\n    /**\\n     * @notice Get the USD-denominated value (in bits) of the pool's\\n     *         underlyer balance.\\n     * @return USD value\\n     */\\n    function getPoolUnderlyerValue() public view virtual returns (uint256) {\\n        return getValueFromUnderlyerAmount(underlyer.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Get the USD-denominated value (in bits) of the pool's share\\n     *         of the deployed capital, as tracked by the mAPT token.\\n     * @return USD value\\n     */\\n    function getDeployedValue() public view virtual returns (uint256) {\\n        MetaPoolToken mApt = MetaPoolToken(addressRegistry.mAptAddress());\\n        return mApt.getDeployedValue(address(this));\\n    }\\n\\n    /**\\n     * @notice Get the USD-denominated value (in bits) represented by APT amount.\\n     * @param aptAmount APT amount\\n     * @return USD value\\n     */\\n    function getAPTValue(uint256 aptAmount) public view returns (uint256) {\\n        require(totalSupply() > 0, \\\"INSUFFICIENT_TOTAL_SUPPLY\\\");\\n        return aptAmount.mul(getPoolTotalValue()).div(totalSupply());\\n    }\\n\\n    /**\\n     * @notice Get the USD-denominated value (in bits) represented by stablecoin amount.\\n     * @param underlyerAmount amount of underlying stablecoin\\n     * @return USD value\\n     */\\n    function getValueFromUnderlyerAmount(uint256 underlyerAmount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (underlyerAmount == 0) {\\n            return 0;\\n        }\\n        uint256 decimals = underlyer.decimals();\\n        return getUnderlyerPrice().mul(underlyerAmount).div(10**decimals);\\n    }\\n\\n    /**\\n     * @notice Get the underlyer amount equivalent to given USD-denominated value (in bits).\\n     * @param value USD value\\n     * @return amount of underlying stablecoin\\n     */\\n    function getUnderlyerAmountFromValue(uint256 value)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 underlyerPrice = getUnderlyerPrice();\\n        uint256 decimals = underlyer.decimals();\\n        return (10**decimals).mul(value).div(underlyerPrice);\\n    }\\n\\n    /**\\n     * @notice Get the underlyer stablecoin's USD price (in bits).\\n     * @return USD price\\n     */\\n    function getUnderlyerPrice() public view returns (uint256) {\\n        IOracleAdapter oracleAdapter =\\n            IOracleAdapter(addressRegistry.oracleAdapterAddress());\\n        return oracleAdapter.getAssetPrice(address(underlyer));\\n    }\\n\\n    /**\\n     * @notice Get the USD value needed to meet the reserve percentage\\n     *         of the pool's deployed value.\\n     *\\n     *         This \\\"top-up\\\" value should satisfy:\\n     *\\n     *         top-up USD value + pool underlyer USD value\\n     *            = (reserve %) * pool deployed value (after unwinding)\\n     *\\n     * @dev Taking the percentage of the pool's current deployed value\\n     *      is not sufficient, because the requirement is to have the\\n     *      resulting values after unwinding capital satisfy the\\n     *      above equation.\\n     *\\n     *      More precisely:\\n     *\\n     *      R_pre = pool underlyer USD value before pushing unwound\\n     *              capital to the pool\\n     *      R_post = pool underlyer USD value after pushing\\n     *      DV_pre = pool's deployed USD value before unwinding\\n     *      DV_post = pool's deployed USD value after unwinding\\n     *      rPerc = the reserve percentage as a whole number\\n     *                          out of 100\\n     *\\n     *      We want:\\n     *\\n     *          R_post = (rPerc / 100) * DV_post          (equation 1)\\n     *\\n     *          where R_post = R_pre + top-up value\\n     *                DV_post = DV_pre - top-up value\\n     *\\n     *      Making the latter substitutions in equation 1, gives:\\n     *\\n     *      top-up value = (rPerc * DV_pre - 100 * R_pre) / (100 + rPerc)\\n     *\\n     * @return int256 The underlyer value to top-up the pool's reserve\\n     */\\n    function getReserveTopUpValue() public view returns (int256) {\\n        uint256 unnormalizedTargetValue =\\n            getDeployedValue().mul(reservePercentage);\\n        uint256 unnormalizedUnderlyerValue = getPoolUnderlyerValue().mul(100);\\n\\n        require(unnormalizedTargetValue <= _MAX_INT256, \\\"SIGNED_INT_OVERFLOW\\\");\\n        require(\\n            unnormalizedUnderlyerValue <= _MAX_INT256,\\n            \\\"SIGNED_INT_OVERFLOW\\\"\\n        );\\n        int256 topUpValue =\\n            int256(unnormalizedTargetValue)\\n                .sub(int256(unnormalizedUnderlyerValue))\\n                .div(int256(reservePercentage).add(100));\\n        return topUpValue;\\n    }\\n\\n    /**\\n     * @notice Allow `delegate` to withdraw any amount from the pool.\\n     * @dev Will fail if called twice, due to usage of `safeApprove`.\\n     * @param delegate Address to give infinite allowance to\\n     */\\n    function infiniteApprove(address delegate)\\n        external\\n        nonReentrant\\n        whenNotPaused\\n        onlyOwner\\n    {\\n        underlyer.safeApprove(delegate, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Revoke given allowance from `delegate`.\\n     * @dev Can be called even when the pool is locked.\\n     * @param delegate Address to remove allowance from\\n     */\\n    function revokeApprove(address delegate) external nonReentrant onlyOwner {\\n        underlyer.safeApprove(delegate, 0);\\n    }\\n\\n    /**\\n     * @dev This hook is in-place to block inter-user APT transfers, as it\\n     *      is one avenue that can be used by arbitrageurs to drain the\\n     *      reserves.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n        // allow minting and burning\\n        if (from == address(0) || to == address(0)) return;\\n        // block transfer between users\\n        revert(\\\"INVALID_TRANSFER\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/math/SignedSafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Multiplies two signed integers, reverts on overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Subtracts two signed integers, reverts on overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two signed integers, reverts on overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILiquidityPoolV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Interface for APY.Finance liquidity pools\\n * @author APY.Finance\\n * @notice Liquidity pools accept deposits and withdrawals of a single token.\\n *         APT is minted and burned to track an account's stake in the pool.\\n *         A Chainlink price aggregator is also set so the total value of the\\n *         pool can be computed.\\n */\\ninterface ILiquidityPoolV2 {\\n    event DepositedAPT(\\n        address indexed sender,\\n        IERC20 token,\\n        uint256 tokenAmount,\\n        uint256 aptMintAmount,\\n        uint256 tokenEthValue,\\n        uint256 totalEthValueLocked\\n    );\\n    event RedeemedAPT(\\n        address indexed sender,\\n        IERC20 token,\\n        uint256 redeemedTokenAmount,\\n        uint256 aptRedeemAmount,\\n        uint256 tokenEthValue,\\n        uint256 totalEthValueLocked\\n    );\\n    event AddLiquidityLocked();\\n    event AddLiquidityUnlocked();\\n    event RedeemLocked();\\n    event RedeemUnlocked();\\n\\n    /**\\n     * @notice Mint corresponding amount of APT tokens for deposited stablecoin.\\n     * @param amount Amount to deposit of the underlying stablecoin\\n     */\\n    function addLiquidity(uint256 amount) external;\\n\\n    /**\\n     * @notice Redeems APT amount for its underlying stablecoin amount.\\n     * @param tokenAmount The amount of APT tokens to redeem\\n     */\\n    function redeem(uint256 tokenAmount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAddressRegistryV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\n\\n/**\\n * @title Interface to access APY.Finance's address registry\\n * @author APY.Finance\\n * @notice The address registry has two important purposes, one which\\n *         is fairly concrete and another abstract.\\n *\\n *         1. The registry enables components of the APY.Finance system\\n *         and external systems to retrieve core addresses reliably\\n *         even when the functionality may move to a different\\n *         address.\\n *\\n *         2. The registry also makes explicit which contracts serve\\n *         as primary entrypoints for interacting with different\\n *         components.  Not every contract is registered here, only\\n *         the ones properly deserving of an identifier.  This helps\\n *         define explicit boundaries between groups of contracts,\\n *         each of which is logically cohesive.\\n */\\ninterface IAddressRegistryV2 {\\n    /**\\n     * @notice Returns the list of identifiers for core components of\\n     *         the APY.Finance system.\\n     * @return List of identifiers\\n     */\\n    function getIds() external view returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Returns the current address represented by an identifier\\n     *         for a core component.\\n     * @param id Component identifier\\n     * @return The current address represented by an identifier\\n     */\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function poolManagerAddress() external view returns (address);\\n\\n    function tvlManagerAddress() external view returns (address);\\n\\n    function chainlinkRegistryAddress() external view returns (address);\\n\\n    function daiPoolAddress() external view returns (address);\\n\\n    function usdcPoolAddress() external view returns (address);\\n\\n    function usdtPoolAddress() external view returns (address);\\n\\n    function mAptAddress() external view returns (address);\\n\\n    function lpSafeAddress() external view returns (address);\\n\\n    function oracleAdapterAddress() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/MetaPoolToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/IAddressRegistryV2.sol\\\";\\nimport \\\"./interfaces/IMintable.sol\\\";\\nimport \\\"./interfaces/IOracleAdapter.sol\\\";\\n\\n/**\\n * @title Meta Pool Token\\n * @author APY.Finance\\n * @notice This token is used to keep track of the capital that has been\\n * pulled from the PoolToken contracts.\\n *\\n * When the PoolManager pulls capital from the PoolToken contracts to\\n * deploy to yield farming strategies, it will mint mAPT and transfer it to\\n * the PoolToken contracts. The ratio of the mAPT held by each PoolToken\\n * to the total supply of mAPT determines the amount of the TVL dedicated to\\n * PoolToken.\\n *\\n * DEPLOY CAPITAL TO YIELD FARMING STRATEGIES\\n * Tracks the share of deployed TVL owned by an PoolToken using mAPT.\\n *\\n * +-------------+   PoolManager.fundAccount   +-------------+\\n * |             |---------------------------->|             |\\n * | PoolTokenV2 |     MetaPoolToken.mint      | PoolManager |\\n * |             |<----------------------------|             |\\n * +-------------+                             +-------------+\\n *\\n *\\n * WITHDRAW CAPITAL FROM YIELD FARMING STRATEGIES\\n * Uses mAPT to calculate the amount of capital returned to the PoolToken.\\n *\\n * +-------------+    PoolManager.withdrawFromAccount   +-------------+\\n * |             |<-------------------------------------|             |\\n * | PoolTokenV2 |          MetaPoolToken.burn          | PoolManager |\\n * |             |------------------------------------->|             |\\n * +-------------+                                      +-------------+\\n */\\ncontract MetaPoolToken is\\n    Initializable,\\n    OwnableUpgradeSafe,\\n    ReentrancyGuardUpgradeSafe,\\n    PausableUpgradeSafe,\\n    ERC20UpgradeSafe,\\n    IMintable\\n{\\n    using SafeMath for uint256;\\n    uint256 public constant DEFAULT_MAPT_TO_UNDERLYER_FACTOR = 1000;\\n\\n    /* ------------------------------- */\\n    /* impl-specific storage variables */\\n    /* ------------------------------- */\\n    /// @notice used to protect init functions for upgrades\\n    address public proxyAdmin;\\n    /// @notice used to protect mint and burn function\\n    IAddressRegistryV2 public addressRegistry;\\n\\n    /* ------------------------------- */\\n\\n    event Mint(address acccount, uint256 amount);\\n    event Burn(address acccount, uint256 amount);\\n    event AdminChanged(address);\\n\\n    /**\\n     * @dev Since the proxy delegate calls to this \\\"logic\\\" contract, any\\n     * storage set by the logic contract's constructor during deploy is\\n     * disregarded and this function is needed to initialize the proxy\\n     * contract's storage according to this contract's layout.\\n     *\\n     * Since storage is not set yet, there is no simple way to protect\\n     * calling this function with owner modifiers.  Thus the OpenZeppelin\\n     * `initializer` modifier protects this function from being called\\n     * repeatedly.  It should be called during the deployment so that\\n     * it cannot be called by someone else later.\\n     */\\n    function initialize(address adminAddress, address _addressRegistry)\\n        external\\n        initializer\\n    {\\n        require(adminAddress != address(0), \\\"INVALID_ADMIN\\\");\\n\\n        // initialize ancestor storage\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __ReentrancyGuard_init_unchained();\\n        __Pausable_init_unchained();\\n        __ERC20_init_unchained(\\\"APY MetaPool Token\\\", \\\"mAPT\\\");\\n\\n        // initialize impl-specific storage\\n        setAdminAddress(adminAddress);\\n        setAddressRegistry(_addressRegistry);\\n    }\\n\\n    /**\\n     * @dev Dummy function to show how one would implement an init function\\n     * for future upgrades.  Note the `initializer` modifier can only be used\\n     * once in the entire contract, so we can't use it here.  Instead,\\n     * we set the proxy admin address as a variable and protect this\\n     * function with `onlyAdmin`, which only allows the proxy admin\\n     * to call this function during upgrades.\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    function initializeUpgrade() external virtual onlyAdmin {}\\n\\n    function setAdminAddress(address adminAddress) public onlyOwner {\\n        require(adminAddress != address(0), \\\"INVALID_ADMIN\\\");\\n        proxyAdmin = adminAddress;\\n        emit AdminChanged(adminAddress);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the proxy admin.\\n     */\\n    modifier onlyAdmin() {\\n        require(msg.sender == proxyAdmin, \\\"ADMIN_ONLY\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the PoolManager.\\n     */\\n    modifier onlyManager() {\\n        require(\\n            msg.sender == addressRegistry.poolManagerAddress(),\\n            \\\"MANAGER_ONLY\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Mint specified amount of mAPT to the given account.\\n     * @dev Only the manager can call this.\\n     * @param account address to mint to\\n     * @param amount mint amount\\n     */\\n    function mint(address account, uint256 amount)\\n        public\\n        override\\n        nonReentrant\\n        onlyManager\\n    {\\n        require(amount > 0, \\\"INVALID_MINT_AMOUNT\\\");\\n        IOracleAdapter oracleAdapter = _getOracleAdapter();\\n        oracleAdapter.lock();\\n        _mint(account, amount);\\n        emit Mint(account, amount);\\n    }\\n\\n    /**\\n     * @notice Burn specified amount of mAPT from the given account.\\n     * @dev Only the manager can call this.\\n     * @param account address to burn from\\n     * @param amount burn amount\\n     */\\n    function burn(address account, uint256 amount)\\n        public\\n        override\\n        nonReentrant\\n        onlyManager\\n    {\\n        require(amount > 0, \\\"INVALID_BURN_AMOUNT\\\");\\n        IOracleAdapter oracleAdapter = _getOracleAdapter();\\n        oracleAdapter.lock();\\n        _burn(account, amount);\\n        emit Burn(account, amount);\\n    }\\n\\n    /**\\n     * @notice Get the USD value of all assets in the system, not just those\\n     *         being managed by the AccountManager but also the pool underlyers.\\n     *\\n     *         Note this is NOT the same as the total value represented by the\\n     *         total mAPT supply, i.e. the \\\"deployed capital\\\".\\n     *\\n     * @dev Chainlink nodes read from the TVLManager, pull the\\n     *      prices from market feeds, and submits the calculated total value\\n     *      to an aggregator contract.\\n     *\\n     *      USD prices have 8 decimals.\\n     *\\n     * @return \\\"Total Value Locked\\\", the USD value of all APY Finance assets.\\n     */\\n    function getTvl() public view returns (uint256) {\\n        IOracleAdapter oracleAdapter = _getOracleAdapter();\\n        return oracleAdapter.getTvl();\\n    }\\n\\n    function _getOracleAdapter() internal view returns (IOracleAdapter) {\\n        address oracleAdapterAddress = addressRegistry.oracleAdapterAddress();\\n        return IOracleAdapter(oracleAdapterAddress);\\n    }\\n\\n    /** @notice Calculate mAPT amount to be minted for given pool's underlyer amount.\\n     *  @param depositAmount Pool underlyer amount to be converted\\n     *  @param tokenPrice Pool underlyer's USD price (in wei) per underlyer token\\n     *  @param decimals Pool underlyer's number of decimals\\n     *  @dev Price parameter is in units of wei per token (\\\"big\\\" unit), since\\n     *       attempting to express wei per token bit (\\\"small\\\" unit) will be\\n     *       fractional, requiring fixed-point representation.  This means we need\\n     *       to also pass in the underlyer's number of decimals to do the appropriate\\n     *       multiplication in the calculation.\\n     */\\n    function calculateMintAmount(\\n        uint256 depositAmount,\\n        uint256 tokenPrice,\\n        uint256 decimals\\n    ) public view returns (uint256) {\\n        uint256 depositValue = depositAmount.mul(tokenPrice).div(10**decimals);\\n        uint256 totalValue = getTvl();\\n        return _calculateMintAmount(depositValue, totalValue);\\n    }\\n\\n    /**\\n     *  @dev amount of APT minted should be in same ratio to APT supply\\n     *       as deposit value is to pool's total value, i.e.:\\n     *\\n     *       mint amount / total supply\\n     *       = deposit value / pool total value\\n     *\\n     *       For denominators, pre or post-deposit amounts can be used.\\n     *       The important thing is they are consistent, i.e. both pre-deposit\\n     *       or both post-deposit.\\n     */\\n    function _calculateMintAmount(uint256 depositValue, uint256 totalValue)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalSupply = totalSupply();\\n\\n        if (totalValue == 0 || totalSupply == 0) {\\n            return depositValue.mul(DEFAULT_MAPT_TO_UNDERLYER_FACTOR);\\n        }\\n\\n        return depositValue.mul(totalSupply).div(totalValue);\\n    }\\n\\n    /** @notice Calculate amount in pool's underlyer token from given mAPT amount.\\n     *  @param mAptAmount mAPT amount to be converted\\n     *  @param tokenPrice Pool underlyer's USD price (in wei) per underlyer token\\n     *  @param decimals Pool underlyer's number of decimals\\n     *  @dev Price parameter is in units of wei per token (\\\"big\\\" unit), since\\n     *       attempting to express wei per token bit (\\\"small\\\" unit) will be\\n     *       fractional, requiring fixed-point representation.  This means we need\\n     *       to also pass in the underlyer's number of decimals to do the appropriate\\n     *       multiplication in the calculation.\\n     */\\n    function calculatePoolAmount(\\n        uint256 mAptAmount,\\n        uint256 tokenPrice,\\n        uint256 decimals\\n    ) public view returns (uint256) {\\n        if (mAptAmount == 0) return 0;\\n        require(totalSupply() > 0, \\\"INSUFFICIENT_TOTAL_SUPPLY\\\");\\n        uint256 poolValue = mAptAmount.mul(getTvl()).div(totalSupply());\\n        uint256 poolAmount = poolValue.mul(10**decimals).div(tokenPrice);\\n        return poolAmount;\\n    }\\n\\n    /**\\n     * @notice Get the USD-denominated value (in wei) of the pool's share\\n     *         of the deployed capital, as tracked by the mAPT token.\\n     * @return uint256\\n     */\\n    function getDeployedValue(address pool) public view returns (uint256) {\\n        uint256 balance = balanceOf(pool);\\n        uint256 totalSupply = totalSupply();\\n        if (totalSupply == 0 || balance == 0) return 0;\\n\\n        return getTvl().mul(balance).div(totalSupply);\\n    }\\n\\n    /**\\n     * @notice Sets the address registry\\n     * @dev only callable by owner\\n     * @param _addressRegistry the address of the registry\\n     */\\n    function setAddressRegistry(address _addressRegistry) public onlyOwner {\\n        require(Address.isContract(_addressRegistry), \\\"INVALID_ADDRESS\\\");\\n        addressRegistry = IAddressRegistryV2(_addressRegistry);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMintable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\n\\ninterface IMintable {\\n    function mint(address account, uint256 amount) external;\\n\\n    function burn(address account, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOracleAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\n\\ninterface IOracleAdapter {\\n    struct Value {\\n        uint256 value;\\n        uint256 periodEnd;\\n    }\\n\\n    function setTvl(uint256 value, uint256 period) external;\\n\\n    function setAssetValue(\\n        address asset,\\n        uint256 value,\\n        uint256 period\\n    ) external;\\n\\n    function lock() external;\\n\\n    function defaultLockPeriod() external returns (uint256 period);\\n\\n    function setDefaultLockPeriod(uint256 period) external;\\n\\n    function lockFor(uint256 period) external;\\n\\n    function unlock() external;\\n\\n    function getAssetPrice(address asset) external view returns (uint256);\\n\\n    function getTvl() external view returns (uint256);\\n\\n    function isLocked() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/testing/TestPoolTokenV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\n\\nimport \\\"../PoolTokenV2.sol\\\";\\n\\n/**\\n * @dev Proxy contract to test internal variables and functions\\n *      Should not be used other than in test files!\\n */\\ncontract TestPoolTokenV2 is PoolTokenV2 {\\n    function mint(address account, uint256 amount) public {\\n        _mint(account, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) public {\\n        _burn(account, amount);\\n    }\\n\\n    function testMint(address account, uint256 amount) public {\\n        _mint(account, amount);\\n    }\\n\\n    function testBurn(address account, uint256 amount) public {\\n        _burn(account, amount);\\n    }\\n\\n    function testTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public {\\n        testBurn(from, amount);\\n        testMint(to, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/testing/MetaPoolTokenUpgraded.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../MetaPoolToken.sol\\\";\\n\\ncontract MetaPoolTokenUpgraded is MetaPoolToken {\\n    bool public newlyAddedVariable;\\n\\n    function initializeUpgrade() public override onlyAdmin {\\n        newlyAddedVariable = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/PoolManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IAssetAllocation.sol\\\";\\nimport \\\"./interfaces/IAddressRegistryV2.sol\\\";\\nimport \\\"./interfaces/IDetailedERC20.sol\\\";\\nimport \\\"./interfaces/ILpSafeFunder.sol\\\";\\nimport \\\"./interfaces/ITVLManager.sol\\\";\\nimport \\\"./PoolTokenV2.sol\\\";\\nimport \\\"./MetaPoolToken.sol\\\";\\n\\n/**\\n * @title Pool Manager\\n * @author APY.Finance\\n * @notice The pool manager logic contract for use with the pool manager proxy contract.\\n *\\n * The Pool Manager orchestrates the movement of capital within the APY system\\n * between pools (PoolTokenV2 contracts) and strategy accounts, e.g. LP Safe.\\n *\\n * Transferring from a PoolToken to an account stages capital in preparation\\n * for executing yield farming strategies.\\n *\\n * Capital is unwound from yield farming strategies for user withdrawals by transferring\\n * from accounts to PoolTokens.\\n *\\n * When funding an account from a pool, the Pool Manager simultaneously register the asset\\n * allocation with the TVL Manager to ensure the TVL is properly updated.\\n */\\ncontract PoolManager is\\n    Initializable,\\n    OwnableUpgradeSafe,\\n    ReentrancyGuardUpgradeSafe,\\n    ILpSafeFunder\\n{\\n    using SafeMath for uint256;\\n    using SafeERC20 for IDetailedERC20;\\n\\n    /* ------------------------------- */\\n    /* impl-specific storage variables */\\n    /* ------------------------------- */\\n    address public proxyAdmin;\\n    IAddressRegistryV2 public addressRegistry;\\n\\n    /* ------------------------------- */\\n\\n    event AdminChanged(address);\\n\\n    /**\\n     * @dev Since the proxy delegate calls to this \\\"logic\\\" contract, any\\n     * storage set by the logic contract's constructor during deploy is\\n     * disregarded and this function is needed to initialize the proxy\\n     * contract's storage according to this contract's layout.\\n     *\\n     * Since storage is not set yet, there is no simple way to protect\\n     * calling this function with owner modifiers.  Thus the OpenZeppelin\\n     * `initializer` modifier protects this function from being called\\n     * repeatedly.\\n     *\\n     * Our proxy deployment will call this as part of the constructor.\\n     * @param adminAddress the admin proxy to initialize with\\n     * @param _addressRegistry the address registry to initialize with\\n     */\\n    function initialize(address adminAddress, address _addressRegistry)\\n        external\\n        initializer\\n    {\\n        require(adminAddress != address(0), \\\"INVALID_ADMIN\\\");\\n\\n        // initialize ancestor storage\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __ReentrancyGuard_init_unchained();\\n\\n        // initialize impl-specific storage\\n        setAdminAddress(adminAddress);\\n        setAddressRegistry(_addressRegistry);\\n    }\\n\\n    /**\\n     * @notice Initialize the new logic in V2 when upgrading from V1.\\n     * @dev The `onlyAdmin` modifier prevents this function from being called\\n     * multiple times, because the call has to come from the ProxyAdmin contract\\n     * and it can only call this during its `upgradeAndCall` function.\\n     *\\n     * Note the `initializer` modifier can only be used once in the entire\\n     * contract, so we can't use it here.\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    function initializeUpgrade() external virtual onlyAdmin {}\\n\\n    /**\\n     * @dev Throws if called by any account other than the proxy admin.\\n     */\\n    modifier onlyAdmin() {\\n        require(msg.sender == proxyAdmin, \\\"ADMIN_ONLY\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Sets the proxy admin address of the pool manager proxy\\n     * @dev only callable by owner\\n     * @param adminAddress the new proxy admin address of the pool manager\\n     */\\n    function setAdminAddress(address adminAddress) public onlyOwner {\\n        require(adminAddress != address(0), \\\"INVALID_ADMIN\\\");\\n        proxyAdmin = adminAddress;\\n        emit AdminChanged(adminAddress);\\n    }\\n\\n    /**\\n     * @notice Sets the address registry\\n     * @dev only callable by owner\\n     * @param _addressRegistry the address of the registry\\n     */\\n    function setAddressRegistry(address _addressRegistry) public onlyOwner {\\n        require(Address.isContract(_addressRegistry), \\\"INVALID_ADDRESS\\\");\\n        addressRegistry = IAddressRegistryV2(_addressRegistry);\\n    }\\n\\n    /**\\n     * @notice Funds LP Safe account and register an asset allocation\\n     * @dev only callable by owner. Also registers the pool underlyer for the account being funded\\n     * @param poolAmounts a list of PoolAmount structs denoting the pools id and amounts used to fund the account\\n     * @notice PoolAmount example (pulls ~$1 from each pool to the account):\\n     *      [\\n     *          { poolId: \\\"daiPool\\\", amount: \\\"1000000000000\\\" },\\n     *          { poolId: \\\"usdcPool\\\", amount: \\\"1000000\\\" },\\n     *          { poolId: \\\"usdtPool\\\", amount: \\\"1000000\\\" },\\n     *      ]\\n     */\\n    function fundLpSafe(ILpSafeFunder.PoolAmount[] memory poolAmounts)\\n        external\\n        override\\n        onlyOwner\\n        nonReentrant\\n    {\\n        address lpSafeAddress = addressRegistry.lpSafeAddress();\\n        require(lpSafeAddress != address(0), \\\"INVALID_LP_SAFE\\\");\\n        (PoolTokenV2[] memory pools, uint256[] memory amounts) =\\n            _getPoolsAndAmounts(poolAmounts);\\n        _fund(lpSafeAddress, pools, amounts);\\n        _registerPoolUnderlyers(lpSafeAddress, pools);\\n    }\\n\\n    function _getPoolsAndAmounts(ILpSafeFunder.PoolAmount[] memory poolAmounts)\\n        internal\\n        view\\n        returns (PoolTokenV2[] memory, uint256[] memory)\\n    {\\n        PoolTokenV2[] memory pools = new PoolTokenV2[](poolAmounts.length);\\n        uint256[] memory amounts = new uint256[](poolAmounts.length);\\n        for (uint256 i = 0; i < poolAmounts.length; i++) {\\n            amounts[i] = poolAmounts[i].amount;\\n            pools[i] = PoolTokenV2(\\n                addressRegistry.getAddress(poolAmounts[i].poolId)\\n            );\\n        }\\n        return (pools, amounts);\\n    }\\n\\n    /**\\n     * @notice Register an asset allocation for the account with each pool underlyer\\n     * @param account address of the registered account\\n     * @param pools list of pools whose underlyers will be registered\\n     */\\n    function _registerPoolUnderlyers(\\n        address account,\\n        PoolTokenV2[] memory pools\\n    ) internal {\\n        ITVLManager tvlManager =\\n            ITVLManager(addressRegistry.getAddress(\\\"tvlManager\\\"));\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            PoolTokenV2 pool = pools[i];\\n            IDetailedERC20 underlyer = pool.underlyer();\\n            string memory symbol = underlyer.symbol();\\n            bytes memory _data =\\n                abi.encodeWithSignature(\\\"balanceOf(address)\\\", account);\\n            ITVLManager.Data memory data =\\n                ITVLManager.Data(address(pool.underlyer()), _data);\\n            if (!tvlManager.isAssetAllocationRegistered(data)) {\\n                tvlManager.addAssetAllocation(\\n                    data,\\n                    symbol,\\n                    underlyer.decimals()\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function move capital from PoolToken contracts to an account\\n     * @param account the address to move funds to\\n     * @param pools a list of pools to pull funds from\\n     * @param amounts a list of fund amounts to pull from pools\\n     */\\n    function _fund(\\n        address account,\\n        PoolTokenV2[] memory pools,\\n        uint256[] memory amounts\\n    ) internal {\\n        MetaPoolToken mApt = MetaPoolToken(addressRegistry.mAptAddress());\\n        uint256[] memory mintAmounts = new uint256[](pools.length);\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            PoolTokenV2 pool = pools[i];\\n            uint256 poolAmount = amounts[i];\\n            require(poolAmount > 0, \\\"INVALID_AMOUNT\\\");\\n            IDetailedERC20 underlyer = pool.underlyer();\\n\\n            uint256 tokenPrice = pool.getUnderlyerPrice();\\n            uint8 decimals = underlyer.decimals();\\n            uint256 mintAmount =\\n                mApt.calculateMintAmount(poolAmount, tokenPrice, decimals);\\n            mintAmounts[i] = mintAmount;\\n\\n            underlyer.safeTransferFrom(address(pool), account, poolAmount);\\n        }\\n        // MUST do the actual minting after calculating *all* mint amounts,\\n        // otherwise due to Chainlink not updating during a transaction,\\n        // the totalSupply will change while TVL doesn't.\\n        //\\n        // Using the pre-mint TVL and totalSupply gives the same answer\\n        // as using post-mint values.\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            mApt.mint(address(pools[i]), mintAmounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Moves capital from LP Safe account to the PoolToken contracts\\n     * @dev only callable by owner\\n     * @param poolAmounts list of PoolAmount structs denoting pool IDs and pool deposit amounts\\n     * @notice PoolAmount example (pushes ~$1 to each pool from the account):\\n     *      [\\n     *          { poolId: \\\"daiPool\\\", amount: \\\"1000000000000\\\" },\\n     *          { poolId: \\\"usdcPool\\\", amount: \\\"1000000\\\" },\\n     *          { poolId: \\\"usdtPool\\\", amount: \\\"1000000\\\" },\\n     *      ]\\n     */\\n    function withdrawFromLpSafe(ILpSafeFunder.PoolAmount[] memory poolAmounts)\\n        external\\n        override\\n        onlyOwner\\n        nonReentrant\\n    {\\n        address lpSafeAddress = addressRegistry.lpSafeAddress();\\n        require(lpSafeAddress != address(0), \\\"INVALID_LP_SAFE\\\");\\n        (PoolTokenV2[] memory pools, uint256[] memory amounts) =\\n            _getPoolsAndAmounts(poolAmounts);\\n        _checkManagerAllowances(lpSafeAddress, pools, amounts);\\n        _withdraw(lpSafeAddress, pools, amounts);\\n    }\\n\\n    /**\\n     * @notice Check if pool manager has sufficient allowance to transfer pool underlyer from account\\n     * @param account the address of the account to check\\n     * @param pools list of pools to transfer funds to; used for retrieving the underlyer\\n     * @param amounts list of required minimal allowances needed by the manager\\n     */\\n    function _checkManagerAllowances(\\n        address account,\\n        PoolTokenV2[] memory pools,\\n        uint256[] memory amounts\\n    ) internal view {\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            IDetailedERC20 underlyer = pools[i].underlyer();\\n            uint256 allowance = underlyer.allowance(account, address(this));\\n            require(amounts[i] <= allowance, \\\"INSUFFICIENT_ALLOWANCE\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Move capital from an account back to the PoolToken contracts\\n     * @param account account that funds are being withdrawn from\\n     * @param pools a list of pools to place recovered funds back into\\n     * @param amounts a list of amounts to send from the account to the pools\\n     *\\n     */\\n    function _withdraw(\\n        address account,\\n        PoolTokenV2[] memory pools,\\n        uint256[] memory amounts\\n    ) internal {\\n        MetaPoolToken mApt = MetaPoolToken(addressRegistry.mAptAddress());\\n        uint256[] memory burnAmounts = new uint256[](pools.length);\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            PoolTokenV2 pool = pools[i];\\n            uint256 amountToSend = amounts[i];\\n            require(amountToSend > 0, \\\"INVALID_AMOUNT\\\");\\n            IDetailedERC20 underlyer = pool.underlyer();\\n\\n            uint256 tokenPrice = pool.getUnderlyerPrice();\\n            uint8 decimals = underlyer.decimals();\\n            uint256 burnAmount =\\n                mApt.calculateMintAmount(amountToSend, tokenPrice, decimals);\\n            burnAmounts[i] = burnAmount;\\n\\n            underlyer.safeTransferFrom(account, address(pool), amountToSend);\\n        }\\n        // MUST do the actual burning after calculating *all* burn amounts,\\n        // otherwise due to Chainlink not updating during a transaction,\\n        // the totalSupply will change while TVL doesn't.\\n        //\\n        // Using the pre-burn TVL and totalSupply gives the same answer\\n        // as using post-burn values.\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            mApt.burn(address(pools[i]), burnAmounts[i]);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAssetAllocation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\n\\n/// @title Interface to Access APY.Finance's Asset Allocations\\n/// @author APY.Finance\\n/// @notice Enables 3rd Parties (ie. Chainlink) to pull relevant asset allocations\\n/// in order to compute the TVL across the entire APY.Finance system.\\ninterface IAssetAllocation {\\n    /// @notice Returns a list of all identifiers where asset allocations have been registered\\n    /// @dev the list contains no duplicate identifiers\\n    /// @return list of all the registered identifiers\\n    function getAssetAllocationIds() external view returns (bytes32[] memory);\\n\\n    /// @notice Executes the bytes lookup data registered under an id\\n    /// @dev The balance of an id may be aggregated from multiple contracts\\n    /// @param allocationId the id to fetch the balance for\\n    /// @return returns the result of the executed lookup data registered for the provided id\\n    function balanceOf(bytes32 allocationId) external view returns (uint256);\\n\\n    /// @notice Returns the token symbol registered under an id\\n    /// @param allocationId the id to fetch the token for\\n    /// @return returns the result of the token symbol registered for the provided id\\n    function symbolOf(bytes32 allocationId)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /// @notice Returns the decimals registered under an id\\n    /// @param allocationId the id to fetch the decimals for\\n    /// @return returns the result of the decimal value registered for the provided id\\n    function decimalsOf(bytes32 allocationId) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILpSafeFunder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\ninterface ILpSafeFunder {\\n    // struct representing the pool and the amount to move when funding an account\\n    // poolId represents the pool to move funds from\\n    // amount represents the amount to move when funding\\n    struct PoolAmount {\\n        bytes32 poolId;\\n        uint256 amount;\\n    }\\n\\n    function fundLpSafe(PoolAmount[] calldata poolAmounts) external;\\n\\n    function withdrawFromLpSafe(PoolAmount[] calldata poolAmounts) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITVLManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title Interface for addition and removal of asset allocations\\n          for account deployments\\n * @author APY.Finance\\n * @notice These functions enable external systems to pull necessary info\\n *         to compute the TVL of the APY.Finance system.\\n */\\ninterface ITVLManager {\\n    // struct representing a view call execution against a target contract given bytes\\n    // target is the target contract to execute view calls against\\n    // bytes data represents the encoded function signature + parameters\\n    struct Data {\\n        address target;\\n        bytes data;\\n    }\\n\\n    // struct representing the relevant pieces of data that need to be provided when registering an asset allocation\\n    // symbol is the symbol of the token that the resulting view call execution will need to be evaluated as\\n    // decimals is the number of decimals that the resulting view call execution will need to be evaluated as\\n    // data is the struct representing the view call execution\\n    struct AssetAllocation {\\n        string symbol;\\n        uint256 decimals;\\n        Data data;\\n    }\\n\\n    function addAssetAllocation(\\n        Data calldata data,\\n        string calldata symbol,\\n        uint256 decimals\\n    ) external;\\n\\n    function removeAssetAllocation(Data calldata data) external;\\n\\n    function generateDataHash(Data calldata data)\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    function isAssetAllocationRegistered(Data calldata data)\\n        external\\n        view\\n        returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/testing/PoolManagerUpgraded.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../PoolManager.sol\\\";\\n\\ncontract PoolManagerUpgraded is PoolManager {\\n    bool public newlyAddedVariable;\\n\\n    function initializeUpgrade() public override onlyAdmin {\\n        newlyAddedVariable = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TVLManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./utils/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/IAssetAllocation.sol\\\";\\nimport \\\"./interfaces/ITVLManager.sol\\\";\\nimport \\\"./interfaces/IOracleAdapter.sol\\\";\\nimport \\\"./interfaces/IAddressRegistryV2.sol\\\";\\n\\n/// @title TVL Manager\\n/// @author APY.Finance\\n/// @notice Deployed assets can exist across various platforms within the\\n/// defi ecosystem: pools, accounts, defi protocols, etc. This contract\\n/// tracks deployed capital by registering the look up functions so that\\n/// the TVL can be properly computed.\\n/// @dev It is imperative that this manager has the most up to date asset\\n/// allocations registered. Any assets in the system that have been deployed,\\n/// but are not registered can have devastating and catastrophic effects on the TVL.\\ncontract TVLManager is Ownable, ReentrancyGuard, ITVLManager, IAssetAllocation {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using Address for address;\\n\\n    IAddressRegistryV2 public addressRegistry;\\n\\n    // all registered allocation ids\\n    EnumerableSet.Bytes32Set private _allocationIds;\\n    // ids mapped to data\\n    mapping(bytes32 => Data) private _allocationData;\\n    // ids mapped to symbol\\n    mapping(bytes32 => string) private _allocationSymbols;\\n    // ids mapped to decimals\\n    mapping(bytes32 => uint256) private _allocationDecimals;\\n\\n    /// @notice Constructor TVLManager\\n    /// @param _addressRegistry the address registry to initialize with\\n    constructor(address _addressRegistry) public {\\n        setAddressRegistry(_addressRegistry);\\n    }\\n\\n    /// @dev Reverts if non-permissed account calls.\\n    /// Permissioned accounts are: owner, pool manager, and account manager\\n    modifier onlyPermissioned() {\\n        require(\\n            msg.sender == owner() ||\\n                msg.sender == addressRegistry.poolManagerAddress() ||\\n                msg.sender == addressRegistry.lpSafeAddress(),\\n            \\\"PERMISSIONED_ONLY\\\"\\n        );\\n        _;\\n    }\\n\\n    function lockOracleAdapter() internal {\\n        IOracleAdapter oracleAdapter =\\n            IOracleAdapter(addressRegistry.oracleAdapterAddress());\\n        oracleAdapter.lock();\\n    }\\n\\n    /// @notice Registers a new asset allocation\\n    /// @dev only permissed accounts can call.\\n    /// New ids are uniquely determined by the provided data struct; no duplicates are allowed\\n    /// @param data the data struct containing the target address and the bytes lookup data that will be registered\\n    /// @param symbol the token symbol to register for the asset allocation\\n    /// @param decimals the decimals to register for the new asset allocation\\n    function addAssetAllocation(\\n        Data memory data,\\n        string calldata symbol,\\n        uint256 decimals\\n    ) external override nonReentrant onlyPermissioned {\\n        require(!isAssetAllocationRegistered(data), \\\"DUPLICATE_DATA_DETECTED\\\");\\n        bytes32 dataHash = generateDataHash(data);\\n        _allocationIds.add(dataHash);\\n        _allocationData[dataHash] = data;\\n        _allocationSymbols[dataHash] = symbol;\\n        _allocationDecimals[dataHash] = decimals;\\n        lockOracleAdapter();\\n    }\\n\\n    /// @notice Removes an existing asset allocation\\n    /// @dev only permissed accounts can call.\\n    /// @param data the data struct containing the target address and bytes lookup data that will be removed\\n    function removeAssetAllocation(Data memory data)\\n        external\\n        override\\n        nonReentrant\\n        onlyPermissioned\\n    {\\n        require(isAssetAllocationRegistered(data), \\\"ALLOCATION_DOES_NOT_EXIST\\\");\\n        bytes32 dataHash = generateDataHash(data);\\n        _allocationIds.remove(dataHash);\\n        delete _allocationData[dataHash];\\n        delete _allocationSymbols[dataHash];\\n        delete _allocationDecimals[dataHash];\\n        lockOracleAdapter();\\n    }\\n\\n    /// @notice Generates a data hash used for uniquely identifying asset allocations\\n    /// @param data the data hash containing the target address and the bytes lookup data\\n    /// @return returns the resulting bytes32 hash of the abi encode packed target address and bytes look up data\\n    function generateDataHash(Data memory data)\\n        public\\n        pure\\n        override\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encodePacked(data.target, data.data));\\n    }\\n\\n    /// @notice determines if a target address and bytes lookup data has already been registered\\n    /// @param data the data hash containing the target address and the bytes lookup data\\n    /// @return returns true if the asset allocation is currently registered, otherwise false\\n    function isAssetAllocationRegistered(Data memory data)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _isAssetAllocationRegistered(generateDataHash(data));\\n    }\\n\\n    /// @notice helper function for isAssetallocationRegistered function\\n    /// @param data the bytes32 hash\\n    /// @return returns true if the asset allocation is currently registered, otherwise false\\n    function _isAssetAllocationRegistered(bytes32 data)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _allocationIds.contains(data);\\n    }\\n\\n    /// @notice Returns a list of all identifiers where asset allocations have been registered\\n    /// @dev the list contains no duplicate identifiers\\n    /// @return list of all the registered identifiers\\n    function getAssetAllocationIds()\\n        external\\n        view\\n        override\\n        returns (bytes32[] memory)\\n    {\\n        uint256 length = _allocationIds.length();\\n        bytes32[] memory allocationIds = new bytes32[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            allocationIds[i] = _allocationIds.at(i);\\n        }\\n        return allocationIds;\\n    }\\n\\n    /// @notice Executes the bytes lookup data registered under an id\\n    /// @dev The balance of an id may be aggregated from multiple contracts\\n    /// @param allocationId the id to fetch the balance for\\n    /// @return returns the result of the executed lookup data registered for the provided id\\n    function balanceOf(bytes32 allocationId)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            _isAssetAllocationRegistered(allocationId),\\n            \\\"INVALID_ALLOCATION_ID\\\"\\n        );\\n        Data memory data = _allocationData[allocationId];\\n        bytes memory returnData = executeView(data);\\n\\n        uint256 _balance;\\n        assembly {\\n            _balance := mload(add(returnData, 0x20))\\n        }\\n\\n        return _balance;\\n    }\\n\\n    /// @notice Returns the token symbol registered under an id\\n    /// @param allocationId the id to fetch the token for\\n    /// @return returns the result of the token symbol registered for the provided id\\n    function symbolOf(bytes32 allocationId)\\n        external\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        return _allocationSymbols[allocationId];\\n    }\\n\\n    /// @notice Returns the decimals registered under an id\\n    /// @param allocationId the id to fetch the decimals for\\n    /// @return returns the result of the decimal value registered for the provided id\\n    function decimalsOf(bytes32 allocationId)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allocationDecimals[allocationId];\\n    }\\n\\n    /// @notice Executes data's bytes look up data against data's target address\\n    /// @dev execution is a static call\\n    /// @param data the data hash containing the target address and the bytes lookup data to execute\\n    /// @return returnData returns return data from the executed contract\\n    function executeView(Data memory data)\\n        public\\n        view\\n        returns (bytes memory returnData)\\n    {\\n        returnData = data.target.functionStaticCall(data.data);\\n    }\\n\\n    /**\\n     * @notice Sets the address registry\\n     * @dev only callable by owner\\n     * @param _addressRegistry the address of the registry\\n     */\\n    function setAddressRegistry(address _addressRegistry) public onlyOwner {\\n        require(Address.isContract(_addressRegistry), \\\"INVALID_ADDRESS\\\");\\n        addressRegistry = IAddressRegistryV2(_addressRegistry);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\n\\n/* solhint-disable */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/OracleAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./interfaces/IOracleAdapter.sol\\\";\\nimport \\\"./interfaces/IAddressRegistryV2.sol\\\";\\n\\n/**\\n * @title Oracle Adapter\\n * @author APY.Finance\\n * @notice Acts as a gateway to oracle values and implements oracle safeguards.\\n *\\n * Oracle Safeguard Flows:\\n *\\n *      - Unlocked → No Manual Submitted Value → Use Chainlink Value (default)\\n *      - Unlocked → No Manual Submitted Value → No Chainlink Source → Reverts\\n *      - Unlocked → No Manual Submitted Value → Chainlink Value Call Reverts → Reverts\\n *      - Unlocked → No Manual Submitted Value → Chainlink Value > 24 hours → Reverts\\n *      - Unlocked → Use Manual Submitted Value (emergency)\\n *      - Locked → Reverts (nominal)\\n *\\n * @dev It is important to not that zero values are allowed for manual\\n * submission, but will result in a revert for Chainlink.\\n *\\n * This is because there are very rare situations where the TVL value can\\n * accurately be zero, such as a situation where all funds are unwound and\\n * moved back to the liquidity pools, but a zero value can also indicate a\\n * failure with Chainlink.\\n *\\n * Because accurate zero values are rare, and occur due to intentional system\\n * states where no funds are deployed, they due not need to be detected\\n * automatically by Chainlink.\\n *\\n * In addition, the impact of failing to manually set a zero value when\\n * necessary compared to the impact of an incorrect zero value from Chainlink\\n * is much lower.\\n *\\n * Failing to manually set a zero value can result in either a locked contract,\\n * which can be unlocked by setting the value, or reduced deposit/withdraw\\n * amounts. But never a loss of funds.\\n *\\n * Conversely, if Chainlink reports a zero value in error and the contract\\n * were to accept it, funds up to the amount available in the reserve pools\\n * could be lost.\\n */\\ncontract OracleAdapter is Ownable, IOracleAdapter {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    IAddressRegistryV2 public addressRegistry;\\n\\n    uint256 public override defaultLockPeriod;\\n    /// @notice Contract is locked until this block number is passed\\n    uint256 public lockEnd;\\n\\n    /// @notice Chainlink variables\\n    uint256 public chainlinkStalePeriod; // Duration of Chainlink heartbeat\\n    AggregatorV3Interface public tvlSource;\\n    mapping(address => AggregatorV3Interface) public assetSources;\\n\\n    /// @notice Submitted values that override Chainlink values until stale\\n    mapping(address => Value) public submittedAssetValues;\\n    Value public submittedTvlValue;\\n\\n    event AssetSourceUpdated(address indexed asset, address indexed source);\\n    event TvlSourceUpdated(address indexed source);\\n    event ChainlinkStalePeriodUpdated(uint256 period);\\n\\n    modifier unlocked() {\\n        require(!isLocked(), \\\"ORACLE_LOCKED\\\");\\n        _;\\n    }\\n\\n    modifier locked() {\\n        require(isLocked(), \\\"ORACLE_UNLOCKED\\\");\\n        _;\\n    }\\n\\n    /// @dev Reverts if non-permissioned account calls.\\n    /// Permissioned accounts are: owner, mAPT, and TVL manager\\n    modifier onlyPermissioned() {\\n        require(\\n            msg.sender == owner() ||\\n                msg.sender == addressRegistry.mAptAddress() ||\\n                msg.sender == addressRegistry.tvlManagerAddress(),\\n            \\\"PERMISSIONED_ONLY\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructor\\n     * @param _addressRegistry the address registry\\n     * @param assets the assets priced by sources\\n     * @param sources the source for each asset\\n     * @param tvlSource the source for the TVL value\\n     * @param _chainlinkStalePeriod the number of seconds until a source value is stale\\n     */\\n    constructor(\\n        address _addressRegistry,\\n        address tvlSource,\\n        address[] memory assets,\\n        address[] memory sources,\\n        uint256 _chainlinkStalePeriod,\\n        uint256 _defaultLockPeriod\\n    ) public {\\n        setAddressRegistry(_addressRegistry);\\n        setTvlSource(tvlSource);\\n        setAssetSources(assets, sources);\\n        setChainlinkStalePeriod(_chainlinkStalePeriod);\\n        setDefaultLockPeriod(_defaultLockPeriod);\\n    }\\n\\n    function setDefaultLockPeriod(uint256 newPeriod) public override onlyOwner {\\n        defaultLockPeriod = newPeriod;\\n    }\\n\\n    function lock() external override onlyPermissioned {\\n        lockFor(defaultLockPeriod);\\n    }\\n\\n    function unlock() external override onlyPermissioned {\\n        lockFor(0);\\n    }\\n\\n    function lockFor(uint256 activePeriod) public override onlyPermissioned {\\n        lockEnd = block.number.add(activePeriod);\\n    }\\n\\n    /**\\n     * @notice Sets the address registry\\n     * @dev only callable by owner\\n     * @param _addressRegistry the address of the registry\\n     */\\n    function setAddressRegistry(address _addressRegistry) public onlyOwner {\\n        require(Address.isContract(_addressRegistry), \\\"INVALID_ADDRESS\\\");\\n        addressRegistry = IAddressRegistryV2(_addressRegistry);\\n    }\\n\\n    //------------------------------------------------------------\\n    // MANUAL SUBMISSION SETTERS\\n    //------------------------------------------------------------\\n\\n    function setAssetValue(\\n        address asset,\\n        uint256 value,\\n        uint256 period\\n    ) external override locked onlyOwner {\\n        // We do allow 0 values for submitted values\\n        submittedAssetValues[asset] = Value(value, block.number.add(period));\\n    }\\n\\n    function setTvl(uint256 value, uint256 period)\\n        external\\n        override\\n        locked\\n        onlyOwner\\n    {\\n        // We do allow 0 values for submitted values\\n        submittedTvlValue = Value(value, block.number.add(period));\\n    }\\n\\n    //------------------------------------------------------------\\n    // CHAINLINK SETTERS\\n    //------------------------------------------------------------\\n\\n    /**\\n     * @notice Set or replace the TVL source\\n     * @param source the TVL source address\\n     */\\n    function setTvlSource(address source) public onlyOwner {\\n        require(source.isContract(), \\\"INVALID_SOURCE\\\");\\n        tvlSource = AggregatorV3Interface(source);\\n        emit TvlSourceUpdated(source);\\n    }\\n\\n    /**\\n     * @notice Set or replace asset price sources\\n     * @param assets the array of assets token addresses\\n     * @param sources the array of price sources (aggregators)\\n     */\\n    function setAssetSources(address[] memory assets, address[] memory sources)\\n        public\\n        onlyOwner\\n    {\\n        require(assets.length == sources.length, \\\"INCONSISTENT_PARAMS_LENGTH\\\");\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            setAssetSource(assets[i], sources[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set a single asset price source\\n     * @param asset asset token address\\n     * @param source the price source (aggregator)\\n     */\\n    function setAssetSource(address asset, address source) public onlyOwner {\\n        require(source.isContract(), \\\"INVALID_SOURCE\\\");\\n        assetSources[asset] = AggregatorV3Interface(source);\\n        emit AssetSourceUpdated(asset, source);\\n    }\\n\\n    /**\\n     * @notice Set the length of time before an agg value is considered stale\\n     * @param _chainlinkStalePeriod the length of time in seconds\\n     */\\n    function setChainlinkStalePeriod(uint256 _chainlinkStalePeriod)\\n        public\\n        onlyOwner\\n    {\\n        require(_chainlinkStalePeriod > 0, \\\"INVALID_STALE_PERIOD\\\");\\n        chainlinkStalePeriod = _chainlinkStalePeriod;\\n        emit ChainlinkStalePeriodUpdated(_chainlinkStalePeriod);\\n    }\\n\\n    function isLocked() public view override returns (bool) {\\n        return block.number < lockEnd;\\n    }\\n\\n    //------------------------------------------------------------\\n    // ORACLE VALUE GETTERS\\n    //------------------------------------------------------------\\n\\n    function getTvl() external view override unlocked returns (uint256) {\\n        if (block.number < submittedTvlValue.periodEnd) {\\n            return submittedTvlValue.value;\\n        }\\n        return _getPriceFromSource(tvlSource);\\n    }\\n\\n    /**\\n     * @notice Gets an asset price by address\\n     * @param asset the asset address\\n     * @return the asset price\\n     */\\n    function getAssetPrice(address asset)\\n        public\\n        view\\n        override\\n        unlocked\\n        returns (uint256)\\n    {\\n        if (block.number < submittedAssetValues[asset].periodEnd) {\\n            return submittedAssetValues[asset].value;\\n        }\\n        AggregatorV3Interface source = assetSources[asset];\\n        return _getPriceFromSource(source);\\n    }\\n\\n    /**\\n     * @notice Get the price from a source (aggregator)\\n     * @dev Prices and TVL values should always be positive\\n     * @return the price from the source\\n     */\\n    function _getPriceFromSource(AggregatorV3Interface source)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        require(address(source).isContract(), \\\"INVALID_SOURCE\\\");\\n        (, int256 price, , uint256 updatedAt, ) = source.latestRoundData();\\n\\n        //we do not allow 0 values for chainlink\\n        require(price > 0, \\\"MISSING_ASSET_VALUE\\\");\\n\\n        // solhint-disable not-rely-on-time\\n        require(\\n            block.timestamp.sub(updatedAt) <= chainlinkStalePeriod,\\n            \\\"CHAINLINK_STALE_DATA\\\"\\n        );\\n        // solhint-enable not-rely-on-time\\n\\n        return uint256(price);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV2V3Interface.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface\\n{\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/interfaces/AggregatorInterface.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n  function latestTimestamp() external view returns (uint256);\\n  function latestRound() external view returns (uint256);\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\"\r\n    },\r\n    \"contracts/testing/FluxAggregator.sol\": {\r\n      \"content\": \"/**\\nSPDX-License-Identifier: UNLICENSED\\n----------------------------------\\n---- APY.Finance comments --------\\n----------------------------------\\n\\nDue to pragma being fixed at 0.6.6, we had to copy over this contract\\nand fix the imports.\\n\\noriginal path: @chainlink/contracts/src/v0.6/FluxAggregator.sol\\nnpm package version: 0.0.9\\n */\\npragma solidity 0.6.11;\\n\\nimport \\\"@chainlink/contracts/src/v0.6/Median.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/Owned.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/SafeMath128.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/SafeMath32.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/SafeMath64.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV2V3Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorValidatorInterface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/vendor/SafeMath.sol\\\";\\n\\n/* solhint-disable */\\n/**\\n * @title The Prepaid Aggregator contract\\n * @notice Handles aggregating data pushed in from off-chain, and unlocks\\n * payment for oracles as they report. Oracles' submissions are gathered in\\n * rounds, with each round aggregating the submissions for each oracle into a\\n * single answer. The latest aggregated answer is exposed as well as historical\\n * answers and their updated at timestamp.\\n */\\ncontract FluxAggregator is AggregatorV2V3Interface, Owned {\\n    using SafeMath for uint256;\\n    using SafeMath128 for uint128;\\n    using SafeMath64 for uint64;\\n    using SafeMath32 for uint32;\\n\\n    struct Round {\\n        int256 answer;\\n        uint64 startedAt;\\n        uint64 updatedAt;\\n        uint32 answeredInRound;\\n    }\\n\\n    struct RoundDetails {\\n        int256[] submissions;\\n        uint32 maxSubmissions;\\n        uint32 minSubmissions;\\n        uint32 timeout;\\n        uint128 paymentAmount;\\n    }\\n\\n    struct OracleStatus {\\n        uint128 withdrawable;\\n        uint32 startingRound;\\n        uint32 endingRound;\\n        uint32 lastReportedRound;\\n        uint32 lastStartedRound;\\n        int256 latestSubmission;\\n        uint16 index;\\n        address admin;\\n        address pendingAdmin;\\n    }\\n\\n    struct Requester {\\n        bool authorized;\\n        uint32 delay;\\n        uint32 lastStartedRound;\\n    }\\n\\n    struct Funds {\\n        uint128 available;\\n        uint128 allocated;\\n    }\\n\\n    LinkTokenInterface public linkToken;\\n    AggregatorValidatorInterface public validator;\\n\\n    // Round related params\\n    uint128 public paymentAmount;\\n    uint32 public maxSubmissionCount;\\n    uint32 public minSubmissionCount;\\n    uint32 public restartDelay;\\n    uint32 public timeout;\\n    uint8 public override decimals;\\n    string public override description;\\n\\n    int256 public immutable minSubmissionValue;\\n    int256 public immutable maxSubmissionValue;\\n\\n    uint256 public constant override version = 3;\\n\\n    /**\\n     * @notice To ensure owner isn't withdrawing required funds as oracles are\\n     * submitting updates, we enforce that the contract maintains a minimum\\n     * reserve of RESERVE_ROUNDS * oracleCount() LINK earmarked for payment to\\n     * oracles. (Of course, this doesn't prevent the contract from running out of\\n     * funds without the owner's intervention.)\\n     */\\n    uint256 private constant RESERVE_ROUNDS = 2;\\n    uint256 private constant MAX_ORACLE_COUNT = 77;\\n    uint32 private constant ROUND_MAX = 2**32 - 1;\\n    uint256 private constant VALIDATOR_GAS_LIMIT = 100000;\\n    // An error specific to the Aggregator V3 Interface, to prevent possible\\n    // confusion around accidentally reading unset values as reported values.\\n    string private constant V3_NO_DATA_ERROR = \\\"No data present\\\";\\n\\n    uint32 private reportingRoundId;\\n    uint32 internal latestRoundId;\\n    mapping(address => OracleStatus) private oracles;\\n    mapping(uint32 => Round) internal rounds;\\n    mapping(uint32 => RoundDetails) internal details;\\n    mapping(address => Requester) internal requesters;\\n    address[] private oracleAddresses;\\n    Funds private recordedFunds;\\n\\n    event AvailableFundsUpdated(uint256 indexed amount);\\n    event RoundDetailsUpdated(\\n        uint128 indexed paymentAmount,\\n        uint32 indexed minSubmissionCount,\\n        uint32 indexed maxSubmissionCount,\\n        uint32 restartDelay,\\n        uint32 timeout // measured in seconds\\n    );\\n    event OraclePermissionsUpdated(\\n        address indexed oracle,\\n        bool indexed whitelisted\\n    );\\n    event OracleAdminUpdated(address indexed oracle, address indexed newAdmin);\\n    event OracleAdminUpdateRequested(\\n        address indexed oracle,\\n        address admin,\\n        address newAdmin\\n    );\\n    event SubmissionReceived(\\n        int256 indexed submission,\\n        uint32 indexed round,\\n        address indexed oracle\\n    );\\n    event RequesterPermissionsSet(\\n        address indexed requester,\\n        bool authorized,\\n        uint32 delay\\n    );\\n    event ValidatorUpdated(address indexed previous, address indexed current);\\n\\n    /**\\n     * @notice set up the aggregator with initial configuration\\n     * @param _link The address of the LINK token\\n     * @param _paymentAmount The amount paid of LINK paid to each oracle per submission, in wei (units of 10⁻¹⁸ LINK)\\n     * @param _timeout is the number of seconds after the previous round that are\\n     * allowed to lapse before allowing an oracle to skip an unfinished round\\n     * @param _validator is an optional contract address for validating\\n     * external validation of answers\\n     * @param _minSubmissionValue is an immutable check for a lower bound of what\\n     * submission values are accepted from an oracle\\n     * @param _maxSubmissionValue is an immutable check for an upper bound of what\\n     * submission values are accepted from an oracle\\n     * @param _decimals represents the number of decimals to offset the answer by\\n     * @param _description a short description of what is being reported\\n     */\\n    constructor(\\n        address _link,\\n        uint128 _paymentAmount,\\n        uint32 _timeout,\\n        address _validator,\\n        int256 _minSubmissionValue,\\n        int256 _maxSubmissionValue,\\n        uint8 _decimals,\\n        string memory _description\\n    ) public {\\n        linkToken = LinkTokenInterface(_link);\\n        updateFutureRounds(_paymentAmount, 0, 0, 0, _timeout);\\n        setValidator(_validator);\\n        minSubmissionValue = _minSubmissionValue;\\n        maxSubmissionValue = _maxSubmissionValue;\\n        decimals = _decimals;\\n        description = _description;\\n        rounds[0].updatedAt = uint64(block.timestamp.sub(uint256(_timeout)));\\n    }\\n\\n    /**\\n     * @notice called by oracles when they have witnessed a need to update\\n     * @param _roundId is the ID of the round this submission pertains to\\n     * @param _submission is the updated data that the oracle is submitting\\n     */\\n    function submit(uint256 _roundId, int256 _submission) external {\\n        bytes memory error = validateOracleRound(msg.sender, uint32(_roundId));\\n        require(\\n            _submission >= minSubmissionValue,\\n            \\\"value below minSubmissionValue\\\"\\n        );\\n        require(\\n            _submission <= maxSubmissionValue,\\n            \\\"value above maxSubmissionValue\\\"\\n        );\\n        require(error.length == 0, string(error));\\n\\n        oracleInitializeNewRound(uint32(_roundId));\\n        recordSubmission(_submission, uint32(_roundId));\\n        (bool updated, int256 newAnswer) = updateRoundAnswer(uint32(_roundId));\\n        payOracle(uint32(_roundId));\\n        deleteRoundDetails(uint32(_roundId));\\n        if (updated) {\\n            validateAnswer(uint32(_roundId), newAnswer);\\n        }\\n    }\\n\\n    /**\\n     * @notice called by the owner to remove and add new oracles as well as\\n     * update the round related parameters that pertain to total oracle count\\n     * @param _removed is the list of addresses for the new Oracles being removed\\n     * @param _added is the list of addresses for the new Oracles being added\\n     * @param _addedAdmins is the admin addresses for the new respective _added\\n     * list. Only this address is allowed to access the respective oracle's funds\\n     * @param _minSubmissions is the new minimum submission count for each round\\n     * @param _maxSubmissions is the new maximum submission count for each round\\n     * @param _restartDelay is the number of rounds an Oracle has to wait before\\n     * they can initiate a round\\n     */\\n    function changeOracles(\\n        address[] calldata _removed,\\n        address[] calldata _added,\\n        address[] calldata _addedAdmins,\\n        uint32 _minSubmissions,\\n        uint32 _maxSubmissions,\\n        uint32 _restartDelay\\n    ) external onlyOwner() {\\n        for (uint256 i = 0; i < _removed.length; i++) {\\n            removeOracle(_removed[i]);\\n        }\\n\\n        require(\\n            _added.length == _addedAdmins.length,\\n            \\\"need same oracle and admin count\\\"\\n        );\\n        require(\\n            uint256(oracleCount()).add(_added.length) <= MAX_ORACLE_COUNT,\\n            \\\"max oracles allowed\\\"\\n        );\\n\\n        for (uint256 i = 0; i < _added.length; i++) {\\n            addOracle(_added[i], _addedAdmins[i]);\\n        }\\n\\n        updateFutureRounds(\\n            paymentAmount,\\n            _minSubmissions,\\n            _maxSubmissions,\\n            _restartDelay,\\n            timeout\\n        );\\n    }\\n\\n    /**\\n     * @notice update the round and payment related parameters for subsequent\\n     * rounds\\n     * @param _paymentAmount is the payment amount for subsequent rounds\\n     * @param _minSubmissions is the new minimum submission count for each round\\n     * @param _maxSubmissions is the new maximum submission count for each round\\n     * @param _restartDelay is the number of rounds an Oracle has to wait before\\n     * they can initiate a round\\n     */\\n    function updateFutureRounds(\\n        uint128 _paymentAmount,\\n        uint32 _minSubmissions,\\n        uint32 _maxSubmissions,\\n        uint32 _restartDelay,\\n        uint32 _timeout\\n    ) public onlyOwner() {\\n        uint32 oracleNum = oracleCount(); // Save on storage reads\\n        require(\\n            _maxSubmissions >= _minSubmissions,\\n            \\\"max must equal/exceed min\\\"\\n        );\\n        require(oracleNum >= _maxSubmissions, \\\"max cannot exceed total\\\");\\n        require(\\n            oracleNum == 0 || oracleNum > _restartDelay,\\n            \\\"delay cannot exceed total\\\"\\n        );\\n        require(\\n            recordedFunds.available >= requiredReserve(_paymentAmount),\\n            \\\"insufficient funds for payment\\\"\\n        );\\n        if (oracleCount() > 0) {\\n            require(_minSubmissions > 0, \\\"min must be greater than 0\\\");\\n        }\\n\\n        paymentAmount = _paymentAmount;\\n        minSubmissionCount = _minSubmissions;\\n        maxSubmissionCount = _maxSubmissions;\\n        restartDelay = _restartDelay;\\n        timeout = _timeout;\\n\\n        emit RoundDetailsUpdated(\\n            paymentAmount,\\n            _minSubmissions,\\n            _maxSubmissions,\\n            _restartDelay,\\n            _timeout\\n        );\\n    }\\n\\n    /**\\n     * @notice the amount of payment yet to be withdrawn by oracles\\n     */\\n    function allocatedFunds() external view returns (uint128) {\\n        return recordedFunds.allocated;\\n    }\\n\\n    /**\\n     * @notice the amount of future funding available to oracles\\n     */\\n    function availableFunds() external view returns (uint128) {\\n        return recordedFunds.available;\\n    }\\n\\n    /**\\n     * @notice recalculate the amount of LINK available for payouts\\n     */\\n    function updateAvailableFunds() public {\\n        Funds memory funds = recordedFunds;\\n\\n        uint256 nowAvailable =\\n            linkToken.balanceOf(address(this)).sub(funds.allocated);\\n\\n        if (funds.available != nowAvailable) {\\n            recordedFunds.available = uint128(nowAvailable);\\n            emit AvailableFundsUpdated(nowAvailable);\\n        }\\n    }\\n\\n    /**\\n     * @notice returns the number of oracles\\n     */\\n    function oracleCount() public view returns (uint8) {\\n        return uint8(oracleAddresses.length);\\n    }\\n\\n    /**\\n     * @notice returns an array of addresses containing the oracles on contract\\n     */\\n    function getOracles() external view returns (address[] memory) {\\n        return oracleAddresses;\\n    }\\n\\n    /**\\n     * @notice get the most recently reported answer\\n     *\\n     * @dev #[deprecated] Use latestRoundData instead. This does not error if no\\n     * answer has been reached, it will simply return 0. Either wait to point to\\n     * an already answered Aggregator or use the recommended latestRoundData\\n     * instead which includes better verification information.\\n     */\\n    function latestAnswer() public view virtual override returns (int256) {\\n        return rounds[latestRoundId].answer;\\n    }\\n\\n    /**\\n     * @notice get the most recent updated at timestamp\\n     *\\n     * @dev #[deprecated] Use latestRoundData instead. This does not error if no\\n     * answer has been reached, it will simply return 0. Either wait to point to\\n     * an already answered Aggregator or use the recommended latestRoundData\\n     * instead which includes better verification information.\\n     */\\n    function latestTimestamp() public view virtual override returns (uint256) {\\n        return rounds[latestRoundId].updatedAt;\\n    }\\n\\n    /**\\n     * @notice get the ID of the last updated round\\n     *\\n     * @dev #[deprecated] Use latestRoundData instead. This does not error if no\\n     * answer has been reached, it will simply return 0. Either wait to point to\\n     * an already answered Aggregator or use the recommended latestRoundData\\n     * instead which includes better verification information.\\n     */\\n    function latestRound() public view virtual override returns (uint256) {\\n        return latestRoundId;\\n    }\\n\\n    /**\\n     * @notice get past rounds answers\\n     * @param _roundId the round number to retrieve the answer for\\n     *\\n     * @dev #[deprecated] Use getRoundData instead. This does not error if no\\n     * answer has been reached, it will simply return 0. Either wait to point to\\n     * an already answered Aggregator or use the recommended getRoundData\\n     * instead which includes better verification information.\\n     */\\n    function getAnswer(uint256 _roundId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (int256)\\n    {\\n        if (validRoundId(_roundId)) {\\n            return rounds[uint32(_roundId)].answer;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice get timestamp when an answer was last updated\\n     * @param _roundId the round number to retrieve the updated timestamp for\\n     *\\n     * @dev #[deprecated] Use getRoundData instead. This does not error if no\\n     * answer has been reached, it will simply return 0. Either wait to point to\\n     * an already answered Aggregator or use the recommended getRoundData\\n     * instead which includes better verification information.\\n     */\\n    function getTimestamp(uint256 _roundId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        if (validRoundId(_roundId)) {\\n            return rounds[uint32(_roundId)].updatedAt;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice get data about a round. Consumers are encouraged to check\\n     * that they're receiving fresh data by inspecting the updatedAt and\\n     * answeredInRound return values.\\n     * @param _roundId the round ID to retrieve the round data for\\n     * @return roundId is the round ID for which data was retrieved\\n     * @return answer is the answer for the given round\\n     * @return startedAt is the timestamp when the round was started. This is 0\\n     * if the round hasn't been started yet.\\n     * @return updatedAt is the timestamp when the round last was updated (i.e.\\n     * answer was last computed)\\n     * @return answeredInRound is the round ID of the round in which the answer\\n     * was computed. answeredInRound may be smaller than roundId when the round\\n     * timed out. answeredInRound is equal to roundId when the round didn't time out\\n     * and was completed regularly.\\n     * @dev Note that for in-progress rounds (i.e. rounds that haven't yet received\\n     * maxSubmissions) answer and updatedAt may change between queries.\\n     */\\n    function getRoundData(uint80 _roundId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        Round memory r = rounds[uint32(_roundId)];\\n\\n        require(\\n            r.answeredInRound > 0 && validRoundId(_roundId),\\n            V3_NO_DATA_ERROR\\n        );\\n\\n        return (\\n            _roundId,\\n            r.answer,\\n            r.startedAt,\\n            r.updatedAt,\\n            r.answeredInRound\\n        );\\n    }\\n\\n    /**\\n     * @notice get data about the latest round. Consumers are encouraged to check\\n     * that they're receiving fresh data by inspecting the updatedAt and\\n     * answeredInRound return values. Consumers are encouraged to\\n     * use this more fully featured method over the \\\"legacy\\\" latestRound/\\n     * latestAnswer/latestTimestamp functions. Consumers are encouraged to check\\n     * that they're receiving fresh data by inspecting the updatedAt and\\n     * answeredInRound return values.\\n     * @return roundId is the round ID for which data was retrieved\\n     * @return answer is the answer for the given round\\n     * @return startedAt is the timestamp when the round was started. This is 0\\n     * if the round hasn't been started yet.\\n     * @return updatedAt is the timestamp when the round last was updated (i.e.\\n     * answer was last computed)\\n     * @return answeredInRound is the round ID of the round in which the answer\\n     * was computed. answeredInRound may be smaller than roundId when the round\\n     * timed out. answeredInRound is equal to roundId when the round didn't time\\n     * out and was completed regularly.\\n     * @dev Note that for in-progress rounds (i.e. rounds that haven't yet\\n     * received maxSubmissions) answer and updatedAt may change between queries.\\n     */\\n    function latestRoundData()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        return getRoundData(latestRoundId);\\n    }\\n\\n    /**\\n     * @notice query the available amount of LINK for an oracle to withdraw\\n     */\\n    function withdrawablePayment(address _oracle)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return oracles[_oracle].withdrawable;\\n    }\\n\\n    /**\\n     * @notice transfers the oracle's LINK to another address. Can only be called\\n     * by the oracle's admin.\\n     * @param _oracle is the oracle whose LINK is transferred\\n     * @param _recipient is the address to send the LINK to\\n     * @param _amount is the amount of LINK to send\\n     */\\n    function withdrawPayment(\\n        address _oracle,\\n        address _recipient,\\n        uint256 _amount\\n    ) external {\\n        require(oracles[_oracle].admin == msg.sender, \\\"only callable by admin\\\");\\n\\n        // Safe to downcast _amount because the total amount of LINK is less than 2^128.\\n        uint128 amount = uint128(_amount);\\n        uint128 available = oracles[_oracle].withdrawable;\\n        require(available >= amount, \\\"insufficient withdrawable funds\\\");\\n\\n        oracles[_oracle].withdrawable = available.sub(amount);\\n        recordedFunds.allocated = recordedFunds.allocated.sub(amount);\\n\\n        assert(linkToken.transfer(_recipient, uint256(amount)));\\n    }\\n\\n    /**\\n     * @notice transfers the owner's LINK to another address\\n     * @param _recipient is the address to send the LINK to\\n     * @param _amount is the amount of LINK to send\\n     */\\n    function withdrawFunds(address _recipient, uint256 _amount)\\n        external\\n        onlyOwner()\\n    {\\n        uint256 available = uint256(recordedFunds.available);\\n        require(\\n            available.sub(requiredReserve(paymentAmount)) >= _amount,\\n            \\\"insufficient reserve funds\\\"\\n        );\\n        require(\\n            linkToken.transfer(_recipient, _amount),\\n            \\\"token transfer failed\\\"\\n        );\\n        updateAvailableFunds();\\n    }\\n\\n    /**\\n     * @notice get the admin address of an oracle\\n     * @param _oracle is the address of the oracle whose admin is being queried\\n     */\\n    function getAdmin(address _oracle) external view returns (address) {\\n        return oracles[_oracle].admin;\\n    }\\n\\n    /**\\n     * @notice transfer the admin address for an oracle\\n     * @param _oracle is the address of the oracle whose admin is being transferred\\n     * @param _newAdmin is the new admin address\\n     */\\n    function transferAdmin(address _oracle, address _newAdmin) external {\\n        require(oracles[_oracle].admin == msg.sender, \\\"only callable by admin\\\");\\n        oracles[_oracle].pendingAdmin = _newAdmin;\\n\\n        emit OracleAdminUpdateRequested(_oracle, msg.sender, _newAdmin);\\n    }\\n\\n    /**\\n     * @notice accept the admin address transfer for an oracle\\n     * @param _oracle is the address of the oracle whose admin is being transferred\\n     */\\n    function acceptAdmin(address _oracle) external {\\n        require(\\n            oracles[_oracle].pendingAdmin == msg.sender,\\n            \\\"only callable by pending admin\\\"\\n        );\\n        oracles[_oracle].pendingAdmin = address(0);\\n        oracles[_oracle].admin = msg.sender;\\n\\n        emit OracleAdminUpdated(_oracle, msg.sender);\\n    }\\n\\n    /**\\n     * @notice allows non-oracles to request a new round\\n     */\\n    function requestNewRound() external returns (uint80) {\\n        require(requesters[msg.sender].authorized, \\\"not authorized requester\\\");\\n\\n        uint32 current = reportingRoundId;\\n        require(\\n            rounds[current].updatedAt > 0 || timedOut(current),\\n            \\\"prev round must be supersedable\\\"\\n        );\\n\\n        uint32 newRoundId = current.add(1);\\n        requesterInitializeNewRound(newRoundId);\\n        return newRoundId;\\n    }\\n\\n    /**\\n     * @notice allows the owner to specify new non-oracles to start new rounds\\n     * @param _requester is the address to set permissions for\\n     * @param _authorized is a boolean specifying whether they can start new rounds or not\\n     * @param _delay is the number of rounds the requester must wait before starting another round\\n     */\\n    function setRequesterPermissions(\\n        address _requester,\\n        bool _authorized,\\n        uint32 _delay\\n    ) external onlyOwner() {\\n        if (requesters[_requester].authorized == _authorized) return;\\n\\n        if (_authorized) {\\n            requesters[_requester].authorized = _authorized;\\n            requesters[_requester].delay = _delay;\\n        } else {\\n            delete requesters[_requester];\\n        }\\n\\n        emit RequesterPermissionsSet(_requester, _authorized, _delay);\\n    }\\n\\n    /**\\n     * @notice called through LINK's transferAndCall to update available funds\\n     * in the same transaction as the funds were transferred to the aggregator\\n     * @param _data is mostly ignored. It is checked for length, to be sure\\n     * nothing strange is passed in.\\n     */\\n    function onTokenTransfer(\\n        address,\\n        uint256,\\n        bytes calldata _data\\n    ) external {\\n        require(_data.length == 0, \\\"transfer doesn't accept calldata\\\");\\n        updateAvailableFunds();\\n    }\\n\\n    /**\\n     * @notice a method to provide all current info oracles need. Intended only\\n     * only to be callable by oracles. Not for use by contracts to read state.\\n     * @param _oracle the address to look up information for.\\n     */\\n    function oracleRoundState(address _oracle, uint32 _queriedRoundId)\\n        external\\n        view\\n        returns (\\n            bool _eligibleToSubmit,\\n            uint32 _roundId,\\n            int256 _latestSubmission,\\n            uint64 _startedAt,\\n            uint64 _timeout,\\n            uint128 _availableFunds,\\n            uint8 _oracleCount,\\n            uint128 _paymentAmount\\n        )\\n    {\\n        require(msg.sender == tx.origin, \\\"off-chain reading only\\\");\\n\\n        if (_queriedRoundId > 0) {\\n            Round storage round = rounds[_queriedRoundId];\\n            RoundDetails storage details = details[_queriedRoundId];\\n            return (\\n                eligibleForSpecificRound(_oracle, _queriedRoundId),\\n                _queriedRoundId,\\n                oracles[_oracle].latestSubmission,\\n                round.startedAt,\\n                details.timeout,\\n                recordedFunds.available,\\n                oracleCount(),\\n                (round.startedAt > 0 ? details.paymentAmount : paymentAmount)\\n            );\\n        } else {\\n            return oracleRoundStateSuggestRound(_oracle);\\n        }\\n    }\\n\\n    /**\\n     * @notice method to update the address which does external data validation.\\n     * @param _newValidator designates the address of the new validation contract.\\n     */\\n    function setValidator(address _newValidator) public onlyOwner() {\\n        address previous = address(validator);\\n\\n        if (previous != _newValidator) {\\n            validator = AggregatorValidatorInterface(_newValidator);\\n\\n            emit ValidatorUpdated(previous, _newValidator);\\n        }\\n    }\\n\\n    /**\\n     * Private\\n     */\\n\\n    function initializeNewRound(uint32 _roundId) private {\\n        updateTimedOutRoundInfo(_roundId.sub(1));\\n\\n        reportingRoundId = _roundId;\\n        RoundDetails memory nextDetails =\\n            RoundDetails(\\n                new int256[](0),\\n                maxSubmissionCount,\\n                minSubmissionCount,\\n                timeout,\\n                paymentAmount\\n            );\\n        details[_roundId] = nextDetails;\\n        rounds[_roundId].startedAt = uint64(block.timestamp);\\n\\n        emit NewRound(_roundId, msg.sender, rounds[_roundId].startedAt);\\n    }\\n\\n    function oracleInitializeNewRound(uint32 _roundId) private {\\n        if (!newRound(_roundId)) return;\\n        uint256 lastStarted = oracles[msg.sender].lastStartedRound; // cache storage reads\\n        if (_roundId <= lastStarted + restartDelay && lastStarted != 0) return;\\n\\n        initializeNewRound(_roundId);\\n\\n        oracles[msg.sender].lastStartedRound = _roundId;\\n    }\\n\\n    function requesterInitializeNewRound(uint32 _roundId) private {\\n        if (!newRound(_roundId)) return;\\n        uint256 lastStarted = requesters[msg.sender].lastStartedRound; // cache storage reads\\n        require(\\n            _roundId > lastStarted + requesters[msg.sender].delay ||\\n                lastStarted == 0,\\n            \\\"must delay requests\\\"\\n        );\\n\\n        initializeNewRound(_roundId);\\n\\n        requesters[msg.sender].lastStartedRound = _roundId;\\n    }\\n\\n    function updateTimedOutRoundInfo(uint32 _roundId) private {\\n        if (!timedOut(_roundId)) return;\\n\\n        uint32 prevId = _roundId.sub(1);\\n        rounds[_roundId].answer = rounds[prevId].answer;\\n        rounds[_roundId].answeredInRound = rounds[prevId].answeredInRound;\\n        rounds[_roundId].updatedAt = uint64(block.timestamp);\\n\\n        delete details[_roundId];\\n    }\\n\\n    function eligibleForSpecificRound(address _oracle, uint32 _queriedRoundId)\\n        private\\n        view\\n        returns (bool _eligible)\\n    {\\n        if (rounds[_queriedRoundId].startedAt > 0) {\\n            return\\n                acceptingSubmissions(_queriedRoundId) &&\\n                validateOracleRound(_oracle, _queriedRoundId).length == 0;\\n        } else {\\n            return\\n                delayed(_oracle, _queriedRoundId) &&\\n                validateOracleRound(_oracle, _queriedRoundId).length == 0;\\n        }\\n    }\\n\\n    function oracleRoundStateSuggestRound(address _oracle)\\n        private\\n        view\\n        returns (\\n            bool _eligibleToSubmit,\\n            uint32 _roundId,\\n            int256 _latestSubmission,\\n            uint64 _startedAt,\\n            uint64 _timeout,\\n            uint128 _availableFunds,\\n            uint8 _oracleCount,\\n            uint128 _paymentAmount\\n        )\\n    {\\n        Round storage round = rounds[0];\\n        OracleStatus storage oracle = oracles[_oracle];\\n\\n        bool shouldSupersede =\\n            oracle.lastReportedRound == reportingRoundId ||\\n                !acceptingSubmissions(reportingRoundId);\\n        // Instead of nudging oracles to submit to the next round, the inclusion of\\n        // the shouldSupersede bool in the if condition pushes them towards\\n        // submitting in a currently open round.\\n        if (supersedable(reportingRoundId) && shouldSupersede) {\\n            _roundId = reportingRoundId.add(1);\\n            round = rounds[_roundId];\\n\\n            _paymentAmount = paymentAmount;\\n            _eligibleToSubmit = delayed(_oracle, _roundId);\\n        } else {\\n            _roundId = reportingRoundId;\\n            round = rounds[_roundId];\\n\\n            _paymentAmount = details[_roundId].paymentAmount;\\n            _eligibleToSubmit = acceptingSubmissions(_roundId);\\n        }\\n\\n        if (validateOracleRound(_oracle, _roundId).length != 0) {\\n            _eligibleToSubmit = false;\\n        }\\n\\n        return (\\n            _eligibleToSubmit,\\n            _roundId,\\n            oracle.latestSubmission,\\n            round.startedAt,\\n            details[_roundId].timeout,\\n            recordedFunds.available,\\n            oracleCount(),\\n            _paymentAmount\\n        );\\n    }\\n\\n    function updateRoundAnswer(uint32 _roundId)\\n        internal\\n        returns (bool, int256)\\n    {\\n        if (\\n            details[_roundId].submissions.length <\\n            details[_roundId].minSubmissions\\n        ) {\\n            return (false, 0);\\n        }\\n\\n        int256 newAnswer =\\n            Median.calculateInplace(details[_roundId].submissions);\\n        rounds[_roundId].answer = newAnswer;\\n        rounds[_roundId].updatedAt = uint64(block.timestamp);\\n        rounds[_roundId].answeredInRound = _roundId;\\n        latestRoundId = _roundId;\\n\\n        emit AnswerUpdated(newAnswer, _roundId, now);\\n\\n        return (true, newAnswer);\\n    }\\n\\n    function validateAnswer(uint32 _roundId, int256 _newAnswer) private {\\n        AggregatorValidatorInterface av = validator; // cache storage reads\\n        if (address(av) == address(0)) return;\\n\\n        uint32 prevRound = _roundId.sub(1);\\n        uint32 prevAnswerRoundId = rounds[prevRound].answeredInRound;\\n        int256 prevRoundAnswer = rounds[prevRound].answer;\\n        // We do not want the validator to ever prevent reporting, so we limit its\\n        // gas usage and catch any errors that may arise.\\n        try\\n            av.validate{gas: VALIDATOR_GAS_LIMIT}(\\n                prevAnswerRoundId,\\n                prevRoundAnswer,\\n                _roundId,\\n                _newAnswer\\n            )\\n        {} catch {}\\n    }\\n\\n    function payOracle(uint32 _roundId) private {\\n        uint128 payment = details[_roundId].paymentAmount;\\n        Funds memory funds = recordedFunds;\\n        funds.available = funds.available.sub(payment);\\n        funds.allocated = funds.allocated.add(payment);\\n        recordedFunds = funds;\\n        oracles[msg.sender].withdrawable = oracles[msg.sender].withdrawable.add(\\n            payment\\n        );\\n\\n        emit AvailableFundsUpdated(funds.available);\\n    }\\n\\n    function recordSubmission(int256 _submission, uint32 _roundId) private {\\n        require(\\n            acceptingSubmissions(_roundId),\\n            \\\"round not accepting submissions\\\"\\n        );\\n\\n        details[_roundId].submissions.push(_submission);\\n        oracles[msg.sender].lastReportedRound = _roundId;\\n        oracles[msg.sender].latestSubmission = _submission;\\n\\n        emit SubmissionReceived(_submission, _roundId, msg.sender);\\n    }\\n\\n    function deleteRoundDetails(uint32 _roundId) private {\\n        if (\\n            details[_roundId].submissions.length <\\n            details[_roundId].maxSubmissions\\n        ) return;\\n\\n        delete details[_roundId];\\n    }\\n\\n    function timedOut(uint32 _roundId) private view returns (bool) {\\n        uint64 startedAt = rounds[_roundId].startedAt;\\n        uint32 roundTimeout = details[_roundId].timeout;\\n        return\\n            startedAt > 0 &&\\n            roundTimeout > 0 &&\\n            startedAt.add(roundTimeout) < block.timestamp;\\n    }\\n\\n    function getStartingRound(address _oracle) private view returns (uint32) {\\n        uint32 currentRound = reportingRoundId;\\n        if (currentRound != 0 && currentRound == oracles[_oracle].endingRound) {\\n            return currentRound;\\n        }\\n        return currentRound.add(1);\\n    }\\n\\n    function previousAndCurrentUnanswered(uint32 _roundId, uint32 _rrId)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return _roundId.add(1) == _rrId && rounds[_rrId].updatedAt == 0;\\n    }\\n\\n    function requiredReserve(uint256 payment) private view returns (uint256) {\\n        return payment.mul(oracleCount()).mul(RESERVE_ROUNDS);\\n    }\\n\\n    function addOracle(address _oracle, address _admin) private {\\n        require(!oracleEnabled(_oracle), \\\"oracle already enabled\\\");\\n\\n        require(_admin != address(0), \\\"cannot set admin to 0\\\");\\n        require(\\n            oracles[_oracle].admin == address(0) ||\\n                oracles[_oracle].admin == _admin,\\n            \\\"owner cannot overwrite admin\\\"\\n        );\\n\\n        oracles[_oracle].startingRound = getStartingRound(_oracle);\\n        oracles[_oracle].endingRound = ROUND_MAX;\\n        oracles[_oracle].index = uint16(oracleAddresses.length);\\n        oracleAddresses.push(_oracle);\\n        oracles[_oracle].admin = _admin;\\n\\n        emit OraclePermissionsUpdated(_oracle, true);\\n        emit OracleAdminUpdated(_oracle, _admin);\\n    }\\n\\n    function removeOracle(address _oracle) private {\\n        require(oracleEnabled(_oracle), \\\"oracle not enabled\\\");\\n\\n        oracles[_oracle].endingRound = reportingRoundId.add(1);\\n        address tail = oracleAddresses[uint256(oracleCount()).sub(1)];\\n        uint16 index = oracles[_oracle].index;\\n        oracles[tail].index = index;\\n        delete oracles[_oracle].index;\\n        oracleAddresses[index] = tail;\\n        oracleAddresses.pop();\\n\\n        emit OraclePermissionsUpdated(_oracle, false);\\n    }\\n\\n    function validateOracleRound(address _oracle, uint32 _roundId)\\n        private\\n        view\\n        returns (bytes memory)\\n    {\\n        // cache storage reads\\n        uint32 startingRound = oracles[_oracle].startingRound;\\n        uint32 rrId = reportingRoundId;\\n\\n        if (startingRound == 0) return \\\"not enabled oracle\\\";\\n        if (startingRound > _roundId) return \\\"not yet enabled oracle\\\";\\n        if (oracles[_oracle].endingRound < _roundId)\\n            return \\\"no longer allowed oracle\\\";\\n        if (oracles[_oracle].lastReportedRound >= _roundId)\\n            return \\\"cannot report on previous rounds\\\";\\n        if (\\n            _roundId != rrId &&\\n            _roundId != rrId.add(1) &&\\n            !previousAndCurrentUnanswered(_roundId, rrId)\\n        ) return \\\"invalid round to report\\\";\\n        if (_roundId != 1 && !supersedable(_roundId.sub(1)))\\n            return \\\"previous round not supersedable\\\";\\n    }\\n\\n    function supersedable(uint32 _roundId) private view returns (bool) {\\n        return rounds[_roundId].updatedAt > 0 || timedOut(_roundId);\\n    }\\n\\n    function oracleEnabled(address _oracle) private view returns (bool) {\\n        return oracles[_oracle].endingRound == ROUND_MAX;\\n    }\\n\\n    function acceptingSubmissions(uint32 _roundId) private view returns (bool) {\\n        return details[_roundId].maxSubmissions != 0;\\n    }\\n\\n    function delayed(address _oracle, uint32 _roundId)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        uint256 lastStarted = oracles[_oracle].lastStartedRound;\\n        return _roundId > lastStarted + restartDelay || lastStarted == 0;\\n    }\\n\\n    function newRound(uint32 _roundId) private view returns (bool) {\\n        return _roundId == reportingRoundId.add(1);\\n    }\\n\\n    function validRoundId(uint256 _roundId) private view returns (bool) {\\n        return _roundId <= ROUND_MAX;\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/Median.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"./vendor/SafeMath.sol\\\";\\nimport \\\"./SignedSafeMath.sol\\\";\\n\\nlibrary Median {\\n  using SignedSafeMath for int256;\\n\\n  int256 constant INT_MAX = 2**255-1;\\n\\n  /**\\n   * @notice Returns the sorted middle, or the average of the two middle indexed items if the\\n   * array has an even number of elements.\\n   * @dev The list passed as an argument isn't modified.\\n   * @dev This algorithm has expected runtime O(n), but for adversarially chosen inputs\\n   * the runtime is O(n^2).\\n   * @param list The list of elements to compare\\n   */\\n  function calculate(int256[] memory list)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    return calculateInplace(copy(list));\\n  }\\n\\n  /**\\n   * @notice See documentation for function calculate.\\n   * @dev The list passed as an argument may be permuted.\\n   */\\n  function calculateInplace(int256[] memory list)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    require(0 < list.length, \\\"list must not be empty\\\");\\n    uint256 len = list.length;\\n    uint256 middleIndex = len / 2;\\n    if (len % 2 == 0) {\\n      int256 median1;\\n      int256 median2;\\n      (median1, median2) = quickselectTwo(list, 0, len - 1, middleIndex - 1, middleIndex);\\n      return SignedSafeMath.avg(median1, median2);\\n    } else {\\n      return quickselect(list, 0, len - 1, middleIndex);\\n    }\\n  }\\n\\n  /**\\n   * @notice Maximum length of list that shortSelectTwo can handle\\n   */\\n  uint256 constant SHORTSELECTTWO_MAX_LENGTH = 7;\\n\\n  /**\\n   * @notice Select the k1-th and k2-th element from list of length at most 7\\n   * @dev Uses an optimal sorting network\\n   */\\n  function shortSelectTwo(\\n    int256[] memory list,\\n    uint256 lo,\\n    uint256 hi,\\n    uint256 k1,\\n    uint256 k2\\n  )\\n    private\\n    pure\\n    returns (int256 k1th, int256 k2th)\\n  {\\n    // Uses an optimal sorting network (https://en.wikipedia.org/wiki/Sorting_network)\\n    // for lists of length 7. Network layout is taken from\\n    // http://jgamble.ripco.net/cgi-bin/nw.cgi?inputs=7&algorithm=hibbard&output=svg\\n\\n    uint256 len = hi + 1 - lo;\\n    int256 x0 = list[lo + 0];\\n    int256 x1 = 1 < len ? list[lo + 1] : INT_MAX;\\n    int256 x2 = 2 < len ? list[lo + 2] : INT_MAX;\\n    int256 x3 = 3 < len ? list[lo + 3] : INT_MAX;\\n    int256 x4 = 4 < len ? list[lo + 4] : INT_MAX;\\n    int256 x5 = 5 < len ? list[lo + 5] : INT_MAX;\\n    int256 x6 = 6 < len ? list[lo + 6] : INT_MAX;\\n\\n    if (x0 > x1) {(x0, x1) = (x1, x0);}\\n    if (x2 > x3) {(x2, x3) = (x3, x2);}\\n    if (x4 > x5) {(x4, x5) = (x5, x4);}\\n    if (x0 > x2) {(x0, x2) = (x2, x0);}\\n    if (x1 > x3) {(x1, x3) = (x3, x1);}\\n    if (x4 > x6) {(x4, x6) = (x6, x4);}\\n    if (x1 > x2) {(x1, x2) = (x2, x1);}\\n    if (x5 > x6) {(x5, x6) = (x6, x5);}\\n    if (x0 > x4) {(x0, x4) = (x4, x0);}\\n    if (x1 > x5) {(x1, x5) = (x5, x1);}\\n    if (x2 > x6) {(x2, x6) = (x6, x2);}\\n    if (x1 > x4) {(x1, x4) = (x4, x1);}\\n    if (x3 > x6) {(x3, x6) = (x6, x3);}\\n    if (x2 > x4) {(x2, x4) = (x4, x2);}\\n    if (x3 > x5) {(x3, x5) = (x5, x3);}\\n    if (x3 > x4) {(x3, x4) = (x4, x3);}\\n\\n    uint256 index1 = k1 - lo;\\n    if (index1 == 0) {k1th = x0;}\\n    else if (index1 == 1) {k1th = x1;}\\n    else if (index1 == 2) {k1th = x2;}\\n    else if (index1 == 3) {k1th = x3;}\\n    else if (index1 == 4) {k1th = x4;}\\n    else if (index1 == 5) {k1th = x5;}\\n    else if (index1 == 6) {k1th = x6;}\\n    else {revert(\\\"k1 out of bounds\\\");}\\n\\n    uint256 index2 = k2 - lo;\\n    if (k1 == k2) {return (k1th, k1th);}\\n    else if (index2 == 0) {return (k1th, x0);}\\n    else if (index2 == 1) {return (k1th, x1);}\\n    else if (index2 == 2) {return (k1th, x2);}\\n    else if (index2 == 3) {return (k1th, x3);}\\n    else if (index2 == 4) {return (k1th, x4);}\\n    else if (index2 == 5) {return (k1th, x5);}\\n    else if (index2 == 6) {return (k1th, x6);}\\n    else {revert(\\\"k2 out of bounds\\\");}\\n  }\\n\\n  /**\\n   * @notice Selects the k-th ranked element from list, looking only at indices between lo and hi\\n   * (inclusive). Modifies list in-place.\\n   */\\n  function quickselect(int256[] memory list, uint256 lo, uint256 hi, uint256 k)\\n    private\\n    pure\\n    returns (int256 kth)\\n  {\\n    require(lo <= k);\\n    require(k <= hi);\\n    while (lo < hi) {\\n      if (hi - lo < SHORTSELECTTWO_MAX_LENGTH) {\\n        int256 ignore;\\n        (kth, ignore) = shortSelectTwo(list, lo, hi, k, k);\\n        return kth;\\n      }\\n      uint256 pivotIndex = partition(list, lo, hi);\\n      if (k <= pivotIndex) {\\n        // since pivotIndex < (original hi passed to partition),\\n        // termination is guaranteed in this case\\n        hi = pivotIndex;\\n      } else {\\n        // since (original lo passed to partition) <= pivotIndex,\\n        // termination is guaranteed in this case\\n        lo = pivotIndex + 1;\\n      }\\n    }\\n    return list[lo];\\n  }\\n\\n  /**\\n   * @notice Selects the k1-th and k2-th ranked elements from list, looking only at indices between\\n   * lo and hi (inclusive). Modifies list in-place.\\n   */\\n  function quickselectTwo(\\n    int256[] memory list,\\n    uint256 lo,\\n    uint256 hi,\\n    uint256 k1,\\n    uint256 k2\\n  )\\n    internal // for testing\\n    pure\\n    returns (int256 k1th, int256 k2th)\\n  {\\n    require(k1 < k2);\\n    require(lo <= k1 && k1 <= hi);\\n    require(lo <= k2 && k2 <= hi);\\n\\n    while (true) {\\n      if (hi - lo < SHORTSELECTTWO_MAX_LENGTH) {\\n        return shortSelectTwo(list, lo, hi, k1, k2);\\n      }\\n      uint256 pivotIdx = partition(list, lo, hi);\\n      if (k2 <= pivotIdx) {\\n        hi = pivotIdx;\\n      } else if (pivotIdx < k1) {\\n        lo = pivotIdx + 1;\\n      } else {\\n        assert(k1 <= pivotIdx && pivotIdx < k2);\\n        k1th = quickselect(list, lo, pivotIdx, k1);\\n        k2th = quickselect(list, pivotIdx + 1, hi, k2);\\n        return (k1th, k2th);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Partitions list in-place using Hoare's partitioning scheme.\\n   * Only elements of list between indices lo and hi (inclusive) will be modified.\\n   * Returns an index i, such that:\\n   * - lo <= i < hi\\n   * - forall j in [lo, i]. list[j] <= list[i]\\n   * - forall j in [i, hi]. list[i] <= list[j]\\n   */\\n  function partition(int256[] memory list, uint256 lo, uint256 hi)\\n    private\\n    pure\\n    returns (uint256)\\n  {\\n    // We don't care about overflow of the addition, because it would require a list\\n    // larger than any feasible computer's memory.\\n    int256 pivot = list[(lo + hi) / 2];\\n    lo -= 1; // this can underflow. that's intentional.\\n    hi += 1;\\n    while (true) {\\n      do {\\n        lo += 1;\\n      } while (list[lo] < pivot);\\n      do {\\n        hi -= 1;\\n      } while (list[hi] > pivot);\\n      if (lo < hi) {\\n        (list[lo], list[hi]) = (list[hi], list[lo]);\\n      } else {\\n        // Let orig_lo and orig_hi be the original values of lo and hi passed to partition.\\n        // Then, hi < orig_hi, because hi decreases *strictly* monotonically\\n        // in each loop iteration and\\n        // - either list[orig_hi] > pivot, in which case the first loop iteration\\n        //   will achieve hi < orig_hi;\\n        // - or list[orig_hi] <= pivot, in which case at least two loop iterations are\\n        //   needed:\\n        //   - lo will have to stop at least once in the interval\\n        //     [orig_lo, (orig_lo + orig_hi)/2]\\n        //   - (orig_lo + orig_hi)/2 < orig_hi\\n        return hi;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Makes an in-memory copy of the array passed in\\n   * @param list Reference to the array to be copied\\n   */\\n  function copy(int256[] memory list)\\n    private\\n    pure\\n    returns(int256[] memory)\\n  {\\n    int256[] memory list2 = new int256[](list.length);\\n    for (uint256 i = 0; i < list.length; i++) {\\n      list2[i] = list[i];\\n    }\\n    return list2;\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/Owned.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @title The Owned contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract Owned {\\n\\n  address payable public owner;\\n  address private pendingOwner;\\n\\n  event OwnershipTransferRequested(\\n    address indexed from,\\n    address indexed to\\n  );\\n  event OwnershipTransferred(\\n    address indexed from,\\n    address indexed to\\n  );\\n\\n  constructor() public {\\n    owner = msg.sender;\\n  }\\n\\n  /**\\n   * @dev Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address _to)\\n    external\\n    onlyOwner()\\n  {\\n    pendingOwner = _to;\\n\\n    emit OwnershipTransferRequested(owner, _to);\\n  }\\n\\n  /**\\n   * @dev Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership()\\n    external\\n  {\\n    require(msg.sender == pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = owner;\\n    owner = msg.sender;\\n    pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @dev Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner, \\\"Only callable by owner\\\");\\n    _;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/SafeMath128.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * This library is a version of Open Zeppelin's SafeMath, modified to support\\n * unsigned 128 bit integers.\\n */\\nlibrary SafeMath128 {\\n  /**\\n    * @dev Returns the addition of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `+` operator.\\n    *\\n    * Requirements:\\n    * - Addition cannot overflow.\\n    */\\n  function add(uint128 a, uint128 b) internal pure returns (uint128) {\\n    uint128 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the subtraction of two unsigned integers, reverting on\\n    * overflow (when the result is negative).\\n    *\\n    * Counterpart to Solidity's `-` operator.\\n    *\\n    * Requirements:\\n    * - Subtraction cannot overflow.\\n    */\\n  function sub(uint128 a, uint128 b) internal pure returns (uint128) {\\n    require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n    uint128 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the multiplication of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `*` operator.\\n    *\\n    * Requirements:\\n    * - Multiplication cannot overflow.\\n    */\\n  function mul(uint128 a, uint128 b) internal pure returns (uint128) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint128 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the integer division of two unsigned integers. Reverts on\\n    * division by zero. The result is rounded towards zero.\\n    *\\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n    * uses an invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function div(uint128 a, uint128 b) internal pure returns (uint128) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, \\\"SafeMath: division by zero\\\");\\n    uint128 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n    * Reverts when dividing by zero.\\n    *\\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\\n    * invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function mod(uint128 a, uint128 b) internal pure returns (uint128) {\\n    require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n    return a % b;\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/SafeMath32.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * This library is a version of Open Zeppelin's SafeMath, modified to support\\n * unsigned 32 bit integers.\\n */\\nlibrary SafeMath32 {\\n  /**\\n    * @dev Returns the addition of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `+` operator.\\n    *\\n    * Requirements:\\n    * - Addition cannot overflow.\\n    */\\n  function add(uint32 a, uint32 b) internal pure returns (uint32) {\\n    uint32 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the subtraction of two unsigned integers, reverting on\\n    * overflow (when the result is negative).\\n    *\\n    * Counterpart to Solidity's `-` operator.\\n    *\\n    * Requirements:\\n    * - Subtraction cannot overflow.\\n    */\\n  function sub(uint32 a, uint32 b) internal pure returns (uint32) {\\n    require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n    uint32 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the multiplication of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `*` operator.\\n    *\\n    * Requirements:\\n    * - Multiplication cannot overflow.\\n    */\\n  function mul(uint32 a, uint32 b) internal pure returns (uint32) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint32 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the integer division of two unsigned integers. Reverts on\\n    * division by zero. The result is rounded towards zero.\\n    *\\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n    * uses an invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function div(uint32 a, uint32 b) internal pure returns (uint32) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, \\\"SafeMath: division by zero\\\");\\n    uint32 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n    * Reverts when dividing by zero.\\n    *\\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\\n    * invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function mod(uint32 a, uint32 b) internal pure returns (uint32) {\\n    require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n    return a % b;\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/SafeMath64.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * This library is a version of Open Zeppelin's SafeMath, modified to support\\n * unsigned 64 bit integers.\\n */\\nlibrary SafeMath64 {\\n  /**\\n    * @dev Returns the addition of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `+` operator.\\n    *\\n    * Requirements:\\n    * - Addition cannot overflow.\\n    */\\n  function add(uint64 a, uint64 b) internal pure returns (uint64) {\\n    uint64 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the subtraction of two unsigned integers, reverting on\\n    * overflow (when the result is negative).\\n    *\\n    * Counterpart to Solidity's `-` operator.\\n    *\\n    * Requirements:\\n    * - Subtraction cannot overflow.\\n    */\\n  function sub(uint64 a, uint64 b) internal pure returns (uint64) {\\n    require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n    uint64 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the multiplication of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `*` operator.\\n    *\\n    * Requirements:\\n    * - Multiplication cannot overflow.\\n    */\\n  function mul(uint64 a, uint64 b) internal pure returns (uint64) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint64 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the integer division of two unsigned integers. Reverts on\\n    * division by zero. The result is rounded towards zero.\\n    *\\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n    * uses an invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function div(uint64 a, uint64 b) internal pure returns (uint64) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, \\\"SafeMath: division by zero\\\");\\n    uint64 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n    * Reverts when dividing by zero.\\n    *\\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\\n    * invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function mod(uint64 a, uint64 b) internal pure returns (uint64) {\\n    require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n    return a % b;\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/interfaces/AggregatorValidatorInterface.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ninterface AggregatorValidatorInterface {\\n  function validate(\\n    uint256 previousRoundId,\\n    int256 previousAnswer,\\n    uint256 currentRoundId,\\n    int256 currentAnswer\\n  ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n  function approve(address spender, uint256 value) external returns (bool success);\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n  function decimals() external view returns (uint8 decimalPlaces);\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n  function name() external view returns (string memory tokenName);\\n  function symbol() external view returns (string memory tokenSymbol);\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n  function transfer(address to, uint256 value) external returns (bool success);\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/vendor/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n    * @dev Returns the addition of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `+` operator.\\n    *\\n    * Requirements:\\n    * - Addition cannot overflow.\\n    */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the subtraction of two unsigned integers, reverting on\\n    * overflow (when the result is negative).\\n    *\\n    * Counterpart to Solidity's `-` operator.\\n    *\\n    * Requirements:\\n    * - Subtraction cannot overflow.\\n    */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the multiplication of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `*` operator.\\n    *\\n    * Requirements:\\n    * - Multiplication cannot overflow.\\n    */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the integer division of two unsigned integers. Reverts on\\n    * division by zero. The result is rounded towards zero.\\n    *\\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n    * uses an invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, \\\"SafeMath: division by zero\\\");\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n    * Reverts when dividing by zero.\\n    *\\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\\n    * invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n    return a % b;\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/SignedSafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nlibrary SignedSafeMath {\\n  int256 constant private _INT256_MIN = -2**255;\\n\\n  /**\\n   * @dev Multiplies two signed integers, reverts on overflow.\\n   */\\n  function mul(int256 a, int256 b) internal pure returns (int256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n    int256 c = a * b;\\n    require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\\n   */\\n  function div(int256 a, int256 b) internal pure returns (int256) {\\n    require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n    require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n    int256 c = a / b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Subtracts two signed integers, reverts on overflow.\\n   */\\n  function sub(int256 a, int256 b) internal pure returns (int256) {\\n    int256 c = a - b;\\n    require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Adds two signed integers, reverts on overflow.\\n   */\\n  function add(int256 a, int256 b) internal pure returns (int256) {\\n    int256 c = a + b;\\n    require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @notice Computes average of two signed integers, ensuring that the computation\\n   * doesn't overflow.\\n   * @dev If the result is not an integer, it is rounded towards zero. For example,\\n   * avg(-3, -4) = -3\\n   */\\n  function avg(int256 _a, int256 _b)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    if ((_a < 0 && _b > 0) || (_a > 0 && _b < 0)) {\\n      return add(_a, _b) / 2;\\n    }\\n    int256 remainder = (_a % 2 + _b % 2) / 2;\\n    return add(add(_a / 2, _b / 2), remainder);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/UpgradeableProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Proxy.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n *\\n * Upgradeability is only provided internally through {_upgradeTo}. For an externally upgradeable proxy see\\n * {TransparentUpgradeableProxy}.\\n */\\ncontract UpgradeableProxy is Proxy {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) public payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _setImplementation(_logic);\\n        if(_data.length > 0) {\\n            Address.functionDelegateCall(_logic, _data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            impl := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Upgrades the proxy to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal virtual {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableProxy: new implementation is not a contract\\\");\\n\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, newImplementation)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 { revert(0, returndatasize()) }\\n            default { return(0, returndatasize()) }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./UpgradeableProxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is UpgradeableProxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {UpgradeableProxy-constructor}.\\n     */\\n    constructor(address _logic, address admin_, bytes memory _data) public payable UpgradeableProxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _setAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _admin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _admin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        require(newAdmin != address(0), \\\"TransparentUpgradeableProxy: new admin is the zero address\\\");\\n        emit AdminChanged(_admin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external virtual ifAdmin {\\n        _upgradeTo(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable virtual ifAdmin {\\n        _upgradeTo(newImplementation);\\n        Address.functionDelegateCall(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address adm) {\\n        bytes32 slot = _ADMIN_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            adm := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        bytes32 slot = _ADMIN_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, newAdmin)\\n        }\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _admin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/PoolTokenProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol\\\";\\n\\ncontract PoolTokenProxy is TransparentUpgradeableProxy {\\n    constructor(\\n        address _logic,\\n        address _proxyAdmin,\\n        address _underlyer,\\n        address _priceAgg\\n    )\\n        public\\n        TransparentUpgradeableProxy(\\n            _logic,\\n            _proxyAdmin,\\n            abi.encodeWithSignature(\\n                \\\"initialize(address,address,address)\\\",\\n                _proxyAdmin,\\n                _underlyer,\\n                _priceAgg\\n            )\\n        )\\n    {} // solhint-disable no-empty-blocks\\n}\\n\"\r\n    },\r\n    \"contracts/PoolManagerProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol\\\";\\n\\ncontract PoolManagerProxy is TransparentUpgradeableProxy {\\n    constructor(\\n        address _logic,\\n        address _proxyAdmin,\\n        address _addressRegistry\\n    )\\n        public\\n        TransparentUpgradeableProxy(\\n            _logic,\\n            _proxyAdmin,\\n            abi.encodeWithSignature(\\n                \\\"initialize(address,address)\\\",\\n                _proxyAdmin,\\n                _addressRegistry\\n            )\\n        )\\n    {} // solhint-disable no-empty-blocks\\n}\\n\"\r\n    },\r\n    \"contracts/MetaPoolTokenProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol\\\";\\n\\ncontract MetaPoolTokenProxy is TransparentUpgradeableProxy {\\n    constructor(\\n        address _logic,\\n        address _proxyAdmin,\\n        address _addressRegistry\\n    )\\n        public\\n        TransparentUpgradeableProxy(\\n            _logic,\\n            _proxyAdmin,\\n            abi.encodeWithSignature(\\n                \\\"initialize(address,address)\\\",\\n                _proxyAdmin,\\n                _addressRegistry\\n            )\\n        )\\n    {} // solhint-disable no-empty-blocks\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/ProxyAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../access/Ownable.sol\\\";\\nimport \\\"./TransparentUpgradeableProxy.sol\\\";\\n\\n/**\\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\\n */\\ncontract ProxyAdmin is Ownable {\\n\\n    /**\\n     * @dev Returns the current implementation of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"implementation()\\\")) == 0x5c60da1b\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"5c60da1b\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Returns the current admin of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"admin()\\\")) == 0xf851a440\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"f851a440\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Changes the admin of `proxy` to `newAdmin`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the current admin of `proxy`.\\n     */\\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\\n        proxy.changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\\n        proxy.upgradeTo(implementation);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgradeAndCall(TransparentUpgradeableProxy proxy, address implementation, bytes memory data) public payable virtual onlyOwner {\\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/RewardDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract RewardDistributor is Ownable {\\n    using ECDSA for bytes32;\\n    using SafeERC20 for IERC20;\\n\\n    event SignerSet(address newSigner);\\n    event Claimed(uint256 nonce, address recipient, uint256 amount);\\n\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        uint256 chainId;\\n        address verifyingContract;\\n    }\\n\\n    struct Recipient {\\n        uint256 nonce;\\n        address wallet;\\n        uint256 amount;\\n    }\\n\\n    bytes32 private constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n\\n    bytes32 private constant RECIPIENT_TYPEHASH =\\n        keccak256(\\\"Recipient(uint256 nonce,address wallet,uint256 amount)\\\");\\n\\n    bytes32 private immutable DOMAIN_SEPARATOR;\\n\\n    IERC20 public immutable apyToken;\\n    mapping(address => uint256) public accountNonces;\\n    address public signer;\\n\\n    constructor(IERC20 token, address signerAddress) public {\\n        require(address(token) != address(0), \\\"Invalid APY Address\\\");\\n        require(signerAddress != address(0), \\\"Invalid Signer Address\\\");\\n        apyToken = token;\\n        signer = signerAddress;\\n\\n        DOMAIN_SEPARATOR = _hashDomain(\\n            EIP712Domain({\\n                name: \\\"APY Distribution\\\",\\n                version: \\\"1\\\",\\n                chainId: _getChainID(),\\n                verifyingContract: address(this)\\n            })\\n        );\\n    }\\n\\n    function _hashDomain(EIP712Domain memory eip712Domain)\\n        private\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    EIP712_DOMAIN_TYPEHASH,\\n                    keccak256(bytes(eip712Domain.name)),\\n                    keccak256(bytes(eip712Domain.version)),\\n                    eip712Domain.chainId,\\n                    eip712Domain.verifyingContract\\n                )\\n            );\\n    }\\n\\n    function _hashRecipient(Recipient memory recipient)\\n        private\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    RECIPIENT_TYPEHASH,\\n                    recipient.nonce,\\n                    recipient.wallet,\\n                    recipient.amount\\n                )\\n            );\\n    }\\n\\n    function _hash(Recipient memory recipient) private returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR,\\n                    _hashRecipient(recipient)\\n                )\\n            );\\n    }\\n\\n    function _getChainID() private view returns (uint256) {\\n        uint256 id;\\n        // no-inline-assembly\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    function setSigner(address newSigner) external onlyOwner {\\n        signer = newSigner;\\n    }\\n\\n    function claim(\\n        Recipient calldata recipient,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s // bytes calldata signature\\n    ) external {\\n        address signatureSigner = ecrecover(_hash(recipient), v, r, s);\\n        require(signatureSigner == signer, \\\"Invalid Signature\\\");\\n\\n        require(\\n            recipient.nonce == accountNonces[recipient.wallet],\\n            \\\"Nonce Mismatch\\\"\\n        );\\n        require(\\n            apyToken.balanceOf(address(this)) >= recipient.amount,\\n            \\\"Insufficient Funds\\\"\\n        );\\n\\n        accountNonces[recipient.wallet] += 1;\\n        apyToken.safeTransfer(recipient.wallet, recipient.amount);\\n\\n        emit Claimed(recipient.nonce, recipient.wallet, recipient.amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/periphery/Uniswap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @notice Uniswap contract for adding/removing liquidity from pools\\ninterface IUniswapV2Router {\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n}\\n\\ninterface IUniswapV2Pair is IERC20 {\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n}\\n\\n/**\\n * @title Periphery Contract for the Uniswap V2 Router\\n * @author APY.Finance\\n * @notice This contract enables the APY.Finance system to retrieve the balance\\n *         of an underlyer of a Uniswap LP token. The balance is used as part\\n *         of the Chainlink computation of the deployed TVL.  The primary\\n *         `getUnderlyerBalance` function is invoked indirectly when a\\n *         Chainlink node calls `balanceOf` on the APYAssetAllocationRegistry.\\n */\\ncontract UniswapPeriphery {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @notice Returns the balance of an underlying token represented by\\n     *         an account's LP token balance.\\n     * @param lpToken the LP token representing the share of the pool\\n     * @param tokenIndex the index indicating which underlyer\\n     * @return balance\\n     */\\n    function getUnderlyerBalance(\\n        address account,\\n        IUniswapV2Pair lpToken,\\n        uint256 tokenIndex\\n    ) external view returns (uint256 balance) {\\n        require(address(lpToken) != address(0), \\\"INVALID_LP_TOKEN\\\");\\n\\n        uint256 poolBalance = getPoolBalance(lpToken, tokenIndex);\\n        (uint256 lpTokenBalance, uint256 lpTokenSupply) =\\n            getLpTokenShare(account, lpToken);\\n\\n        balance = lpTokenBalance.mul(poolBalance).div(lpTokenSupply);\\n    }\\n\\n    function getPoolBalance(IUniswapV2Pair lpToken, uint256 tokenIndex)\\n        public\\n        view\\n        returns (uint256 poolBalance)\\n    {\\n        require(address(lpToken) != address(0), \\\"INVALID_LP_TOKEN\\\");\\n        IERC20 token;\\n        if (tokenIndex == 0) {\\n            token = IERC20(lpToken.token0());\\n        } else if (tokenIndex == 1) {\\n            token = IERC20(lpToken.token1());\\n        } else {\\n            revert(\\\"INVALID_TOKEN_INDEX\\\");\\n        }\\n        poolBalance = token.balanceOf(address(lpToken));\\n    }\\n\\n    function getLpTokenShare(address account, IERC20 lpToken)\\n        public\\n        view\\n        returns (uint256 balance, uint256 totalSupply)\\n    {\\n        require(address(lpToken) != address(0), \\\"INVALID_LP_TOKEN\\\");\\n\\n        totalSupply = lpToken.totalSupply();\\n        balance = lpToken.balanceOf(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/periphery/Curve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @notice the stablecoin pool contract\\ninterface IStableSwap {\\n    function balances(uint256 coin) external view returns (uint256);\\n\\n    /// @dev the number of coins is hard-coded in curve contracts\\n    // solhint-disable-next-line\\n    function add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount)\\n        external;\\n\\n    /// @dev the number of coins is hard-coded in curve contracts\\n    // solhint-disable-next-line\\n    function remove_liquidity(uint256 _amount, uint256[3] memory min_amounts)\\n        external;\\n\\n    // solhint-disable-next-line\\n    function remove_liquidity_one_coin(\\n        uint256 tokenAmount,\\n        int128 tokenIndex,\\n        uint256 minAmount\\n    ) external;\\n\\n    /// @dev For newest curve pools like aave; older pools refer to a private `token` variable.\\n    // function lp_token() external view returns (address); // solhint-disable-line func-name-mixedcase\\n}\\n\\n/// @notice the liquidity gauge, i.e. staking contract, for the stablecoin pool\\ninterface ILiquidityGauge {\\n    function deposit(uint256 _value) external;\\n\\n    function deposit(uint256 _value, address _addr) external;\\n\\n    function withdraw(uint256 _value) external;\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\\n/**\\n * @title Periphery Contract for the Curve 3pool\\n * @author APY.Finance\\n * @notice This contract enables the APY.Finance system to retrieve the balance\\n *         of an underlyer of a Curve LP token. The balance is used as part\\n *         of the Chainlink computation of the deployed TVL.  The primary\\n *         `getUnderlyerBalance` function is invoked indirectly when a\\n *         Chainlink node calls `balanceOf` on the APYAssetAllocationRegistry.\\n */\\ncontract CurvePeriphery {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @notice Returns the balance of an underlying token represented by\\n     *         an account's LP token balance.\\n     * @param stableSwap the liquidity pool comprised of multiple underlyers\\n     * @param gauge the staking contract for the LP tokens\\n     * @param lpToken the LP token representing the share of the pool\\n     * @param coin the index indicating which underlyer\\n     * @return balance\\n     */\\n    function getUnderlyerBalance(\\n        address account,\\n        IStableSwap stableSwap,\\n        ILiquidityGauge gauge,\\n        IERC20 lpToken,\\n        uint256 coin\\n    ) external view returns (uint256 balance) {\\n        require(address(stableSwap) != address(0), \\\"INVALID_STABLESWAP\\\");\\n        require(address(gauge) != address(0), \\\"INVALID_GAUGE\\\");\\n        require(address(lpToken) != address(0), \\\"INVALID_LP_TOKEN\\\");\\n\\n        uint256 poolBalance = getPoolBalance(stableSwap, coin);\\n        (uint256 lpTokenBalance, uint256 lpTokenSupply) =\\n            getLpTokenShare(account, stableSwap, gauge, lpToken);\\n\\n        balance = lpTokenBalance.mul(poolBalance).div(lpTokenSupply);\\n    }\\n\\n    function getPoolBalance(IStableSwap stableSwap, uint256 coin)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(address(stableSwap) != address(0), \\\"INVALID_STABLESWAP\\\");\\n        return stableSwap.balances(coin);\\n    }\\n\\n    function getLpTokenShare(\\n        address account,\\n        IStableSwap stableSwap,\\n        ILiquidityGauge gauge,\\n        IERC20 lpToken\\n    ) public view returns (uint256 balance, uint256 totalSupply) {\\n        require(address(stableSwap) != address(0), \\\"INVALID_STABLESWAP\\\");\\n        require(address(gauge) != address(0), \\\"INVALID_GAUGE\\\");\\n        require(address(lpToken) != address(0), \\\"INVALID_LP_TOKEN\\\");\\n\\n        totalSupply = lpToken.totalSupply();\\n        balance = lpToken.balanceOf(account);\\n        balance = balance.add(gauge.balanceOf(account));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/periphery/Aave.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @notice the lending pool contract\\ninterface IAaveLendingPool {\\n    /**\\n     * @notice Deposits a certain amount of an asset into the protocol, minting\\n     *         the same amount of corresponding aTokens, and transferring them\\n     *         to the onBehalfOf address.\\n     *         E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n     * @dev When depositing, the LendingPool contract must have at least an\\n     *      allowance() of amount for the asset being deposited.\\n     *      During testing, you can use the referral code: 0.\\n     * @param asset The address of the underlying asset to deposit\\n     * @param amount The amount to be deposited\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning\\n     *         the equivalent aTokens owned.\\n     *         E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC,\\n     *         burning the 100 aUSDC\\n     * @dev Ensure you set the relevant ERC20 allowance of the aToken,\\n     *      before calling this function, so the LendingPool\\n     *      contract can burn the associated aTokens.\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to Address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     **/\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n}\\n\\n/**\\n * @title Periphery Contract for the Aave lending pool\\n * @author APY.Finance\\n * @notice This contract enables the APY.Finance system to retrieve the balance\\n *         of an underlyer of an Aave lending token. The balance is used as part\\n *         of the Chainlink computation of the deployed TVL.  The primary\\n *         `getUnderlyerBalance` function is invoked indirectly when a\\n *         Chainlink node calls `balanceOf` on the APYAssetAllocationRegistry.\\n */\\ncontract AavePeriphery {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @notice Returns the balance of an underlying token represented by\\n     *         an account's aToken balance\\n     * @dev aTokens represent the underlyer amount at par (1-1), growing with interest.\\n     * @param aToken the LP token representing the share of the pool\\n     * @return balance\\n     */\\n    function getUnderlyerBalance(address account, IERC20 aToken)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        require(account != address(0), \\\"INVALID_ACCOUNT\\\");\\n        require(address(aToken) != address(0), \\\"INVALID_AAVE_TOKEN\\\");\\n\\n        return aToken.balanceOf(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"contracts/Imports.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\n\\n// We import the contract so truffle compiles it, and we have the ABI\\n// available when working from truffle console.\\nimport \\\"@gnosis.pm/mock-contract/contracts/MockContract.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/ProxyAdmin.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\"\r\n    },\r\n    \"@gnosis.pm/mock-contract/contracts/MockContract.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ninterface MockInterface {\\n\\t/**\\n\\t * @dev After calling this method, the mock will return `response` when it is called\\n\\t * with any calldata that is not mocked more specifically below\\n\\t * (e.g. using givenMethodReturn).\\n\\t * @param response ABI encoded response that will be returned if method is invoked\\n\\t */\\n\\tfunction givenAnyReturn(bytes calldata response) external;\\n\\tfunction givenAnyReturnBool(bool response) external;\\n\\tfunction givenAnyReturnUint(uint response) external;\\n\\tfunction givenAnyReturnAddress(address response) external;\\n\\n\\tfunction givenAnyRevert() external;\\n\\tfunction givenAnyRevertWithMessage(string calldata message) external;\\n\\tfunction givenAnyRunOutOfGas() external;\\n\\n\\t/**\\n\\t * @dev After calling this method, the mock will return `response` when the given\\n\\t * methodId is called regardless of arguments. If the methodId and arguments\\n\\t * are mocked more specifically (using `givenMethodAndArguments`) the latter\\n\\t * will take precedence.\\n\\t * @param method ABI encoded methodId. It is valid to pass full calldata (including arguments). The mock will extract the methodId from it\\n\\t * @param response ABI encoded response that will be returned if method is invoked\\n\\t */\\n\\tfunction givenMethodReturn(bytes calldata method, bytes calldata response) external;\\n\\tfunction givenMethodReturnBool(bytes calldata method, bool response) external;\\n\\tfunction givenMethodReturnUint(bytes calldata method, uint response) external;\\n\\tfunction givenMethodReturnAddress(bytes calldata method, address response) external;\\n\\n\\tfunction givenMethodRevert(bytes calldata method) external;\\n\\tfunction givenMethodRevertWithMessage(bytes calldata method, string calldata message) external;\\n\\tfunction givenMethodRunOutOfGas(bytes calldata method) external;\\n\\n\\t/**\\n\\t * @dev After calling this method, the mock will return `response` when the given\\n\\t * methodId is called with matching arguments. These exact calldataMocks will take\\n\\t * precedence over all other calldataMocks.\\n\\t * @param call ABI encoded calldata (methodId and arguments)\\n\\t * @param response ABI encoded response that will be returned if contract is invoked with calldata\\n\\t */\\n\\tfunction givenCalldataReturn(bytes calldata call, bytes calldata response) external;\\n\\tfunction givenCalldataReturnBool(bytes calldata call, bool response) external;\\n\\tfunction givenCalldataReturnUint(bytes calldata call, uint response) external;\\n\\tfunction givenCalldataReturnAddress(bytes calldata call, address response) external;\\n\\n\\tfunction givenCalldataRevert(bytes calldata call) external;\\n\\tfunction givenCalldataRevertWithMessage(bytes calldata call, string calldata message) external;\\n\\tfunction givenCalldataRunOutOfGas(bytes calldata call) external;\\n\\n\\t/**\\n\\t * @dev Returns the number of times anything has been called on this mock since last reset\\n\\t */\\n\\tfunction invocationCount() external returns (uint);\\n\\n\\t/**\\n\\t * @dev Returns the number of times the given method has been called on this mock since last reset\\n\\t * @param method ABI encoded methodId. It is valid to pass full calldata (including arguments). The mock will extract the methodId from it\\n\\t */\\n\\tfunction invocationCountForMethod(bytes calldata method) external returns (uint);\\n\\n\\t/**\\n\\t * @dev Returns the number of times this mock has been called with the exact calldata since last reset.\\n\\t * @param call ABI encoded calldata (methodId and arguments)\\n\\t */\\n\\tfunction invocationCountForCalldata(bytes calldata call) external returns (uint);\\n\\n\\t/**\\n\\t * @dev Resets all mocked methods and invocation counts.\\n\\t */\\n\\t function reset() external;\\n}\\n\\n/**\\n * Implementation of the MockInterface.\\n */\\ncontract MockContract is MockInterface {\\n\\tenum MockType { Return, Revert, OutOfGas }\\n\\t\\n\\tbytes32 public constant MOCKS_LIST_START = hex\\\"01\\\";\\n\\tbytes public constant MOCKS_LIST_END = \\\"0xff\\\";\\n\\tbytes32 public constant MOCKS_LIST_END_HASH = keccak256(MOCKS_LIST_END);\\n\\tbytes4 public constant SENTINEL_ANY_MOCKS = hex\\\"01\\\";\\n\\tbytes public constant DEFAULT_FALLBACK_VALUE = abi.encode(false);\\n\\n\\t// A linked list allows easy iteration and inclusion checks\\n\\tmapping(bytes32 => bytes) calldataMocks;\\n\\tmapping(bytes => MockType) calldataMockTypes;\\n\\tmapping(bytes => bytes) calldataExpectations;\\n\\tmapping(bytes => string) calldataRevertMessage;\\n\\tmapping(bytes32 => uint) calldataInvocations;\\n\\n\\tmapping(bytes4 => bytes4) methodIdMocks;\\n\\tmapping(bytes4 => MockType) methodIdMockTypes;\\n\\tmapping(bytes4 => bytes) methodIdExpectations;\\n\\tmapping(bytes4 => string) methodIdRevertMessages;\\n\\tmapping(bytes32 => uint) methodIdInvocations;\\n\\n\\tMockType fallbackMockType;\\n\\tbytes fallbackExpectation = DEFAULT_FALLBACK_VALUE;\\n\\tstring fallbackRevertMessage;\\n\\tuint invocations;\\n\\tuint resetCount;\\n\\n\\tconstructor() public {\\n\\t\\tcalldataMocks[MOCKS_LIST_START] = MOCKS_LIST_END;\\n\\t\\tmethodIdMocks[SENTINEL_ANY_MOCKS] = SENTINEL_ANY_MOCKS;\\n\\t}\\n\\n\\tfunction trackCalldataMock(bytes memory call) private {\\n\\t\\tbytes32 callHash = keccak256(call);\\n\\t\\tif (calldataMocks[callHash].length == 0) {\\n\\t\\t\\tcalldataMocks[callHash] = calldataMocks[MOCKS_LIST_START];\\n\\t\\t\\tcalldataMocks[MOCKS_LIST_START] = call;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction trackMethodIdMock(bytes4 methodId) private {\\n\\t\\tif (methodIdMocks[methodId] == 0x0) {\\n\\t\\t\\tmethodIdMocks[methodId] = methodIdMocks[SENTINEL_ANY_MOCKS];\\n\\t\\t\\tmethodIdMocks[SENTINEL_ANY_MOCKS] = methodId;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _givenAnyReturn(bytes memory response) internal {\\n\\t\\tfallbackMockType = MockType.Return;\\n\\t\\tfallbackExpectation = response;\\n\\t}\\n\\n\\tfunction givenAnyReturn(bytes calldata response) override external {\\n\\t\\t_givenAnyReturn(response);\\n\\t}\\n\\n\\tfunction givenAnyReturnBool(bool response) override external {\\n\\t\\tuint flag = response ? 1 : 0;\\n\\t\\t_givenAnyReturn(uintToBytes(flag));\\n\\t}\\n\\n\\tfunction givenAnyReturnUint(uint response) override external {\\n\\t\\t_givenAnyReturn(uintToBytes(response));\\t\\n\\t}\\n\\n\\tfunction givenAnyReturnAddress(address response) override external {\\n\\t\\t_givenAnyReturn(uintToBytes(uint(response)));\\n\\t}\\n\\n\\tfunction givenAnyRevert() override external {\\n\\t\\tfallbackMockType = MockType.Revert;\\n\\t\\tfallbackRevertMessage = \\\"\\\";\\n\\t}\\n\\n\\tfunction givenAnyRevertWithMessage(string calldata message) override external {\\n\\t\\tfallbackMockType = MockType.Revert;\\n\\t\\tfallbackRevertMessage = message;\\n\\t}\\n\\n\\tfunction givenAnyRunOutOfGas() override external {\\n\\t\\tfallbackMockType = MockType.OutOfGas;\\n\\t}\\n\\n\\tfunction _givenCalldataReturn(bytes memory call, bytes memory response) private  {\\n\\t\\tcalldataMockTypes[call] = MockType.Return;\\n\\t\\tcalldataExpectations[call] = response;\\n\\t\\ttrackCalldataMock(call);\\n\\t}\\n\\n\\tfunction givenCalldataReturn(bytes calldata call, bytes calldata response) override external  {\\n\\t\\t_givenCalldataReturn(call, response);\\n\\t}\\n\\n\\tfunction givenCalldataReturnBool(bytes calldata call, bool response) override external {\\n\\t\\tuint flag = response ? 1 : 0;\\n\\t\\t_givenCalldataReturn(call, uintToBytes(flag));\\n\\t}\\n\\n\\tfunction givenCalldataReturnUint(bytes calldata call, uint response) override external {\\n\\t\\t_givenCalldataReturn(call, uintToBytes(response));\\n\\t}\\n\\n\\tfunction givenCalldataReturnAddress(bytes calldata call, address response) override external {\\n\\t\\t_givenCalldataReturn(call, uintToBytes(uint(response)));\\n\\t}\\n\\n\\tfunction _givenMethodReturn(bytes memory call, bytes memory response) private {\\n\\t\\tbytes4 method = bytesToBytes4(call);\\n\\t\\tmethodIdMockTypes[method] = MockType.Return;\\n\\t\\tmethodIdExpectations[method] = response;\\n\\t\\ttrackMethodIdMock(method);\\t\\t\\n\\t}\\n\\n\\tfunction givenMethodReturn(bytes calldata call, bytes calldata response) override external {\\n\\t\\t_givenMethodReturn(call, response);\\n\\t}\\n\\n\\tfunction givenMethodReturnBool(bytes calldata call, bool response) override external {\\n\\t\\tuint flag = response ? 1 : 0;\\n\\t\\t_givenMethodReturn(call, uintToBytes(flag));\\n\\t}\\n\\n\\tfunction givenMethodReturnUint(bytes calldata call, uint response) override external {\\n\\t\\t_givenMethodReturn(call, uintToBytes(response));\\n\\t}\\n\\n\\tfunction givenMethodReturnAddress(bytes calldata call, address response) override external {\\n\\t\\t_givenMethodReturn(call, uintToBytes(uint(response)));\\n\\t}\\n\\n\\tfunction givenCalldataRevert(bytes calldata call) override external {\\n\\t\\tcalldataMockTypes[call] = MockType.Revert;\\n\\t\\tcalldataRevertMessage[call] = \\\"\\\";\\n\\t\\ttrackCalldataMock(call);\\n\\t}\\n\\n\\tfunction givenMethodRevert(bytes calldata call) override external {\\n\\t\\tbytes4 method = bytesToBytes4(call);\\n\\t\\tmethodIdMockTypes[method] = MockType.Revert;\\n\\t\\ttrackMethodIdMock(method);\\t\\t\\n\\t}\\n\\n\\tfunction givenCalldataRevertWithMessage(bytes calldata call, string calldata message) override external {\\n\\t\\tcalldataMockTypes[call] = MockType.Revert;\\n\\t\\tcalldataRevertMessage[call] = message;\\n\\t\\ttrackCalldataMock(call);\\n\\t}\\n\\n\\tfunction givenMethodRevertWithMessage(bytes calldata call, string calldata message) override external {\\n\\t\\tbytes4 method = bytesToBytes4(call);\\n\\t\\tmethodIdMockTypes[method] = MockType.Revert;\\n\\t\\tmethodIdRevertMessages[method] = message;\\n\\t\\ttrackMethodIdMock(method);\\t\\t\\n\\t}\\n\\n\\tfunction givenCalldataRunOutOfGas(bytes calldata call) override external {\\n\\t\\tcalldataMockTypes[call] = MockType.OutOfGas;\\n\\t\\ttrackCalldataMock(call);\\n\\t}\\n\\n\\tfunction givenMethodRunOutOfGas(bytes calldata call) override external {\\n\\t\\tbytes4 method = bytesToBytes4(call);\\n\\t\\tmethodIdMockTypes[method] = MockType.OutOfGas;\\n\\t\\ttrackMethodIdMock(method);\\t\\n\\t}\\n\\n\\tfunction invocationCount() override external returns (uint) {\\n\\t\\treturn invocations;\\n\\t}\\n\\n\\tfunction invocationCountForMethod(bytes calldata call) override external returns (uint) {\\n\\t\\tbytes4 method = bytesToBytes4(call);\\n\\t\\treturn methodIdInvocations[keccak256(abi.encodePacked(resetCount, method))];\\n\\t}\\n\\n\\tfunction invocationCountForCalldata(bytes calldata call) override external returns (uint) {\\n\\t\\treturn calldataInvocations[keccak256(abi.encodePacked(resetCount, call))];\\n\\t}\\n\\n\\tfunction reset() override external {\\n\\t\\t// Reset all exact calldataMocks\\n\\t\\tbytes memory nextMock = calldataMocks[MOCKS_LIST_START];\\n\\t\\tbytes32 mockHash = keccak256(nextMock);\\n\\t\\t// We cannot compary bytes\\n\\t\\twhile(mockHash != MOCKS_LIST_END_HASH) {\\n\\t\\t\\t// Reset all mock maps\\n\\t\\t\\tcalldataMockTypes[nextMock] = MockType.Return;\\n\\t\\t\\tcalldataExpectations[nextMock] = hex\\\"\\\";\\n\\t\\t\\tcalldataRevertMessage[nextMock] = \\\"\\\";\\n\\t\\t\\t// Set next mock to remove\\n\\t\\t\\tnextMock = calldataMocks[mockHash];\\n\\t\\t\\t// Remove from linked list\\n\\t\\t\\tcalldataMocks[mockHash] = \\\"\\\";\\n\\t\\t\\t// Update mock hash\\n\\t\\t\\tmockHash = keccak256(nextMock);\\n\\t\\t}\\n\\t\\t// Clear list\\n\\t\\tcalldataMocks[MOCKS_LIST_START] = MOCKS_LIST_END;\\n\\n\\t\\t// Reset all any calldataMocks\\n\\t\\tbytes4 nextAnyMock = methodIdMocks[SENTINEL_ANY_MOCKS];\\n\\t\\twhile(nextAnyMock != SENTINEL_ANY_MOCKS) {\\n\\t\\t\\tbytes4 currentAnyMock = nextAnyMock;\\n\\t\\t\\tmethodIdMockTypes[currentAnyMock] = MockType.Return;\\n\\t\\t\\tmethodIdExpectations[currentAnyMock] = hex\\\"\\\";\\n\\t\\t\\tmethodIdRevertMessages[currentAnyMock] = \\\"\\\";\\n\\t\\t\\tnextAnyMock = methodIdMocks[currentAnyMock];\\n\\t\\t\\t// Remove from linked list\\n\\t\\t\\tmethodIdMocks[currentAnyMock] = 0x0;\\n\\t\\t}\\n\\t\\t// Clear list\\n\\t\\tmethodIdMocks[SENTINEL_ANY_MOCKS] = SENTINEL_ANY_MOCKS;\\n\\n\\t\\tfallbackExpectation = DEFAULT_FALLBACK_VALUE;\\n\\t\\tfallbackMockType = MockType.Return;\\n\\t\\tinvocations = 0;\\n\\t\\tresetCount += 1;\\n\\t}\\n\\n\\tfunction useAllGas() private {\\n\\t\\twhile(true) {\\n\\t\\t\\tbool s;\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\t//expensive call to EC multiply contract\\n\\t\\t\\t\\ts := call(sub(gas(), 2000), 6, 0, 0x0, 0xc0, 0x0, 0x60)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction bytesToBytes4(bytes memory b) private pure returns (bytes4) {\\n\\t\\tbytes4 out;\\n\\t\\tfor (uint i = 0; i < 4; i++) {\\n\\t\\t\\tout |= bytes4(b[i] & 0xFF) >> (i * 8);\\n\\t\\t}\\n\\t\\treturn out;\\n\\t}\\n\\n\\tfunction uintToBytes(uint256 x) private pure returns (bytes memory b) {\\n\\t\\tb = new bytes(32);\\n\\t\\tassembly { mstore(add(b, 32), x) }\\n\\t}\\n\\n\\tfunction updateInvocationCount(bytes4 methodId, bytes memory originalMsgData) public {\\n\\t\\trequire(msg.sender == address(this), \\\"Can only be called from the contract itself\\\");\\n\\t\\tinvocations += 1;\\n\\t\\tmethodIdInvocations[keccak256(abi.encodePacked(resetCount, methodId))] += 1;\\n\\t\\tcalldataInvocations[keccak256(abi.encodePacked(resetCount, originalMsgData))] += 1;\\n\\t}\\n\\n\\tfallback () payable external {\\n\\t\\tbytes4 methodId;\\n\\t\\tassembly {\\n\\t\\t\\tmethodId := calldataload(0)\\n\\t\\t}\\n\\n\\t\\t// First, check exact matching overrides\\n\\t\\tif (calldataMockTypes[msg.data] == MockType.Revert) {\\n\\t\\t\\trevert(calldataRevertMessage[msg.data]);\\n\\t\\t}\\n\\t\\tif (calldataMockTypes[msg.data] == MockType.OutOfGas) {\\n\\t\\t\\tuseAllGas();\\n\\t\\t}\\n\\t\\tbytes memory result = calldataExpectations[msg.data];\\n\\n\\t\\t// Then check method Id overrides\\n\\t\\tif (result.length == 0) {\\n\\t\\t\\tif (methodIdMockTypes[methodId] == MockType.Revert) {\\n\\t\\t\\t\\trevert(methodIdRevertMessages[methodId]);\\n\\t\\t\\t}\\n\\t\\t\\tif (methodIdMockTypes[methodId] == MockType.OutOfGas) {\\n\\t\\t\\t\\tuseAllGas();\\n\\t\\t\\t}\\n\\t\\t\\tresult = methodIdExpectations[methodId];\\n\\t\\t}\\n\\n\\t\\t// Last, use the fallback override\\n\\t\\tif (result.length == 0) {\\n\\t\\t\\tif (fallbackMockType == MockType.Revert) {\\n\\t\\t\\t\\trevert(fallbackRevertMessage);\\n\\t\\t\\t}\\n\\t\\t\\tif (fallbackMockType == MockType.OutOfGas) {\\n\\t\\t\\t\\tuseAllGas();\\n\\t\\t\\t}\\n\\t\\t\\tresult = fallbackExpectation;\\n\\t\\t}\\n\\n\\t\\t// Record invocation as separate call so we don't rollback in case we are called with STATICCALL\\n\\t\\t(, bytes memory r) = address(this).call{gas: 100000}(abi.encodeWithSignature(\\\"updateInvocationCount(bytes4,bytes)\\\", methodId, msg.data));\\n\\t\\tassert(r.length == 0);\\n\\t\\t\\n\\t\\tassembly {\\n\\t\\t\\treturn(add(0x20, result), mload(result))\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/GovernanceTokenProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol\\\";\\n\\ncontract GovernanceTokenProxy is TransparentUpgradeableProxy {\\n    constructor(\\n        address _logic,\\n        address _proxyAdmin,\\n        uint256 _totalSupply\\n    )\\n        public\\n        TransparentUpgradeableProxy(\\n            _logic,\\n            _proxyAdmin,\\n            abi.encodeWithSignature(\\n                \\\"initialize(address,uint256)\\\",\\n                _proxyAdmin,\\n                _totalSupply\\n            )\\n        )\\n    {} // solhint-disable no-empty-blocks\\n}\\n\"\r\n    },\r\n    \"contracts/AddressRegistryV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\\\";\\nimport \\\"./interfaces/IAddressRegistryV2.sol\\\";\\n\\n/**\\n * @title APY.Finance's address registry\\n * @author APY.Finance\\n * @notice The address registry has two important purposes, one which\\n *         is fairly concrete and another abstract.\\n *\\n *         1. The registry enables components of the APY.Finance system\\n *         and external systems to retrieve core addresses reliably\\n *         even when the functionality may move to a different\\n *         address.\\n *\\n *         2. The registry also makes explicit which contracts serve\\n *         as primary entrypoints for interacting with different\\n *         components.  Not every contract is registered here, only\\n *         the ones properly deserving of an identifier.  This helps\\n *         define explicit boundaries between groups of contracts,\\n *         each of which is logically cohesive.\\n */\\ncontract AddressRegistryV2 is\\n    Initializable,\\n    OwnableUpgradeSafe,\\n    IAddressRegistryV2\\n{\\n    /* ------------------------------- */\\n    /* impl-specific storage variables */\\n    /* ------------------------------- */\\n    /** @notice the same address as the proxy admin; used\\n     *  to protect init functions for upgrades */\\n    address public proxyAdmin;\\n    bytes32[] internal _idList;\\n    mapping(bytes32 => address) internal _idToAddress;\\n\\n    /* ------------------------------- */\\n\\n    event AdminChanged(address);\\n    event AddressRegistered(bytes32 id, address _address);\\n\\n    /**\\n     * @dev Since the proxy delegate calls to this \\\"logic\\\" contract, any\\n     * storage set by the logic contract's constructor during deploy is\\n     * disregarded and this function is needed to initialize the proxy\\n     * contract's storage according to this contract's layout.\\n     *\\n     * Since storage is not set yet, there is no simple way to protect\\n     * calling this function with owner modifiers.  Thus the OpenZeppelin\\n     * `initializer` modifier protects this function from being called\\n     * repeatedly.  It should be called during the deployment so that\\n     * it cannot be called by someone else later.\\n     *\\n     * NOTE: this function is copied from the V1 contract and has already\\n     * been called during V1 deployment.  It is included here for clarity.\\n     */\\n    function initialize(address adminAddress) external initializer {\\n        require(adminAddress != address(0), \\\"INVALID_ADMIN\\\");\\n\\n        // initialize ancestor storage\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n\\n        // initialize impl-specific storage\\n        setAdminAddress(adminAddress);\\n    }\\n\\n    /**\\n     * @dev Dummy function to show how one would implement an init function\\n     * for future upgrades.  Note the `initializer` modifier can only be used\\n     * once in the entire contract, so we can't use it here.  Instead,\\n     * we set the proxy admin address as a variable and protect this\\n     * function with `onlyAdmin`, which only allows the proxy admin\\n     * to call this function during upgrades.\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    function initializeUpgrade() external virtual onlyAdmin {}\\n\\n    function setAdminAddress(address adminAddress) public onlyOwner {\\n        require(adminAddress != address(0), \\\"INVALID_ADMIN\\\");\\n        proxyAdmin = adminAddress;\\n        emit AdminChanged(adminAddress);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the proxy admin.\\n     */\\n    modifier onlyAdmin() {\\n        require(msg.sender == proxyAdmin, \\\"ADMIN_ONLY\\\");\\n        _;\\n    }\\n\\n    /// @notice Returns the list of all registered identifiers.\\n    function getIds() public view override returns (bytes32[] memory) {\\n        return _idList;\\n    }\\n\\n    /**\\n     * @notice Register address with identifier.\\n     * @dev Using an existing ID will replace the old address with new.\\n     *      Currently there is no way to remove an ID, as attempting to\\n     *      register the zero address will revert.\\n     */\\n    function registerAddress(bytes32 id, address _address) public onlyOwner {\\n        require(_address != address(0), \\\"Invalid address\\\");\\n        if (_idToAddress[id] == address(0)) {\\n            // id wasn't registered before, so add it to the list\\n            _idList.push(id);\\n        }\\n        _idToAddress[id] = _address;\\n        emit AddressRegistered(id, _address);\\n    }\\n\\n    /// @dev Convenient method to register multiple addresses at once.\\n    function registerMultipleAddresses(\\n        bytes32[] calldata ids,\\n        address[] calldata addresses\\n    ) external onlyOwner {\\n        require(ids.length == addresses.length, \\\"Inputs have differing length\\\");\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            bytes32 id = ids[i];\\n            address _address = addresses[i];\\n            registerAddress(id, _address);\\n        }\\n    }\\n\\n    /// @notice Retrieve the address corresponding to the identifier.\\n    function getAddress(bytes32 id) public view override returns (address) {\\n        address _address = _idToAddress[id];\\n        require(_address != address(0), \\\"Missing address\\\");\\n        return _address;\\n    }\\n\\n    /**\\n     * @dev Delete the address corresponding to the identifier.\\n     *      Time-complexity is O(n) where n is the length of `_idList`.\\n     */\\n    function deleteAddress(bytes32 id) public onlyOwner {\\n        for (uint256 i = 0; i < _idList.length; i++) {\\n            if (_idList[i] == id) {\\n                // copy last element to slot i and shorten array\\n                _idList[i] = _idList[_idList.length - 1];\\n                _idList.pop();\\n                delete _idToAddress[id];\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the address for the Pool Manager.\\n     * @dev Not just a helper function, this makes explicit a key ID\\n     *      for the system.\\n     */\\n    function poolManagerAddress() public view override returns (address) {\\n        return getAddress(\\\"poolManager\\\");\\n    }\\n\\n    /**\\n     * @notice Get the address for the TVL Manager.\\n     * @dev Not just a helper function, this makes explicit a key ID\\n     *      for the system.\\n     */\\n    function tvlManagerAddress() public view override returns (address) {\\n        return getAddress(\\\"tvlManager\\\");\\n    }\\n\\n    /**\\n     * @notice An alias for the TVL Manager.  This is used by\\n     *         Chainlink nodes to compute the deployed value of the\\n     *         APY.Finance system.\\n     * @dev Not just a helper function, this makes explicit a key ID\\n     *      for the system.\\n     */\\n    function chainlinkRegistryAddress() public view override returns (address) {\\n        return tvlManagerAddress();\\n    }\\n\\n    /**\\n     * @notice Get the address for APY.Finance's DAI stablecoin pool.\\n     * @dev Not just a helper function, this makes explicit a key ID\\n     *      for the system.\\n     */\\n    function daiPoolAddress() public view override returns (address) {\\n        return getAddress(\\\"daiPool\\\");\\n    }\\n\\n    /**\\n     * @notice Get the address for APY.Finance's USDC stablecoin pool.\\n     * @dev Not just a helper function, this makes explicit a key ID\\n     *      for the system.\\n     */\\n    function usdcPoolAddress() public view override returns (address) {\\n        return getAddress(\\\"usdcPool\\\");\\n    }\\n\\n    /**\\n     * @notice Get the address for APY.Finance's USDT stablecoin pool.\\n     * @dev Not just a helper function, this makes explicit a key ID\\n     *      for the system.\\n     */\\n    function usdtPoolAddress() public view override returns (address) {\\n        return getAddress(\\\"usdtPool\\\");\\n    }\\n\\n    function mAptAddress() public view override returns (address) {\\n        return getAddress(\\\"mApt\\\");\\n    }\\n\\n    /**\\n     * @notice Get the address for the APY.Finance LP Safe.\\n     */\\n    function lpSafeAddress() public view override returns (address) {\\n        return getAddress(\\\"lpSafe\\\");\\n    }\\n\\n    function oracleAdapterAddress() public view override returns (address) {\\n        return getAddress(\\\"oracleAdapter\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/GovernanceToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract GovernanceToken is\\n    Initializable,\\n    OwnableUpgradeSafe,\\n    ERC20UpgradeSafe\\n{\\n    /* ------------------------------- */\\n    /* impl-specific storage variables */\\n    /* ------------------------------- */\\n    address public proxyAdmin;\\n\\n    /* ------------------------------- */\\n\\n    event AdminChanged(address);\\n\\n    function initialize(address adminAddress, uint256 totalSupply)\\n        external\\n        initializer\\n    {\\n        require(adminAddress != address(0), \\\"INVALID_ADMIN\\\");\\n\\n        // initialize ancestor storage\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __ERC20_init_unchained(\\\"APY Governance Token\\\", \\\"APY\\\");\\n\\n        // initialize impl-specific storage\\n        setAdminAddress(adminAddress);\\n\\n        _mint(msg.sender, totalSupply);\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    function initializeUpgrade() external virtual onlyAdmin {}\\n\\n    function setAdminAddress(address adminAddress) public onlyOwner {\\n        require(adminAddress != address(0), \\\"INVALID_ADMIN\\\");\\n        proxyAdmin = adminAddress;\\n        emit AdminChanged(adminAddress);\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == proxyAdmin, \\\"ADMIN_ONLY\\\");\\n        _;\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"DONT_SEND_ETHER\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/testing/GovernanceTokenUpgraded.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../GovernanceToken.sol\\\";\\n\\ncontract GovernanceTokenUpgraded is GovernanceToken {\\n    bool public newlyAddedVariable;\\n\\n    function initializeUpgrade() public override onlyAdmin {\\n        newlyAddedVariable = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMintableERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\n\\nimport \\\"./IDetailedERC20.sol\\\";\\nimport \\\"./IMintable.sol\\\";\\n\\n// solhint-disable no-empty-blocks\\ninterface IMintableERC20 is IDetailedERC20, IMintable {\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressRegistry\",\"outputs\":[{\"internalType\":\"contract IAddressRegistryV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ILpSafeFunder.PoolAmount[]\",\"name\":\"poolAmounts\",\"type\":\"tuple[]\"}],\"name\":\"fundLpSafe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressRegistry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressRegistry\",\"type\":\"address\"}],\"name\":\"setAddressRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"setAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ILpSafeFunder.PoolAmount[]\",\"name\":\"poolAmounts\",\"type\":\"tuple[]\"}],\"name\":\"withdrawFromLpSafe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PoolManager","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}