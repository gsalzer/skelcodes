{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-03-20\r\n*/\r\n\r\n// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.7.5;\r\n\r\ninterface IOwnable {\r\n\r\n  function owner() external view returns (address);\r\n\r\n  function renounceOwnership() external;\r\n  \r\n  function transferOwnership( address newOwner_ ) external;\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMathInt {\r\n\r\n    function sub(int256 a, int256 b)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    function add(int256 a, int256 b)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IBondingCalculator {\r\n\r\n  function calcDebtRatio( uint pendingDebtDue_, uint managedTokenTotalSupply_ ) external pure returns ( uint debtRatio_ );\r\n\r\n  function calcBondPremium( uint debtRatio_, uint bondScalingFactor ) external pure returns ( uint premium_ );\r\n\r\n  function calcPrincipleValuation( uint k_, uint amountDeposited_, uint totalSupplyOfTokenDeposited_ ) external pure returns ( uint principleValuation_ );\r\n\r\n  function principleValuation( address principleTokenAddress_, uint amountDeposited_ ) external view returns ( uint principleValuation_ );\r\n\r\n  function calculateBondInterest( address treasury_, address principleTokenAddress_, uint amountDeposited_, uint bondScalingFactor ) external returns ( uint interestDue_ );\r\n}\r\n/**\r\ninterface IPrincipleDepository {\r\n\r\n  function getCurrentBondTerm() external returns ( uint, uint );\r\n\r\n  function treasury() external returns ( address );\r\n\r\n  function getBondCalculator() external returns ( address );\r\n\r\n  function isPrincipleToken( address ) external returns ( bool );\r\n\r\n  function getDepositorInfoForDepositor( address ) external returns ( uint, uint, uint );\r\n\r\n  function addPrincipleToken( address newPrincipleToken_ ) external returns ( bool );\r\n\r\n  function setTreasury( address newTreasury_ ) external returns ( bool );\r\n\r\n  function addBondTerm( address bondPrincipleToken_, uint256 bondScalingFactor_, uint256 bondingPeriodInBlocks_ ) external returns ( bool );\r\n\r\n  function getDepositorInfo( address depositorAddress_) external view returns ( uint principleAmount_, uint interestDue_, uint bondMaturationBlock_);\r\n\r\n  function depositBondPrinciple( address bondPrincipleTokenToDeposit_, uint256 amountToDeposit_ ) external returns ( bool );\r\n\r\n  function depositBondPrincipleWithPermit( address bondPrincipleTokenToDeposit_, uint256 amountToDeposit_, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) external returns ( bool );\r\n\r\n  function withdrawPrincipleAndForfeitInterest( address bondPrincipleToWithdraw_ ) external returns ( bool );\r\n\r\n  function redeemBond(address bondPrincipleToRedeem_ ) external returns ( bool );\r\n}\r\n*/\r\ninterface ITreasury {\r\n  function getBondingCalculator() external returns ( address );\r\n  // function payDebt( address depositor_ ) external returns ( bool );\r\n  function getTimelockEndBlock() external returns ( uint );\r\n  function getManagedToken() external returns ( address );\r\n  // function getDebtAmountDue() external returns ( uint );\r\n  // function incurDebt( uint principieTokenAmountDeposited_, uint bondScalingValue_ ) external returns ( bool );\r\n}\r\n\r\nlibrary Address {\r\n\r\n  function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is IOwnable {\r\n\r\n  address internal _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor () {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred( address(0), _owner );\r\n  }\r\n\r\n  function owner() public view override returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require( _owner == msg.sender, \"Ownable: caller is not the owner\" );\r\n    _;\r\n  }\r\n\r\n  function renounceOwnership() public virtual override onlyOwner() {\r\n    emit OwnershipTransferred( _owner, address(0) );\r\n    _owner = address(0);\r\n  }\r\n\r\n  function transferOwnership( address newOwner_ ) public virtual override onlyOwner() {\r\n    require( newOwner_ != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred( _owner, newOwner_ );\r\n    _owner = newOwner_;\r\n  }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n  function decimals() external view returns (uint8);\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\ninterface IERC20Mintable {\r\n\r\n  function mint( uint256 amount_ ) external;\r\n\r\n  function mint( address account_, uint256 ammount_ ) external;\r\n}\r\n\r\ncontract Vault is ITreasury, Ownable {\r\n\r\n  using SafeMath for uint;\r\n  using SafeMathInt for int;\r\n  using SafeERC20 for IERC20;\r\n\r\n  event TimelockStarted( uint timelockEndBlock );\r\n\r\n  bool public isInitialized;\r\n\r\n  uint public timelockDurationInBlocks;\r\n  bool public isTimelockSet;\r\n  uint public override getTimelockEndBlock;\r\n\r\n  address public daoWallet;\r\n  address public LPRewardsContract;\r\n  address public stakingContract;\r\n\r\n  uint public LPProfitShare;\r\n\r\n  uint public getPrincipleTokenBalance;\r\n\r\n  address public override getManagedToken;\r\n  address public getReserveToken;\r\n  address public getPrincipleToken;\r\n\r\n  address public override getBondingCalculator;\r\n\r\n  mapping( address => bool ) public isReserveToken;\r\n\r\n  mapping( address => bool ) public isPrincipleToken;\r\n  \r\n  mapping( address => bool ) public isPrincipleDepositor;\r\n  \r\n  mapping( address => bool ) public isReserveDepositor;\r\n\r\n  modifier notInitialized() {\r\n    require( !isInitialized );\r\n    _;\r\n  }\r\n\r\n  modifier onlyReserveToken( address reserveTokenChallenge_ ) {\r\n    require( isReserveToken[reserveTokenChallenge_] == true, \"Vault: reserveTokenChallenge_ is not a reserve Token.\" );\r\n    _;\r\n  }\r\n\r\n  modifier onlyPrincipleToken( address PrincipleTokenChallenge_ ) {\r\n    require( isPrincipleToken[PrincipleTokenChallenge_] == true, \"Vault: PrincipleTokenChallenge_ is not a Principle token.\" );\r\n    _;\r\n  }\r\n  \r\n  modifier notTimelockSet() {\r\n    require( !isTimelockSet );\r\n    _;\r\n  }\r\n\r\n  modifier isTimelockExpired() {\r\n    require( getTimelockEndBlock != 0 );\r\n    require( isTimelockSet );\r\n    require( block.number >= getTimelockEndBlock );\r\n    _;\r\n  }\r\n\r\n  modifier isTimelockStarted() {\r\n    if( getTimelockEndBlock != 0 ) {\r\n      emit TimelockStarted( getTimelockEndBlock );\r\n    }\r\n    _;\r\n  }\r\n\r\n  function setDAOWallet( address newDAOWallet_ ) external onlyOwner() returns ( bool ) {\r\n    daoWallet = newDAOWallet_;\r\n    return true;\r\n  }\r\n\r\n  function setStakingContract( address newStakingContract_ ) external onlyOwner() returns ( bool ) {\r\n    stakingContract = newStakingContract_;\r\n    return true;\r\n  }\r\n\r\n  function setLPRewardsContract( address newLPRewardsContract_ ) external onlyOwner() returns ( bool ) {\r\n    LPRewardsContract = newLPRewardsContract_;\r\n    return true;\r\n  }\r\n\r\n  function setLPProfitShare( uint newDAOProfitShare_ ) external onlyOwner() returns ( bool ) {\r\n    LPProfitShare = newDAOProfitShare_;\r\n    return true;\r\n  }\r\n\r\n  function initialize(\r\n    address newManagedToken_,\r\n    address newReserveToken_,\r\n    address newBondingCalculator_,\r\n    address newLPRewardsContract_\r\n  ) external onlyOwner() notInitialized() returns ( bool ) {\r\n    getManagedToken = newManagedToken_;\r\n    getReserveToken = newReserveToken_;\r\n    isReserveToken[newReserveToken_] = true;\r\n    getBondingCalculator = newBondingCalculator_;\r\n    LPRewardsContract = newLPRewardsContract_;\r\n    isInitialized = true;\r\n    return true;\r\n  }\r\n\r\n  function setPrincipleToken( address newPrincipleToken_ ) external onlyOwner() returns ( bool ) {\r\n    getPrincipleToken = newPrincipleToken_;\r\n    isPrincipleToken[newPrincipleToken_] = true;\r\n    return true;\r\n  }\r\n  \r\n  function setPrincipleDepositor( address newDepositor_ ) external onlyOwner() returns ( bool ) {\r\n    isPrincipleDepositor[newDepositor_] = true;\r\n    return true;\r\n  }\r\n  \r\n  function setReserveDepositor( address newDepositor_ ) external onlyOwner() returns ( bool ) {\r\n    isReserveDepositor[newDepositor_] = true;\r\n    return true;\r\n  }\r\n  \r\n  function removePrincipleDepositor( address depositor_ ) external onlyOwner() returns ( bool ) {\r\n    isPrincipleDepositor[depositor_] = false;\r\n    return true;\r\n  }\r\n  \r\n  function removeReserveDepositor( address depositor_ ) external onlyOwner() returns ( bool ) {\r\n    isReserveDepositor[depositor_] = false;\r\n    return true;\r\n  }\r\n\r\n  function rewardsDepositPrinciple( uint depositAmount_ ) external returns ( bool ) {\r\n    require(isReserveDepositor[msg.sender] == true, \"Not allowed to deposit\");\r\n    address principleToken = getPrincipleToken;\r\n    IERC20( principleToken ).safeTransferFrom( msg.sender, address(this), depositAmount_ );\r\n    uint value = IBondingCalculator( getBondingCalculator ).principleValuation( principleToken, depositAmount_ ).div( 1e9 );\r\n    uint forLP = value.div( LPProfitShare );\r\n    IERC20Mintable( getManagedToken ).mint( stakingContract, value.sub( forLP ) );\r\n    IERC20Mintable( getManagedToken ).mint( LPRewardsContract, forLP );\r\n    return true;\r\n  }\r\n\r\n function depositReserves( uint amount_ ) external returns ( bool ) {\r\n    require(isReserveDepositor[msg.sender] == true, \"Not allowed to deposit\");\r\n    IERC20( getReserveToken ).safeTransferFrom( msg.sender, address(this), amount_ );\r\n    address managedToken_ = getManagedToken;\r\n    IERC20Mintable( managedToken_ ).mint( msg.sender, amount_.div( 10 ** IERC20( managedToken_ ).decimals() ) );\r\n    return true;\r\n  }\r\n\r\n  function depositPrinciple( uint depositAmount_ ) external returns ( bool ) {\r\n    require(isPrincipleDepositor[msg.sender] == true, \"Not allowed to deposit\");\r\n    address principleToken = getPrincipleToken;\r\n    IERC20( principleToken ).safeTransferFrom( msg.sender, address(this), depositAmount_ );\r\n    uint value = IBondingCalculator( getBondingCalculator ).principleValuation( principleToken, depositAmount_ ).div( 1e9 );\r\n    IERC20Mintable( getManagedToken ).mint( msg.sender, value );\r\n    return true;\r\n  }\r\n  \r\n  function migrateReserveAndPrinciple() external onlyOwner() isTimelockExpired() returns ( bool saveGas_ ) {\r\n    IERC20( getReserveToken ).safeTransfer( daoWallet, IERC20( getReserveToken ).balanceOf( address( this ) ) );\r\n    IERC20( getPrincipleToken ).safeTransfer( daoWallet, IERC20( getPrincipleToken ).balanceOf( address( this ) ) );\r\n    return true;\r\n  }\r\n\r\n  function setTimelock( uint newTimelockDurationInBlocks_ ) external onlyOwner() notTimelockSet() returns ( bool ) {\r\n    timelockDurationInBlocks = newTimelockDurationInBlocks_;\r\n    return true;\r\n  }\r\n\r\n  function startTimelock() external onlyOwner() returns ( bool ) {\r\n    getTimelockEndBlock = block.number.add( timelockDurationInBlocks );\r\n    isTimelockSet = true;\r\n    emit TimelockStarted( getTimelockEndBlock );\r\n    return true;\r\n  }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timelockEndBlock\",\"type\":\"uint256\"}],\"name\":\"TimelockStarted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LPProfitShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPRewardsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount_\",\"type\":\"uint256\"}],\"name\":\"depositPrinciple\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"depositReserves\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBondingCalculator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManagedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrincipleToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrincipleTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserveToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimelockEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManagedToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newReserveToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newBondingCalculator_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newLPRewardsContract_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPrincipleDepositor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPrincipleToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReserveDepositor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReserveToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTimelockSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateReserveAndPrinciple\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"saveGas_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor_\",\"type\":\"address\"}],\"name\":\"removePrincipleDepositor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor_\",\"type\":\"address\"}],\"name\":\"removeReserveDepositor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount_\",\"type\":\"uint256\"}],\"name\":\"rewardsDepositPrinciple\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDAOWallet_\",\"type\":\"address\"}],\"name\":\"setDAOWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDAOProfitShare_\",\"type\":\"uint256\"}],\"name\":\"setLPProfitShare\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLPRewardsContract_\",\"type\":\"address\"}],\"name\":\"setLPRewardsContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDepositor_\",\"type\":\"address\"}],\"name\":\"setPrincipleDepositor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPrincipleToken_\",\"type\":\"address\"}],\"name\":\"setPrincipleToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDepositor_\",\"type\":\"address\"}],\"name\":\"setReserveDepositor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStakingContract_\",\"type\":\"address\"}],\"name\":\"setStakingContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTimelockDurationInBlocks_\",\"type\":\"uint256\"}],\"name\":\"setTimelock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimelock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockDurationInBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Vault","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e78098edfd37ee22630db365d36b9d7627594140021ff6ded7afef29cdd1772e"}]}