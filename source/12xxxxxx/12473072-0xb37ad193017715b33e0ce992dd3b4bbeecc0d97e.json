{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/******************************************/\r\n/*       SyncDEX starts here              */\r\n/******************************************/\r\n\r\nabstract contract SyncDEX \r\n\r\n{\r\n    function sync() external virtual;\r\n}\r\n\r\n\r\n/******************************************/\r\n/*       GulpDEX starts here              */\r\n/******************************************/\r\n\r\nabstract contract GulpDEX \r\n\r\n{\r\n    function gulp(address token) external virtual;\r\n}\r\n\r\n/******************************************/\r\n/*       BenchmarkSync starts here       */\r\n/******************************************/\r\n\r\ncontract BenchmarkSync {\r\n\r\n    address public constant benchmark = 0x67c597624B17b16fb77959217360B7cD18284253;\r\n    \r\n    address owner1;\r\n    address owner2;\r\n    address owner3;\r\n    address owner4;\r\n    address owner5;\r\n    \r\n    SyncDEX[] public SyncPools;\r\n    GulpDEX[] public GulpPools;\r\n\r\n    modifier isOwner() \r\n    {\r\n        require (msg.sender == owner1 || msg.sender == owner2 || msg.sender == owner3 || msg.sender == owner4 || msg.sender == owner5);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Sync liquidity pools. \r\n     */\r\n    function syncPools() public {\r\n        uint256 syncArrayLength = SyncPools.length;\r\n        for (uint256 i = 0; i < syncArrayLength; i++) \r\n        {\r\n            if (address(SyncPools[i]) != address(0)) {\r\n                SyncPools[i].sync();\r\n            }           \r\n        }\r\n\r\n        uint256 gulpArrayLength = GulpPools.length;\r\n        for (uint256 i = 0; i < gulpArrayLength; i++) \r\n        {\r\n            if (address(GulpPools[i]) != address(0)) {\r\n                GulpPools[i].gulp(benchmark);\r\n            }           \r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Add a new Liquidity Pool. \r\n     * @param _lpPool Address of Liquidity Pool.\r\n     */\r\n    function addSyncPool (address _lpPool) public isOwner {\r\n        SyncPools.push(SyncDEX(_lpPool));\r\n    }\r\n\r\n    /**\r\n     * @dev Add a new Liquidity Pool. \r\n     * @param _lpPool Address of Liquidity Pool.\r\n     */\r\n    function addGulpPool (address _lpPool) public isOwner {\r\n        GulpPools.push(GulpDEX(_lpPool));\r\n    }\r\n\r\n    /**\r\n     * @dev Remove a Liquidity Pool. \r\n     * @param _index Index of Liquidity Pool.\r\n     */\r\n    function removeSyncPool (uint256 _index) public isOwner {\r\n        delete SyncPools[_index];\r\n    }\r\n\r\n    /**\r\n     * @dev Remove a Liquidity Pool. \r\n     * @param _index Index of Liquidity Pool.\r\n     */\r\n    function removeGulpPool (uint256 _index) public isOwner {\r\n        delete GulpPools[_index];\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"GulpPools\",\"outputs\":[{\"internalType\":\"contract GulpDEX\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SyncPools\",\"outputs\":[{\"internalType\":\"contract SyncDEX\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpPool\",\"type\":\"address\"}],\"name\":\"addGulpPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpPool\",\"type\":\"address\"}],\"name\":\"addSyncPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"benchmark\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"removeGulpPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"removeSyncPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syncPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BenchmarkSync","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://21b76d947815b66e2574de6596f2445253c247eab76ba66a428fc682cef6988e"}]}