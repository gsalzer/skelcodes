{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interfaces/IPriceModule.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.0 <0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IPriceModule\r\n{\r\n    function getUSDPrice(address ) external view returns(uint256);\r\n}\r\n\r\n// File: contracts/aps/APContract.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.0 <0.7.0;\r\n// pragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\ncontract APContract\r\n{\r\n\r\n    address public yieldsterDAO;\r\n\r\n    address public yieldsterTreasury;\r\n\r\n    address public yieldsterGOD;\r\n\r\n    address public emergencyVault;\r\n\r\n    address public yieldsterExchange;\r\n\r\n    address public stringUtils;\r\n\r\n    address public whitelistModule;\r\n\r\n    address public whitelistManager;\r\n\r\n    address public proxyFactory;\r\n\r\n    address public priceModule;\r\n\r\n    address public platFormManagementFee;\r\n\r\n    address public profitManagementFee;\r\n\r\n    address public stockDeposit;\r\n\r\n    address public stockWithdraw;\r\n\r\n    address public safeMinter;\r\n\r\n    address public safeUtils;\r\n\r\n    address public oneInch;\r\n\r\n    struct Asset{\r\n        string name;\r\n        string symbol;\r\n        bool created;\r\n    }\r\n\r\n    struct Protocol{\r\n        string name;\r\n        string symbol;\r\n        bool created;\r\n    }\r\n\r\n    struct Vault {\r\n        mapping(address => bool) vaultAssets;\r\n        mapping(address => bool) vaultDepositAssets;\r\n        mapping(address => bool) vaultWithdrawalAssets;\r\n        mapping(address => bool) vaultEnabledStrategy;\r\n        address depositStrategy;\r\n        address withdrawStrategy;\r\n        address vaultAPSManager;\r\n        address vaultStrategyManager;\r\n        uint256[] whitelistGroup;\r\n        bool created;\r\n    }\r\n\r\n    struct VaultActiveStrategy {\r\n        mapping(address => bool) isActiveStrategy;\r\n        mapping(address => uint256) activeStrategyIndex;\r\n        address[] activeStrategyList;\r\n    }\r\n\r\n    struct Strategy{\r\n        string strategyName;\r\n        mapping(address => bool) strategyProtocols;\r\n        bool created;\r\n        address minter;\r\n        address executor;\r\n        address benefeciary;\r\n        uint256 managementFeePercentage;\r\n    }\r\n\r\n    struct SmartStrategy{\r\n        string smartStrategyName;\r\n        address minter;\r\n        address executor;\r\n        bool created;\r\n \r\n    }\r\n\r\n    struct vaultActiveManagemetFee {\r\n        mapping(address => bool) isActiveManagementFee;\r\n        mapping(address => uint256) activeManagementFeeIndex;\r\n        address[] activeManagementFeeList;\r\n    }\r\n\r\n    event VaultCreation(address vaultAddress);\r\n\r\n    mapping(address => vaultActiveManagemetFee) managementFeeStrategies;\r\n\r\n    mapping(address => mapping(address => mapping(address => bool))) vaultStrategyEnabledProtocols;\r\n\r\n    mapping(address => VaultActiveStrategy) vaultActiveStrategies;\r\n    \r\n    mapping(address => Asset) assets;\r\n\r\n    mapping(address => Protocol) protocols;\r\n\r\n    mapping(address => Vault) vaults;\r\n\r\n    mapping(address => Strategy) strategies;\r\n\r\n    mapping(address => SmartStrategy) smartStrategies;\r\n\r\n    mapping(address => address) safeOwner;\r\n    \r\n    mapping(address => bool) APSManagers;\r\n\r\n    mapping(address => address) minterStrategyMap;\r\n\r\n    \r\n    constructor(\r\n        address _whitelistModule,\r\n        address _platformManagementFee,\r\n        address _profitManagementFee,\r\n        address _stringUtils,\r\n        address _yieldsterExchange,\r\n        address _oneInch,\r\n        address _priceModule,\r\n        address _safeUtils\r\n    ) \r\n    public\r\n    {\r\n        yieldsterDAO = msg.sender;\r\n        yieldsterTreasury = msg.sender;\r\n        yieldsterGOD = msg.sender;\r\n        emergencyVault = msg.sender;\r\n        APSManagers[msg.sender] = true;\r\n        whitelistModule = _whitelistModule;\r\n        platFormManagementFee = _platformManagementFee;\r\n        stringUtils = _stringUtils;\r\n        yieldsterExchange = _yieldsterExchange;\r\n        oneInch = _oneInch;\r\n        priceModule = _priceModule;\r\n        safeUtils = _safeUtils;\r\n        profitManagementFee = _profitManagementFee;\r\n    }\r\n\r\n    /// @dev Function to add proxy Factory address to Yieldster.\r\n    /// @param _proxyFactory Address of proxy factory.\r\n    function addProxyFactory(address _proxyFactory)\r\n        public\r\n        onlyManager\r\n    {\r\n        proxyFactory = _proxyFactory;\r\n    }\r\n\r\n    function setProfitAndPlatformManagementFeeStrategies(address _platformManagement,address _profitManagement)\r\n        public\r\n        onlyYieldsterDAO\r\n    {\r\n        if (_profitManagement != address(0)) profitManagementFee = _profitManagement;\r\n        if (_platformManagement != address(0)) platFormManagementFee = _platformManagement;\r\n    }\r\n\r\n//Modifiers\r\n    modifier onlyYieldsterDAO{\r\n        require(yieldsterDAO == msg.sender, \"Only Yieldster DAO is allowed to perform this operation\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyManager{\r\n        require(APSManagers[msg.sender], \"Only APS managers allowed to perform this operation!\");\r\n        _;\r\n    }\r\n\r\n    modifier onlySafeOwner{\r\n        require(safeOwner[msg.sender] == tx.origin, \"Only safe Owner can perform this operation\");\r\n        _;\r\n    }\r\n\r\n\r\n    function isVault( address _address) public view returns(bool){\r\n       return vaults[_address].created;\r\n    }\r\n\r\n\r\n    /// @dev Function to add APS manager to Yieldster.\r\n    /// @param _manager Address of the manager.\r\n    function addManager(address _manager) \r\n        public\r\n        onlyYieldsterDAO\r\n    {\r\n        APSManagers[_manager] = true;\r\n    }\r\n\r\n    /// @dev Function to remove APS manager from Yieldster.\r\n    /// @param _manager Address of the manager.\r\n    function removeManager(address _manager)\r\n        public\r\n        onlyYieldsterDAO\r\n    {\r\n        APSManagers[_manager] = false;\r\n    } \r\n\r\n    /// @dev Function to change whitelist Manager.\r\n    /// @param _whitelistManager Address of the whitelist manager.\r\n    function changeWhitelistManager(address _whitelistManager)\r\n        public\r\n        onlyYieldsterDAO\r\n    {\r\n        whitelistManager = _whitelistManager;\r\n    }\r\n\r\n    /// @dev Function to set Yieldster GOD.\r\n    /// @param _yieldsterGOD Address of the Yieldster GOD.\r\n    function setYieldsterGOD(address _yieldsterGOD)\r\n        public\r\n    {\r\n        require(msg.sender == yieldsterGOD, \"Only Yieldster GOD can perform this operation\");\r\n        yieldsterGOD = _yieldsterGOD;\r\n    }\r\n\r\n    /// @dev Function to disable Yieldster GOD.\r\n    function disableYieldsterGOD()\r\n        public\r\n    {\r\n        require(msg.sender == yieldsterGOD, \"Only Yieldster GOD can perform this operation\");\r\n        yieldsterGOD = address(0);\r\n    }\r\n\r\n    /// @dev Function to set Emergency vault.\r\n    /// @param _emergencyVault Address of the Yieldster Emergency vault.\r\n    function setEmergencyVault(address _emergencyVault)\r\n        onlyYieldsterDAO\r\n        public\r\n    {\r\n        emergencyVault = _emergencyVault;\r\n    }\r\n\r\n\r\n    /// @dev Function to set Safe Minter.\r\n    /// @param _safeMinter Address of the Safe Minter.\r\n    function setSafeMinter(address _safeMinter)\r\n        onlyYieldsterDAO\r\n        public\r\n    {\r\n        safeMinter = _safeMinter;\r\n    }\r\n\r\n    /// @dev Function to set safeUtils contract.\r\n    /// @param _safeUtils Address of the safeUtils contract.\r\n    function setSafeUtils(address _safeUtils)\r\n        onlyYieldsterDAO\r\n        public\r\n    {\r\n        safeUtils = _safeUtils;\r\n    }\r\n\r\n    /// @dev Function to set oneInch address.\r\n    /// @param _oneInch Address of the oneInch.\r\n    function setOneInch(address _oneInch)\r\n        onlyYieldsterDAO\r\n        public\r\n    {\r\n        oneInch = _oneInch;\r\n    }\r\n\r\n    /// @dev Function to get strategy address from minter.\r\n    /// @param _minter Address of the minter.\r\n    function getStrategyFromMinter(address _minter) \r\n        external \r\n        view \r\n        returns(address)\r\n    {\r\n       return minterStrategyMap[_minter];\r\n\r\n    }\r\n\r\n    /// @dev Function to set Yieldster Exchange.\r\n    /// @param _yieldsterExchange Address of the Yieldster exchange.\r\n    function setYieldsterExchange(address _yieldsterExchange)\r\n        onlyYieldsterDAO\r\n        public\r\n    {\r\n        yieldsterExchange = _yieldsterExchange;\r\n    }\r\n\r\n    /// @dev Function to set stock Deposit and Withdraw.\r\n    /// @param _stockDeposit Address of the stock deposit contract.\r\n    /// @param _stockWithdraw Address of the stock withdraw contract.\r\n    function setStockDepositWithdraw(address _stockDeposit, address _stockWithdraw)\r\n        onlyYieldsterDAO\r\n        public\r\n    {\r\n        stockDeposit = _stockDeposit;\r\n        stockWithdraw = _stockWithdraw;\r\n    }\r\n\r\n\r\n    /// @dev Function to change the APS Manager for a vault.\r\n    /// @param _vaultAPSManager Address of the new APS Manager.\r\n    function changeVaultAPSManager(address _vaultAPSManager)\r\n        external\r\n    {\r\n        require(vaults[msg.sender].created, \"Vault is not present\");\r\n        vaults[msg.sender].vaultAPSManager = _vaultAPSManager;\r\n    }\r\n\r\n    /// @dev Function to change the Strategy Manager for a vault.\r\n    /// @param _vaultStrategyManager Address of the new Strategy Manager.\r\n    function changeVaultStrategyManager(address _vaultStrategyManager)\r\n        external\r\n    {\r\n        require(vaults[msg.sender].created, \"Vault is not present\");\r\n        vaults[msg.sender].vaultStrategyManager = _vaultStrategyManager;\r\n    }\r\n\r\n//Price Module\r\n    /// @dev Function to set Yieldster price module.\r\n    /// @param _priceModule Address of the price module.\r\n    function setPriceModule(address _priceModule)\r\n        public\r\n        onlyManager\r\n    {\r\n        priceModule = _priceModule;\r\n    }\r\n\r\n    /// @dev Function to get the USD price for a token.\r\n    /// @param _tokenAddress Address of the token.\r\n    function getUSDPrice(address _tokenAddress) \r\n        public \r\n        view\r\n        returns(uint256)\r\n    {\r\n        require(_isAssetPresent(_tokenAddress),\"Asset not present!\");\r\n        return IPriceModule(priceModule).getUSDPrice(_tokenAddress);\r\n    }\r\n\r\n\r\n//Vaults\r\n    /// @dev Function to create a vault.\r\n    /// @param _owner Address of the owner of the vault.\r\n    /// @param _vaultAddress Address of the new vault.\r\n    function createVault(address _owner, address _vaultAddress)\r\n    public\r\n    {\r\n        require(msg.sender == proxyFactory, \"Only Proxy Factory can perform this operation\");\r\n        safeOwner[_vaultAddress] = _owner;\r\n    }\r\n\r\n\r\n    /// @dev Function to add a vault in the APS.\r\n    /// @param _vaultAPSManager Address of the vaults APS Manager.\r\n    /// @param _vaultStrategyManager Address of the vaults Strateg Manager.\r\n    /// @param _whitelistGroup List of whitelist groups applied to the vault.\r\n    /// @param _owner Address of the vault owner.\r\n    function addVault(\r\n        address _vaultAPSManager,\r\n        address _vaultStrategyManager,\r\n        uint256[] memory _whitelistGroup,\r\n        address _owner\r\n    )\r\n    public\r\n    {   \r\n        require(safeOwner[msg.sender] == _owner, \"Only owner can call this function\");\r\n        Vault memory newVault = Vault(\r\n            {\r\n            vaultAPSManager : _vaultAPSManager, \r\n            vaultStrategyManager : _vaultStrategyManager,\r\n            whitelistGroup : _whitelistGroup,\r\n            depositStrategy: stockDeposit,\r\n            withdrawStrategy: stockWithdraw,\r\n            created : true\r\n            });\r\n        vaults[msg.sender] = newVault;\r\n\r\n        //applying Platform management fee\r\n        managementFeeStrategies[msg.sender].isActiveManagementFee[platFormManagementFee] = true;\r\n        managementFeeStrategies[msg.sender].activeManagementFeeIndex[platFormManagementFee] = managementFeeStrategies[msg.sender].activeManagementFeeList.length;\r\n        managementFeeStrategies[msg.sender].activeManagementFeeList.push(platFormManagementFee);\r\n\r\n        //applying Profit management fee\r\n        managementFeeStrategies[msg.sender].isActiveManagementFee[profitManagementFee] = true;\r\n        managementFeeStrategies[msg.sender].activeManagementFeeIndex[profitManagementFee] = managementFeeStrategies[msg.sender].activeManagementFeeList.length;\r\n        managementFeeStrategies[msg.sender].activeManagementFeeList.push(profitManagementFee);\r\n    }\r\n\r\n    /// @dev Function to Manage the vault assets.\r\n    /// @param _enabledDepositAsset List of deposit assets to be enabled in the vault.\r\n    /// @param _enabledWithdrawalAsset List of withdrawal assets to be enabled in the vault.\r\n    /// @param _disabledDepositAsset List of deposit assets to be disabled in the vault.\r\n    /// @param _disabledWithdrawalAsset List of withdrawal assets to be disabled in the vault.\r\n    function setVaultAssets(\r\n        address[] memory _enabledDepositAsset,\r\n        address[] memory _enabledWithdrawalAsset,\r\n        address[] memory _disabledDepositAsset,\r\n        address[] memory _disabledWithdrawalAsset\r\n    )\r\n    public\r\n    {\r\n        require(vaults[msg.sender].created, \"Vault not present\");\r\n\r\n        for (uint256 i = 0; i < _enabledDepositAsset.length; i++) {\r\n            address asset = _enabledDepositAsset[i];\r\n            require(_isAssetPresent(asset), \"Asset not supported by Yieldster\");\r\n            vaults[msg.sender].vaultAssets[asset] = true;\r\n            vaults[msg.sender].vaultDepositAssets[asset] = true;\r\n        }\r\n\r\n        for (uint256 i = 0; i < _enabledWithdrawalAsset.length; i++) {\r\n            address asset = _enabledWithdrawalAsset[i];\r\n            require(_isAssetPresent(asset), \"Asset not supported by Yieldster\");\r\n            vaults[msg.sender].vaultAssets[asset] = true;\r\n            vaults[msg.sender].vaultWithdrawalAssets[asset] = true;\r\n        }\r\n\r\n        for (uint256 i = 0; i < _disabledDepositAsset.length; i++) {\r\n            address asset = _disabledDepositAsset[i];\r\n            require(_isAssetPresent(asset), \"Asset not supported by Yieldster\");\r\n            vaults[msg.sender].vaultAssets[asset] = false;\r\n            vaults[msg.sender].vaultDepositAssets[asset] = false;\r\n        }\r\n\r\n        for (uint256 i = 0; i < _disabledWithdrawalAsset.length; i++) {\r\n            address asset = _disabledWithdrawalAsset[i];\r\n            require(_isAssetPresent(asset), \"Asset not supported by Yieldster\");\r\n            vaults[msg.sender].vaultAssets[asset] = false;\r\n            vaults[msg.sender].vaultWithdrawalAssets[asset] = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Function to get the list of management fee strategies applied to the vault.\r\n    function getVaultManagementFee()\r\n        public\r\n        view\r\n        returns(address[] memory)\r\n    {\r\n        require(vaults[msg.sender].created, \"Vault not present\");\r\n        return managementFeeStrategies[msg.sender].activeManagementFeeList;\r\n    }\r\n\r\n    /// @dev Function to get the deposit strategy applied to the vault.\r\n    function getDepositStrategy()\r\n        public\r\n        view\r\n        returns(address)\r\n    {\r\n        require(vaults[msg.sender].created, \"Vault not present\");\r\n        return vaults[msg.sender].depositStrategy;\r\n    }\r\n\r\n    /// @dev Function to get the withdrawal strategy applied to the vault.\r\n    function getWithdrawStrategy()\r\n        public\r\n        view\r\n        returns(address)\r\n    {\r\n        require(vaults[msg.sender].created, \"Vault not present\");\r\n        return vaults[msg.sender].withdrawStrategy;\r\n    }\r\n\r\n    /// @dev Function to set the management fee strategies applied to a vault.\r\n    /// @param _vaultAddress Address of the vault.\r\n    /// @param _managementFeeAddress Address of the management fee strategy.\r\n    function setManagementFeeStrategies(address _vaultAddress, address _managementFeeAddress)\r\n        public\r\n    {\r\n        require(vaults[_vaultAddress].created, \"Vault not present\");\r\n        require(vaults[_vaultAddress].vaultStrategyManager == msg.sender, \"Sender not Authorized\");\r\n        managementFeeStrategies[_vaultAddress].isActiveManagementFee[_managementFeeAddress] = true;\r\n        managementFeeStrategies[_vaultAddress].activeManagementFeeIndex[_managementFeeAddress] = managementFeeStrategies[_vaultAddress].activeManagementFeeList.length;\r\n        managementFeeStrategies[_vaultAddress].activeManagementFeeList.push(_managementFeeAddress);\r\n    }\r\n\r\n    /// @dev Function to deactivate a vault strategy.\r\n    /// @param _managementFeeAddress Address of the Management Fee Strategy.\r\n    function removeManagementFeeStrategies(address _vaultAddress, address _managementFeeAddress)\r\n        public\r\n    {\r\n        require(vaults[_vaultAddress].created, \"Vault not present\");\r\n        require(managementFeeStrategies[_vaultAddress].isActiveManagementFee[_managementFeeAddress], \"Provided ManagementFee is not active\");\r\n        require(vaults[_vaultAddress].vaultStrategyManager == msg.sender || yieldsterDAO == msg.sender, \"Sender not Authorized\");\r\n        require(platFormManagementFee != _managementFeeAddress || yieldsterDAO == msg.sender,\"Platfrom Management only changable by dao!\");\r\n        managementFeeStrategies[_vaultAddress].isActiveManagementFee[_managementFeeAddress] = false;\r\n\r\n        if(managementFeeStrategies[_vaultAddress].activeManagementFeeList.length == 1) {\r\n            managementFeeStrategies[_vaultAddress].activeManagementFeeList.pop();\r\n        } else {\r\n            uint256 index = managementFeeStrategies[_vaultAddress].activeManagementFeeIndex[_managementFeeAddress];\r\n            uint256 lastIndex = managementFeeStrategies[_vaultAddress].activeManagementFeeList.length - 1;\r\n            delete managementFeeStrategies[_vaultAddress].activeManagementFeeList[index];\r\n            managementFeeStrategies[_vaultAddress].activeManagementFeeIndex[managementFeeStrategies[_vaultAddress].activeManagementFeeList[lastIndex]] = index;\r\n            managementFeeStrategies[_vaultAddress].activeManagementFeeList[index] = managementFeeStrategies[_vaultAddress].activeManagementFeeList[lastIndex];\r\n            managementFeeStrategies[_vaultAddress].activeManagementFeeList.pop();\r\n        }\r\n    }\r\n\r\n    /// @dev Function to set vault active strategy.\r\n    /// @param _strategyAddress Address of the strategy.\r\n    function setVaultActiveStrategy(address _strategyAddress)\r\n        public\r\n    {\r\n        require(vaults[msg.sender].created, \"Vault not present\");\r\n        require(strategies[_strategyAddress].created, \"Strategy not present\");\r\n        vaultActiveStrategies[msg.sender].isActiveStrategy[_strategyAddress] = true;\r\n        vaultActiveStrategies[msg.sender].activeStrategyIndex[_strategyAddress] = vaultActiveStrategies[msg.sender].activeStrategyList.length;\r\n        vaultActiveStrategies[msg.sender].activeStrategyList.push(_strategyAddress);\r\n    }\r\n\r\n    /// @dev Function to deactivate a vault strategy.\r\n    /// @param _strategyAddress Address of the strategy.\r\n    function deactivateVaultStrategy(address _strategyAddress)\r\n        public\r\n    {\r\n        require(vaults[msg.sender].created, \"Vault not present\");\r\n        require(vaultActiveStrategies[msg.sender].isActiveStrategy[_strategyAddress], \"Provided strategy is not active\");\r\n        vaultActiveStrategies[msg.sender].isActiveStrategy[_strategyAddress] = false;\r\n\r\n        if(vaultActiveStrategies[msg.sender].activeStrategyList.length == 1) {\r\n            vaultActiveStrategies[msg.sender].activeStrategyList.pop();\r\n        } else {\r\n            uint256 index = vaultActiveStrategies[msg.sender].activeStrategyIndex[_strategyAddress];\r\n            uint256 lastIndex = vaultActiveStrategies[msg.sender].activeStrategyList.length - 1;\r\n            delete vaultActiveStrategies[msg.sender].activeStrategyList[index];\r\n            vaultActiveStrategies[msg.sender].activeStrategyIndex[vaultActiveStrategies[msg.sender].activeStrategyList[lastIndex]] = index;\r\n            vaultActiveStrategies[msg.sender].activeStrategyList[index] = vaultActiveStrategies[msg.sender].activeStrategyList[lastIndex];\r\n            vaultActiveStrategies[msg.sender].activeStrategyList.pop();\r\n        }\r\n    }\r\n\r\n    /// @dev Function to get vault active strategy.\r\n    function getVaultActiveStrategy(address _vaultAddress)\r\n        public\r\n        view\r\n        returns(address[] memory)\r\n    {\r\n        require(vaults[_vaultAddress].created, \"Vault not present\");\r\n        return vaultActiveStrategies[_vaultAddress].activeStrategyList;\r\n    }\r\n\r\n    function isStrategyActive(address _vaultAddress, address _strategyAddress)\r\n        public\r\n        view\r\n        returns(bool)\r\n    {\r\n        return vaultActiveStrategies[_vaultAddress].isActiveStrategy[_strategyAddress];\r\n    }\r\n\r\n    function getStrategyManagementDetails(address _vaultAddress, address _strategyAddress)\r\n        public\r\n        view\r\n        returns(address, uint256)\r\n    {\r\n        require(vaults[_vaultAddress].created, \"Vault not present\");\r\n        require(strategies[_strategyAddress].created, \"Strategy not present\");\r\n        require(vaultActiveStrategies[_vaultAddress].isActiveStrategy[_strategyAddress], \"Strategy not Active\");\r\n        return (strategies[_strategyAddress].benefeciary, strategies[_strategyAddress].managementFeePercentage);\r\n    }\r\n\r\n    /// @dev Function to Manage the vault strategies.\r\n    /// @param _vaultStrategy Address of the strategy.\r\n    /// @param _enabledStrategyProtocols List of protocols that are enabled in the strategy.\r\n    /// @param _disabledStrategyProtocols List of protocols that are disabled in the strategy.\r\n    /// @param _assetsToBeEnabled List of assets that have to be enabled along with the strategy.\r\n    function setVaultStrategyAndProtocol(\r\n        address _vaultStrategy,\r\n        address[] memory _enabledStrategyProtocols,\r\n        address[] memory _disabledStrategyProtocols,\r\n        address[] memory _assetsToBeEnabled\r\n    )\r\n    public\r\n    {\r\n        require(vaults[msg.sender].created, \"Vault not present\");\r\n        require(strategies[_vaultStrategy].created, \"Strategy not present\");\r\n        vaults[msg.sender].vaultEnabledStrategy[_vaultStrategy] = true;\r\n\r\n        for (uint256 i = 0; i < _enabledStrategyProtocols.length; i++) {\r\n            address protocol = _enabledStrategyProtocols[i];\r\n            require(_isProtocolPresent(protocol), \"Protocol not supported by Yieldster\");\r\n            vaultStrategyEnabledProtocols[msg.sender][_vaultStrategy][protocol] = true;\r\n        }\r\n\r\n        for (uint256 i = 0; i < _disabledStrategyProtocols.length; i++) {\r\n            address protocol = _disabledStrategyProtocols[i];\r\n            require(_isProtocolPresent(protocol), \"Protocol not supported by Yieldster\");\r\n            vaultStrategyEnabledProtocols[msg.sender][_vaultStrategy][protocol] = false;\r\n        }\r\n\r\n        for (uint256 i = 0; i < _assetsToBeEnabled.length; i++) {\r\n            address asset = _assetsToBeEnabled[i];\r\n            require(_isAssetPresent(asset), \"Asset not supported by Yieldster\");\r\n            vaults[msg.sender].vaultAssets[asset] = true;\r\n            vaults[msg.sender].vaultDepositAssets[asset] = true;\r\n            vaults[msg.sender].vaultWithdrawalAssets[asset] = true;\r\n        }\r\n\r\n    }\r\n\r\n    /// @dev Function to disable the vault strategies.\r\n    /// @param _strategyAddress Address of the strategy.\r\n    /// @param _assetsToBeDisabled List of assets that have to be disabled along with the strategy.\r\n    function disableVaultStrategy(address _strategyAddress, address[] memory _assetsToBeDisabled)\r\n        public\r\n    {\r\n        require(vaults[msg.sender].created, \"Vault not present\");\r\n        require(strategies[_strategyAddress].created, \"Strategy not present\");\r\n        require(vaults[msg.sender].vaultEnabledStrategy[_strategyAddress], \"Strategy was not enabled\");\r\n        vaults[msg.sender].vaultEnabledStrategy[_strategyAddress] = false;\r\n\r\n        for (uint256 i = 0; i < _assetsToBeDisabled.length; i++) {\r\n            address asset = _assetsToBeDisabled[i];\r\n            require(_isAssetPresent(asset), \"Asset not supported by Yieldster\");\r\n            vaults[msg.sender].vaultAssets[asset] = false;\r\n            vaults[msg.sender].vaultDepositAssets[asset] = false;\r\n            vaults[msg.sender].vaultWithdrawalAssets[asset] = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Function to set smart strategy applied to the vault.\r\n    /// @param _smartStrategyAddress Address of the smart strategy.\r\n    /// @param _type type of smart strategy(deposit or withdraw).\r\n    function setVaultSmartStrategy(address _smartStrategyAddress, uint256 _type)\r\n        public\r\n    {\r\n        require(vaults[msg.sender].created, \"Vault not present\");\r\n        require(_isSmartStrategyPresent(_smartStrategyAddress),\"Smart Strategy not Supported by Yieldster\");\r\n        if(_type == 1){\r\n            vaults[msg.sender].depositStrategy = _smartStrategyAddress;\r\n        }\r\n        else if(_type == 2){\r\n            vaults[msg.sender].withdrawStrategy = _smartStrategyAddress;\r\n        }\r\n        else{\r\n            revert(\"Invalid type provided\");\r\n        }\r\n    }\r\n\r\n    /// @dev Function to check if a particular protocol is enabled in a strategy for a vault.\r\n    /// @param _vaultAddress Address of the vault.\r\n    /// @param _strategyAddress Address of the strategy.\r\n    /// @param _protocolAddress Address of the protocol to check.\r\n    function _isStrategyProtocolEnabled(\r\n        address _vaultAddress, \r\n        address _strategyAddress, \r\n        address _protocolAddress\r\n    )\r\n    public\r\n    view\r\n    returns(bool)\r\n    {\r\n        if( vaults[_vaultAddress].created &&\r\n            strategies[_strategyAddress].created &&\r\n            protocols[_protocolAddress].created &&\r\n            vaults[_vaultAddress].vaultEnabledStrategy[_strategyAddress] &&\r\n            vaultStrategyEnabledProtocols[_vaultAddress][_strategyAddress][_protocolAddress]){\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Function to check if a strategy is enabled for the vault.\r\n    /// @param _vaultAddress Address of the vault.\r\n    /// @param _strategyAddress Address of the strategy.\r\n    function _isStrategyEnabled(\r\n        address _vaultAddress, \r\n        address _strategyAddress\r\n    )\r\n    public\r\n    view\r\n    returns(bool)\r\n    {\r\n        if(vaults[_vaultAddress].created &&\r\n            strategies[_strategyAddress].created &&\r\n            vaults[_vaultAddress].vaultEnabledStrategy[_strategyAddress]){\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Function to check if the asset is supported by the vault.\r\n    /// @param cleanUpAsset Address of the asset.\r\n    function _isVaultAsset(address cleanUpAsset)\r\n        public\r\n        view\r\n        returns(bool)\r\n    {\r\n        require(vaults[msg.sender].created, \"Vault is not present\");\r\n        return vaults[msg.sender].vaultAssets[cleanUpAsset];\r\n\r\n    }\r\n       \r\n\r\n// Assets\r\n    /// @dev Function to check if an asset is supported by Yieldster.\r\n    /// @param _address Address of the asset.\r\n    function _isAssetPresent(address _address) \r\n        private \r\n        view \r\n        returns(bool)\r\n    {\r\n        return assets[_address].created;\r\n    }\r\n    \r\n    /// @dev Function to add an asset to the Yieldster.\r\n    /// @param _symbol Symbol of the asset.\r\n    /// @param _name Name of the asset.\r\n    /// @param _tokenAddress Address of the asset.\r\n    function addAsset(\r\n        string memory _symbol, \r\n        string memory _name,\r\n        address _tokenAddress\r\n        ) \r\n        public \r\n        onlyManager\r\n    {\r\n        require(!_isAssetPresent(_tokenAddress),\"Asset already present!\");\r\n        Asset memory newAsset = Asset({name:_name, symbol:_symbol, created:true});\r\n        assets[_tokenAddress] = newAsset;\r\n    }\r\n\r\n    /// @dev Function to remove an asset from the Yieldster.\r\n    /// @param _tokenAddress Address of the asset.\r\n    function removeAsset(address _tokenAddress) \r\n        public \r\n        onlyManager\r\n    {\r\n        require(_isAssetPresent(_tokenAddress),\"Asset not present!\");\r\n        delete assets[_tokenAddress];\r\n    }\r\n    \r\n    /// @dev Function to check if an asset is supported deposit asset in the vault.\r\n    /// @param _assetAddress Address of the asset.\r\n    function isDepositAsset(address _assetAddress)\r\n        public\r\n        view\r\n        returns(bool)\r\n    {\r\n        require(vaults[msg.sender].created, \"Vault not present\");\r\n        return vaults[msg.sender].vaultDepositAssets[_assetAddress];\r\n    }\r\n\r\n    /// @dev Function to check if an asset is supported withdrawal asset in the vault.\r\n    /// @param _assetAddress Address of the asset.\r\n    function isWithdrawalAsset(address _assetAddress)\r\n        public\r\n        view\r\n        returns(bool)\r\n    {\r\n        require(vaults[msg.sender].created, \"Vault not present\");\r\n        return vaults[msg.sender].vaultWithdrawalAssets[_assetAddress];\r\n    }\r\n\r\n//Strategies\r\n    /// @dev Function to check if a strategy is supported by Yieldster.\r\n    /// @param _address Address of the strategy.\r\n    function _isStrategyPresent(address _address) \r\n        private \r\n        view \r\n        returns(bool)\r\n    {\r\n        return strategies[_address].created;\r\n    }\r\n\r\n    /// @dev Function to add a strategy to Yieldster.\r\n    /// @param _strategyName Name of the strategy.\r\n    /// @param _strategyAddress Address of the strategy.\r\n    /// @param _strategyAddress List of protocols present in the strategy.\r\n    /// @param _minter Address of strategy minter.\r\n    /// @param _executor Address of strategy executor.\r\n    function addStrategy(\r\n        string memory _strategyName,\r\n        address _strategyAddress,\r\n        address[] memory _strategyProtocols,\r\n        address _minter,\r\n        address _executor,\r\n        address _benefeciary,\r\n        uint256 _managementFeePercentage\r\n        ) \r\n        public \r\n        onlyManager\r\n    {\r\n        require(!_isStrategyPresent(_strategyAddress),\"Strategy already present!\");\r\n        Strategy memory newStrategy = Strategy({ strategyName:_strategyName, created:true, minter:_minter, executor:_executor, benefeciary:_benefeciary, managementFeePercentage: _managementFeePercentage});\r\n        strategies[_strategyAddress] = newStrategy;\r\n        minterStrategyMap[_minter] = _strategyAddress;\r\n\r\n        for (uint256 i = 0; i < _strategyProtocols.length; i++) {\r\n            address protocol = _strategyProtocols[i];\r\n            require(_isProtocolPresent(protocol), \"Protocol not supported by Yieldster\");\r\n            strategies[_strategyAddress].strategyProtocols[protocol] = true;\r\n        }\r\n    }\r\n\r\n    /// @dev Function to remove a strategy from Yieldster.\r\n    /// @param _strategyAddress Address of the strategy.\r\n    function removeStrategy(address _strategyAddress) \r\n        public \r\n        onlyManager\r\n    {\r\n        require(_isStrategyPresent(_strategyAddress),\"Strategy not present!\");\r\n        delete strategies[_strategyAddress];\r\n    }\r\n\r\n    /// @dev Function to get strategy executor address.\r\n    /// @param _strategy Address of the strategy.\r\n    function strategyExecutor(address _strategy) \r\n        external \r\n        view \r\n        returns(address)\r\n    {\r\n        return strategies[_strategy].executor;\r\n    }\r\n\r\n    /// @dev Function to change executor of strategy.\r\n    /// @param _strategyAddress Address of the strategy.\r\n    /// @param _executor Address of the executor.\r\n    function changeStrategyExecutor(address _strategyAddress, address _executor) \r\n        public \r\n        onlyManager\r\n    {\r\n        require(_isStrategyPresent(_strategyAddress),\"Strategy not present!\");\r\n        strategies[_strategyAddress].executor = _executor;\r\n    }\r\n\r\n//Smart Strategy\r\n    /// @dev Function to check if a smart strategy is supported by Yieldster.\r\n    /// @param _address Address of the smart strategy.\r\n    function _isSmartStrategyPresent(address _address) \r\n        private \r\n        view \r\n        returns(bool)\r\n    {\r\n        return smartStrategies[_address].created;\r\n    }\r\n\r\n    /// @dev Function to add a smart strategy to Yieldster.\r\n    /// @param _smartStrategyName Name of the smart strategy.\r\n    /// @param _smartStrategyAddress Address of the smart strategy.\r\n    function addSmartStrategy(\r\n        string memory _smartStrategyName,\r\n        address _smartStrategyAddress,\r\n        address _minter,\r\n        address _executor\r\n        ) \r\n        public \r\n        onlyManager\r\n    {\r\n        require(!_isSmartStrategyPresent(_smartStrategyAddress),\"Smart Strategy already present!\");\r\n        SmartStrategy memory newSmartStrategy = SmartStrategy\r\n            ({  smartStrategyName : _smartStrategyName,\r\n                minter : _minter,\r\n                executor : _executor,\r\n                created : true });\r\n        smartStrategies[_smartStrategyAddress] = newSmartStrategy;\r\n        minterStrategyMap[_minter] = _smartStrategyAddress;\r\n    }\r\n\r\n    /// @dev Function to remove a smart strategy from Yieldster.\r\n    /// @param _smartStrategyAddress Address of the smart strategy.\r\n    function removeSmartStrategy(address _smartStrategyAddress) \r\n        public \r\n        onlyManager\r\n    {\r\n        require(!_isSmartStrategyPresent(_smartStrategyAddress),\"Smart Strategy not present\");\r\n        delete smartStrategies[_smartStrategyAddress];\r\n    }\r\n\r\n    /// @dev Function to get ssmart strategy executor address.\r\n    /// @param _smartStrategy Address of the strategy.\r\n    function smartStrategyExecutor(address _smartStrategy) \r\n        external \r\n        view \r\n        returns(address)\r\n    {\r\n        return smartStrategies[_smartStrategy].executor;\r\n    }\r\n\r\n    /// @dev Function to change executor of smart strategy.\r\n    /// @param _smartStrategy Address of the smart strategy.\r\n    /// @param _executor Address of the executor.\r\n    function changeSmartStrategyExecutor(address _smartStrategy, address _executor) \r\n        public \r\n        onlyManager\r\n    {\r\n        require(_isSmartStrategyPresent(_smartStrategy),\"Smart Strategy not present!\");\r\n        smartStrategies[_smartStrategy].executor = _executor;\r\n    }\r\n\r\n// Protocols\r\n    /// @dev Function to check if a protocol is supported by Yieldster.\r\n    /// @param _address Address of the protocol.\r\n    function _isProtocolPresent(address _address) \r\n        private \r\n        view \r\n        returns(bool)\r\n    {\r\n        return protocols[_address].created;\r\n    }\r\n\r\n    /// @dev Function to add a protocol to Yieldster.\r\n    /// @param _symbol symbol of the protocol.\r\n    /// @param _name Name of the protocol.\r\n    /// @param _protocolAddress Address of the protocol.\r\n    function addProtocol(\r\n        string memory _symbol,\r\n        string memory _name,\r\n        address _protocolAddress\r\n        ) \r\n        public \r\n        onlyManager\r\n    {\r\n        require(!_isProtocolPresent(_protocolAddress),\"Protocol already present!\");\r\n        Protocol memory newProtocol = Protocol({ name:_name, created:true, symbol:_symbol });\r\n        protocols[_protocolAddress] = newProtocol;\r\n    }\r\n\r\n    /// @dev Function to remove a protocol from Yieldster.\r\n    /// @param _protocolAddress Address of the protocol.\r\n    function removeProtocol(address _protocolAddress) \r\n        public \r\n        onlyManager\r\n    {\r\n        require(_isProtocolPresent(_protocolAddress),\"Protocol not present!\");\r\n        delete protocols[_protocolAddress];\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelistModule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_platformManagementFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_profitManagementFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stringUtils\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_yieldsterExchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oneInch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceModule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_safeUtils\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"}],\"name\":\"VaultCreation\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategyAddress\",\"type\":\"address\"}],\"name\":\"_isStrategyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolAddress\",\"type\":\"address\"}],\"name\":\"_isStrategyProtocolEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cleanUpAsset\",\"type\":\"address\"}],\"name\":\"_isVaultAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"addAsset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_protocolAddress\",\"type\":\"address\"}],\"name\":\"addProtocol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyFactory\",\"type\":\"address\"}],\"name\":\"addProxyFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_smartStrategyName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_smartStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"addSmartStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_strategyName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_strategyAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_strategyProtocols\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_benefeciary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_managementFeePercentage\",\"type\":\"uint256\"}],\"name\":\"addStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAPSManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultStrategyManager\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_whitelistGroup\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_smartStrategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"changeSmartStrategyExecutor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"changeStrategyExecutor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAPSManager\",\"type\":\"address\"}],\"name\":\"changeVaultAPSManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultStrategyManager\",\"type\":\"address\"}],\"name\":\"changeVaultStrategyManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelistManager\",\"type\":\"address\"}],\"name\":\"changeWhitelistManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"name\":\"createVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategyAddress\",\"type\":\"address\"}],\"name\":\"deactivateVaultStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategyAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_assetsToBeDisabled\",\"type\":\"address[]\"}],\"name\":\"disableVaultStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableYieldsterGOD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"emergencyVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDepositStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"getStrategyFromMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategyAddress\",\"type\":\"address\"}],\"name\":\"getStrategyManagementDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getUSDPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"name\":\"getVaultActiveStrategy\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVaultManagementFee\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWithdrawStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetAddress\",\"type\":\"address\"}],\"name\":\"isDepositAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategyAddress\",\"type\":\"address\"}],\"name\":\"isStrategyActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetAddress\",\"type\":\"address\"}],\"name\":\"isWithdrawalAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oneInch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platFormManagementFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceModule\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitManagementFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxyFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"removeAsset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_managementFeeAddress\",\"type\":\"address\"}],\"name\":\"removeManagementFeeStrategies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolAddress\",\"type\":\"address\"}],\"name\":\"removeProtocol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_smartStrategyAddress\",\"type\":\"address\"}],\"name\":\"removeSmartStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategyAddress\",\"type\":\"address\"}],\"name\":\"removeStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"safeMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"safeUtils\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_emergencyVault\",\"type\":\"address\"}],\"name\":\"setEmergencyVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_managementFeeAddress\",\"type\":\"address\"}],\"name\":\"setManagementFeeStrategies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oneInch\",\"type\":\"address\"}],\"name\":\"setOneInch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceModule\",\"type\":\"address\"}],\"name\":\"setPriceModule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformManagement\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_profitManagement\",\"type\":\"address\"}],\"name\":\"setProfitAndPlatformManagementFeeStrategies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_safeMinter\",\"type\":\"address\"}],\"name\":\"setSafeMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_safeUtils\",\"type\":\"address\"}],\"name\":\"setSafeUtils\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stockDeposit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stockWithdraw\",\"type\":\"address\"}],\"name\":\"setStockDepositWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategyAddress\",\"type\":\"address\"}],\"name\":\"setVaultActiveStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_enabledDepositAsset\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_enabledWithdrawalAsset\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_disabledDepositAsset\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_disabledWithdrawalAsset\",\"type\":\"address[]\"}],\"name\":\"setVaultAssets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_smartStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"setVaultSmartStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultStrategy\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_enabledStrategyProtocols\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_disabledStrategyProtocols\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_assetsToBeEnabled\",\"type\":\"address[]\"}],\"name\":\"setVaultStrategyAndProtocol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yieldsterExchange\",\"type\":\"address\"}],\"name\":\"setYieldsterExchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yieldsterGOD\",\"type\":\"address\"}],\"name\":\"setYieldsterGOD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_smartStrategy\",\"type\":\"address\"}],\"name\":\"smartStrategyExecutor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stockDeposit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stockWithdraw\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"strategyExecutor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stringUtils\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistModule\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yieldsterDAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yieldsterExchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yieldsterGOD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yieldsterTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"APContract","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f8c992d12dc8a15e156869058717bac13d383f260000000000000000000000004912a6e4c4da1a6d5d44520f81ca19352d8de7a7000000000000000000000000826f9f3f4f2748f75cb57eb258603613e280b756000000000000000000000000ae9a070bed8b80050e3b8a26c169496b55c00d940000000000000000000000001717ceaa4ba8b418595118c69b205715e469b966000000000000000000000000c586bef4a0992c495cf22e1aeee4e446cecdee0e0000000000000000000000007df98189d32aa4e92649dbe5d837126be4e53d1b0000000000000000000000007f629de3b0a9607befafb5f18d525f6e30f61afd","EVMVersion":"petersburg","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://0926228507f42ecc66e6c90e850e69857f13cb59ed093b7dd959ece25a46901f"}]}