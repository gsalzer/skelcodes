{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/sephiroth/AbyssFinance/solidity/truffle/projects/abyss-lockup/contracts/AbyssSafe365.sol\": {\r\n      \"content\": \"/*\\n░█████╗░██████╗░██╗░░░██╗░██████╗░██████╗  ███████╗██╗███╗░░██╗░█████╗░███╗░░██╗░█████╗░███████╗\\n██╔══██╗██╔══██╗╚██╗░██╔╝██╔════╝██╔════╝  ██╔════╝██║████╗░██║██╔══██╗████╗░██║██╔══██╗██╔════╝\\n███████║██████╦╝░╚████╔╝░╚█████╗░╚█████╗░  █████╗░░██║██╔██╗██║███████║██╔██╗██║██║░░╚═╝█████╗░░\\n██╔══██║██╔══██╗░░╚██╔╝░░░╚═══██╗░╚═══██╗  ██╔══╝░░██║██║╚████║██╔══██║██║╚████║██║░░██╗██╔══╝░░\\n██║░░██║██████╦╝░░░██║░░░██████╔╝██████╔╝  ██║░░░░░██║██║░╚███║██║░░██║██║░╚███║╚█████╔╝███████╗\\n╚═╝░░╚═╝╚═════╝░░░░╚═╝░░░╚═════╝░╚═════╝░  ╚═╝░░░░░╚═╝╚═╝░░╚══╝╚═╝░░╚═╝╚═╝░░╚══╝░╚════╝░╚══════╝\\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AbyssSafeBase.sol\\\";\\n\\n/**\\n * Abyss Finance's AbyssSafe Contract\\n * The main smart contract that is responsible for deposits and withdrawal of tokens.\\n */\\ncontract AbyssSafe365 is AbyssSafeBase {\\n    uint256 public override constant unlockTime = 31536000; // mainnet\\n    // uint256 public override constant unlockTime = 21900; // testnet\\n\\n    constructor(address token, address lockup, uint256 abyssRequired) AbyssSafeBase(token, lockup, unlockTime, abyssRequired) {\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/sephiroth/AbyssFinance/solidity/truffle/projects/abyss-lockup/contracts/AbyssSafeBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../contracts/interfaces/IAbyssLockup.sol\\\";\\n\\n/**\\n * Abyss Finance's AbyssSafeBase Contract\\n * The main smart contract that is responsible for deposits and withdrawal of tokens.\\n */\\ncontract AbyssSafeBase is ReentrancyGuard, Ownable {\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public tokenContract;\\n    IAbyssLockup public lockupContract;\\n    uint256 private _unlockTime;\\n    uint256 private _abyssRequired;\\n\\n    /**\\n     * @dev The parameter responsible for global disabling and enabling of new deposits.\\n     */\\n    bool public disabled;\\n\\n    /**\\n     * @dev Here we store data for each locked token address of a specific wallet.\\n     *\\n     * - deposited - Amount of deposited tokens.\\n     * - requested - Amount of requested tokens for withdrawing.\\n     * - timestamp - Token deposit time or token unlock time established at an active withdrawal request\\n     */\\n    struct Data {\\n        uint256 deposited;\\n        uint256 divFactorDeposited;\\n        uint256 requested;\\n        uint256 divFactorRequested;\\n        uint256 timestamp;\\n    }\\n\\n    /**\\n     * @dev Here we store data for every ever locked token on this smart contract.\\n     *\\n     * - disabled - A true value implies that this token cannot be deposited on the smart contract, while all other actions are allowed.\\n     * - approved - A true value implies that lockupContract is approved on transferFrom this smart contract.\\n     * - deposited - A total deposited token amount on the smart contract for the token address.\\n     * - requested - A total requested token amount from the smart contract.\\n     */\\n    struct Token {\\n        bool disabled;\\n        bool approved;\\n        uint256 deposited;\\n        uint256 divFactorDeposited;\\n        uint256 requested;\\n        uint256 divFactorRequested;\\n    }\\n\\n    mapping (address => mapping (address => Data)) private _data;\\n    mapping (address => Token) private _tokens;\\n\\n    /**\\n     * @dev Stores the amount of Abyss required for withdrawals after deposit for the caller's address.\\n     */\\n    mapping (address => uint256) private _rates;\\n\\n    constructor(address token, address lockup, uint256 unlockTime_, uint256 abyssRequired_) {\\n        tokenContract = IERC20(address(token));\\n        lockupContract = IAbyssLockup(address(lockup));\\n        _unlockTime = unlockTime_;\\n        _abyssRequired = abyssRequired_;\\n    }\\n\\n    // VIEW FUNCTIONS\\n\\n    /**\\n     * @dev Amount of Abyss required for service usage.\\n     */\\n    function abyssRequired() public view returns (uint256) {\\n        return _abyssRequired;\\n    }\\n\\n    /**\\n     * @dev Amount of Abyss required for withdrawal requests and withdraw after deposit is made.\\n     */\\n    function rate(address account) public view returns (uint256) {\\n        return _rates[account];\\n    }\\n\\n    /**\\n     * @dev Time of possible `token` withdrawal for the `account` if withdrawal request was made.\\n     * Time of `token` deposit if there were no withdrawal requests by the `account`.\\n     */\\n    function timestamp(address account, address token) public view returns (uint256) {\\n        return _data[account][token].timestamp;\\n    }\\n\\n    /**\\n     * @dev Amount of `token` deposited by the `account`.\\n     */\\n    function deposited(address account, address token) public view returns (uint256) {\\n        return _data[account][token].deposited;\\n    }\\n\\n    /**\\n     * @dev Amount of `token` requested for withdrawal by the `account`.\\n     */\\n    function requested(address account, address token) public view returns (uint256) {\\n        return _data[account][token].requested;\\n    }\\n\\n    /**\\n     * @dev divFactor (rebase support) for specific `account` and `token` deposited.\\n     */\\n    function divFactorDeposited(address account, address token) public view returns (uint256) {\\n        return _data[account][token].divFactorDeposited;\\n    }\\n\\n    /**\\n     * @dev divFactor (rebase support) for specific `account` and `token` requested.\\n     */\\n    function divFactorRequested(address account, address token) public view returns (uint256) {\\n        return _data[account][token].divFactorRequested;\\n    }\\n\\n    /**\\n     * @dev Total mount of `token` deposited to this smart contract.\\n     */\\n    function totalDeposited(address token) public view returns (uint256) {\\n        return _tokens[token].deposited;\\n    }\\n\\n    /**\\n     * @dev Total mount of `token` requested for withdrawal from this smart contract.\\n     */\\n    function totalRequested(address token) public view returns (uint256) {\\n        return _tokens[token].requested;\\n    }\\n\\n    /**\\n     * @dev divFactor (rebase support) for specific `token` deposited.\\n     */\\n    function totalDivFactorDeposited(address token) public view returns (uint256) {\\n        return _tokens[token].divFactorDeposited;\\n    }\\n\\n    /**\\n     * @dev divFactor (rebase support) for specific `token` requested.\\n     */\\n    function totalDivFactorRequested(address token) public view returns (uint256) {\\n        return _tokens[token].divFactorRequested;\\n    }\\n\\n    /**\\n     * @dev Shows if specific `token` is disabled in this smart contract.\\n     */\\n    function isTokenDisabled(address token) public view returns (bool) {\\n        return _tokens[token].disabled;\\n    }\\n\\n    /**\\n     * @dev Shows if specific `address` is a manager of this smart contract.\\n     */\\n    function isManager(address manager) public view returns (bool) {\\n        return _tokens[manager].approved;\\n    }\\n\\n    /**\\n     * @dev Shows the unlock period that you need to wait after withdrawal request.\\n     */\\n    function unlockTime() external virtual view returns (uint256) {\\n        return _unlockTime;\\n    }\\n\\n    // ACTION FUNCTIONS\\n\\n    /**\\n     * @dev Moves `amount` of `token` from the caller's account to this smart contract.\\n     *\\n     * Requirements:\\n     *\\n     * - Contract is active and deposits for a specific token are not prohibited.\\n     * - Required Abyss amount is available on the account.\\n     * - Token smart contract has the right to move the tokens intended for deposit.\\n     * - User’s balance is greater than zero and greater than the amount they intend to deposit.\\n     */\\n    function deposit(address token, uint256 amount, address receiver) public nonReentrant isAllowed(msg.sender, token) returns (bool) {\\n        require(disabled == false && _tokens[token].disabled == false, \\\"AbyssSafe: disabled\\\");\\n        if (receiver == 0x0000000000000000000000000000000000000000) {\\n            receiver = msg.sender;\\n        }\\n        require(Address.isContract(receiver) == false, \\\"AbyssSafe: receiver cannot be a smart contract\\\");\\n        require(Address.isContract(token) == true, \\\"AbyssSafe: token must be a smart contract\\\");\\n\\n        uint256 _tempFreeDeposits;\\n\\n        if (_abyssRequired > 0 && token != address(tokenContract)) {\\n            _tempFreeDeposits = lockupContract.freeDeposits();\\n            require(_tempFreeDeposits > 0 || tokenContract.balanceOf(msg.sender) >= _abyssRequired, \\\"AbyssSafe: not enough Abyss\\\");\\n        }\\n\\n        require(IERC20(address(token)).allowance(msg.sender, address(lockupContract)) > amount, \\\"AbyssSafe: you need to approve token first\\\");\\n        require(IERC20(address(token)).balanceOf(msg.sender) >= amount && amount > 0, \\\"AbyssSafe: you cannot lock this amount\\\");\\n\\n        /**\\n         * @dev Verifies that the `lockupContract` has permission to move a given token located on this contract.\\n         */\\n        if (_tokens[token].approved == false) {\\n\\n            /**\\n             * @dev Add permission to move `token` from this contract for `lockupContract`.\\n             */\\n            SafeERC20.safeApprove(IERC20(address(token)), address(lockupContract), 115792089237316195423570985008687907853269984665640564039457584007913129639935);\\n            /**\\n             * @dev Verify that the permission was correctly applied to exclude any future uncertainties.\\n             */\\n            require(IERC20(address(token)).allowance(address(this), address(lockupContract)) > 0, \\\"AbyssSafe: allowance issue\\\");\\n            /**\\n             * @dev Add verification flag to improve efficiency and avoid revisiting the token smart contract, for gas economy.\\n             */\\n            _tokens[token].approved = true;\\n        }\\n\\n        uint256 _tempBalanceSafe = IERC20(address(token)).balanceOf(address(this));\\n\\n        /**\\n         * @dev Code that supports rebase of specific `token`.\\n         */\\n        if (_tokens[token].deposited != _tempBalanceSafe) {\\n            if (_tokens[token].deposited > 0) {\\n                calcDivFactorDepositedTotal(token, _tempBalanceSafe);\\n            } else {\\n                lockupContract.externalTransfer(token, address(this), owner(), _tempBalanceSafe, 0);\\n                _tempBalanceSafe = 0;\\n            }\\n        }\\n\\n        if (_tokens[token].divFactorDeposited == 0) {\\n            _tokens[token].divFactorDeposited = 1e36;\\n        }\\n\\n        if (_data[receiver][token].divFactorDeposited == 0) {\\n            _data[receiver][token].divFactorDeposited = _tokens[token].divFactorDeposited;\\n        } else if (_data[receiver][token].divFactorDeposited != _tokens[token].divFactorDeposited) {\\n            calcDivFactorDeposited(receiver, token);\\n        }\\n\\n        /**\\n         * @dev Writes down the cost of using the service so that any future amount requirement\\n         * increases won’t affect pre-existing users until they make a new deposit.\\n         */\\n        if (_tempFreeDeposits > 0) {\\n            _rates[receiver] = 0;\\n        } else {\\n            _rates[receiver] = _abyssRequired;\\n        }\\n\\n        /**\\n         * @dev Moves `amount` of `token` from the caller's account to this smart contract with the help of `lockupContract` smart contract.\\n         */\\n        lockupContract.externalTransfer(token, msg.sender, address(this), amount, _abyssRequired);\\n\\n        uint256 _tempBalanceSafeAfter = IERC20(address(token)).balanceOf(address(this));\\n\\n        if (_tempBalanceSafe + amount != _tempBalanceSafeAfter) {\\n            amount = _tempBalanceSafeAfter - _tempBalanceSafe;\\n        }\\n\\n        /**\\n         * @dev Increases the number of deposited User tokens.\\n         */\\n        _data[receiver][token].deposited = _data[receiver][token].deposited + amount;\\n\\n        /**\\n         * @dev Changes the total amount of deposited tokens.\\n         */\\n        _tokens[token].deposited = _tokens[token].deposited + amount;\\n\\n        emit Deposit(receiver, msg.sender, token, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Creates withdrawal request for the full amount of `token` deposited to this smart contract by the caller's account.\\n     *\\n     * Requirements:\\n     *\\n     * - Required Abyss amount is available on the account.\\n     * - There is no pending active withdrawal request for `token` by the caller's account.\\n     * - The caller has any amount of `token` deposited to this smart contract.\\n     * - User’s balance is greater than zero and greater than the amount they intend to deposit.\\n     */\\n    function request(address token, uint256 amount) external nonReentrant isAllowed(msg.sender, token) returns (bool) {\\n        require(\\n            _rates[msg.sender] == 0 ||\\n            token == address(tokenContract) ||\\n            tokenContract.balanceOf(msg.sender) >= _rates[msg.sender],\\n            \\\"AbyssSafe: not enough Abyss\\\");\\n        require(_data[msg.sender][token].requested == 0, \\\"AbyssSafe: you already requested\\\");\\n        require(_data[msg.sender][token].deposited > 0, \\\"AbyssSafe: nothing to withdraw\\\");\\n\\n        uint256 _tempBalanceSafe = IERC20(address(token)).balanceOf(address(this));\\n\\n        /**\\n         * @dev Code that supports rebase of specific `token`.\\n         */\\n        if (_tokens[token].deposited != _tempBalanceSafe) {\\n                calcDivFactorDepositedTotal(token, _tempBalanceSafe);\\n        }\\n\\n        if (_data[msg.sender][token].divFactorDeposited != _tokens[token].divFactorDeposited) {\\n            calcDivFactorDeposited(msg.sender, token);\\n\\n            if (_data[msg.sender][token].deposited == 0) {\\n                delete _data[msg.sender][token].divFactorDeposited;\\n                delete _data[msg.sender][token].divFactorRequested;\\n                return true;\\n            }\\n        }\\n\\n        uint256 _tempLockupBalance = IERC20(address(token)).balanceOf(address(lockupContract));\\n        uint256 _tempDepositedLockup = IAbyssLockup(address(lockupContract)).deposited(token);\\n        uint256 _tempLockupDivFactor = IAbyssLockup(address(lockupContract)).divFactor(token);\\n\\n        if (_tempLockupBalance == 0) {\\n            delete _tokens[token].requested;\\n            delete _tokens[token].divFactorRequested;\\n            lockupContract.resetData(token);\\n        }\\n        if (_tempDepositedLockup != _tempLockupBalance) {\\n            if (_tempDepositedLockup > 0) {\\n                _tempLockupDivFactor = calcDivFactorLockup(_tempLockupDivFactor, _tempLockupBalance, _tempDepositedLockup);\\n            } else {\\n                lockupContract.externalTransfer(token, address(lockupContract), owner(), _tempLockupBalance, 0);\\n                _tempLockupBalance = 0;\\n            }\\n        }\\n\\n        if (_tokens[token].divFactorRequested != _tempLockupDivFactor) {\\n            if (_tokens[token].divFactorRequested != 0) {\\n                _tokens[token].requested = _tokens[token].requested * _tempLockupDivFactor / _tokens[token].divFactorRequested;\\n            }\\n            _tokens[token].divFactorRequested = _tempLockupDivFactor;\\n        } else if (_tempLockupDivFactor == 0) {\\n            _tempLockupDivFactor = 1e36;\\n            _tokens[token].divFactorRequested = 1e36;\\n        }\\n\\n        _data[msg.sender][token].divFactorRequested = _tokens[token].divFactorRequested;\\n\\n        if (_data[msg.sender][token].deposited < amount || amount == 0) {\\n            amount = _data[msg.sender][token].deposited;\\n        }\\n\\n        /**\\n         * @dev Changes the total amount of deposited `token` by the amount of withdrawing request in the decreasing direction.\\n         */\\n        _tokens[token].deposited = _tokens[token].deposited - amount;\\n\\n        /**\\n         * @dev Changes the caller's amount of deposited `token` by the amount of withdrawing request in the decreasing direction.\\n         */\\n        if (amount == _data[msg.sender][token].deposited) {\\n            delete _data[msg.sender][token].deposited;\\n            delete _data[msg.sender][token].divFactorDeposited;\\n            if (_tokens[token].deposited == 0) {\\n                delete _tokens[token].divFactorDeposited;\\n            }\\n        } else {\\n            _data[msg.sender][token].deposited = _data[msg.sender][token].deposited - amount;\\n        }\\n\\n        /**\\n         * @dev Sets a date for `lockupTime` seconds from the current date.\\n         */\\n        _data[msg.sender][token].timestamp = block.timestamp + _unlockTime;\\n\\n        /**\\n         * @dev If `token` balance on this smart contract is greater than zero,\\n         * sends tokens to the 'lockupContract' smart contract.\\n         */\\n        lockupContract.externalTransfer(token, address(this), address(lockupContract), amount, 0);\\n\\n        uint256 _tempLockupBalanceAfter = IERC20(address(token)).balanceOf(address(lockupContract));\\n\\n        if (_tempLockupBalance + amount != _tempLockupBalanceAfter) {\\n            amount = _tempLockupBalanceAfter - _tempLockupBalance;\\n        }\\n\\n        _tempLockupBalance = _tempLockupBalance + amount;\\n\\n        lockupContract.updateData(token, _tempLockupBalance, _tempLockupDivFactor);\\n\\n        /**\\n         * @dev Changes the total amount of requested `token by the sum of the withdrawing request in the increasing direction.\\n         */\\n        _tokens[token].requested = _tokens[token].requested + amount;\\n\\n        /**\\n         * @dev The requested amount of the caller's tokens for withdrawal request becomes equal to the amount requested.\\n         */\\n        _data[msg.sender][token].requested = amount;\\n\\n        _tempLockupBalance = _tempLockupBalance + amount;\\n\\n        emit Request(msg.sender, token, amount, _data[msg.sender][token].timestamp);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Cancels withdrawal request for the full amount of `token` requested from this smart contract by the caller's account.\\n     *\\n     * Requirement:\\n     *\\n     * - There is a pending active withdrawal request for `token` by the caller's account.\\n     */\\n    function cancel(address token) external nonReentrant isAllowed(msg.sender, token) returns (bool) {\\n        require(_data[msg.sender][token].requested > 0, \\\"AbyssSafe: nothing to cancel\\\");\\n\\n        uint256 _tempAmount = _data[msg.sender][token].requested;\\n\\n        uint256 _tempLockupBalance = IERC20(address(token)).balanceOf(address(lockupContract));\\n        uint256 _tempLockupBalance2;\\n        uint256 _tempBalanceSafe = IERC20(address(token)).balanceOf(address(this));\\n        uint256 _tempDepositedLockup = IAbyssLockup(address(lockupContract)).deposited(token);\\n        uint256 _tempLockupDivFactor = IAbyssLockup(address(lockupContract)).divFactor(token);\\n        uint256 _tempTimestamp = _data[msg.sender][token].timestamp;\\n\\n        if (_tempLockupBalance == 0) {\\n            delete _data[msg.sender][token].requested;\\n            delete _data[msg.sender][token].divFactorRequested;\\n            delete _tokens[token].requested;\\n            delete _tokens[token].divFactorRequested;\\n            lockupContract.resetData(token);\\n            return true;\\n        }\\n\\n        /**\\n         * @dev Code that supports rebase of specific `token`.\\n         */\\n        if (_tokens[token].deposited != _tempBalanceSafe) {\\n            if (_tokens[token].deposited > 0) {\\n                calcDivFactorDepositedTotal(token, _tempBalanceSafe);\\n            } else {\\n                lockupContract.externalTransfer(token, address(this), owner(), _tempBalanceSafe, 0);\\n                _tempBalanceSafe = 0;\\n            }\\n        }\\n\\n        if (_tokens[token].divFactorDeposited == 0) {\\n            _tokens[token].divFactorDeposited = 1e36;\\n        }\\n\\n        if (_data[msg.sender][token].divFactorDeposited != _tokens[token].divFactorDeposited) {\\n            if (_data[msg.sender][token].divFactorDeposited == 0) {\\n                _data[msg.sender][token].divFactorDeposited = _tokens[token].divFactorDeposited;\\n            } else {\\n                calcDivFactorDeposited(msg.sender, token);\\n            }\\n        }\\n\\n        if (_tempDepositedLockup != _tempLockupBalance) {\\n            _tempLockupDivFactor = calcDivFactorLockup(_tempLockupDivFactor, _tempLockupBalance, _tempDepositedLockup);\\n        }\\n\\n        if (_tokens[token].divFactorRequested != _tempLockupDivFactor) {\\n            calcDivFactorRequestedTotal(token, _tempLockupDivFactor);\\n        }\\n\\n        if (_data[msg.sender][token].divFactorRequested != _tokens[token].divFactorRequested) {\\n            _tempAmount = calcDivFactorRequested(_tempLockupDivFactor, _data[msg.sender][token].divFactorRequested, _tempAmount);\\n\\n            if (_tokens[token].requested < _tempAmount) {\\n                _tempAmount = _tokens[token].requested;\\n            }\\n            _data[msg.sender][token].divFactorRequested = _tokens[token].divFactorRequested;\\n        }\\n\\n        delete _data[msg.sender][token].divFactorRequested;\\n\\n        /**\\n         * @dev Changes the total amount of requested `token` by the cancelation withdrawal amount in the decreasing direction.\\n         */\\n        _tokens[token].requested = _tokens[token].requested - _tempAmount;\\n\\n        /**\\n         * @dev Removes `token` divFactor if balance of the requested `token` is 0 after withdraw cancelation.\\n         */\\n        if (_tokens[token].requested == 0) {\\n            delete _tokens[token].divFactorRequested;\\n        }\\n\\n        /**\\n         * @dev Taking withdrawal request cancellation into account, restores the caller's `token` balance.\\n         */\\n        _data[msg.sender][token].deposited = _data[msg.sender][token].deposited + _tempAmount;\\n\\n        /**\\n         * @dev Resets information on the number of `token` requested by the caller for withdrawal request.\\n         */\\n        delete _data[msg.sender][token].requested;\\n\\n        /**\\n         * @dev Calculates the new balance of `token` on `lockup` smart contract.\\n         */\\n        _tempLockupBalance2 = _tempLockupBalance - _tempAmount;\\n\\n        /**\\n         * @dev Removes divFactor on `lockup` smart contract if balane of the `token` is 0 after withdraw.\\n         */\\n        if (_tempLockupBalance2 == 0) {\\n            _tempLockupDivFactor = 1;\\n        }\\n\\n        /**\\n         * @dev Reset the unblocking time to zero.\\n         */\\n        delete _data[msg.sender][token].timestamp;\\n\\n        lockupContract.externalTransfer(token, address(lockupContract), address(this), _tempAmount, 0);\\n        lockupContract.updateData(token, _tempLockupBalance2, _tempLockupDivFactor);\\n\\n\\n        _tempLockupBalance2 = IERC20(address(token)).balanceOf(address(this));\\n\\n        if (_tempBalanceSafe + _tempAmount != _tempLockupBalance2) {\\n            _tempAmount = _tempLockupBalance2 - _tempBalanceSafe;\\n        }\\n\\n        /**\\n         * @dev Changes the total amount of deposited `token` by the amount of withdrawing request in the increasing direction.\\n         */\\n        _tokens[token].deposited = _tokens[token].deposited + _tempAmount;\\n\\n        emit Cancel(msg.sender, token, _tempAmount, _tempTimestamp);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Withdraws the full amount of `token` requested from this smart contract by the caller's account.\\n     *\\n     * Requirement:\\n     *\\n     * - Required Abyss amount is available on the account.\\n     * - There is pending active withdrawal request for `token` by the caller's account.\\n     * - Required amount of time has already passed since withrawal request execution.\\n     * - User’s balance is greater than zero and greater than the amount they intend to deposit.\\n     */\\n    function withdraw(address token) external nonReentrant isAllowed(msg.sender, token) returns (bool) {\\n        require(\\n            _rates[msg.sender] == 0 ||\\n            token == address(tokenContract) ||\\n            tokenContract.balanceOf(msg.sender) >= _rates[msg.sender],\\n            \\\"AbyssSafe: not enough Abyss\\\");\\n        require(_data[msg.sender][token].requested > 0, \\\"AbyssSafe: request withdraw first\\\");\\n        require(_data[msg.sender][token].timestamp <= block.timestamp, \\\"AbyssSafe: patience you must have!\\\");\\n\\n        uint256 _tempAmount = _data[msg.sender][token].requested;\\n        uint256 _tempLockupBalance = IERC20(address(token)).balanceOf(address(lockupContract));\\n        uint256 _tempLockupBalance2;\\n        uint256 _tempDepositedLockup = IAbyssLockup(address(lockupContract)).deposited(token);\\n        uint256 _tempLockupDivFactor = IAbyssLockup(address(lockupContract)).divFactor(token);\\n\\n        /**\\n         * @dev Code that supports rebase of specific `token`.\\n         */\\n        if (_tempLockupBalance == 0) {\\n            delete _data[msg.sender][token].requested;\\n            delete _data[msg.sender][token].divFactorRequested;\\n            delete _tokens[token].requested;\\n            delete _tokens[token].divFactorRequested;\\n            lockupContract.resetData(token);\\n            return true;\\n        }\\n\\n        if (_tempDepositedLockup != _tempLockupBalance) {\\n            _tempLockupDivFactor = calcDivFactorLockup(_tempLockupDivFactor, _tempLockupBalance, _tempDepositedLockup);\\n        }\\n\\n        if (_tokens[token].divFactorRequested != _tempLockupDivFactor) {\\n            calcDivFactorRequestedTotal(token, _tempLockupDivFactor);\\n        }\\n\\n        if (_data[msg.sender][token].divFactorRequested != _tokens[token].divFactorRequested) {\\n            _tempAmount = calcDivFactorRequested(_tempLockupDivFactor, _data[msg.sender][token].divFactorRequested, _tempAmount);\\n\\n            if (_tokens[token].requested < _tempAmount) {\\n                _tempAmount = _tokens[token].requested;\\n            }\\n\\n        }\\n\\n        delete _data[msg.sender][token].divFactorRequested;\\n\\n        /**\\n         * @dev Changes the total amount of requested `token` by the cancelation withdrawal amount in the decreasing direction.\\n         */\\n        _tokens[token].requested = _tokens[token].requested - _tempAmount;\\n\\n        /**\\n         * @dev Removes `token` divFactor if balance of the requested `token` is 0 after withdraw.\\n         */\\n        if (_tokens[token].requested == 0) {\\n            delete _tokens[token].divFactorRequested;\\n        }\\n\\n        /**\\n         * @dev Removes information about amount of requested `token`.\\n         */\\n        delete _data[msg.sender][token].requested;\\n\\n        if (_tempAmount == 0) {\\n            delete _data[msg.sender][token].timestamp;\\n            return true;\\n        }\\n\\n        /**\\n         * @dev Calculates the new balance of token on lockup smart contract.\\n         */\\n        _tempLockupBalance2 = _tempLockupBalance - _tempAmount;\\n\\n        /**\\n         * @dev Removes divFactor on `lockup` smart contract if balane of the `token` is 0 after withdraw.\\n         */\\n        if (_tempLockupBalance2 == 0) {\\n            _tempLockupDivFactor = 1;\\n        }\\n\\n        /**\\n         * @dev Withdraws tokens to the caller's address.\\n         */\\n        lockupContract.externalTransfer(token, address(lockupContract), msg.sender, _tempAmount, 0);\\n        lockupContract.updateData(token, _tempLockupBalance2, _tempLockupDivFactor);\\n\\n        _tempLockupBalance2 = IERC20(address(token)).balanceOf(address(lockupContract));\\n\\n        if (_tempLockupBalance != _tempLockupBalance2 + _tempAmount) {\\n            _tempAmount = _tempLockupBalance - _tempLockupBalance2;\\n        }\\n\\n        emit Withdraw(msg.sender, token, _tempAmount, _data[msg.sender][token].timestamp);\\n\\n        /**\\n         * @dev Reset the unblocking time to zero.\\n         */\\n        delete _data[msg.sender][token].timestamp;\\n        return true;\\n\\n    }\\n\\n    // REBASE CALCULATION FUNCTIONS\\n\\n    function calcDivFactorDepositedTotal(address _token, uint256 _balanceSafe) internal {\\n        _tokens[_token].divFactorDeposited = _tokens[_token].divFactorDeposited * _balanceSafe / _tokens[_token].deposited;\\n        _tokens[_token].deposited = _balanceSafe;\\n    }\\n\\n    function calcDivFactorRequestedTotal(address _token, uint256 _lockupDivFactor) internal {\\n        _tokens[_token].requested = _tokens[_token].requested * _lockupDivFactor / _tokens[_token].divFactorRequested;\\n        _tokens[_token].divFactorRequested = _lockupDivFactor;\\n    }\\n\\n    function calcDivFactorDeposited(address _owner, address _token) internal {\\n        _data[_owner][_token].deposited = _data[_owner][_token].deposited * _tokens[_token].divFactorDeposited / _data[_owner][_token].divFactorDeposited;\\n        _data[_owner][_token].divFactorDeposited = _tokens[_token].divFactorDeposited;\\n    }\\n\\n    function calcDivFactorRequested(uint256 _lockupDivFactor, uint256 _divFactorRequested, uint256 _amount) internal pure returns (uint256) {\\n        return _amount * _lockupDivFactor / _divFactorRequested;\\n    }\\n\\n    function calcDivFactorLockup(uint256 _lockupDivFactor, uint256 _lockupBalance, uint256 _lockupDeposited) internal pure returns (uint256) {\\n        return _lockupDivFactor * _lockupBalance / _lockupDeposited;\\n    }\\n\\n    // ADMIN FUNCTIONS\\n\\n    /**\\n     * @dev Initializes configuration of a given smart contract, with a specified\\n     * address for the `lockupContract` smart contract.\\n     *\\n     * This value is immutable: it can only be set once.\\n     */\\n    function initialize(address lockupContract_) external onlyOwner returns (bool) {\\n        require(address(lockupContract) == address(0), \\\"AbyssSafe: already initialized\\\");\\n        lockupContract = IAbyssLockup(lockupContract_);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Configurates smart contract allowing modification in the amount of\\n     * required Abyss to use the smart contract.\\n     *\\n     * NOTE: The price for pre-existing users will remain unchanged until\\n     * a new token deposit is made. This aspect has been considered to prevent\\n     * possibility of increase pricing for already made deposits.\\n     *\\n     * Also, this function allows disabling of deposits, both globally and for a specific token.\\n     */\\n    function setup(address token, bool tokenDisabled, bool globalDisabled, uint256 abyssRequired_) external onlyManager(msg.sender) returns (bool) {\\n        disabled = globalDisabled;\\n        if (token != address(this)) {\\n            _tokens[token].disabled = tokenDisabled;\\n        }\\n        _abyssRequired = abyssRequired_;\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Allows the `owner` to assign managers who can use the setup function.\\n     */\\n    function setManager(address manager) external onlyOwner returns (bool) {\\n\\n        if (_tokens[manager].approved == false) {\\n            _tokens[manager].approved = true;\\n        } else {\\n            _tokens[manager].approved = false;\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev A function that allows the `owner` to withdraw any locked and lost tokens\\n     * from the smart contract if such `token` is not yet deposited.\\n     *\\n     * NOTE: Embedded in the function is verification that allows for token withdrawal\\n     * only if the token balance is greater than the token balance deposited on the smart contract.\\n     */\\n    function withdrawLostTokens(address token) external onlyOwner returns (bool) {\\n        uint256 _tempBalance = IERC20(address(token)).balanceOf(address(this));\\n\\n        if (_tokens[token].deposited == 0 && _tempBalance > 0) {\\n            SafeERC20.safeTransfer(IERC20(address(token)), msg.sender, _tempBalance);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev A function that allows to set allowance between this and lockup smart contract if something went wrong.\\n     */\\n    function manualApprove(address token) external returns (bool) {\\n        SafeERC20.safeApprove(IERC20(address(token)), address(lockupContract), 115792089237316195423570985008687907853269984665640564039457584007913129639935);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Modifier that prohibits execution of this smart contract from `token` address\\n     */\\n    modifier isAllowed(address account, address token) {\\n        require(account != token, \\\"AbyssSafe: you shall not pass!\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier that allows usage only for managers chosen by the `owner`.\\n    */\\n    modifier onlyManager(address account) {\\n        require(_tokens[account].approved || account == owner(), \\\"AbyssSafe: you shall not pass!\\\");\\n        _;\\n    }\\n\\n    event Deposit(address indexed user, address indexed depositor, address token, uint256 amount);\\n    event Request(address indexed user, address token, uint256 amount, uint256 timestamp);\\n    event Cancel(address indexed user, address token, uint256 amount, uint256 timestamp);\\n    event Withdraw(address indexed user, address token, uint256 amount, uint256 timestamp);\\n}\\n\"\r\n    },\r\n    \"/Users/sephiroth/AbyssFinance/solidity/truffle/projects/abyss-lockup/contracts/interfaces/IAbyssLockup.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the AbyssLockup smart contract.\\n */\\ninterface IAbyssLockup {\\n\\n    /**\\n     * @dev Returns amount requested for the `token` withdrawal\\n     * on all `safeContract` smart contracts.\\n     */\\n    function deposited(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns divFactor requested for the specific `token`.\\n     */\\n    function divFactor(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of free deposits left.\\n     */\\n    function freeDeposits() external returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the `sender` account to `recipient`.\\n     *\\n     * This function can be called only by `safeContract` smart contracts: {onlyContract} modifier.\\n     *\\n     * All tokens are moved only from `AbyssLockup`smart contract so only one\\n     * token approval is required.\\n     *\\n     * Sets divFactor and deposit amount of specific `token`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     */\\n    function externalTransfer(address token, address sender, address recipient, uint256 amount, uint256 abyssRequired) external returns (bool);\\n\\n    /**\\n     * @dev Removes deposited and divfactor data for specific token. Used by Safe smart contract only.\\n     */\\n    function resetData(address token) external returns (bool);\\n\\n    /**\\n     * @dev Updates deposited and divfactor data for specific token. Used by Safe smart contract only.\\n     */\\n    function updateData(address token, uint256 balance, uint256 divFactor_) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lockup\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"abyssRequired\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Request\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"abyssRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"cancel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"deposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"divFactorDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"divFactorRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lockupContract_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isTokenDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockupContract\",\"outputs\":[{\"internalType\":\"contract IAbyssLockup\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"manualApprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"request\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"requested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"tokenDisabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"globalDisabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"abyssRequired_\",\"type\":\"uint256\"}],\"name\":\"setup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"timestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalDivFactorDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalDivFactorRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawLostTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AbyssSafe365","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000e8d6b471e332f140e7d9dbb99e5e3822f728da6000000000000000000000000febff48c603b8d81962785045b864c6b44b67de70000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}