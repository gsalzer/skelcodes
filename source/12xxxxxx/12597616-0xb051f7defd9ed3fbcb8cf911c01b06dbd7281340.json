{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/proxy/Initializable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// solhint-disable-next-line compiler-version\r\npragma solidity >=0.4.24 <0.8.0;\r\n\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        return !Address.isContract(address(this));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/uniswapv2/interfaces/IUniswapV2Factory.sol\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// File: contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File: contracts/uniswapv2/interfaces/IUniswapV2Router01.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: contracts/uniswapv2/interfaces/IUniswapV2Router02.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: contracts/libraries/Priviledgeable.sol\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.6.2;\r\n\r\n\r\nabstract contract Priviledgeable {\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint256;\r\n\r\n    event PriviledgeGranted(address indexed admin);\r\n    event PriviledgeRevoked(address indexed admin);\r\n\r\n    modifier onlyAdmin() {\r\n        require(\r\n            _priviledgeTable[msg.sender],\r\n            \"Priviledgeable: caller is not the owner\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    mapping(address => bool) private _priviledgeTable;\r\n\r\n    constructor() internal {\r\n        _priviledgeTable[msg.sender] = true;\r\n    }\r\n\r\n    function addAdmin(address _admin) external onlyAdmin returns (bool) {\r\n        require(_admin != address(0), \"Admin address cannot be 0\");\r\n        return _addAdmin(_admin);\r\n    }\r\n\r\n    function removeAdmin(address _admin) external onlyAdmin returns (bool) {\r\n        require(_admin != address(0), \"Admin address cannot be 0\");\r\n        _priviledgeTable[_admin] = false;\r\n        emit PriviledgeRevoked(_admin);\r\n\r\n        return true;\r\n    }\r\n\r\n    function isAdmin(address _who) external view returns (bool) {\r\n        return _priviledgeTable[_who];\r\n    }\r\n\r\n    //-----------\r\n    // internals\r\n    //-----------\r\n    function _addAdmin(address _admin) internal returns (bool) {\r\n        _priviledgeTable[_admin] = true;\r\n        emit PriviledgeGranted(_admin);\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IEmiERC20.sol\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface IEmiERC20 {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/interfaces/IEmiRouter.sol\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity >=0.6.2;\r\n\r\n\r\ninterface IEmiRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function getReserves(IERC20 token0, IERC20 token1)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 _reserve0,\r\n            uint256 _reserve1,\r\n            address poolAddresss\r\n        );\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address ref\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        address ref\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address[] calldata pathDAI\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address[] calldata pathDAI\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address[] calldata pathDAI\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address[] calldata pathDAI\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address[] calldata pathDAI\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external view returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external view returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address[] calldata pathDAI\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address[] calldata pathDAI\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address[] calldata pathDAI\r\n    ) external;\r\n}\r\n\r\n// File: contracts/interfaces/IEmiswap.sol\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ninterface IEmiswapRegistry {\r\n    function pools(IERC20 token1, IERC20 token2)\r\n        external\r\n        view\r\n        returns (IEmiswap);\r\n\r\n    function isPool(address addr) external view returns (bool);\r\n\r\n    function deploy(IERC20 tokenA, IERC20 tokenB) external returns (IEmiswap);\r\n    function getAllPools() external view returns (IEmiswap[] memory);\r\n}\r\n\r\ninterface IEmiswap {\r\n    function fee() external view returns (uint256);\r\n\r\n    function tokens(uint256 i) external view returns (IERC20);\r\n\r\n    function deposit(\r\n        uint256[] calldata amounts,\r\n        uint256[] calldata minAmounts,\r\n        address referral\r\n    ) external payable returns (uint256 fairSupply);\r\n\r\n    function withdraw(uint256 amount, uint256[] calldata minReturns) external;\r\n\r\n    function getBalanceForAddition(IERC20 token)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getBalanceForRemoval(IERC20 token) external view returns (uint256);\r\n\r\n    function getReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) external view returns (uint256, uint256);\r\n\r\n    function swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        address to,\r\n        address referral\r\n    ) external payable returns (uint256 returnAmount);\r\n\r\n    function initialize(IERC20[] calldata assets) external;\r\n}\r\n\r\n// File: contracts/interfaces/IOneSplit.sol\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ninterface IOneSplit {\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    )\r\n        external\r\n        view\r\n        returns (uint256 returnAmount, uint256[] memory distribution);\r\n}\r\n\r\n// File: contracts/EmiPrice2.sol\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.6.2;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract EmiPrice2 is Initializable, Priviledgeable {\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint256;\r\n    address[3] public market;\r\n    address public emiRouter;\r\n    address public uniRouter;\r\n    uint256 constant MARKET_OUR = 0;\r\n    uint256 constant MARKET_UNISWAP = 1;\r\n    uint256 constant MARKET_1INCH = 2;\r\n    uint256 constant MAX_PATH_LENGTH = 5;\r\n\r\n string public codeVersion = \"EmiPrice2 v1.0-200-g8d0b0fa\";\r\n\r\n    /**\r\n     * @dev Upgradeable proxy constructor replacement\r\n     */\r\n    function initialize(\r\n        address _market1,\r\n        address _market2,\r\n        address _market3,\r\n        address _emirouter,\r\n        address _unirouter\r\n    ) public initializer {\r\n        require(_market1 != address(0), \"Market1 address cannot be 0\");\r\n        require(_market2 != address(0), \"Market2 address cannot be 0\");\r\n        require(_market3 != address(0), \"Market3 address cannot be 0\");\r\n        require(_emirouter != address(0), \"EmiRouter address cannot be 0\");\r\n        require(_unirouter != address(0), \"UniRouter address cannot be 0\");\r\n\r\n        market[0] = _market1;\r\n        market[1] = _market2;\r\n        market[2] = _market3;\r\n        emiRouter = _emirouter;\r\n        uniRouter = _unirouter;\r\n        _addAdmin(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Return coin prices with 18-digit precision\r\n     * @param _coins Array of token addresses for price determination\r\n     * @param _basictokens Array of basic tokens to determine price against\r\n     * @param _market Market index [0..2] to get prices from\r\n     */\r\n    function getCoinPrices(\r\n        address[] calldata _coins,\r\n        address[] calldata _basictokens,\r\n        uint8 _market\r\n    ) external view returns (uint256[] memory prices) {\r\n        require(_market < market.length, \"Wrong market index\");\r\n        uint256[] memory _prices;\r\n\r\n        _prices = new uint256[](_coins.length);\r\n\r\n        if (_market == MARKET_UNISWAP) {\r\n            _getUniswapPrice(_coins, _basictokens[0], _prices);\r\n        } else if (_market == MARKET_OUR) {\r\n            _getOurPrice(_coins, _basictokens, _prices);\r\n        } else {\r\n            _get1inchPrice(_coins, _basictokens[0], _prices);\r\n        }\r\n\r\n        return _prices;\r\n    }\r\n\r\n    function calcRoute(address _target, address _base)\r\n        external\r\n        view\r\n        returns (address[] memory path)\r\n    {\r\n        return _calculateRoute(_target, _base);\r\n    }\r\n\r\n    /**\r\n     * @dev Changes market factory address\r\n     */\r\n    function changeMarket(uint8 idx, address _market) external onlyAdmin {\r\n        require(_market != address(0), \"Token address cannot be 0\");\r\n        require(idx < 3, \"Wrong market index\");\r\n\r\n        market[idx] = _market;\r\n    }\r\n\r\n    /**\r\n     * @dev Changes unirouter factory address\r\n     */\r\n    function changeUniRouter(address _router) external onlyAdmin {\r\n        require(_router != address(0), \"Router address cannot be 0\");\r\n\r\n        uniRouter = _router;\r\n    }\r\n\r\n    /**\r\n     * @dev Changes market factory address\r\n     */\r\n    function changeEmiRouter(address _router) external onlyAdmin {\r\n        require(_router != address(0), \"Router address cannot be 0\");\r\n\r\n        emiRouter = _router;\r\n    }\r\n\r\n    // internal methods\r\n    function _getUniswapPrice(\r\n        address[] memory _coins,\r\n        address _base,\r\n        uint256[] memory _prices\r\n    ) internal view {\r\n        uint256 base_decimal = IEmiERC20(_base).decimals();\r\n\r\n        for (uint256 i = 0; i < _coins.length; i++) {\r\n            uint256 target_decimal = IEmiERC20(_coins[i]).decimals();\r\n\r\n            if (_coins[i] == _base) {\r\n                _prices[i] = 10**18; // special case: 1 for base token\r\n                continue;\r\n            }\r\n\r\n            uint256 _in = 10**target_decimal;\r\n\r\n            address[] memory _path = new address[](2);\r\n            _path[0] = _coins[i];\r\n            _path[1] = _base;\r\n            uint256[] memory _amts =\r\n                IUniswapV2Router02(uniRouter).getAmountsOut(_in, _path);\r\n            if (_amts.length > 0) {\r\n                _prices[i] = _amts[_amts.length - 1].mul(\r\n                    10**(18 - base_decimal)\r\n                );\r\n            } else {\r\n                _prices[i] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get price from our router\r\n     */\r\n    function _getOurPrice(\r\n        address[] memory _coins,\r\n        address[] memory _base,\r\n        uint256[] memory _prices\r\n    ) internal view {\r\n        IEmiswapRegistry _factory = IEmiswapRegistry(market[MARKET_OUR]);\r\n        IEmiswap _p;\r\n\r\n        if (address(_factory) == address(0)) {\r\n            return;\r\n        }\r\n\r\n        for (uint256 i = 0; i < _coins.length; i++) {\r\n            // test each base token -- whether we can use it for price calc\r\n            uint256 target_decimal = IEmiERC20(_coins[i]).decimals();\r\n\r\n            for (uint256 m = 0; m < _base.length; m++) {\r\n                if (_coins[i] == _base[m]) {\r\n                    _prices[i] = 10**18; // special case: 1 for base token\r\n                    break;\r\n                }\r\n                uint256 base_decimal = IEmiERC20(_base[m]).decimals();\r\n\r\n                (address t0, address t1) =\r\n                    (_coins[i] < _base[m])\r\n                        ? (_coins[i], _base[m])\r\n                        : (_base[m], _coins[i]);\r\n                _p = IEmiswap(_factory.pools(IERC20(t0), IERC20(t1))); // do we have direct pair?\r\n                address[] memory _route;\r\n\r\n                if (address(_p) == address(0)) {\r\n                    // we have to calc route\r\n                    _route = _calculateRoute(_coins[i], _base[m]);\r\n                } else { // just take direct pair\r\n                    _route = new address[](2);\r\n                    _route[0] = _coins[i];\r\n                    _route[1] = _base[m];\r\n                }\r\n                if (_route.length == 0) {\r\n                    continue; // try next base token\r\n                } else {\r\n                    uint256 _in = 10**target_decimal;\r\n                    uint256[] memory _amts =\r\n                        IEmiRouter(emiRouter).getAmountsOut(_in, _route);\r\n                    if (_amts.length > 0) {\r\n                        _prices[i] = _amts[_amts.length - 1].mul(\r\n                            10**(18 - base_decimal)\r\n                        );\r\n                    } else {\r\n                        _prices[i] = 0;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get price from 1inch integrator\r\n     */\r\n    function _get1inchPrice(\r\n        address[] memory _coins,\r\n        address _base,\r\n        uint256[] memory _prices\r\n    ) internal view {\r\n        IOneSplit _factory = IOneSplit(market[MARKET_1INCH]);\r\n\r\n        if (address(_factory) == address(0)) {\r\n            return;\r\n        }\r\n        for (uint256 i = 0; i < _coins.length; i++) {\r\n            uint256 d = uint256(IEmiERC20(_coins[i]).decimals());\r\n            (_prices[i], ) = _factory.getExpectedReturn(\r\n                IERC20(_coins[i]),\r\n                IERC20(_base),\r\n                10**d,\r\n                1,\r\n                0\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates route from _target token to _base, using adapted Li algorithm\r\n     * https://ru.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC_%D0%9B%D0%B8\r\n     */\r\n    function _calculateRoute(address _target, address _base)\r\n        internal\r\n        view\r\n        returns (address[] memory path)\r\n    {\r\n        IEmiswap[] memory pools =\r\n            IEmiswapRegistry(market[MARKET_OUR]).getAllPools(); // gets all pairs\r\n        uint8[] memory pairIdx = new uint8[](pools.length); // vector for storing path step indexes\r\n\r\n        // Phase 1. Mark pairs starting from target token\r\n        _markPathStep(pools, pairIdx, 1, _target); // start from 1 step\r\n        address[] memory _curStep = new address[](pools.length);\r\n        _curStep[0] = _target; // store target address as first current step\r\n        address[] memory _prevStep = new address[](pools.length);\r\n\r\n        for (uint8 i = 2; i < MAX_PATH_LENGTH; i++) {\r\n            // pass the wave\r\n            _moveSteps(_prevStep, _curStep);\r\n\r\n            for (uint256 j = 0; j < pools.length; j++) {\r\n                if (pairIdx[j] == i - 1) {\r\n                    // found previous step, store second token\r\n                    address _a = _getAddressFromPrevStep(pools[j], _prevStep);\r\n                    _markPathStep(pools, pairIdx, i, _a);\r\n                    _addToCurrentStep(_curStep, _a);\r\n                }\r\n            }\r\n        }\r\n\r\n        // matrix marked -- start creating route from base token back to target\r\n        uint8 baseIdx = 0;\r\n\r\n        for (uint8 i = 0; i < pools.length; i++) {\r\n            if (\r\n                address(pools[i].tokens(1)) == _base ||\r\n                address(pools[i].tokens(0)) == _base\r\n            ) {\r\n                if (baseIdx == 0 || baseIdx > pairIdx[i]) {\r\n                    // look for shortest available path\r\n                    baseIdx = pairIdx[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        if (baseIdx == 0) {\r\n            // no route found\r\n            return new address[](0);\r\n        } else {\r\n            // get back to target from base\r\n            address _a = _base;\r\n\r\n            path = new address[](baseIdx + 1);\r\n            path[baseIdx] = _base;\r\n\r\n            for (uint8 i = baseIdx; i > 0; i--) {\r\n                // take pair from last level\r\n                for (uint256 j = 0; j < pools.length; j++) {\r\n                    if (\r\n                        pairIdx[j] == i &&\r\n                        (address(pools[j].tokens(1)) == _a ||\r\n                            address(pools[j].tokens(0)) == _a)\r\n                    ) {\r\n                        // push path chain\r\n                        _a = (address(pools[j].tokens(0)) == _a) // get next token from pair\r\n                            ? address(pools[j].tokens(1))\r\n                            : address(pools[j].tokens(0));\r\n                        path[i - 1] = _a;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return path;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Marks next path level from _token\r\n     */\r\n    function _markPathStep(\r\n        IEmiswap[] memory _pools,\r\n        uint8[] memory _idx,\r\n        uint8 lvl,\r\n        address _token\r\n    ) internal view {\r\n        for (uint256 j = 0; j < _pools.length; j++) {\r\n            if (\r\n                _idx[j] == 0 &&\r\n                (address(_pools[j].tokens(1)) == _token ||\r\n                    address(_pools[j].tokens(0)) == _token)\r\n            ) {\r\n                // found match\r\n                _idx[j] = lvl;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get address of the second token from previous level pair\r\n     */\r\n    function _getAddressFromPrevStep(IEmiswap pair, address[] memory prevStep)\r\n        internal\r\n        view\r\n        returns (address r)\r\n    {\r\n        for (uint256 i = 0; i < prevStep.length; i++) {\r\n            if (\r\n                prevStep[i] != address(0) &&\r\n                (address(pair.tokens(0)) == prevStep[i] ||\r\n                    address(pair.tokens(1)) == prevStep[i])\r\n            ) {\r\n                return\r\n                    (address(pair.tokens(0)) == prevStep[i])\r\n                        ? address(pair.tokens(1))\r\n                        : address(pair.tokens(0));\r\n            }\r\n        }\r\n        return address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Moves one array to another striping empty entries\r\n     */\r\n    function _moveSteps(address[] memory _to, address[] memory _from)\r\n        internal\r\n        pure\r\n    {\r\n        for (uint256 i = 0; i < _from.length; i++) {\r\n            _to[i] = _from[i];\r\n            _from[i] = address(0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Adds pairs second token address to current step array\r\n     * @param _step Array for storing current step addresses\r\n     * @param _token First token pair address\r\n     */\r\n    function _addToCurrentStep(address[] memory _step, address _token)\r\n        internal\r\n        pure\r\n    {\r\n        uint256 l = 0;\r\n\r\n        for (uint256 i = 0; i < _step.length; i++) {\r\n            if (_step[i] == _token) {\r\n                // token already exists in a list\r\n                return;\r\n            } else {\r\n                if (_step[i] == address(0)) {\r\n                    // first free cell found\r\n                    break;\r\n                } else {\r\n                    l++;\r\n                }\r\n            }\r\n        }\r\n        _step[l] = _token;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"PriviledgeGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"PriviledgeRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_base\",\"type\":\"address\"}],\"name\":\"calcRoute\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"changeEmiRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"idx\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"}],\"name\":\"changeMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"changeUniRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"codeVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emiRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_coins\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_basictokens\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"_market\",\"type\":\"uint8\"}],\"name\":\"getCoinPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_market2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_market3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_emirouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_unirouter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"market\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EmiPrice2","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://05cfa864d0120a0018d1bd5b796ce4f06963998affa13b567da6a35455a6cf42"}]}