{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\lib\\TransferHelper.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.3;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n// File: contracts\\interface\\INestMining.sol\r\n\r\n/// @dev This interface defines the mining methods for nest\r\ninterface INestMining {\r\n    \r\n    /// @dev Post event\r\n    /// @param tokenAddress The address of TOKEN contract\r\n    /// @param miner Address of miner\r\n    /// @param index Index of the price sheet\r\n    /// @param ethNum The numbers of ethers to post sheets\r\n    event Post(address tokenAddress, address miner, uint index, uint ethNum, uint price);\r\n\r\n    /* ========== Structures ========== */\r\n    \r\n    /// @dev Nest mining configuration structure\r\n    struct Config {\r\n        \r\n        // Eth number of each post. 30\r\n        // We can stop post and taking orders by set postEthUnit to 0 (closing and withdraw are not affected)\r\n        uint32 postEthUnit;\r\n\r\n        // Post fee(0.0001eth，DIMI_ETHER). 1000\r\n        uint16 postFeeUnit;\r\n\r\n        // Proportion of miners digging(10000 based). 8000\r\n        uint16 minerNestReward;\r\n        \r\n        // The proportion of token dug by miners is only valid for the token created in version 3.0\r\n        // (10000 based). 9500\r\n        uint16 minerNTokenReward;\r\n\r\n        // When the circulation of ntoken exceeds this threshold, post() is prohibited(Unit: 10000 ether). 500\r\n        uint32 doublePostThreshold;\r\n        \r\n        // The limit of ntoken mined blocks. 100\r\n        uint16 ntokenMinedBlockLimit;\r\n\r\n        // -- Public configuration\r\n        // The number of times the sheet assets have doubled. 4\r\n        uint8 maxBiteNestedLevel;\r\n        \r\n        // Price effective block interval. 20\r\n        uint16 priceEffectSpan;\r\n\r\n        // The amount of nest to pledge for each post（Unit: 1000). 100\r\n        uint16 pledgeNest;\r\n    }\r\n\r\n    /// @dev PriceSheetView structure\r\n    struct PriceSheetView {\r\n        \r\n        // Index of the price sheeet\r\n        uint32 index;\r\n\r\n        // Address of miner\r\n        address miner;\r\n\r\n        // The block number of this price sheet packaged\r\n        uint32 height;\r\n\r\n        // The remain number of this price sheet\r\n        uint32 remainNum;\r\n\r\n        // The eth number which miner will got\r\n        uint32 ethNumBal;\r\n\r\n        // The eth number which equivalent to token's value which miner will got\r\n        uint32 tokenNumBal;\r\n\r\n        // The pledged number of nest in this sheet. (Unit: 1000nest)\r\n        uint24 nestNum1k;\r\n\r\n        // The level of this sheet. 0 expresses initial price sheet, a value greater than 0 expresses bite price sheet\r\n        uint8 level;\r\n\r\n        // Post fee shares, if there are many sheets in one block, this value is used to divide up mining value\r\n        uint8 shares;\r\n\r\n        // The token price. (1eth equivalent to (price) token)\r\n        uint152 price;\r\n    }\r\n\r\n    /* ========== Configuration ========== */\r\n\r\n    /// @dev Modify configuration\r\n    /// @param config Configuration object\r\n    function setConfig(Config memory config) external;\r\n\r\n    /// @dev Get configuration\r\n    /// @return Configuration object\r\n    function getConfig() external view returns (Config memory);\r\n\r\n    /// @dev Set the ntokenAddress from tokenAddress, if ntokenAddress is equals to tokenAddress, means the token is disabled\r\n    /// @param tokenAddress Destination token address\r\n    /// @param ntokenAddress The ntoken address\r\n    function setNTokenAddress(address tokenAddress, address ntokenAddress) external;\r\n\r\n    /// @dev Get the ntokenAddress from tokenAddress, if ntokenAddress is equals to tokenAddress, means the token is disabled\r\n    /// @param tokenAddress Destination token address\r\n    /// @return The ntoken address\r\n    function getNTokenAddress(address tokenAddress) external view returns (address);\r\n\r\n    /* ========== Mining ========== */\r\n\r\n    /// @notice Post a price sheet for TOKEN\r\n    /// @dev It is for TOKEN (except USDT and NTOKENs) whose NTOKEN has a total supply below a threshold (e.g. 5,000,000 * 1e18)\r\n    /// @param tokenAddress The address of TOKEN contract\r\n    /// @param ethNum The numbers of ethers to post sheets\r\n    /// @param tokenAmountPerEth The price of TOKEN\r\n    function post(address tokenAddress, uint ethNum, uint tokenAmountPerEth) external payable;\r\n\r\n    /// @notice Post two price sheets for a token and its ntoken simultaneously \r\n    /// @dev Support dual-posts for TOKEN/NTOKEN, (ETH, TOKEN) + (ETH, NTOKEN)\r\n    /// @param tokenAddress The address of TOKEN contract\r\n    /// @param ethNum The numbers of ethers to post sheets\r\n    /// @param tokenAmountPerEth The price of TOKEN\r\n    /// @param ntokenAmountPerEth The price of NTOKEN\r\n    function post2(address tokenAddress, uint ethNum, uint tokenAmountPerEth, uint ntokenAmountPerEth) external payable;\r\n\r\n    /// @notice Call the function to buy TOKEN/NTOKEN from a posted price sheet\r\n    /// @dev bite TOKEN(NTOKEN) by ETH,  (+ethNumBal, -tokenNumBal)\r\n    /// @param tokenAddress The address of token(ntoken)\r\n    /// @param index The position of the sheet in priceSheetList[token]\r\n    /// @param takeNum The amount of biting (in the unit of ETH), realAmount = takeNum * newTokenAmountPerEth\r\n    /// @param newTokenAmountPerEth The new price of token (1 ETH : some TOKEN), here some means newTokenAmountPerEth\r\n    function takeToken(address tokenAddress, uint index, uint takeNum, uint newTokenAmountPerEth) external payable;\r\n\r\n    /// @notice Call the function to buy ETH from a posted price sheet\r\n    /// @dev bite ETH by TOKEN(NTOKEN),  (-ethNumBal, +tokenNumBal)\r\n    /// @param tokenAddress The address of token(ntoken)\r\n    /// @param index The position of the sheet in priceSheetList[token]\r\n    /// @param takeNum The amount of biting (in the unit of ETH), realAmount = takeNum\r\n    /// @param newTokenAmountPerEth The new price of token (1 ETH : some TOKEN), here some means newTokenAmountPerEth\r\n    function takeEth(address tokenAddress, uint index, uint takeNum, uint newTokenAmountPerEth) external payable;\r\n    \r\n    /// @notice Close a price sheet of (ETH, USDx) | (ETH, NEST) | (ETH, TOKEN) | (ETH, NTOKEN)\r\n    /// @dev Here we allow an empty price sheet (still in VERIFICATION-PERIOD) to be closed \r\n    /// @param tokenAddress The address of TOKEN contract\r\n    /// @param index The index of the price sheet w.r.t. `token`\r\n    function close(address tokenAddress, uint index) external;\r\n\r\n    /// @notice Close a batch of price sheets passed VERIFICATION-PHASE\r\n    /// @dev Empty sheets but in VERIFICATION-PHASE aren't allowed\r\n    /// @param tokenAddress The address of TOKEN contract\r\n    /// @param indices A list of indices of sheets w.r.t. `token`\r\n    function closeList(address tokenAddress, uint[] memory indices) external;\r\n\r\n    /// @notice Close two batch of price sheets passed VERIFICATION-PHASE\r\n    /// @dev Empty sheets but in VERIFICATION-PHASE aren't allowed\r\n    /// @param tokenAddress The address of TOKEN1 contract\r\n    /// @param tokenIndices A list of indices of sheets w.r.t. `token`\r\n    /// @param ntokenIndices A list of indices of sheets w.r.t. `ntoken`\r\n    function closeList2(address tokenAddress, uint[] memory tokenIndices, uint[] memory ntokenIndices) external;\r\n\r\n    /// @dev The function updates the statistics of price sheets\r\n    ///     It calculates from priceInfo to the newest that is effective.\r\n    function stat(address tokenAddress) external;\r\n\r\n    /// @dev Settlement Commission\r\n    /// @param tokenAddress The token address\r\n    function settle(address tokenAddress) external;\r\n\r\n    /// @dev List sheets by page\r\n    /// @param tokenAddress Destination token address\r\n    /// @param offset Skip previous (offset) records\r\n    /// @param count Return (count) records\r\n    /// @param order Order. 0 reverse order, non-0 positive order\r\n    /// @return List of price sheets\r\n    function list(address tokenAddress, uint offset, uint count, uint order) external view returns (PriceSheetView[] memory);\r\n\r\n    /// @dev Estimated mining amount\r\n    /// @param tokenAddress Destination token address\r\n    /// @return Estimated mining amount\r\n    function estimate(address tokenAddress) external view returns (uint);\r\n\r\n    /// @dev Query the quantity of the target quotation\r\n    /// @param tokenAddress Token address. The token can't mine. Please make sure you don't use the token address when calling\r\n    /// @param index The index of the sheet\r\n    /// @return minedBlocks Mined block period from previous block\r\n    /// @return totalShares Total shares of sheets in the block\r\n    function getMinedBlocks(address tokenAddress, uint index) external view returns (uint minedBlocks, uint totalShares);\r\n\r\n    /* ========== Accounts ========== */\r\n\r\n    /// @dev Withdraw assets\r\n    /// @param tokenAddress Destination token address\r\n    /// @param value The value to withdraw\r\n    function withdraw(address tokenAddress, uint value) external;\r\n\r\n    /// @dev View the number of assets specified by the user\r\n    /// @param tokenAddress Destination token address\r\n    /// @param addr Destination address\r\n    /// @return Number of assets\r\n    function balanceOf(address tokenAddress, address addr) external view returns (uint);\r\n\r\n    /// @dev Gets the address corresponding to the given index number\r\n    /// @param index The index number of the specified address\r\n    /// @return The address corresponding to the given index number\r\n    function indexAddress(uint index) external view returns (address);\r\n    \r\n    /// @dev Gets the registration index number of the specified address\r\n    /// @param addr Destination address\r\n    /// @return 0 means nonexistent, non-0 means index number\r\n    function getAccountIndex(address addr) external view returns (uint);\r\n\r\n    /// @dev Get the length of registered account array\r\n    /// @return The length of registered account array\r\n    function getAccountCount() external view returns (uint);\r\n}\r\n\r\n// File: contracts\\interface\\INestQuery.sol\r\n\r\n/// @dev This interface defines the methods for price query\r\ninterface INestQuery {\r\n    \r\n    /// @dev Get the latest trigger price\r\n    /// @param tokenAddress Destination token address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    function triggeredPrice(address tokenAddress) external view returns (uint blockNumber, uint price);\r\n\r\n    /// @dev Get the full information of latest trigger price\r\n    /// @param tokenAddress Destination token address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    /// @return avgPrice Average price\r\n    /// @return sigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \r\n    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\r\n    ///         it means that the volatility has exceeded the range that can be expressed\r\n    function triggeredPriceInfo(address tokenAddress) external view returns (\r\n        uint blockNumber,\r\n        uint price,\r\n        uint avgPrice,\r\n        uint sigmaSQ\r\n    );\r\n\r\n    /// @dev Find the price at block number\r\n    /// @param tokenAddress Destination token address\r\n    /// @param height Destination block number\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    function findPrice(\r\n        address tokenAddress,\r\n        uint height\r\n    ) external view returns (uint blockNumber, uint price);\r\n\r\n    /// @dev Get the latest effective price\r\n    /// @param tokenAddress Destination token address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    function latestPrice(address tokenAddress) external view returns (uint blockNumber, uint price);\r\n\r\n    /// @dev Get the last (num) effective price\r\n    /// @param tokenAddress Destination token address\r\n    /// @param count The number of prices that want to return\r\n    /// @return An array which length is num * 2, each two element expresses one price like blockNumber｜price\r\n    function lastPriceList(address tokenAddress, uint count) external view returns (uint[] memory);\r\n\r\n    /// @dev Returns the results of latestPrice() and triggeredPriceInfo()\r\n    /// @param tokenAddress Destination token address\r\n    /// @return latestPriceBlockNumber The block number of latest price\r\n    /// @return latestPriceValue The token latest price. (1eth equivalent to (price) token)\r\n    /// @return triggeredPriceBlockNumber The block number of triggered price\r\n    /// @return triggeredPriceValue The token triggered price. (1eth equivalent to (price) token)\r\n    /// @return triggeredAvgPrice Average price\r\n    /// @return triggeredSigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \r\n    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\r\n    ///         it means that the volatility has exceeded the range that can be expressed\r\n    function latestPriceAndTriggeredPriceInfo(address tokenAddress) external view \r\n    returns (\r\n        uint latestPriceBlockNumber,\r\n        uint latestPriceValue,\r\n        uint triggeredPriceBlockNumber,\r\n        uint triggeredPriceValue,\r\n        uint triggeredAvgPrice,\r\n        uint triggeredSigmaSQ\r\n    );\r\n\r\n    /// @dev Get the latest trigger price. (token and ntoken)\r\n    /// @param tokenAddress Destination token address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    /// @return ntokenBlockNumber The block number of ntoken price\r\n    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\r\n    function triggeredPrice2(address tokenAddress) external view returns (\r\n        uint blockNumber,\r\n        uint price,\r\n        uint ntokenBlockNumber,\r\n        uint ntokenPrice\r\n    );\r\n\r\n    /// @dev Get the full information of latest trigger price. (token and ntoken)\r\n    /// @param tokenAddress Destination token address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    /// @return avgPrice Average price\r\n    /// @return sigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \r\n    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447, \r\n    ///         it means that the volatility has exceeded the range that can be expressed\r\n    /// @return ntokenBlockNumber The block number of ntoken price\r\n    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\r\n    /// @return ntokenAvgPrice Average price of ntoken\r\n    /// @return ntokenSigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that\r\n    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\r\n    ///         it means that the volatility has exceeded the range that can be expressed\r\n    function triggeredPriceInfo2(address tokenAddress) external view returns (\r\n        uint blockNumber,\r\n        uint price,\r\n        uint avgPrice,\r\n        uint sigmaSQ,\r\n        uint ntokenBlockNumber,\r\n        uint ntokenPrice,\r\n        uint ntokenAvgPrice,\r\n        uint ntokenSigmaSQ\r\n    );\r\n\r\n    /// @dev Get the latest effective price. (token and ntoken)\r\n    /// @param tokenAddress Destination token address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    /// @return ntokenBlockNumber The block number of ntoken price\r\n    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\r\n    function latestPrice2(address tokenAddress) external view returns (\r\n        uint blockNumber,\r\n        uint price,\r\n        uint ntokenBlockNumber,\r\n        uint ntokenPrice\r\n    );\r\n}\r\n\r\n// File: contracts\\interface\\INTokenController.sol\r\n\r\n///@dev This interface defines the methods for ntoken management\r\ninterface INTokenController {\r\n    \r\n    /// @notice when the auction of a token gets started\r\n    /// @param tokenAddress The address of the (ERC20) token\r\n    /// @param ntokenAddress The address of the ntoken w.r.t. token for incentives\r\n    /// @param owner The address of miner who opened the oracle\r\n    event NTokenOpened(address tokenAddress, address ntokenAddress, address owner);\r\n    \r\n    /// @notice ntoken disable event\r\n    /// @param tokenAddress token address\r\n    event NTokenDisabled(address tokenAddress);\r\n    \r\n    /// @notice ntoken enable event\r\n    /// @param tokenAddress token address\r\n    event NTokenEnabled(address tokenAddress);\r\n\r\n    /// @dev ntoken configuration structure\r\n    struct Config {\r\n\r\n        // The number of nest needed to pay for opening ntoken. 10000 ether\r\n        uint96 openFeeNestAmount;\r\n\r\n        // ntoken management is enabled. 0: not enabled, 1: enabled\r\n        uint8 state;\r\n    }\r\n\r\n    /// @dev A struct for an ntoken\r\n    struct NTokenTag {\r\n\r\n        // ntoken address\r\n        address ntokenAddress;\r\n\r\n        // How much nest has paid for open this ntoken\r\n        uint96 nestFee;\r\n    \r\n        // token address\r\n        address tokenAddress;\r\n\r\n        // Index for this ntoken\r\n        uint40 index;\r\n\r\n        // Create time\r\n        uint48 startTime;\r\n\r\n        // State of this ntoken. 0: disabled; 1 normal\r\n        uint8 state;\r\n    }\r\n\r\n    /* ========== Governance ========== */\r\n\r\n    /// @dev Modify configuration\r\n    /// @param config Configuration object\r\n    function setConfig(Config memory config) external;\r\n\r\n    /// @dev Get configuration\r\n    /// @return Configuration object\r\n    function getConfig() external view returns (Config memory);\r\n\r\n    /// @dev Set the token mapping\r\n    /// @param tokenAddress Destination token address\r\n    /// @param ntokenAddress Destination ntoken address\r\n    /// @param state status for this map\r\n    function setNTokenMapping(address tokenAddress, address ntokenAddress, uint state) external;\r\n\r\n    /// @dev Get token address from ntoken address\r\n    /// @param ntokenAddress Destination ntoken address\r\n    /// @return token address\r\n    function getTokenAddress(address ntokenAddress) external view returns (address);\r\n\r\n    /// @dev Get ntoken address from token address\r\n    /// @param tokenAddress Destination token address\r\n    /// @return ntoken address\r\n    function getNTokenAddress(address tokenAddress) external view returns (address);\r\n\r\n    /* ========== ntoken management ========== */\r\n    \r\n    /// @dev Bad tokens should be banned \r\n    function disable(address tokenAddress) external;\r\n\r\n    /// @dev enable ntoken\r\n    function enable(address tokenAddress) external;\r\n\r\n    /// @notice Open a NToken for a token by anyone (contracts aren't allowed)\r\n    /// @dev Create and map the (Token, NToken) pair in NestPool\r\n    /// @param tokenAddress The address of token contract\r\n    function open(address tokenAddress) external;\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    /// @dev Get ntoken information\r\n    /// @param tokenAddress Destination token address\r\n    /// @return ntoken information\r\n    function getNTokenTag(address tokenAddress) external view returns (NTokenTag memory);\r\n\r\n    /// @dev Get opened ntoken count\r\n    /// @return ntoken count\r\n    function getNTokenCount() external view returns (uint);\r\n\r\n    /// @dev List ntoken information by page\r\n    /// @param offset Skip previous (offset) records\r\n    /// @param count Return (count) records\r\n    /// @param order Order. 0 reverse order, non-0 positive order\r\n    /// @return ntoken information by page\r\n    function list(uint offset, uint count, uint order) external view returns (NTokenTag[] memory);\r\n}\r\n\r\n// File: contracts\\interface\\INestLedger.sol\r\n\r\n/// @dev This interface defines the nest ledger methods\r\ninterface INestLedger {\r\n\r\n    /// @dev Application Flag Changed event\r\n    /// @param addr DAO application contract address\r\n    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    event ApplicationChanged(address addr, uint flag);\r\n    \r\n    /// @dev Configuration structure of nest ledger contract\r\n    struct Config {\r\n        \r\n        // nest reward scale(10000 based). 2000\r\n        uint16 nestRewardScale;\r\n\r\n        // // ntoken reward scale(10000 based). 8000\r\n        // uint16 ntokenRewardScale;\r\n    }\r\n    \r\n    /// @dev Modify configuration\r\n    /// @param config Configuration object\r\n    function setConfig(Config memory config) external;\r\n\r\n    /// @dev Get configuration\r\n    /// @return Configuration object\r\n    function getConfig() external view returns (Config memory);\r\n\r\n    /// @dev Set DAO application\r\n    /// @param addr DAO application contract address\r\n    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    function setApplication(address addr, uint flag) external;\r\n\r\n    /// @dev Check DAO application flag\r\n    /// @param addr DAO application contract address\r\n    /// @return Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    function checkApplication(address addr) external view returns (uint);\r\n\r\n    /// @dev Carve reward\r\n    /// @param ntokenAddress Destination ntoken address\r\n    function carveETHReward(address ntokenAddress) external payable;\r\n\r\n    /// @dev Add reward\r\n    /// @param ntokenAddress Destination ntoken address\r\n    function addETHReward(address ntokenAddress) external payable;\r\n\r\n    /// @dev The function returns eth rewards of specified ntoken\r\n    /// @param ntokenAddress The ntoken address\r\n    function totalETHRewards(address ntokenAddress) external view returns (uint);\r\n\r\n    /// @dev Pay\r\n    /// @param ntokenAddress Destination ntoken address. Indicates which ntoken to pay with\r\n    /// @param tokenAddress Token address of receiving funds (0 means ETH)\r\n    /// @param to Address to receive\r\n    /// @param value Amount to receive\r\n    function pay(address ntokenAddress, address tokenAddress, address to, uint value) external;\r\n\r\n    /// @dev Settlement\r\n    /// @param ntokenAddress Destination ntoken address. Indicates which ntoken to settle with\r\n    /// @param tokenAddress Token address of receiving funds (0 means ETH)\r\n    /// @param to Address to receive\r\n    /// @param value Amount to receive\r\n    function settle(address ntokenAddress, address tokenAddress, address to, uint value) external payable;\r\n}\r\n\r\n// File: contracts\\interface\\INToken.sol\r\n\r\n/// @dev ntoken interface\r\ninterface INToken {\r\n        \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /// @dev Mint \r\n    /// @param value The amount of NToken to add\r\n    function increaseTotal(uint256 value) external;\r\n\r\n    /// @notice The view of variables about minting \r\n    /// @dev The naming follows Nestv3.0\r\n    /// @return createBlock The block number where the contract was created\r\n    /// @return recentlyUsedBlock The block number where the last minting went\r\n    function checkBlockInfo() external view returns(uint256 createBlock, uint256 recentlyUsedBlock);\r\n\r\n    /// @dev The ABI keeps unchanged with old NTokens, so as to support token-and-ntoken-mining\r\n    /// @return The address of bidder\r\n    function checkBidder() external view returns(address);\r\n    \r\n    /// @notice The view of totalSupply\r\n    /// @return The total supply of ntoken\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /// @dev The view of balances\r\n    /// @param owner The address of an account\r\n    /// @return The balance of the account\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256); \r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: contracts\\interface\\INestMapping.sol\r\n\r\n/// @dev The interface defines methods for nest builtin contract address mapping\r\ninterface INestMapping {\r\n\r\n    /// @dev Set the built-in contract address of the system\r\n    /// @param nestTokenAddress Address of nest token contract\r\n    /// @param nestNodeAddress Address of nest node contract\r\n    /// @param nestLedgerAddress INestLedger implementation contract address\r\n    /// @param nestMiningAddress INestMining implementation contract address for nest\r\n    /// @param ntokenMiningAddress INestMining implementation contract address for ntoken\r\n    /// @param nestPriceFacadeAddress INestPriceFacade implementation contract address\r\n    /// @param nestVoteAddress INestVote implementation contract address\r\n    /// @param nestQueryAddress INestQuery implementation contract address\r\n    /// @param nnIncomeAddress NNIncome contract address\r\n    /// @param nTokenControllerAddress INTokenController implementation contract address\r\n    function setBuiltinAddress(\r\n        address nestTokenAddress,\r\n        address nestNodeAddress,\r\n        address nestLedgerAddress,\r\n        address nestMiningAddress,\r\n        address ntokenMiningAddress,\r\n        address nestPriceFacadeAddress,\r\n        address nestVoteAddress,\r\n        address nestQueryAddress,\r\n        address nnIncomeAddress,\r\n        address nTokenControllerAddress\r\n    ) external;\r\n\r\n    /// @dev Get the built-in contract address of the system\r\n    /// @return nestTokenAddress Address of nest token contract\r\n    /// @return nestNodeAddress Address of nest node contract\r\n    /// @return nestLedgerAddress INestLedger implementation contract address\r\n    /// @return nestMiningAddress INestMining implementation contract address for nest\r\n    /// @return ntokenMiningAddress INestMining implementation contract address for ntoken\r\n    /// @return nestPriceFacadeAddress INestPriceFacade implementation contract address\r\n    /// @return nestVoteAddress INestVote implementation contract address\r\n    /// @return nestQueryAddress INestQuery implementation contract address\r\n    /// @return nnIncomeAddress NNIncome contract address\r\n    /// @return nTokenControllerAddress INTokenController implementation contract address\r\n    function getBuiltinAddress() external view returns (\r\n        address nestTokenAddress,\r\n        address nestNodeAddress,\r\n        address nestLedgerAddress,\r\n        address nestMiningAddress,\r\n        address ntokenMiningAddress,\r\n        address nestPriceFacadeAddress,\r\n        address nestVoteAddress,\r\n        address nestQueryAddress,\r\n        address nnIncomeAddress,\r\n        address nTokenControllerAddress\r\n    );\r\n\r\n    /// @dev Get address of nest token contract\r\n    /// @return Address of nest token contract\r\n    function getNestTokenAddress() external view returns (address);\r\n\r\n    /// @dev Get address of nest node contract\r\n    /// @return Address of nest node contract\r\n    function getNestNodeAddress() external view returns (address);\r\n\r\n    /// @dev Get INestLedger implementation contract address\r\n    /// @return INestLedger implementation contract address\r\n    function getNestLedgerAddress() external view returns (address);\r\n\r\n    /// @dev Get INestMining implementation contract address for nest\r\n    /// @return INestMining implementation contract address for nest\r\n    function getNestMiningAddress() external view returns (address);\r\n\r\n    /// @dev Get INestMining implementation contract address for ntoken\r\n    /// @return INestMining implementation contract address for ntoken\r\n    function getNTokenMiningAddress() external view returns (address);\r\n\r\n    /// @dev Get INestPriceFacade implementation contract address\r\n    /// @return INestPriceFacade implementation contract address\r\n    function getNestPriceFacadeAddress() external view returns (address);\r\n\r\n    /// @dev Get INestVote implementation contract address\r\n    /// @return INestVote implementation contract address\r\n    function getNestVoteAddress() external view returns (address);\r\n\r\n    /// @dev Get INestQuery implementation contract address\r\n    /// @return INestQuery implementation contract address\r\n    function getNestQueryAddress() external view returns (address);\r\n\r\n    /// @dev Get NNIncome contract address\r\n    /// @return NNIncome contract address\r\n    function getNnIncomeAddress() external view returns (address);\r\n\r\n    /// @dev Get INTokenController implementation contract address\r\n    /// @return INTokenController implementation contract address\r\n    function getNTokenControllerAddress() external view returns (address);\r\n\r\n    /// @dev Registered address. The address registered here is the address accepted by nest system\r\n    /// @param key The key\r\n    /// @param addr Destination address. 0 means to delete the registration information\r\n    function registerAddress(string memory key, address addr) external;\r\n\r\n    /// @dev Get registered address\r\n    /// @param key The key\r\n    /// @return Destination address. 0 means empty\r\n    function checkAddress(string memory key) external view returns (address);\r\n}\r\n\r\n// File: contracts\\interface\\INestGovernance.sol\r\n\r\n/// @dev This interface defines the governance methods\r\ninterface INestGovernance is INestMapping {\r\n\r\n    /// @dev Set governance authority\r\n    /// @param addr Destination address\r\n    /// @param flag Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function setGovernance(address addr, uint flag) external;\r\n\r\n    /// @dev Get governance rights\r\n    /// @param addr Destination address\r\n    /// @return Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function getGovernance(address addr) external view returns (uint);\r\n\r\n    /// @dev Check whether the target address has governance rights for the given target\r\n    /// @param addr Destination address\r\n    /// @param flag Permission weight. The permission of the target address must be greater than this weight to pass the check\r\n    /// @return True indicates permission\r\n    function checkGovernance(address addr, uint flag) external view returns (bool);\r\n}\r\n\r\n// File: contracts\\NestBase.sol\r\n\r\n/// @dev Base contract of nest\r\ncontract NestBase {\r\n\r\n    // Address of nest token contract\r\n    address constant NEST_TOKEN_ADDRESS = 0x04abEdA201850aC0124161F037Efd70c74ddC74C;\r\n\r\n    // Genesis block number of nest\r\n    // NEST token contract is created at block height 6913517. However, because the mining algorithm of nest1.0\r\n    // is different from that at present, a new mining algorithm is adopted from nest2.0. The new algorithm\r\n    // includes the attenuation logic according to the block. Therefore, it is necessary to trace the block\r\n    // where the nest begins to decay. According to the circulation when nest2.0 is online, the new mining\r\n    // algorithm is used to deduce and convert the nest, and the new algorithm is used to mine the nest2.0\r\n    // on-line flow, the actual block is 5120000\r\n    uint constant NEST_GENESIS_BLOCK = 5120000;\r\n\r\n    /// @dev To support open-zeppelin/upgrades\r\n    /// @param nestGovernanceAddress INestGovernance implementation contract address\r\n    function initialize(address nestGovernanceAddress) virtual public {\r\n        require(_governance == address(0), 'NEST:!initialize');\r\n        _governance = nestGovernanceAddress;\r\n    }\r\n\r\n    /// @dev INestGovernance implementation contract address\r\n    address public _governance;\r\n\r\n    /// @dev Rewritten in the implementation contract, for load other contract addresses. Call \r\n    ///      super.update(nestGovernanceAddress) when overriding, and override method without onlyGovernance\r\n    /// @param nestGovernanceAddress INestGovernance implementation contract address\r\n    function update(address nestGovernanceAddress) virtual public {\r\n\r\n        address governance = _governance;\r\n        require(governance == msg.sender || INestGovernance(governance).checkGovernance(msg.sender, 0), \"NEST:!gov\");\r\n        _governance = nestGovernanceAddress;\r\n    }\r\n\r\n    /// @dev Migrate funds from current contract to NestLedger\r\n    /// @param tokenAddress Destination token address.(0 means eth)\r\n    /// @param value Migrate amount\r\n    function migrate(address tokenAddress, uint value) external onlyGovernance {\r\n\r\n        address to = INestGovernance(_governance).getNestLedgerAddress();\r\n        if (tokenAddress == address(0)) {\r\n            INestLedger(to).addETHReward { value: value } (address(0));\r\n        } else {\r\n            TransferHelper.safeTransfer(tokenAddress, to, value);\r\n        }\r\n    }\r\n\r\n    //---------modifier------------\r\n\r\n    modifier onlyGovernance() {\r\n        require(INestGovernance(_governance).checkGovernance(msg.sender, 0), \"NEST:!gov\");\r\n        _;\r\n    }\r\n\r\n    modifier noContract() {\r\n        require(msg.sender == tx.origin, \"NEST:!contract\");\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts\\NestMining.sol\r\n\r\n/// @dev This contract implemented the mining logic of nest\r\ncontract NestMining is NestBase, INestMining, INestQuery {\r\n\r\n    // /// @param nestTokenAddress Address of nest token contract\r\n    // /// @param nestGenesisBlock Genesis block number of nest\r\n    // constructor(address nestTokenAddress, uint nestGenesisBlock) {\r\n        \r\n    //     NEST_TOKEN_ADDRESS = nestTokenAddress;\r\n    //     NEST_GENESIS_BLOCK = nestGenesisBlock;\r\n\r\n    //     // Placeholder in _accounts, the index of a real account must greater than 0\r\n    //     _accounts.push();\r\n    // }\r\n\r\n    /// @dev To support open-zeppelin/upgrades\r\n    /// @param nestGovernanceAddress INestGovernance implementation contract address\r\n    function initialize(address nestGovernanceAddress) override public {\r\n        super.initialize(nestGovernanceAddress);\r\n        // Placeholder in _accounts, the index of a real account must greater than 0\r\n        _accounts.push();\r\n    }\r\n\r\n    ///@dev Definitions for the price sheet, include the full information. (use 256-bits, a storage unit in ethereum evm)\r\n    struct PriceSheet {\r\n        \r\n        // Index of miner account in _accounts. for this way, mapping an address(which need 160-bits) to a 32-bits \r\n        // integer, support 4 billion accounts\r\n        uint32 miner;\r\n\r\n        // The block number of this price sheet packaged\r\n        uint32 height;\r\n\r\n        // The remain number of this price sheet\r\n        uint32 remainNum;\r\n\r\n        // The eth number which miner will got\r\n        uint32 ethNumBal;\r\n\r\n        // The eth number which equivalent to token's value which miner will got\r\n        uint32 tokenNumBal;\r\n\r\n        // The pledged number of nest in this sheet. (Unit: 1000nest)\r\n        uint24 nestNum1k;\r\n\r\n        // The level of this sheet. 0 expresses initial price sheet, a value greater than 0 expresses bite price sheet\r\n        uint8 level;\r\n\r\n        // Post fee shares, if there are many sheets in one block, this value is used to divide up mining value\r\n        uint8 shares;\r\n\r\n        // Represent price as this way, may lose precision, the error less than 1/10^14\r\n        // price = priceFraction * 16 ^ priceExponent\r\n        uint56 priceFloat;\r\n    }\r\n\r\n    /// @dev Definitions for the price information\r\n    struct PriceInfo {\r\n\r\n        // Record the index of price sheet, for update price information from price sheet next time.\r\n        uint32 index;\r\n\r\n        // The block number of this price\r\n        uint32 height;\r\n\r\n        // The remain number of this price sheet\r\n        uint32 remainNum;\r\n\r\n        // Price, represent as float\r\n        // Represent price as this way, may lose precision, the error less than 1/10^14\r\n        uint56 priceFloat;\r\n\r\n        // Avg Price, represent as float\r\n        // Represent price as this way, may lose precision, the error less than 1/10^14\r\n        uint56 avgFloat;\r\n\r\n        // Square of price volatility, need divide by 2^48\r\n        uint48 sigmaSQ;\r\n    }\r\n\r\n    /// @dev Price channel\r\n    struct PriceChannel {\r\n\r\n        // Array of price sheets\r\n        PriceSheet[] sheets;\r\n\r\n        // Price information\r\n        PriceInfo price;\r\n\r\n        // Commission is charged for every post(post2), the commission should be deposited to NestLedger,\r\n        // for saving gas, according to sheets.length, every increase of 256 will deposit once, The calculation formula is:\r\n        // \r\n        // totalFee = fee * increment\r\n        // \r\n        // In consideration of takeToken, takeEth, change postFeeUnit or miner pay more fee, the formula will be invalid,\r\n        // at this point, it is need to settle immediately, the details of triggering settlement logic are as follows\r\n        // \r\n        // 1. When there is a bite transaction(currentFee is 0), the counter of no fee sheets will be increase 1\r\n        // 2. If the Commission of this time is inconsistent with that of last time, deposit immediately\r\n        // 3. When the increment of sheets.length is 256, deposit immediately\r\n        // 4. Everyone can trigger immediate settlement by manually calling the settle() method\r\n        // \r\n        // In order to realize the logic above, the following values are defined\r\n        // \r\n        // 1. PriceChannel.feeInfo\r\n        //    Low 128-bits represent last fee per post\r\n        //    High 128-bits represent the current counter of no fee sheets (including settled)\r\n        // \r\n        // 2. COLLECT_REWARD_MASK\r\n        //    The mask of batch deposit trigger, while COLLECT_REWARD_MASK & sheets.length == COLLECT_REWARD_MASK, it will trigger deposit,\r\n        //    COLLECT_REWARD_MASK is set to 0xF for testing (means every 16 sheets will deposit once), \r\n        //    and it will be set to 0xFF for mainnet (means every 256 sheets will deposit once)\r\n\r\n        // The information of mining fee\r\n        // Low 128-bits represent fee per post\r\n        // High 128-bits represent the current counter of no fee sheets (including settled)\r\n        uint feeInfo;\r\n    }\r\n\r\n    /// @dev Structure is used to represent a storage location. Storage variable can be used to avoid indexing from mapping many times\r\n    struct UINT {\r\n        uint value;\r\n    }\r\n\r\n    /// @dev Account information\r\n    struct Account {\r\n        \r\n        // Address of account\r\n        address addr;\r\n\r\n        // Balances of mining account\r\n        // tokenAddress=>balance\r\n        mapping(address=>UINT) balances;\r\n    }\r\n\r\n    // Configuration\r\n    Config _config;\r\n\r\n    // Registered account information\r\n    Account[] _accounts;\r\n\r\n    // Mapping from address to index of account. address=>accountIndex\r\n    mapping(address=>uint) _accountMapping;\r\n\r\n    // Mapping from token address to price channel. tokenAddress=>PriceChannel\r\n    mapping(address=>PriceChannel) _channels;\r\n\r\n    // Mapping from token address to ntoken address. tokenAddress=>ntokenAddress\r\n    mapping(address=>address) _addressCache;\r\n\r\n    // Cache for genesis block number of ntoken. ntokenAddress=>genesisBlockNumber\r\n    mapping(address=>uint) _genesisBlockNumberCache;\r\n\r\n    // INestPriceFacade implementation contract address\r\n    address _nestPriceFacadeAddress;\r\n\r\n    // INTokenController implementation contract address\r\n    address _nTokenControllerAddress;\r\n\r\n    // INestLegder implementation contract address\r\n    address _nestLedgerAddress;\r\n\r\n    // Unit of post fee. 0.0001 ether\r\n    uint constant DIMI_ETHER = 0.0001 ether;\r\n\r\n    // The mask of batch deposit trigger, while COLLECT_REWARD_MASK & sheets.length == COLLECT_REWARD_MASK, it will trigger deposit,\r\n    // COLLECT_REWARD_MASK is set to 0xF for testing (means every 16 sheets will deposit once), \r\n    // and it will be set to 0xFF for mainnet (means every 256 sheets will deposit once)\r\n    uint constant COLLECT_REWARD_MASK = 0xFF;\r\n\r\n    // Ethereum average block time interval, 14 seconds\r\n    uint constant ETHEREUM_BLOCK_TIMESPAN = 14;\r\n\r\n    /* ========== Governance ========== */\r\n\r\n    /// @dev Rewritten in the implementation contract, for load other contract addresses. Call\r\n    ///      super.update(nestGovernanceAddress) when overriding, and override method without onlyGovernance\r\n    /// @param nestGovernanceAddress INestGovernance implementation contract address\r\n    function update(address nestGovernanceAddress) override public {\r\n        \r\n        super.update(nestGovernanceAddress);\r\n        (\r\n            //address nestTokenAddress\r\n            ,\r\n            //address nestNodeAddress\r\n            ,\r\n            //address nestLedgerAddress\r\n            _nestLedgerAddress,   \r\n            //address nestMiningAddress\r\n            ,\r\n            //address ntokenMiningAddress\r\n            ,\r\n            //address nestPriceFacadeAddress\r\n            _nestPriceFacadeAddress, \r\n            //address nestVoteAddress\r\n            , \r\n            //address nestQueryAddress\r\n            , \r\n            //address nnIncomeAddress\r\n            , \r\n            //address nTokenControllerAddress\r\n            _nTokenControllerAddress  \r\n\r\n        ) = INestGovernance(nestGovernanceAddress).getBuiltinAddress();\r\n    }\r\n\r\n    /// @dev Modify configuration\r\n    /// @param config Configuration object\r\n    function setConfig(Config memory config) override external onlyGovernance {\r\n        _config = config;\r\n    }\r\n\r\n    /// @dev Get configuration\r\n    /// @return Configuration object\r\n    function getConfig() override external view returns (Config memory) {\r\n        return _config;\r\n    }\r\n\r\n    /// @dev Clear chache of token. while ntoken recreated, this method is need to call\r\n    /// @param tokenAddress Token address\r\n    function resetNTokenCache(address tokenAddress) external onlyGovernance {\r\n\r\n        // Clear cache\r\n        address ntokenAddress = _getNTokenAddress(tokenAddress);\r\n        _genesisBlockNumberCache[ntokenAddress] = 0;\r\n        _addressCache[tokenAddress] = _addressCache[ntokenAddress] = address(0);\r\n    }\r\n\r\n    /// @dev Set the ntokenAddress from tokenAddress, if ntokenAddress is equals to tokenAddress, means the token is disabled\r\n    /// @param tokenAddress Destination token address\r\n    /// @param ntokenAddress The ntoken address\r\n    function setNTokenAddress(address tokenAddress, address ntokenAddress) override external onlyGovernance {\r\n        _addressCache[tokenAddress] = ntokenAddress;\r\n    }\r\n\r\n    /// @dev Get the ntokenAddress from tokenAddress, if ntokenAddress is equals to tokenAddress, means the token is disabled\r\n    /// @param tokenAddress Destination token address\r\n    /// @return The ntoken address\r\n    function getNTokenAddress(address tokenAddress) override external view returns (address) {\r\n        return _addressCache[tokenAddress];\r\n    }\r\n\r\n    /* ========== Mining ========== */\r\n\r\n    // Get ntoken address of from token address\r\n    function _getNTokenAddress(address tokenAddress) private returns (address) {\r\n\r\n        address ntokenAddress = _addressCache[tokenAddress];\r\n        if (ntokenAddress == address(0)) {\r\n            ntokenAddress = INTokenController(_nTokenControllerAddress).getNTokenAddress(tokenAddress);\r\n            if (ntokenAddress != address(0)) {\r\n                _addressCache[tokenAddress] = ntokenAddress;\r\n            }\r\n        }\r\n        return ntokenAddress;\r\n    }\r\n\r\n    // Get genesis block number of ntoken\r\n    function _getNTokenGenesisBlock(address ntokenAddress) private returns (uint) {\r\n\r\n        uint genesisBlockNumber = _genesisBlockNumberCache[ntokenAddress];\r\n        if (genesisBlockNumber == 0) {\r\n            (genesisBlockNumber,) = INToken(ntokenAddress).checkBlockInfo();\r\n            _genesisBlockNumberCache[ntokenAddress] = genesisBlockNumber;\r\n        }\r\n        return genesisBlockNumber;\r\n    }\r\n\r\n    /// @notice Post a price sheet for TOKEN\r\n    /// @dev It is for TOKEN (except USDT and NTOKENs) whose NTOKEN has a total supply below a threshold (e.g. 5,000,000 * 1e18)\r\n    /// @param tokenAddress The address of TOKEN contract\r\n    /// @param ethNum The numbers of ethers to post sheets\r\n    /// @param tokenAmountPerEth The price of TOKEN\r\n    function post(address tokenAddress, uint ethNum, uint tokenAmountPerEth) override external payable {\r\n\r\n        Config memory config = _config;\r\n\r\n        // 1. Check arguments\r\n        require(ethNum > 0 && ethNum == uint(config.postEthUnit), \"NM:!ethNum\");\r\n        require(tokenAmountPerEth > 0, \"NM:!price\");\r\n\r\n        // 2. Check price channel\r\n        // Check if the token allow post()\r\n        address ntokenAddress = _getNTokenAddress(tokenAddress);\r\n        require(ntokenAddress != address(0) && ntokenAddress != tokenAddress, \"NM:!tokenAddress\");\r\n        // Unit of nest is different, but the total supply already exceeded the number of this issue. No additional judgment will be made\r\n        // ntoken is mint when the price sheet is closed (or withdrawn), this may be the problem that the user\r\n        // intentionally does not close or withdraw, which leads to the inaccurate judgment of the total amount. ignore\r\n        require(INToken(ntokenAddress).totalSupply() < uint(config.doublePostThreshold) * 10000 ether, \"NM:!post2\");\r\n\r\n        // 3. Load token channel and sheets\r\n        PriceChannel storage channel = _channels[tokenAddress];\r\n        PriceSheet[] storage sheets = channel.sheets;\r\n\r\n        // 4. Freeze assets\r\n        uint accountIndex = _addressIndex(msg.sender);\r\n        // Freeze token and nest\r\n        // Because of the use of floating-point representation(fraction * 16 ^ exponent), it may bring some precision loss\r\n        // After assets are frozen according to tokenAmountPerEth * ethNum, the part with poor accuracy may be lost when\r\n        // the assets are returned, It should be frozen according to decodeFloat(fraction, exponent) * ethNum\r\n        // However, considering that the loss is less than 1 / 10 ^ 14, the loss here is ignored, and the part of\r\n        // precision loss can be transferred out as system income in the future\r\n        _freeze2(\r\n            _accounts[accountIndex].balances, \r\n            tokenAddress, \r\n            tokenAmountPerEth * ethNum, \r\n            uint(config.pledgeNest) * 1000 ether\r\n        );\r\n\r\n        // 5. Deposit fee\r\n        // The revenue is deposited every 256 sheets, deducting the times of taking orders and the settled part\r\n        uint length = sheets.length;\r\n        uint shares = _collect(config, channel, ntokenAddress, length, msg.value - ethNum * 1 ether);\r\n        require(shares > 0 && shares < 256, \"NM:!fee\");\r\n\r\n        // Calculate the price\r\n        // According to the current mechanism, the newly added sheet cannot take effect, so the calculated price\r\n        // is placed before the sheet is added, which can reduce unnecessary traversal\r\n        _stat(config, channel, sheets);\r\n\r\n        // 6. Create token price sheet\r\n        emit Post(tokenAddress, msg.sender, length, ethNum, tokenAmountPerEth);\r\n        _createPriceSheet(sheets, accountIndex, uint32(ethNum), uint(config.pledgeNest), shares, tokenAmountPerEth);\r\n    }\r\n\r\n    /// @notice Post two price sheets for a token and its ntoken simultaneously\r\n    /// @dev Support dual-posts for TOKEN/NTOKEN, (ETH, TOKEN) + (ETH, NTOKEN)\r\n    /// @param tokenAddress The address of TOKEN contract\r\n    /// @param ethNum The numbers of ethers to post sheets\r\n    /// @param tokenAmountPerEth The price of TOKEN\r\n    /// @param ntokenAmountPerEth The price of NTOKEN\r\n    function post2(\r\n        address tokenAddress, \r\n        uint ethNum, \r\n        uint tokenAmountPerEth, \r\n        uint ntokenAmountPerEth\r\n    ) override external payable {\r\n\r\n        Config memory config = _config;\r\n\r\n        // 1. Check arguments\r\n        require(ethNum > 0 && ethNum == uint(config.postEthUnit), \"NM:!ethNum\");\r\n        require(tokenAmountPerEth > 0 && ntokenAmountPerEth > 0, \"NM:!price\");\r\n\r\n        // 2. Check price channel\r\n        address ntokenAddress = _getNTokenAddress(tokenAddress);\r\n        require(ntokenAddress != address(0) && ntokenAddress != tokenAddress, \"NM:!tokenAddress\");\r\n\r\n        // 3. Load token channel and sheets\r\n        PriceChannel storage channel = _channels[tokenAddress];\r\n        PriceSheet[] storage sheets = channel.sheets;\r\n\r\n        // 4. Freeze assets\r\n        uint pledgeNest = uint(config.pledgeNest);\r\n        uint accountIndex = _addressIndex(msg.sender);\r\n        {\r\n            mapping(address=>UINT) storage balances = _accounts[accountIndex].balances;\r\n            _freeze(balances, tokenAddress, ethNum * tokenAmountPerEth);\r\n            _freeze2(balances, ntokenAddress, ethNum * ntokenAmountPerEth, pledgeNest * 2000 ether);\r\n        }\r\n\r\n        // 5. Deposit fee\r\n        // The revenue is deposited every 256 sheets, deducting the times of taking orders and the settled part\r\n        uint length = sheets.length;\r\n        uint shares = _collect(config, channel, ntokenAddress, length, msg.value - ethNum * 2 ether);\r\n        require(shares > 0 && shares < 256, \"NM:!fee\");\r\n\r\n        // Calculate the price\r\n        // According to the current mechanism, the newly added sheet cannot take effect, so the calculated price\r\n        // is placed before the sheet is added, which can reduce unnecessary traversal\r\n        _stat(config, channel, sheets);\r\n\r\n        // 6. Create token price sheet\r\n        emit Post(tokenAddress, msg.sender, length, ethNum, tokenAmountPerEth);\r\n        _createPriceSheet(sheets, accountIndex, uint32(ethNum), pledgeNest, shares, tokenAmountPerEth);\r\n\r\n        // 7. Load ntoken channel and sheets\r\n        channel = _channels[ntokenAddress];\r\n        sheets = channel.sheets;\r\n\r\n        // Calculate the price\r\n        // According to the current mechanism, the newly added sheet cannot take effect, so the calculated price\r\n        // is placed before the sheet is added, which can reduce unnecessary traversal\r\n        _stat(config, channel, sheets);\r\n\r\n        // 8. Create token price sheet\r\n        emit Post(ntokenAddress, msg.sender, sheets.length, ethNum, ntokenAmountPerEth);\r\n        _createPriceSheet(sheets, accountIndex, uint32(ethNum), pledgeNest, 0, ntokenAmountPerEth);\r\n    }\r\n\r\n    /// @notice Call the function to buy TOKEN/NTOKEN from a posted price sheet\r\n    /// @dev bite TOKEN(NTOKEN) by ETH,  (+ethNumBal, -tokenNumBal)\r\n    /// @param tokenAddress The address of token(ntoken)\r\n    /// @param index The position of the sheet in priceSheetList[token]\r\n    /// @param takeNum The amount of biting (in the unit of ETH), realAmount = takeNum * newTokenAmountPerEth\r\n    /// @param newTokenAmountPerEth The new price of token (1 ETH : some TOKEN), here some means newTokenAmountPerEth\r\n    function takeToken(\r\n        address tokenAddress,\r\n        uint index,\r\n        uint takeNum,\r\n        uint newTokenAmountPerEth\r\n    ) override external payable {\r\n\r\n        Config memory config = _config;\r\n\r\n        // 1. Check arguments\r\n        require(takeNum > 0 && takeNum % uint(config.postEthUnit) == 0, \"NM:!takeNum\");\r\n        require(newTokenAmountPerEth > 0, \"NM:!price\");\r\n\r\n        // 2. Load price sheet\r\n        PriceChannel storage channel = _channels[tokenAddress];\r\n        PriceSheet[] storage sheets = channel.sheets;\r\n        PriceSheet memory sheet = sheets[index];\r\n\r\n        // 3. Check state\r\n        require(uint(sheet.remainNum) >= takeNum, \"NM:!remainNum\");\r\n        require(uint(sheet.height) + uint(config.priceEffectSpan) >= block.number, \"NM:!state\");\r\n\r\n        // 4. Deposit fee\r\n        {\r\n            // The revenue is deposited every 256 sheets, deducting the times of taking orders and the settled part\r\n            address ntokenAddress = _getNTokenAddress(tokenAddress);\r\n            if (tokenAddress != ntokenAddress) {\r\n                _collect(config, channel, ntokenAddress, sheets.length, 0);\r\n            }\r\n        }\r\n\r\n        // 5. Calculate the number of eth, token and nest needed, and freeze them\r\n        uint needEthNum;\r\n        uint level = uint(sheet.level);\r\n\r\n        // When the level of the sheet is less than 4, both the nest and the scale of the offer are doubled\r\n        if (level < uint(config.maxBiteNestedLevel)) {\r\n            // Double scale sheet\r\n            needEthNum = takeNum << 1;\r\n            ++level;\r\n        } \r\n        // When the level of the sheet reaches 4 or more, nest doubles, but the scale does not\r\n        else {\r\n            // Single scale sheet\r\n            needEthNum = takeNum;\r\n            // It is possible that the length of a single chain exceeds 255. When the length of a chain reaches 4\r\n            // or more, there is no logical dependence on the specific value of the contract, and the count will\r\n            // not increase after it is accumulated to 255\r\n            if (level < 255) ++level;\r\n        }\r\n        require(msg.value == (needEthNum + takeNum) * 1 ether, \"NM:!value\");\r\n\r\n        // Number of nest to be pledged\r\n        //uint needNest1k = ((takeNum << 1) / uint(config.postEthUnit)) * uint(config.pledgeNest);\r\n        // sheet.ethNumBal + sheet.tokenNumBal is always two times to sheet.ethNum\r\n        uint needNest1k = (takeNum << 2) * uint(sheet.nestNum1k) / (uint(sheet.ethNumBal) + uint(sheet.tokenNumBal));\r\n        // Freeze nest and token\r\n        uint accountIndex = _addressIndex(msg.sender);\r\n        {\r\n            mapping(address=>UINT) storage balances = _accounts[accountIndex].balances;\r\n            uint backTokenValue = decodeFloat(sheet.priceFloat) * takeNum;\r\n            if (needEthNum * newTokenAmountPerEth > backTokenValue) {\r\n                _freeze2(\r\n                    balances,\r\n                    tokenAddress,\r\n                    needEthNum * newTokenAmountPerEth - backTokenValue,\r\n                    needNest1k * 1000 ether\r\n                );\r\n            } else {\r\n                _freeze(balances, NEST_TOKEN_ADDRESS, needNest1k * 1000 ether);\r\n                _unfreeze(balances, tokenAddress, backTokenValue - needEthNum * newTokenAmountPerEth);\r\n            }\r\n        }\r\n\r\n        // 6. Update the biten sheet\r\n        sheet.remainNum = uint32(uint(sheet.remainNum) - takeNum);\r\n        sheet.ethNumBal = uint32(uint(sheet.ethNumBal) + takeNum);\r\n        sheet.tokenNumBal = uint32(uint(sheet.tokenNumBal) - takeNum);\r\n        sheets[index] = sheet;\r\n\r\n        // 7. Calculate the price\r\n        // According to the current mechanism, the newly added sheet cannot take effect, so the calculated price\r\n        // is placed before the sheet is added, which can reduce unnecessary traversal\r\n        _stat(config, channel, sheets);\r\n\r\n        // 8. Create price sheet\r\n        emit Post(tokenAddress, msg.sender, sheets.length, needEthNum, newTokenAmountPerEth);\r\n        _createPriceSheet(sheets, accountIndex, uint32(needEthNum), needNest1k, level << 8, newTokenAmountPerEth);\r\n    }\r\n\r\n    /// @notice Call the function to buy ETH from a posted price sheet\r\n    /// @dev bite ETH by TOKEN(NTOKEN),  (-ethNumBal, +tokenNumBal)\r\n    /// @param tokenAddress The address of token(ntoken)\r\n    /// @param index The position of the sheet in priceSheetList[token]\r\n    /// @param takeNum The amount of biting (in the unit of ETH), realAmount = takeNum\r\n    /// @param newTokenAmountPerEth The new price of token (1 ETH : some TOKEN), here some means newTokenAmountPerEth\r\n    function takeEth(\r\n        address tokenAddress,\r\n        uint index,\r\n        uint takeNum,\r\n        uint newTokenAmountPerEth\r\n    ) override external payable {\r\n\r\n        Config memory config = _config;\r\n\r\n        // 1. Check arguments\r\n        require(takeNum > 0 && takeNum % uint(config.postEthUnit) == 0, \"NM:!takeNum\");\r\n        require(newTokenAmountPerEth > 0, \"NM:!price\");\r\n\r\n        // 2. Load price sheet\r\n        PriceChannel storage channel = _channels[tokenAddress];\r\n        PriceSheet[] storage sheets = channel.sheets;\r\n        PriceSheet memory sheet = sheets[index];\r\n\r\n        // 3. Check state\r\n        require(uint(sheet.remainNum) >= takeNum, \"NM:!remainNum\");\r\n        require(uint(sheet.height) + uint(config.priceEffectSpan) >= block.number, \"NM:!state\");\r\n\r\n        // 4. Deposit fee\r\n        {\r\n            // The revenue is deposited every 256 sheets, deducting the times of taking orders and the settled part\r\n            address ntokenAddress = _getNTokenAddress(tokenAddress);\r\n            if (tokenAddress != ntokenAddress) {\r\n                _collect(config, channel, ntokenAddress, sheets.length, 0);\r\n            }\r\n        }\r\n\r\n        // 5. Calculate the number of eth, token and nest needed, and freeze them\r\n        uint needEthNum;\r\n        uint level = uint(sheet.level);\r\n\r\n        // When the level of the sheet is less than 4, both the nest and the scale of the offer are doubled\r\n        if (level < uint(config.maxBiteNestedLevel)) {\r\n            // Double scale sheet\r\n            needEthNum = takeNum << 1;\r\n            ++level;\r\n        } \r\n        // When the level of the sheet reaches 4 or more, nest doubles, but the scale does not\r\n        else {\r\n            // Single scale sheet\r\n            needEthNum = takeNum;\r\n            // It is possible that the length of a single chain exceeds 255. When the length of a chain reaches 4 \r\n            // or more, there is no logical dependence on the specific value of the contract, and the count will\r\n            // not increase after it is accumulated to 255\r\n            if (level < 255) ++level;\r\n        }\r\n        require(msg.value == (needEthNum - takeNum) * 1 ether, \"NM:!value\");\r\n\r\n        // Number of nest to be pledged\r\n        //uint needNest1k = ((takeNum << 1) / uint(config.postEthUnit)) * uint(config.pledgeNest);\r\n        // sheet.ethNumBal + sheet.tokenNumBal is always two times to sheet.ethNum\r\n        uint needNest1k = (takeNum << 2) * uint(sheet.nestNum1k) / (uint(sheet.ethNumBal) + uint(sheet.tokenNumBal));\r\n        // Freeze nest and token\r\n        uint accountIndex = _addressIndex(msg.sender);\r\n        _freeze2(\r\n            _accounts[accountIndex].balances, \r\n            tokenAddress, \r\n            needEthNum * newTokenAmountPerEth + decodeFloat(sheet.priceFloat) * takeNum, \r\n            needNest1k * 1000 ether\r\n        );\r\n            \r\n        // 6. Update the biten sheet\r\n        sheet.remainNum = uint32(uint(sheet.remainNum) - takeNum);\r\n        sheet.ethNumBal = uint32(uint(sheet.ethNumBal) - takeNum);\r\n        sheet.tokenNumBal = uint32(uint(sheet.tokenNumBal) + takeNum);\r\n        sheets[index] = sheet;\r\n\r\n        // 7. Calculate the price\r\n        // According to the current mechanism, the newly added sheet cannot take effect, so the calculated price\r\n        // is placed before the sheet is added, which can reduce unnecessary traversal\r\n        _stat(config, channel, sheets);\r\n\r\n        // 8. Create price sheet\r\n        emit Post(tokenAddress, msg.sender, sheets.length, needEthNum, newTokenAmountPerEth);\r\n        _createPriceSheet(sheets, accountIndex, uint32(needEthNum), needNest1k, level << 8, newTokenAmountPerEth);\r\n    }\r\n\r\n    // Create price sheet\r\n    function _createPriceSheet(\r\n        PriceSheet[] storage sheets,\r\n        uint accountIndex,\r\n        uint32 ethNum,\r\n        uint nestNum1k,\r\n        uint level_shares,\r\n        uint tokenAmountPerEth\r\n    ) private {\r\n\r\n        sheets.push(PriceSheet(\r\n            uint32(accountIndex),                       // uint32 miner;\r\n            uint32(block.number),                       // uint32 height;\r\n            ethNum,                                     // uint32 remainNum;\r\n            ethNum,                                     // uint32 ethNumBal;\r\n            ethNum,                                     // uint32 tokenNumBal;\r\n            uint24(nestNum1k),                          // uint32 nestNum1k;\r\n            uint8(level_shares >> 8),                   // uint8 level;\r\n            uint8(level_shares & 0xFF),\r\n            encodeFloat(tokenAmountPerEth)\r\n        ));\r\n    }\r\n\r\n    // Nest ore drawing attenuation interval. 2400000 blocks, about one year\r\n    uint constant NEST_REDUCTION_SPAN = 2400000;\r\n    // The decay limit of nest ore drawing becomes stable after exceeding this interval. 24 million blocks, about 10 years\r\n    uint constant NEST_REDUCTION_LIMIT = 24000000; //NEST_REDUCTION_SPAN * 10;\r\n    // Attenuation gradient array, each attenuation step value occupies 16 bits. The attenuation value is an integer\r\n    uint constant NEST_REDUCTION_STEPS = 0x280035004300530068008300A300CC010001400190;\r\n        // 0\r\n        // | (uint(400 / uint(1)) << (16 * 0))\r\n        // | (uint(400 * 8 / uint(10)) << (16 * 1))\r\n        // | (uint(400 * 8 * 8 / uint(10 * 10)) << (16 * 2))\r\n        // | (uint(400 * 8 * 8 * 8 / uint(10 * 10 * 10)) << (16 * 3))\r\n        // | (uint(400 * 8 * 8 * 8 * 8 / uint(10 * 10 * 10 * 10)) << (16 * 4))\r\n        // | (uint(400 * 8 * 8 * 8 * 8 * 8 / uint(10 * 10 * 10 * 10 * 10)) << (16 * 5))\r\n        // | (uint(400 * 8 * 8 * 8 * 8 * 8 * 8 / uint(10 * 10 * 10 * 10 * 10 * 10)) << (16 * 6))\r\n        // | (uint(400 * 8 * 8 * 8 * 8 * 8 * 8 * 8 / uint(10 * 10 * 10 * 10 * 10 * 10 * 10)) << (16 * 7))\r\n        // | (uint(400 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 / uint(10 * 10 * 10 * 10 * 10 * 10 * 10 * 10)) << (16 * 8))\r\n        // | (uint(400 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 / uint(10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10)) << (16 * 9))\r\n        // //| (uint(400 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 / uint(10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10)) << (16 * 10));\r\n        // | (uint(40) << (16 * 10));\r\n\r\n    // Calculation of attenuation gradient\r\n    function _redution(uint delta) private pure returns (uint) {\r\n\r\n        if (delta < NEST_REDUCTION_LIMIT) {\r\n            return (NEST_REDUCTION_STEPS >> ((delta / NEST_REDUCTION_SPAN) << 4)) & 0xFFFF;\r\n        }\r\n        return (NEST_REDUCTION_STEPS >> 160) & 0xFFFF;\r\n    }\r\n\r\n    /// @notice Close a price sheet of (ETH, USDx) | (ETH, NEST) | (ETH, TOKEN) | (ETH, NTOKEN)\r\n    /// @dev Here we allow an empty price sheet (still in VERIFICATION-PERIOD) to be closed\r\n    /// @param tokenAddress The address of TOKEN contract\r\n    /// @param index The index of the price sheet w.r.t. `token`\r\n    function close(address tokenAddress, uint index) override external {\r\n        \r\n        Config memory config = _config;\r\n        PriceChannel storage channel = _channels[tokenAddress];\r\n        PriceSheet[] storage sheets = channel.sheets;\r\n\r\n        // Load the price channel\r\n        address ntokenAddress = _getNTokenAddress(tokenAddress);\r\n        // Call _close() method to close price sheet\r\n        (uint accountIndex, Tunple memory total) = _close(config, sheets, index, ntokenAddress);\r\n\r\n        if (accountIndex > 0) {\r\n            // Return eth\r\n            if (uint(total.ethNum) > 0) {\r\n                payable(indexAddress(accountIndex)).transfer(uint(total.ethNum) * 1 ether);\r\n            }\r\n            // Unfreeze assets\r\n            _unfreeze3(\r\n                _accounts[accountIndex].balances, \r\n                tokenAddress, \r\n                total.tokenValue, \r\n                ntokenAddress, \r\n                uint(total.ntokenValue), \r\n                uint(total.nestValue)\r\n            );\r\n        }\r\n\r\n        // Calculate the price\r\n        _stat(config, channel, sheets);\r\n    }\r\n\r\n    /// @notice Close a batch of price sheets passed VERIFICATION-PHASE\r\n    /// @dev Empty sheets but in VERIFICATION-PHASE aren't allowed\r\n    /// @param tokenAddress The address of TOKEN contract\r\n    /// @param indices A list of indices of sheets w.r.t. `token`\r\n    function closeList(address tokenAddress, uint[] memory indices) override external {\r\n        \r\n        // Call _closeList() method to close price sheets\r\n        (\r\n            uint accountIndex,\r\n            Tunple memory total,\r\n            address ntokenAddress\r\n        ) = _closeList(_config, _channels[tokenAddress], tokenAddress, indices);\r\n\r\n        // Return eth\r\n        payable(indexAddress(accountIndex)).transfer(uint(total.ethNum) * 1 ether);\r\n        // Unfreeze assets\r\n        _unfreeze3(\r\n            _accounts[accountIndex].balances,\r\n            tokenAddress,\r\n            uint(total.tokenValue),\r\n            ntokenAddress,\r\n            uint(total.ntokenValue),\r\n            uint(total.nestValue)\r\n        );\r\n    }\r\n\r\n    /// @notice Close two batch of price sheets passed VERIFICATION-PHASE\r\n    /// @dev Empty sheets but in VERIFICATION-PHASE aren't allowed\r\n    /// @param tokenAddress The address of TOKEN1 contract\r\n    /// @param tokenIndices A list of indices of sheets w.r.t. `token`\r\n    /// @param ntokenIndices A list of indices of sheets w.r.t. `ntoken`\r\n    function closeList2(\r\n        address tokenAddress,\r\n        uint[] memory tokenIndices,\r\n        uint[] memory ntokenIndices\r\n    ) override external {\r\n\r\n        Config memory config = _config;\r\n        mapping(address=>PriceChannel) storage channels = _channels;\r\n\r\n        // Call _closeList() method to close price sheets\r\n        (\r\n            uint accountIndex1,\r\n            Tunple memory total1,\r\n            address ntokenAddress\r\n        ) = _closeList(config, channels[tokenAddress], tokenAddress, tokenIndices);\r\n\r\n        (\r\n            uint accountIndex2,\r\n            Tunple memory total2,\r\n            //address ntokenAddress2\r\n        ) = _closeList(config, channels[ntokenAddress], ntokenAddress, ntokenIndices);\r\n\r\n        require(accountIndex1 == accountIndex2, \"NM:!miner\");\r\n        //require(ntokenAddress1 == tokenAddress2, \"NM:!tokenAddress\");\r\n        require(uint(total2.ntokenValue) == 0, \"NM!ntokenValue\");\r\n\r\n        // Return eth\r\n        payable(indexAddress(accountIndex1)).transfer((uint(total1.ethNum) + uint(total2.ethNum)) * 1 ether);\r\n        // Unfreeze assets\r\n        _unfreeze3(\r\n            _accounts[accountIndex1].balances,\r\n            tokenAddress,\r\n            uint(total1.tokenValue),\r\n            ntokenAddress,\r\n            uint(total1.ntokenValue) + uint(total2.tokenValue)/* + uint(total2.ntokenValue) */,\r\n            uint(total1.nestValue) + uint(total2.nestValue)\r\n        );\r\n    }\r\n\r\n    // Calculation number of blocks which mined\r\n    function _calcMinedBlocks(\r\n        PriceSheet[] storage sheets,\r\n        uint index,\r\n        PriceSheet memory sheet\r\n    ) private view returns (uint minedBlocks, uint totalShares) {\r\n\r\n        uint length = sheets.length;\r\n        uint height = uint(sheet.height);\r\n        totalShares = uint(sheet.shares);\r\n\r\n        // Backward looking for sheets in the same block\r\n        for (uint i = index; ++i < length && uint(sheets[i].height) == height;) {\r\n            \r\n            // Multiple sheets in the same block is a small probability event at present, so it can be ignored\r\n            // to read more than once, if there are always multiple sheets in the same block, it means that the\r\n            // sheets are very intensive, and the gas consumed here does not have a great impact\r\n            totalShares += uint(sheets[i].shares);\r\n        }\r\n\r\n        //i = index;\r\n        // Find sheets in the same block forward\r\n        uint prev = height;\r\n        while (index > 0 && uint(prev = sheets[--index].height) == height) {\r\n\r\n            // Multiple sheets in the same block is a small probability event at present, so it can be ignored \r\n            // to read more than once, if there are always multiple sheets in the same block, it means that the\r\n            // sheets are very intensive, and the gas consumed here does not have a great impact\r\n            totalShares += uint(sheets[index].shares);\r\n        }\r\n\r\n        if (index > 0 || height > prev) {\r\n            minedBlocks = height - prev;\r\n        } else {\r\n            minedBlocks = 10;\r\n        }\r\n    }\r\n\r\n    // This structure is for the _close() method to return multiple values\r\n    struct Tunple {\r\n        uint tokenValue;\r\n        uint64 ethNum;\r\n        uint96 nestValue;\r\n        uint96 ntokenValue;\r\n    }\r\n\r\n    // Close price sheet\r\n    function _close(\r\n        Config memory config,\r\n        PriceSheet[] storage sheets,\r\n        uint index,\r\n        address ntokenAddress\r\n    ) private returns (uint accountIndex, Tunple memory value) {\r\n\r\n        PriceSheet memory sheet = sheets[index];\r\n        uint height = uint(sheet.height);\r\n\r\n        // Check the status of the price sheet to see if it has reached the effective block interval or has been finished\r\n        if ((accountIndex = uint(sheet.miner)) > 0 && (height + uint(config.priceEffectSpan) < block.number)) {\r\n\r\n            // TMP: tmp is a polysemous name, here means sheet.shares\r\n            uint tmp = uint(sheet.shares);\r\n            // Mining logic\r\n            // The price sheet which shares is zero dosen't mining\r\n            if (tmp > 0) {\r\n\r\n                // Currently, mined represents the number of blocks has mined\r\n                (uint mined, uint totalShares) = _calcMinedBlocks(sheets, index, sheet);\r\n                // nest mining\r\n                if (ntokenAddress == NEST_TOKEN_ADDRESS) {\r\n\r\n                    // Since then, mined represents the amount of mining\r\n                    // mined = (\r\n                    //     mined \r\n                    //     * uint(sheet.shares) \r\n                    //     * _redution(height - NEST_GENESIS_BLOCK) \r\n                    //     * 1 ether \r\n                    //     * uint(config.minerNestReward) \r\n                    //     / 10000 \r\n                    //     / totalShares\r\n                    // );\r\n                    // The original expression is shown above. In order to save gas,\r\n                    // the part that can be calculated in advance is calculated first\r\n                    mined = (\r\n                        mined\r\n                        * tmp\r\n                        * _redution(height - NEST_GENESIS_BLOCK)\r\n                        * uint(config.minerNestReward)\r\n                        * 0.0001 ether\r\n                        / totalShares\r\n                    );\r\n                }\r\n                // ntoken mining\r\n                else {\r\n\r\n                    // The limit blocks can be mined\r\n                    if (mined > uint(config.ntokenMinedBlockLimit)) {\r\n                        mined = uint(config.ntokenMinedBlockLimit);\r\n                    }\r\n                    \r\n                    // Since then, mined represents the amount of mining\r\n                    mined = (\r\n                        mined\r\n                        * tmp\r\n                        * _redution(height - _getNTokenGenesisBlock(ntokenAddress))\r\n                        * 0.01 ether\r\n                        / totalShares\r\n                    );\r\n\r\n                    // Put this logic into widhdran() method to reduce gas consumption\r\n                    // ntoken bidders\r\n                    address bidder = INToken(ntokenAddress).checkBidder();\r\n                    // Legacy ntoken, need separate\r\n                    if (bidder != address(this)) {\r\n\r\n                        // Considering that multiple sheets in the same block are small probability events,\r\n                        // we can send token to bidders in each closing operation\r\n                        // 5% for bidder\r\n\r\n                        // TMP: tmp is a polysemous name, here means mint ntoken amount for miner\r\n                        tmp = mined * uint(config.minerNTokenReward) / 10000;\r\n                        _unfreeze(\r\n                            _accounts[_addressIndex(bidder)].balances,\r\n                            ntokenAddress,\r\n                            mined - tmp\r\n                        );\r\n\r\n                        // Miner take according proportion which set\r\n                        mined = tmp;\r\n                    }\r\n                }\r\n\r\n                value.ntokenValue = uint96(mined);\r\n            }\r\n\r\n            value.nestValue = uint96(uint(sheet.nestNum1k) * 1000 ether);\r\n            value.ethNum = uint64(sheet.ethNumBal);\r\n            value.tokenValue = decodeFloat(sheet.priceFloat) * uint(sheet.tokenNumBal);\r\n\r\n            // Set sheet.miner to 0, express the sheet is closed\r\n            sheet.miner = uint32(0);\r\n            sheet.ethNumBal = uint32(0);\r\n            sheet.tokenNumBal = uint32(0);\r\n            sheets[index] = sheet;\r\n        }\r\n    }\r\n\r\n    // Batch close sheets\r\n    function _closeList(\r\n        Config memory config,\r\n        PriceChannel storage channel,\r\n        address tokenAddress,\r\n        uint[] memory indices\r\n    ) private returns (uint accountIndex, Tunple memory total, address ntokenAddress) {\r\n\r\n        ntokenAddress = _getNTokenAddress(tokenAddress);\r\n        PriceSheet[] storage sheets = channel.sheets;\r\n        accountIndex = 0; \r\n\r\n        // 1. Traverse sheets\r\n        for (uint i = indices.length; i > 0;) {\r\n\r\n            // Because too many variables need to be returned, too many variables will be defined, so the structure of tunple is defined\r\n            (uint minerIndex, Tunple memory value) = _close(config, sheets, indices[--i], ntokenAddress);\r\n            // Batch closing quotation can only close sheet of the same user\r\n            if (accountIndex == 0) {\r\n                // accountIndex == 0 means the first sheet, and the number of this sheet is taken\r\n                accountIndex = minerIndex;\r\n            } else {\r\n                // accountIndex != 0 means that it is a follow-up sheet, and the miner number must be consistent with the previous record\r\n                require(accountIndex == minerIndex, \"NM:!miner\");\r\n            }\r\n\r\n            total.ntokenValue += value.ntokenValue;\r\n            total.nestValue += value.nestValue;\r\n            total.ethNum += value.ethNum;\r\n            total.tokenValue += value.tokenValue;\r\n        }\r\n\r\n        _stat(config, channel, sheets);\r\n    }\r\n\r\n    // Calculate price, average price and volatility\r\n    function _stat(Config memory config, PriceChannel storage channel, PriceSheet[] storage sheets) private {\r\n\r\n        // Load token price information\r\n        PriceInfo memory p0 = channel.price;\r\n\r\n        // Length of sheets\r\n        uint length = sheets.length;\r\n        // The index of the sheet to be processed in the sheet array\r\n        uint index = uint(p0.index);\r\n        // The latest block number for which the price has been calculated\r\n        uint prev = uint(p0.height);\r\n        // It's not necessary to load the price information in p0\r\n        // Eth count variable used to calculate price\r\n        uint totalEthNum = 0; \r\n        // Token count variable for price calculation\r\n        uint totalTokenValue = 0; \r\n        // Block number of current sheet\r\n        uint height = 0;\r\n\r\n        // Traverse the sheets to find the effective price\r\n        uint effectBlock = block.number - uint(config.priceEffectSpan);\r\n        PriceSheet memory sheet;\r\n        for (; ; ++index) {\r\n\r\n            // Gas attack analysis, each post transaction, calculated according to post, needs to write\r\n            // at least one sheet and freeze two kinds of assets, which needs to consume at least 30000 gas,\r\n            // In addition to the basic cost of the transaction, at least 50000 gas is required.\r\n            // In addition, there are other reading and calculation operations. The gas consumed by each\r\n            // transaction is impossible less than 70000 gas, The attacker can accumulate up to 20 blocks\r\n            // of sheets to be generated. To ensure that the calculation can be completed in one block,\r\n            // it is necessary to ensure that the consumption of each price does not exceed 70000 / 20 = 3500 gas,\r\n            // According to the current logic, each calculation of a price needs to read a storage unit (800)\r\n            // and calculate the consumption, which can not reach the dangerous value of 3500, so the gas attack\r\n            // is not considered\r\n\r\n            // Traverse the sheets that has reached the effective interval from the current position\r\n            bool flag = index >= length || (height = uint((sheet = sheets[index]).height)) >= effectBlock;\r\n\r\n            // Not the same block (or flag is false), calculate the price and update it\r\n            if (flag || prev != height) {\r\n\r\n                // totalEthNum > 0 Can calculate the price\r\n                if (totalEthNum > 0) {\r\n\r\n                    // Calculate average price and Volatility\r\n                    // Calculation method of volatility of follow-up price\r\n                    uint tmp = decodeFloat(p0.priceFloat);\r\n                    // New price\r\n                    uint price = totalTokenValue / totalEthNum;\r\n                    // Update price\r\n                    p0.remainNum = uint32(totalEthNum);\r\n                    p0.priceFloat = encodeFloat(price);\r\n                    // Clear cumulative values\r\n                    totalEthNum = 0;\r\n                    totalTokenValue = 0;\r\n\r\n                    if (tmp > 0) {\r\n                        // Calculate average price\r\n                        // avgPrice[i + 1] = avgPrice[i] * 90% + price[i] * 10%\r\n                        p0.avgFloat = encodeFloat((decodeFloat(p0.avgFloat) * 9 + price) / 10);\r\n\r\n                        // When the accuracy of the token is very high or the value of the token relative to\r\n                        // eth is very low, the price may be very large, and there may be overflow problem,\r\n                        // it is not considered for the moment\r\n                        tmp = (price << 48) / tmp;\r\n                        if (tmp > 0x1000000000000) {\r\n                            tmp = tmp - 0x1000000000000;\r\n                        } else {\r\n                            tmp = 0x1000000000000 - tmp;\r\n                        }\r\n\r\n                        // earn = price[i] / price[i - 1] - 1;\r\n                        // seconds = time[i] - time[i - 1];\r\n                        // sigmaSQ[i + 1] = sigmaSQ[i] * 90% + (earn ^ 2 / seconds) * 10%\r\n                        tmp = (\r\n                            uint(p0.sigmaSQ) * 9 + \r\n                            // It is inevitable that prev greatter than p0.height\r\n                            ((tmp * tmp / ETHEREUM_BLOCK_TIMESPAN / (prev - uint(p0.height))) >> 48)\r\n                        ) / 10;\r\n\r\n                        // The current implementation assumes that the volatility cannot exceed 1, and\r\n                        // corresponding to this, when the calculated value exceeds 1, expressed as 0xFFFFFFFFFFFF\r\n                        if (tmp > 0xFFFFFFFFFFFF) {\r\n                            tmp = 0xFFFFFFFFFFFF;\r\n                        }\r\n                        p0.sigmaSQ = uint48(tmp);\r\n                    }\r\n                    // The calculation methods of average price and volatility are different for first price\r\n                    else {\r\n                        // The average price is equal to the price\r\n                        //p0.avgTokenAmount = uint64(price);\r\n                        p0.avgFloat = p0.priceFloat;\r\n\r\n                        // The volatility is 0\r\n                        p0.sigmaSQ = uint48(0);\r\n                    }\r\n\r\n                    // Update price block number\r\n                    p0.height = uint32(prev);\r\n                }\r\n\r\n                // Move to new block number\r\n                prev = height;\r\n            }\r\n\r\n            if (flag) {\r\n                break;\r\n            }\r\n\r\n            // Cumulative price information\r\n            totalEthNum += uint(sheet.remainNum);\r\n            totalTokenValue += decodeFloat(sheet.priceFloat) * uint(sheet.remainNum);\r\n        }\r\n\r\n        // Update price infomation\r\n        if (index > uint(p0.index)) {\r\n            p0.index = uint32(index);\r\n            channel.price = p0;\r\n        }\r\n    }\r\n\r\n    /// @dev The function updates the statistics of price sheets\r\n    ///     It calculates from priceInfo to the newest that is effective.\r\n    function stat(address tokenAddress) override external {\r\n        PriceChannel storage channel = _channels[tokenAddress];\r\n        _stat(_config, channel, channel.sheets);\r\n    }\r\n\r\n    // Collect and deposit the commission into NestLedger\r\n    function _collect(\r\n        Config memory config,\r\n        PriceChannel storage channel,\r\n        address ntokenAddress,\r\n        uint length,\r\n        uint currentFee\r\n    ) private returns (uint) {\r\n\r\n        // Commission is charged for every post(post2), the commission should be deposited to NestLedger,\r\n        // for saving gas, according to sheets.length, every increase of 256 will deposit once, The calculation formula is:\r\n        // \r\n        // totalFee = fee * increment\r\n        // \r\n        // In consideration of takeToken, takeEth, change postFeeUnit or miner pay more fee, the formula will be invalid,\r\n        // at this point, it is need to settle immediately, the details of triggering settlement logic are as follows\r\n        // \r\n        // 1. When there is a bite transaction(currentFee is 0), the counter of no fee sheets will be increase 1\r\n        // 2. If the Commission of this time is inconsistent with that of last time, deposit immediately\r\n        // 3. When the increment of sheets.length is 256, deposit immediately\r\n        // 4. Everyone can trigger immediate settlement by manually calling the settle() method\r\n        // \r\n        // In order to realize the logic above, the following values are defined\r\n        // \r\n        // 1. PriceChannel.feeInfo\r\n        //    Low 128-bits represent last fee per post\r\n        //    High 128-bits represent the current counter of no fee sheets (including settled)\r\n        // \r\n        // 2. COLLECT_REWARD_MASK\r\n        //    The mask of batch deposit trigger, while COLLECT_REWARD_MASK & sheets.length == COLLECT_REWARD_MASK, it will trigger deposit,\r\n        //    COLLECT_REWARD_MASK is set to 0xF for testing (means every 16 sheets will deposit once), \r\n        //    and it will be set to 0xFF for mainnet (means every 256 sheets will deposit once)\r\n\r\n        uint feeUnit = uint(config.postFeeUnit) * DIMI_ETHER;\r\n        require(currentFee % feeUnit == 0, \"NM:!fee\");\r\n        uint feeInfo = channel.feeInfo;\r\n        uint oldFee = feeInfo & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n        // length == 255 means is time to save reward\r\n        // currentFee != oldFee means the fee is changed, need to settle\r\n        if (length & COLLECT_REWARD_MASK == COLLECT_REWARD_MASK || (currentFee != oldFee && currentFee > 0)) {\r\n            // Save reward\r\n            INestLedger(_nestLedgerAddress).carveETHReward { \r\n                value: currentFee + oldFee * ((length & COLLECT_REWARD_MASK) - (feeInfo >> 128))\r\n            } (ntokenAddress);\r\n            // Update fee information\r\n            channel.feeInfo = currentFee | (((length + 1) & COLLECT_REWARD_MASK) << 128);\r\n        }\r\n        // currentFee is 0, increase no fee counter\r\n        else if (currentFee == 0) {\r\n            // channel.feeInfo = feeInfo + (1 << 128);\r\n            channel.feeInfo = feeInfo + 0x100000000000000000000000000000000;\r\n        }\r\n\r\n        // Calculate share count\r\n        return currentFee / feeUnit;\r\n    }\r\n\r\n    /// @dev Settlement Commission\r\n    /// @param tokenAddress The token address\r\n    function settle(address tokenAddress) override external {\r\n\r\n        address ntokenAddress = _getNTokenAddress(tokenAddress);\r\n        // ntoken is no reward\r\n        if (tokenAddress != ntokenAddress) {\r\n\r\n            PriceChannel storage channel = _channels[tokenAddress];\r\n            uint length = channel.sheets.length & COLLECT_REWARD_MASK;\r\n            uint feeInfo = channel.feeInfo;\r\n\r\n            // Save reward\r\n            INestLedger(_nestLedgerAddress).carveETHReward {\r\n                value: (feeInfo & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) * (length - (feeInfo >> 128))\r\n            } (ntokenAddress);\r\n\r\n            // Manual settlement does not need to update Commission variables\r\n            channel.feeInfo = (feeInfo & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) | (length << 128);\r\n        }\r\n    }\r\n\r\n    // Convert PriceSheet to PriceSheetView\r\n    function _toPriceSheetView(PriceSheet memory sheet, uint index) private view returns (PriceSheetView memory) {\r\n\r\n        return PriceSheetView(\r\n            // Index number\r\n            uint32(index),\r\n            // Miner address\r\n            indexAddress(sheet.miner),\r\n            // The block number of this price sheet packaged\r\n            sheet.height,\r\n            // The remain number of this price sheet\r\n            sheet.remainNum,\r\n            // The eth number which miner will got\r\n            sheet.ethNumBal,\r\n            // The eth number which equivalent to token's value which miner will got\r\n            sheet.tokenNumBal,\r\n            // The pledged number of nest in this sheet. (Unit: 1000nest)\r\n            sheet.nestNum1k,\r\n            // The level of this sheet. 0 expresses initial price sheet, a value greater than 0 expresses bite price sheet\r\n            sheet.level,\r\n            // Post fee shares\r\n            sheet.shares,\r\n            // Price\r\n            uint152(decodeFloat(sheet.priceFloat))\r\n        );\r\n    }\r\n\r\n    /// @dev List sheets by page\r\n    /// @param tokenAddress Destination token address\r\n    /// @param offset Skip previous (offset) records\r\n    /// @param count Return (count) records\r\n    /// @param order Order. 0 reverse order, non-0 positive order\r\n    /// @return List of price sheets\r\n    function list(\r\n        address tokenAddress,\r\n        uint offset,\r\n        uint count,\r\n        uint order\r\n    ) override external view returns (PriceSheetView[] memory) {\r\n\r\n        PriceSheet[] storage sheets = _channels[tokenAddress].sheets;\r\n        PriceSheetView[] memory result = new PriceSheetView[](count);\r\n        uint length = sheets.length;\r\n        uint i = 0;\r\n\r\n        // Reverse order\r\n        if (order == 0) {\r\n\r\n            uint index = length - offset;\r\n            uint end = index > count ? index - count : 0;\r\n            while (index > end) {\r\n                --index;\r\n                result[i++] = _toPriceSheetView(sheets[index], index);\r\n            }\r\n        } \r\n        // Positive order\r\n        else {\r\n\r\n            uint index = offset;\r\n            uint end = index + count;\r\n            if (end > length) {\r\n                end = length;\r\n            }\r\n            while (index < end) {\r\n                result[i++] = _toPriceSheetView(sheets[index], index);\r\n                ++index;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /// @dev Estimated mining amount\r\n    /// @param tokenAddress Destination token address\r\n    /// @return Estimated mining amount\r\n    function estimate(address tokenAddress) override external view returns (uint) {\r\n\r\n        address ntokenAddress = INTokenController(_nTokenControllerAddress).getNTokenAddress(tokenAddress);\r\n        if (tokenAddress != ntokenAddress) {\r\n\r\n            PriceSheet[] storage sheets = _channels[tokenAddress].sheets;\r\n            uint index = sheets.length;\r\n            while (index > 0) {\r\n\r\n                PriceSheet memory sheet = sheets[--index];\r\n                if (uint(sheet.shares) > 0) {\r\n\r\n                    // Standard mining amount\r\n                    uint standard = (block.number - uint(sheet.height)) * 1 ether;\r\n                    // Genesis block number of ntoken\r\n                    uint genesisBlock = NEST_GENESIS_BLOCK;\r\n\r\n                    // Not nest, the calculation methods of standard mining amount and genesis block number are different\r\n                    if (ntokenAddress != NEST_TOKEN_ADDRESS) {\r\n                        // The standard mining amount of ntoken is 1/100 of nest\r\n                        standard /= 100;\r\n                        // Genesis block number of ntoken is obtained separately\r\n                        (genesisBlock,) = INToken(ntokenAddress).checkBlockInfo();\r\n                    }\r\n\r\n                    return standard * _redution(block.number - genesisBlock);\r\n                }\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /// @dev Query the quantity of the target quotation\r\n    /// @param tokenAddress Token address. The token can't mine. Please make sure you don't use the token address when calling\r\n    /// @param index The index of the sheet\r\n    /// @return minedBlocks Mined block period from previous block\r\n    /// @return totalShares Total shares of sheets in the block\r\n    function getMinedBlocks(\r\n        address tokenAddress,\r\n        uint index\r\n    ) override external view returns (uint minedBlocks, uint totalShares) {\r\n\r\n        PriceSheet[] storage sheets = _channels[tokenAddress].sheets;\r\n        PriceSheet memory sheet = sheets[index];\r\n\r\n        // The bite sheet or ntoken sheet dosen't mining\r\n        if (uint(sheet.shares) == 0) {\r\n            return (0, 0);\r\n        }\r\n\r\n        return _calcMinedBlocks(sheets, index, sheet);\r\n    }\r\n\r\n    /* ========== Accounts ========== */\r\n\r\n    /// @dev Withdraw assets\r\n    /// @param tokenAddress Destination token address\r\n    /// @param value The value to withdraw\r\n    function withdraw(address tokenAddress, uint value) override external {\r\n\r\n        // The user's locked nest and the mining pool's nest are stored together. When the nest is mined over,\r\n        // the problem of taking the locked nest as the ore drawing will appear\r\n        // As it will take a long time for nest to finish mining, this problem will not be considered for the time being\r\n        UINT storage balance = _accounts[_accountMapping[msg.sender]].balances[tokenAddress];\r\n        //uint balanceValue = balance.value;\r\n        //require(balanceValue >= value, \"NM:!balance\");\r\n        balance.value -= value;\r\n\r\n        // ntoken mining\r\n        uint ntokenBalance = INToken(tokenAddress).balanceOf(address(this));\r\n        if (ntokenBalance < value) {\r\n            // mining\r\n            INToken(tokenAddress).increaseTotal(value - ntokenBalance);\r\n        }\r\n\r\n        TransferHelper.safeTransfer(tokenAddress, msg.sender, value);\r\n    }\r\n\r\n    /// @dev View the number of assets specified by the user\r\n    /// @param tokenAddress Destination token address\r\n    /// @param addr Destination address\r\n    /// @return Number of assets\r\n    function balanceOf(address tokenAddress, address addr) override external view returns (uint) {\r\n        return _accounts[_accountMapping[addr]].balances[tokenAddress].value;\r\n    }\r\n\r\n    /// @dev Gets the index number of the specified address. If it does not exist, register\r\n    /// @param addr Destination address\r\n    /// @return The index number of the specified address\r\n    function _addressIndex(address addr) private returns (uint) {\r\n\r\n        uint index = _accountMapping[addr];\r\n        if (index == 0) {\r\n            // If it exceeds the maximum number that 32 bits can store, you can't continue to register a new account.\r\n            // If you need to support a new account, you need to update the contract\r\n            require((_accountMapping[addr] = index = _accounts.length) < 0x100000000, \"NM:!accounts\");\r\n            _accounts.push().addr = addr;\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    /// @dev Gets the address corresponding to the given index number\r\n    /// @param index The index number of the specified address\r\n    /// @return The address corresponding to the given index number\r\n    function indexAddress(uint index) override public view returns (address) {\r\n        return _accounts[index].addr;\r\n    }\r\n\r\n    /// @dev Gets the registration index number of the specified address\r\n    /// @param addr Destination address\r\n    /// @return 0 means nonexistent, non-0 means index number\r\n    function getAccountIndex(address addr) override external view returns (uint) {\r\n        return _accountMapping[addr];\r\n    }\r\n\r\n    /// @dev Get the length of registered account array\r\n    /// @return The length of registered account array\r\n    function getAccountCount() override external view returns (uint) {\r\n        return _accounts.length;\r\n    }\r\n\r\n    /* ========== Asset management ========== */\r\n\r\n    /// @dev Freeze token\r\n    /// @param balances Balances ledger\r\n    /// @param tokenAddress Destination token address\r\n    /// @param value token amount\r\n    function _freeze(mapping(address=>UINT) storage balances, address tokenAddress, uint value) private {\r\n\r\n        UINT storage balance = balances[tokenAddress];\r\n        uint balanceValue = balance.value;\r\n        if (balanceValue < value) {\r\n            balance.value = 0;\r\n            TransferHelper.safeTransferFrom(tokenAddress, msg.sender, address(this), value - balanceValue);\r\n        } else {\r\n            balance.value = balanceValue - value;\r\n        }\r\n    }\r\n\r\n    /// @dev Unfreeze token\r\n    /// @param balances Balances ledgerBalances ledger\r\n    /// @param tokenAddress Destination token address\r\n    /// @param value token amount\r\n    function _unfreeze(mapping(address=>UINT) storage balances, address tokenAddress, uint value) private {\r\n        UINT storage balance = balances[tokenAddress];\r\n        balance.value += value;\r\n    }\r\n\r\n    /// @dev freeze token and nest\r\n    /// @param balances Balances ledger\r\n    /// @param tokenAddress Destination token address\r\n    /// @param tokenValue token amount \r\n    /// @param nestValue nest amount\r\n    function _freeze2(\r\n        mapping(address=>UINT) storage balances, \r\n        address tokenAddress, \r\n        uint tokenValue, \r\n        uint nestValue\r\n    ) private {\r\n\r\n        UINT storage balance;\r\n        uint balanceValue;\r\n\r\n        // If tokenAddress is NEST_TOKEN_ADDRESS, add it to nestValue\r\n        if (NEST_TOKEN_ADDRESS == tokenAddress) {\r\n            nestValue += tokenValue;\r\n        }\r\n        // tokenAddress is not NEST_TOKEN_ADDRESS, unfreeze it\r\n        else {\r\n            balance = balances[tokenAddress];\r\n            balanceValue = balance.value;\r\n            if (balanceValue < tokenValue) {\r\n                balance.value = 0;\r\n                TransferHelper.safeTransferFrom(tokenAddress, msg.sender, address(this), tokenValue - balanceValue);\r\n            } else {\r\n                balance.value = balanceValue - tokenValue;\r\n            }\r\n        }\r\n\r\n        // Unfreeze nest\r\n        balance = balances[NEST_TOKEN_ADDRESS];\r\n        balanceValue = balance.value;\r\n        if (balanceValue < nestValue) {\r\n            balance.value = 0;\r\n            TransferHelper.safeTransferFrom(NEST_TOKEN_ADDRESS, msg.sender, address(this), nestValue - balanceValue);\r\n        } else {\r\n            balance.value = balanceValue - nestValue;\r\n        }\r\n    }\r\n\r\n    /// @dev Unfreeze token, ntoken and nest\r\n    /// @param balances Balances ledger\r\n    /// @param tokenAddress Destination token address\r\n    /// @param tokenValue token amount\r\n    /// @param ntokenAddress Destination ntoken address\r\n    /// @param ntokenValue ntoken amount\r\n    /// @param nestValue nest amount\r\n    function _unfreeze3(\r\n        mapping(address=>UINT) storage balances,\r\n        address tokenAddress,\r\n        uint tokenValue,\r\n        address ntokenAddress,\r\n        uint ntokenValue,\r\n        uint nestValue\r\n    ) private {\r\n\r\n        UINT storage balance;\r\n        \r\n        // If tokenAddress is ntokenAddress, add it to ntokenValue\r\n        if (ntokenAddress == tokenAddress) {\r\n            ntokenValue += tokenValue;\r\n        }\r\n        // tokenAddress is not ntokenAddress, unfreeze it\r\n        else {\r\n            balance = balances[tokenAddress];\r\n            balance.value += tokenValue;\r\n        }\r\n\r\n        // If ntokenAddress is NEST_TOKEN_ADDRESS, add it to nestValue\r\n        if (NEST_TOKEN_ADDRESS == ntokenAddress) {\r\n            nestValue += ntokenValue;\r\n        }\r\n        // ntokenAddress is NEST_TOKEN_ADDRESS, unfreeze it\r\n        else {\r\n            balance = balances[ntokenAddress];\r\n            balance.value += ntokenValue;\r\n        }\r\n\r\n        // Unfreeze nest\r\n        balance = balances[NEST_TOKEN_ADDRESS];\r\n        balance.value += nestValue;\r\n    }\r\n\r\n    /* ========== INestQuery ========== */\r\n    \r\n    // Check msg.sender\r\n    function _check() private view {\r\n        require(msg.sender == _nestPriceFacadeAddress || msg.sender == tx.origin);\r\n    }\r\n\r\n    /// @dev Get the latest trigger price\r\n    /// @param tokenAddress Destination token address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    function triggeredPrice(address tokenAddress) override public view returns (uint blockNumber, uint price) {\r\n\r\n        _check();\r\n        PriceInfo memory priceInfo = _channels[tokenAddress].price;\r\n\r\n        if (uint(priceInfo.remainNum) > 0) {\r\n            return (uint(priceInfo.height) + uint(_config.priceEffectSpan), decodeFloat(priceInfo.priceFloat));\r\n        }\r\n        \r\n        return (0, 0);\r\n    }\r\n\r\n    /// @dev Get the full information of latest trigger price\r\n    /// @param tokenAddress Destination token address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    /// @return avgPrice Average price\r\n    /// @return sigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \r\n    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\r\n    ///         it means that the volatility has exceeded the range that can be expressed\r\n    function triggeredPriceInfo(address tokenAddress) override public view returns (\r\n        uint blockNumber,\r\n        uint price,\r\n        uint avgPrice,\r\n        uint sigmaSQ\r\n    ) {\r\n\r\n        _check();\r\n        PriceInfo memory priceInfo = _channels[tokenAddress].price;\r\n\r\n        if (uint(priceInfo.remainNum) > 0) {\r\n            return (\r\n                uint(priceInfo.height) + uint(_config.priceEffectSpan),\r\n                decodeFloat(priceInfo.priceFloat),\r\n                decodeFloat(priceInfo.avgFloat),\r\n                (uint(priceInfo.sigmaSQ) * 1 ether) >> 48\r\n            );\r\n        }\r\n\r\n        return (0, 0, 0, 0);\r\n    }\r\n\r\n    /// @dev Find the price at block number\r\n    /// @param tokenAddress Destination token address\r\n    /// @param height Destination block number\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    function findPrice(\r\n        address tokenAddress,\r\n        uint height\r\n    ) override external view returns (uint blockNumber, uint price) {\r\n\r\n        _check();\r\n        PriceSheet[] storage sheets = _channels[tokenAddress].sheets;\r\n        uint priceEffectSpan = uint(_config.priceEffectSpan);\r\n\r\n        uint length = sheets.length;\r\n        uint index = 0;\r\n        uint sheetHeight;\r\n        height -= priceEffectSpan;\r\n        {\r\n            // If there is no sheet in this channel, length is 0, length - 1 will overflow,\r\n            uint right = length - 1;\r\n            uint left = 0;\r\n            // Find the index use Binary Search\r\n            while (left < right) {\r\n\r\n                index = (left + right) >> 1;\r\n                sheetHeight = uint(sheets[index].height);\r\n                if (height > sheetHeight) {\r\n                    left = ++index;\r\n                } else if (height < sheetHeight) {\r\n                    // When index = 0, this statement will have an underflow exception, which usually \r\n                    // indicates that the effective block height passed during the call is lower than \r\n                    // the block height of the first quotation\r\n                    right = --index;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Calculate price\r\n        uint totalEthNum = 0;\r\n        uint totalTokenValue = 0;\r\n        uint h = 0;\r\n        uint remainNum;\r\n        PriceSheet memory sheet;\r\n\r\n        // Find sheets forward\r\n        for (uint i = index; i < length;) {\r\n\r\n            sheet = sheets[i++];\r\n            sheetHeight = uint(sheet.height);\r\n            if (height < sheetHeight) {\r\n                break;\r\n            }\r\n            remainNum = uint(sheet.remainNum);\r\n            if (remainNum > 0) {\r\n                if (h == 0) {\r\n                    h = sheetHeight;\r\n                } else if (h != sheetHeight) {\r\n                    break;\r\n                }\r\n                totalEthNum += remainNum;\r\n                totalTokenValue += decodeFloat(sheet.priceFloat) * remainNum;\r\n            }\r\n        }\r\n\r\n        // Find sheets backward\r\n        while (index > 0) {\r\n\r\n            sheet = sheets[--index];\r\n            remainNum = uint(sheet.remainNum);\r\n            if (remainNum > 0) {\r\n                sheetHeight = uint(sheet.height);\r\n                if (h == 0) {\r\n                    h = sheetHeight;\r\n                } else if (h != sheetHeight) {\r\n                    break;\r\n                }\r\n                totalEthNum += remainNum;\r\n                totalTokenValue += decodeFloat(sheet.priceFloat) * remainNum;\r\n            }\r\n        }\r\n\r\n        if (totalEthNum > 0) {\r\n            return (h + priceEffectSpan, totalTokenValue / totalEthNum);\r\n        }\r\n        return (0, 0);\r\n    }\r\n\r\n    /// @dev Get the latest effective price\r\n    /// @param tokenAddress Destination token address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    function latestPrice(address tokenAddress) override public view returns (uint blockNumber, uint price) {\r\n\r\n        _check();\r\n        PriceSheet[] storage sheets = _channels[tokenAddress].sheets;\r\n        PriceSheet memory sheet;\r\n\r\n        uint priceEffectSpan = uint(_config.priceEffectSpan);\r\n        uint h = block.number - priceEffectSpan;\r\n        uint index = sheets.length;\r\n        uint totalEthNum = 0;\r\n        uint totalTokenValue = 0;\r\n        uint height = 0;\r\n\r\n        for (; ; ) {\r\n\r\n            bool flag = index == 0;\r\n            if (flag || height != uint((sheet = sheets[--index]).height)) {\r\n                if (totalEthNum > 0 && height <= h) {\r\n                    return (height + priceEffectSpan, totalTokenValue / totalEthNum);\r\n                }\r\n                if (flag) {\r\n                    break;\r\n                }\r\n                totalEthNum = 0;\r\n                totalTokenValue = 0;\r\n                height = uint(sheet.height);\r\n            }\r\n\r\n            uint remainNum = uint(sheet.remainNum);\r\n            totalEthNum += remainNum;\r\n            totalTokenValue += decodeFloat(sheet.priceFloat) * remainNum;\r\n        }\r\n\r\n        return (0, 0);\r\n    }\r\n\r\n    /// @dev Get the last (num) effective price\r\n    /// @param tokenAddress Destination token address\r\n    /// @param count The number of prices that want to return\r\n    /// @return An array which length is num * 2, each two element expresses one price like blockNumber｜price\r\n    function lastPriceList(address tokenAddress, uint count) override external view returns (uint[] memory) {\r\n\r\n        _check();\r\n        PriceSheet[] storage sheets = _channels[tokenAddress].sheets;\r\n        PriceSheet memory sheet;\r\n        uint[] memory array = new uint[](count <<= 1);\r\n\r\n        uint priceEffectSpan = uint(_config.priceEffectSpan);\r\n        uint h = block.number - priceEffectSpan;\r\n        uint index = sheets.length;\r\n        uint totalEthNum = 0;\r\n        uint totalTokenValue = 0;\r\n        uint height = 0;\r\n\r\n        for (uint i = 0; i < count;) {\r\n\r\n            bool flag = index == 0;\r\n            if (flag || height != uint((sheet = sheets[--index]).height)) {\r\n                if (totalEthNum > 0 && height <= h) {\r\n                    array[i++] = height + priceEffectSpan;\r\n                    array[i++] = totalTokenValue / totalEthNum;\r\n                }\r\n                if (flag) {\r\n                    break;\r\n                }\r\n                totalEthNum = 0;\r\n                totalTokenValue = 0;\r\n                height = uint(sheet.height);\r\n            }\r\n\r\n            uint remainNum = uint(sheet.remainNum);\r\n            totalEthNum += remainNum;\r\n            totalTokenValue += decodeFloat(sheet.priceFloat) * remainNum;\r\n        }\r\n\r\n        return array;\r\n    } \r\n\r\n    /// @dev Returns the results of latestPrice() and triggeredPriceInfo()\r\n    /// @param tokenAddress Destination token address\r\n    /// @return latestPriceBlockNumber The block number of latest price\r\n    /// @return latestPriceValue The token latest price. (1eth equivalent to (price) token)\r\n    /// @return triggeredPriceBlockNumber The block number of triggered price\r\n    /// @return triggeredPriceValue The token triggered price. (1eth equivalent to (price) token)\r\n    /// @return triggeredAvgPrice Average price\r\n    /// @return triggeredSigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \r\n    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\r\n    ///         it means that the volatility has exceeded the range that can be expressed\r\n    function latestPriceAndTriggeredPriceInfo(address tokenAddress) override external view \r\n    returns (\r\n        uint latestPriceBlockNumber,\r\n        uint latestPriceValue,\r\n        uint triggeredPriceBlockNumber,\r\n        uint triggeredPriceValue,\r\n        uint triggeredAvgPrice,\r\n        uint triggeredSigmaSQ\r\n    ) {\r\n        (latestPriceBlockNumber, latestPriceValue) = latestPrice(tokenAddress);\r\n        (\r\n            triggeredPriceBlockNumber, \r\n            triggeredPriceValue, \r\n            triggeredAvgPrice, \r\n            triggeredSigmaSQ\r\n        ) = triggeredPriceInfo(tokenAddress);\r\n    }\r\n\r\n    /// @dev Get the latest trigger price. (token and ntoken)\r\n    /// @param tokenAddress Destination token address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    /// @return ntokenBlockNumber The block number of ntoken price\r\n    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\r\n    function triggeredPrice2(address tokenAddress) override external view returns (\r\n        uint blockNumber,\r\n        uint price,\r\n        uint ntokenBlockNumber,\r\n        uint ntokenPrice\r\n    ) {\r\n        (blockNumber, price) = triggeredPrice(tokenAddress);\r\n        (ntokenBlockNumber, ntokenPrice) = triggeredPrice(_addressCache[tokenAddress]);\r\n    }\r\n\r\n    /// @dev Get the full information of latest trigger price. (token and ntoken)\r\n    /// @param tokenAddress Destination token address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    /// @return avgPrice Average price\r\n    /// @return sigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \r\n    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447, \r\n    ///         it means that the volatility has exceeded the range that can be expressed\r\n    /// @return ntokenBlockNumber The block number of ntoken price\r\n    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\r\n    /// @return ntokenAvgPrice Average price of ntoken\r\n    /// @return ntokenSigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that\r\n    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\r\n    ///         it means that the volatility has exceeded the range that can be expressed\r\n    function triggeredPriceInfo2(address tokenAddress) override external view returns (\r\n        uint blockNumber,\r\n        uint price,\r\n        uint avgPrice,\r\n        uint sigmaSQ,\r\n        uint ntokenBlockNumber,\r\n        uint ntokenPrice,\r\n        uint ntokenAvgPrice,\r\n        uint ntokenSigmaSQ\r\n    ) {\r\n        (blockNumber, price, avgPrice, sigmaSQ) = triggeredPriceInfo(tokenAddress);\r\n        (\r\n            ntokenBlockNumber,\r\n            ntokenPrice,\r\n            ntokenAvgPrice,\r\n            ntokenSigmaSQ\r\n        ) = triggeredPriceInfo(_addressCache[tokenAddress]);\r\n    }\r\n\r\n    /// @dev Get the latest effective price. (token and ntoken)\r\n    /// @param tokenAddress Destination token address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    /// @return ntokenBlockNumber The block number of ntoken price\r\n    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\r\n    function latestPrice2(address tokenAddress) override external view returns (\r\n        uint blockNumber,\r\n        uint price,\r\n        uint ntokenBlockNumber,\r\n        uint ntokenPrice\r\n    ) {\r\n        (blockNumber, price) = latestPrice(tokenAddress);\r\n        (ntokenBlockNumber, ntokenPrice) = latestPrice(_addressCache[tokenAddress]);\r\n    }\r\n\r\n    /* ========== Tools and methods ========== */\r\n\r\n    /// @dev Encode the uint value as a floating-point representation in the form of fraction * 16 ^ exponent\r\n    /// @param value Destination uint value\r\n    /// @return float format\r\n    function encodeFloat(uint value) private pure returns (uint56) {\r\n\r\n        uint exponent = 0; \r\n        while (value > 0x3FFFFFFFFFFFF) {\r\n            value >>= 4;\r\n            ++exponent;\r\n        }\r\n        return uint56((value << 6) | exponent);\r\n    }\r\n\r\n    /// @dev Decode the floating-point representation of fraction * 16 ^ exponent to uint\r\n    /// @param floatValue fraction value\r\n    /// @return decode format\r\n    function decodeFloat(uint56 floatValue) private pure returns (uint) {\r\n        return (uint(floatValue) >> 6) << ((uint(floatValue) & 0x3F) << 2);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Post\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"}],\"name\":\"closeList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ntokenIndices\",\"type\":\"uint256[]\"}],\"name\":\"closeList2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"estimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"}],\"name\":\"findPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccountCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getAccountIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"postEthUnit\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"postFeeUnit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minerNestReward\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minerNTokenReward\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"doublePostThreshold\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"ntokenMinedBlockLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"maxBiteNestedLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"priceEffectSpan\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pledgeNest\",\"type\":\"uint16\"}],\"internalType\":\"struct INestMining.Config\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getMinedBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minedBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getNTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"indexAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nestGovernanceAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"lastPriceList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"latestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"latestPrice2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ntokenBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ntokenPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"latestPriceAndTriggeredPriceInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"latestPriceBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestPriceValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"triggeredPriceBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"triggeredPriceValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"triggeredAvgPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"triggeredSigmaSQ\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"order\",\"type\":\"uint256\"}],\"name\":\"list\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"remainNum\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"ethNumBal\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenNumBal\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"nestNum1k\",\"type\":\"uint24\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"shares\",\"type\":\"uint8\"},{\"internalType\":\"uint152\",\"name\":\"price\",\"type\":\"uint152\"}],\"internalType\":\"struct INestMining.PriceSheetView[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountPerEth\",\"type\":\"uint256\"}],\"name\":\"post\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountPerEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ntokenAmountPerEth\",\"type\":\"uint256\"}],\"name\":\"post2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"resetNTokenCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"postEthUnit\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"postFeeUnit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minerNestReward\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minerNTokenReward\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"doublePostThreshold\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"ntokenMinedBlockLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"maxBiteNestedLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"priceEffectSpan\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pledgeNest\",\"type\":\"uint16\"}],\"internalType\":\"struct INestMining.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ntokenAddress\",\"type\":\"address\"}],\"name\":\"setNTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"stat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takeNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTokenAmountPerEth\",\"type\":\"uint256\"}],\"name\":\"takeEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takeNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTokenAmountPerEth\",\"type\":\"uint256\"}],\"name\":\"takeToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"triggeredPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"triggeredPrice2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ntokenBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ntokenPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"triggeredPriceInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"avgPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaSQ\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"triggeredPriceInfo2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"avgPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaSQ\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ntokenBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ntokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ntokenAvgPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ntokenSigmaSQ\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nestGovernanceAddress\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NestMining","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"256","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4a422b7f45ff38588d53a40d3c26f6821d59a8727c3ddeea86df8d77870b18ce"}]}