{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PaymentSplitter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ncontract PaymentSplitter {\\n    uint public totalSplitters = 0;\\n    \\n    mapping(uint => address[]) splitterAddresses;\\n    mapping(uint => uint[]) splitterPercentages;\\n    \\n    function createSplitter(address[] memory addresses, uint[] memory percentages) public returns (uint) {\\n        require(addresses.length == percentages.length, \\\"addresses and percentages must have same length\\\");\\n        uint percentagesSum = 0;\\n        for (uint i = 0; i < percentages.length; i++) {\\n            percentagesSum += percentages[i];\\n        }\\n        require(percentagesSum == 10000000, \\\"percentages sum must be 100%\\\");\\n        \\n        uint splitterIndex = totalSplitters++;\\n        \\n        splitterAddresses[splitterIndex] = addresses;\\n        splitterPercentages[splitterIndex] = percentages;\\n        \\n        return splitterIndex;\\n    }\\n    \\n    function getSplitter(uint id) public view returns (address[] memory addresses, uint[] memory percentages) {\\n        uint length = splitterAddresses[id].length;\\n        address[] memory _addresses = new address[](length);\\n        uint[] memory _percentages = new uint[](length);\\n        \\n        for (uint i = 0; i < length; i++) {\\n            _addresses[i] = splitterAddresses[id][i];\\n            _percentages[i] = splitterPercentages[id][i];\\n        }\\n        \\n        return (_addresses, _percentages);\\n    }\\n    \\n    function pay(uint id) public payable {\\n        require(id < totalSplitters, \\\"splitter does not exists\\\");\\n        uint length = splitterAddresses[id].length;\\n        for (uint i = 0; i < length; i++) {\\n            payable(splitterAddresses[id][i]).transfer(msg.value * splitterPercentages[id][i] / 10000000);\\n        }\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percentages\",\"type\":\"uint256[]\"}],\"name\":\"createSplitter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getSplitter\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percentages\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSplitters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PaymentSplitter","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}