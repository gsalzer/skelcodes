{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.2.0 https://hardhat.org\r\n\r\n// File openzeppelin-solidity/contracts/utils/introspection/IERC165.sol@v4.0.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/token/ERC721/IERC721.sol@v4.0.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `from` cannot be the zero address.\r\n      * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol@v4.0.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/token/ERC721/extensions/IERC721Metadata.sol@v4.0.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/token/ERC721/extensions/IERC721Enumerable.sol@v4.0.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/utils/Address.sol@v4.0.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/utils/Context.sol@v4.0.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/utils/Strings.sol@v4.0.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant alphabet = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = alphabet[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/utils/introspection/ERC165.sol@v4.0.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/token/ERC721/ERC721.sol@v4.0.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping (uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping (address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping (uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC721).interfaceId\r\n            || interfaceId == type(IERC721Metadata).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0\r\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\r\n            : '';\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\r\n     * in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\n        private returns (bool)\r\n    {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    // solhint-disable-next-line no-inline-assembly\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\r\n}\r\n\r\n\r\n// File flatgreenearth/contracts/Acre.sol\r\n\r\n\r\n\tpragma solidity ^ 0.8.0;\r\n\tcontract GreenPointLandReserves{\r\n\t\taddress THIS = address(this);\r\n\t\tuint $ = 1e18;\r\n\t\tuint genesis;\r\n\t\tTotem public totemNFT;\r\n\t\tERC20 MVT = ERC20(0x3D46454212c61ECb7b31248047Fa033120B88668);\r\n\t\tERC20 MDT = ERC20(0x32A087D5fdF8c84eC32554c56727a7C81124544E);\r\n\r\n\t\tuint liquidityReserve;\r\n\t\tuint mvtRewardsPool;\r\n\r\n\t\tuint constant DAYS = 300;\r\n\t\tconstructor(){\r\n\t\t\tgenesis = block.timestamp;\r\n\t\t\tnextFloorRaisingTime = genesis + 86400 * 90;\r\n\t\t\ttotemNFT = new Totem(\"Totem\",\"TOTEM\");\r\n\t\t\tGLR_nonprofit = 0xdeC30c12CfAfd3a1647a1a987A04b1b153bA3fBF;\r\n\t\t\trolloutAmount = $ * 1000;// MVT / day\r\n\t\t}\r\n\r\n\t\tfunction shiftOwnership(address addr) public{\r\n\t\t\trequire(msg.sender == GLR_nonprofit);\r\n\t\t\tGLR_nonprofit = addr;\r\n\t\t}\r\n\r\n\t\tfunction GLR_pullFunds() public{\r\n\t\t\trequire(msg.sender == GLR_nonprofit && GLR_funds > 0);\r\n\t\t\t(bool success, ) = GLR_nonprofit.call{value:GLR_funds}(\"\");\r\n\t        require(success, \"Transfer failed.\");\r\n\t\t\tGLR_funds = 0;\r\n\t\t}\r\n\r\n\t    function globalData() public view returns(uint _MVT_to_rollout, uint _mvt5xHodlPool, uint _nextFloorRaisingTime, uint _floorPrice, uint _totalACRESupply, uint _totalAcreWeight, uint _totalTotemWeight){\r\n\t    \treturn (MVT_to_rollout, mvt5xHodlPool, nextFloorRaisingTime, floorPrice, _totalSupply, totalShares[ETHpool], totalTotemWeight);\r\n\t    }\r\n\t    \r\n\t    function userData(address account) public view returns(uint acreBalance, uint totemWeight, uint acreDividends, uint totemDividends, bool MDT_approval, bool MVT_approval){\r\n\t    \treturn (balanceOf(account), shares[MVTpool][account] , dividendsOf(ETHpool, account), dividendsOf(MVTpool, account), MVT.allowance(account,THIS)>$*1000000, MDT.allowance(account,THIS)>$*1000000);\r\n\t    }\r\n\r\n\t    function userData2(address account) public view returns(uint MDT_balance, uint MVT_balance){\r\n\t    \treturn ( MDT.balanceOf(account), MVT.balanceOf(account) );\r\n\t    }\r\n\r\n\t\taddress GLR_nonprofit;\r\n\t\tuint public GLR_funds;\r\n\t\tuint mvt5xHodlPool;\r\n\t\tevent PurchaseAcre(address buyer, uint acreBought);\r\n\t\tfunction purchaseAcre() public payable{\r\n\t\t\trequire(msg.value > 0);\r\n\t\t\tuint val = msg.value;\r\n\t\t\tmint(msg.sender, val);\r\n\t\t\tuint forBuyingMVT = val * (_totalSupply - totalTotemWeight) / _totalSupply;\r\n\t\t\tGLR_funds += val - forBuyingMVT;\r\n\t\t\tmvt5xHodlPool += forBuyingMVT;\r\n\t\t\temit PurchaseAcre(msg.sender, val);\r\n\t\t\trolloutDepositedMVTRewards();\r\n\t\t}\r\n\r\n\r\n\t\tuint nextFloorRaisingTime;\r\n\t\tuint floorPrice = $/20000;\r\n\t\tbool firstBump = true;\r\n\t\tfunction sell_MVT(uint amount) public{\r\n\t\t\taddress payable sender = payable(msg.sender);\r\n\t\t\tMVT.transferFrom(sender, THIS, amount);\r\n\t\t\tuint NOW = block.timestamp;\r\n\t\t\t\r\n\t\t\tif(NOW >= nextFloorRaisingTime){\r\n\t\t\t\tif(firstBump){\r\n\t\t\t\t\tfirstBump = false;\r\n\t\t\t\t\tfloorPrice = floorPrice * 5;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tfloorPrice = floorPrice * 3;\r\n\t\t\t\t}\r\n\t\t\t\tnextFloorRaisingTime += 300 * 86400;\r\n\t\t\t}\r\n\r\n\t\t\tuint cost = floorPrice*amount/$;\r\n\t\t\trequire( mvt5xHodlPool >= cost && cost > 0 );\r\n\t\t\tmvt5xHodlPool -= cost;\r\n\r\n\t\t\trequire( totalShares[MVTpool] > 0 );\r\n\t\t\tearningsPer[MVTpool] += amount * scaleFactor / totalShares[MVTpool];\r\n\r\n\t\t\t(bool success, ) = sender.call{value:cost}(\"\");\r\n\t        require(success, \"Transfer failed.\");\r\n\t\t}\r\n\r\n\t\tmapping(bool => mapping(address => uint)) shares;\r\n\t\tmapping(bool => uint) totalShares;\r\n\t\tmapping(bool => uint) earningsPer;\r\n\t\tmapping(bool => mapping(address => uint)) payouts;\r\n\t\tmapping(bool => mapping(address => uint)) earnings;\r\n\t\tuint256 constant scaleFactor = 0x10000000000000000;\r\n\t\tbool constant ETHpool = false;\r\n\t\tbool constant MVTpool = true;\r\n\r\n\t    function withdraw(bool pool) public{\r\n\t    \taddress payable sender = payable(msg.sender);\r\n\t    \tupdate(pool, sender);\r\n\r\n\t    \tuint earned = earnings[pool][sender];\r\n\t    \tearnings[pool][sender] = 0;\r\n\t    \trequire(earned > 0);\r\n\r\n\t    \tif(pool == ETHpool){\r\n\t\t\t\t(bool success, ) = sender.call{value:earned}(\"\");\r\n\t        \trequire(success, \"Transfer failed.\");\r\n\t    \t}else{\r\n\t    \t\tMVT.transfer(sender, earned);\r\n\t    \t}\r\n\t    }\r\n\r\n\t\tfunction addShares(bool pool, address account, uint amount) internal{\r\n\t\t\tupdate(pool, account);\r\n\t\t\ttotalShares[pool] += amount;\r\n\t\t\tshares[pool][account] += amount;\r\n\t\t}\r\n\r\n\t\tfunction removeShares(bool pool, address account, uint amount) internal{\r\n\t\t\tupdate(pool, account);\r\n\t\t\ttotalShares[pool] -= amount;\r\n\t\t\tshares[pool][account] -= amount;\r\n\t\t}\r\n\r\n\t\tfunction dividendsOf(bool pool, address account) public view returns(uint){\r\n\t\t\tuint owedPerShare = earningsPer[pool] - payouts[pool][account];\r\n\t\t\treturn shares[pool][account] * owedPerShare / scaleFactor;\r\n\t\t}\r\n\t\t\r\n\t\tfunction update(bool pool, address account) internal {\r\n\t\t\tuint newMoney = dividendsOf(pool, account);\r\n\t        payouts[pool][account] = earningsPer[pool];\r\n\t\t\tearnings[pool][account] += newMoney;\t\t\r\n\t    }\r\n\r\n\t    function payEthToAcreStakers() payable public{\r\n\t    \tuint val = msg.value;\r\n\t    \trequire(totalShares[ETHpool]>0);\r\n\t    \tearningsPer[ETHpool] += val * scaleFactor / totalShares[ETHpool];\r\n\t    }\r\n\r\n\t    uint rolloutAmount;\r\n\t    uint MVT_to_rollout;\r\n\t    uint lastRollout;\r\n\r\n\t    event DepositMVTForRewards(address addr, uint amount);\r\n\t    function depositMVTForRewards(uint amount) public{\r\n\t    \tMVT.transferFrom(msg.sender, THIS, amount);\r\n\t    \tMVT_to_rollout += amount;\r\n\t    \temit DepositMVTForRewards(msg.sender, amount);\r\n\t    }\r\n\r\n\t    event RolloutDepositedMVTRewards(uint amountToDistribute);\r\n\t    function rolloutDepositedMVTRewards() public{\r\n\t    \tuint NOW = block.timestamp;\r\n\t    \tif( (NOW - lastRollout) > 86400  && totalShares[MVTpool] > 0 &&  MVT_to_rollout > 0){\r\n    \t\t\tlastRollout = NOW;\r\n    \t\t\tuint amountToDistribute = MVT_to_rollout>rolloutAmount?rolloutAmount:MVT_to_rollout;\r\n    \t\t\tMVT_to_rollout -= amountToDistribute;\r\n    \t\t\tearningsPer[MVTpool] += amountToDistribute * scaleFactor / totalShares[MVTpool];\r\n    \t\t\temit RolloutDepositedMVTRewards(amountToDistribute);\r\n\t    \t}\r\n\t    }\r\n\r\n\t    string public name = \"Acre\";\r\n\t    string public symbol = \"ACRE\";\r\n\t    uint8 constant public decimals = 18;\r\n\t\tmapping(address => uint256) public balances;\r\n\t\tuint _totalSupply;\r\n\r\n\t    mapping(address => mapping(address => uint)) approvals;\r\n\r\n\t\tevent Transfer(\r\n\t\t\taddress indexed from,\r\n\t\t\taddress indexed to,\r\n\t\t\tuint256 amount,\r\n\t\t\tbytes data\r\n\t\t);\r\n\t\tevent Transfer(\r\n\t\t\taddress indexed from,\r\n\t\t\taddress indexed to,\r\n\t\t\tuint256 amount\r\n\t\t);\r\n\t\t\r\n\t\tevent Mint(\r\n\t\t\taddress indexed addr,\r\n\t\t\tuint256 amount\r\n\t\t);\r\n\r\n\t\tfunction mint(address _address, uint _value) internal{\r\n\t\t\tbalances[_address] += _value;\r\n\t\t\t_totalSupply += _value;\r\n\t\t\tif(!isContract(_address)) addShares(ETHpool, _address, _value);\r\n\t\t\temit Mint(_address, _value);\r\n\t\t}\r\n\r\n\t\tfunction totalSupply() public view returns (uint256) {\r\n\t        return _totalSupply;\r\n\t    }\r\n\r\n\t    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n\t\t\treturn balances[_owner];\r\n\t\t}\r\n\r\n\t\tfunction transfer(address _to, uint _value) public virtual returns (bool) {\r\n\t\t\tbytes memory empty;\r\n\t\t\treturn transferToAddress(_to, _value, empty);\r\n\t\t}\r\n\r\n\t\tfunction transfer(address _to, uint _value, bytes memory _data) public virtual returns (bool) {\r\n\t\t\tif( isContract(_to) ){\r\n\t\t\t\treturn transferToContract(_to, _value, _data);\r\n\t\t\t}else{\r\n\t\t\t\treturn transferToAddress(_to, _value, _data);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//function that is called when transaction target is an address\r\n\t\tfunction transferToAddress(address _to, uint _value, bytes memory _data) private returns (bool) {\r\n\t\t\tmoveTokens(msg.sender, _to, _value);\r\n\t\t\temit Transfer(msg.sender, _to, _value, _data);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t//function that is called when transaction target is a contract\r\n\t\tfunction transferToContract(address _to, uint _value, bytes memory _data) private returns (bool) {\r\n\t\t\tmoveTokens(msg.sender, _to, _value);\r\n\t\t\tERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n\t\t\treceiver.tokenFallback(msg.sender, _value, _data);\r\n\t\t\temit Transfer(msg.sender, _to, _value, _data);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tfunction moveTokens(address _from, address _to, uint _amount) internal virtual{\r\n\t\t\trequire( _amount <= balances[_from] );\r\n\t\t\t//update balances\r\n\t\t\tbalances[_from] -= _amount;\r\n\t\t\tbalances[_to] += _amount;\r\n\r\n\t\t\tif(!isContract(_from)) removeShares(ETHpool, _from, _amount);\r\n\t\t\tif(!isContract(_to)) addShares(ETHpool, _to, _amount);\r\n\t        emit Transfer(_from, _to, _amount);\r\n\t\t}\r\n\r\n\t    function allowance(address src, address guy) public view returns (uint) {\r\n\t        return approvals[src][guy];\r\n\t    }\r\n\t  \t\r\n\t    function transferFrom(address src, address dst, uint amount) public returns (bool){\r\n\t        address sender = msg.sender;\r\n\t        require(approvals[src][sender] >=  amount);\r\n\t        require(balances[src] >= amount);\r\n\t        approvals[src][sender] -= amount;\r\n\t        moveTokens(src,dst,amount);\r\n\t        bytes memory empty;\r\n\t        emit Transfer(sender, dst, amount, empty);\r\n\t        return true;\r\n\t    }\r\n\r\n\t    event Approval(address indexed src, address indexed guy, uint amount);\r\n\t    function approve(address guy, uint amount) public returns (bool) {\r\n\t        address sender = msg.sender;\r\n\t        approvals[sender][guy] = amount;\r\n\r\n\t        emit Approval( sender, guy, amount );\r\n\t        return true;\r\n\t    }\r\n\r\n\t    function isContract(address _addr) public view returns (bool is_contract) {\r\n\t\t\tuint length;\r\n\t\t\tassembly {\r\n\t\t\t\t//retrieve the size of the code on target address, this needs assembly\r\n\t\t\t\tlength := extcodesize(_addr)\r\n\t\t\t}\r\n\t\t\tif(length>0) {\r\n\t\t\t\treturn true;\r\n\t\t\t}else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tuint NFTcount;\r\n\t\t\r\n\t    mapping(address => uint[]) public totemsHad;\r\n\t    mapping(address => mapping(uint => bool)) public alreadyHadAtleastOnce;\r\n\r\n\t    uint totalTotemWeight;\r\n\t    event AcreToTotem(address account, uint amount, bool autoStake);\r\n\t\tfunction acreToTotem(uint amount, bool autoStake) public returns(uint TOTEM_ID){\r\n\t\t\taddress sender = msg.sender;\r\n\t\t\tMDT.transferFrom(sender, THIS, $);\r\n\r\n\t\t\ttotemNFT.mintUniqueTokenTo(autoStake?THIS:sender, NFTcount, amount);\r\n\t\t\tif(autoStake){stakeNFT(sender,NFTcount);}else{\r\n\t\t\t\ttotemsHad[sender].push(NFTcount);\r\n\t\t\t\talreadyHadAtleastOnce[sender][NFTcount] == true;\r\n\t\t\t}\r\n\r\n\t\t\tNFTcount += 1;\r\n\t\t\ttotalTotemWeight += amount;\r\n\t\t\tmoveTokens(sender, THIS, amount);\r\n\t        bytes memory empty;\r\n\t        emit Transfer(sender, THIS, amount, empty);\r\n\t        emit AcreToTotem(sender, amount, autoStake);\r\n\t        return NFTcount - 1;\r\n\t\t}\r\n\r\n\t\tevent TotemToMDT(address lastOwner, uint totemID);\r\n\t\tfunction totemToMDT(uint totemID) public{\r\n\t\t\taddress sender = msg.sender;\r\n\t\t\trequire(sender == staker[totemID]);\r\n\t\t\tMDT.transfer(sender, $);\r\n\t\t\tuint totemWeight = totemNFT.getWeight(totemID);\r\n\t        removeShares( MVTpool, sender, totemWeight );\r\n\t        staker[totemID] = address(0);\r\n\r\n\t        uint burnage = totemWeight * totalTotemWeight / _totalSupply;\r\n        \tmoveTokens(THIS, sender, totemWeight - burnage);\r\n        \t_totalSupply -= burnage;\r\n        \tbalances[THIS] -= burnage;\r\n\r\n\t        totalTotemWeight -= totemWeight;\r\n\t        \r\n\t\t\temit TotemToMDT(sender, totemID);\r\n\t\t}\r\n\r\n\t\tmapping(uint => address) public staker;\r\n\t\tevent StakeNFT(address who, uint tokenID);\r\n\t\tfunction stakeNFT(address who, uint256 tokenID) private{\r\n\t\t\tstaker[tokenID] = who;\r\n\r\n\t\t\tif( !alreadyHadAtleastOnce[who][tokenID] ){\r\n\t\t\t\ttotemsHad[who].push(tokenID);\r\n\t\t\t\talreadyHadAtleastOnce[who][tokenID] == true;\r\n\t\t\t}\r\n\r\n\t\t\taddShares( MVTpool, who, totemNFT.getWeight(tokenID) );\r\n\t\t\temit StakeNFT(who, tokenID);\r\n\t\t}\r\n\r\n\t\tevent UnstakeNFT(address unstaker, uint tokenID);\r\n\t\tfunction unstakeNFT(uint tokenID) public{\r\n\t\t\taddress sender = msg.sender;\r\n\t\t\trequire(staker[tokenID] == sender);\r\n\t        removeShares( MVTpool, sender, totemNFT.getWeight(tokenID) );\r\n\t        staker[tokenID] = address(0);\r\n\r\n\t        totemNFT.transferFrom(THIS, sender, tokenID);\r\n\t        emit UnstakeNFT(sender, tokenID);\r\n\t\t}\r\n\r\n\t\tfunction viewTotems(address account) public view returns(uint[] memory tokenIDs, bool[] memory currentlyStaking, uint[] memory acreWeight, bool[] memory owned){\r\n\t\t\tuint L = totemsHad[account].length;\r\n\r\n\t\t\ttokenIDs = new uint[](L);\r\n\t\t\tacreWeight = new uint[](L);\r\n\t\t\tcurrentlyStaking = new bool[](L);\r\n\t\t\towned = new bool[](L);\r\n\r\n\t\t\tuint tID;\r\n\t\t\tfor(uint c = 0; c<L; c+=1){\r\n\t\t\t\ttID = totemsHad[account][c];\r\n\t\t\t\ttokenIDs[c] = tID;\r\n\t\t\t\tacreWeight[c] = totemNFT.getWeight(tID);\r\n\t\t\t\tcurrentlyStaking[c] = staker[tID] == account;\r\n\t\t\t\towned[c] = ( staker[tID] == account || totemNFT.ownerOf(tID) == account );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction onERC721Received(address from, uint256 tokenID, bytes memory _data) public returns(bytes4) {\r\n\t\t\tbytes4 empty;\r\n\t\t\trequire( msg.sender == address(totemNFT) );\r\n\t\t\tstakeNFT(from, tokenID);\r\n\t        return empty;\r\n\t    }\r\n\t}\r\n\r\n\tabstract contract ERC20{\r\n\t\tfunction totalSupply() external virtual view returns (uint256);\r\n\t    function balanceOf(address account) external virtual view returns (uint256);\r\n\t    function allowance(address owner, address spender) external virtual view returns (uint256);\r\n\t    function transfer(address recipient, uint256 amount) external virtual returns (bool);\r\n\t    function approve(address spender, uint256 amount) external virtual returns (bool);\r\n\t    function transferFrom(address sender, address recipient, uint256 amount) external virtual returns (bool);\r\n\t}\r\n\r\n\tcontract Totem is ERC721 {\r\n\t    constructor (string memory _name, string memory _symbol)\r\n\t        ERC721(_name, _symbol)\r\n\t    {\r\n\t    \tgreenpoint = msg.sender;\r\n\t    }\r\n\r\n\t    address greenpoint;\r\n\t    mapping(uint => uint)  weight;\r\n\t    function mintUniqueTokenTo(\r\n\t        address _to,\r\n\t        uint256 _tokenId,\r\n\t        uint _weight\r\n\t    ) public {\r\n\t    \trequire(msg.sender == greenpoint);\r\n\t        super._mint(_to, _tokenId);\r\n\t        weight[_tokenId] = _weight;\r\n\t    }\r\n\r\n\t    function getWeight(uint ID) public view returns(uint){\r\n\t    \treturn weight[ID];\r\n\t    }\r\n\r\n\t    function _baseURI() internal override pure returns (string memory) {\r\n\t        return \"TOTEM:\";\r\n\t    }\r\n\t}\r\n\r\n\tabstract contract ERC223ReceivingContract{\r\n\t    function tokenFallback(address _from, uint _value, bytes calldata _data) external virtual;\r\n\t}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"autoStake\",\"type\":\"bool\"}],\"name\":\"AcreToTotem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositMVTForRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"acreBought\",\"type\":\"uint256\"}],\"name\":\"PurchaseAcre\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToDistribute\",\"type\":\"uint256\"}],\"name\":\"RolloutDepositedMVTRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"StakeNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lastOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totemID\",\"type\":\"uint256\"}],\"name\":\"TotemToMDT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"unstaker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"UnstakeNFT\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GLR_funds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GLR_pullFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"autoStake\",\"type\":\"bool\"}],\"name\":\"acreToTotem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"TOTEM_ID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"alreadyHadAtleastOnce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositMVTForRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pool\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_MVT_to_rollout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mvt5xHodlPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextFloorRaisingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_floorPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalACRESupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalAcreWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalTotemWeight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"is_contract\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payEthToAcreStakers\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseAcre\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rolloutDepositedMVTRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell_MVT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"shiftOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"staker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totemNFT\",\"outputs\":[{\"internalType\":\"contract Totem\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totemID\",\"type\":\"uint256\"}],\"name\":\"totemToMDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totemsHad\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"unstakeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"userData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"acreBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totemWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acreDividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totemDividends\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"MDT_approval\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"MVT_approval\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"userData2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"MDT_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MVT_balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"viewTotems\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"currentlyStaking\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"acreWeight\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"owned\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pool\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GreenPointLandReserves","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b135a98cb27a7032cab9ee42fbd9cbd124ed41e2901e1b3e4eed8e54ac103913"}]}