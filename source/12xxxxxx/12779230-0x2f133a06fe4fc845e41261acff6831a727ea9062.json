{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MintingManager.sol\": {\r\n      \"content\": \"// @author Unstoppable Domains, Inc.\\n// @date June 16th, 2021\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol';\\n\\nimport './cns/IResolver.sol';\\nimport './cns/IMintingController.sol';\\nimport './cns/IURIPrefixController.sol';\\nimport './IMintingManager.sol';\\nimport './IUNSRegistry.sol';\\nimport './metatx/Relayer.sol';\\nimport './roles/MinterRole.sol';\\n\\n/**\\n * @title MintingManager\\n * @dev Defines the functions for distribution of Second Level Domains (SLD)s.\\n */\\ncontract MintingManager is Initializable, ContextUpgradeable, OwnableUpgradeable, MinterRole, Relayer, IMintingManager {\\n    string public constant NAME = 'UNS: Minting Manager';\\n    string public constant VERSION = '0.1.0';\\n\\n    IUNSRegistry public unsRegistry;\\n    IMintingController public cnsMintingController;\\n    IURIPrefixController public cnsURIPrefixController;\\n    IResolver public cnsResolver;\\n\\n    /**\\n     * @dev Mapping TLD `namehash` to TLD label\\n     *\\n     * `namehash` = uint256(keccak256(abi.encodePacked(uint256(0x0), keccak256(abi.encodePacked(label)))))\\n     */\\n    mapping(uint256 => string) internal _tlds;\\n\\n    /**\\n     * @dev bytes4(keccak256('mintSLD(address,uint256,string)')) == 0xae2ad903\\n     */\\n    bytes4 private constant _SIG_MINT = 0xae2ad903;\\n\\n    /**\\n     * @dev bytes4(keccak256('safeMintSLD(address,uint256,string)')) == 0x4c1819e0\\n     */\\n    bytes4 private constant _SIG_SAFE_MINT = 0x4c1819e0;\\n\\n    /**\\n     * @dev bytes4(keccak256('safeMintSLD(address,uint256,string,bytes)')) == 0x58839d6b\\n     */\\n    bytes4 private constant _SIG_SAFE_MINT_DATA = 0x58839d6b;\\n\\n    /**\\n     * @dev bytes4(keccak256('mintSLDWithRecords(address,uint256,string,string[],string[])')) == 0x39ccf4d0\\n     */\\n    bytes4 private constant _SIG_MINT_WITH_RECORDS = 0x39ccf4d0;\\n\\n    /**\\n     * @dev bytes4(keccak256('safeMintSLDWithRecords(address,uint256,string,string[],string[])')) == 0x27bbd225\\n     */\\n    bytes4 private constant _SIG_SAFE_MINT_WITH_RECORDS = 0x27bbd225;\\n\\n    /**\\n     * @dev bytes4(keccak256('safeMintSLDWithRecords(address,uint256,string,string[],string[],bytes)')) == 0x6a2d2256\\n     */\\n    bytes4 private constant _SIG_SAFE_MINT_WITH_RECORDS_DATA = 0x6a2d2256;\\n\\n    modifier onlyRegisteredTld(uint256 tld) {\\n        require(bytes(_tlds[tld]).length > 0, 'MintingManager: TLD_NOT_REGISTERED');\\n        _;\\n    }\\n\\n    function initialize(\\n        IUNSRegistry unsRegistry_,\\n        IMintingController cnsMintingController_,\\n        IURIPrefixController cnsURIPrefixController_,\\n        IResolver cnsResolver_\\n    ) public initializer {\\n        unsRegistry = unsRegistry_;\\n        cnsMintingController = cnsMintingController_;\\n        cnsURIPrefixController = cnsURIPrefixController_;\\n        cnsResolver = cnsResolver_;\\n\\n        __Ownable_init_unchained();\\n        __MinterRole_init_unchained();\\n\\n        // Relayer is required to be a minter\\n        _addMinter(address(this));\\n\\n        _tlds[0x0f4a10a4f46c288cea365fcf45cccf0e9d901b945b9829ccdb54c10dc3cb7a6f] = 'crypto';\\n\\n        string[8] memory tlds = ['wallet', 'coin', 'x', 'nft', 'blockchain', 'bitcoin', '888', 'dao'];\\n        for (uint256 i = 0; i < tlds.length; i++) {\\n            uint256 namehash = uint256(keccak256(abi.encodePacked(uint256(0x0), keccak256(abi.encodePacked(tlds[i])))));\\n            _tlds[namehash] = tlds[i];\\n\\n            if (!unsRegistry.exists(namehash)) {\\n                unsRegistry.mint(address(0xdead), namehash, tlds[i]);\\n            }\\n        }\\n    }\\n\\n    function mintSLD(\\n        address to,\\n        uint256 tld,\\n        string calldata label\\n    ) external override onlyMinter onlyRegisteredTld(tld) {\\n        _mintSLD(to, tld, label);\\n    }\\n\\n    function safeMintSLD(\\n        address to,\\n        uint256 tld,\\n        string calldata label\\n    ) external override onlyMinter onlyRegisteredTld(tld) {\\n        _safeMintSLD(to, tld, label, '');\\n    }\\n\\n    function safeMintSLD(\\n        address to,\\n        uint256 tld,\\n        string calldata label,\\n        bytes calldata data\\n    ) external override onlyMinter onlyRegisteredTld(tld) {\\n        _safeMintSLD(to, tld, label, data);\\n    }\\n\\n    function mintSLDWithRecords(\\n        address to,\\n        uint256 tld,\\n        string calldata label,\\n        string[] calldata keys,\\n        string[] calldata values\\n    ) external override onlyMinter onlyRegisteredTld(tld) {\\n        _mintSLDWithRecords(to, tld, label, keys, values);\\n    }\\n\\n    function safeMintSLDWithRecords(\\n        address to,\\n        uint256 tld,\\n        string calldata label,\\n        string[] calldata keys,\\n        string[] calldata values\\n    ) external override onlyMinter onlyRegisteredTld(tld) {\\n        _safeMintSLDWithRecords(to, tld, label, keys, values, '');\\n    }\\n\\n    function safeMintSLDWithRecords(\\n        address to,\\n        uint256 tld,\\n        string calldata label,\\n        string[] calldata keys,\\n        string[] calldata values,\\n        bytes calldata data\\n    ) external override onlyMinter onlyRegisteredTld(tld) {\\n        _safeMintSLDWithRecords(to, tld, label, keys, values, data);\\n    }\\n\\n    function claim(uint256 tld, string calldata label) external override onlyRegisteredTld(tld) {\\n        _mintSLD(_msgSender(), tld, _freeSLDLabel(label));\\n    }\\n\\n    function claimTo(\\n        address to,\\n        uint256 tld,\\n        string calldata label\\n    ) external override onlyRegisteredTld(tld) {\\n        _mintSLD(to, tld, _freeSLDLabel(label));\\n    }\\n\\n    function claimToWithRecords(\\n        address to,\\n        uint256 tld,\\n        string calldata label,\\n        string[] calldata keys,\\n        string[] calldata values\\n    ) external override onlyRegisteredTld(tld) {\\n        _mintSLDWithRecords(to, tld, _freeSLDLabel(label), keys, values);\\n    }\\n\\n    function setResolver(address resolver) external onlyOwner {\\n        cnsResolver = IResolver(resolver);\\n    }\\n\\n    function setTokenURIPrefix(string calldata prefix) external override onlyOwner {\\n        unsRegistry.setTokenURIPrefix(prefix);\\n        if (address(cnsURIPrefixController) != address(0x0)) {\\n            cnsURIPrefixController.setTokenURIPrefix(prefix);\\n        }\\n    }\\n\\n    function _verifyRelaySigner(address signer) internal view override {\\n        super._verifyRelaySigner(signer);\\n        require(isMinter(signer), 'MintingManager: SIGNER_IS_NOT_MINTER');\\n    }\\n\\n    function _verifyRelayCall(bytes4 funcSig, bytes calldata) internal pure override {\\n        bool isSupported =\\n            funcSig == _SIG_MINT ||\\n                funcSig == _SIG_SAFE_MINT ||\\n                funcSig == _SIG_SAFE_MINT_DATA ||\\n                funcSig == _SIG_MINT_WITH_RECORDS ||\\n                funcSig == _SIG_SAFE_MINT_WITH_RECORDS ||\\n                funcSig == _SIG_SAFE_MINT_WITH_RECORDS_DATA;\\n\\n        require(isSupported, 'MintingManager: UNSUPPORTED_RELAY_CALL');\\n    }\\n\\n    function _mintSLD(\\n        address to,\\n        uint256 tld,\\n        string memory label\\n    ) private {\\n        if (tld == 0x0f4a10a4f46c288cea365fcf45cccf0e9d901b945b9829ccdb54c10dc3cb7a6f) {\\n            cnsMintingController.mintSLDWithResolver(to, label, address(cnsResolver));\\n        } else {\\n            unsRegistry.mint(to, _childId(tld, label), _uri(tld, label));\\n        }\\n    }\\n\\n    function _safeMintSLD(\\n        address to,\\n        uint256 tld,\\n        string calldata label,\\n        bytes memory data\\n    ) private {\\n        if (tld == 0x0f4a10a4f46c288cea365fcf45cccf0e9d901b945b9829ccdb54c10dc3cb7a6f) {\\n            cnsMintingController.safeMintSLDWithResolver(to, label, address(cnsResolver), data);\\n        } else {\\n            unsRegistry.safeMint(to, _childId(tld, label), _uri(tld, label), data);\\n        }\\n    }\\n\\n    function _mintSLDWithRecords(\\n        address to,\\n        uint256 tld,\\n        string memory label,\\n        string[] calldata keys,\\n        string[] calldata values\\n    ) private {\\n        uint256 tokenId = _childId(tld, label);\\n        if (tld == 0x0f4a10a4f46c288cea365fcf45cccf0e9d901b945b9829ccdb54c10dc3cb7a6f) {\\n            cnsMintingController.mintSLDWithResolver(to, label, address(cnsResolver));\\n            if (keys.length > 0) {\\n                cnsResolver.preconfigure(keys, values, tokenId);\\n            }\\n        } else {\\n            unsRegistry.mintWithRecords(to, tokenId, _uri(tld, label), keys, values);\\n        }\\n    }\\n\\n    function _safeMintSLDWithRecords(\\n        address to,\\n        uint256 tld,\\n        string memory label,\\n        string[] calldata keys,\\n        string[] calldata values,\\n        bytes memory data\\n    ) private {\\n        uint256 tokenId = _childId(tld, label);\\n        if (tld == 0x0f4a10a4f46c288cea365fcf45cccf0e9d901b945b9829ccdb54c10dc3cb7a6f) {\\n            cnsMintingController.safeMintSLDWithResolver(to, label, address(cnsResolver), data);\\n            if (keys.length > 0) {\\n                cnsResolver.preconfigure(keys, values, tokenId);\\n            }\\n        } else {\\n            unsRegistry.safeMintWithRecords(to, tokenId, _uri(tld, label), keys, values, data);\\n        }\\n    }\\n\\n    function _childId(uint256 tokenId, string memory label) internal pure returns (uint256) {\\n        require(bytes(label).length != 0, 'MintingManager: LABEL_EMPTY');\\n        return uint256(keccak256(abi.encodePacked(tokenId, keccak256(abi.encodePacked(label)))));\\n    }\\n\\n    function _freeSLDLabel(string calldata label) private pure returns (string memory) {\\n        return string(abi.encodePacked('udtestdev-', label));\\n    }\\n\\n    function _uri(uint256 tld, string memory label) private view returns (string memory) {\\n        return string(abi.encodePacked(label, '.', _tlds[tld]));\\n    }\\n\\n    // Reserved storage space to allow for layout changes in the future.\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n        } else if (signature.length == 64) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                let vs := mload(add(signature, 0x40))\\n                r := mload(add(signature, 0x20))\\n                s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n                v := add(shr(255, vs), 27)\\n            }\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/cns/IResolver.sol\": {\r\n      \"content\": \"// @author Unstoppable Domains, Inc.\\n// @date June 16th, 2021\\n\\npragma solidity ^0.8.0;\\n\\ninterface IResolver {\\n    function preconfigure(\\n        string[] memory keys,\\n        string[] memory values,\\n        uint256 tokenId\\n    ) external;\\n\\n    function get(string calldata key, uint256 tokenId) external view returns (string memory);\\n\\n    function getMany(string[] calldata keys, uint256 tokenId) external view returns (string[] memory);\\n\\n    function getByHash(uint256 keyHash, uint256 tokenId) external view returns (string memory key, string memory value);\\n\\n    function getManyByHash(uint256[] calldata keyHashes, uint256 tokenId)\\n        external\\n        view\\n        returns (string[] memory keys, string[] memory values);\\n\\n    function set(\\n        string calldata key,\\n        string calldata value,\\n        uint256 tokenId\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/cns/IMintingController.sol\": {\r\n      \"content\": \"// @author Unstoppable Domains, Inc.\\n// @date June 16th, 2021\\n\\npragma solidity ^0.8.0;\\n\\ninterface IMintingController {\\n    function mintSLD(address to, string calldata label) external;\\n\\n    function safeMintSLD(address to, string calldata label) external;\\n\\n    function safeMintSLD(\\n        address to,\\n        string calldata label,\\n        bytes calldata data\\n    ) external;\\n\\n    function mintSLDWithResolver(\\n        address to,\\n        string memory label,\\n        address resolver\\n    ) external;\\n\\n    function safeMintSLDWithResolver(\\n        address to,\\n        string calldata label,\\n        address resolver\\n    ) external;\\n\\n    function safeMintSLDWithResolver(\\n        address to,\\n        string calldata label,\\n        address resolver,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/cns/IURIPrefixController.sol\": {\r\n      \"content\": \"// @author Unstoppable Domains, Inc.\\n// @date June 16th, 2021\\n\\npragma solidity ^0.8.0;\\n\\ninterface IURIPrefixController {\\n    function setTokenURIPrefix(string calldata prefix) external;\\n}\\n\"\r\n    },\r\n    \"contracts/IMintingManager.sol\": {\r\n      \"content\": \"// @author Unstoppable Domains, Inc.\\n// @date June 16th, 2021\\n\\npragma solidity ^0.8.0;\\n\\ninterface IMintingManager {\\n    /**\\n     * @dev Mints a Second Level Domain (SLD).\\n     * @param to address to mint the new SLD to.\\n     * @param tld id of parent token.\\n     * @param label SLD label to mint.\\n     */\\n    function mintSLD(\\n        address to,\\n        uint256 tld,\\n        string calldata label\\n    ) external;\\n\\n    /**\\n     * @dev Safely mints a Second Level Domain (SLD).\\n     * Implements a ERC721Reciever check unlike mintSLD.\\n     * @param to address to mint the new SLD to.\\n     * @param tld id of parent token.\\n     * @param label SLD label to mint.\\n     */\\n    function safeMintSLD(\\n        address to,\\n        uint256 tld,\\n        string calldata label\\n    ) external;\\n\\n    /**\\n     * @dev Safely mints a Second Level Domain (SLD).\\n     * Implements a ERC721Reciever check unlike mintSLD.\\n     * @param to address to mint the new SLD to.\\n     * @param tld id of parent token.\\n     * @param label SLD label to mint.\\n     * @param data bytes data to send along with a safe transfer check.\\n     */\\n    function safeMintSLD(\\n        address to,\\n        uint256 tld,\\n        string calldata label,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Mints a Second Level Domain (SLD) with records.\\n     * @param to address to mint the new SLD to.\\n     * @param tld id of parent token.\\n     * @param label SLD label to mint.\\n     * @param keys Record keys.\\n     * @param values Record values.\\n     */\\n    function mintSLDWithRecords(\\n        address to,\\n        uint256 tld,\\n        string calldata label,\\n        string[] calldata keys,\\n        string[] calldata values\\n    ) external;\\n\\n    /**\\n     * @dev Mints a Second Level Domain (SLD) with records.\\n     * Implements a ERC721Reciever check unlike mintSLD.\\n     * @param to address to mint the new SLD to.\\n     * @param tld id of parent token.\\n     * @param label SLD label to mint.\\n     * @param keys Record keys.\\n     * @param values Record values.\\n     */\\n    function safeMintSLDWithRecords(\\n        address to,\\n        uint256 tld,\\n        string calldata label,\\n        string[] calldata keys,\\n        string[] calldata values\\n    ) external;\\n\\n    /**\\n     * @dev Mints a Second Level Domain (SLD) with records.\\n     * Implements a ERC721Reciever check unlike mintSLD.\\n     * @param to address to mint the new SLD to.\\n     * @param tld id of parent token.\\n     * @param label SLD label to mint.\\n     * @param keys Record keys.\\n     * @param values Record values.\\n     * @param data bytes data to send along with a safe transfer check.\\n     */\\n    function safeMintSLDWithRecords(\\n        address to,\\n        uint256 tld,\\n        string calldata label,\\n        string[] calldata keys,\\n        string[] calldata values,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Claims free domain. The fuction adds prefix `udtestdev-` to label.\\n     * @param tld id of parent token\\n     * @param label SLD label to mint\\n     */\\n    function claim(uint256 tld, string calldata label) external;\\n\\n    /**\\n     * @dev Claims free domain. The fuction adds prefix `udtestdev-` to label.\\n     * @param to address to mint the new SLD to\\n     * @param tld id of parent token\\n     * @param label SLD label to mint\\n     */\\n    function claimTo(\\n        address to,\\n        uint256 tld,\\n        string calldata label\\n    ) external;\\n\\n    /**\\n     * @dev Claims free domain. The fuction adds prefix `udtestdev-` to label.\\n     * @param to address to mint the new SLD to\\n     * @param tld id of parent token\\n     * @param label SLD label to mint\\n     */\\n    function claimToWithRecords(\\n        address to,\\n        uint256 tld,\\n        string calldata label,\\n        string[] calldata keys,\\n        string[] calldata values\\n    ) external;\\n\\n    /**\\n     * @dev Function to set the token URI Prefix for all tokens.\\n     * @param prefix string URI to assign\\n     */\\n    function setTokenURIPrefix(string calldata prefix) external;\\n}\\n\"\r\n    },\r\n    \"contracts/IUNSRegistry.sol\": {\r\n      \"content\": \"// @author Unstoppable Domains, Inc.\\n// @date June 16th, 2021\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol';\\n\\nimport './IRecordStorage.sol';\\n\\ninterface IUNSRegistry is IERC721MetadataUpgradeable, IRecordStorage {\\n    event NewURI(uint256 indexed tokenId, string uri);\\n\\n    event NewURIPrefix(string prefix);\\n\\n    /**\\n     * @dev Function to set the token URI Prefix for all tokens.\\n     * @param prefix string URI to assign\\n     */\\n    function setTokenURIPrefix(string calldata prefix) external;\\n\\n    /**\\n     * @dev Returns whether the given spender can transfer a given token ID.\\n     * @param spender address of the spender to query\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @return bool whether the msg.sender is approved for the given token ID,\\n     * is an operator of the owner, or is the owner of the token\\n     */\\n    function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\\n\\n    /**\\n     * @dev Gets the resolver of the specified token ID.\\n     * @param tokenId uint256 ID of the token to query the resolver of\\n     * @return address currently marked as the resolver of the given token ID\\n     */\\n    function resolverOf(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Provides child token (subdomain) of provided tokenId.\\n     * @param tokenId uint256 ID of the token\\n     * @param label label of subdomain (for `aaa.bbb.crypto` it will be `aaa`)\\n     */\\n    function childIdOf(uint256 tokenId, string calldata label) external pure returns (uint256);\\n\\n    /**\\n     * @dev Existence of token.\\n     * @param tokenId uint256 ID of the token\\n     */\\n    function exists(uint256 tokenId) external view returns (bool);\\n\\n    /**\\n     * @dev Transfer domain ownership without resetting domain records.\\n     * @param to address of new domain owner\\n     * @param tokenId uint256 ID of the token to be transferred\\n     */\\n    function setOwner(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) external;\\n\\n    /**\\n     * @dev Mints token.\\n     * @param to address to mint the new SLD to.\\n     * @param tokenId id of token.\\n     * @param uri domain URI.\\n     */\\n    function mint(\\n        address to,\\n        uint256 tokenId,\\n        string calldata uri\\n    ) external;\\n\\n    /**\\n     * @dev Safely mints token.\\n     * Implements a ERC721Reciever check unlike mint.\\n     * @param to address to mint the new SLD to.\\n     * @param tokenId id of token.\\n     * @param uri domain URI.\\n     */\\n    function safeMint(\\n        address to,\\n        uint256 tokenId,\\n        string calldata uri\\n    ) external;\\n\\n    /**\\n     * @dev Safely mints token.\\n     * Implements a ERC721Reciever check unlike mint.\\n     * @param to address to mint the new SLD to.\\n     * @param tokenId id of token.\\n     * @param uri domain URI.\\n     * @param data bytes data to send along with a safe transfer check\\n     */\\n    function safeMint(\\n        address to,\\n        uint256 tokenId,\\n        string calldata uri,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Mints token with records\\n     * @param to address to mint the new SLD to\\n     * @param tokenId id of token\\n     * @param keys New record keys\\n     * @param values New record values\\n     * @param uri domain URI\\n     */\\n    function mintWithRecords(\\n        address to,\\n        uint256 tokenId,\\n        string calldata uri,\\n        string[] calldata keys,\\n        string[] calldata values\\n    ) external;\\n\\n    /**\\n     * @dev Safely mints token with records\\n     * @param to address to mint the new SLD to\\n     * @param tokenId id of token\\n     * @param keys New record keys\\n     * @param values New record values\\n     * @param uri domain URI\\n     */\\n    function safeMintWithRecords(\\n        address to,\\n        uint256 tokenId,\\n        string calldata uri,\\n        string[] calldata keys,\\n        string[] calldata values\\n    ) external;\\n\\n    /**\\n     * @dev Safely mints token with records\\n     * @param to address to mint the new SLD to\\n     * @param tokenId id of token\\n     * @param keys New record keys\\n     * @param values New record values\\n     * @param uri domain URI\\n     * @param data bytes data to send along with a safe transfer check\\n     */\\n    function safeMintWithRecords(\\n        address to,\\n        uint256 tokenId,\\n        string calldata uri,\\n        string[] calldata keys,\\n        string[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/metatx/Relayer.sol\": {\r\n      \"content\": \"// @author Unstoppable Domains, Inc.\\n// @date June 16th, 2021\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol';\\n\\nabstract contract Relayer is ContextUpgradeable {\\n    using ECDSAUpgradeable for bytes32;\\n\\n    event Relayed(address indexed sender, address indexed signer, bytes4 indexed funcSig, bytes32 digest);\\n\\n    /**\\n     * Relay allows execute transaction on behalf of whitelisted minter.\\n     * The function verify signature of call data parameter before execution.\\n     * It allows anybody send transaction on-chain when minter has provided proper parameters.\\n     * The function allows to relaying calls of fixed functions. The restriction defined in function `verifyCall`\\n     */\\n    function relay(bytes calldata data, bytes calldata signature) external returns (bytes memory) {\\n        bytes32 digest = keccak256(data);\\n        address signer = keccak256(abi.encodePacked(digest, address(this))).toEthSignedMessageHash().recover(signature);\\n\\n        bytes4 funcSig;\\n        bytes memory _data = data;\\n        /* solium-disable-next-line security/no-inline-assembly */\\n        assembly {\\n            funcSig := mload(add(_data, add(0x20, 0)))\\n        }\\n\\n        _verifyRelaySigner(signer);\\n        _verifyRelayCall(funcSig, data);\\n\\n        /* solium-disable-next-line security/no-low-level-calls */\\n        (bool success, bytes memory result) = address(this).call(data);\\n        if (success == false) {\\n            /* solium-disable-next-line security/no-inline-assembly */\\n            assembly {\\n                let ptr := mload(0x40)\\n                let size := returndatasize()\\n                returndatacopy(ptr, 0, size)\\n                revert(ptr, size)\\n            }\\n        }\\n\\n        emit Relayed(_msgSender(), signer, funcSig, digest);\\n        return result;\\n    }\\n\\n    function _verifyRelaySigner(address signer) internal view virtual {\\n        require(signer != address(0), 'Relayer: SIGNATURE_IS_INVALID');\\n    }\\n\\n    function _verifyRelayCall(bytes4 funcSig, bytes calldata data) internal pure virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/roles/MinterRole.sol\": {\r\n      \"content\": \"// @author Unstoppable Domains, Inc.\\n// @date June 16th, 2021\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\n\\nabstract contract MinterRole is OwnableUpgradeable, AccessControlUpgradeable {\\n    bytes32 public constant MINTER_ROLE = keccak256('MINTER_ROLE');\\n\\n    modifier onlyMinter() {\\n        require(isMinter(_msgSender()), 'MinterRole: CALLER_IS_NOT_MINTER');\\n        _;\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __MinterRole_init() internal initializer {\\n        __Ownable_init_unchained();\\n        __AccessControl_init_unchained();\\n        __MinterRole_init_unchained();\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __MinterRole_init_unchained() internal initializer {}\\n\\n    function isMinter(address account) public view returns (bool) {\\n        return hasRole(MINTER_ROLE, account);\\n    }\\n\\n    function addMinter(address account) public onlyOwner {\\n        _addMinter(account);\\n    }\\n\\n    function addMinters(address[] memory accounts) public onlyOwner {\\n        for (uint256 index = 0; index < accounts.length; index++) {\\n            _addMinter(accounts[index]);\\n        }\\n    }\\n\\n    function removeMinter(address account) public onlyOwner {\\n        _removeMinter(account);\\n    }\\n\\n    function removeMinters(address[] memory accounts) public onlyOwner {\\n        for (uint256 index = 0; index < accounts.length; index++) {\\n            _removeMinter(accounts[index]);\\n        }\\n    }\\n\\n    function renounceMinter() public {\\n        _removeMinter(_msgSender());\\n    }\\n\\n    /**\\n     * Renounce minter account with funds' forwarding\\n     */\\n    function closeMinter(address payable receiver) external payable onlyMinter {\\n        require(receiver != address(0x0), 'MinterRole: RECEIVER_IS_EMPTY');\\n\\n        renounceMinter();\\n        receiver.transfer(msg.value);\\n    }\\n\\n    /**\\n     * Replace minter account by new account with funds' forwarding\\n     */\\n    function rotateMinter(address payable receiver) external payable onlyMinter {\\n        require(receiver != address(0x0), 'MinterRole: RECEIVER_IS_EMPTY');\\n\\n        _addMinter(receiver);\\n        renounceMinter();\\n        receiver.transfer(msg.value);\\n    }\\n\\n    function _addMinter(address account) internal {\\n        _setupRole(MINTER_ROLE, account);\\n    }\\n\\n    function _removeMinter(address account) internal {\\n        renounceRole(MINTER_ROLE, account);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/IRecordStorage.sol\": {\r\n      \"content\": \"// @author Unstoppable Domains, Inc.\\n// @date June 16th, 2021\\n\\npragma solidity ^0.8.0;\\n\\nimport './IRecordReader.sol';\\n\\ninterface IRecordStorage is IRecordReader {\\n    event Set(uint256 indexed tokenId, string indexed keyIndex, string indexed valueIndex, string key, string value);\\n\\n    event NewKey(uint256 indexed tokenId, string indexed keyIndex, string key);\\n\\n    event ResetRecords(uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Set record by key\\n     * @param key The key set the value of\\n     * @param value The value to set key to\\n     * @param tokenId ERC-721 token id to set\\n     */\\n    function set(\\n        string calldata key,\\n        string calldata value,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Set records by keys\\n     * @param keys The keys set the values of\\n     * @param values Records values\\n     * @param tokenId ERC-721 token id of the domain\\n     */\\n    function setMany(\\n        string[] memory keys,\\n        string[] memory values,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Set record by key hash\\n     * @param keyHash The key hash set the value of\\n     * @param value The value to set key to\\n     * @param tokenId ERC-721 token id to set\\n     */\\n    function setByHash(\\n        uint256 keyHash,\\n        string calldata value,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Set records by key hashes\\n     * @param keyHashes The key hashes set the values of\\n     * @param values Records values\\n     * @param tokenId ERC-721 token id of the domain\\n     */\\n    function setManyByHash(\\n        uint256[] calldata keyHashes,\\n        string[] calldata values,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Reset all domain records and set new ones\\n     * @param keys New record keys\\n     * @param values New record values\\n     * @param tokenId ERC-721 token id of the domain\\n     */\\n    function reconfigure(\\n        string[] memory keys,\\n        string[] memory values,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Function to reset all existing records on a domain.\\n     * @param tokenId ERC-721 token id to set.\\n     */\\n    function reset(uint256 tokenId) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/IRecordReader.sol\": {\r\n      \"content\": \"// @author Unstoppable Domains, Inc.\\n// @date June 16th, 2021\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRecordReader {\\n    /**\\n     * @dev Function to get record.\\n     * @param key The key to query the value of.\\n     * @param tokenId The token id to fetch.\\n     * @return The value string.\\n     */\\n    function get(string calldata key, uint256 tokenId) external view returns (string memory);\\n\\n    /**\\n     * @dev Function to get multiple record.\\n     * @param keys The keys to query the value of.\\n     * @param tokenId The token id to fetch.\\n     * @return The values.\\n     */\\n    function getMany(string[] calldata keys, uint256 tokenId) external view returns (string[] memory);\\n\\n    /**\\n     * @dev Function get value by provied key hash.\\n     * @param keyHash The key to query the value of.\\n     * @param tokenId The token id to set.\\n     */\\n    function getByHash(uint256 keyHash, uint256 tokenId) external view returns (string memory key, string memory value);\\n\\n    /**\\n     * @dev Function get values by provied key hashes.\\n     * @param keyHashes The key to query the value of.\\n     * @param tokenId The token id to set.\\n     */\\n    function getManyByHash(uint256[] calldata keyHashes, uint256 tokenId)\\n        external\\n        view\\n        returns (string[] memory keys, string[] memory values);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if(!hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\n                \\\"AccessControl: account \\\",\\n                StringsUpgradeable.toHexString(uint160(account), 20),\\n                \\\" is missing role \\\",\\n                StringsUpgradeable.toHexString(uint256(role), 32)\\n            )));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"funcSig\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"}],\"name\":\"Relayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addMinters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tld\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tld\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"name\":\"claimTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tld\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"values\",\"type\":\"string[]\"}],\"name\":\"claimToWithRecords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"closeMinter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cnsMintingController\",\"outputs\":[{\"internalType\":\"contract IMintingController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cnsResolver\",\"outputs\":[{\"internalType\":\"contract IResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cnsURIPrefixController\",\"outputs\":[{\"internalType\":\"contract IURIPrefixController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUNSRegistry\",\"name\":\"unsRegistry_\",\"type\":\"address\"},{\"internalType\":\"contract IMintingController\",\"name\":\"cnsMintingController_\",\"type\":\"address\"},{\"internalType\":\"contract IURIPrefixController\",\"name\":\"cnsURIPrefixController_\",\"type\":\"address\"},{\"internalType\":\"contract IResolver\",\"name\":\"cnsResolver_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tld\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"name\":\"mintSLD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tld\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"values\",\"type\":\"string[]\"}],\"name\":\"mintSLDWithRecords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"relay\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"removeMinters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"rotateMinter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tld\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"name\":\"safeMintSLD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tld\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeMintSLD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tld\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"values\",\"type\":\"string[]\"}],\"name\":\"safeMintSLDWithRecords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tld\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"values\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeMintSLDWithRecords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"}],\"name\":\"setTokenURIPrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unsRegistry\",\"outputs\":[{\"internalType\":\"contract IUNSRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MintingManager","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}