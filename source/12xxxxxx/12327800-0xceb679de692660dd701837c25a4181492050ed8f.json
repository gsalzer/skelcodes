{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\ninterface IVORConsumerBase {\r\n    function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external;\r\n}\r\n\r\ninterface BlockHashStoreInterface {\r\n    function getBlockhash(uint256 number) external view returns (bytes32);\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20_Ex {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title VOR\r\n */\r\ncontract VOR {\r\n    // See https://www.secg.org/sec2-v2.pdf, section 2.4.1, for these constants.\r\n    uint256 private constant GROUP_ORDER = // Number of points in Secp256k1\r\n        // solium-disable-next-line indentation\r\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141;\r\n    // Prime characteristic of the galois field over which Secp256k1 is defined\r\n    uint256 private constant FIELD_SIZE =\r\n        // solium-disable-next-line indentation\r\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F;\r\n    uint256 private constant WORD_LENGTH_BYTES = 0x20;\r\n\r\n    // (base^exponent) % FIELD_SIZE\r\n    // Cribbed from https://medium.com/@rbkhmrcr/precompiles-solidity-e5d29bd428c4\r\n    function bigModExp(uint256 base, uint256 exponent) internal view returns (uint256 exponentiation) {\r\n        uint256 callResult;\r\n        uint256[6] memory bigModExpContractInputs;\r\n        bigModExpContractInputs[0] = WORD_LENGTH_BYTES; // Length of base\r\n        bigModExpContractInputs[1] = WORD_LENGTH_BYTES; // Length of exponent\r\n        bigModExpContractInputs[2] = WORD_LENGTH_BYTES; // Length of modulus\r\n        bigModExpContractInputs[3] = base;\r\n        bigModExpContractInputs[4] = exponent;\r\n        bigModExpContractInputs[5] = FIELD_SIZE;\r\n        uint256[1] memory output;\r\n        assembly {\r\n            // solhint-disable-line no-inline-assembly\r\n            callResult := staticcall(\r\n                not(0), // Gas cost: no limit\r\n                0x05, // Bigmodexp contract address\r\n                bigModExpContractInputs,\r\n                0xc0, // Length of input segment: 6*0x20-bytes\r\n                output,\r\n                0x20 // Length of output segment\r\n            )\r\n        }\r\n        if (callResult == 0) {\r\n            revert(\"bigModExp failure!\");\r\n        }\r\n        return output[0];\r\n    }\r\n\r\n    // Let q=FIELD_SIZE. q % 4 = 3, ∴ x≡r^2 mod q ⇒ x^SQRT_POWER≡±r mod q.  See\r\n    // https://en.wikipedia.org/wiki/Modular_square_root#Prime_or_prime_power_modulus\r\n    uint256 private constant SQRT_POWER = (FIELD_SIZE + 1) >> 2;\r\n\r\n    // Computes a s.t. a^2 = x in the field. Assumes a exists\r\n    function squareRoot(uint256 x) internal view returns (uint256) {\r\n        return bigModExp(x, SQRT_POWER);\r\n    }\r\n\r\n    // The value of y^2 given that (x,y) is on secp256k1.\r\n    function ySquared(uint256 x) internal pure returns (uint256) {\r\n        // Curve is y^2=x^3+7. See section 2.4.1 of https://www.secg.org/sec2-v2.pdf\r\n        uint256 xCubed = mulmod(x, mulmod(x, x, FIELD_SIZE), FIELD_SIZE);\r\n        return addmod(xCubed, 7, FIELD_SIZE);\r\n    }\r\n\r\n    // True iff p is on secp256k1\r\n    function isOnCurve(uint256[2] memory p) internal pure returns (bool) {\r\n        return ySquared(p[0]) == mulmod(p[1], p[1], FIELD_SIZE);\r\n    }\r\n\r\n    // Hash x uniformly into {0, ..., FIELD_SIZE-1}.\r\n    function fieldHash(bytes memory b) internal pure returns (uint256 x_) {\r\n        x_ = uint256(keccak256(b));\r\n        // Rejecting if x >= FIELD_SIZE corresponds to step 2.1 in section 2.3.4 of\r\n        // http://www.secg.org/sec1-v2.pdf , which is part of the definition of\r\n        // string_to_point in the IETF draft\r\n        while (x_ >= FIELD_SIZE) {\r\n            x_ = uint256(keccak256(abi.encodePacked(x_)));\r\n        }\r\n    }\r\n\r\n    // Hash b to a random point which hopefully lies on secp256k1.\r\n    function newCandidateSecp256k1Point(bytes memory b) internal view returns (uint256[2] memory p) {\r\n        p[0] = fieldHash(b);\r\n        p[1] = squareRoot(ySquared(p[0]));\r\n        if (p[1] % 2 == 1) {\r\n            p[1] = FIELD_SIZE - p[1];\r\n        }\r\n    }\r\n\r\n    // Domain-separation tag for initial hash in hashToCurve.\r\n    uint256 constant HASH_TO_CURVE_HASH_PREFIX = 1;\r\n\r\n    // Cryptographic hash function onto the curve.\r\n    //\r\n    // Corresponds to algorithm in section 5.4.1.1 of the draft standard. (But see\r\n    // DESIGN NOTES above for slight differences.)\r\n    //\r\n    // TODO(alx): Implement a bounded-computation hash-to-curve, as described in\r\n    // \"Construction of Rational Points on Elliptic Curves over Finite Fields\"\r\n    // http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.831.5299&rep=rep1&type=pdf\r\n    // and suggested by\r\n    // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-01#section-5.2.2\r\n    // (Though we can't used exactly that because secp256k1's j-invariant is 0.)\r\n    //\r\n    // This would greatly simplify the analysis in \"OTHER SECURITY CONSIDERATIONS\"\r\n    // https://www.pivotaltracker.com/story/show/171120900\r\n    function hashToCurve(uint256[2] memory pk, uint256 input) internal view returns (uint256[2] memory rv) {\r\n        rv = newCandidateSecp256k1Point(abi.encodePacked(HASH_TO_CURVE_HASH_PREFIX, pk, input));\r\n        while (!isOnCurve(rv)) {\r\n            rv = newCandidateSecp256k1Point(abi.encodePacked(rv[0]));\r\n        }\r\n    }\r\n\r\n    /** *********************************************************************\r\n     * @notice Check that product==scalar*multiplicand\r\n     *\r\n     * @dev Based on Vitalik Buterin's idea in ethresear.ch post cited below.\r\n     *\r\n     * @param multiplicand: secp256k1 point\r\n     * @param scalar: non-zero GF(GROUP_ORDER) scalar\r\n     * @param product: secp256k1 expected to be multiplier * multiplicand\r\n     * @return verifies true iff product==scalar*multiplicand, with cryptographically high probability\r\n     */\r\n    function ecmulVerify(\r\n        uint256[2] memory multiplicand,\r\n        uint256 scalar,\r\n        uint256[2] memory product\r\n    ) internal pure returns (bool verifies) {\r\n        require(scalar != 0, \"scalar must not be 0\"); // Rules out an ecrecover failure case\r\n        uint256 x = multiplicand[0]; // x ordinate of multiplicand\r\n        uint8 v = multiplicand[1] % 2 == 0 ? 27 : 28; // parity of y ordinate\r\n        // https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384/9\r\n        // Point corresponding to address ecrecover(0, v, x, s=scalar*x) is\r\n        // (x⁻¹ mod GROUP_ORDER) * (scalar * x * multiplicand - 0 * g), i.e.\r\n        // scalar*multiplicand. See https://crypto.stackexchange.com/a/18106\r\n        bytes32 scalarTimesX = bytes32(mulmod(scalar, x, GROUP_ORDER));\r\n        address actual = ecrecover(bytes32(0), v, bytes32(x), scalarTimesX);\r\n        // Explicit conversion to address takes bottom 160 bits\r\n        address expected = address(uint256(keccak256(abi.encodePacked(product))));\r\n        return (actual == expected);\r\n    }\r\n\r\n    // Returns x1/z1-x2/z2=(x1z2-x2z1)/(z1z2) in projective coordinates on P¹(𝔽ₙ)\r\n    function projectiveSub(\r\n        uint256 x1,\r\n        uint256 z1,\r\n        uint256 x2,\r\n        uint256 z2\r\n    ) internal pure returns (uint256 x3, uint256 z3) {\r\n        uint256 num1 = mulmod(z2, x1, FIELD_SIZE);\r\n        uint256 num2 = mulmod(FIELD_SIZE - x2, z1, FIELD_SIZE);\r\n        (x3, z3) = (addmod(num1, num2, FIELD_SIZE), mulmod(z1, z2, FIELD_SIZE));\r\n    }\r\n\r\n    // Returns x1/z1*x2/z2=(x1x2)/(z1z2), in projective coordinates on P¹(𝔽ₙ)\r\n    function projectiveMul(\r\n        uint256 x1,\r\n        uint256 z1,\r\n        uint256 x2,\r\n        uint256 z2\r\n    ) internal pure returns (uint256 x3, uint256 z3) {\r\n        (x3, z3) = (mulmod(x1, x2, FIELD_SIZE), mulmod(z1, z2, FIELD_SIZE));\r\n    }\r\n\r\n    /** **************************************************************************\r\n      @notice Computes elliptic-curve sum, in projective co-ordinates\r\n\r\n      @dev Using projective coordinates avoids costly divisions\r\n\r\n      @dev To use this with p and q in affine coordinates, call\r\n      @dev projectiveECAdd(px, py, qx, qy). This will return\r\n      @dev the addition of (px, py, 1) and (qx, qy, 1), in the\r\n      @dev secp256k1 group.\r\n\r\n      @dev This can be used to calculate the z which is the inverse to zInv\r\n      @dev in isValidVOROutput. But consider using a faster\r\n\r\n      @dev This function assumes [px,py,1],[qx,qy,1] are valid projective\r\n           coordinates of secp256k1 points. That is safe in this contract,\r\n           because this method is only used by linearCombination, which checks\r\n           points are on the curve via ecrecover.\r\n      **************************************************************************\r\n      @param px The first affine coordinate of the first summand\r\n      @param py The second affine coordinate of the first summand\r\n      @param qx The first affine coordinate of the second summand\r\n      @param qy The second affine coordinate of the second summand\r\n\r\n      (px,py) and (qx,qy) must be distinct, valid secp256k1 points.\r\n      **************************************************************************\r\n      Return values are projective coordinates of [px,py,1]+[qx,qy,1] as points\r\n      on secp256k1, in P²(𝔽ₙ)\r\n      @return sx \r\n      @return sy\r\n      @return sz\r\n  */\r\n    function projectiveECAdd(\r\n        uint256 px,\r\n        uint256 py,\r\n        uint256 qx,\r\n        uint256 qy\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256 sx, uint256 sy, uint256 sz)\r\n    {\r\n        // See \"Group law for E/K : y^2 = x^3 + ax + b\", in section 3.1.2, p. 80,\r\n        // \"Guide to Elliptic Curve Cryptography\" by Hankerson, Menezes and Vanstone\r\n        // We take the equations there for (sx,sy), and homogenize them to\r\n        // projective coordinates. That way, no inverses are required, here, and we\r\n        // only need the one inverse in affineECAdd.\r\n\r\n        // We only need the \"point addition\" equations from Hankerson et al. Can\r\n        // skip the \"point doubling\" equations because p1 == p2 is cryptographically\r\n        // impossible, and require'd not to be the case in linearCombination.\r\n\r\n        // Add extra \"projective coordinate\" to the two points\r\n        (uint256 z1, uint256 z2) = (1, 1);\r\n\r\n        // (lx, lz) = (qy-py)/(qx-px), i.e., gradient of secant line.\r\n        uint256 lx = addmod(qy, FIELD_SIZE - py, FIELD_SIZE);\r\n        uint256 lz = addmod(qx, FIELD_SIZE - px, FIELD_SIZE);\r\n\r\n        uint256 dx; // Accumulates denominator from sx calculation\r\n        // sx=((qy-py)/(qx-px))^2-px-qx\r\n        (sx, dx) = projectiveMul(lx, lz, lx, lz); // ((qy-py)/(qx-px))^2\r\n        (sx, dx) = projectiveSub(sx, dx, px, z1); // ((qy-py)/(qx-px))^2-px\r\n        (sx, dx) = projectiveSub(sx, dx, qx, z2); // ((qy-py)/(qx-px))^2-px-qx\r\n\r\n        uint256 dy; // Accumulates denominator from sy calculation\r\n        // sy=((qy-py)/(qx-px))(px-sx)-py\r\n        (sy, dy) = projectiveSub(px, z1, sx, dx); // px-sx\r\n        (sy, dy) = projectiveMul(sy, dy, lx, lz); // ((qy-py)/(qx-px))(px-sx)\r\n        (sy, dy) = projectiveSub(sy, dy, py, z1); // ((qy-py)/(qx-px))(px-sx)-py\r\n\r\n        if (dx != dy) {\r\n            // Cross-multiply to put everything over a common denominator\r\n            sx = mulmod(sx, dy, FIELD_SIZE);\r\n            sy = mulmod(sy, dx, FIELD_SIZE);\r\n            sz = mulmod(dx, dy, FIELD_SIZE);\r\n        } else {\r\n            // Already over a common denominator, use that for z ordinate\r\n            sz = dx;\r\n        }\r\n    }\r\n\r\n    // p1+p2, as affine points on secp256k1.\r\n    //\r\n    // invZ must be the inverse of the z returned by projectiveECAdd(p1, p2).\r\n    // It is computed off-chain to save gas.\r\n    //\r\n    // p1 and p2 must be distinct, because projectiveECAdd doesn't handle\r\n    // point doubling.\r\n    function affineECAdd(\r\n        uint256[2] memory p1,\r\n        uint256[2] memory p2,\r\n        uint256 invZ\r\n    ) internal pure returns (uint256[2] memory) {\r\n        uint256 x;\r\n        uint256 y;\r\n        uint256 z;\r\n        (x, y, z) = projectiveECAdd(p1[0], p1[1], p2[0], p2[1]);\r\n        require(mulmod(z, invZ, FIELD_SIZE) == 1, \"invZ must be inverse of z\");\r\n        // Clear the z ordinate of the projective representation by dividing through\r\n        // by it, to obtain the affine representation\r\n        return [mulmod(x, invZ, FIELD_SIZE), mulmod(y, invZ, FIELD_SIZE)];\r\n    }\r\n\r\n    // True iff address(c*p+s*g) == lcWitness, where g is generator. (With\r\n    // cryptographically high probability.)\r\n    function verifyLinearCombinationWithGenerator(\r\n        uint256 c,\r\n        uint256[2] memory p,\r\n        uint256 s,\r\n        address lcWitness\r\n    ) internal pure returns (bool) {\r\n        // Rule out ecrecover failure modes which return address 0.\r\n        require(lcWitness != address(0), \"bad witness\");\r\n        uint8 v = (p[1] % 2 == 0) ? 27 : 28; // parity of y-ordinate of p\r\n        bytes32 pseudoHash = bytes32(GROUP_ORDER - mulmod(p[0], s, GROUP_ORDER)); // -s*p[0]\r\n        bytes32 pseudoSignature = bytes32(mulmod(c, p[0], GROUP_ORDER)); // c*p[0]\r\n        // https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384/9\r\n        // The point corresponding to the address returned by\r\n        // ecrecover(-s*p[0],v,p[0],c*p[0]) is\r\n        // (p[0]⁻¹ mod GROUP_ORDER)*(c*p[0]-(-s)*p[0]*g)=c*p+s*g.\r\n        // See https://crypto.stackexchange.com/a/18106\r\n        // https://bitcoin.stackexchange.com/questions/38351/ecdsa-v-r-s-what-is-v\r\n        address computed = ecrecover(pseudoHash, v, bytes32(p[0]), pseudoSignature);\r\n        return computed == lcWitness;\r\n    }\r\n\r\n    // c*p1 + s*p2. Requires cp1Witness=c*p1 and sp2Witness=s*p2. Also\r\n    // requires cp1Witness != sp2Witness (which is fine for this application,\r\n    // since it is cryptographically impossible for them to be equal. In the\r\n    // (cryptographically impossible) case that a prover accidentally derives\r\n    // a proof with equal c*p1 and s*p2, they should retry with a different\r\n    // proof nonce.) Assumes that all points are on secp256k1\r\n    // (which is checked in verifyVORProof below.)\r\n    function linearCombination(\r\n        uint256 c,\r\n        uint256[2] memory p1,\r\n        uint256[2] memory cp1Witness,\r\n        uint256 s,\r\n        uint256[2] memory p2,\r\n        uint256[2] memory sp2Witness,\r\n        uint256 zInv\r\n    ) internal pure returns (uint256[2] memory) {\r\n        require((cp1Witness[0] - sp2Witness[0]) % FIELD_SIZE != 0, \"points in sum must be distinct\");\r\n        require(ecmulVerify(p1, c, cp1Witness), \"First multiplication check failed\");\r\n        require(ecmulVerify(p2, s, sp2Witness), \"Second multiplication check failed\");\r\n        return affineECAdd(cp1Witness, sp2Witness, zInv);\r\n    }\r\n\r\n    // Domain-separation tag for the hash taken in scalarFromCurvePoints.\r\n    uint256 constant SCALAR_FROM_CURVE_POINTS_HASH_PREFIX = 2;\r\n\r\n    // Pseudo-random number from inputs.\r\n    // TODO(alx): We could save a bit of gas by following the standard here and\r\n    // using the compressed representation of the points, if we collated the y\r\n    // parities into a single bytes32.\r\n    // https://www.pivotaltracker.com/story/show/171120588\r\n    function scalarFromCurvePoints(\r\n        uint256[2] memory hash,\r\n        uint256[2] memory pk,\r\n        uint256[2] memory gamma,\r\n        address uWitness,\r\n        uint256[2] memory v\r\n    ) internal pure returns (uint256 s) {\r\n        return\r\n            uint256(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        SCALAR_FROM_CURVE_POINTS_HASH_PREFIX,\r\n                        hash,\r\n                        pk,\r\n                        gamma,\r\n                        v,\r\n                        uWitness\r\n                    )\r\n                )\r\n            );\r\n    }\r\n\r\n    // True if (gamma, c, s) is a correctly constructed randomness proof from pk\r\n    // and seed. zInv must be the inverse of the third ordinate from\r\n    // projectiveECAdd applied to cGammaWitness and sHashWitness. Corresponds to\r\n    // section 5.3 of the IETF draft.\r\n    //\r\n    // TODO(alx): Since I'm only using pk in the ecrecover call, I could only pass\r\n    // the x ordinate, and the parity of the y ordinate in the top bit of uWitness\r\n    // (which I could make a uint256 without using any extra space.) Would save\r\n    // about 2000 gas. https://www.pivotaltracker.com/story/show/170828567\r\n    function verifyVORProof(\r\n        uint256[2] memory pk,\r\n        uint256[2] memory gamma,\r\n        uint256 c,\r\n        uint256 s,\r\n        uint256 seed,\r\n        address uWitness,\r\n        uint256[2] memory cGammaWitness,\r\n        uint256[2] memory sHashWitness,\r\n        uint256 zInv\r\n    ) internal view {\r\n        require(isOnCurve(pk), \"public key is not on curve\");\r\n        require(isOnCurve(gamma), \"gamma is not on curve\");\r\n        require(isOnCurve(cGammaWitness), \"cGammaWitness is not on curve\");\r\n        require(isOnCurve(sHashWitness), \"sHashWitness is not on curve\");\r\n        require(verifyLinearCombinationWithGenerator(c, pk, s, uWitness), \"addr(c*pk+s*g)≠_uWitness\");\r\n        // Step 4. of IETF draft section 5.3 (pk corresponds to Y, seed to alpha_string)\r\n        uint256[2] memory hash = hashToCurve(pk, seed);\r\n        // Step 6. of IETF draft section 5.3, but see note for step 5 about +/- terms\r\n        uint256[2] memory v =\r\n            linearCombination(\r\n                c,\r\n                gamma,\r\n                cGammaWitness,\r\n                s,\r\n                hash,\r\n                sHashWitness,\r\n                zInv\r\n            );\r\n        // Steps 7. and 8. of IETF draft section 5.3\r\n        uint256 derivedC = scalarFromCurvePoints(hash, pk, gamma, uWitness, v);\r\n        require(c == derivedC, \"invalid proof\");\r\n    }\r\n\r\n    // Domain-separation tag for the hash used as the final VOR output.\r\n    uint256 constant VOR_RANDOM_OUTPUT_HASH_PREFIX = 3;\r\n\r\n    // Length of proof marshaled to bytes array. Shows layout of proof\r\n    uint256 public constant PROOF_LENGTH =\r\n        64 + // PublicKey (uncompressed format.)\r\n        64 + // Gamma\r\n        32 + // C\r\n        32 + // S\r\n        32 + // Seed\r\n        0 +  // Dummy entry: The following elements are included for gas efficiency:\r\n        32 + // uWitness (gets padded to 256 bits, even though it's only 160)\r\n        64 + // cGammaWitness\r\n        64 + // sHashWitness\r\n        32;  // zInv  (Leave Output out, because that can be efficiently calculated)\r\n\r\n    /* ***************************************************************************\r\n   * @notice Returns proof's output, if proof is valid. Otherwise reverts\r\n\r\n   * @param proof A binary-encoded proof\r\n   *\r\n   * Throws if proof is invalid, otherwise:\r\n   * @return output i.e., the random output implied by the proof\r\n   * ***************************************************************************\r\n   * @dev See the calculation of PROOF_LENGTH for the binary layout of proof.\r\n   */\r\n    function randomValueFromVORProof(bytes memory proof) internal view returns (uint256 output) {\r\n        require(proof.length == PROOF_LENGTH, \"wrong proof length\");\r\n\r\n        uint256[2] memory pk; // parse proof contents into these variables\r\n        uint256[2] memory gamma;\r\n        // c, s and seed combined (prevents \"stack too deep\" compilation error)\r\n        uint256[3] memory cSSeed;\r\n        address uWitness;\r\n        uint256[2] memory cGammaWitness;\r\n        uint256[2] memory sHashWitness;\r\n        uint256 zInv;\r\n\r\n        (pk, gamma, cSSeed, uWitness, cGammaWitness, sHashWitness, zInv) =\r\n            abi.decode(proof,\r\n                (\r\n                    uint256[2],\r\n                    uint256[2],\r\n                    uint256[3],\r\n                    address,\r\n                    uint256[2],\r\n                    uint256[2],\r\n                    uint256\r\n                )\r\n            );\r\n\r\n        verifyVORProof(\r\n            pk,\r\n            gamma,\r\n            cSSeed[0], // c\r\n            cSSeed[1], // s\r\n            cSSeed[2], // seed\r\n            uWitness,\r\n            cGammaWitness,\r\n            sHashWitness,\r\n            zInv\r\n        );\r\n\r\n        output = uint256(keccak256(abi.encode(VOR_RANDOM_OUTPUT_HASH_PREFIX, gamma)));\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title VORRequestIDBase\r\n */\r\ncontract VORRequestIDBase {\r\n    /**\r\n     * @notice returns the seed which is actually input to the VOR coordinator\r\n     *\r\n     * @dev To prevent repetition of VOR output due to repetition of the\r\n     * @dev user-supplied seed, that seed is combined in a hash with the\r\n     * @dev user-specific nonce, and the address of the consuming contract. The\r\n     * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\r\n     * @dev the final seed, but the nonce does protect against repetition in\r\n     * @dev requests which are included in a single block.\r\n     *\r\n     * @param _userSeed VOR seed input provided by user\r\n     * @param _requester Address of the requesting contract\r\n     * @param _nonce User-specific nonce at the time of the request\r\n     */\r\n    function makeVORInputSeed(\r\n        bytes32 _keyHash,\r\n        uint256 _userSeed,\r\n        address _requester,\r\n        uint256 _nonce\r\n    ) internal pure returns (uint256) {\r\n        return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the id for this request\r\n     * @param _keyHash The serviceAgreement ID to be used for this request\r\n     * @param _vORInputSeed The seed to be passed directly to the VOR\r\n     * @return The id for this request\r\n     *\r\n     * @dev Note that _vORInputSeed is not the seed passed by the consuming\r\n     * @dev contract, but the one generated by makeVORInputSeed\r\n     */\r\n    function makeRequestId(bytes32 _keyHash, uint256 _vORInputSeed) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(_keyHash, _vORInputSeed));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title VORCoordinator\r\n * @dev Coordinates on-chain verifiable-randomness requests\r\n */\r\ncontract VORCoordinator is Ownable, ReentrancyGuard, VOR, VORRequestIDBase {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    IERC20_Ex internal xFUND;\r\n    BlockHashStoreInterface internal blockHashStore;\r\n\r\n    constructor(address _xfund, address _blockHashStore) public {\r\n        xFUND = IERC20_Ex(_xfund);\r\n        blockHashStore = BlockHashStoreInterface(_blockHashStore);\r\n    }\r\n\r\n    struct Callback {\r\n        // Tracks an ongoing request\r\n        address callbackContract; // Requesting contract, which will receive response\r\n        // Amount of xFUND paid at request time. Total xFUND = 1e9 * 1e18 < 2^96, so\r\n        // this representation is adequate, and saves a word of storage when this\r\n        // field follows the 160-bit callbackContract address.\r\n        uint96 randomnessFee;\r\n        // Commitment to seed passed to oracle by this contract, and the number of\r\n        // the block in which the request appeared. This is the keccak256 of the\r\n        // concatenation of those values. Storing this commitment saves a word of\r\n        // storage.\r\n        bytes32 seedAndBlockNum;\r\n    }\r\n\r\n    struct ServiceAgreement {\r\n        // Tracks oracle commitments to VOR service\r\n        address payable vOROracle; // Oracle committing to respond with VOR service\r\n        uint96 fee; // Minimum payment for oracle response. Total xFUND=1e9*1e18<2^96\r\n        mapping(address => uint96) granularFees; // Per consumer fees if required\r\n    }\r\n\r\n    struct Consumer {\r\n        uint256 amount;\r\n        mapping(address => uint256) providers;\r\n    }\r\n\r\n    /* (provingKey, seed) */\r\n    mapping(bytes32 => Callback) public callbacks;\r\n    /* provingKey */\r\n    mapping(bytes32 => ServiceAgreement) public serviceAgreements;\r\n    /* oracle */\r\n    /* xFUND balance */\r\n    mapping(address => uint256) public withdrawableTokens;\r\n    /* provingKey */\r\n    /* consumer */\r\n    mapping(bytes32 => mapping(address => uint256)) private nonces;\r\n\r\n    event RandomnessRequest(\r\n        bytes32 keyHash,\r\n        uint256 seed,\r\n        address sender,\r\n        uint256 fee,\r\n        bytes32 requestID\r\n    );\r\n\r\n    event NewServiceAgreement(bytes32 keyHash, uint256 fee);\r\n\r\n    event ChangeFee(bytes32 keyHash, uint256 fee);\r\n    event ChangeGranularFee(bytes32 keyHash, address consumer, uint256 fee);\r\n\r\n    event RandomnessRequestFulfilled(bytes32 requestId, uint256 output);\r\n\r\n    /**\r\n     * @dev getProviderAddress - get provider address\r\n     * @return address\r\n     */\r\n    function getProviderAddress(bytes32 _keyHash) external view returns (address) {\r\n        return serviceAgreements[_keyHash].vOROracle;\r\n    }\r\n\r\n    /**\r\n     * @dev getProviderFee - get provider's base fee\r\n     * @return address\r\n     */\r\n    function getProviderFee(bytes32 _keyHash) external view returns (uint96) {\r\n        return serviceAgreements[_keyHash].fee;\r\n    }\r\n\r\n    /**\r\n     * @dev getProviderGranularFee - get provider's granular fee for selected consumer\r\n     * @return address\r\n     */\r\n    function getProviderGranularFee(bytes32 _keyHash, address _consumer) external view returns (uint96) {\r\n        if(serviceAgreements[_keyHash].granularFees[_consumer] > 0) {\r\n            return serviceAgreements[_keyHash].granularFees[_consumer];\r\n        } else {\r\n            return serviceAgreements[_keyHash].fee;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Commits calling address to serve randomness\r\n     * @param _fee minimum xFUND payment required to serve randomness\r\n     * @param _oracle the address of the node with the proving key\r\n     * @param _publicProvingKey public key used to prove randomness\r\n     */\r\n    function registerProvingKey(\r\n        uint256 _fee,\r\n        address payable _oracle,\r\n        uint256[2] calldata _publicProvingKey\r\n    ) external {\r\n        bytes32 keyHash = hashOfKey(_publicProvingKey);\r\n        address oldVOROracle = serviceAgreements[keyHash].vOROracle;\r\n        require(oldVOROracle == address(0), \"please register a new key\");\r\n        require(_oracle != address(0), \"_oracle must not be 0x0\");\r\n        serviceAgreements[keyHash].vOROracle = _oracle;\r\n\r\n        require(_fee > 0, \"fee cannot be zero\");\r\n        require(_fee <= 1e9 ether, \"fee too high\");\r\n        serviceAgreements[keyHash].fee = uint96(_fee);\r\n        emit NewServiceAgreement(keyHash, _fee);\r\n    }\r\n\r\n    /**\r\n     * @notice Changes the provider's base fee\r\n     * @param _publicProvingKey public key used to prove randomness\r\n     * @param _fee minimum xFUND payment required to serve randomness\r\n     */\r\n    function changeFee(uint256[2] calldata _publicProvingKey, uint256 _fee) external {\r\n        bytes32 keyHash = hashOfKey(_publicProvingKey);\r\n        require(serviceAgreements[keyHash].vOROracle == _msgSender(), \"only oracle can change the fee\");\r\n        require(_fee > 0, \"fee cannot be zero\");\r\n        require(_fee <= 1e9 ether, \"fee too high\");\r\n        serviceAgreements[keyHash].fee = uint96(_fee);\r\n        emit ChangeFee(keyHash, _fee);\r\n    }\r\n\r\n    /**\r\n     * @notice Changes the provider's fee for a consumer contract\r\n     * @param _publicProvingKey public key used to prove randomness\r\n     * @param _fee minimum xFUND payment required to serve randomness\r\n     */\r\n    function changeGranularFee(uint256[2] calldata _publicProvingKey, uint256 _fee, address _consumer) external {\r\n        bytes32 keyHash = hashOfKey(_publicProvingKey);\r\n        require(serviceAgreements[keyHash].vOROracle == _msgSender(), \"only oracle can change the fee\");\r\n        require(_fee > 0, \"fee cannot be zero\");\r\n        require(_fee <= 1e9 ether, \"fee too high\");\r\n        serviceAgreements[keyHash].granularFees[_consumer] = uint96(_fee);\r\n        emit ChangeGranularFee(keyHash, _consumer, _fee);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the oracle operator to withdraw their xFUND\r\n     * @param _recipient is the address the funds will be sent to\r\n     * @param _amount is the amount of xFUND transferred from the Coordinator contract\r\n     */\r\n    function withdraw(address _recipient, uint256 _amount) external hasAvailableFunds(_amount) {\r\n        withdrawableTokens[_msgSender()] = withdrawableTokens[_msgSender()].sub(_amount);\r\n        assert(xFUND.transfer(_recipient, _amount));\r\n    }\r\n\r\n    /**\r\n     * @notice creates the request for randomness\r\n     *\r\n     * @param _keyHash ID of the VOR public key against which to generate output\r\n     * @param _consumerSeed Input to the VOR, from which randomness is generated\r\n     * @param _feePaid Amount of xFUND sent with request. Must exceed fee for key\r\n     *\r\n     * @dev _consumerSeed is mixed with key hash, sender address and nonce to\r\n     * @dev obtain preSeed, which is passed to VOR oracle, which mixes it with the\r\n     * @dev hash of the block containing this request, to compute the final seed.\r\n     *\r\n     * @dev The requestId used to store the request data is constructed from the\r\n     * @dev preSeed and keyHash.\r\n     */\r\n    function randomnessRequest(\r\n        bytes32 _keyHash,\r\n        uint256 _consumerSeed,\r\n        uint256 _feePaid\r\n    ) external sufficientXFUND(_feePaid, _keyHash) {\r\n        require(address(_msgSender()).isContract(), \"request can only be made by a contract\");\r\n\r\n        xFUND.transferFrom(_msgSender(), address(this), _feePaid);\r\n\r\n        uint256 nonce = nonces[_keyHash][_msgSender()];\r\n        uint256 preSeed = makeVORInputSeed(_keyHash, _consumerSeed, _msgSender(), nonce);\r\n        bytes32 requestId = makeRequestId(_keyHash, preSeed);\r\n\r\n        // Cryptographically guaranteed by preSeed including an increasing nonce\r\n        assert(callbacks[requestId].callbackContract == address(0));\r\n        callbacks[requestId].callbackContract = _msgSender();\r\n\r\n        assert(_feePaid < 1e27); // Total xFUND fits in uint96\r\n        callbacks[requestId].randomnessFee = uint96(_feePaid);\r\n\r\n        callbacks[requestId].seedAndBlockNum = keccak256(abi.encodePacked(preSeed, block.number));\r\n        emit RandomnessRequest(_keyHash, preSeed, _msgSender(), _feePaid, requestId);\r\n        nonces[_keyHash][_msgSender()] = nonces[_keyHash][_msgSender()].add(1);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the serviceAgreements key associated with this public key\r\n     * @param _publicKey the key to return the address for\r\n     */\r\n    function hashOfKey(uint256[2] memory _publicKey) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(_publicKey));\r\n    }\r\n\r\n    /**\r\n     * @notice Called by the node to fulfill requests\r\n     *\r\n     * @param _proof the proof of randomness. Actual random output built from this\r\n     */\r\n    function fulfillRandomnessRequest(bytes memory _proof) public {\r\n        (bytes32 currentKeyHash, Callback memory callback, bytes32 requestId, uint256 randomness) =\r\n            getRandomnessFromProof(_proof);\r\n\r\n        // Pay oracle\r\n        address payable oracle = serviceAgreements[currentKeyHash].vOROracle;\r\n        withdrawableTokens[oracle] = withdrawableTokens[oracle].add(callback.randomnessFee);\r\n\r\n        // Forget request. Must precede callback (prevents reentrancy)\r\n        delete callbacks[requestId];\r\n        callBackWithRandomness(requestId, randomness, callback.callbackContract);\r\n\r\n        emit RandomnessRequestFulfilled(requestId, randomness);\r\n    }\r\n\r\n    // Offsets into fulfillRandomnessRequest's _proof of various values\r\n    //\r\n    // Public key. Skips byte array's length prefix.\r\n    uint256 public constant PUBLIC_KEY_OFFSET = 0x20;\r\n    // Seed is 7th word in proof, plus word for length, (6+1)*0x20=0xe0\r\n    uint256 public constant PRESEED_OFFSET = 0xe0;\r\n\r\n    function callBackWithRandomness(bytes32 requestId, uint256 randomness, address consumerContract) internal {\r\n        // Dummy variable; allows access to method selector in next line. See\r\n        // https://github.com/ethereum/solidity/issues/3506#issuecomment-553727797\r\n        IVORConsumerBase v;\r\n        bytes memory resp = abi.encodeWithSelector(v.rawFulfillRandomness.selector, requestId, randomness);\r\n        // The bound b here comes from https://eips.ethereum.org/EIPS/eip-150. The\r\n        // actual gas available to the consuming contract will be b-floor(b/64).\r\n        // This is chosen to leave the consuming contract ~200k gas, after the cost\r\n        // of the call itself.\r\n        uint256 b = 206000;\r\n        require(gasleft() >= b, \"not enough gas for consumer\");\r\n        // A low-level call is necessary, here, because we don't want the consuming\r\n        // contract to be able to revert this execution, and thus deny the oracle\r\n        // payment for a valid randomness response. This also necessitates the above\r\n        // check on the gasleft, as otherwise there would be no indication if the\r\n        // callback method ran out of gas.\r\n        //\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, ) = consumerContract.call(resp);\r\n        // Avoid unused-local-variable warning. (success is only present to prevent\r\n        // a warning that the return value of consumerContract.call is unused.)\r\n        (success);\r\n    }\r\n\r\n    function getRandomnessFromProof(bytes memory _proof)\r\n        internal\r\n        view\r\n        returns (\r\n            bytes32 currentKeyHash,\r\n            Callback memory callback,\r\n            bytes32 requestId,\r\n            uint256 randomness\r\n        )\r\n    {\r\n        // blockNum follows proof, which follows length word (only direct-number\r\n        // constants are allowed in assembly, so have to compute this in code)\r\n        uint256 blocknumOffset = 0x20 + PROOF_LENGTH;\r\n        // _proof.length skips the initial length word, so not including the\r\n        // blocknum in this length check balances out.\r\n        require(_proof.length == blocknumOffset, \"wrong proof length\");\r\n        uint256[2] memory publicKey;\r\n        uint256 preSeed;\r\n        uint256 blockNum;\r\n        assembly {\r\n            // solhint-disable-line no-inline-assembly\r\n            publicKey := add(_proof, PUBLIC_KEY_OFFSET)\r\n            preSeed := mload(add(_proof, PRESEED_OFFSET))\r\n            blockNum := mload(add(_proof, blocknumOffset))\r\n        }\r\n        currentKeyHash = hashOfKey(publicKey);\r\n        requestId = makeRequestId(currentKeyHash, preSeed);\r\n        callback = callbacks[requestId];\r\n        require(callback.callbackContract != address(0), \"no corresponding request\");\r\n        require(callback.seedAndBlockNum == keccak256(abi.encodePacked(preSeed, blockNum)), \"wrong preSeed or block num\");\r\n\r\n        bytes32 blockHash = blockhash(blockNum);\r\n        if (blockHash == bytes32(0)) {\r\n            blockHash = blockHashStore.getBlockhash(blockNum);\r\n            require(blockHash != bytes32(0), \"please prove blockhash\");\r\n        }\r\n        // The seed actually used by the VOR machinery, mixing in the blockhash\r\n        uint256 actualSeed = uint256(keccak256(abi.encodePacked(preSeed, blockHash)));\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            // Construct the actual proof from the remains of _proof\r\n            mstore(add(_proof, PRESEED_OFFSET), actualSeed)\r\n            mstore(_proof, PROOF_LENGTH)\r\n        }\r\n        randomness = VOR.randomValueFromVORProof(_proof); // Reverts on failure\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if amount is not at least what was agreed upon in the service agreement\r\n     * @param _feePaid The payment for the request\r\n     * @param _keyHash The key which the request is for\r\n     */\r\n    modifier sufficientXFUND(uint256 _feePaid, bytes32 _keyHash) {\r\n        if(serviceAgreements[_keyHash].granularFees[_msgSender()] > 0) {\r\n            require(_feePaid >= serviceAgreements[_keyHash].granularFees[_msgSender()], \"Below agreed payment\");\r\n        } else {\r\n            require(_feePaid >= serviceAgreements[_keyHash].fee, \"Below agreed payment\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if amount requested is greater than withdrawable balance\r\n     * @param _amount The given amount to compare to `withdrawableTokens`\r\n     */\r\n    modifier hasAvailableFunds(uint256 _amount) {\r\n        require(withdrawableTokens[_msgSender()] >= _amount, \"can't withdraw more than balance\");\r\n        _;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_xfund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_blockHashStore\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"ChangeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"ChangeGranularFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"NewServiceAgreement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestID\",\"type\":\"bytes32\"}],\"name\":\"RandomnessRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"output\",\"type\":\"uint256\"}],\"name\":\"RandomnessRequestFulfilled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRESEED_OFFSET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROOF_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_KEY_OFFSET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"callbacks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"callbackContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"randomnessFee\",\"type\":\"uint96\"},{\"internalType\":\"bytes32\",\"name\":\"seedAndBlockNum\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_publicProvingKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_publicProvingKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"}],\"name\":\"changeGranularFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"fulfillRandomnessRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"name\":\"getProviderAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"name\":\"getProviderFee\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"}],\"name\":\"getProviderGranularFee\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"hashOfKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_consumerSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feePaid\",\"type\":\"uint256\"}],\"name\":\"randomnessRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_publicProvingKey\",\"type\":\"uint256[2]\"}],\"name\":\"registerProvingKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"serviceAgreements\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"vOROracle\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"VORCoordinator","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000892a6f9df0147e5f079b0993f486f9aca3c87881000000000000000000000000540fcdd99f4ec8cdac1345d152857b1b20e4d5f6","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b139b48eb645b65b8cd48fa32f95418d693f6f4ee33fe894ab4f537c7d1b1aae"}]}