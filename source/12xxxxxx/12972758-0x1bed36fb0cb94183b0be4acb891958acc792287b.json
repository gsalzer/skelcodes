{"status":"1","message":"OK","result":[{"SourceCode":"{\"Context.sol\":{\"content\":\"pragma solidity ^0.5.8;\\n\\n\\ncontract Context {\\n    constructor () internal { }\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n}\"},\"ERC20.sol\":{\"content\":\"pragma solidity ^0.5.8;\\n\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Context.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n\\ncontract BaseERC20 is Context, IERC20 {\\n    using SafeMath for uint;\\n\\n    mapping (address =\\u003e uint) private _balances;\\n\\n    mapping (address =\\u003e mapping (address =\\u003e uint)) private _allowances;\\n\\n    uint private _totalSupply;\\n\\n    function totalSupply() public view returns (uint) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view returns (uint) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint amount) public returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view returns (uint) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint amount) public returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint amount) public returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint addedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    function _transfer(address sender, address recipient, uint amount) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _mint(address account, uint amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function _burn(address account, uint amount) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _burnFrom(address account, uint256 value) internal {\\n        _allowances[account][msg.sender] = _allowances[account][msg.sender].sub(\\n            value);\\n        _burn(account, value);\\n    }\\n\\n    function _approve(address owner, address spender, uint amount) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n}\\n\\ncontract ERC20Detailed is BaseERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\\n\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.5.8;\\n\\n\\ncontract ERC20Events {\\n    event Approval(address indexed src, address indexed guy, uint wad);\\n    event Transfer(address indexed src, address indexed dst, uint wad);\\n}\\n\\n\\ncontract IERC20 is ERC20Events {\\n    function totalSupply() public view returns (uint);\\n    function balanceOf(address guy) public view returns (uint);\\n    function allowance(address src, address guy) public view returns (uint);\\n\\n    function approve(address guy, uint wad) public returns (bool);\\n    function transfer(address dst, uint wad) public returns (bool);\\n    function transferFrom(\\n        address src, address dst, uint wad\\n    ) public returns (bool);\\n}\\n\\n\\n\"},\"OLY.sol\":{\"content\":\"pragma solidity ^0.5.8;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\ncontract OlyCoinToken is IERC20, ERC20Detailed, Ownable {\\n\\tstruct vault {\\n\\t\\tuint256 olyAmount;\\n\\t\\tuint256 rewardAmount;\\n\\t\\tuint256 unlockTime;\\n\\t}\\n\\n\\tevent Stake(address indexed holder, address indexed delegate, uint256 amount, uint256 rewardAmount, uint256 time);\\n\\tevent Unstake(address indexed holder, uint256 amount, uint256 rewardAmount);\\n\\n\\tuint256 private _maxOly;\\n\\tuint256 private _stakingRate;\\n\\tuint256 private _stakingPeriod;\\n\\tuint256 private _delegateReward;\\n\\tbool private _isStakingActive = true;\\n\\n\\tmapping(address =\\u003e mapping(uint256 =\\u003e vault)) public vaults;\\n\\tmapping(address =\\u003e uint256) public vaultCount;\\n\\tmapping(address =\\u003e uint256) public totalStake;\\n\\n    constructor(uint256 maxOly, uint256 mintCount, uint256 stakingRate, uint256 stakingPeriod, uint256 delegateReward)\\n    public ERC20Detailed(\\\"OlyCoin\\\", \\\"OLY\\\", 4) {\\n    \\t_maxOly = maxOly * 1e4;\\n    \\t_stakingRate = stakingRate;\\n    \\t_stakingPeriod = stakingPeriod;\\n    \\t_delegateReward = delegateReward;\\n        mintOly(owner(), mintCount * 1e4);\\n    }\\n\\n    function maxOly() public view returns (uint256) {\\n    \\treturn _maxOly;\\n    }\\n\\n    function stakingRate() public view returns (uint256) {\\n    \\treturn _stakingRate;\\n    }\\n\\n    function stakingPeriod() public view returns (uint256) {\\n    \\treturn _stakingPeriod;\\n    }\\n\\n    function delegateReward() public view returns (uint256) {\\n    \\treturn _delegateReward;\\n    }\\n\\n    function isStakingActive() public view returns (bool) {\\n    \\treturn _isStakingActive;\\n    }\\n\\n    function toggleStaking() public onlyOwner {\\n    \\t_isStakingActive = !_isStakingActive;\\n    }\\n\\n    function mintOly(address to, uint256 numberOfTokens) public onlyOwner {\\n    \\trequire(numberOfTokens \\u003e 0, \\\"Can only issue more than 0 tokens\\\");\\n    \\trequire(\\n    \\t\\ttotalSupply().add(numberOfTokens) \\u003c= maxOly(),\\n    \\t\\t\\\"The issue of coins will exceed the maximum supply of OlyCoin\\\"\\n    \\t);\\n\\n    \\t_mint(to, numberOfTokens);\\n    }\\n\\n    function setStakingRate(uint256 newStakingRate) public onlyOwner {\\n    \\trequire(newStakingRate \\u003e= 1, \\\"The percentage of staking can not be lower than 1\\\");\\n    \\t_stakingRate = newStakingRate;\\n    }\\n\\n    function setStakingPeriod(uint256 newStakingPeriod) public onlyOwner {\\n    \\trequire(newStakingPeriod \\u003e= 1, \\\"The period of staking can not be lower than 1\\\");\\n    \\t_stakingPeriod = newStakingPeriod;\\n    }\\n\\n    function setDelegateReward(uint256 newDelegateReward) public onlyOwner {\\n    \\t_delegateReward = newDelegateReward;\\n    }\\n\\n    function burn(uint256 value) public {\\n    \\trequire(maxOly() \\u003e= value \\u0026\\u0026 value \\u003e 0, \\\"It is impossible to burn such a number of tokens\\\");\\n    \\t_maxOly = maxOly().sub(value);\\n    \\t_burn(msg.sender, value);\\n    }\\n\\n    function burnFrom(address from, uint256 value) public {\\n    \\trequire(maxOly() \\u003e= value \\u0026\\u0026 value \\u003e 0, \\\"It is impossible to burn such a number of tokens\\\");\\n    \\t_maxOly = maxOly().sub(value);\\n        _burnFrom(from, value);\\n    }\\n\\n    function stake(address delegate, uint256 amount) public returns (uint256 rewardAmount) {\\n    \\trequire(delegate != address(0), \\\"The delegate cannot be a zero address\\\");\\n    \\trequire(delegate != msg.sender, \\\"The delegate cannot be the sender\\\");\\n    \\trewardAmount = amount.mul(stakingRate()).mul(stakingPeriod().div(30 days)).div(1e2);\\n    \\trequire(rewardAmount \\u003e 0, \\\"Invalid amount\\\");\\n    \\tvault storage newVault = vaults[msg.sender][vaultCount[msg.sender]];\\n    \\tnewVault.olyAmount = amount;\\n    \\tnewVault.rewardAmount = rewardAmount;\\n    \\tnewVault.unlockTime = block.timestamp.add(stakingPeriod());\\n    \\ttotalStake[msg.sender] = totalStake[msg.sender].add(amount);\\n    \\tvaultCount[msg.sender]++;\\n    \\ttransfer(address(this), amount);\\n\\n    \\tif (delegateReward() \\u003e 0 \\u0026\\u0026 totalStake[delegate] \\u003e= 1000) {\\n    \\t\\t_mint(delegate, amount.mul(delegateReward()).div(1e2));\\n    \\t}\\n\\n    \\temit Stake(msg.sender, delegate, amount, rewardAmount, stakingPeriod());\\n    }\\n\\n    function unstake(uint256 index) public returns (uint256 olyAmount, uint256 rewardAmount) {\\n    \\tvault storage stakeVault = vaults[msg.sender][index];\\n    \\trequire(block.timestamp \\u003e= stakeVault.unlockTime, \\\"This deposit is locked\\\");\\n    \\tolyAmount = stakeVault.olyAmount.add(0);\\n    \\trewardAmount = stakeVault.rewardAmount.add(0);\\n    \\tstakeVault.olyAmount = 0;\\n    \\tstakeVault.rewardAmount = 0;\\n    \\ttotalStake[msg.sender] = totalStake[msg.sender].sub(olyAmount);\\n\\n    \\t_transfer(address(this), msg.sender, olyAmount);\\n    \\t_mint(msg.sender, rewardAmount);\\n\\n    \\temit Unstake(msg.sender, olyAmount, rewardAmount);\\n    }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"pragma solidity ^0.5.8;\\n\\n\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n    * account.\\n    */\\n    constructor() internal {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n    * @return the address of the owner.\\n    */\\n    function owner() public view returns(address) {\\n        return _owner;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any account other than the owner.\\n    */\\n    modifier onlyOwner() {\\n        require(isOwner());\\n        _;\\n    }\\n\\n    /**\\n    * @return true if `msg.sender` is the owner of the contract.\\n    */\\n    function isOwner() public view returns(bool) {\\n        return msg.sender == _owner;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to relinquish control of the contract.\\n    * @notice Renouncing to ownership will leave the contract without an owner.\\n    * It will not be possible to call the functions with the `onlyOwner`\\n    * modifier anymore.\\n    */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n    * @dev Transfers control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0));\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.8;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"delegateReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStakingRate\",\"type\":\"uint256\"}],\"name\":\"setStakingRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[{\"name\":\"olyAmount\",\"type\":\"uint256\"},{\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDelegateReward\",\"type\":\"uint256\"}],\"name\":\"setDelegateReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleStaking\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStakingActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaults\",\"outputs\":[{\"name\":\"olyAmount\",\"type\":\"uint256\"},{\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStakingPeriod\",\"type\":\"uint256\"}],\"name\":\"setStakingPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delegate\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxOly\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"mintOly\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"maxOly\",\"type\":\"uint256\"},{\"name\":\"mintCount\",\"type\":\"uint256\"},{\"name\":\"stakingRate\",\"type\":\"uint256\"},{\"name\":\"stakingPeriod\",\"type\":\"uint256\"},{\"name\":\"delegateReward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"OlyCoinToken","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000002540be4000000000000000000000000000000000000000000000000000000000000989680000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000c5c100000000000000000000000000000000000000000000000000000000000000000c","EVMVersion":"petersburg","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://73d9f18035eb3b60e35d9a8ef02493af01eca97882072ebc72ea4b678b1d5a0d"}]}