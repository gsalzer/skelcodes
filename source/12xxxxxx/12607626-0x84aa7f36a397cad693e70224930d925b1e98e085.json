{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"sources\": {\r\n    \"Initializable.sol\": {\r\n      \"content\": \"// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/v3.0.0/contracts/Initializable.sol\\n// Added public isInitialized() view of private initialized bool.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to use in the initializer function of a contract.\\n     */\\n    modifier initializer() {\\n        require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        assembly {\\n            cs := extcodesize(self)\\n        }\\n        return cs == 0;\\n    }\\n\\n    /**\\n     * @dev Return true if and only if the contract has been initialized\\n     * @return whether the contract has been initialized\\n     */\\n    function isInitialized() public view returns (bool) {\\n        return initialized;\\n    }\\n\\n    // Reserved storage space to allow for layout changes in the future.\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"IPoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\ninterface IPoolFactory {\\n    function isPool(address pool) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"UpgradeableERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\nimport {Address} from \\\"Address.sol\\\";\\nimport {Context} from \\\"Context.sol\\\";\\nimport {IERC20} from \\\"IERC20.sol\\\";\\nimport {SafeMath} from \\\"SafeMath.sol\\\";\\n\\nimport {Initializable} from \\\"Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Initializable, Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_initialize(string memory name, string memory symbol) internal initializer {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public virtual view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public override view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public override view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public virtual override view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\")\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    function updateNameAndSymbol(string memory __name, string memory __symbol) internal {\\n        _name = __name;\\n        _symbol = __symbol;\\n    }\\n}\\n\"\r\n    },\r\n    \"ITrueLender2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\nimport {ITrueFiPool2} from \\\"ITrueFiPool2.sol\\\";\\n\\ninterface ITrueLender2 {\\n    // @dev calculate overall value of the pools\\n    function value(ITrueFiPool2 pool) external view returns (uint256);\\n\\n    // @dev distribute a basket of tokens for exiting user\\n    function distribute(\\n        address recipient,\\n        uint256 numerator,\\n        uint256 denominator\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"IERC20WithDecimals.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\nimport {IERC20} from \\\"IERC20.sol\\\";\\n\\ninterface IERC20WithDecimals is IERC20 {\\n    function decimals() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"ITrueFiPoolOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\nimport {IERC20WithDecimals} from \\\"IERC20WithDecimals.sol\\\";\\n\\n/**\\n * @dev Oracle that converts any token to and from TRU\\n * Used for liquidations and valuing of liquidated TRU in the pool\\n */\\ninterface ITrueFiPoolOracle {\\n    // token address\\n    function token() external view returns (IERC20WithDecimals);\\n\\n    // amount of tokens 1 TRU is worth\\n    function truToToken(uint256 truAmount) external view returns (uint256);\\n\\n    // amount of TRU 1 token is worth\\n    function tokenToTru(uint256 tokenAmount) external view returns (uint256);\\n\\n    // USD price of token with 18 decimals\\n    function tokenToUsd(uint256 tokenAmount) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"I1Inch3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\npragma experimental ABIEncoderV2;\\n\\ninterface I1Inch3 {\\n    struct SwapDescription {\\n        address srcToken;\\n        address dstToken;\\n        address srcReceiver;\\n        address dstReceiver;\\n        uint256 amount;\\n        uint256 minReturnAmount;\\n        uint256 flags;\\n        bytes permit;\\n    }\\n\\n    function swap(\\n        address caller,\\n        SwapDescription calldata desc,\\n        bytes calldata data\\n    )\\n        external\\n        returns (\\n            uint256 returnAmount,\\n            uint256 gasLeft,\\n            uint256 chiSpent\\n        );\\n\\n    function unoswap(\\n        address srcToken,\\n        uint256 amount,\\n        uint256 minReturn,\\n        bytes32[] calldata /* pools */\\n    ) external payable returns (uint256 returnAmount);\\n}\\n\"\r\n    },\r\n    \"ITrueFiPool2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\nimport {ERC20, IERC20} from \\\"UpgradeableERC20.sol\\\";\\nimport {ITrueLender2} from \\\"ITrueLender2.sol\\\";\\nimport {ITrueFiPoolOracle} from \\\"ITrueFiPoolOracle.sol\\\";\\nimport {I1Inch3} from \\\"I1Inch3.sol\\\";\\n\\ninterface ITrueFiPool2 is IERC20 {\\n    function initialize(\\n        ERC20 _token,\\n        ERC20 _stakingToken,\\n        ITrueLender2 _lender,\\n        I1Inch3 __1Inch,\\n        address __owner\\n    ) external;\\n\\n    function token() external view returns (ERC20);\\n\\n    function oracle() external view returns (ITrueFiPoolOracle);\\n\\n    /**\\n     * @dev Join the pool by depositing tokens\\n     * @param amount amount of tokens to deposit\\n     */\\n    function join(uint256 amount) external;\\n\\n    /**\\n     * @dev borrow from pool\\n     * 1. Transfer TUSD to sender\\n     * 2. Only lending pool should be allowed to call this\\n     */\\n    function borrow(uint256 amount) external;\\n\\n    /**\\n     * @dev pay borrowed money back to pool\\n     * 1. Transfer TUSD from sender\\n     * 2. Only lending pool should be allowed to call this\\n     */\\n    function repay(uint256 currencyAmount) external;\\n}\\n\"\r\n    },\r\n    \"ILoanFactory2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\nimport {ITrueFiPool2} from \\\"ITrueFiPool2.sol\\\";\\n\\ninterface ILoanFactory2 {\\n    function createLoanToken(\\n        ITrueFiPool2 _pool,\\n        uint256 _amount,\\n        uint256 _term,\\n        uint256 _apy\\n    ) external;\\n\\n    function isLoanToken(address) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"SafeMath.sol\\\";\\nimport \\\"Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"ILoanToken2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\nimport {IERC20} from \\\"IERC20.sol\\\";\\nimport {ERC20} from \\\"UpgradeableERC20.sol\\\";\\nimport {ITrueFiPool2} from \\\"ITrueFiPool2.sol\\\";\\n\\ninterface ILoanToken2 is IERC20 {\\n    enum Status {Awaiting, Funded, Withdrawn, Settled, Defaulted, Liquidated}\\n\\n    function borrower() external view returns (address);\\n\\n    function amount() external view returns (uint256);\\n\\n    function term() external view returns (uint256);\\n\\n    function apy() external view returns (uint256);\\n\\n    function start() external view returns (uint256);\\n\\n    function lender() external view returns (address);\\n\\n    function debt() external view returns (uint256);\\n\\n    function pool() external view returns (ITrueFiPool2);\\n\\n    function profit() external view returns (uint256);\\n\\n    function status() external view returns (Status);\\n\\n    function getParameters()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function fund() external;\\n\\n    function withdraw(address _beneficiary) external;\\n\\n    function settle() external;\\n\\n    function enterDefault() external;\\n\\n    function liquidate() external;\\n\\n    function redeem(uint256 _amount) external;\\n\\n    function repay(address _sender, uint256 _amount) external;\\n\\n    function repayInFull(address _sender) external;\\n\\n    function reclaim() external;\\n\\n    function allowTransfer(address account, bool _status) external;\\n\\n    function repaid() external view returns (uint256);\\n\\n    function isRepaid() external view returns (bool);\\n\\n    function balance() external view returns (uint256);\\n\\n    function value(uint256 _balance) external view returns (uint256);\\n\\n    function token() external view returns (ERC20);\\n\\n    function version() external pure returns (uint8);\\n}\\n\\n//interface IContractWithPool {\\n//    function pool() external view returns (ITrueFiPool2);\\n//}\\n//\\n//// Had to be split because of multiple inheritance problem\\n//interface ILoanToken2 is ILoanToken, IContractWithPool {\\n//\\n//}\\n\"\r\n    },\r\n    \"ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"Context.sol\\\";\\nimport \\\"IERC20.sol\\\";\\nimport \\\"SafeMath.sol\\\";\\nimport \\\"Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"ILoanToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\nimport {IERC20} from \\\"IERC20.sol\\\";\\n\\ninterface ILoanToken is IERC20 {\\n    enum Status {Awaiting, Funded, Withdrawn, Settled, Defaulted, Liquidated}\\n\\n    function borrower() external view returns (address);\\n\\n    function amount() external view returns (uint256);\\n\\n    function term() external view returns (uint256);\\n\\n    function apy() external view returns (uint256);\\n\\n    function start() external view returns (uint256);\\n\\n    function lender() external view returns (address);\\n\\n    function debt() external view returns (uint256);\\n\\n    function profit() external view returns (uint256);\\n\\n    function status() external view returns (Status);\\n\\n    function borrowerFee() external view returns (uint256);\\n\\n    function receivedAmount() external view returns (uint256);\\n\\n    function isLoanToken() external pure returns (bool);\\n\\n    function getParameters()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function fund() external;\\n\\n    function withdraw(address _beneficiary) external;\\n\\n    function settle() external;\\n\\n    function enterDefault() external;\\n\\n    function liquidate() external;\\n\\n    function redeem(uint256 _amount) external;\\n\\n    function repay(address _sender, uint256 _amount) external;\\n\\n    function repayInFull(address _sender) external;\\n\\n    function reclaim() external;\\n\\n    function allowTransfer(address account, bool _status) external;\\n\\n    function repaid() external view returns (uint256);\\n\\n    function isRepaid() external view returns (bool);\\n\\n    function balance() external view returns (uint256);\\n\\n    function value(uint256 _balance) external view returns (uint256);\\n\\n    function currencyToken() external view returns (IERC20);\\n\\n    function version() external pure returns (uint8);\\n}\\n\"\r\n    },\r\n    \"LoanToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\nimport {ERC20} from \\\"ERC20.sol\\\";\\nimport {IERC20} from \\\"IERC20.sol\\\";\\nimport {SafeMath} from \\\"SafeMath.sol\\\";\\nimport {SafeERC20} from \\\"SafeERC20.sol\\\";\\n\\nimport {ILoanToken} from \\\"ILoanToken.sol\\\";\\n\\n/**\\n * @title LoanToken\\n * @dev A token which represents share of a debt obligation\\n *\\n * Each LoanToken has:\\n * - borrower address\\n * - borrow amount\\n * - loan term\\n * - loan APY\\n *\\n * Loan progresses through the following states:\\n * Awaiting:    Waiting for funding to meet capital requirements\\n * Funded:      Capital requirements met, borrower can withdraw\\n * Withdrawn:   Borrower withdraws money, loan waiting to be repaid\\n * Settled:     Loan has been paid back in full with interest\\n * Defaulted:   Loan has not been paid back in full\\n * Liquidated:  Loan has Defaulted and stakers have been Liquidated\\n *\\n * - LoanTokens are non-transferable except for whitelisted addresses\\n * - This version of LoanToken only supports a single funder\\n */\\ncontract LoanToken is ILoanToken, ERC20 {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint128 public constant lastMinutePaybackDuration = 1 days;\\n\\n    address public override borrower;\\n    address public liquidator;\\n    uint256 public override amount;\\n    uint256 public override term;\\n    uint256 public override apy;\\n\\n    uint256 public override start;\\n    address public override lender;\\n    uint256 public override debt;\\n\\n    uint256 public redeemed;\\n\\n    // borrow fee -> 25 = 0.25%\\n    uint256 public override borrowerFee = 25;\\n\\n    // whitelist for transfers\\n    mapping(address => bool) public canTransfer;\\n\\n    Status public override status;\\n\\n    IERC20 public override currencyToken;\\n\\n    /**\\n     * @dev Emitted when the loan is funded\\n     * @param lender Address which funded the loan\\n     */\\n    event Funded(address lender);\\n\\n    /**\\n     * @dev Emitted when transfer whitelist is updated\\n     * @param account Account to whitelist for transfers\\n     * @param status New whitelist status\\n     */\\n    event TransferAllowanceChanged(address account, bool status);\\n\\n    /**\\n     * @dev Emitted when borrower withdraws funds\\n     * @param beneficiary Account which will receive funds\\n     */\\n    event Withdrawn(address beneficiary);\\n\\n    /**\\n     * @dev Emitted when loan has been fully repaid\\n     * @param returnedAmount Amount that was returned\\n     */\\n    event Settled(uint256 returnedAmount);\\n\\n    /**\\n     * @dev Emitted when term is over without full repayment\\n     * @param returnedAmount Amount that was returned before expiry\\n     */\\n    event Defaulted(uint256 returnedAmount);\\n\\n    /**\\n     * @dev Emitted when a LoanToken is redeemed for underlying currencyTokens\\n     * @param receiver Receiver of currencyTokens\\n     * @param burnedAmount Amount of LoanTokens burned\\n     * @param redeemedAmount Amount of currencyToken received\\n     */\\n    event Redeemed(address receiver, uint256 burnedAmount, uint256 redeemedAmount);\\n\\n    /**\\n     * @dev Emitted when a LoanToken is repaid by the borrower in underlying currencyTokens\\n     * @param repayer Sender of currencyTokens\\n     * @param repaidAmount Amount of currencyToken repaid\\n     */\\n    event Repaid(address repayer, uint256 repaidAmount);\\n\\n    /**\\n     * @dev Emitted when borrower reclaims remaining currencyTokens\\n     * @param borrower Receiver of remaining currencyTokens\\n     * @param reclaimedAmount Amount of currencyTokens repaid\\n     */\\n    event Reclaimed(address borrower, uint256 reclaimedAmount);\\n\\n    /**\\n     * @dev Emitted when loan gets liquidated\\n     * @param status Final loan status\\n     */\\n    event Liquidated(Status status);\\n\\n    /**\\n     * @dev Create a Loan\\n     * @param _currencyToken Token to lend\\n     * @param _borrower Borrower address\\n     * @param _amount Borrow amount of currency tokens\\n     * @param _term Loan length\\n     * @param _apy Loan APY\\n     */\\n    constructor(\\n        IERC20 _currencyToken,\\n        address _borrower,\\n        address _lender,\\n        address _liquidator,\\n        uint256 _amount,\\n        uint256 _term,\\n        uint256 _apy\\n    ) public ERC20(\\\"Loan Token\\\", \\\"LOAN\\\") {\\n        require(_lender != address(0), \\\"LoanToken: Lender is not set\\\");\\n\\n        currencyToken = _currencyToken;\\n        borrower = _borrower;\\n        liquidator = _liquidator;\\n        amount = _amount;\\n        term = _term;\\n        apy = _apy;\\n        lender = _lender;\\n        debt = interest(amount);\\n    }\\n\\n    /**\\n     * @dev Only borrower can withdraw & repay loan\\n     */\\n    modifier onlyBorrower() {\\n        require(msg.sender == borrower, \\\"LoanToken: Caller is not the borrower\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only liquidator can liquidate\\n     */\\n    modifier onlyLiquidator() {\\n        require(msg.sender == liquidator, \\\"LoanToken: Caller is not the liquidator\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only after loan has been closed: Settled, Defaulted, or Liquidated\\n     */\\n    modifier onlyAfterClose() {\\n        require(status >= Status.Settled, \\\"LoanToken: Only after loan has been closed\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only when loan is Funded\\n     */\\n    modifier onlyOngoing() {\\n        require(status == Status.Funded || status == Status.Withdrawn, \\\"LoanToken: Current status should be Funded or Withdrawn\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only when loan is Funded\\n     */\\n    modifier onlyFunded() {\\n        require(status == Status.Funded, \\\"LoanToken: Current status should be Funded\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only when loan is Withdrawn\\n     */\\n    modifier onlyAfterWithdraw() {\\n        require(status >= Status.Withdrawn, \\\"LoanToken: Only after loan has been withdrawn\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only when loan is Awaiting\\n     */\\n    modifier onlyAwaiting() {\\n        require(status == Status.Awaiting, \\\"LoanToken: Current status should be Awaiting\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only when loan is Defaulted\\n     */\\n    modifier onlyDefaulted() {\\n        require(status == Status.Defaulted, \\\"LoanToken: Current status should be Defaulted\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only whitelisted accounts or lender\\n     */\\n    modifier onlyWhoCanTransfer(address sender) {\\n        require(\\n            sender == lender || canTransfer[sender],\\n            \\\"LoanToken: This can be performed only by lender or accounts allowed to transfer\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only lender can perform certain actions\\n     */\\n    modifier onlyLender() {\\n        require(msg.sender == lender, \\\"LoanToken: This can be performed only by lender\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Return true if this contract is a LoanToken\\n     * @return True if this contract is a LoanToken\\n     */\\n    function isLoanToken() external override pure returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Get loan parameters\\n     * @return amount, term, apy\\n     */\\n    function getParameters()\\n        external\\n        override\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (amount, apy, term);\\n    }\\n\\n    /**\\n     * @dev Get coupon value of this loan token in currencyToken\\n     * This assumes the loan will be paid back on time, with interest\\n     * @param _balance number of LoanTokens to get value for\\n     * @return coupon value of _balance LoanTokens in currencyTokens\\n     */\\n    function value(uint256 _balance) external override view returns (uint256) {\\n        if (_balance == 0) {\\n            return 0;\\n        }\\n\\n        uint256 passed = block.timestamp.sub(start);\\n        if (passed > term || status == Status.Settled) {\\n            passed = term;\\n        }\\n\\n        // assume year is 365 days\\n        uint256 interest = amount.mul(apy).mul(passed).div(365 days).div(10000);\\n\\n        return amount.add(interest).mul(_balance).div(debt);\\n    }\\n\\n    /**\\n     * @dev Fund a loan\\n     * Set status, start time, lender\\n     */\\n    function fund() external override onlyAwaiting onlyLender {\\n        status = Status.Funded;\\n        start = block.timestamp;\\n        _mint(msg.sender, debt);\\n        currencyToken.safeTransferFrom(msg.sender, address(this), receivedAmount());\\n\\n        emit Funded(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Whitelist accounts to transfer\\n     * @param account address to allow transfers for\\n     * @param _status true allows transfers, false disables transfers\\n     */\\n    function allowTransfer(address account, bool _status) external override onlyLender {\\n        canTransfer[account] = _status;\\n        emit TransferAllowanceChanged(account, _status);\\n    }\\n\\n    /**\\n     * @dev Borrower calls this function to withdraw funds\\n     * Sets the status of the loan to Withdrawn\\n     * @param _beneficiary address to send funds to\\n     */\\n    function withdraw(address _beneficiary) external override onlyBorrower onlyFunded {\\n        status = Status.Withdrawn;\\n        currencyToken.safeTransfer(_beneficiary, receivedAmount());\\n\\n        emit Withdrawn(_beneficiary);\\n    }\\n\\n    /**\\n     * @dev Settle the loan after checking it has been repaid\\n     */\\n    function settle() public override onlyOngoing {\\n        require(isRepaid(), \\\"LoanToken: loan must be repaid to settle\\\");\\n        status = Status.Settled;\\n        emit Settled(_balance());\\n    }\\n\\n    /**\\n     * @dev Default the loan if it has not been repaid by the end of term\\n     */\\n    function enterDefault() external override onlyOngoing {\\n        require(!isRepaid(), \\\"LoanToken: cannot default a repaid loan\\\");\\n        require(start.add(term).add(lastMinutePaybackDuration) <= block.timestamp, \\\"LoanToken: Loan cannot be defaulted yet\\\");\\n        status = Status.Defaulted;\\n        emit Defaulted(_balance());\\n    }\\n\\n    /**\\n     * @dev Liquidate the loan if it has defaulted\\n     */\\n    function liquidate() external override onlyDefaulted onlyLiquidator {\\n        status = Status.Liquidated;\\n\\n        emit Liquidated(status);\\n    }\\n\\n    /**\\n     * @dev Redeem LoanToken balances for underlying currencyToken\\n     * Can only call this function after the loan is Closed\\n     * @param _amount amount to redeem\\n     */\\n    function redeem(uint256 _amount) external override onlyAfterClose {\\n        uint256 amountToReturn = _amount.mul(_balance()).div(totalSupply());\\n        redeemed = redeemed.add(amountToReturn);\\n        _burn(msg.sender, _amount);\\n        currencyToken.safeTransfer(msg.sender, amountToReturn);\\n\\n        emit Redeemed(msg.sender, _amount, amountToReturn);\\n    }\\n\\n    /**\\n     * @dev Function for borrower to repay the loan\\n     * Borrower can repay at any time\\n     * @param _sender account sending currencyToken to repay\\n     * @param _amount amount of currencyToken to repay\\n     */\\n    function repay(address _sender, uint256 _amount) external override {\\n        _repay(_sender, _amount);\\n    }\\n\\n    /**\\n     * @dev Function for borrower to repay all of the remaining loan balance\\n     * Borrower should use this to ensure full repayment\\n     * @param _sender account sending currencyToken to repay\\n     */\\n    function repayInFull(address _sender) external override {\\n        _repay(_sender, debt.sub(_balance()));\\n    }\\n\\n    /**\\n     * @dev Internal function for loan repayment\\n     * If _amount is sufficient, then this also settles the loan\\n     * @param _sender account sending currencyToken to repay\\n     * @param _amount amount of currencyToken to repay\\n     */\\n    function _repay(address _sender, uint256 _amount) internal onlyAfterWithdraw {\\n        require(_amount <= debt.sub(_balance()), \\\"LoanToken: Cannot repay over the debt\\\");\\n        emit Repaid(_sender, _amount);\\n\\n        currencyToken.safeTransferFrom(_sender, address(this), _amount);\\n        if (isRepaid()) {\\n            settle();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function for borrower to reclaim stuck currencyToken\\n     * Can only call this function after the loan is Closed\\n     * and all of LoanToken holders have been burnt\\n     */\\n    function reclaim() external override onlyAfterClose onlyBorrower {\\n        require(totalSupply() == 0, \\\"LoanToken: Cannot reclaim when LoanTokens are in circulation\\\");\\n        uint256 balanceRemaining = _balance();\\n        require(balanceRemaining > 0, \\\"LoanToken: Cannot reclaim when balance 0\\\");\\n\\n        currencyToken.safeTransfer(borrower, balanceRemaining);\\n        emit Reclaimed(borrower, balanceRemaining);\\n    }\\n\\n    /**\\n     * @dev Check how much was already repaid\\n     * Funds stored on the contract's address plus funds already redeemed by lenders\\n     * @return Uint256 representing what value was already repaid\\n     */\\n    function repaid() external override view onlyAfterWithdraw returns (uint256) {\\n        return _balance().add(redeemed);\\n    }\\n\\n    /**\\n     * @dev Check whether an ongoing loan has been repaid in full\\n     * @return true if and only if this loan has been repaid\\n     */\\n    function isRepaid() public override view onlyOngoing returns (bool) {\\n        return _balance() >= debt;\\n    }\\n\\n    /**\\n     * @dev Public currency token balance function\\n     * @return currencyToken balance of this contract\\n     */\\n    function balance() external override view returns (uint256) {\\n        return _balance();\\n    }\\n\\n    /**\\n     * @dev Get currency token balance for this contract\\n     * @return currencyToken balance of this contract\\n     */\\n    function _balance() internal view returns (uint256) {\\n        return currencyToken.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Calculate amount borrowed minus fee\\n     * @return Amount minus fees\\n     */\\n    function receivedAmount() public override view returns (uint256) {\\n        return amount.sub(amount.mul(borrowerFee).div(10000));\\n    }\\n\\n    /**\\n     * @dev Calculate interest that will be paid by this loan for an amount (returned funds included)\\n     * amount + ((amount * apy * term) / (365 days / precision))\\n     * @param _amount amount\\n     * @return uint256 Amount of interest paid for _amount\\n     */\\n    function interest(uint256 _amount) internal view returns (uint256) {\\n        return _amount.add(_amount.mul(apy).mul(term).div(365 days).div(10000));\\n    }\\n\\n    /**\\n     * @dev get profit for this loan\\n     * @return profit for this loan\\n     */\\n    function profit() external override view returns (uint256) {\\n        return debt.sub(amount);\\n    }\\n\\n    /**\\n     * @dev Override ERC20 _transfer so only whitelisted addresses can transfer\\n     * @param sender sender of the transaction\\n     * @param recipient recipient of the transaction\\n     * @param _amount amount to send\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 _amount\\n    ) internal override onlyWhoCanTransfer(sender) {\\n        return super._transfer(sender, recipient, _amount);\\n    }\\n\\n    function version() external virtual override pure returns (uint8) {\\n        return 3;\\n    }\\n}\\n\"\r\n    },\r\n    \"LoanToken2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\nimport {IERC20} from \\\"IERC20.sol\\\";\\nimport {SafeMath} from \\\"SafeMath.sol\\\";\\nimport {SafeERC20} from \\\"SafeERC20.sol\\\";\\n\\nimport {ERC20} from \\\"UpgradeableERC20.sol\\\";\\nimport {ILoanToken2, ITrueFiPool2} from \\\"ILoanToken2.sol\\\";\\nimport {LoanToken} from \\\"LoanToken.sol\\\";\\n\\n/**\\n * @title LoanToken V2\\n * @dev A token which represents share of a debt obligation\\n *\\n * Each LoanToken has:\\n * - borrower address\\n * - borrow amount\\n * - loan term\\n * - loan APY\\n *\\n * Loan progresses through the following states:\\n * Awaiting:    Waiting for funding to meet capital requirements\\n * Funded:      Capital requirements met, borrower can withdraw\\n * Withdrawn:   Borrower withdraws money, loan waiting to be repaid\\n * Settled:     Loan has been paid back in full with interest\\n * Defaulted:   Loan has not been paid back in full\\n * Liquidated:  Loan has Defaulted and stakers have been Liquidated\\n *\\n * - LoanTokens are non-transferable except for whitelisted addresses\\n * - This version of LoanToken only supports a single funder\\n */\\ncontract LoanToken2 is ILoanToken2, ERC20 {\\n    using SafeMath for uint256;\\n    using SafeERC20 for ERC20;\\n\\n    uint128 public constant LAST_MINUTE_PAYBACK_DURATION = 1 days;\\n    uint256 private constant APY_PRECISION = 10000;\\n\\n    address public override borrower;\\n    address public liquidator;\\n    uint256 public override amount;\\n    uint256 public override term;\\n\\n    // apy precision: 10000 = 100%\\n    uint256 public override apy;\\n\\n    uint256 public override start;\\n    address public override lender;\\n    uint256 public override debt;\\n\\n    uint256 public redeemed;\\n\\n    // whitelist for transfers\\n    mapping(address => bool) public canTransfer;\\n\\n    Status public override status;\\n\\n    ERC20 public override token;\\n\\n    ITrueFiPool2 public override pool;\\n\\n    /**\\n     * @dev Emitted when the loan is funded\\n     * @param lender Address which funded the loan\\n     */\\n    event Funded(address lender);\\n\\n    /**\\n     * @dev Emitted when transfer whitelist is updated\\n     * @param account Account to whitelist for transfers\\n     * @param status New whitelist status\\n     */\\n    event TransferAllowanceChanged(address account, bool status);\\n\\n    /**\\n     * @dev Emitted when borrower withdraws funds\\n     * @param beneficiary Account which will receive funds\\n     */\\n    event Withdrawn(address beneficiary);\\n\\n    /**\\n     * @dev Emitted when loan has been fully repaid\\n     * @param returnedAmount Amount that was returned\\n     */\\n    event Settled(uint256 returnedAmount);\\n\\n    /**\\n     * @dev Emitted when term is over without full repayment\\n     * @param returnedAmount Amount that was returned before expiry\\n     */\\n    event Defaulted(uint256 returnedAmount);\\n\\n    /**\\n     * @dev Emitted when a LoanToken is redeemed for underlying tokens\\n     * @param receiver Receiver of tokens\\n     * @param burnedAmount Amount of LoanTokens burned\\n     * @param redeemedAmount Amount of token received\\n     */\\n    event Redeemed(address receiver, uint256 burnedAmount, uint256 redeemedAmount);\\n\\n    /**\\n     * @dev Emitted when a LoanToken is repaid by the borrower in underlying tokens\\n     * @param repayer Sender of tokens\\n     * @param repaidAmount Amount of token repaid\\n     */\\n    event Repaid(address repayer, uint256 repaidAmount);\\n\\n    /**\\n     * @dev Emitted when borrower reclaims remaining tokens\\n     * @param borrower Receiver of remaining tokens\\n     * @param reclaimedAmount Amount of tokens repaid\\n     */\\n    event Reclaimed(address borrower, uint256 reclaimedAmount);\\n\\n    /**\\n     * @dev Emitted when loan gets liquidated\\n     * @param status Final loan status\\n     */\\n    event Liquidated(Status status);\\n\\n    /**\\n     * @dev Create a Loan\\n     * @param _pool Pool to lend from\\n     * @param _borrower Borrower address\\n     * @param _lender Lender address\\n     * @param _liquidator Liquidator address\\n     * @param _amount Borrow amount of loaned tokens\\n     * @param _term Loan length\\n     * @param _apy Loan APY\\n     */\\n    constructor(\\n        ITrueFiPool2 _pool,\\n        address _borrower,\\n        address _lender,\\n        address _liquidator,\\n        uint256 _amount,\\n        uint256 _term,\\n        uint256 _apy\\n    ) public {\\n        require(_lender != address(0), \\\"LoanToken2: Lender is not set\\\");\\n        ERC20.__ERC20_initialize(\\\"TrueFi Loan Token\\\", \\\"LOAN\\\");\\n\\n        pool = _pool;\\n        token = _pool.token();\\n        borrower = _borrower;\\n        liquidator = _liquidator;\\n        amount = _amount;\\n        term = _term;\\n        apy = _apy;\\n        lender = _lender;\\n        debt = interest(amount);\\n    }\\n\\n    /**\\n     * @dev Only borrower can withdraw & repay loan\\n     */\\n    modifier onlyBorrower() {\\n        require(msg.sender == borrower, \\\"LoanToken2: Caller is not the borrower\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only liquidator can liquidate\\n     */\\n    modifier onlyLiquidator() {\\n        require(msg.sender == liquidator, \\\"LoanToken2: Caller is not the liquidator\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only after loan has been closed: Settled, Defaulted, or Liquidated\\n     */\\n    modifier onlyAfterClose() {\\n        require(status >= Status.Settled, \\\"LoanToken2: Only after loan has been closed\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only when loan is Funded\\n     */\\n    modifier onlyOngoing() {\\n        require(status == Status.Funded || status == Status.Withdrawn, \\\"LoanToken2: Current status should be Funded or Withdrawn\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only when loan is Funded\\n     */\\n    modifier onlyFunded() {\\n        require(status == Status.Funded, \\\"LoanToken2: Current status should be Funded\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only when loan is Withdrawn\\n     */\\n    modifier onlyAfterWithdraw() {\\n        require(status >= Status.Withdrawn, \\\"LoanToken2: Only after loan has been withdrawn\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only when loan is Awaiting\\n     */\\n    modifier onlyAwaiting() {\\n        require(status == Status.Awaiting, \\\"LoanToken2: Current status should be Awaiting\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only when loan is Defaulted\\n     */\\n    modifier onlyDefaulted() {\\n        require(status == Status.Defaulted, \\\"LoanToken2: Current status should be Defaulted\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only whitelisted accounts or lender\\n     */\\n    modifier onlyWhoCanTransfer(address sender) {\\n        require(\\n            sender == lender || canTransfer[sender],\\n            \\\"LoanToken2: This can be performed only by lender or accounts allowed to transfer\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only lender can perform certain actions\\n     */\\n    modifier onlyLender() {\\n        require(msg.sender == lender, \\\"LoanToken2: This can be performed only by lender\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Get loan parameters\\n     * @return amount, term, apy\\n     */\\n    function getParameters()\\n        external\\n        override\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (amount, apy, term);\\n    }\\n\\n    /**\\n     * @dev Get coupon value of this loan token in token\\n     * This assumes the loan will be paid back on time, with interest\\n     * @param _balance number of LoanTokens to get value for\\n     * @return coupon value of _balance LoanTokens in tokens\\n     */\\n    function value(uint256 _balance) external override view returns (uint256) {\\n        if (_balance == 0) {\\n            return 0;\\n        }\\n\\n        uint256 passed = block.timestamp.sub(start);\\n        if (passed > term || status == Status.Settled) {\\n            passed = term;\\n        }\\n\\n        // assume year is 365 days\\n        uint256 interest = amount.mul(apy).mul(passed).div(365 days).div(APY_PRECISION);\\n\\n        return amount.add(interest).mul(_balance).div(debt);\\n    }\\n\\n    /**\\n     * @dev Fund a loan\\n     * Set status, start time, lender\\n     */\\n    function fund() external override onlyAwaiting onlyLender {\\n        status = Status.Funded;\\n        start = block.timestamp;\\n        _mint(msg.sender, debt);\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        emit Funded(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Whitelist accounts to transfer\\n     * @param account address to allow transfers for\\n     * @param _status true allows transfers, false disables transfers\\n     */\\n    function allowTransfer(address account, bool _status) external override onlyLender {\\n        canTransfer[account] = _status;\\n        emit TransferAllowanceChanged(account, _status);\\n    }\\n\\n    /**\\n     * @dev Borrower calls this function to withdraw funds\\n     * Sets the status of the loan to Withdrawn\\n     * @param _beneficiary address to send funds to\\n     */\\n    function withdraw(address _beneficiary) external override onlyBorrower onlyFunded {\\n        status = Status.Withdrawn;\\n        token.safeTransfer(_beneficiary, amount);\\n\\n        emit Withdrawn(_beneficiary);\\n    }\\n\\n    /**\\n     * @dev Settle the loan after checking it has been repaid\\n     */\\n    function settle() public override onlyOngoing {\\n        require(isRepaid(), \\\"LoanToken2: loan must be repaid to settle\\\");\\n        status = Status.Settled;\\n        emit Settled(_balance());\\n    }\\n\\n    /**\\n     * @dev Default the loan if it has not been repaid by the end of term\\n     */\\n    function enterDefault() external override onlyOngoing {\\n        require(!isRepaid(), \\\"LoanToken2: cannot default a repaid loan\\\");\\n        require(start.add(term).add(LAST_MINUTE_PAYBACK_DURATION) <= block.timestamp, \\\"LoanToken2: Loan cannot be defaulted yet\\\");\\n        status = Status.Defaulted;\\n        emit Defaulted(_balance());\\n    }\\n\\n    /**\\n     * @dev Liquidate the loan if it has defaulted\\n     */\\n    function liquidate() external override onlyDefaulted onlyLiquidator {\\n        status = Status.Liquidated;\\n\\n        emit Liquidated(status);\\n    }\\n\\n    /**\\n     * @dev Redeem LoanToken balances for underlying token\\n     * Can only call this function after the loan is Closed\\n     * @param _amount amount to redeem\\n     */\\n    function redeem(uint256 _amount) external override onlyAfterClose {\\n        uint256 amountToReturn = _amount.mul(_balance()).div(totalSupply());\\n        redeemed = redeemed.add(amountToReturn);\\n        _burn(msg.sender, _amount);\\n        token.safeTransfer(msg.sender, amountToReturn);\\n\\n        emit Redeemed(msg.sender, _amount, amountToReturn);\\n    }\\n\\n    /**\\n     * @dev Function for borrower to repay the loan\\n     * Borrower can repay at any time\\n     * @param _sender account sending token to repay\\n     * @param _amount amount of token to repay\\n     */\\n    function repay(address _sender, uint256 _amount) external override {\\n        _repay(_sender, _amount);\\n    }\\n\\n    /**\\n     * @dev Function for borrower to repay all of the remaining loan balance\\n     * Borrower should use this to ensure full repayment\\n     * @param _sender account sending token to repay\\n     */\\n    function repayInFull(address _sender) external override {\\n        _repay(_sender, debt.sub(_balance()));\\n    }\\n\\n    /**\\n     * @dev Internal function for loan repayment\\n     * If _amount is sufficient, then this also settles the loan\\n     * @param _sender account sending token to repay\\n     * @param _amount amount of token to repay\\n     */\\n    function _repay(address _sender, uint256 _amount) internal onlyAfterWithdraw {\\n        require(_amount <= debt.sub(_balance()), \\\"LoanToken2: Cannot repay over the debt\\\");\\n        emit Repaid(_sender, _amount);\\n\\n        token.safeTransferFrom(_sender, address(this), _amount);\\n        if (isRepaid()) {\\n            settle();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function for borrower to reclaim stuck token\\n     * Can only call this function after the loan is Closed\\n     * and all of LoanToken holders have been burnt\\n     */\\n    function reclaim() external override onlyAfterClose onlyBorrower {\\n        require(totalSupply() == 0, \\\"LoanToken2: Cannot reclaim when LoanTokens are in circulation\\\");\\n        uint256 balanceRemaining = _balance();\\n        require(balanceRemaining > 0, \\\"LoanToken2: Cannot reclaim when balance 0\\\");\\n\\n        token.safeTransfer(borrower, balanceRemaining);\\n        emit Reclaimed(borrower, balanceRemaining);\\n    }\\n\\n    /**\\n     * @dev Check how much was already repaid\\n     * Funds stored on the contract's address plus funds already redeemed by lenders\\n     * @return Uint256 representing what value was already repaid\\n     */\\n    function repaid() external override view onlyAfterWithdraw returns (uint256) {\\n        return _balance().add(redeemed);\\n    }\\n\\n    /**\\n     * @dev Check whether an ongoing loan has been repaid in full\\n     * @return true if and only if this loan has been repaid\\n     */\\n    function isRepaid() public override view onlyOngoing returns (bool) {\\n        return _balance() >= debt;\\n    }\\n\\n    /**\\n     * @dev Public currency token balance function\\n     * @return token balance of this contract\\n     */\\n    function balance() external override view returns (uint256) {\\n        return _balance();\\n    }\\n\\n    /**\\n     * @dev Get currency token balance for this contract\\n     * @return token balance of this contract\\n     */\\n    function _balance() internal view returns (uint256) {\\n        return token.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Calculate interest that will be paid by this loan for an amount (returned funds included)\\n     * amount + ((amount * apy * term) / 365 days / precision)\\n     * @param _amount amount\\n     * @return uint256 Amount of interest paid for _amount\\n     */\\n    function interest(uint256 _amount) internal view returns (uint256) {\\n        return _amount.add(_amount.mul(apy).mul(term).div(365 days).div(APY_PRECISION));\\n    }\\n\\n    /**\\n     * @dev get profit for this loan\\n     * @return profit for this loan\\n     */\\n    function profit() external override view returns (uint256) {\\n        return debt.sub(amount);\\n    }\\n\\n    /**\\n     * @dev Override ERC20 _transfer so only whitelisted addresses can transfer\\n     * @param sender sender of the transaction\\n     * @param recipient recipient of the transaction\\n     * @param _amount amount to send\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 _amount\\n    ) internal override onlyWhoCanTransfer(sender) {\\n        return super._transfer(sender, recipient, _amount);\\n    }\\n\\n    function version() external override pure returns (uint8) {\\n        return 5;\\n    }\\n\\n    function decimals() public override view returns (uint8) {\\n        return token.decimals();\\n    }\\n}\\n\"\r\n    },\r\n    \"LoanFactory2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\nimport {Initializable} from \\\"Initializable.sol\\\";\\nimport {IPoolFactory} from \\\"IPoolFactory.sol\\\";\\nimport {ILoanFactory2} from \\\"ILoanFactory2.sol\\\";\\nimport {ITrueFiPool2} from \\\"ITrueFiPool2.sol\\\";\\n\\nimport {LoanToken2, IERC20} from \\\"LoanToken2.sol\\\";\\n\\n/**\\n * @title LoanFactory2\\n * @notice Deploy LoanTokens for pools created by PoolFactory, with this Contract\\n * @dev LoanTokens are deployed through a factory to ensure that all\\n * LoanTokens adhere to the same contract code, rather than using an interface.\\n */\\ncontract LoanFactory2 is ILoanFactory2, Initializable {\\n    // ================ WARNING ==================\\n    // ===== THIS CONTRACT IS INITIALIZABLE ======\\n    // === STORAGE VARIABLES ARE DECLARED BELOW ==\\n    // REMOVAL OR REORDER OF VARIABLES WILL RESULT\\n    // ========= IN STORAGE CORRUPTION ===========\\n\\n    // @dev Track Valid LoanTokens\\n    mapping(address => bool) public override isLoanToken;\\n\\n    IPoolFactory public poolFactory;\\n    address public lender;\\n    address public liquidator;\\n\\n    // ======= STORAGE DECLARATION END ============\\n\\n    /**\\n     * @dev Emitted when a LoanToken is created\\n     * @param contractAddress LoanToken contract address\\n     */\\n    event LoanTokenCreated(address contractAddress);\\n\\n    /**\\n     * @dev Initialize this contract and set currency token\\n     * @param _poolFactory PoolFactory address\\n     * @param _lender Lender address\\n     * @param _liquidator Liquidator address\\n     */\\n    function initialize(\\n        IPoolFactory _poolFactory,\\n        address _lender,\\n        address _liquidator\\n    ) external initializer {\\n        poolFactory = _poolFactory;\\n        lender = _lender;\\n        liquidator = _liquidator;\\n    }\\n\\n    /**\\n     * @dev Deploy LoanToken with parameters\\n     * @param _amount Amount to borrow\\n     * @param _term Length of loan\\n     * @param _apy Loan yield\\n     */\\n    function createLoanToken(\\n        ITrueFiPool2 _pool,\\n        uint256 _amount,\\n        uint256 _term,\\n        uint256 _apy\\n    ) external override {\\n        require(_amount > 0, \\\"LoanFactory: Loans of amount 0, will not be approved\\\");\\n        require(_term > 0, \\\"LoanFactory: Loans cannot have instantaneous term of repay\\\");\\n        require(poolFactory.isPool(address(_pool)), \\\"LoanFactory: Pool was not created by PoolFactory\\\");\\n\\n        address newToken = address(new LoanToken2(_pool, msg.sender, lender, liquidator, _amount, _term, _apy));\\n        isLoanToken[newToken] = true;\\n\\n        emit LoanTokenCreated(newToken);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"LoanTokenCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract ITrueFiPool2\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_term\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"}],\"name\":\"createLoanToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPoolFactory\",\"name\":\"_poolFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLoanToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFactory\",\"outputs\":[{\"internalType\":\"contract IPoolFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LoanFactory2","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}