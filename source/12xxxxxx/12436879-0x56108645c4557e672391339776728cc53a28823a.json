{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n  function initialize() external;\r\n  function totalSupply() external view returns (uint);\r\n  function balanceOf(address account) external view returns (uint);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint);\r\n  function symbol() external view returns (string memory);\r\n  function decimals() external view returns (uint);\r\n  function approve(address spender, uint amount) external returns (bool);\r\n  function mint(address account, uint amount) external;\r\n  function burn(address account, uint amount) external;\r\n  function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ninterface ILendingPair {\r\n  function checkAccountHealth(address _account) external view;\r\n  function accrueAccount(address _account) external;\r\n  function accrue() external;\r\n  function accountHealth(address _account) external view returns(uint);\r\n  function totalDebt(address _token) external view returns(uint);\r\n  function tokenA() external view returns(address);\r\n  function tokenB() external view returns(address);\r\n  function lpToken(address _token) external view returns(IERC20);\r\n  function debtOf(address _account, address _token) external view returns(uint);\r\n  function deposit(address _token, uint _amount) external;\r\n  function withdraw(address _token, uint _amount) external;\r\n  function borrow(address _token, uint _amount) external;\r\n  function repay(address _token, uint _amount) external;\r\n  function withdrawRepay(address _token, uint _amount) external;\r\n  function withdrawBorrow(address _token, uint _amount) external;\r\n  function controller() external view returns(IController);\r\n\r\n  function convertTokenValues(\r\n    address _fromToken,\r\n    address _toToken,\r\n    uint    _inputAmount\r\n  ) external view returns(uint);\r\n}\r\n\r\ninterface IInterestRateModel {\r\n  function systemRate(ILendingPair _pair) external view returns(uint);\r\n  function supplyRatePerBlock(ILendingPair _pair, address _token) external view returns(uint);\r\n  function borrowRatePerBlock(ILendingPair _pair, address _token) external view returns(uint);\r\n}\r\n\r\ninterface IController {\r\n  function interestRateModel() external view returns(IInterestRateModel);\r\n  function feeRecipient() external view returns(address);\r\n  function liqMinHealth() external view returns(uint);\r\n  function liqFeePool() external view returns(uint);\r\n  function liqFeeSystem() external view returns(uint);\r\n  function liqFeeCaller() external view returns(uint);\r\n  function liqFeesTotal() external view returns(uint);\r\n  function tokenPrice(address _token) external view returns(uint);\r\n  function depositLimit(address _lendingPair, address _token) external view returns(uint);\r\n}\r\n\r\ninterface IWETH {\r\n  function deposit() external payable;\r\n  function withdraw(uint wad) external;\r\n  function balanceOf(address account) external view returns (uint);\r\n  function transfer(address recipient, uint amount) external returns (bool);\r\n  function approve(address spender, uint amount) external returns (bool);\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary Clones {\r\n    /**\r\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\r\n     *\r\n     * This function uses the create opcode, which should never revert.\r\n     */\r\n    function clone(address master) internal returns (address instance) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, master))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            instance := create(0, ptr, 0x37)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\r\n     *\r\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\r\n     * the clone. Using the same `master` and `salt` multiple time will revert, since\r\n     * the clones cannot be deployed twice at the same address.\r\n     */\r\n    function cloneDeterministic(address master, bytes32 salt) internal returns (address instance) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, master))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            instance := create2(0, ptr, 0x37, salt)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create2 failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n     */\r\n    function predictDeterministicAddress(address master, bytes32 salt, address deployer) internal pure returns (address predicted) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, master))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\r\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\r\n            mstore(add(ptr, 0x4c), salt)\r\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\r\n            predicted := keccak256(add(ptr, 0x37), 0x55)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n     */\r\n    function predictDeterministicAddress(address master, bytes32 salt) internal view returns (address predicted) {\r\n        return predictDeterministicAddress(master, salt, address(this));\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() {\r\n    owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), owner);\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(isOwner(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  function isOwner() public view returns (bool) {\r\n    return msg.sender == owner;\r\n  }\r\n\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(owner, address(0));\r\n    owner = address(0);\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract TransferHelper {\r\n\r\n  IWETH internal constant WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\r\n  function _safeTransferFrom(address _token, address _sender, uint _amount) internal virtual {\r\n    IERC20(_token).transferFrom(_sender, address(this), _amount);\r\n    require(_amount > 0, \"TransferHelper: amount must be > 0\");\r\n  }\r\n\r\n  function _wethWithdrawTo(address _to, uint _amount) internal virtual {\r\n    require(_amount > 0, \"TransferHelper: amount must be > 0\");\r\n    WETH.withdraw(_amount);\r\n    (bool success, ) = _to.call { value: _amount }(new bytes(0));\r\n    require(success, 'TransferHelper: ETH transfer failed');\r\n  }\r\n\r\n  function _depositWeth() internal {\r\n    require(msg.value > 0, \"TransferHelper: amount must be > 0\");\r\n    WETH.deposit { value: msg.value }();\r\n  }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n  uint256 private constant _NOT_ENTERED = 1;\r\n  uint256 private constant _ENTERED = 2;\r\n\r\n  uint256 private _status;\r\n\r\n  constructor () {\r\n    _status = _NOT_ENTERED;\r\n  }\r\n\r\n  modifier nonReentrant() {\r\n    require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n    _status = _ENTERED;\r\n    _;\r\n    _status = _NOT_ENTERED;\r\n  }\r\n}\r\n\r\ncontract LendingPair is ReentrancyGuard, TransferHelper {\r\n\r\n  // Prevents division by zero and other undesirable behaviour\r\n  uint public constant MIN_RESERVE = 1000;\r\n\r\n  using Address for address;\r\n  using Clones for address;\r\n\r\n  mapping (address => mapping (address => uint)) public debtOf;\r\n  mapping (address => mapping (address => uint)) public accountInterestSnapshot;\r\n  mapping (address => uint) public cumulativeInterestRate; // 100e18 = 100%\r\n  mapping (address => uint) public totalDebt;\r\n  mapping (address => IERC20) public lpToken;\r\n\r\n  IController public controller;\r\n  address public tokenA;\r\n  address public tokenB;\r\n  uint public lastBlockAccrued;\r\n\r\n  event Liquidation(\r\n    address indexed account,\r\n    uint supplyBurnA,\r\n    uint supplyBurnB,\r\n    uint borrowBurnA,\r\n    uint borrowBurnB\r\n  );\r\n\r\n  event Deposit(address indexed token, uint amount);\r\n  event Withdraw(address indexed token, uint amount);\r\n  event Borrow(address indexed token, uint amount);\r\n  event Repay(address indexed token, uint amount);\r\n\r\n  receive() external payable {}\r\n\r\n  function initialize(\r\n    address _lpTokenMaster,\r\n    address _controller,\r\n    IERC20 _tokenA,\r\n    IERC20 _tokenB\r\n  ) public {\r\n    require(address(tokenA) == address(0), \"LendingPair: already initialized\");\r\n    require(address(_tokenA) != address(0) && address(_tokenB) != address(0), \"LendingPair: cannot be ZERO address\");\r\n\r\n    controller = IController(_controller);\r\n    tokenA = address(_tokenA);\r\n    tokenB = address(_tokenB);\r\n    lastBlockAccrued = block.number;\r\n\r\n    lpToken[tokenA] = _createLpToken(_lpTokenMaster);\r\n    lpToken[tokenB] = _createLpToken(_lpTokenMaster);\r\n  }\r\n\r\n  function depositRepay(address _token, uint _amount) public {\r\n    _validateToken(_token);\r\n    accrueAccount(msg.sender);\r\n\r\n    _depositRepay(_token, _amount);\r\n    _safeTransferFrom(_token, msg.sender, _amount);\r\n  }\r\n\r\n  function depositRepayETH() public payable {\r\n    accrueAccount(msg.sender);\r\n\r\n    _depositRepay(address(WETH), msg.value);\r\n    _depositWeth();\r\n  }\r\n\r\n  function deposit(address _token, uint _amount) public {\r\n    _validateToken(_token);\r\n    accrueAccount(msg.sender);\r\n\r\n    _deposit(_token, _amount);\r\n    _safeTransferFrom(_token, msg.sender, _amount);\r\n  }\r\n\r\n  function withdrawBorrow(address _token, uint _amount) public {\r\n    _validateToken(_token);\r\n    accrueAccount(msg.sender);\r\n\r\n    _withdrawBorrow(_token, _amount);\r\n    _safeTransfer(IERC20(_token), msg.sender, _amount);\r\n  }\r\n\r\n  function withdrawBorrowETH(uint _amount) public {\r\n    accrueAccount(msg.sender);\r\n\r\n    _withdrawBorrow(address(WETH), _amount);\r\n    _wethWithdrawTo(msg.sender, _amount);\r\n    _checkMinReserve(address(WETH));\r\n  }\r\n\r\n  function withdraw(address _token, uint _amount) public {\r\n    _validateToken(_token);\r\n    accrueAccount(msg.sender);\r\n\r\n    _withdraw(_token, _amount);\r\n    _safeTransfer(IERC20(_token), msg.sender, _amount);\r\n  }\r\n\r\n  function withdrawAll(address _token) public {\r\n    _validateToken(_token);\r\n    accrueAccount(msg.sender);\r\n\r\n    uint amount = lpToken[address(_token)].balanceOf(msg.sender);\r\n    _withdraw(_token, amount);\r\n    _safeTransfer(IERC20(_token), msg.sender, amount);\r\n  }\r\n\r\n  function borrow(address _token, uint _amount) public {\r\n    _validateToken(_token);\r\n    accrueAccount(msg.sender);\r\n\r\n    _borrow(_token, _amount);\r\n    _safeTransfer(IERC20(_token), msg.sender, _amount);\r\n  }\r\n\r\n  function repayAll(address _token) public {\r\n    _validateToken(_token);\r\n    accrueAccount(msg.sender);\r\n\r\n    uint amount = debtOf[_token][msg.sender];\r\n    _repay(_token, amount);\r\n    _safeTransferFrom(_token, msg.sender, amount);\r\n  }\r\n\r\n  function repay(address _token, uint _amount) public {\r\n    _validateToken(_token);\r\n    accrueAccount(msg.sender);\r\n\r\n    _repay(_token, _amount);\r\n    _safeTransferFrom(_token, msg.sender, _amount);\r\n  }\r\n\r\n  function accrue() public {\r\n    if (lastBlockAccrued < block.number) {\r\n      _accrueInterest(tokenA);\r\n      _accrueInterest(tokenB);\r\n      lastBlockAccrued = block.number;\r\n    }\r\n  }\r\n\r\n  function accrueAccount(address _account) public {\r\n    accrue();\r\n    _accrueAccountInterest(feeRecipient());\r\n    _accrueAccountInterest(_account);\r\n  }\r\n\r\n  function accountHealth(address _account) public view returns(uint) {\r\n    uint totalAccountSupply  = _supplyBalance(_account, tokenA, tokenA) + _supplyBalance(_account, tokenB, tokenA);\r\n    uint totalAccountBorrrow = _borrowBalance(_account, tokenA, tokenA) + _borrowBalance(_account, tokenB, tokenA);\r\n\r\n    if (totalAccountBorrrow == 0) {\r\n      return controller.liqMinHealth();\r\n    } else {\r\n      return totalAccountSupply * 1e18 / totalAccountBorrrow;\r\n    }\r\n  }\r\n\r\n  // Get borow balance converted to the units of _returnToken\r\n  function borrowBalance(\r\n    address _account,\r\n    address _borrowedToken,\r\n    address _returnToken\r\n  ) public view returns(uint) {\r\n\r\n    _validateToken(_borrowedToken);\r\n    _validateToken(_returnToken);\r\n\r\n    return _borrowBalance(_account, _borrowedToken, _returnToken);\r\n  }\r\n\r\n  function supplyBalance(\r\n    address _account,\r\n    address _suppliedToken,\r\n    address _returnToken\r\n  ) public view returns(uint) {\r\n\r\n    _validateToken(_suppliedToken);\r\n    _validateToken(_returnToken);\r\n\r\n    return _supplyBalance(_account, _suppliedToken, _returnToken);\r\n  }\r\n\r\n  function supplyRatePerBlock(address _token) public view returns(uint) {\r\n    _validateToken(_token);\r\n    return controller.interestRateModel().supplyRatePerBlock(ILendingPair(address(this)), _token);\r\n  }\r\n\r\n  function borrowRatePerBlock(address _token) public view returns(uint) {\r\n    _validateToken(_token);\r\n    return _borrowRatePerBlock(_token);\r\n  }\r\n\r\n  // Sell collateral to reduce debt and increase accountHealth\r\n  function liquidateAccount(address _account) public {\r\n\r\n    _accrueAccountInterest(_account);\r\n    _accrueAccountInterest(msg.sender);\r\n    _accrueAccountInterest(feeRecipient());\r\n\r\n    uint health = accountHealth(_account);\r\n    require(health < controller.liqMinHealth(), \"LendingPair: account health > liqMinHealth\");\r\n\r\n    (uint supplyBurnA, uint borrowBurnA) = _liquidateToken(_account, tokenA, tokenB);\r\n    (uint supplyBurnB, uint borrowBurnB) = _liquidateToken(_account, tokenB, tokenA);\r\n\r\n    emit Liquidation(_account, supplyBurnA, supplyBurnB, borrowBurnA, borrowBurnB);\r\n  }\r\n\r\n  function pendingSupplyInterest(address _token, address _account) public view returns(uint) {\r\n    _validateToken(_token);\r\n    uint newInterest = _newInterest(lpToken[_token].balanceOf(_account), _token, _account);\r\n    return newInterest * _lpRate() / 100e18;\r\n  }\r\n\r\n  function pendingBorrowInterest(address _token, address _account) public view returns(uint) {\r\n    _validateToken(_token);\r\n    return _pendingBorrowInterest(_token, _account);\r\n  }\r\n\r\n  function feeRecipient() public view returns(address) {\r\n    return controller.feeRecipient();\r\n  }\r\n\r\n  function checkAccountHealth(address _account) public view  {\r\n    uint health = accountHealth(_account);\r\n    require(health >= controller.liqMinHealth(), \"LendingPair: insufficient accountHealth\");\r\n  }\r\n\r\n  function convertTokenValues(\r\n    address _fromToken,\r\n    address _toToken,\r\n    uint    _inputAmount\r\n  ) public view returns(uint) {\r\n\r\n    _validateToken(_fromToken);\r\n    _validateToken(_toToken);\r\n\r\n    return _convertTokenValues(_fromToken, _toToken, _inputAmount);\r\n  }\r\n\r\n  function _depositRepay(address _token, uint _amount) internal {\r\n\r\n    uint debt = debtOf[_token][msg.sender];\r\n    uint repayAmount = debt > _amount ? _amount : debt;\r\n\r\n    if (repayAmount > 0) {\r\n      _repay(_token, repayAmount);\r\n    }\r\n\r\n    uint depositAmount = _amount - repayAmount;\r\n\r\n    if (depositAmount > 0) {\r\n      _deposit(_token, depositAmount);\r\n    }\r\n  }\r\n\r\n  function _withdrawBorrow(address _token, uint _amount) internal {\r\n\r\n    uint supplyAmount = lpToken[_token].balanceOf(msg.sender);\r\n    uint withdrawAmount = supplyAmount > _amount ? _amount : supplyAmount;\r\n\r\n    if (withdrawAmount > 0) {\r\n      _withdraw(_token, withdrawAmount);\r\n    }\r\n\r\n    uint borrowAmount = _amount - withdrawAmount;\r\n\r\n    if (borrowAmount > 0) {\r\n      _borrow(_token, borrowAmount);\r\n    }\r\n  }\r\n\r\n  function _mintDebt(address _token, address _account, uint _amount) internal {\r\n    debtOf[_token][_account] += _amount;\r\n    totalDebt[_token] += _amount;\r\n  }\r\n\r\n  function _burnDebt(address _token, address _account, uint _amount) internal {\r\n    debtOf[_token][_account] -= _amount;\r\n    totalDebt[_token] -= _amount;\r\n  }\r\n\r\n  function _liquidateToken(\r\n    address _account,\r\n    address _supplyToken,\r\n    address _borrowToken\r\n  ) internal returns(uint, uint) {\r\n\r\n    uint accountSupply  = lpToken[_supplyToken].balanceOf(_account);\r\n    uint accountDebt    = debtOf[_borrowToken][_account];\r\n    uint supplyDebt     = _convertTokenValues(_borrowToken, _supplyToken, accountDebt);\r\n    uint supplyRequired = supplyDebt + supplyDebt * controller.liqFeesTotal() / 100e18;\r\n\r\n    uint supplyBurn = supplyRequired > accountSupply ? accountSupply : supplyRequired;\r\n\r\n    uint supplyBurnMinusFees = supplyBurn * 100e18 / (100e18 + controller.liqFeesTotal());\r\n    uint systemFee = supplyBurnMinusFees * controller.liqFeeSystem() / 100e18;\r\n    uint callerFee = supplyBurnMinusFees * controller.liqFeeCaller() / 100e18;\r\n\r\n    lpToken[_supplyToken].burn(_account, supplyBurn);\r\n    lpToken[_supplyToken].mint(msg.sender, callerFee);\r\n    lpToken[_supplyToken].mint(feeRecipient(), systemFee);\r\n\r\n    _burnDebt(_borrowToken, _account, accountDebt);\r\n\r\n    return (supplyBurn, accountDebt);\r\n  }\r\n\r\n  function _accrueAccountInterest(address _account) internal {\r\n    uint lpBalanceA = lpToken[tokenA].balanceOf(_account);\r\n    uint lpBalanceB = lpToken[tokenB].balanceOf(_account);\r\n\r\n    _accrueAccountSupply(tokenA, lpBalanceA, _account);\r\n    _accrueAccountSupply(tokenB, lpBalanceB, _account);\r\n    _accrueAccountDebt(tokenA, _account);\r\n    _accrueAccountDebt(tokenB, _account);\r\n\r\n    accountInterestSnapshot[tokenA][_account] = cumulativeInterestRate[tokenA];\r\n    accountInterestSnapshot[tokenB][_account] = cumulativeInterestRate[tokenB];\r\n  }\r\n\r\n  function _accrueAccountSupply(address _token, uint _amount, address _account) internal {\r\n    uint supplyInterest   = _newInterest(_amount, _token, _account);\r\n    uint newSupplyAccount = supplyInterest * _lpRate() / 100e18;\r\n    uint newSupplySystem  = supplyInterest * _systemRate() / 100e18;\r\n\r\n    lpToken[_token].mint(_account, newSupplyAccount);\r\n    lpToken[_token].mint(feeRecipient(), newSupplySystem);\r\n  }\r\n\r\n  function _accrueAccountDebt(address _token, address _account) internal {\r\n    uint newDebt = _pendingBorrowInterest(_token, _account);\r\n    _mintDebt(_token, _account, newDebt);\r\n  }\r\n\r\n  function _withdraw(address _token, uint _amount) internal {\r\n\r\n    lpToken[address(_token)].burn(msg.sender, _amount);\r\n\r\n    checkAccountHealth(msg.sender);\r\n\r\n    emit Withdraw(_token, _amount);\r\n  }\r\n\r\n  function _borrow(address _token, uint _amount) internal {\r\n\r\n    require(lpToken[address(_token)].balanceOf(msg.sender) == 0, \"LendingPair: cannot borrow supplied token\");\r\n\r\n    _mintDebt(_token, msg.sender, _amount);\r\n\r\n    checkAccountHealth(msg.sender);\r\n\r\n    emit Borrow(_token, _amount);\r\n  }\r\n\r\n  function _repay(address _token, uint _amount) internal {\r\n    _burnDebt(_token, msg.sender, _amount);\r\n\r\n    emit Repay(_token, _amount);\r\n  }\r\n\r\n  function _deposit(address _token, uint _amount) internal {\r\n    _checkDepositLimit(_token, _amount);\r\n\r\n    require(debtOf[_token][msg.sender] == 0, \"LendingPair: cannot deposit borrowed token\");\r\n\r\n    lpToken[address(_token)].mint(msg.sender, _amount);\r\n\r\n    emit Deposit(_token, _amount);\r\n  }\r\n\r\n  function _accrueInterest(address _token) internal {\r\n    uint blocksElapsed = block.number - lastBlockAccrued;\r\n    uint newInterest = _borrowRatePerBlock(_token) * blocksElapsed;\r\n    cumulativeInterestRate[_token] += newInterest;\r\n  }\r\n\r\n  function _createLpToken(address _lpTokenMaster) internal returns(IERC20) {\r\n    IERC20 newLPToken = IERC20(_lpTokenMaster.clone());\r\n    newLPToken.initialize();\r\n    return newLPToken;\r\n  }\r\n\r\n  function _safeTransfer(IERC20 _token, address _recipient, uint _amount) internal {\r\n    _token.transfer(_recipient, _amount);\r\n    _checkMinReserve(address(_token));\r\n  }\r\n\r\n  function _wethWithdrawTo(address _to, uint _amount) internal override {\r\n    TransferHelper._wethWithdrawTo(_to, _amount);\r\n    _checkMinReserve(address(WETH));\r\n  }\r\n\r\n  function _borrowRatePerBlock(address _token) internal view returns(uint) {\r\n    return controller.interestRateModel().borrowRatePerBlock(ILendingPair(address(this)), _token);\r\n  }\r\n\r\n  function _pendingBorrowInterest(address _token, address _account) internal view returns(uint) {\r\n    return _newInterest(debtOf[_token][_account], _token, _account);\r\n  }\r\n\r\n  function _borrowBalance(\r\n    address _account,\r\n    address _borrowedToken,\r\n    address _returnToken\r\n  ) internal view returns(uint) {\r\n\r\n    return _convertTokenValues(_borrowedToken, _returnToken, debtOf[_borrowedToken][_account]);\r\n  }\r\n\r\n  // Get supply balance converted to the units of _returnToken\r\n  function _supplyBalance(\r\n    address _account,\r\n    address _suppliedToken,\r\n    address _returnToken\r\n  ) internal view returns(uint) {\r\n\r\n    return _convertTokenValues(_suppliedToken, _returnToken, lpToken[_suppliedToken].balanceOf(_account));\r\n  }\r\n\r\n  function _convertTokenValues(\r\n    address _fromToken,\r\n    address _toToken,\r\n    uint    _inputAmount\r\n  ) internal view returns(uint) {\r\n\r\n    uint priceFrom = controller.tokenPrice(_fromToken) * 1e18 / 10 ** IERC20(_fromToken).decimals();\r\n    uint priceTo   = controller.tokenPrice(_toToken)   * 1e18 / 10 ** IERC20(_toToken).decimals();\r\n\r\n    return _inputAmount * priceFrom / priceTo;\r\n  }\r\n\r\n  function _validateToken(address _token) internal view {\r\n    require(_token == tokenA || _token == tokenB, \"LendingPair: invalid token\");\r\n  }\r\n\r\n  function _checkMinReserve(address _token) internal view {\r\n    require(IERC20(_token).balanceOf(address(this)) >= MIN_RESERVE, \"LendingPair: below MIN_RESERVE\");\r\n  }\r\n\r\n  function _checkDepositLimit(address _token, uint _amount) internal view {\r\n    uint depositLimit = controller.depositLimit(address(this), _token);\r\n\r\n    if (depositLimit > 0) {\r\n      require((lpToken[_token].totalSupply() + _amount) <= depositLimit, \"LendingPair: deposit limit reached\");\r\n    }\r\n  }\r\n\r\n  function _systemRate() internal view returns(uint) {\r\n    return controller.interestRateModel().systemRate(ILendingPair(address(this)));\r\n  }\r\n\r\n  function _lpRate() internal view returns(uint) {\r\n    return 100e18 - _systemRate();\r\n  }\r\n\r\n  function _newInterest(uint _balance, address _token, address _account) internal view returns(uint) {\r\n    return _balance * (cumulativeInterestRate[_token] - accountInterestSnapshot[_token][_account]) / 100e18;\r\n  }\r\n}\r\n\r\ncontract PairFactory is Ownable, TransferHelper {\r\n\r\n  uint MAX_INT = 2**256 - 1;\r\n\r\n  using Address for address;\r\n  using Clones for address;\r\n\r\n  address public lendingPairMaster;\r\n  address public lpTokenMaster;\r\n  address public controller;\r\n\r\n  mapping(address => mapping(address => address)) public pairByTokens;\r\n\r\n  event PairCreated(address indexed pair, address indexed tokenA, address indexed tokenB);\r\n\r\n  constructor(\r\n    address _lendingPairMaster,\r\n    address _lpTokenMaster,\r\n    address _controller\r\n  ) {\r\n    lendingPairMaster = _lendingPairMaster;\r\n    lpTokenMaster = _lpTokenMaster;\r\n    controller = _controller;\r\n  }\r\n\r\n  function createPair(\r\n    address _tokenA,\r\n    address _tokenB\r\n  ) public returns(address) {\r\n\r\n    require(_tokenA != _tokenB, 'PairFactory: duplicate tokens');\r\n    require(_tokenA != address(0) && _tokenB != address(0), 'PairFactory: zero address');\r\n    require(pairByTokens[_tokenA][_tokenB] == address(0), 'PairFactory: already exists');\r\n\r\n    LendingPair lendingPair = LendingPair(payable(lendingPairMaster.clone()));\r\n    lendingPair.initialize(lpTokenMaster, controller, IERC20(_tokenA), IERC20(_tokenB));\r\n    pairByTokens[_tokenA][_tokenB] = address(lendingPair);\r\n    pairByTokens[_tokenB][_tokenA] = address(lendingPair);\r\n\r\n    emit PairCreated(address(lendingPair), _tokenA, _tokenB);\r\n\r\n    return address(lendingPair);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lendingPairMaster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpTokenMaster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingPairMaster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpTokenMaster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairByTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PairFactory","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003493791a5d1ef068347d7e1d831670d8ad06bac4000000000000000000000000277aa659750ab673b550d842c9e8aa1592ea5925000000000000000000000000a474868accc4757ff4f1e680ddad3eec3fedfc67","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ed30dacbce3ee4d76e553c8541e38cbe343fd9b402d9064994040e77dacf41e7"}]}