{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.17; // optimization runs: 200, evm version: istanbul\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface DharmaSmartWalletImplementationV15Interface {\r\n  event CallSuccess(\r\n    bytes32 actionID,\r\n    bool rolledBack,\r\n    uint256 nonce,\r\n    address to,\r\n    uint256 value,\r\n    bytes data,\r\n    bytes returnData\r\n  );\r\n\r\n  event CallFailure(\r\n    bytes32 actionID,\r\n    uint256 nonce,\r\n    address to,\r\n    uint256 value,\r\n    bytes data,\r\n    string revertReason\r\n  );\r\n  // Fires when a new user signing key is set on the smart wallet.\r\n  event NewUserSigningKey(address userSigningKey);\r\n\r\n  // Fires when an error occurs as part of an attempted action.\r\n  event ExternalError(address indexed source, string revertReason);\r\n\r\n  // Fires when a transaction is cancelled.\r\n  event Cancel(uint256 cancelledNonce);\r\n\r\n  // Fired when an Ether withdrawal is made.\r\n  event EthWithdrawal(uint256 amount, address recipient);\r\n\r\n  // Fired when `escape` is called by a designated escape hatch account, if any.\r\n  event Escaped();\r\n\r\n  // Use an array of Calls for executing generic batch calls.\r\n  struct Call {\r\n    address to;\r\n    uint96 value;\r\n    bytes data;\r\n  }\r\n\r\n  // Use an array of CallReturns for handling generic batch calls.\r\n  struct CallReturn {\r\n    bool ok;\r\n    bytes returnData;\r\n  }\r\n\r\n  struct ValueReplacement {\r\n    uint24 returnDataOffset;\r\n    uint8 valueLength;\r\n    uint16 callIndex;\r\n  }\r\n\r\n  struct DataReplacement {\r\n    uint24 returnDataOffset;\r\n    uint24 dataLength;\r\n    uint16 callIndex;\r\n    uint24 callDataOffset;\r\n  }\r\n\r\n  struct AdvancedCall {\r\n    address to;\r\n    uint96 value;\r\n    bytes data;\r\n    ValueReplacement[] replaceValue;\r\n    DataReplacement[] replaceData;\r\n  }\r\n\r\n  struct AdvancedCallReturn {\r\n    bool ok;\r\n    bytes returnData;\r\n    uint96 callValue;\r\n    bytes callData;\r\n  }\r\n\r\n  // Actions performed via meta-transaction each have an action type.\r\n  enum ActionType {\r\n    Cancel,\r\n    SetUserSigningKey,\r\n    Generic,\r\n    GenericAtomicBatch,\r\n    SAIWithdrawal,\r\n    USDCWithdrawal,\r\n    ETHWithdrawal,\r\n    SetEscapeHatch,\r\n    RemoveEscapeHatch,\r\n    DisableEscapeHatch,\r\n    DAIWithdrawal,\r\n    SignatureVerification,\r\n    TradeEthForDai,\r\n    DAIBorrow,\r\n    USDCBorrow,\r\n    AdvancedGenericAtomicBatch,\r\n    SignatureVerificationDigestOnly\r\n  }\r\n\r\n  enum AssetType {\r\n    DAI,\r\n    USDC,\r\n    ETH,\r\n    SAI\r\n  }\r\n\r\n  function initialize(address userSigningKey) external;\r\n\r\n  function simulateActionWithAtomicBatchCalls(\r\n    Call[] calldata calls\r\n  ) external /* view */ returns (bool[] memory ok, bytes[] memory returnData);\r\n\r\n  function executeActionWithAtomicBatchCalls(\r\n    Call[] calldata calls,\r\n    uint256 minimumActionGas,\r\n    bytes calldata userSignature,\r\n    bytes calldata dharmaSignature\r\n  ) external returns (bool[] memory ok, bytes[] memory returnData);\r\n\r\n   function simulateAdvancedActionWithAtomicBatchCalls(\r\n    AdvancedCall[] calldata calls\r\n  ) external /* view */ returns (AdvancedCallReturn[] memory callResults);\r\n\r\n  function executeAdvancedActionWithAtomicBatchCalls(\r\n    AdvancedCall[] calldata calls,\r\n    uint256 minimumActionGas,\r\n    bytes calldata userSignature,\r\n    bytes calldata dharmaSignature\r\n  ) external returns (AdvancedCallReturn[] memory callResults);\r\n\r\n  function setEscapeHatch(\r\n    address account,\r\n    uint256 minimumActionGas,\r\n    bytes calldata userSignature,\r\n    bytes calldata dharmaSignature\r\n  ) external;\r\n\r\n  function removeEscapeHatch(\r\n    uint256 minimumActionGas,\r\n    bytes calldata userSignature,\r\n    bytes calldata dharmaSignature\r\n  ) external;\r\n\r\n  function permanentlyDisableEscapeHatch(\r\n    uint256 minimumActionGas,\r\n    bytes calldata userSignature,\r\n    bytes calldata dharmaSignature\r\n  ) external;\r\n\r\n  function escape(address token) external;\r\n\r\n  function withdrawEther(\r\n    uint256 amount,\r\n    address payable recipient,\r\n    uint256 minimumActionGas,\r\n    bytes calldata userSignature,\r\n    bytes calldata dharmaSignature\r\n  ) external returns (bool ok);\r\n\r\n  function setUserSigningKey(\r\n    address userSigningKey,\r\n    uint256 minimumActionGas,\r\n    bytes calldata userSignature,\r\n    bytes calldata dharmaSignature\r\n  ) external;\r\n\r\n  function recover(address newUserSigningKey) external;\r\n\r\n  function cancel(\r\n    uint256 minimumActionGas,\r\n    bytes calldata signature\r\n  ) external;\r\n\r\n  function getGenericAtomicBatchActionID(\r\n    Call[] calldata calls,\r\n    uint256 nonce,\r\n    uint256 minimumActionGas\r\n  ) external view returns (bytes32 actionID);\r\n\r\n  function getNextGenericAtomicBatchActionID(\r\n    Call[] calldata calls,\r\n    uint256 minimumActionGas\r\n  ) external view returns (bytes32 actionID);\r\n\r\n  function getAdvancedGenericAtomicBatchActionID(\r\n    AdvancedCall[] calldata calls,\r\n    uint256 nonce,\r\n    uint256 minimumActionGas\r\n  ) external view returns (bytes32 actionID);\r\n\r\n  function getNextAdvancedGenericAtomicBatchActionID(\r\n    AdvancedCall[] calldata calls,\r\n    uint256 minimumActionGas\r\n  ) external view returns (bytes32 actionID);\r\n\r\n  function getUserSigningKey() external view returns (address userSigningKey);\r\n\r\n  function getNonce() external view returns (uint256 nonce);\r\n\r\n  function getNextCustomActionID(\r\n    ActionType action,\r\n    uint256 amount,\r\n    address recipient,\r\n    uint256 minimumActionGas\r\n  ) external view returns (bytes32 actionID);\r\n\r\n  function getCustomActionID(\r\n    ActionType action,\r\n    uint256 amount,\r\n    address recipient,\r\n    uint256 nonce,\r\n    uint256 minimumActionGas\r\n  ) external view returns (bytes32 actionID);\r\n\r\n  function getVersion() external pure returns (uint256 version);\r\n\r\n  function setApproval(address token, uint256 amount) external;\r\n\r\n  function redeemAllDDai() external;\r\n  function redeemAllDUSDC() external;\r\n}\r\n\r\n\r\ninterface ERC20Interface {\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function allowance(\r\n    address owner, address spender\r\n  ) external view returns (uint256);\r\n}\r\n\r\n\r\ninterface ERC1271Interface {\r\n  function isValidSignature(\r\n    bytes calldata data, bytes calldata signature\r\n  ) external view returns (bytes4 magicValue);\r\n}\r\n\r\n\r\ninterface DTokenInterface {\r\n  // These external functions trigger accrual on the dToken and backing cToken.\r\n  function mint(uint256 underlyingToSupply) external returns (uint256 dTokensMinted);\r\n  function redeem(uint256 dTokensToBurn) external returns (uint256 underlyingReceived);\r\n  function redeemUnderlying(uint256 underlyingToReceive) external returns (uint256 dTokensBurned);\r\n\r\n  // These external functions only trigger accrual on the dToken.\r\n  function mintViaCToken(uint256 cTokensToSupply) external returns (uint256 dTokensMinted);\r\n\r\n  // View and pure functions do not trigger accrual on the dToken or the cToken.\r\n  function balanceOfUnderlying(address account) external view returns (uint256 underlyingBalance);\r\n}\r\n\r\n\r\ninterface DharmaKeyRegistryInterface {\r\n  function getKey() external view returns (address key);\r\n}\r\n\r\n\r\ninterface DharmaEscapeHatchRegistryInterface {\r\n  function setEscapeHatch(address newEscapeHatch) external;\r\n\r\n  function removeEscapeHatch() external;\r\n\r\n  function permanentlyDisableEscapeHatch() external;\r\n\r\n  function getEscapeHatch() external view returns (\r\n    bool exists, address escapeHatch\r\n  );\r\n}\r\n\r\n\r\ninterface RevertReasonHelperInterface {\r\n  function reason(uint256 code) external pure returns (string memory);\r\n}\r\n\r\n\r\ninterface EtherizedInterface {\r\n  function triggerEtherTransfer(\r\n    address payable target, uint256 value\r\n  ) external returns (bool success);\r\n}\r\n\r\n\r\nlibrary Address {\r\n  function isContract(address account) internal view returns (bool) {\r\n    uint256 size;\r\n    assembly { size := extcodesize(account) }\r\n    return size > 0;\r\n  }\r\n}\r\n\r\n\r\nlibrary ECDSA {\r\n  function recover(\r\n    bytes32 hash, bytes memory signature\r\n  ) internal pure returns (address) {\r\n    if (signature.length != 65) {\r\n      return (address(0));\r\n    }\r\n\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n\r\n    assembly {\r\n      r := mload(add(signature, 0x20))\r\n      s := mload(add(signature, 0x40))\r\n      v := byte(0, mload(add(signature, 0x60)))\r\n    }\r\n\r\n    if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n      return address(0);\r\n    }\r\n\r\n    if (v != 27 && v != 28) {\r\n      return address(0);\r\n    }\r\n\r\n    return ecrecover(hash, v, r, s);\r\n  }\r\n\r\n  function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n    return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n  }\r\n}\r\n\r\n\r\ncontract Etherized is EtherizedInterface {\r\n  address private constant _ETHERIZER = address(\r\n    0x723B51b72Ae89A3d0c2a2760f0458307a1Baa191\r\n  );\r\n\r\n  function triggerEtherTransfer(\r\n    address payable target, uint256 amount\r\n  ) external returns (bool success) {\r\n    if (msg.sender != _ETHERIZER) {\r\n      revert(\"Etherized: only callable by Etherizer\");\r\n    }\r\n\r\n    (success, ) = target.call.value(amount)(\"\");\r\n    if (!success) {\r\n      assembly {\r\n        returndatacopy(0, 0, returndatasize())\r\n        revert(0, returndatasize())\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title DharmaSmartWalletImplementationV15\r\n * @author 0age\r\n * @notice The V15 implementation for the Dharma smart wallet is a non-custodial,\r\n * meta-transaction-enabled wallet with helper functions to facilitate lending\r\n * funds through Dharma Dai and Dharma USD Coin (which in turn use CompoundV2),\r\n * and with an added security backstop provided by Dharma Labs prior to making\r\n * withdrawals. It adds support for Dharma Dai and Dharma USD Coin - they employ\r\n * the respective cTokens as backing tokens and mint and redeem them internally\r\n * as interest-bearing collateral. This implementation also contains methods to\r\n * support account recovery, escape hatch functionality, and generic actions,\r\n * including in an atomic batch. The smart wallet instances utilizing this\r\n * implementation are deployed through the Dharma Smart Wallet Factory via\r\n * `CREATE2`, which allows for their address to be known ahead of time, and any\r\n * Dai or USDC that has already been sent into that address will automatically\r\n * be deposited into the respective Dharma Token upon deployment of the new\r\n * smart wallet instance. V15 enables \"advanced\" batch actions and simulations\r\n * that take returndata from prior calls as inputs, and authorizes the escape\r\n * hatch role (if set) to recover the account and set a new user signing key.\r\n */\r\ncontract DharmaSmartWalletImplementationV15 is\r\n  DharmaSmartWalletImplementationV15Interface,\r\n  ERC1271Interface,\r\n  Etherized {\r\n  using Address for address;\r\n  using ECDSA for bytes32;\r\n  // WARNING: DO NOT REMOVE OR REORDER STORAGE WHEN WRITING NEW IMPLEMENTATIONS!\r\n\r\n  // The user signing key associated with this account is in storage slot 0.\r\n  // It is the core differentiator when it comes to the account in question.\r\n  address private _userSigningKey;\r\n\r\n  // The nonce associated with this account is in storage slot 1. Every time a\r\n  // signature is submitted, it must have the appropriate nonce, and once it has\r\n  // been accepted the nonce will be incremented.\r\n  uint256 private _nonce;\r\n\r\n  // The self-call context flag is in storage slot 2. Some protected functions\r\n  // may only be called externally from calls originating from other methods on\r\n  // this contract, which enables appropriate exception handling on reverts.\r\n  // Any storage should only be set immediately preceding a self-call and should\r\n  // be cleared upon entering the protected function being called.\r\n  bytes4 internal _selfCallContext;\r\n\r\n  // END STORAGE DECLARATIONS - DO NOT REMOVE OR REORDER STORAGE ABOVE HERE!\r\n\r\n  // The smart wallet version will be used when constructing valid signatures.\r\n  uint256 internal constant _DHARMA_SMART_WALLET_VERSION = 15;\r\n\r\n  // DharmaKeyRegistryV2 holds a public key for verifying meta-transactions.\r\n  DharmaKeyRegistryInterface internal constant _DHARMA_KEY_REGISTRY = (\r\n    DharmaKeyRegistryInterface(0x000000000D38df53b45C5733c7b34000dE0BDF52)\r\n  );\r\n\r\n  // Account recovery is facilitated using a hard-coded recovery manager,\r\n  // controlled by Dharma and implementing appropriate timelocks.\r\n  address internal constant _ACCOUNT_RECOVERY_MANAGER = address(\r\n    0x0000000000DfEd903aD76996FC07BF89C0127B1E\r\n  );\r\n\r\n  // Users can designate an \"escape hatch\" account with the ability to sweep any\r\n  // funds from their smart wallet by using the Dharma Escape Hatch Registry.\r\n  DharmaEscapeHatchRegistryInterface internal constant _ESCAPE_HATCH_REGISTRY = (\r\n    DharmaEscapeHatchRegistryInterface(0x00000000005280B515004B998a944630B6C663f8)\r\n  );\r\n\r\n  // Interface with dDai, dUSDC, Dai, USDC, cDai, and cUSDC contracts.\r\n  DTokenInterface internal constant _DDAI = DTokenInterface(\r\n    0x00000000001876eB1444c986fD502e618c587430 // mainnet\r\n  );\r\n\r\n  DTokenInterface internal constant _DUSDC = DTokenInterface(\r\n    0x00000000008943c65cAf789FFFCF953bE156f6f8 // mainnet\r\n  );\r\n\r\n  // The \"revert reason helper\" contains a collection of revert reason strings.\r\n  RevertReasonHelperInterface internal constant _REVERT_REASON_HELPER = (\r\n    RevertReasonHelperInterface(0xFc96814Ec38f6c19161f8Db168574099DaE06f2B)\r\n  );\r\n\r\n  // The \"Trade Bot\" enables limit orders using unordered meta-transactions.\r\n  address internal constant _TRADE_BOT = address(\r\n    0x8bFB7aC05bF9bDC6Bc3a635d4dd209c8Ba39E554\r\n  );\r\n\r\n  // ERC-1271 must return this magic value when `isValidSignature` is called.\r\n  bytes4 internal constant _ERC_1271_MAGIC_VALUE = bytes4(0x1626ba7e);\r\n  bytes4 internal constant _ERC_1271_LEGACY_MAGIC_VALUE = bytes4(0x20c13b0b);\r\n\r\n  // Specify the amount of gas to supply when making Ether transfers.\r\n  uint256 private constant _ETH_TRANSFER_GAS = 4999;\r\n\r\n  /**\r\n   * @notice Accept Ether in the fallback.\r\n   */\r\n  function () external payable {}\r\n\r\n  /**\r\n   * @notice In the initializer, set up the initial user signing key. Note that\r\n   * this initializer is only callable while the smart wallet instance is still\r\n   * in the contract creation phase.\r\n   * @param userSigningKey address The initial user signing key for the smart\r\n   * wallet.\r\n   */\r\n  function initialize(address userSigningKey) external {\r\n    // Ensure that this function is only callable during contract construction.\r\n    assembly { if extcodesize(address) { revert(0, 0) } }\r\n\r\n    // Set up the user's signing key and emit a corresponding event.\r\n    _setUserSigningKey(userSigningKey);\r\n  }\r\n\r\n  /**\r\n   * @notice Redeem all Dharma Dai held by this account for Dai.\r\n   */\r\n  function redeemAllDDai() external {\r\n    _withdrawMaxFromDharmaToken(AssetType.DAI);\r\n  }\r\n\r\n  /**\r\n   * @notice Redeem all Dharma USD Coin held by this account for USDC.\r\n   */\r\n  function redeemAllDUSDC() external {\r\n    _withdrawMaxFromDharmaToken(AssetType.USDC);\r\n  }\r\n\r\n  /**\r\n   * @notice Withdraw Ether to a provided recipient address by transferring it\r\n   * to a recipient.\r\n   * @param amount uint256 The amount of Ether to withdraw.\r\n   * @param recipient address The account to transfer the Ether to.\r\n   * @param minimumActionGas uint256 The minimum amount of gas that must be\r\n   * provided to this call - be aware that additional gas must still be included\r\n   * to account for the cost of overhead incurred up until the start of this\r\n   * function call.\r\n   * @param userSignature bytes A signature that resolves to the public key\r\n   * set for this account in storage slot zero, `_userSigningKey`. If the user\r\n   * signing key is not a contract, ecrecover will be used; otherwise, ERC1271\r\n   * will be used. A unique hash returned from `getCustomActionID` is prefixed\r\n   * and hashed to create the message hash for the signature.\r\n   * @param dharmaSignature bytes A signature that resolves to the public key\r\n   * returned for this account from the Dharma Key Registry. A unique hash\r\n   * returned from `getCustomActionID` is prefixed and hashed to create the\r\n   * signed message.\r\n   * @return True if the transfer succeeded, otherwise false.\r\n   */\r\n  function withdrawEther(\r\n    uint256 amount,\r\n    address payable recipient,\r\n    uint256 minimumActionGas,\r\n    bytes calldata userSignature,\r\n    bytes calldata dharmaSignature\r\n  ) external returns (bool ok) {\r\n    // Ensure caller and/or supplied signatures are valid and increment nonce.\r\n    _validateActionAndIncrementNonce(\r\n      ActionType.ETHWithdrawal,\r\n      abi.encode(amount, recipient),\r\n      minimumActionGas,\r\n      userSignature,\r\n      dharmaSignature\r\n    );\r\n\r\n    // Ensure that a non-zero amount of Ether has been supplied.\r\n    if (amount == 0) {\r\n      revert(_revertReason(4));\r\n    }\r\n\r\n    // Ensure that a non-zero recipient has been supplied.\r\n    if (recipient == address(0)) {\r\n      revert(_revertReason(1));\r\n    }\r\n\r\n    // Attempt to transfer Ether to the recipient and emit an appropriate event.\r\n    ok = _transferETH(recipient, amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Allow a signatory to increment the nonce at any point. The current\r\n   * nonce needs to be provided as an argument to the signature so as not to\r\n   * enable griefing attacks. All arguments can be omitted if called directly.\r\n   * No value is returned from this function - it will either succeed or revert.\r\n   * @param minimumActionGas uint256 The minimum amount of gas that must be\r\n   * provided to this call - be aware that additional gas must still be included\r\n   * to account for the cost of overhead incurred up until the start of this\r\n   * function call.\r\n   * @param signature bytes A signature that resolves to either the public key\r\n   * set for this account in storage slot zero, `_userSigningKey`, or the public\r\n   * key returned for this account from the Dharma Key Registry. A unique hash\r\n   * returned from `getCustomActionID` is prefixed and hashed to create the\r\n   * signed message.\r\n   */\r\n  function cancel(\r\n    uint256 minimumActionGas,\r\n    bytes calldata signature\r\n  ) external {\r\n    // Get the current nonce.\r\n    uint256 nonceToCancel = _nonce;\r\n\r\n    // Ensure the caller or the supplied signature is valid and increment nonce.\r\n    _validateActionAndIncrementNonce(\r\n      ActionType.Cancel,\r\n      abi.encode(),\r\n      minimumActionGas,\r\n      signature,\r\n      signature\r\n    );\r\n\r\n    // Emit an event to validate that the nonce is no longer valid.\r\n    emit Cancel(nonceToCancel);\r\n  }\r\n\r\n  /**\r\n   * @notice Allow signatory to set a new user signing key. The current nonce\r\n   * needs to be provided as an argument to the signature so as not to enable\r\n   * griefing attacks. No value is returned from this function - it will either\r\n   * succeed or revert.\r\n   * @param userSigningKey address The new user signing key to set on this smart\r\n   * wallet.\r\n   * @param minimumActionGas uint256 The minimum amount of gas that must be\r\n   * provided to this call - be aware that additional gas must still be included\r\n   * to account for the cost of overhead incurred up until the start of this\r\n   * function call.\r\n   * @param userSignature bytes A signature that resolves to the public key\r\n   * set for this account in storage slot zero, `_userSigningKey`. If the user\r\n   * signing key is not a contract, ecrecover will be used; otherwise, ERC1271\r\n   * will be used. A unique hash returned from `getCustomActionID` is prefixed\r\n   * and hashed to create the message hash for the signature.\r\n   * @param dharmaSignature bytes A signature that resolves to the public key\r\n   * returned for this account from the Dharma Key Registry. A unique hash\r\n   * returned from `getCustomActionID` is prefixed and hashed to create the\r\n   * signed message.\r\n   */\r\n  function setUserSigningKey(\r\n    address userSigningKey,\r\n    uint256 minimumActionGas,\r\n    bytes calldata userSignature,\r\n    bytes calldata dharmaSignature\r\n  ) external {\r\n    // Ensure caller and/or supplied signatures are valid and increment nonce.\r\n    _validateActionAndIncrementNonce(\r\n      ActionType.SetUserSigningKey,\r\n      abi.encode(userSigningKey),\r\n      minimumActionGas,\r\n      userSignature,\r\n      dharmaSignature\r\n    );\r\n\r\n    // Set new user signing key on smart wallet and emit a corresponding event.\r\n    _setUserSigningKey(userSigningKey);\r\n  }\r\n\r\n  /**\r\n   * @notice Set a dedicated address as the \"escape hatch\" account. This account\r\n   * can then call `escape(address token)` at any point to \"sweep\" the entire\r\n   * balance of the token (or Ether given null address) from the smart wallet.\r\n   * The escape hatch account may also call `recover` and set a new user signing\r\n   * key. This function will revert if the smart wallet has previously called\r\n   * `permanentlyDisableEscapeHatch` at any point and disabled the escape hatch.\r\n   * No value is returned from this function - it will either succeed or revert.\r\n   * @param account address The account to set as the escape hatch account.\r\n   * @param minimumActionGas uint256 The minimum amount of gas that must be\r\n   * provided to this call - be aware that additional gas must still be included\r\n   * to account for the cost of overhead incurred up until the start of this\r\n   * function call.\r\n   * @param userSignature bytes A signature that resolves to the public key\r\n   * set for this account in storage slot zero, `_userSigningKey`. If the user\r\n   * signing key is not a contract, ecrecover will be used; otherwise, ERC1271\r\n   * will be used. A unique hash returned from `getCustomActionID` is prefixed\r\n   * and hashed to create the message hash for the signature.\r\n   * @param dharmaSignature bytes A signature that resolves to the public key\r\n   * returned for this account from the Dharma Key Registry. A unique hash\r\n   * returned from `getCustomActionID` is prefixed and hashed to create the\r\n   * signed message.\r\n   */\r\n  function setEscapeHatch(\r\n    address account,\r\n    uint256 minimumActionGas,\r\n    bytes calldata userSignature,\r\n    bytes calldata dharmaSignature\r\n  ) external {\r\n    // Ensure caller and/or supplied signatures are valid and increment nonce.\r\n    _validateActionAndIncrementNonce(\r\n      ActionType.SetEscapeHatch,\r\n      abi.encode(account),\r\n      minimumActionGas,\r\n      userSignature,\r\n      dharmaSignature\r\n    );\r\n\r\n    // Ensure that an escape hatch account has been provided.\r\n    if (account == address(0)) {\r\n      revert(_revertReason(5));\r\n    }\r\n\r\n    // Set a new escape hatch for the smart wallet unless it has been disabled.\r\n    _ESCAPE_HATCH_REGISTRY.setEscapeHatch(account);\r\n  }\r\n\r\n  /**\r\n   * @notice Remove the \"escape hatch\" account if one is currently set. This\r\n   * function call will revert if the smart wallet has previously called\r\n   * `permanentlyDisableEscapeHatch` at any point and disabled the escape hatch.\r\n   * No value is returned from this function - it will either succeed or revert.\r\n   * @param minimumActionGas uint256 The minimum amount of gas that must be\r\n   * provided to this call - be aware that additional gas must still be included\r\n   * to account for the cost of overhead incurred up until the start of this\r\n   * function call.\r\n   * @param userSignature bytes A signature that resolves to the public key\r\n   * set for this account in storage slot zero, `_userSigningKey`. If the user\r\n   * signing key is not a contract, ecrecover will be used; otherwise, ERC1271\r\n   * will be used. A unique hash returned from `getCustomActionID` is prefixed\r\n   * and hashed to create the message hash for the signature.\r\n   * @param dharmaSignature bytes A signature that resolves to the public key\r\n   * returned for this account from the Dharma Key Registry. A unique hash\r\n   * returned from `getCustomActionID` is prefixed and hashed to create the\r\n   * signed message.\r\n   */\r\n  function removeEscapeHatch(\r\n    uint256 minimumActionGas,\r\n    bytes calldata userSignature,\r\n    bytes calldata dharmaSignature\r\n  ) external {\r\n    // Ensure caller and/or supplied signatures are valid and increment nonce.\r\n    _validateActionAndIncrementNonce(\r\n      ActionType.RemoveEscapeHatch,\r\n      abi.encode(),\r\n      minimumActionGas,\r\n      userSignature,\r\n      dharmaSignature\r\n    );\r\n\r\n    // Remove the escape hatch for the smart wallet if one is currently set.\r\n    _ESCAPE_HATCH_REGISTRY.removeEscapeHatch();\r\n  }\r\n\r\n  /**\r\n   * @notice Permanently disable the \"escape hatch\" mechanism for this smart\r\n   * wallet. This function call will revert if the smart wallet has already\r\n   * called `permanentlyDisableEscapeHatch` at any point in the past. No value\r\n   * is returned from this function - it will either succeed or revert.\r\n   * @param minimumActionGas uint256 The minimum amount of gas that must be\r\n   * provided to this call - be aware that additional gas must still be included\r\n   * to account for the cost of overhead incurred up until the start of this\r\n   * function call.\r\n   * @param userSignature bytes A signature that resolves to the public key\r\n   * set for this account in storage slot zero, `_userSigningKey`. If the user\r\n   * signing key is not a contract, ecrecover will be used; otherwise, ERC1271\r\n   * will be used. A unique hash returned from `getCustomActionID` is prefixed\r\n   * and hashed to create the message hash for the signature.\r\n   * @param dharmaSignature bytes A signature that resolves to the public key\r\n   * returned for this account from the Dharma Key Registry. A unique hash\r\n   * returned from `getCustomActionID` is prefixed and hashed to create the\r\n   * signed message.\r\n   */\r\n  function permanentlyDisableEscapeHatch(\r\n    uint256 minimumActionGas,\r\n    bytes calldata userSignature,\r\n    bytes calldata dharmaSignature\r\n  ) external {\r\n    // Ensure caller and/or supplied signatures are valid and increment nonce.\r\n    _validateActionAndIncrementNonce(\r\n      ActionType.DisableEscapeHatch,\r\n      abi.encode(),\r\n      minimumActionGas,\r\n      userSignature,\r\n      dharmaSignature\r\n    );\r\n\r\n    // Permanently disable the escape hatch mechanism for this smart wallet.\r\n    _ESCAPE_HATCH_REGISTRY.permanentlyDisableEscapeHatch();\r\n  }\r\n\r\n  /**\r\n   * @notice Allow the designated escape hatch account to redeem and \"sweep\"\r\n   * the total token balance or Ether balance (by supplying the null address)\r\n   * from the smart wallet. The call will revert for any other caller, or if\r\n   * there is no escape hatch account on this smart wallet. An `Escaped` event\r\n   * will be emitted. No value is returned from this function - it will either\r\n   * succeed or revert.\r\n   */\r\n  function escape(address token) external {\r\n    // Get the escape hatch account, if one exists, for this account.\r\n    (bool exists, address escapeHatch) = _ESCAPE_HATCH_REGISTRY.getEscapeHatch();\r\n\r\n    // Ensure that an escape hatch is currently set for this smart wallet.\r\n    if (!exists) {\r\n      revert(_revertReason(6));\r\n    }\r\n\r\n    // Ensure that the escape hatch account is the caller.\r\n    if (msg.sender != escapeHatch) {\r\n      revert(_revertReason(7));\r\n    }\r\n\r\n    if (token == address(0)) {\r\n      // Determine if there is Ether at this address that should be transferred.\r\n      uint256 balance = address(this).balance;\r\n      if (balance > 0) {\r\n        // Attempt to transfer any Ether to caller and emit an appropriate event.\r\n        _transferETH(msg.sender, balance);\r\n      }\r\n    } else {\r\n      // Attempt to transfer all tokens to the caller.\r\n      _transferMax(ERC20Interface(address(token)), msg.sender, false);\r\n    }\r\n\r\n    // Emit an `Escaped` event.\r\n    emit Escaped();\r\n  }\r\n\r\n  /**\r\n   * @notice Allow the account recovery manager to set a new user signing key on\r\n   * the smart wallet. The call will revert for any other caller. The account\r\n   * recovery manager implements a set of controls around the process, including\r\n   * a timelock and an option to permanently opt out of account recover. No\r\n   * value is returned from this function - it will either succeed or revert.\r\n   * @param newUserSigningKey address The new user signing key to set on this\r\n   * smart wallet.\r\n   */\r\n  function recover(address newUserSigningKey) external {\r\n    // Only Account Recovery Manager or the escape hatch may call this function.\r\n    if (msg.sender != _ACCOUNT_RECOVERY_MANAGER) {\r\n        // Get the escape hatch account, if one exists, for this account.\r\n        (bool exists, address escapeHatch) = _ESCAPE_HATCH_REGISTRY.getEscapeHatch();\r\n\r\n        // Ensure that an escape hatch is currently set for this smart wallet.\r\n        if (!exists) {\r\n          revert(_revertReason(8));\r\n        }\r\n\r\n        // Ensure that the escape hatch account is the caller.\r\n        if (msg.sender != escapeHatch) {\r\n          revert(_revertReason(7));\r\n        }\r\n    }\r\n\r\n    // Increment nonce to prevent signature reuse should original key be reset.\r\n    _nonce++;\r\n\r\n    // Set up the user's new dharma key and emit a corresponding event.\r\n    _setUserSigningKey(newUserSigningKey);\r\n  }\r\n\r\n  function setApproval(address token, uint256 amount) external {\r\n    // Only the Trade Bot contract may call this function.\r\n    if (msg.sender != _TRADE_BOT) {\r\n      revert(_revertReason(34));\r\n    }\r\n\r\n    ERC20Interface(token).approve(_TRADE_BOT, amount);\r\n  }\r\n\r\n  /**\r\n   * @notice View function for getting the current user signing key for the\r\n   * smart wallet.\r\n   * @return The current user signing key.\r\n   */\r\n  function getUserSigningKey() external view returns (address userSigningKey) {\r\n    userSigningKey = _userSigningKey;\r\n  }\r\n\r\n  /**\r\n   * @notice View function for getting the current nonce of the smart wallet.\r\n   * This nonce is incremented whenever an action is taken that requires a\r\n   * signature and/or a specific caller.\r\n   * @return The current nonce.\r\n   */\r\n  function getNonce() external view returns (uint256 nonce) {\r\n    nonce = _nonce;\r\n  }\r\n\r\n  /**\r\n   * @notice View function that, given an action type and arguments, will return\r\n   * the action ID or message hash that will need to be prefixed (according to\r\n   * EIP-191 0x45), hashed, and signed by both the user signing key and by the\r\n   * key returned for this smart wallet by the Dharma Key Registry in order to\r\n   * construct a valid signature for the corresponding action. Any nonce value\r\n   * may be supplied, which enables constructing valid message hashes for\r\n   * multiple future actions ahead of time.\r\n   * @param action uint8 The type of action, designated by it's index. Valid\r\n   * custom actions include Cancel (0), SetUserSigningKey (1),\r\n   * DAIWithdrawal (10), USDCWithdrawal (5), ETHWithdrawal (6),\r\n   * SetEscapeHatch (7), RemoveEscapeHatch (8), and DisableEscapeHatch (9).\r\n   * @param amount uint256 The amount to withdraw for Withdrawal actions. This\r\n   * value is ignored for non-withdrawal action types.\r\n   * @param recipient address The account to transfer withdrawn funds to or the\r\n   * new user signing key. This value is ignored for Cancel, RemoveEscapeHatch,\r\n   * and DisableEscapeHatch action types.\r\n   * @param minimumActionGas uint256 The minimum amount of gas that must be\r\n   * provided to this call - be aware that additional gas must still be included\r\n   * to account for the cost of overhead incurred up until the start of this\r\n   * function call.\r\n   * @return The action ID, which will need to be prefixed, hashed and signed in\r\n   * order to construct a valid signature.\r\n   */\r\n  function getNextCustomActionID(\r\n    ActionType action,\r\n    uint256 amount,\r\n    address recipient,\r\n    uint256 minimumActionGas\r\n  ) external view returns (bytes32 actionID) {\r\n    // Determine the actionID - this serves as a signature hash for an action.\r\n    actionID = _getActionID(\r\n      action,\r\n      _validateCustomActionTypeAndGetArguments(action, amount, recipient),\r\n      _nonce,\r\n      minimumActionGas,\r\n      _userSigningKey,\r\n      _getDharmaSigningKey()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice View function that, given an action type and arguments, will return\r\n   * the action ID or message hash that will need to be prefixed (according to\r\n   * EIP-191 0x45), hashed, and signed by both the user signing key and by the\r\n   * key returned for this smart wallet by the Dharma Key Registry in order to\r\n   * construct a valid signature for the corresponding action. The current nonce\r\n   * will be used, which means that it will only be valid for the next action\r\n   * taken.\r\n   * @param action uint8 The type of action, designated by it's index. Valid\r\n   * custom actions include Cancel (0), SetUserSigningKey (1),\r\n   * DAIWithdrawal (10), USDCWithdrawal (5), ETHWithdrawal (6),\r\n   * SetEscapeHatch (7), RemoveEscapeHatch (8), and DisableEscapeHatch (9).\r\n   * @param amount uint256 The amount to withdraw for Withdrawal actions. This\r\n   * value is ignored for non-withdrawal action types.\r\n   * @param recipient address The account to transfer withdrawn funds to or the\r\n   * new user signing key. This value is ignored for Cancel, RemoveEscapeHatch,\r\n   * and DisableEscapeHatch action types.\r\n   * @param nonce uint256 The nonce to use.\r\n   * @param minimumActionGas uint256 The minimum amount of gas that must be\r\n   * provided to this call - be aware that additional gas must still be included\r\n   * to account for the cost of overhead incurred up until the start of this\r\n   * function call.\r\n   * @return The action ID, which will need to be prefixed, hashed and signed in\r\n   * order to construct a valid signature.\r\n   */\r\n  function getCustomActionID(\r\n    ActionType action,\r\n    uint256 amount,\r\n    address recipient,\r\n    uint256 nonce,\r\n    uint256 minimumActionGas\r\n  ) external view returns (bytes32 actionID) {\r\n    // Determine the actionID - this serves as a signature hash for an action.\r\n    actionID = _getActionID(\r\n      action,\r\n      _validateCustomActionTypeAndGetArguments(action, amount, recipient),\r\n      nonce,\r\n      minimumActionGas,\r\n      _userSigningKey,\r\n      _getDharmaSigningKey()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice View function that implements ERC-1271 and validates a set of\r\n   * signatures, one from the owner (using ERC-1271 as well if the user signing\r\n   * key is a contract) and one from the Dharma Key Registry against the\r\n   * supplied data. The data must be ABI encoded as (bytes32, bytes), where the\r\n   * first bytes32 parameter represents the hash digest for validating the\r\n   * supplied signatures and the second bytes parameter contains context for the\r\n   * requested validation. The two signatures are packed together, with the one\r\n   * from Dharma coming first and that from the user coming second - this is so\r\n   * that, in future versions, multiple user signatures may be supplied if the\r\n   * associated key ring requires them.\r\n   * @param data bytes The data used to validate the signature.\r\n   * @param signatures bytes The two signatures, each 65 bytes - one from the\r\n   * owner (using ERC-1271 as well if the user signing key is a contract) and\r\n   * one from the Dharma Key Registry.\r\n   * @return The 4-byte magic value to signify a valid signature in ERC-1271, if\r\n   * the signatures are both valid.\r\n   */\r\n  function isValidSignature(\r\n    bytes calldata data, bytes calldata signatures\r\n  ) external view returns (bytes4 magicValue) {\r\n    // Get message hash digest and any additional context from data argument.\r\n    bytes32 digest;\r\n    bytes memory context;\r\n\r\n    if (data.length == 32) {\r\n      digest = abi.decode(data, (bytes32));\r\n    } else {\r\n      if (data.length < 64) {\r\n        revert(_revertReason(30));\r\n      }\r\n      (digest, context) = abi.decode(data, (bytes32, bytes));\r\n    }\r\n\r\n    // Get Dharma signature & user signature from combined signatures argument.\r\n    if (signatures.length != 130) {\r\n      revert(_revertReason(11));\r\n    }\r\n    bytes memory signaturesInMemory = signatures;\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n    assembly {\r\n      r := mload(add(signaturesInMemory, 0x20))\r\n      s := mload(add(signaturesInMemory, 0x40))\r\n      v := byte(0, mload(add(signaturesInMemory, 0x60)))\r\n    }\r\n    bytes memory dharmaSignature = abi.encodePacked(r, s, v);\r\n\r\n    assembly {\r\n      r := mload(add(signaturesInMemory, 0x61))\r\n      s := mload(add(signaturesInMemory, 0x81))\r\n      v := byte(0, mload(add(signaturesInMemory, 0xa1)))\r\n    }\r\n    bytes memory userSignature = abi.encodePacked(r, s, v);\r\n\r\n    // Validate user signature with `SignatureVerification` as the action type.\r\n    if (\r\n      !_validateUserSignature(\r\n        digest,\r\n        ActionType.SignatureVerification,\r\n        context,\r\n        _userSigningKey,\r\n        userSignature\r\n      )\r\n    ) {\r\n      revert(_revertReason(12));\r\n    }\r\n\r\n    // Recover Dharma signature against key returned from Dharma Key Registry.\r\n    if (_getDharmaSigningKey() != digest.recover(dharmaSignature)) {\r\n      revert(_revertReason(13));\r\n    }\r\n\r\n    // Return the ERC-1271 magic value to indicate success.\r\n    magicValue = _ERC_1271_LEGACY_MAGIC_VALUE;\r\n  }\r\n\r\n  function isValidSignature(\r\n    bytes32 digest, bytes calldata signatures\r\n  ) external view returns (bytes4 magicValue) {\r\n    // Get Dharma signature & user signature from combined signatures argument.\r\n    if (signatures.length != 130) {\r\n      revert(_revertReason(11));\r\n    }\r\n    bytes memory signaturesInMemory = signatures;\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n    assembly {\r\n      r := mload(add(signaturesInMemory, 0x20))\r\n      s := mload(add(signaturesInMemory, 0x40))\r\n      v := byte(0, mload(add(signaturesInMemory, 0x60)))\r\n    }\r\n    bytes memory dharmaSignature = abi.encodePacked(r, s, v);\r\n\r\n    assembly {\r\n      r := mload(add(signaturesInMemory, 0x61))\r\n      s := mload(add(signaturesInMemory, 0x81))\r\n      v := byte(0, mload(add(signaturesInMemory, 0xa1)))\r\n    }\r\n    bytes memory userSignature = abi.encodePacked(r, s, v);\r\n\r\n    // Validate user signature with `SignatureVerification` as the action type.\r\n    if (\r\n      !_validateUserSignature(\r\n        digest,\r\n        ActionType.SignatureVerificationDigestOnly,\r\n        \"\",\r\n        _userSigningKey,\r\n        userSignature\r\n      )\r\n    ) {\r\n      revert(_revertReason(12));\r\n    }\r\n\r\n    // Recover Dharma signature against key returned from Dharma Key Registry.\r\n    if (_getDharmaSigningKey() != digest.recover(dharmaSignature)) {\r\n      revert(_revertReason(13));\r\n    }\r\n\r\n    // Return the ERC-1271 magic value to indicate success.\r\n    magicValue = _ERC_1271_MAGIC_VALUE;\r\n  }\r\n\r\n  /**\r\n   * @notice View function for getting the current Dharma Smart Wallet\r\n   * implementation contract address set on the upgrade beacon.\r\n   * @return The current Dharma Smart Wallet implementation contract.\r\n   */\r\n  function getImplementation() external view returns (address implementation) {\r\n    (bool ok, bytes memory returnData) = address(\r\n      0x000000000026750c571ce882B17016557279ADaa\r\n    ).staticcall(\"\");\r\n\r\n    if (!(ok && returnData.length == 32)) {\r\n      revert(_revertReason(39));\r\n    }\r\n\r\n    implementation = abi.decode(returnData, (address));\r\n  }\r\n\r\n  /**\r\n   * @notice Pure function for getting the current Dharma Smart Wallet version.\r\n   * @return The current Dharma Smart Wallet version.\r\n   */\r\n  function getVersion() external pure returns (uint256 version) {\r\n    version = _DHARMA_SMART_WALLET_VERSION;\r\n  }\r\n\r\n  /**\r\n   * @notice Perform a series of generic calls to other contracts. If any call\r\n   * fails during execution, the preceding calls will be rolled back, but their\r\n   * original return data will still be accessible. Calls that would otherwise\r\n   * occur after the failed call will not be executed. Note that accounts with\r\n   * no code may not be specified unless value is included, nor may the smart\r\n   * wallet itself or the escape hatch registry. In order to increment the nonce\r\n   * and invalidate the signatures, a call to this function with valid targets,\r\n   * signatutes, and gas will always succeed. To determine whether each call\r\n   * made as part of the action was successful or not, either the corresponding\r\n   * return value or `CallSuccess` and `CallFailure` events can be used - note\r\n   * that even calls that return a success status will be rolled back unless all\r\n   * of the calls returned a success status. Finally, note that this function\r\n   * must currently be implemented as a public function (instead of as an\r\n   * external one) due to an ABIEncoderV2 `UnimplementedFeatureError`.\r\n   * @param calls Call[] A struct containing the target, value, and calldata to\r\n   * provide when making each call.\r\n   * @param minimumActionGas uint256 The minimum amount of gas that must be\r\n   * provided to this call - be aware that additional gas must still be included\r\n   * to account for the cost of overhead incurred up until the start of this\r\n   * function call.\r\n   * @param userSignature bytes A signature that resolves to the public key\r\n   * set for this account in storage slot zero, `_userSigningKey`. If the user\r\n   * signing key is not a contract, ecrecover will be used; otherwise, ERC1271\r\n   * will be used. A unique hash returned from `getCustomActionID` is prefixed\r\n   * and hashed to create the message hash for the signature.\r\n   * @param dharmaSignature bytes A signature that resolves to the public key\r\n   * returned for this account from the Dharma Key Registry. A unique hash\r\n   * returned from `getCustomActionID` is prefixed and hashed to create the\r\n   * signed message.\r\n   * @return An array of structs signifying the status of each call, as well as\r\n   * any data returned from that call. Calls that are not executed will return\r\n   * empty data.\r\n   */\r\n  function executeActionWithAtomicBatchCalls(\r\n    Call[] memory calls,\r\n    uint256 minimumActionGas,\r\n    bytes memory userSignature,\r\n    bytes memory dharmaSignature\r\n  ) public returns (bool[] memory ok, bytes[] memory returnData) {\r\n    // Ensure that each `to` address is a contract and is not this contract.\r\n    for (uint256 i = 0; i < calls.length; i++) {\r\n      if (calls[i].value == 0) {\r\n        _ensureValidGenericCallTarget(calls[i].to);\r\n      }\r\n    }\r\n\r\n    // Ensure caller and/or supplied signatures are valid and increment nonce.\r\n    (bytes32 actionID, uint256 nonce) = _validateActionAndIncrementNonce(\r\n      ActionType.GenericAtomicBatch,\r\n      abi.encode(calls),\r\n      minimumActionGas,\r\n      userSignature,\r\n      dharmaSignature\r\n    );\r\n\r\n    // Note: from this point on, there are no reverts (apart from out-of-gas or\r\n    // call-depth-exceeded) originating from this contract. However, one of the\r\n    // calls may revert, in which case the function will return `false`, along\r\n    // with the revert reason encoded as bytes, and fire an CallFailure event.\r\n\r\n    // Specify length of returned values in order to work with them in memory.\r\n    ok = new bool[](calls.length);\r\n    returnData = new bytes[](calls.length);\r\n\r\n    // Set self-call context to call _executeActionWithAtomicBatchCallsAtomic.\r\n    _selfCallContext = this.executeActionWithAtomicBatchCalls.selector;\r\n\r\n    // Make the atomic self-call - if any call fails, calls that preceded it\r\n    // will be rolled back and calls that follow it will not be made.\r\n    (bool externalOk, bytes memory rawCallResults) = address(this).call(\r\n      abi.encodeWithSelector(\r\n        this._executeActionWithAtomicBatchCallsAtomic.selector, calls\r\n      )\r\n    );\r\n\r\n    // Ensure that self-call context has been cleared.\r\n    if (!externalOk) {\r\n      delete _selfCallContext;\r\n    }\r\n\r\n    // Parse data returned from self-call into each call result and store / log.\r\n    CallReturn[] memory callResults = abi.decode(rawCallResults, (CallReturn[]));\r\n    for (uint256 i = 0; i < callResults.length; i++) {\r\n      Call memory currentCall = calls[i];\r\n\r\n      // Set the status and the return data / revert reason from the call.\r\n      ok[i] = callResults[i].ok;\r\n      returnData[i] = callResults[i].returnData;\r\n\r\n      // Emit CallSuccess or CallFailure event based on the outcome of the call.\r\n      if (callResults[i].ok) {\r\n        // Note: while the call succeeded, the action may still have \"failed\".\r\n        emit CallSuccess(\r\n          actionID,\r\n          !externalOk, // If another call failed this will have been rolled back\r\n          nonce,\r\n          currentCall.to,\r\n          uint256(currentCall.value),\r\n          currentCall.data,\r\n          callResults[i].returnData\r\n        );\r\n      } else {\r\n        // Note: while the call failed, the nonce will still be incremented,\r\n        // which will invalidate all supplied signatures.\r\n        emit CallFailure(\r\n          actionID,\r\n          nonce,\r\n          currentCall.to,\r\n          uint256(currentCall.value),\r\n          currentCall.data,\r\n          _decodeRevertReason(callResults[i].returnData)\r\n        );\r\n\r\n        // exit early - any calls after the first failed call will not execute.\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Protected function that can only be called from\r\n   * `executeActionWithAtomicBatchCalls` on this contract. It will attempt to\r\n   * perform each specified call, populating the array of results as it goes,\r\n   * unless a failure occurs, at which point it will revert and \"return\" the\r\n   * array of results as revert data. Otherwise, it will simply return the array\r\n   * upon successful completion of each call. Finally, note that this function\r\n   * must currently be implemented as a public function (instead of as an\r\n   * external one) due to an ABIEncoderV2 `UnimplementedFeatureError`.\r\n   * @param calls Call[] A struct containing the target, value, and calldata to\r\n   * provide when making each call.\r\n   * @return An array of structs signifying the status of each call, as well as\r\n   * any data returned from that call. Calls that are not executed will return\r\n   * empty data. If any of the calls fail, the array will be returned as revert\r\n   * data.\r\n   */\r\n  function _executeActionWithAtomicBatchCallsAtomic(\r\n    Call[] memory calls\r\n  ) public returns (CallReturn[] memory callResults) {\r\n    // Ensure caller is this contract and self-call context is correctly set.\r\n    _enforceSelfCallFrom(this.executeActionWithAtomicBatchCalls.selector);\r\n\r\n    bool rollBack = false;\r\n    callResults = new CallReturn[](calls.length);\r\n\r\n    for (uint256 i = 0; i < calls.length; i++) {\r\n      // Perform low-level call and set return values using result.\r\n      (bool ok, bytes memory returnData) = calls[i].to.call.value(\r\n        uint256(calls[i].value)\r\n      )(calls[i].data);\r\n      callResults[i] = CallReturn({ok: ok, returnData: returnData});\r\n      if (!ok) {\r\n        // Exit early - any calls after the first failed call will not execute.\r\n        rollBack = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (rollBack) {\r\n      // Wrap in length encoding and revert (provide bytes instead of a string).\r\n      bytes memory callResultsBytes = abi.encode(callResults);\r\n      assembly { revert(add(32, callResultsBytes), mload(callResultsBytes)) }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Perform a series of generic calls to other contracts. If any call\r\n   * fails during execution, the preceding calls will be rolled back, but their\r\n   * original return data will still be accessible. Calls that would otherwise\r\n   * occur after the failed call will not be executed. Note that accounts with\r\n   * no code may not be specified unless value is included, nor may the smart\r\n   * wallet itself or the escape hatch registry. In order to increment the nonce\r\n   * and invalidate the signatures, a call to this function with valid targets,\r\n   * signatutes, and gas will always succeed. To determine whether each call\r\n   * made as part of the action was successful or not, either the corresponding\r\n   * return value or `CallSuccess` and `CallFailure` events can be used - note\r\n   * that even calls that return a success status will be rolled back unless all\r\n   * of the calls returned a success status. Finally, note that this function\r\n   * must currently be implemented as a public function (instead of as an\r\n   * external one) due to an ABIEncoderV2 `UnimplementedFeatureError`.\r\n   * @param calls AdvancedCall[] A struct containing the target, value, and\r\n   * calldata to provide when making each call, along with call index, data size\r\n   * and data offset of any returndata to insert into subsequent calls as value\r\n   * or calldata.\r\n   * @param minimumActionGas uint256 The minimum amount of gas that must be\r\n   * provided to this call - be aware that additional gas must still be included\r\n   * to account for the cost of overhead incurred up until the start of this\r\n   * function call.\r\n   * @param userSignature bytes A signature that resolves to the public key\r\n   * set for this account in storage slot zero, `_userSigningKey`. If the user\r\n   * signing key is not a contract, ecrecover will be used; otherwise, ERC1271\r\n   * will be used. A unique hash returned from `getCustomActionID` is prefixed\r\n   * and hashed to create the message hash for the signature.\r\n   * @param dharmaSignature bytes A signature that resolves to the public key\r\n   * returned for this account from the Dharma Key Registry. A unique hash\r\n   * returned from `getCustomActionID` is prefixed and hashed to create the\r\n   * signed message.\r\n   * @return An array of structs signifying the status of each call, as well as\r\n   * any data returned from that call. Calls that are not executed will return\r\n   * empty data.\r\n   */\r\n  function executeAdvancedActionWithAtomicBatchCalls(\r\n    AdvancedCall[] memory calls,\r\n    uint256 minimumActionGas,\r\n    bytes memory userSignature,\r\n    bytes memory dharmaSignature\r\n  ) public returns (AdvancedCallReturn[] memory callResults) {\r\n    // Ensure that each `to` address is a contract and is not this contract.\r\n    for (uint256 i = 0; i < calls.length; i++) {\r\n      if (calls[i].value == 0) {\r\n        _ensureValidGenericCallTarget(calls[i].to);\r\n      }\r\n    }\r\n\r\n    // Ensure caller and/or supplied signatures are valid and increment nonce.\r\n    (bytes32 actionID, uint256 nonce) = _validateActionAndIncrementNonce(\r\n      ActionType.AdvancedGenericAtomicBatch,\r\n      abi.encode(calls),\r\n      minimumActionGas,\r\n      userSignature,\r\n      dharmaSignature\r\n    );\r\n\r\n    // Note: from this point on, there are no reverts (apart from out-of-gas or\r\n    // call-depth-exceeded) originating from this contract. However, one of the\r\n    // calls may revert, in which case the function will return `false`, along\r\n    // with the revert reason encoded as bytes, and fire an CallFailure event.\r\n\r\n    // Specify length of returned values in order to work with them in memory.\r\n    callResults = new AdvancedCallReturn[](calls.length);\r\n\r\n    // Set self-call context for _executeAdvancedActionWithAtomicBatchCallsAtomic.\r\n    _selfCallContext = this.executeAdvancedActionWithAtomicBatchCalls.selector;\r\n\r\n    // Make the atomic self-call - if any call fails, calls that preceded it\r\n    // will be rolled back and calls that follow it will not be made.\r\n    (bool externalOk, bytes memory rawCallResults) = address(this).call(\r\n      abi.encodeWithSelector(\r\n        this._executeAdvancedActionWithAtomicBatchCallsAtomic.selector, calls\r\n      )\r\n    );\r\n\r\n    // Ensure that self-call context has been cleared.\r\n    if (!externalOk) {\r\n      delete _selfCallContext;\r\n    }\r\n\r\n    // Parse data returned from self-call into each call result and store / log.\r\n    callResults = abi.decode(rawCallResults, (AdvancedCallReturn[]));\r\n    for (uint256 i = 0; i < callResults.length; i++) {\r\n      AdvancedCall memory currentCall = calls[i];\r\n\r\n      // Emit CallSuccess or CallFailure event based on the outcome of the call.\r\n      if (callResults[i].ok) {\r\n        // Note: while the call succeeded, the action may still have \"failed\".\r\n        emit CallSuccess(\r\n          actionID,\r\n          !externalOk, // If another call failed this will have been rolled back\r\n          nonce,\r\n          currentCall.to,\r\n          uint256(callResults[i].callValue),\r\n          callResults[i].callData,\r\n          callResults[i].returnData\r\n        );\r\n      } else {\r\n        // Note: while the call failed, the nonce will still be incremented,\r\n        // which will invalidate all supplied signatures.\r\n        emit CallFailure(\r\n          actionID,\r\n          nonce,\r\n          currentCall.to,\r\n          uint256(callResults[i].callValue),\r\n          callResults[i].callData,\r\n          _decodeRevertReason(callResults[i].returnData)\r\n        );\r\n\r\n        // exit early - any calls after the first failed call will not execute.\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Protected function that can only be called from\r\n   * `executeActionWithAtomicBatchCalls` on this contract. It will attempt to\r\n   * perform each specified call, populating the array of results as it goes,\r\n   * unless a failure occurs, at which point it will revert and \"return\" the\r\n   * array of results as revert data. Otherwise, it will simply return the array\r\n   * upon successful completion of each call. Finally, note that this function\r\n   * must currently be implemented as a public function (instead of as an\r\n   * external one) due to an ABIEncoderV2 `UnimplementedFeatureError`.\r\n   * @param calls AdvancedCall[] A struct containing the target, value, and\r\n   * calldata to provide when making each call, along with call index, data size\r\n   * and data offset of any returndata to insert into subsequent calls as value\r\n   * or calldata.\r\n   * @return An array of structs signifying the status of each call, as well as\r\n   * any data returned from that call. Calls that are not executed will return\r\n   * empty data. If any of the calls fail, the array will be returned as revert\r\n   * data.\r\n   */\r\n  function _executeAdvancedActionWithAtomicBatchCallsAtomic(\r\n    AdvancedCall[] memory calls\r\n  ) public returns (AdvancedCallReturn[] memory callResults) {\r\n    // Ensure caller is this contract and self-call context is correctly set.\r\n    _enforceSelfCallFrom(\r\n      this.executeAdvancedActionWithAtomicBatchCalls.selector\r\n    );\r\n\r\n    bool rollBack = false;\r\n    callResults = new AdvancedCallReturn[](calls.length);\r\n\r\n    for (uint256 i = 0; i < calls.length; i++) {\r\n      AdvancedCall memory a = calls[i];\r\n      uint256 callValue = uint256(a.value);\r\n      bytes memory callData = a.data;\r\n      uint256 callIndex;\r\n\r\n      // Perform low-level call and set return values using result.\r\n      (bool ok, bytes memory returnData) = a.to.call.value(callValue)(callData);\r\n      callResults[i] = AdvancedCallReturn({\r\n          ok: ok,\r\n          returnData: returnData,\r\n          callValue: uint96(callValue),\r\n          callData: callData\r\n      });\r\n      if (!ok) {\r\n        // Exit early - any calls after the first failed call will not execute.\r\n        rollBack = true;\r\n        break;\r\n      }\r\n\r\n      for (uint256 j = 0; j < a.replaceValue.length; j++) {\r\n        callIndex = uint256(a.replaceValue[j].callIndex);\r\n\r\n        // Note: this check could be performed prior to execution.\r\n        if (i >= callIndex) {\r\n          revert(_revertReason(36));\r\n        }\r\n\r\n        uint256 returnOffset = uint256(a.replaceValue[j].returnDataOffset);\r\n        uint256 valueLength = uint256(a.replaceValue[j].valueLength);\r\n\r\n        // Note: this check could be performed prior to execution.\r\n        if (valueLength == 0 || valueLength > 32) {\r\n          revert(\"bad valueLength\");\r\n        }\r\n\r\n        if (returnData.length < returnOffset + valueLength) {\r\n          revert(_revertReason(37));\r\n        }\r\n\r\n        AdvancedCall memory callTarget = calls[callIndex];\r\n        uint256 valueOffset = 32 - valueLength;\r\n        assembly {\r\n          returndatacopy(\r\n            add(add(callTarget, 32), valueOffset), returnOffset, valueLength\r\n          )\r\n        }\r\n      }\r\n\r\n      for (uint256 k = 0; k < a.replaceData.length; k++) {\r\n        callIndex = uint256(a.replaceData[k].callIndex);\r\n\r\n        // Note: this check could be performed prior to execution.\r\n        if (i >= callIndex) {\r\n          revert(_revertReason(38));\r\n        }\r\n\r\n        uint256 callOffset = uint256(a.replaceData[k].callDataOffset);\r\n        uint256 returnOffset = uint256(a.replaceData[k].returnDataOffset);\r\n        uint256 dataLength = uint256(a.replaceData[k].dataLength);\r\n\r\n        if (returnData.length < returnOffset + dataLength) {\r\n          revert(_revertReason(37));\r\n        }\r\n\r\n        bytes memory callTargetData = calls[callIndex].data;\r\n\r\n        // Note: this check could be performed prior to execution.\r\n        if (callTargetData.length < returnOffset + dataLength) {\r\n          revert(\"Calldata too short to insert returndata at supplied offset.\");\r\n        }\r\n\r\n        assembly {\r\n          returndatacopy(\r\n            add(callTargetData, add(32, callOffset)), returnOffset, dataLength\r\n          )\r\n        }\r\n      }\r\n    }\r\n\r\n    if (rollBack) {\r\n      // Wrap in length encoding and revert (provide bytes instead of a string).\r\n      bytes memory callResultsBytes = abi.encode(callResults);\r\n      assembly { revert(add(32, callResultsBytes), mload(callResultsBytes)) }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Simulate a series of generic calls to other contracts. Signatures\r\n   * are not required, but all calls will be rolled back (and calls will only be\r\n   * simulated up until a failing call is encountered).\r\n   * @param calls Call[] A struct containing the target, value, and calldata to\r\n   * provide when making each call.\r\n   * @return An array of structs signifying the status of each call, as well as\r\n   * any data returned from that call. Calls that are not executed will return\r\n   * empty data.\r\n   */\r\n  function simulateActionWithAtomicBatchCalls(\r\n    Call[] memory calls\r\n  ) public /* view */ returns (bool[] memory ok, bytes[] memory returnData) {\r\n    // Ensure that each `to` address is a contract and is not this contract.\r\n    for (uint256 i = 0; i < calls.length; i++) {\r\n      if (calls[i].value == 0) {\r\n        _ensureValidGenericCallTarget(calls[i].to);\r\n      }\r\n    }\r\n\r\n    // Specify length of returned values in order to work with them in memory.\r\n    ok = new bool[](calls.length);\r\n    returnData = new bytes[](calls.length);\r\n\r\n    // Set self-call context to call _simulateActionWithAtomicBatchCallsAtomic.\r\n    _selfCallContext = this.simulateActionWithAtomicBatchCalls.selector;\r\n\r\n    // Make the atomic self-call - if any call fails, calls that preceded it\r\n    // will be rolled back and calls that follow it will not be made.\r\n    (bool mustBeFalse, bytes memory rawCallResults) = address(this).call(\r\n      abi.encodeWithSelector(\r\n        this._simulateActionWithAtomicBatchCallsAtomic.selector, calls\r\n      )\r\n    );\r\n\r\n    // Note: this should never be the case, but check just to be extra safe.\r\n    if (mustBeFalse) {\r\n      revert(_revertReason(35));\r\n    }\r\n\r\n    // Ensure that self-call context has been cleared.\r\n    delete _selfCallContext;\r\n\r\n    // Parse data returned from self-call into each call result and store / log.\r\n    CallReturn[] memory callResults = abi.decode(rawCallResults, (CallReturn[]));\r\n    for (uint256 i = 0; i < callResults.length; i++) {\r\n      // Set the status and the return data / revert reason from the call.\r\n      ok[i] = callResults[i].ok;\r\n      returnData[i] = callResults[i].returnData;\r\n\r\n      if (!callResults[i].ok) {\r\n        // exit early - any calls after the first failed call will not execute.\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Protected function that can only be called from\r\n   * `simulateActionWithAtomicBatchCalls` on this contract. It will attempt to\r\n   * perform each specified call, populating the array of results as it goes,\r\n   * unless a failure occurs, at which point it will revert and \"return\" the\r\n   * array of results as revert data. Regardless, it will roll back all calls at\r\n   * the end of execution — in other words, this call always reverts.\r\n   * @param calls Call[] A struct containing the target, value, and calldata to\r\n   * provide when making each call.\r\n   * @return An array of structs signifying the status of each call, as well as\r\n   * any data returned from that call. Calls that are not executed will return\r\n   * empty data. If any of the calls fail, the array will be returned as revert\r\n   * data.\r\n   */\r\n  function _simulateActionWithAtomicBatchCallsAtomic(\r\n    Call[] memory calls\r\n  ) public returns (CallReturn[] memory callResults) {\r\n    // Ensure caller is this contract and self-call context is correctly set.\r\n    _enforceSelfCallFrom(this.simulateActionWithAtomicBatchCalls.selector);\r\n\r\n    callResults = new CallReturn[](calls.length);\r\n\r\n    for (uint256 i = 0; i < calls.length; i++) {\r\n      // Perform low-level call and set return values using result.\r\n      (bool ok, bytes memory returnData) = calls[i].to.call.value(\r\n        uint256(calls[i].value)\r\n      )(calls[i].data);\r\n      callResults[i] = CallReturn({ok: ok, returnData: returnData});\r\n      if (!ok) {\r\n        // Exit early - any calls after the first failed call will not execute.\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Wrap in length encoding and revert (provide bytes instead of a string).\r\n    bytes memory callResultsBytes = abi.encode(callResults);\r\n    assembly { revert(add(32, callResultsBytes), mload(callResultsBytes)) }\r\n  }\r\n\r\n  function simulateAdvancedActionWithAtomicBatchCalls(\r\n    AdvancedCall[] memory calls\r\n  ) public /* view */ returns (AdvancedCallReturn[] memory callResults) {\r\n    // Ensure that each `to` address is a contract and is not this contract.\r\n    for (uint256 i = 0; i < calls.length; i++) {\r\n      if (calls[i].value == 0) {\r\n        _ensureValidGenericCallTarget(calls[i].to);\r\n      }\r\n    }\r\n\r\n    // Specify length of returned values in order to work with them in memory.\r\n    callResults = new AdvancedCallReturn[](calls.length);\r\n\r\n    // Set self-call context to call _simulateActionWithAtomicBatchCallsAtomic.\r\n    _selfCallContext = this.simulateAdvancedActionWithAtomicBatchCalls.selector;\r\n\r\n    // Make the atomic self-call - if any call fails, calls that preceded it\r\n    // will be rolled back and calls that follow it will not be made.\r\n    (bool mustBeFalse, bytes memory rawCallResults) = address(this).call(\r\n      abi.encodeWithSelector(\r\n        this._simulateAdvancedActionWithAtomicBatchCallsAtomic.selector, calls\r\n      )\r\n    );\r\n\r\n    // Note: this should never be the case, but check just to be extra safe.\r\n    if (mustBeFalse) {\r\n      revert(_revertReason(35));\r\n    }\r\n\r\n    // Ensure that self-call context has been cleared.\r\n    delete _selfCallContext;\r\n\r\n    // Parse data returned from self-call into each call result and return.\r\n    callResults = abi.decode(rawCallResults, (AdvancedCallReturn[]));\r\n  }\r\n\r\n  function _simulateAdvancedActionWithAtomicBatchCallsAtomic(\r\n    AdvancedCall[] memory calls\r\n  ) public returns (AdvancedCallReturn[] memory callResults) {\r\n    // Ensure caller is this contract and self-call context is correctly set.\r\n    _enforceSelfCallFrom(this.simulateAdvancedActionWithAtomicBatchCalls.selector);\r\n\r\n    callResults = new AdvancedCallReturn[](calls.length);\r\n\r\n    for (uint256 i = 0; i < calls.length; i++) {\r\n      AdvancedCall memory a = calls[i];\r\n      uint256 callValue = uint256(a.value);\r\n      bytes memory callData = a.data;\r\n      uint256 callIndex;\r\n\r\n      // Perform low-level call and set return values using result.\r\n      (bool ok, bytes memory returnData) = a.to.call.value(callValue)(callData);\r\n      callResults[i] = AdvancedCallReturn({\r\n          ok: ok,\r\n          returnData: returnData,\r\n          callValue: uint96(callValue),\r\n          callData: callData\r\n      });\r\n      if (!ok) {\r\n        // Exit early - any calls after the first failed call will not execute.\r\n        break;\r\n      }\r\n\r\n      for (uint256 j = 0; j < a.replaceValue.length; j++) {\r\n        callIndex = uint256(a.replaceValue[j].callIndex);\r\n\r\n        // Note: this check could be performed prior to execution.\r\n        if (i >= callIndex) {\r\n          revert(_revertReason(36));\r\n        }\r\n\r\n        uint256 returnOffset = uint256(a.replaceValue[j].returnDataOffset);\r\n        uint256 valueLength = uint256(a.replaceValue[j].valueLength);\r\n\r\n        // Note: this check could be performed prior to execution.\r\n        if (valueLength == 0 || valueLength > 32) {\r\n          revert(\"bad valueLength\");\r\n        }\r\n\r\n        if (returnData.length < returnOffset + valueLength) {\r\n          revert(_revertReason(37));\r\n        }\r\n\r\n        AdvancedCall memory callTarget = calls[callIndex];\r\n        uint256 valueOffset = 32 - valueLength;\r\n        assembly {\r\n          returndatacopy(\r\n            add(add(callTarget, 32), valueOffset), returnOffset, valueLength\r\n          )\r\n        }\r\n      }\r\n\r\n      for (uint256 k = 0; k < a.replaceData.length; k++) {\r\n        callIndex = uint256(a.replaceData[k].callIndex);\r\n\r\n        // Note: this check could be performed prior to execution.\r\n        if (i >= callIndex) {\r\n          revert(_revertReason(38));\r\n        }\r\n\r\n        uint256 callOffset = uint256(a.replaceData[k].callDataOffset);\r\n        uint256 returnOffset = uint256(a.replaceData[k].returnDataOffset);\r\n        uint256 dataLength = uint256(a.replaceData[k].dataLength);\r\n\r\n        if (returnData.length < returnOffset + dataLength) {\r\n          revert(_revertReason(37));\r\n        }\r\n\r\n        bytes memory callTargetData = calls[callIndex].data;\r\n\r\n        // Note: this check could be performed prior to execution.\r\n        if (callTargetData.length < returnOffset + dataLength) {\r\n          revert(\"Calldata too short to insert returndata at supplied offset.\");\r\n        }\r\n\r\n        assembly {\r\n          returndatacopy(\r\n            add(callTargetData, add(32, callOffset)), returnOffset, dataLength\r\n          )\r\n        }\r\n      }\r\n    }\r\n\r\n    // Wrap in length encoding and revert (provide bytes instead of a string).\r\n    bytes memory callResultsBytes = abi.encode(callResults);\r\n    assembly { revert(add(32, callResultsBytes), mload(callResultsBytes)) }\r\n  }\r\n\r\n  /**\r\n   * @notice View function that, given an action type and arguments, will return\r\n   * the action ID or message hash that will need to be prefixed (according to\r\n   * EIP-191 0x45), hashed, and signed by both the user signing key and by the\r\n   * key returned for this smart wallet by the Dharma Key Registry in order to\r\n   * construct a valid signature for a given generic atomic batch action. The\r\n   * current nonce will be used, which means that it will only be valid for the\r\n   * next action taken. Finally, note that this function must currently be\r\n   * implemented as a public function (instead of as an external one) due to an\r\n   * ABIEncoderV2 `UnimplementedFeatureError`.\r\n   * @param calls Call[] A struct containing the target and calldata to provide\r\n   * when making each call.\r\n   * @param calls Call[] A struct containing the target and calldata to provide\r\n   * when making each call.\r\n   * @param minimumActionGas uint256 The minimum amount of gas that must be\r\n   * provided to this call - be aware that additional gas must still be included\r\n   * to account for the cost of overhead incurred up until the start of this\r\n   * function call.\r\n   * @return The action ID, which will need to be prefixed, hashed and signed in\r\n   * order to construct a valid signature.\r\n   */\r\n  function getNextGenericAtomicBatchActionID(\r\n    Call[] memory calls,\r\n    uint256 minimumActionGas\r\n  ) public view returns (bytes32 actionID) {\r\n    // Determine the actionID - this serves as a signature hash for an action.\r\n    actionID = _getActionID(\r\n      ActionType.GenericAtomicBatch,\r\n      abi.encode(calls),\r\n      _nonce,\r\n      minimumActionGas,\r\n      _userSigningKey,\r\n      _getDharmaSigningKey()\r\n    );\r\n  }\r\n\r\n  function getNextAdvancedGenericAtomicBatchActionID(\r\n    AdvancedCall[] memory calls,\r\n    uint256 minimumActionGas\r\n  ) public view returns (bytes32 actionID) {\r\n    // Determine the actionID - this serves as a signature hash for an action.\r\n    actionID = _getActionID(\r\n      ActionType.AdvancedGenericAtomicBatch,\r\n      abi.encode(calls),\r\n      _nonce,\r\n      minimumActionGas,\r\n      _userSigningKey,\r\n      _getDharmaSigningKey()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice View function that, given an action type and arguments, will return\r\n   * the action ID or message hash that will need to be prefixed (according to\r\n   * EIP-191 0x45), hashed, and signed by both the user signing key and by the\r\n   * key returned for this smart wallet by the Dharma Key Registry in order to\r\n   * construct a valid signature for a given generic atomic batch action. Any\r\n   * nonce value may be supplied, which enables constructing valid message\r\n   * hashes for multiple future actions ahead of time. Finally, note that this\r\n   * function must currently be implemented as a public function (instead of as\r\n   * an external one) due to an ABIEncoderV2 `UnimplementedFeatureError`.\r\n   * @param calls Call[] A struct containing the target and calldata to provide\r\n   * when making each call.\r\n   * @param calls Call[] A struct containing the target and calldata to provide\r\n   * when making each call.\r\n   * @param nonce uint256 The nonce to use.\r\n   * @param minimumActionGas uint256 The minimum amount of gas that must be\r\n   * provided to this call - be aware that additional gas must still be included\r\n   * to account for the cost of overhead incurred up until the start of this\r\n   * function call.\r\n   * @return The action ID, which will need to be prefixed, hashed and signed in\r\n   * order to construct a valid signature.\r\n   */\r\n  function getGenericAtomicBatchActionID(\r\n    Call[] memory calls,\r\n    uint256 nonce,\r\n    uint256 minimumActionGas\r\n  ) public view returns (bytes32 actionID) {\r\n    // Determine the actionID - this serves as a signature hash for an action.\r\n    actionID = _getActionID(\r\n      ActionType.GenericAtomicBatch,\r\n      abi.encode(calls),\r\n      nonce,\r\n      minimumActionGas,\r\n      _userSigningKey,\r\n      _getDharmaSigningKey()\r\n    );\r\n  }\r\n\r\n  function getAdvancedGenericAtomicBatchActionID(\r\n    AdvancedCall[] memory calls,\r\n    uint256 nonce,\r\n    uint256 minimumActionGas\r\n  ) public view returns (bytes32 actionID) {\r\n    // Determine the actionID - this serves as a signature hash for an action.\r\n    actionID = _getActionID(\r\n      ActionType.AdvancedGenericAtomicBatch,\r\n      abi.encode(calls),\r\n      nonce,\r\n      minimumActionGas,\r\n      _userSigningKey,\r\n      _getDharmaSigningKey()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function for setting a new user signing key. Called by the\r\n   * initializer, by the `setUserSigningKey` function, and by the `recover`\r\n   * function. A `NewUserSigningKey` event will also be emitted.\r\n   * @param userSigningKey address The new user signing key to set on this smart\r\n   * wallet.\r\n   */\r\n  function _setUserSigningKey(address userSigningKey) internal {\r\n    // Ensure that a user signing key is set on this smart wallet.\r\n    if (userSigningKey == address(0)) {\r\n      revert(_revertReason(14));\r\n    }\r\n\r\n    _userSigningKey = userSigningKey;\r\n    emit NewUserSigningKey(userSigningKey);\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function for withdrawing the total underlying asset\r\n   * balance from the corresponding dToken. Note that the requested balance may\r\n   * not be currently available on Compound, which will cause the withdrawal to\r\n   * fail.\r\n   * @param asset uint256 The asset's ID, either Dai (0) or USDC (1).\r\n   */\r\n  function _withdrawMaxFromDharmaToken(AssetType asset) internal {\r\n    // Get dToken address for the asset type. (No custom ETH withdrawal action.)\r\n    address dToken = asset == AssetType.DAI ? address(_DDAI) : address(_DUSDC);\r\n\r\n    // Try to retrieve the current dToken balance for this account.\r\n    ERC20Interface dTokenBalance;\r\n    (bool ok, bytes memory data) = dToken.call(abi.encodeWithSelector(\r\n      dTokenBalance.balanceOf.selector, address(this)\r\n    ));\r\n\r\n    uint256 redeemAmount = 0;\r\n    if (ok && data.length == 32) {\r\n      redeemAmount = abi.decode(data, (uint256));\r\n    } else {\r\n      // Something went wrong with the balance check - log an ExternalError.\r\n      _checkDharmaTokenInteractionAndLogAnyErrors(\r\n        asset, dTokenBalance.balanceOf.selector, ok, data\r\n      );\r\n    }\r\n\r\n    // Only perform the call to redeem if there is a non-zero balance.\r\n    if (redeemAmount > 0) {\r\n      // Attempt to redeem the underlying balance from the dToken contract.\r\n      (ok, data) = dToken.call(abi.encodeWithSelector(\r\n        // Function selector is the same for all dTokens, so just use dDai's.\r\n        _DDAI.redeem.selector, redeemAmount\r\n      ));\r\n\r\n      // Log an external error if something went wrong with the attempt.\r\n      _checkDharmaTokenInteractionAndLogAnyErrors(\r\n        asset, _DDAI.redeem.selector, ok, data\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function for transferring the total underlying balance of\r\n   * the corresponding token to a designated recipient. It will return true if\r\n   * tokens were successfully transferred (or there is no balance), signified by\r\n   * the boolean returned by the transfer function, or the call status if the\r\n   * `suppressRevert` boolean is set to true.\r\n   * @param token IERC20 The interface of the token in question.\r\n   * @param recipient address The account that will receive the tokens.\r\n   * @param suppressRevert bool A boolean indicating whether reverts should be\r\n   * suppressed or not. Used by the escape hatch so that a problematic transfer\r\n   * will not block the rest of the call from executing.\r\n   * @return True if tokens were successfully transferred or if there is no\r\n   * balance, else false.\r\n   */\r\n  function _transferMax(\r\n    ERC20Interface token, address recipient, bool suppressRevert\r\n  ) internal returns (bool success) {\r\n    // Get the current balance on the smart wallet for the supplied ERC20 token.\r\n    uint256 balance = 0;\r\n    bool balanceCheckWorked = true;\r\n    if (!suppressRevert) {\r\n      balance = token.balanceOf(address(this));\r\n    } else {\r\n      // Try to retrieve current token balance for this account with 1/2 gas.\r\n      (bool ok, bytes memory data) = address(token).call.gas(gasleft() / 2)(\r\n        abi.encodeWithSelector(token.balanceOf.selector, address(this))\r\n      );\r\n\r\n      if (ok && data.length >= 32) {\r\n        balance = abi.decode(data, (uint256));\r\n      } else {\r\n        // Something went wrong with the balance check.\r\n        balanceCheckWorked = false;\r\n      }\r\n    }\r\n\r\n    // Only perform the call to transfer if there is a non-zero balance.\r\n    if (balance > 0) {\r\n      if (!suppressRevert) {\r\n        // Perform the transfer and pass along the returned boolean (or revert).\r\n        success = token.transfer(recipient, balance);\r\n      } else {\r\n        // Attempt transfer with 1/2 gas, allow reverts, and return call status.\r\n        (success, ) = address(token).call.gas(gasleft() / 2)(\r\n          abi.encodeWithSelector(token.transfer.selector, recipient, balance)\r\n        );\r\n      }\r\n    } else {\r\n      // Skip the transfer and return true as long as the balance check worked.\r\n      success = balanceCheckWorked;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function for transferring Ether to a designated recipient.\r\n   * It will return true and emit an `EthWithdrawal` event if Ether was\r\n   * successfully transferred - otherwise, it will return false and emit an\r\n   * `ExternalError` event.\r\n   * @param recipient address payable The account that will receive the Ether.\r\n   * @param amount uint256 The amount of Ether to transfer.\r\n   * @return True if Ether was successfully transferred, else false.\r\n   */\r\n  function _transferETH(\r\n    address payable recipient, uint256 amount\r\n  ) internal returns (bool success) {\r\n    // Attempt to transfer any Ether to caller and emit an event if it fails.\r\n    (success, ) = recipient.call.gas(_ETH_TRANSFER_GAS).value(amount)(\"\");\r\n    if (!success) {\r\n      emit ExternalError(recipient, _revertReason(18));\r\n    } else {\r\n      emit EthWithdrawal(amount, recipient);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function for validating supplied gas (if specified),\r\n   * retrieving the signer's public key from the Dharma Key Registry, deriving\r\n   * the action ID, validating the provided caller and/or signatures using that\r\n   * action ID, and incrementing the nonce. This function serves as the\r\n   * entrypoint for all protected \"actions\" on the smart wallet, and is the only\r\n   * area where these functions should revert (other than due to out-of-gas\r\n   * errors, which can be guarded against by supplying a minimum action gas\r\n   * requirement).\r\n   * @param action uint8 The type of action, designated by it's index. Valid\r\n   * actions include Cancel (0), SetUserSigningKey (1), Generic (2),\r\n   * GenericAtomicBatch (3), DAIWithdrawal (10), USDCWithdrawal (5),\r\n   * ETHWithdrawal (6), SetEscapeHatch (7), RemoveEscapeHatch (8), and\r\n   * DisableEscapeHatch (9).\r\n   * @param arguments bytes ABI-encoded arguments for the action.\r\n   * @param minimumActionGas uint256 The minimum amount of gas that must be\r\n   * provided to this call - be aware that additional gas must still be included\r\n   * to account for the cost of overhead incurred up until the start of this\r\n   * function call.\r\n   * @param userSignature bytes A signature that resolves to the public key\r\n   * set for this account in storage slot zero, `_userSigningKey`. If the user\r\n   * signing key is not a contract, ecrecover will be used; otherwise, ERC1271\r\n   * will be used. A unique hash returned from `getCustomActionID` is prefixed\r\n   * and hashed to create the message hash for the signature.\r\n   * @param dharmaSignature bytes A signature that resolves to the public key\r\n   * returned for this account from the Dharma Key Registry. A unique hash\r\n   * returned from `getCustomActionID` is prefixed and hashed to create the\r\n   * signed message.\r\n   * @return The nonce of the current action (prior to incrementing it).\r\n   */\r\n  function _validateActionAndIncrementNonce(\r\n    ActionType action,\r\n    bytes memory arguments,\r\n    uint256 minimumActionGas,\r\n    bytes memory userSignature,\r\n    bytes memory dharmaSignature\r\n  ) internal returns (bytes32 actionID, uint256 actionNonce) {\r\n    // Ensure that the current gas exceeds the minimum required action gas.\r\n    // This prevents griefing attacks where an attacker can invalidate a\r\n    // signature without providing enough gas for the action to succeed. Also\r\n    // note that some gas will be spent before this check is reached - supplying\r\n    // ~30,000 additional gas should suffice when submitting transactions. To\r\n    // skip this requirement, supply zero for the minimumActionGas argument.\r\n    if (minimumActionGas != 0) {\r\n      if (gasleft() < minimumActionGas) {\r\n        revert(_revertReason(19));\r\n      }\r\n    }\r\n\r\n    // Get the current nonce for the action to be performed.\r\n    actionNonce = _nonce;\r\n\r\n    // Get the user signing key that will be used to verify their signature.\r\n    address userSigningKey = _userSigningKey;\r\n\r\n    // Get the Dharma signing key that will be used to verify their signature.\r\n    address dharmaSigningKey = _getDharmaSigningKey();\r\n\r\n    // Determine the actionID - this serves as the signature hash.\r\n    actionID = _getActionID(\r\n      action,\r\n      arguments,\r\n      actionNonce,\r\n      minimumActionGas,\r\n      userSigningKey,\r\n      dharmaSigningKey\r\n    );\r\n\r\n    // Compute the message hash - the hashed, EIP-191-0x45-prefixed action ID.\r\n    bytes32 messageHash = actionID.toEthSignedMessageHash();\r\n\r\n    // Actions other than Cancel require both signatures; Cancel only needs one.\r\n    if (action != ActionType.Cancel) {\r\n      // Validate user signing key signature unless it is `msg.sender`.\r\n      if (msg.sender != userSigningKey) {\r\n        if (\r\n          !_validateUserSignature(\r\n            messageHash, action, arguments, userSigningKey, userSignature\r\n          )\r\n        ) {\r\n          revert(_revertReason(20));\r\n        }\r\n      }\r\n\r\n      // Validate Dharma signing key signature unless it is `msg.sender`.\r\n      if (msg.sender != dharmaSigningKey) {\r\n        if (dharmaSigningKey != messageHash.recover(dharmaSignature)) {\r\n          revert(_revertReason(21));\r\n        }\r\n      }\r\n    } else {\r\n      // Validate signing key signature unless user or Dharma is `msg.sender`.\r\n      if (msg.sender != userSigningKey && msg.sender != dharmaSigningKey) {\r\n        if (\r\n          dharmaSigningKey != messageHash.recover(dharmaSignature) &&\r\n          !_validateUserSignature(\r\n            messageHash, action, arguments, userSigningKey, userSignature\r\n          )\r\n        ) {\r\n          revert(_revertReason(22));\r\n        }\r\n      }\r\n    }\r\n\r\n    // Increment nonce in order to prevent reuse of signatures after the call.\r\n    _nonce++;\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function to determine whether a call to a given dToken\r\n   * succeeded, and to emit a relevant ExternalError event if it failed.\r\n   * @param asset uint256 The ID of the asset, either Dai (0) or USDC (1).\r\n   * @param functionSelector bytes4 The function selector that was called on the\r\n   * corresponding dToken of the asset type.\r\n   * @param ok bool A boolean representing whether the call returned or\r\n   * reverted.\r\n   * @param data bytes The data provided by the returned or reverted call.\r\n   * @return True if the interaction was successful, otherwise false. This will\r\n   * be used to determine if subsequent steps in the action should be attempted\r\n   * or not, specifically a transfer following a withdrawal.\r\n   */\r\n  function _checkDharmaTokenInteractionAndLogAnyErrors(\r\n    AssetType asset,\r\n    bytes4 functionSelector,\r\n    bool ok,\r\n    bytes memory data\r\n  ) internal returns (bool success) {\r\n    // Log an external error if something went wrong with the attempt.\r\n    if (ok) {\r\n      if (data.length == 32) {\r\n        uint256 amount = abi.decode(data, (uint256));\r\n        if (amount > 0) {\r\n          success = true;\r\n        } else {\r\n          // Get called contract address, name of contract, and function name.\r\n          (address account, string memory name, string memory functionName) = (\r\n            _getDharmaTokenDetails(asset, functionSelector)\r\n          );\r\n\r\n          emit ExternalError(\r\n            account,\r\n            string(\r\n              abi.encodePacked(\r\n                name,\r\n                \" gave no tokens calling \",\r\n                functionName,\r\n                \".\"\r\n              )\r\n            )\r\n          );\r\n        }\r\n      } else {\r\n        // Get called contract address, name of contract, and function name.\r\n        (address account, string memory name, string memory functionName) = (\r\n          _getDharmaTokenDetails(asset, functionSelector)\r\n        );\r\n\r\n        emit ExternalError(\r\n          account,\r\n          string(\r\n            abi.encodePacked(\r\n              name,\r\n              \" gave bad data calling \",\r\n              functionName,\r\n              \".\"\r\n            )\r\n          )\r\n        );\r\n      }\r\n\r\n    } else {\r\n      // Get called contract address, name of contract, and function name.\r\n      (address account, string memory name, string memory functionName) = (\r\n        _getDharmaTokenDetails(asset, functionSelector)\r\n      );\r\n\r\n      // Decode the revert reason in the event one was returned.\r\n      string memory revertReason = _decodeRevertReason(data);\r\n\r\n      emit ExternalError(\r\n        account,\r\n        string(\r\n          abi.encodePacked(\r\n            name,\r\n            \" reverted calling \",\r\n            functionName,\r\n            \": \",\r\n            revertReason\r\n          )\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function to ensure that protected functions can only be\r\n   * called from this contract and that they have the appropriate context set.\r\n   * The self-call context is then cleared. It is used as an additional guard\r\n   * against reentrancy, especially once generic actions are supported by the\r\n   * smart wallet in future versions.\r\n   * @param selfCallContext bytes4 The expected self-call context, equal to the\r\n   * function selector of the approved calling function.\r\n   */\r\n  function _enforceSelfCallFrom(bytes4 selfCallContext) internal {\r\n    // Ensure caller is this contract and self-call context is correctly set.\r\n    if (msg.sender != address(this) || _selfCallContext != selfCallContext) {\r\n      revert(_revertReason(25));\r\n    }\r\n\r\n    // Clear the self-call context.\r\n    delete _selfCallContext;\r\n  }\r\n\r\n  /**\r\n   * @notice Internal view function for validating a user's signature. If the\r\n   * user's signing key does not have contract code, it will be validated via\r\n   * ecrecover; otherwise, it will be validated using ERC-1271, passing the\r\n   * message hash that was signed, the action type, and the arguments as data.\r\n   * @param messageHash bytes32 The message hash that is signed by the user. It\r\n   * is derived by prefixing (according to EIP-191 0x45) and hashing an actionID\r\n   * returned from `getCustomActionID`.\r\n   * @param action uint8 The type of action, designated by it's index. Valid\r\n   * actions include Cancel (0), SetUserSigningKey (1), Generic (2),\r\n   * GenericAtomicBatch (3), DAIWithdrawal (10), USDCWithdrawal (5),\r\n   * ETHWithdrawal (6), SetEscapeHatch (7), RemoveEscapeHatch (8), and\r\n   * DisableEscapeHatch (9).\r\n   * @param arguments bytes ABI-encoded arguments for the action.\r\n   * @param userSignature bytes A signature that resolves to the public key\r\n   * set for this account in storage slot zero, `_userSigningKey`. If the user\r\n   * signing key is not a contract, ecrecover will be used; otherwise, ERC1271\r\n   * will be used.\r\n   * @return A boolean representing the validity of the supplied user signature.\r\n   */\r\n  function _validateUserSignature(\r\n    bytes32 messageHash,\r\n    ActionType action,\r\n    bytes memory arguments,\r\n    address userSigningKey,\r\n    bytes memory userSignature\r\n  ) internal view returns (bool valid) {\r\n    if (!userSigningKey.isContract()) {\r\n      valid = userSigningKey == messageHash.recover(userSignature);\r\n    } else {\r\n      bytes memory data = abi.encode(messageHash, action, arguments);\r\n      bytes4 magicValue = ERC1271Interface(userSigningKey).isValidSignature(\r\n        data, userSignature\r\n      );\r\n      valid = (\r\n        magicValue == _ERC_1271_LEGACY_MAGIC_VALUE ||\r\n        magicValue == _ERC_1271_MAGIC_VALUE\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Internal view function to get the Dharma signing key for the smart\r\n   * wallet from the Dharma Key Registry. This key can be set for each specific\r\n   * smart wallet - if none has been set, a global fallback key will be used.\r\n   * @return The address of the Dharma signing key, or public key corresponding\r\n   * to the secondary signer.\r\n   */\r\n  function _getDharmaSigningKey() internal view returns (\r\n    address dharmaSigningKey\r\n  ) {\r\n    dharmaSigningKey = _DHARMA_KEY_REGISTRY.getKey();\r\n  }\r\n\r\n  /**\r\n   * @notice Internal view function that, given an action type and arguments,\r\n   * will return the action ID or message hash that will need to be prefixed\r\n   * (according to EIP-191 0x45), hashed, and signed by the key designated by\r\n   * the Dharma Key Registry in order to construct a valid signature for the\r\n   * corresponding action. The current nonce will be supplied to this function\r\n   * when reconstructing an action ID during protected function execution based\r\n   * on the supplied parameters.\r\n   * @param action uint8 The type of action, designated by it's index. Valid\r\n   * actions include Cancel (0), SetUserSigningKey (1), Generic (2),\r\n   * GenericAtomicBatch (3), DAIWithdrawal (10), USDCWithdrawal (5),\r\n   * ETHWithdrawal (6), SetEscapeHatch (7), RemoveEscapeHatch (8), and\r\n   * DisableEscapeHatch (9).\r\n   * @param arguments bytes ABI-encoded arguments for the action.\r\n   * @param nonce uint256 The nonce to use.\r\n   * @param minimumActionGas uint256 The minimum amount of gas that must be\r\n   * provided to this call - be aware that additional gas must still be included\r\n   * to account for the cost of overhead incurred up until the start of this\r\n   * function call.\r\n   * @param dharmaSigningKey address The address of the secondary key, or public\r\n   * key corresponding to the secondary signer.\r\n   * @return The action ID, which will need to be prefixed, hashed and signed in\r\n   * order to construct a valid signature.\r\n   */\r\n  function _getActionID(\r\n    ActionType action,\r\n    bytes memory arguments,\r\n    uint256 nonce,\r\n    uint256 minimumActionGas,\r\n    address userSigningKey,\r\n    address dharmaSigningKey\r\n  ) internal view returns (bytes32 actionID) {\r\n    // actionID is constructed according to EIP-191-0x45 to prevent replays.\r\n    actionID = keccak256(\r\n      abi.encodePacked(\r\n        address(this),\r\n        _DHARMA_SMART_WALLET_VERSION,\r\n        userSigningKey,\r\n        dharmaSigningKey,\r\n        nonce,\r\n        minimumActionGas,\r\n        action,\r\n        arguments\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Internal pure function to get the dToken address, it's name, and\r\n   * the name of the called function, based on a supplied asset type and\r\n   * function selector. It is used to help construct ExternalError events.\r\n   * @param asset uint256 The ID of the asset, either Dai (0) or USDC (1).\r\n   * @param functionSelector bytes4 The function selector that was called on the\r\n   * corresponding dToken of the asset type.\r\n   * @return The dToken address, it's name, and the name of the called function.\r\n   */\r\n  function _getDharmaTokenDetails(\r\n    AssetType asset,\r\n    bytes4 functionSelector\r\n  ) internal pure returns (\r\n    address account,\r\n    string memory name,\r\n    string memory functionName\r\n  ) {\r\n    if (asset == AssetType.DAI) {\r\n      account = address(_DDAI);\r\n      name = \"Dharma Dai\";\r\n    } else {\r\n      account = address(_DUSDC);\r\n      name = \"Dharma USD Coin\";\r\n    }\r\n\r\n    // Note: since both dTokens have the same interface, just use dDai's.\r\n    if (functionSelector == _DDAI.mint.selector) {\r\n      functionName = \"mint\";\r\n    } else {\r\n      if (functionSelector == ERC20Interface(account).balanceOf.selector) {\r\n        functionName = \"balanceOf\";\r\n      } else {\r\n        functionName = string(abi.encodePacked(\r\n          \"redeem\",\r\n          functionSelector == _DDAI.redeem.selector ? \"\" : \"Underlying\"\r\n        ));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Internal view function to ensure that a given `to` address provided\r\n   * as part of a generic action is valid. Calls cannot be performed to accounts\r\n   * without code or back into the smart wallet itself. Additionally, generic\r\n   * calls cannot supply the address of the Dharma Escape Hatch registry - the\r\n   * specific, designated functions must be used in order to make calls into it.\r\n   * @param to address The address that will be targeted by the generic call.\r\n   */\r\n  function _ensureValidGenericCallTarget(address to) internal view {\r\n    if (!to.isContract()) {\r\n      revert(_revertReason(26));\r\n    }\r\n\r\n    if (to == address(this)) {\r\n      revert(_revertReason(27));\r\n    }\r\n\r\n    if (to == address(_ESCAPE_HATCH_REGISTRY)) {\r\n      revert(_revertReason(28));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Internal pure function to ensure that a given action type is a\r\n   * \"custom\" action type (i.e. is not a generic action type) and to construct\r\n   * the \"arguments\" input to an actionID based on that action type.\r\n   * @param action uint8 The type of action, designated by it's index. Valid\r\n   * custom actions include Cancel (0), SetUserSigningKey (1),\r\n   * DAIWithdrawal (10), USDCWithdrawal (5), ETHWithdrawal (6),\r\n   * SetEscapeHatch (7), RemoveEscapeHatch (8), and DisableEscapeHatch (9).\r\n   * @param amount uint256 The amount to withdraw for Withdrawal actions. This\r\n   * value is ignored for all non-withdrawal action types.\r\n   * @param recipient address The account to transfer withdrawn funds to or the\r\n   * new user signing key. This value is ignored for Cancel, RemoveEscapeHatch,\r\n   * and DisableEscapeHatch action types.\r\n   * @return A bytes array containing the arguments that will be provided as\r\n   * a component of the inputs when constructing a custom action ID.\r\n   */\r\n  function _validateCustomActionTypeAndGetArguments(\r\n    ActionType action, uint256 amount, address recipient\r\n  ) internal pure returns (bytes memory arguments) {\r\n    // Ensure that the action type is a valid custom action type.\r\n    bool validActionType = (\r\n      action == ActionType.Cancel ||\r\n      action == ActionType.SetUserSigningKey ||\r\n      action == ActionType.DAIWithdrawal ||\r\n      action == ActionType.USDCWithdrawal ||\r\n      action == ActionType.ETHWithdrawal ||\r\n      action == ActionType.SetEscapeHatch ||\r\n      action == ActionType.RemoveEscapeHatch ||\r\n      action == ActionType.DisableEscapeHatch\r\n    );\r\n    if (!validActionType) {\r\n      revert(_revertReason(29));\r\n    }\r\n\r\n    // Use action type to determine parameters to include in returned arguments.\r\n    if (\r\n      action == ActionType.Cancel ||\r\n      action == ActionType.RemoveEscapeHatch ||\r\n      action == ActionType.DisableEscapeHatch\r\n    ) {\r\n      // Ignore parameters for Cancel, RemoveEscapeHatch, or DisableEscapeHatch.\r\n      arguments = abi.encode();\r\n    } else if (\r\n      action == ActionType.SetUserSigningKey ||\r\n      action == ActionType.SetEscapeHatch\r\n    ) {\r\n      // Ignore `amount` parameter for other, non-withdrawal actions.\r\n      arguments = abi.encode(recipient);\r\n    } else {\r\n      // Use both `amount` and `recipient` parameters for withdrawals.\r\n      arguments = abi.encode(amount, recipient);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Internal pure function to decode revert reasons. The revert reason\r\n   * prefix is removed and the remaining string argument is decoded.\r\n   * @param revertData bytes The raw data supplied alongside the revert.\r\n   * @return The decoded revert reason string.\r\n   */\r\n  function _decodeRevertReason(\r\n    bytes memory revertData\r\n  ) internal pure returns (string memory revertReason) {\r\n    // Solidity prefixes revert reason with 0x08c379a0 -> Error(string) selector\r\n    if (\r\n      revertData.length > 68 && // prefix (4) + position (32) + length (32)\r\n      revertData[0] == byte(0x08) &&\r\n      revertData[1] == byte(0xc3) &&\r\n      revertData[2] == byte(0x79) &&\r\n      revertData[3] == byte(0xa0)\r\n    ) {\r\n      // Get the revert reason without the prefix from the revert data.\r\n      bytes memory revertReasonBytes = new bytes(revertData.length - 4);\r\n      for (uint256 i = 4; i < revertData.length; i++) {\r\n        revertReasonBytes[i - 4] = revertData[i];\r\n      }\r\n\r\n      // Decode the resultant revert reason as a string.\r\n      revertReason = abi.decode(revertReasonBytes, (string));\r\n    } else {\r\n      // Simply return the default, with no revert reason.\r\n      revertReason = _revertReason(uint256(-1));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Internal pure function call the revert reason helper contract,\r\n   * supplying a revert \"code\" and receiving back a revert reason string.\r\n   * @param code uint256 The code for the revert reason.\r\n   * @return The revert reason string.\r\n   */\r\n  function _revertReason(\r\n    uint256 code\r\n  ) internal pure returns (string memory reason) {\r\n    reason = _REVERT_REASON_HELPER.reason(code);\r\n  }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"actionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"revertReason\",\"type\":\"string\"}],\"name\":\"CallFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"actionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"rolledBack\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"CallSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cancelledNonce\",\"type\":\"uint256\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Escaped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"EthWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"revertReason\",\"type\":\"string\"}],\"name\":\"ExternalError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userSigningKey\",\"type\":\"address\"}],\"name\":\"NewUserSigningKey\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct DharmaSmartWalletImplementationV15Interface.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"_executeActionWithAtomicBatchCallsAtomic\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct DharmaSmartWalletImplementationV15Interface.CallReturn[]\",\"name\":\"callResults\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"returnDataOffset\",\"type\":\"uint24\"},{\"internalType\":\"uint8\",\"name\":\"valueLength\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"callIndex\",\"type\":\"uint16\"}],\"internalType\":\"struct DharmaSmartWalletImplementationV15Interface.ValueReplacement[]\",\"name\":\"replaceValue\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"returnDataOffset\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"dataLength\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"callIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint24\",\"name\":\"callDataOffset\",\"type\":\"uint24\"}],\"internalType\":\"struct DharmaSmartWalletImplementationV15Interface.DataReplacement[]\",\"name\":\"replaceData\",\"type\":\"tuple[]\"}],\"internalType\":\"struct DharmaSmartWalletImplementationV15Interface.AdvancedCall[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"_executeAdvancedActionWithAtomicBatchCallsAtomic\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"},{\"internalType\":\"uint96\",\"name\":\"callValue\",\"type\":\"uint96\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct DharmaSmartWalletImplementationV15Interface.AdvancedCallReturn[]\",\"name\":\"callResults\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct DharmaSmartWalletImplementationV15Interface.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"_simulateActionWithAtomicBatchCallsAtomic\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct DharmaSmartWalletImplementationV15Interface.CallReturn[]\",\"name\":\"callResults\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"returnDataOffset\",\"type\":\"uint24\"},{\"internalType\":\"uint8\",\"name\":\"valueLength\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"callIndex\",\"type\":\"uint16\"}],\"internalType\":\"struct DharmaSmartWalletImplementationV15Interface.ValueReplacement[]\",\"name\":\"replaceValue\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"returnDataOffset\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"dataLength\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"callIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint24\",\"name\":\"callDataOffset\",\"type\":\"uint24\"}],\"internalType\":\"struct DharmaSmartWalletImplementationV15Interface.DataReplacement[]\",\"name\":\"replaceData\",\"type\":\"tuple[]\"}],\"internalType\":\"struct DharmaSmartWalletImplementationV15Interface.AdvancedCall[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"_simulateAdvancedActionWithAtomicBatchCallsAtomic\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"},{\"internalType\":\"uint96\",\"name\":\"callValue\",\"type\":\"uint96\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct DharmaSmartWalletImplementationV15Interface.AdvancedCallReturn[]\",\"name\":\"callResults\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumActionGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"cancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"escape\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct DharmaSmartWalletImplementationV15Interface.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"minimumActionGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"dharmaSignature\",\"type\":\"bytes\"}],\"name\":\"executeActionWithAtomicBatchCalls\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"ok\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"returnDataOffset\",\"type\":\"uint24\"},{\"internalType\":\"uint8\",\"name\":\"valueLength\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"callIndex\",\"type\":\"uint16\"}],\"internalType\":\"struct DharmaSmartWalletImplementationV15Interface.ValueReplacement[]\",\"name\":\"replaceValue\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"returnDataOffset\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"dataLength\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"callIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint24\",\"name\":\"callDataOffset\",\"type\":\"uint24\"}],\"internalType\":\"struct DharmaSmartWalletImplementationV15Interface.DataReplacement[]\",\"name\":\"replaceData\",\"type\":\"tuple[]\"}],\"internalType\":\"struct DharmaSmartWalletImplementationV15Interface.AdvancedCall[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"minimumActionGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"dharmaSignature\",\"type\":\"bytes\"}],\"name\":\"executeAdvancedActionWithAtomicBatchCalls\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"},{\"internalType\":\"uint96\",\"name\":\"callValue\",\"type\":\"uint96\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct DharmaSmartWalletImplementationV15Interface.AdvancedCallReturn[]\",\"name\":\"callResults\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"returnDataOffset\",\"type\":\"uint24\"},{\"internalType\":\"uint8\",\"name\":\"valueLength\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"callIndex\",\"type\":\"uint16\"}],\"internalType\":\"struct DharmaSmartWalletImplementationV15Interface.ValueReplacement[]\",\"name\":\"replaceValue\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"returnDataOffset\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"dataLength\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"callIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint24\",\"name\":\"callDataOffset\",\"type\":\"uint24\"}],\"internalType\":\"struct DharmaSmartWalletImplementationV15Interface.DataReplacement[]\",\"name\":\"replaceData\",\"type\":\"tuple[]\"}],\"internalType\":\"struct DharmaSmartWalletImplementationV15Interface.AdvancedCall[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumActionGas\",\"type\":\"uint256\"}],\"name\":\"getAdvancedGenericAtomicBatchActionID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"actionID\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"enum DharmaSmartWalletImplementationV15Interface.ActionType\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumActionGas\",\"type\":\"uint256\"}],\"name\":\"getCustomActionID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"actionID\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct DharmaSmartWalletImplementationV15Interface.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumActionGas\",\"type\":\"uint256\"}],\"name\":\"getGenericAtomicBatchActionID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"actionID\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"returnDataOffset\",\"type\":\"uint24\"},{\"internalType\":\"uint8\",\"name\":\"valueLength\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"callIndex\",\"type\":\"uint16\"}],\"internalType\":\"struct DharmaSmartWalletImplementationV15Interface.ValueReplacement[]\",\"name\":\"replaceValue\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"returnDataOffset\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"dataLength\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"callIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint24\",\"name\":\"callDataOffset\",\"type\":\"uint24\"}],\"internalType\":\"struct DharmaSmartWalletImplementationV15Interface.DataReplacement[]\",\"name\":\"replaceData\",\"type\":\"tuple[]\"}],\"internalType\":\"struct DharmaSmartWalletImplementationV15Interface.AdvancedCall[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"minimumActionGas\",\"type\":\"uint256\"}],\"name\":\"getNextAdvancedGenericAtomicBatchActionID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"actionID\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"enum DharmaSmartWalletImplementationV15Interface.ActionType\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumActionGas\",\"type\":\"uint256\"}],\"name\":\"getNextCustomActionID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"actionID\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct DharmaSmartWalletImplementationV15Interface.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"minimumActionGas\",\"type\":\"uint256\"}],\"name\":\"getNextGenericAtomicBatchActionID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"actionID\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUserSigningKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"userSigningKey\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userSigningKey\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumActionGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"dharmaSignature\",\"type\":\"bytes\"}],\"name\":\"permanentlyDisableEscapeHatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newUserSigningKey\",\"type\":\"address\"}],\"name\":\"recover\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"redeemAllDDai\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"redeemAllDUSDC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumActionGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"dharmaSignature\",\"type\":\"bytes\"}],\"name\":\"removeEscapeHatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumActionGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"dharmaSignature\",\"type\":\"bytes\"}],\"name\":\"setEscapeHatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userSigningKey\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumActionGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"dharmaSignature\",\"type\":\"bytes\"}],\"name\":\"setUserSigningKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct DharmaSmartWalletImplementationV15Interface.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"simulateActionWithAtomicBatchCalls\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"ok\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"returnDataOffset\",\"type\":\"uint24\"},{\"internalType\":\"uint8\",\"name\":\"valueLength\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"callIndex\",\"type\":\"uint16\"}],\"internalType\":\"struct DharmaSmartWalletImplementationV15Interface.ValueReplacement[]\",\"name\":\"replaceValue\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"returnDataOffset\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"dataLength\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"callIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint24\",\"name\":\"callDataOffset\",\"type\":\"uint24\"}],\"internalType\":\"struct DharmaSmartWalletImplementationV15Interface.DataReplacement[]\",\"name\":\"replaceData\",\"type\":\"tuple[]\"}],\"internalType\":\"struct DharmaSmartWalletImplementationV15Interface.AdvancedCall[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"simulateAdvancedActionWithAtomicBatchCalls\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"},{\"internalType\":\"uint96\",\"name\":\"callValue\",\"type\":\"uint96\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct DharmaSmartWalletImplementationV15Interface.AdvancedCallReturn[]\",\"name\":\"callResults\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"triggerEtherTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumActionGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"dharmaSignature\",\"type\":\"bytes\"}],\"name\":\"withdrawEther\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DharmaSmartWalletImplementationV15","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8fd0662eaeffbbbdfd8936b7cd9f1126784ca15981574a31e8c267c3665b5eb2"}]}