{"status":"1","message":"OK","result":[{"SourceCode":"// File: interfaces/DelegatorInterface.sol\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract DelegationStorage {\r\n    /**\r\n     * @notice Implementation address for this contract\r\n     */\r\n    address public implementation;\r\n}\r\n\r\nabstract contract DelegatorInterface is DelegationStorage {\r\n    /**\r\n     * @notice Emitted when implementation is changed\r\n     */\r\n    event NewImplementation(\r\n        address oldImplementation,\r\n        address newImplementation\r\n    );\r\n\r\n    /**\r\n     * @notice Called by the admin to update the implementation of the delegator\r\n     * @param implementation_ The address of the new implementation for delegation\r\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\r\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\r\n     */\r\n    function _setImplementation(\r\n        address implementation_,\r\n        bool allowResign,\r\n        bytes memory becomeImplementationData\r\n    ) public virtual;\r\n}\r\n\r\nabstract contract DelegateInterface is DelegationStorage {\r\n    /**\r\n     * @notice Called by the delegator on a delegate to initialize it for duty\r\n     * @dev Should revert if any issues arise which make it unfit for delegation\r\n     * @param data The encoded bytes data for any initialization\r\n     */\r\n    function _becomeImplementation(bytes memory data) public virtual;\r\n\r\n    /**\r\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\r\n     */\r\n    function _resignImplementation() public virtual;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File: contracts/ActivityBase.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\ncontract ActivityBase is Ownable{\r\n    using SafeMath for uint256;\r\n\r\n    address public admin;\r\n    \r\n    address public marketingFund;\r\n    // token as the unit of measurement\r\n    address public WETHToken;\r\n    // invitee's supply 5% deposit weight to its invitor\r\n    uint256 public constant INVITEE_WEIGHT = 20; \r\n    // invitee's supply 10% deposit weight to its invitor\r\n    uint256 public constant INVITOR_WEIGHT = 10;\r\n\r\n    // The block number when SHARD mining starts.\r\n    uint256 public startBlock;\r\n\r\n    // dev fund\r\n    uint256 public userDividendWeight;\r\n    uint256 public devDividendWeight;\r\n    address public developerDAOFund;\r\n\r\n    // deposit limit\r\n    uint256 public amountFeeRateNumerator;\r\n    uint256 public amountfeeRateDenominator;\r\n\r\n    // contract sender fee rate\r\n    uint256 public contractFeeRateNumerator;\r\n    uint256 public contractFeeRateDenominator;\r\n\r\n    // Info of each user is Contract sender\r\n    mapping (uint256 => mapping (address => bool)) public isUserContractSender;\r\n    mapping (uint256 => uint256) public poolTokenAmountLimit;\r\n\r\n    function setDividendWeight(uint256 _userDividendWeight, uint256 _devDividendWeight) public virtual{\r\n        checkAdmin();\r\n        require(\r\n            _userDividendWeight != 0 && _devDividendWeight != 0,\r\n            \"invalid input\"\r\n        );\r\n        userDividendWeight = _userDividendWeight;\r\n        devDividendWeight = _devDividendWeight;\r\n    }\r\n\r\n    function setDeveloperDAOFund(address _developerDAOFund) public virtual onlyOwner {\r\n        developerDAOFund = _developerDAOFund;\r\n    }\r\n\r\n    function setTokenAmountLimit(uint256 _pid, uint256 _tokenAmountLimit) public virtual {\r\n        checkAdmin();\r\n        poolTokenAmountLimit[_pid] = _tokenAmountLimit;\r\n    }\r\n\r\n    function setTokenAmountLimitFeeRate(uint256 _feeRateNumerator, uint256 _feeRateDenominator) public virtual {\r\n        checkAdmin();\r\n        require(\r\n            _feeRateDenominator >= _feeRateNumerator, \"invalid input\"\r\n        );\r\n        amountFeeRateNumerator = _feeRateNumerator;\r\n        amountfeeRateDenominator = _feeRateDenominator;\r\n    }\r\n\r\n    function setContracSenderFeeRate(uint256 _feeRateNumerator, uint256 _feeRateDenominator) public virtual {\r\n        checkAdmin();\r\n        require(\r\n            _feeRateDenominator >= _feeRateNumerator, \"invalid input\"\r\n        );\r\n        contractFeeRateNumerator = _feeRateNumerator;\r\n        contractFeeRateDenominator = _feeRateDenominator;\r\n    }\r\n\r\n    function setStartBlock(uint256 _startBlock) public virtual onlyOwner { \r\n        require(startBlock > block.number, \"invalid start block\");\r\n        startBlock = _startBlock;\r\n        updateAfterModifyStartBlock(_startBlock);\r\n    }\r\n\r\n    function transferAdmin(address _admin) public virtual {\r\n        checkAdmin();\r\n        admin = _admin;\r\n    }\r\n\r\n    function setMarketingFund(address _marketingFund) public virtual onlyOwner {\r\n        marketingFund = _marketingFund;\r\n    }\r\n\r\n    function updateAfterModifyStartBlock(uint256 _newStartBlock) internal virtual{\r\n    }\r\n\r\n    function calculateDividend(uint256 _pending, uint256 _pid, uint256 _userAmount, bool _isContractSender) internal view returns (uint256 _marketingFundDividend, uint256 _devDividend, uint256 _userDividend){\r\n        uint256 fee = 0;\r\n        if(_isContractSender && contractFeeRateDenominator > 0){\r\n            fee = _pending.mul(contractFeeRateNumerator).div(contractFeeRateDenominator);\r\n            _marketingFundDividend = _marketingFundDividend.add(fee);\r\n            _pending = _pending.sub(fee);\r\n        }\r\n        if(poolTokenAmountLimit[_pid] > 0 && amountfeeRateDenominator > 0 && _userAmount >= poolTokenAmountLimit[_pid]){\r\n            fee = _pending.mul(amountFeeRateNumerator).div(amountfeeRateDenominator);\r\n            _marketingFundDividend =_marketingFundDividend.add(fee);\r\n            _pending = _pending.sub(fee);\r\n        }\r\n        if(devDividendWeight > 0){\r\n            fee = _pending.mul(devDividendWeight).div(devDividendWeight.add(userDividendWeight));\r\n            _devDividend = _devDividend.add(fee);\r\n            _pending = _pending.sub(fee);\r\n        }\r\n        _userDividend = _pending;\r\n    }\r\n\r\n    function judgeContractSender(uint256 _pid) internal {\r\n        if(msg.sender != tx.origin){\r\n            isUserContractSender[_pid][msg.sender] = true;\r\n        }\r\n    }\r\n\r\n    function checkAdmin() internal view {\r\n        require(admin == msg.sender, \"invalid authorized\");\r\n    }\r\n}\r\n\r\n// File: interfaces/IInvitation.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IInvitation{\r\n\r\n    function acceptInvitation(address _invitor) external;\r\n\r\n    function getInvitation(address _sender) external view returns(address _invitor, address[] memory _invitees, bool _isWithdrawn);\r\n    \r\n}\r\n\r\n// File: contracts/MarketingMining.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract MarketingMining is ActivityBase{\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount; // How much token the user has provided.\r\n        uint256 originWeight; //initial weight\r\n        uint256 modifiedWeight; //take the invitation relationship into consideration.\r\n        uint256 revenue;\r\n        uint256 userDividend;\r\n        uint256 devDividend;\r\n        uint256 marketingFundDividend;\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        bool withdrawnState;\r\n        bool isUsed;\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        uint256 tokenAmount;  // lock amount\r\n        IERC20 token;   // uniswapPair contract\r\n        uint256 allocPoint;\r\n        uint256 accumulativeDividend;\r\n        uint256 lastDividendHeight;  // last dividend block height\r\n        uint256 accShardPerWeight;\r\n        uint256 totalWeight;\r\n    }\r\n\r\n    uint256 public constant BONUS_MULTIPLIER = 10;\r\n    // The SHARD TOKEN!\r\n    IERC20 public SHARD;\r\n    // Info of each user that stakes LP tokens.\r\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\r\n    // Info of each user that stakes LP tokens.\r\n    mapping (uint256 => mapping (address => uint256)) public userInviteeTotalAmount; // total invitee weight\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n    // Total allocation poitns. Must be the sum of all allocation poishard in all pools.\r\n    uint256 public totalAllocPoint = 0;\r\n    // SHARD tokens created per block.\r\n    uint256 public SHDPerBlock = 1045 * (1e16);\r\n\r\n    //get invitation relationship\r\n    IInvitation public invitation;\r\n\r\n    uint256 public bonusEndBlock;\r\n    uint256 public totalAvailableDividend;\r\n    \r\n    bool public isInitialized;\r\n    bool public isDepositAvailable;\r\n    bool public isRevenueWithdrawable;\r\n\r\n    event AddPool(uint256 indexed pid, address tokenAddress);\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount, uint256 weight);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n\r\n    function initialize(\r\n        IERC20 _SHARD,\r\n        IInvitation _invitation,\r\n        uint256 _bonusEndBlock,\r\n        uint256 _startBlock, \r\n        uint256 _SHDPerBlock,\r\n        address _developerDAOFund,\r\n        address _marketingFund,\r\n        address _weth\r\n    ) public virtual onlyOwner{\r\n        require(!isInitialized, \"contract has been initialized\");\r\n        invitation = _invitation;\r\n        bonusEndBlock = _bonusEndBlock;\r\n        if (_startBlock < block.number) {\r\n            startBlock = block.number;\r\n        } else {\r\n            startBlock = _startBlock;\r\n        }\r\n        SHARD = _SHARD;\r\n        developerDAOFund = _developerDAOFund;\r\n        marketingFund = _marketingFund;\r\n        WETHToken = _weth;\r\n        if(_SHDPerBlock > 0){\r\n            SHDPerBlock = _SHDPerBlock;\r\n        }\r\n        userDividendWeight = 4;\r\n        devDividendWeight = 1;\r\n\r\n        amountFeeRateNumerator = 1;\r\n        amountfeeRateDenominator = 5;\r\n\r\n        contractFeeRateNumerator = 1;\r\n        contractFeeRateDenominator = 5;\r\n        isDepositAvailable = true;\r\n        isRevenueWithdrawable = false;\r\n        isInitialized = true;\r\n    }\r\n\r\n    // Add a new pool. Can only be called by the owner.\r\n    function add(uint256 _allocPoint, IERC20 _tokenAddress, bool _withUpdate) public virtual {\r\n        checkAdmin();\r\n        if(_withUpdate){\r\n            massUpdatePools();\r\n        }\r\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\r\n        PoolInfo memory newpool = PoolInfo({\r\n            token: _tokenAddress, \r\n            tokenAmount: 0,\r\n            allocPoint: _allocPoint,\r\n            lastDividendHeight: lastRewardBlock,\r\n            accumulativeDividend: 0,\r\n            accShardPerWeight: 0,\r\n            totalWeight: 0\r\n        });\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolInfo.push(newpool);\r\n        emit AddPool(poolInfo.length.sub(1), address(_tokenAddress));\r\n    }\r\n\r\n    // Update the given pool's allocation point. Can only be called by the owner.\r\n    function setAllocationPoint(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public virtual {\r\n        checkAdmin();\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n    }\r\n\r\n    function setSHDPerBlock(uint256 _SHDPerBlock, bool _withUpdate) public virtual {\r\n        checkAdmin();\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        SHDPerBlock = _SHDPerBlock;\r\n    }\r\n\r\n    function setIsDepositAvailable(bool _isDepositAvailable) public virtual onlyOwner {\r\n        isDepositAvailable = _isDepositAvailable;\r\n    }\r\n\r\n    function setIsRevenueWithdrawable(bool _isRevenueWithdrawable) public virtual onlyOwner {\r\n        isRevenueWithdrawable = _isRevenueWithdrawable;\r\n    }\r\n\r\n    // update reward vairables for pools. Be careful of gas spending!\r\n    function massUpdatePools() public virtual {\r\n        uint256 poolCount = poolInfo.length;\r\n        for(uint256 i = 0; i < poolCount; i ++){\r\n            updatePoolDividend(i);\r\n        }\r\n    }\r\n\r\n    function addAvailableDividend(uint256 _amount, bool _withUpdate) public virtual {\r\n        if(_withUpdate){\r\n            massUpdatePools();\r\n        }\r\n        SHARD.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n        totalAvailableDividend = totalAvailableDividend.add(_amount);\r\n    }\r\n\r\n    // update reward vairables for a pool\r\n    function updatePoolDividend(uint256 _pid) public virtual {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.number <= pool.lastDividendHeight) {\r\n            return;\r\n        }\r\n        if (pool.tokenAmount == 0) {\r\n            pool.lastDividendHeight = block.number;\r\n            return;\r\n        }\r\n        uint256 availableDividend = totalAvailableDividend;\r\n        uint256 multiplier = getMultiplier(pool.lastDividendHeight, block.number);\r\n        uint256 producedToken = multiplier.mul(SHDPerBlock);\r\n        producedToken = availableDividend > producedToken? producedToken: availableDividend;\r\n        if(totalAllocPoint > 0){\r\n            uint256 poolDevidend = producedToken.mul(pool.allocPoint).div(totalAllocPoint);\r\n            if(poolDevidend > 0){\r\n                totalAvailableDividend = totalAvailableDividend.sub(poolDevidend);\r\n                pool.accumulativeDividend = pool.accumulativeDividend.add(poolDevidend);\r\n                pool.accShardPerWeight = pool.accShardPerWeight.add(poolDevidend.mul(1e12).div(pool.totalWeight));\r\n            } \r\n        }\r\n        pool.lastDividendHeight = block.number;\r\n    }\r\n\r\n    function depositETH(uint256 _pid) external payable virtual {\r\n        require(address(poolInfo[_pid].token) == WETHToken, \"invalid token\");\r\n        updateAfterDeposit(_pid, msg.value);\r\n    }\r\n\r\n    function withdrawETH(uint256 _pid, uint256 _amount) external virtual {\r\n        require(address(poolInfo[_pid].token) == WETHToken, \"invalid token\");\r\n        updateAfterwithdraw(_pid, _amount);\r\n        if(_amount > 0){\r\n            (bool success, ) = msg.sender.call{value: _amount}(new bytes(0));\r\n            require(success, \"Transfer: ETH_TRANSFER_FAILED\");\r\n        }\r\n    }\r\n\r\n    function updateAfterDeposit(uint256 _pid, uint256 _amount) internal{\r\n        require(isDepositAvailable, \"new invest is forbidden\");\r\n        require(_amount > 0, \"invalid amount\");\r\n        (address invitor, , bool isWithdrawn) = invitation.getInvitation(msg.sender);\r\n        require(invitor != address(0), \"should be accept invitation firstly\");\r\n        updatePoolDividend(_pid);\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        UserInfo storage userInvitor = userInfo[_pid][invitor];\r\n        uint256 existedAmount = user.amount;\r\n        bool withdrawnState = user.withdrawnState;\r\n        if(!user.isUsed){\r\n            user.isUsed = true;\r\n            judgeContractSender(_pid);\r\n            withdrawnState = isWithdrawn;\r\n        }\r\n        if(!withdrawnState && userInvitor.amount > 0){\r\n            updateUserRevenue(userInvitor, pool);\r\n        }\r\n        if(!withdrawnState){\r\n            updateInvitorWeight(msg.sender, invitor, _pid, true, _amount, isWithdrawn, withdrawnState);\r\n        }\r\n\r\n        if(existedAmount > 0){ \r\n            updateUserRevenue(user, pool);\r\n        }\r\n\r\n        updateUserWeight(msg.sender, _pid, true, _amount, isWithdrawn);\r\n        if(!withdrawnState && userInvitor.amount > 0){\r\n            userInvitor.rewardDebt = userInvitor.modifiedWeight.mul(pool.accShardPerWeight).div(1e12);\r\n        }  \r\n        if(!withdrawnState){\r\n            user.withdrawnState = isWithdrawn;\r\n        }\r\n        user.amount = existedAmount.add(_amount);\r\n        user.rewardDebt = user.modifiedWeight.mul(pool.accShardPerWeight).div(1e12);\r\n        pool.tokenAmount = pool.tokenAmount.add(_amount);\r\n        emit Deposit(msg.sender, _pid, _amount, user.modifiedWeight);\r\n    }\r\n\r\n    // Deposit tokens to marketing mining for SHD allocation.\r\n    function deposit(uint256 _pid, uint256 _amount) public virtual {\r\n        require(address(poolInfo[_pid].token) != WETHToken, \"invalid pid\");\r\n        IERC20(poolInfo[_pid].token).safeTransferFrom(address(msg.sender), address(this), _amount);\r\n        updateAfterDeposit(_pid, _amount);\r\n    }\r\n\r\n    // Withdraw tokens from marketMining.\r\n    function withdraw(uint256 _pid, uint256 _amount) public virtual {\r\n        require(address(poolInfo[_pid].token) != WETHToken, \"invalid pid\");\r\n        IERC20(poolInfo[_pid].token).safeTransfer(address(msg.sender), _amount);\r\n        updateAfterwithdraw(_pid, _amount);\r\n    }\r\n\r\n    function updateAfterwithdraw(uint256 _pid, uint256 _amount) internal {\r\n        (address invitor, , bool isWithdrawn) = invitation.getInvitation(msg.sender);\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        bool withdrawnState = user.withdrawnState;\r\n        uint256 existedAmount = user.amount;\r\n        require(existedAmount >= _amount, \"withdraw: not good\");\r\n        updatePoolDividend(_pid);\r\n        uint256 pending = updateUserRevenue(user, pool);\r\n        UserInfo storage userInvitor = userInfo[_pid][invitor];\r\n        if(!withdrawnState && userInvitor.amount > 0){\r\n            updateUserRevenue(userInvitor, pool);\r\n        }\r\n        if(!withdrawnState){\r\n            updateInvitorWeight(msg.sender, invitor, _pid, false, _amount, isWithdrawn, withdrawnState);\r\n        }\r\n        updateUserWeight(msg.sender, _pid, false, _amount, isWithdrawn);\r\n        user.amount = existedAmount.sub(_amount);\r\n        user.rewardDebt = user.modifiedWeight.mul(pool.accShardPerWeight).div(1e12);\r\n        user.withdrawnState = isWithdrawn;\r\n        if(!withdrawnState && userInvitor.amount > 0){\r\n            userInvitor.rewardDebt = userInvitor.modifiedWeight.mul(pool.accShardPerWeight).div(1e12);\r\n        }\r\n        pool.tokenAmount = pool.tokenAmount.sub(_amount);\r\n        user.revenue = 0;\r\n        bool isContractSender = isUserContractSender[_pid][msg.sender];\r\n        (uint256 marketingFundDividend, uint256 devDividend, uint256 userDividend) = calculateDividend(pending, _pid, existedAmount, isContractSender);\r\n        user.userDividend = user.userDividend.add(userDividend);\r\n        user.devDividend = user.devDividend.add(devDividend);\r\n        if(marketingFundDividend > 0){\r\n            user.marketingFundDividend = user.marketingFundDividend.add(marketingFundDividend);\r\n        }\r\n        if(isRevenueWithdrawable){\r\n            devDividend = user.devDividend;\r\n            userDividend = user.userDividend;\r\n            marketingFundDividend = user.marketingFundDividend;\r\n            if(devDividend > 0){\r\n                safeSHARDTransfer(developerDAOFund, devDividend);\r\n            }\r\n            if(userDividend > 0){\r\n                safeSHARDTransfer(msg.sender, userDividend);\r\n            }\r\n            if(marketingFundDividend > 0){\r\n                safeSHARDTransfer(marketingFund, marketingFundDividend);\r\n            }\r\n            user.devDividend = 0;\r\n            user.userDividend = 0;\r\n            user.marketingFundDividend = 0;\r\n        }\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Safe SHD transfer function, just in case if rounding error causes pool to not have enough SHDs.\r\n    function safeSHARDTransfer(address _to, uint256 _amount) internal {\r\n        uint256 SHARDBal = SHARD.balanceOf(address(this));\r\n        if (_amount > SHARDBal) {\r\n            SHARD.transfer(_to, SHARDBal);\r\n        } else {\r\n            SHARD.transfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    // Return reward multiplier over the given _from to _to block.\r\n    function getMultiplier(uint256 _from, uint256 _to) public view virtual returns (uint256) {\r\n        if (_to <= bonusEndBlock) {\r\n            return _to.sub(_from).mul(BONUS_MULTIPLIER);\r\n        } else if (_from >= bonusEndBlock) {\r\n            return _to.sub(_from);\r\n        } else {\r\n            return bonusEndBlock.sub(_from).mul(BONUS_MULTIPLIER).add(\r\n                _to.sub(bonusEndBlock)\r\n            );\r\n        }\r\n    }\r\n\r\n    // View function to see pending SHDs on frontend.\r\n    function pendingSHARD(uint256 _pid, address _user) external view virtual \r\n    returns (uint256 _pending, uint256 _potential, uint256 _blockNumber) {\r\n        _blockNumber = block.number;\r\n        (_pending, _potential) = calculatePendingSHARD(_pid, _user);\r\n    }\r\n\r\n    function pendingSHARDByPids(uint256[] memory _pids, address _user) external view virtual\r\n    returns (uint256[] memory _pending, uint256[] memory _potential, uint256 _blockNumber){\r\n        uint256 poolCount = _pids.length;\r\n        _pending = new uint256[](poolCount);\r\n        _potential = new uint256[](poolCount);\r\n        _blockNumber = block.number;\r\n        for(uint i = 0; i < poolCount; i ++){\r\n            (_pending[i], _potential[i]) = calculatePendingSHARD(_pids[i], _user);\r\n        }\r\n    } \r\n\r\n    function calculatePendingSHARD(uint256 _pid, address _user) private view returns (uint256 _pending, uint256 _potential) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accShardPerWeight = pool.accShardPerWeight;\r\n        _pending = user.modifiedWeight.mul(accShardPerWeight).div(1e12).sub(user.rewardDebt).add(user.revenue);\r\n        bool isContractSender = isUserContractSender[_pid][_user];\r\n        _potential = _pending;\r\n        (,,_pending) = calculateDividend(_pending, _pid, user.amount, isContractSender);\r\n        _pending = _pending.add(user.userDividend);\r\n        uint256 lpSupply = pool.tokenAmount;\r\n        if (block.number > pool.lastDividendHeight && lpSupply != 0) {\r\n            uint256 multiplier = getMultiplier(pool.lastDividendHeight, block.number);\r\n            uint256 totalUnupdateToken = multiplier.mul(SHDPerBlock);\r\n            totalUnupdateToken = totalAvailableDividend > totalUnupdateToken? totalUnupdateToken: totalAvailableDividend;\r\n            uint256 shardReward = totalUnupdateToken.mul(pool.allocPoint).div(totalAllocPoint);\r\n            accShardPerWeight = accShardPerWeight.add(shardReward.mul(1e12).div(pool.totalWeight));\r\n        }\r\n        _potential = user.modifiedWeight.mul(accShardPerWeight).div(1e12).sub(user.rewardDebt).add(user.revenue).sub(_potential);\r\n        (,,_potential) = calculateDividend(_potential, _pid, user.amount, isContractSender);\r\n    }\r\n\r\n    function getDepositWeight(uint256 _amount) public pure returns(uint256 weight){\r\n        return _amount;\r\n    }\r\n\r\n    function getPoolLength() public view virtual returns(uint256){\r\n        return poolInfo.length;\r\n    }\r\n\r\n    function getPoolInfo(uint256 _pid) public view virtual returns(uint256 _allocPoint, uint256 _accumulativeDividend, uint256 _usersTotalWeight, uint256 _tokenAmount, address _tokenAddress, uint256 _accs){\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        _allocPoint = pool.allocPoint;\r\n        _accumulativeDividend = pool.accumulativeDividend;\r\n        _usersTotalWeight = pool.totalWeight;\r\n        _tokenAmount = pool.tokenAmount;\r\n        _tokenAddress = address(pool.token);\r\n        _accs = pool.accShardPerWeight;\r\n    }\r\n\r\n    function getPagePoolInfo(uint256 _fromIndex, uint256 _toIndex) public view virtual\r\n    returns(uint256[] memory _allocPoint, uint256[] memory _accumulativeDividend, uint256[] memory _usersTotalWeight, uint256[] memory _tokenAmount, \r\n    address[] memory _tokenAddress, uint256[] memory _accs){\r\n        uint256 poolCount = _toIndex.sub(_fromIndex).add(1);\r\n        _allocPoint = new uint256[](poolCount);\r\n        _accumulativeDividend = new uint256[](poolCount);\r\n        _usersTotalWeight = new uint256[](poolCount);\r\n        _tokenAmount = new uint256[](poolCount);\r\n        _tokenAddress = new address[](poolCount);\r\n        _accs = new uint256[](poolCount);\r\n        uint256 startIndex = 0;\r\n        for(uint i = _fromIndex; i <= _toIndex; i ++){\r\n            PoolInfo storage pool = poolInfo[i];\r\n            _allocPoint[startIndex] = pool.allocPoint;\r\n            _accumulativeDividend[startIndex] = pool.accumulativeDividend;\r\n            _usersTotalWeight[startIndex] = pool.totalWeight;\r\n            _tokenAmount[startIndex] = pool.tokenAmount;\r\n            _tokenAddress[startIndex] = address(pool.token);\r\n            _accs[startIndex] = pool.accShardPerWeight;\r\n            startIndex ++;\r\n        }\r\n    }\r\n\r\n    function getUserInfoByPids(uint256[] memory _pids, address _user) public virtual view \r\n    returns(uint256[] memory _amount, uint256[] memory _modifiedWeight, uint256[] memory _revenue, uint256[] memory _userDividend, uint256[] memory _rewardDebt) {\r\n        uint256 poolCount = _pids.length;\r\n        _amount = new uint256[](poolCount);\r\n        _modifiedWeight = new uint256[](poolCount);\r\n        _revenue = new uint256[](poolCount);\r\n        _userDividend = new uint256[](poolCount);\r\n        _rewardDebt = new uint256[](poolCount);\r\n        for(uint i = 0; i < poolCount; i ++){\r\n            UserInfo storage user = userInfo[_pids[i]][_user];\r\n            _amount[i] = user.amount;\r\n            _modifiedWeight[i] = user.modifiedWeight;\r\n            _revenue[i] = user.revenue;\r\n            _userDividend[i] = user.userDividend;\r\n            _rewardDebt[i] = user.rewardDebt;\r\n        }\r\n    }\r\n\r\n    function updateUserRevenue(UserInfo storage _user, PoolInfo storage _pool) private returns (uint256){\r\n        uint256 pending = _user.modifiedWeight.mul(_pool.accShardPerWeight).div(1e12).sub(_user.rewardDebt);\r\n        _user.revenue = _user.revenue.add(pending);\r\n        _pool.accumulativeDividend = _pool.accumulativeDividend.sub(pending);\r\n        return _user.revenue;\r\n    }\r\n\r\n    function updateInvitorWeight(address _sender, address _invitor, uint256 _pid, bool _isAddAmount, uint256 _amount, bool _isWithdrawn, bool _withdrawnState) private {\r\n        UserInfo storage user = userInfo[_pid][_sender];\r\n        uint256 subInviteeAmount = 0;\r\n        uint256 addInviteeAmount = 0;\r\n        if(user.amount > 0  && !_withdrawnState){\r\n            subInviteeAmount = user.originWeight;\r\n        }\r\n        if(!_isWithdrawn){\r\n            if(_isAddAmount){\r\n                addInviteeAmount = getDepositWeight(user.amount.add(_amount));\r\n            }\r\n            else{ \r\n                addInviteeAmount = getDepositWeight(user.amount.sub(_amount));\r\n            }\r\n        }\r\n\r\n        UserInfo storage invitor = userInfo[_pid][_invitor];\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        uint256 inviteeAmountOfUserInvitor = userInviteeTotalAmount[_pid][_invitor];\r\n        uint256 newInviteeAmountOfUserInvitor = inviteeAmountOfUserInvitor.add(addInviteeAmount).sub(subInviteeAmount);\r\n        userInviteeTotalAmount[_pid][_invitor] = newInviteeAmountOfUserInvitor;\r\n        if(invitor.amount > 0){\r\n            invitor.modifiedWeight = invitor.modifiedWeight.add(newInviteeAmountOfUserInvitor.div(INVITEE_WEIGHT))\r\n                                                                   .sub(inviteeAmountOfUserInvitor.div(INVITEE_WEIGHT));\r\n            pool.totalWeight = pool.totalWeight.add(newInviteeAmountOfUserInvitor.div(INVITEE_WEIGHT))\r\n                                               .sub(inviteeAmountOfUserInvitor.div(INVITEE_WEIGHT));                              \r\n        }\r\n    }\r\n\r\n    function updateUserWeight(address _user, uint256 _pid, bool _isAddAmount, uint256 _amount, bool _isWithdrawn) private {\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 userOriginModifiedWeight = user.modifiedWeight;\r\n        uint256 userNewModifiedWeight;\r\n        if(_isAddAmount){\r\n            userNewModifiedWeight = getDepositWeight(_amount.add(user.amount));\r\n        }\r\n        else{\r\n            userNewModifiedWeight = getDepositWeight(user.amount.sub(_amount));\r\n        }\r\n        user.originWeight = userNewModifiedWeight;\r\n        if(!_isWithdrawn){\r\n            userNewModifiedWeight = userNewModifiedWeight.add(userNewModifiedWeight.div(INVITOR_WEIGHT));\r\n        }\r\n        uint256 inviteeAmountOfUser = userInviteeTotalAmount[_pid][msg.sender];\r\n        userNewModifiedWeight = userNewModifiedWeight.add(inviteeAmountOfUser.div(INVITEE_WEIGHT));\r\n        user.modifiedWeight = userNewModifiedWeight;\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        pool.totalWeight = pool.totalWeight.add(userNewModifiedWeight).sub(userOriginModifiedWeight);\r\n    }\r\n\r\n    function updateAfterModifyStartBlock(uint256 _newStartBlock) internal override{\r\n        uint256 poolLenght = poolInfo.length;\r\n        for(uint256 i = 0; i < poolLenght; i++){\r\n            PoolInfo storage info = poolInfo[i];\r\n            info.lastDividendHeight = _newStartBlock;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/MarketingMiningDelegate.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\ncontract MarketingMiningDelegate is DelegateInterface, MarketingMining {\r\n    /**\r\n     * @notice Construct an empty delegate\r\n     */\r\n    constructor() public {}\r\n\r\n    /**\r\n     * @notice Called by the delegator on a delegate to initialize it for duty\r\n     * @param data The encoded bytes data for any initialization\r\n     */\r\n    function _becomeImplementation(bytes memory data)\r\n        public\r\n        override\r\n    {\r\n        checkAdmin();\r\n        // Shh -- currently unused\r\n        data;\r\n\r\n        // Shh -- we don't ever want this hook to be marked pure\r\n        if (false) {\r\n            implementation = address(0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\r\n     */\r\n    function _resignImplementation() public override {\r\n        checkAdmin();\r\n        // Shh -- we don't ever want this hook to be marked pure\r\n        if (false) {\r\n            implementation = address(0);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"AddPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVITEE_WEIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVITOR_WEIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHARD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHDPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETHToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"_becomeImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_resignImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"addAvailableDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountFeeRateNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountfeeRateDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractFeeRateDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractFeeRateNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devDividendWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developerDAOFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getDepositWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toIndex\",\"type\":\"uint256\"}],\"name\":\"getPagePoolInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_allocPoint\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_accumulativeDividend\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_usersTotalWeight\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokenAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_accs\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_accumulativeDividend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_usersTotalWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_accs\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserInfoByPids\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_modifiedWeight\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_revenue\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_userDividend\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardDebt\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_SHARD\",\"type\":\"address\"},{\"internalType\":\"contract IInvitation\",\"name\":\"_invitation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_SHDPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_developerDAOFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invitation\",\"outputs\":[{\"internalType\":\"contract IInvitation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDepositAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRevenueWithdrawable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isUserContractSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingSHARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_pending\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_potential\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingSHARDByPids\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pending\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_potential\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulativeDividend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDividendHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accShardPerWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWeight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolTokenAmountLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"setAllocationPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRateNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeRateDenominator\",\"type\":\"uint256\"}],\"name\":\"setContracSenderFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_developerDAOFund\",\"type\":\"address\"}],\"name\":\"setDeveloperDAOFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userDividendWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devDividendWeight\",\"type\":\"uint256\"}],\"name\":\"setDividendWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isDepositAvailable\",\"type\":\"bool\"}],\"name\":\"setIsDepositAvailable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isRevenueWithdrawable\",\"type\":\"bool\"}],\"name\":\"setIsRevenueWithdrawable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingFund\",\"type\":\"address\"}],\"name\":\"setMarketingFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_SHDPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"setSHDPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"name\":\"setStartBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmountLimit\",\"type\":\"uint256\"}],\"name\":\"setTokenAmountLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRateNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeRateDenominator\",\"type\":\"uint256\"}],\"name\":\"setTokenAmountLimitFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAvailableDividend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePoolDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userDividendWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"modifiedWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revenue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userDividend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devDividend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFundDividend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawnState\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isUsed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInviteeTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MarketingMiningDelegate","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0829ca741322868024f6ab304005af6fc82fa009bcebd1a5337abafabfb2ec03"}]}