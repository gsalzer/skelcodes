{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/C/GITREPOS/PlatformSolidity/contracts/Interfaces/IERC20Timelock.sol\": {\r\n      \"content\": \"/*\\r\\n__/\\\\\\\\\\\\________/\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_        \\r\\n _\\\\///\\\\\\\\\\\\____/\\\\\\\\\\\\/____/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\///////////______/\\\\\\\\\\\\////////__       \\r\\n  ___\\\\///\\\\\\\\\\\\/\\\\\\\\\\\\/_____\\\\//\\\\\\\\\\\\______\\\\///__\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\/___________      \\r\\n   _____\\\\///\\\\\\\\\\\\/________\\\\////\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\______/\\\\\\\\\\\\_____________     \\r\\n    _______\\\\/\\\\\\\\\\\\____________\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\///////______\\\\/\\\\\\\\\\\\_____________    \\r\\n     _______\\\\/\\\\\\\\\\\\_______________\\\\////\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\_____________\\\\//\\\\\\\\\\\\____________   \\r\\n      _______\\\\/\\\\\\\\\\\\________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________\\\\///\\\\\\\\\\\\__________  \\r\\n       _______\\\\/\\\\\\\\\\\\_______\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/___\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_ \\r\\n        _______\\\\///__________\\\\///////////_____\\\\///////////////________\\\\/////////__\\r\\n\\r\\nVisit and follow!\\r\\n\\r\\n* Website:  https://www.ysec.finance\\r\\n* Twitter:  https://twitter.com/YearnSecure\\r\\n* Telegram: https://t.me/YearnSecure\\r\\n* Medium:   https://yearnsecure.medium.com/\\r\\n\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\ninterface IERC20Timelock{\\r\\n    function AllocationLength() external view returns (uint256);\\r\\n    function AddAllocation(string memory name, uint256 amount, uint256 releaseDate, bool isInterval, uint256 percentageOfRelease, uint256 intervalOfRelease, address token) external;\\r\\n    function WithdrawFromAllocation(string memory name) external;\\r\\n}\"\r\n    },\r\n    \"/C/GITREPOS/PlatformSolidity/contracts/Interfaces/IERC20TimelockFactory.sol\": {\r\n      \"content\": \"/*\\r\\n__/\\\\\\\\\\\\________/\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_        \\r\\n _\\\\///\\\\\\\\\\\\____/\\\\\\\\\\\\/____/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\///////////______/\\\\\\\\\\\\////////__       \\r\\n  ___\\\\///\\\\\\\\\\\\/\\\\\\\\\\\\/_____\\\\//\\\\\\\\\\\\______\\\\///__\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\/___________      \\r\\n   _____\\\\///\\\\\\\\\\\\/________\\\\////\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\______/\\\\\\\\\\\\_____________     \\r\\n    _______\\\\/\\\\\\\\\\\\____________\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\///////______\\\\/\\\\\\\\\\\\_____________    \\r\\n     _______\\\\/\\\\\\\\\\\\_______________\\\\////\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\_____________\\\\//\\\\\\\\\\\\____________   \\r\\n      _______\\\\/\\\\\\\\\\\\________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________\\\\///\\\\\\\\\\\\__________  \\r\\n       _______\\\\/\\\\\\\\\\\\_______\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/___\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_ \\r\\n        _______\\\\///__________\\\\///////////_____\\\\///////////////________\\\\/////////__\\r\\n\\r\\nVisit and follow!\\r\\n\\r\\n* Website:  https://www.ysec.finance\\r\\n* Twitter:  https://twitter.com/YearnSecure\\r\\n* Telegram: https://t.me/YearnSecure\\r\\n* Medium:   https://yearnsecure.medium.com/\\r\\n\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\ninterface IERC20TimelockFactory\\r\\n{\\r\\n    function CreateTimelock(address owner, address tokenOwner) external returns(address);\\r\\n}\"\r\n    },\r\n    \"/C/GITREPOS/PlatformSolidity/contracts/Models/PresaleData.sol\": {\r\n      \"content\": \"/*\\r\\n__/\\\\\\\\\\\\________/\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_        \\r\\n _\\\\///\\\\\\\\\\\\____/\\\\\\\\\\\\/____/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\///////////______/\\\\\\\\\\\\////////__       \\r\\n  ___\\\\///\\\\\\\\\\\\/\\\\\\\\\\\\/_____\\\\//\\\\\\\\\\\\______\\\\///__\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\/___________      \\r\\n   _____\\\\///\\\\\\\\\\\\/________\\\\////\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\______/\\\\\\\\\\\\_____________     \\r\\n    _______\\\\/\\\\\\\\\\\\____________\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\///////______\\\\/\\\\\\\\\\\\_____________    \\r\\n     _______\\\\/\\\\\\\\\\\\_______________\\\\////\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\_____________\\\\//\\\\\\\\\\\\____________   \\r\\n      _______\\\\/\\\\\\\\\\\\________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________\\\\///\\\\\\\\\\\\__________  \\r\\n       _______\\\\/\\\\\\\\\\\\_______\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/___\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_ \\r\\n        _______\\\\///__________\\\\///////////_____\\\\///////////////________\\\\/////////__\\r\\n\\r\\nVisit and follow!\\r\\n\\r\\n* Website:  https://www.ysec.finance\\r\\n* Twitter:  https://twitter.com/YearnSecure\\r\\n* Telegram: https://t.me/YearnSecure\\r\\n* Medium:   https://yearnsecure.medium.com/\\r\\n\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport \\\"./TokenAllocation.sol\\\";\\r\\nimport \\\"./PresaleDataAddresses.sol\\\";\\r\\nimport \\\"./PresaleDataState.sol\\\";\\r\\nimport \\\"./PresaleInfo.sol\\\";\\r\\n\\r\\nstruct PresaleData{\\r\\n    PresaleInfo Info;\\r\\n    uint256 StartDate;\\r\\n    uint256 EndDate;\\r\\n    uint256 Softcap;\\r\\n    uint256 Hardcap;\\r\\n    uint256 TokenLiqAmount;\\r\\n    uint256 LiqPercentage;\\r\\n    uint256 TokenPresaleAllocation;\\r\\n    bool PermalockLiq;\\r\\n    TokenAllocation[] TokenAllocations;// will not be returned in view of PresaleData\\r\\n    TokenAllocation LiquidityTokenAllocation;\\r\\n    PresaleDataAddresses Addresses;\\r\\n    PresaleDataState State;\\r\\n    mapping(address => uint256) EthContributedPerAddress;// will not be returned in view of PresaleData\\r\\n    mapping(address => bool) ClaimedAddress;// will not be returned in view of PresaleData\\r\\n}\"\r\n    },\r\n    \"/C/GITREPOS/PlatformSolidity/contracts/Models/PresaleDataAddresses.sol\": {\r\n      \"content\": \"/*\\r\\n__/\\\\\\\\\\\\________/\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_        \\r\\n _\\\\///\\\\\\\\\\\\____/\\\\\\\\\\\\/____/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\///////////______/\\\\\\\\\\\\////////__       \\r\\n  ___\\\\///\\\\\\\\\\\\/\\\\\\\\\\\\/_____\\\\//\\\\\\\\\\\\______\\\\///__\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\/___________      \\r\\n   _____\\\\///\\\\\\\\\\\\/________\\\\////\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\______/\\\\\\\\\\\\_____________     \\r\\n    _______\\\\/\\\\\\\\\\\\____________\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\///////______\\\\/\\\\\\\\\\\\_____________    \\r\\n     _______\\\\/\\\\\\\\\\\\_______________\\\\////\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\_____________\\\\//\\\\\\\\\\\\____________   \\r\\n      _______\\\\/\\\\\\\\\\\\________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________\\\\///\\\\\\\\\\\\__________  \\r\\n       _______\\\\/\\\\\\\\\\\\_______\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/___\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_ \\r\\n        _______\\\\///__________\\\\///////////_____\\\\///////////////________\\\\/////////__\\r\\n\\r\\nVisit and follow!\\r\\n\\r\\n* Website:  https://www.ysec.finance\\r\\n* Twitter:  https://twitter.com/YearnSecure\\r\\n* Telegram: https://t.me/YearnSecure\\r\\n* Medium:   https://yearnsecure.medium.com/\\r\\n\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nstruct PresaleDataAddresses\\r\\n{\\r\\n    address TokenOwnerAddress;\\r\\n    address TokenAddress;\\r\\n    address TokenTimeLock;\\r\\n}\"\r\n    },\r\n    \"/C/GITREPOS/PlatformSolidity/contracts/Models/PresaleDataState.sol\": {\r\n      \"content\": \"/*\\r\\n__/\\\\\\\\\\\\________/\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_        \\r\\n _\\\\///\\\\\\\\\\\\____/\\\\\\\\\\\\/____/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\///////////______/\\\\\\\\\\\\////////__       \\r\\n  ___\\\\///\\\\\\\\\\\\/\\\\\\\\\\\\/_____\\\\//\\\\\\\\\\\\______\\\\///__\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\/___________      \\r\\n   _____\\\\///\\\\\\\\\\\\/________\\\\////\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\______/\\\\\\\\\\\\_____________     \\r\\n    _______\\\\/\\\\\\\\\\\\____________\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\///////______\\\\/\\\\\\\\\\\\_____________    \\r\\n     _______\\\\/\\\\\\\\\\\\_______________\\\\////\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\_____________\\\\//\\\\\\\\\\\\____________   \\r\\n      _______\\\\/\\\\\\\\\\\\________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________\\\\///\\\\\\\\\\\\__________  \\r\\n       _______\\\\/\\\\\\\\\\\\_______\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/___\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_ \\r\\n        _______\\\\///__________\\\\///////////_____\\\\///////////////________\\\\/////////__\\r\\n\\r\\nVisit and follow!\\r\\n\\r\\n* Website:  https://www.ysec.finance\\r\\n* Twitter:  https://twitter.com/YearnSecure\\r\\n* Telegram: https://t.me/YearnSecure\\r\\n* Medium:   https://yearnsecure.medium.com/\\r\\n\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nstruct PresaleDataState{\\r\\n    uint256 TotalTokenAmount;\\r\\n    uint256 Step;\\r\\n    uint256 ContributedEth;\\r\\n    uint256 RaisedFeeEth;\\r\\n    bool Exists;\\r\\n    uint256 RetrievedTokenAmount;\\r\\n    uint256 RetrievedEthAmount;\\r\\n    uint256 NumberOfContributors;\\r\\n}\"\r\n    },\r\n    \"/C/GITREPOS/PlatformSolidity/contracts/Models/PresaleInfo.sol\": {\r\n      \"content\": \"/*\\r\\n__/\\\\\\\\\\\\________/\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_        \\r\\n _\\\\///\\\\\\\\\\\\____/\\\\\\\\\\\\/____/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\///////////______/\\\\\\\\\\\\////////__       \\r\\n  ___\\\\///\\\\\\\\\\\\/\\\\\\\\\\\\/_____\\\\//\\\\\\\\\\\\______\\\\///__\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\/___________      \\r\\n   _____\\\\///\\\\\\\\\\\\/________\\\\////\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\______/\\\\\\\\\\\\_____________     \\r\\n    _______\\\\/\\\\\\\\\\\\____________\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\///////______\\\\/\\\\\\\\\\\\_____________    \\r\\n     _______\\\\/\\\\\\\\\\\\_______________\\\\////\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\_____________\\\\//\\\\\\\\\\\\____________   \\r\\n      _______\\\\/\\\\\\\\\\\\________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________\\\\///\\\\\\\\\\\\__________  \\r\\n       _______\\\\/\\\\\\\\\\\\_______\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/___\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_ \\r\\n        _______\\\\///__________\\\\///////////_____\\\\///////////////________\\\\/////////__\\r\\n\\r\\nVisit and follow!\\r\\n\\r\\n* Website:  https://www.ysec.finance\\r\\n* Twitter:  https://twitter.com/YearnSecure\\r\\n* Telegram: https://t.me/YearnSecure\\r\\n* Medium:   https://yearnsecure.medium.com/\\r\\n\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nstruct PresaleInfo{\\r\\n    string Name;\\r\\n    string Website;\\r\\n    string Telegram;\\r\\n    string Twitter;\\r\\n    string Github;\\r\\n    string Medium;\\r\\n}\"\r\n    },\r\n    \"/C/GITREPOS/PlatformSolidity/contracts/Models/PresaleSettings.sol\": {\r\n      \"content\": \"/*\\r\\n__/\\\\\\\\\\\\________/\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_        \\r\\n _\\\\///\\\\\\\\\\\\____/\\\\\\\\\\\\/____/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\///////////______/\\\\\\\\\\\\////////__       \\r\\n  ___\\\\///\\\\\\\\\\\\/\\\\\\\\\\\\/_____\\\\//\\\\\\\\\\\\______\\\\///__\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\/___________      \\r\\n   _____\\\\///\\\\\\\\\\\\/________\\\\////\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\______/\\\\\\\\\\\\_____________     \\r\\n    _______\\\\/\\\\\\\\\\\\____________\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\///////______\\\\/\\\\\\\\\\\\_____________    \\r\\n     _______\\\\/\\\\\\\\\\\\_______________\\\\////\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\_____________\\\\//\\\\\\\\\\\\____________   \\r\\n      _______\\\\/\\\\\\\\\\\\________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________\\\\///\\\\\\\\\\\\__________  \\r\\n       _______\\\\/\\\\\\\\\\\\_______\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/___\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_ \\r\\n        _______\\\\///__________\\\\///////////_____\\\\///////////////________\\\\/////////__\\r\\n\\r\\nVisit and follow!\\r\\n\\r\\n* Website:  https://www.ysec.finance\\r\\n* Twitter:  https://twitter.com/YearnSecure\\r\\n* Telegram: https://t.me/YearnSecure\\r\\n* Medium:   https://yearnsecure.medium.com/\\r\\n\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport \\\"./TokenAllocation.sol\\\";\\r\\n\\r\\nstruct PresaleSettings{\\r\\n    string Name;\\r\\n    uint256 StartDate;\\r\\n    uint256 EndDate;\\r\\n    uint256 Softcap;\\r\\n    uint256 Hardcap;\\r\\n    uint256 TokenLiqAmount;\\r\\n    uint256 LiqPercentage;\\r\\n    uint256 TokenPresaleAllocation;\\r\\n    bool PermalockLiq;\\r\\n    TokenAllocation[] TokenAllocations;\\r\\n    TokenAllocation LiquidityTokenAllocation;\\r\\n    address Token;\\r\\n    string Website;\\r\\n    string Telegram;\\r\\n    string Twitter;\\r\\n    string Github;\\r\\n    string Medium;\\r\\n}\"\r\n    },\r\n    \"/C/GITREPOS/PlatformSolidity/contracts/Models/TokenAllocation.sol\": {\r\n      \"content\": \"/*\\r\\n__/\\\\\\\\\\\\________/\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_        \\r\\n _\\\\///\\\\\\\\\\\\____/\\\\\\\\\\\\/____/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\///////////______/\\\\\\\\\\\\////////__       \\r\\n  ___\\\\///\\\\\\\\\\\\/\\\\\\\\\\\\/_____\\\\//\\\\\\\\\\\\______\\\\///__\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\/___________      \\r\\n   _____\\\\///\\\\\\\\\\\\/________\\\\////\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\______/\\\\\\\\\\\\_____________     \\r\\n    _______\\\\/\\\\\\\\\\\\____________\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\///////______\\\\/\\\\\\\\\\\\_____________    \\r\\n     _______\\\\/\\\\\\\\\\\\_______________\\\\////\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\_____________\\\\//\\\\\\\\\\\\____________   \\r\\n      _______\\\\/\\\\\\\\\\\\________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________\\\\///\\\\\\\\\\\\__________  \\r\\n       _______\\\\/\\\\\\\\\\\\_______\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/___\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_ \\r\\n        _______\\\\///__________\\\\///////////_____\\\\///////////////________\\\\/////////__\\r\\n\\r\\nVisit and follow!\\r\\n\\r\\n* Website:  https://www.ysec.finance\\r\\n* Twitter:  https://twitter.com/YearnSecure\\r\\n* Telegram: https://t.me/YearnSecure\\r\\n* Medium:   https://yearnsecure.medium.com/\\r\\n\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nstruct TokenAllocation\\r\\n{\\r\\n    string Name;\\r\\n    uint256 Amount;\\r\\n    uint256 RemainingAmount;\\r\\n    uint256 ReleaseDate;\\r\\n    bool IsInterval;\\r\\n    uint256 PercentageOfRelease;\\r\\n    uint256 IntervalOfRelease;\\r\\n    bool Exists;\\r\\n    address Token;\\r\\n}\"\r\n    },\r\n    \"/C/GITREPOS/PlatformSolidity/contracts/YsecPresale.sol\": {\r\n      \"content\": \"/*\\r\\n__/\\\\\\\\\\\\________/\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_        \\r\\n _\\\\///\\\\\\\\\\\\____/\\\\\\\\\\\\/____/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\///////////______/\\\\\\\\\\\\////////__       \\r\\n  ___\\\\///\\\\\\\\\\\\/\\\\\\\\\\\\/_____\\\\//\\\\\\\\\\\\______\\\\///__\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\/___________      \\r\\n   _____\\\\///\\\\\\\\\\\\/________\\\\////\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\______/\\\\\\\\\\\\_____________     \\r\\n    _______\\\\/\\\\\\\\\\\\____________\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\///////______\\\\/\\\\\\\\\\\\_____________    \\r\\n     _______\\\\/\\\\\\\\\\\\_______________\\\\////\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\_____________\\\\//\\\\\\\\\\\\____________   \\r\\n      _______\\\\/\\\\\\\\\\\\________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________\\\\///\\\\\\\\\\\\__________  \\r\\n       _______\\\\/\\\\\\\\\\\\_______\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/___\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_ \\r\\n        _______\\\\///__________\\\\///////////_____\\\\///////////////________\\\\/////////__\\r\\n\\r\\nVisit and follow!\\r\\n\\r\\n* Website:  https://www.ysec.finance\\r\\n* Twitter:  https://twitter.com/YearnSecure\\r\\n* Telegram: https://t.me/YearnSecure\\r\\n* Medium:   https://yearnsecure.medium.com/\\r\\n\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./Models/PresaleData.sol\\\";\\r\\nimport \\\"./Models/PresaleSettings.sol\\\";\\r\\nimport \\\"./Interfaces/IERC20Timelock.sol\\\";\\r\\nimport \\\"./Interfaces/IERC20TimelockFactory.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\r\\n\\r\\ncontract YsecPresale is Ownable, ReentrancyGuard{\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    //steps\\r\\n    //0:initialized\\r\\n    //1:Tokens transfered and ready for contributions\\r\\n    //>1 presale finished\\r\\n    //2:Tokens transfered to locks\\r\\n    //3:Liquidity Added on Uni and ready for withdrawal\\r\\n    //>3 tokens claimable and eth distributable\\r\\n\\r\\n    address public UniswapRouterAddress;\\r\\n    address public UniswapFactoryAddress;\\r\\n    \\r\\n    address public TimelockFactoryAddress;\\r\\n    address public YieldFeeAddress;\\r\\n    address public FeeAddress;\\r\\n\\r\\n    mapping(uint256 => PresaleData) public Presales;\\r\\n    uint256[] public PresaleIndexer;\\r\\n\\r\\n    event TokensTransfered(uint256 presaleId, uint256 amount);\\r\\n    event Contributed(uint256 presaleId, address contributor, uint256 amount);\\r\\n    event RetrievedEth(uint256 presaleId, address contributor, uint256 amount);\\r\\n    event RetrievedTokens(uint256 presaleId, uint256 amount);\\r\\n    event TokensTransferedToLocks(uint256 presaleId, uint256 amount);\\r\\n    event NoTokensTransferedToLocks(uint256 presaleId);\\r\\n    event UniswapLiquidityAdded(uint256 presaleId, bool permaLockedLiq, uint256 amountOfEth, uint256 amountOfTokens);\\r\\n    event ClaimedTokens(uint256 presaleId, address claimer, uint256 amount);\\r\\n    event EthYieldFeeDistributed(uint256 presaleId, address reciever, uint256 amount);\\r\\n    event EthFeeDistributed(uint256 presaleId, address reciever, uint256 amount);\\r\\n    event EthDistributed(uint256 presaleId, address reciever, uint256 amount);\\r\\n\\r\\n    constructor(address timelockFactoryAddress, address yieldFeeAddress, address feeAddress) public{\\r\\n        UniswapRouterAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\r\\n        UniswapFactoryAddress = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\\r\\n        TimelockFactoryAddress = timelockFactoryAddress;\\r\\n        YieldFeeAddress = yieldFeeAddress;\\r\\n        FeeAddress = feeAddress;\\r\\n    }\\r\\n\\r\\n    function SetTimelockFactory(address timelockFactoryAddress) onlyOwner() external{\\r\\n        TimelockFactoryAddress = timelockFactoryAddress;\\r\\n    }\\r\\n\\r\\n    function SetYieldFeeAddress(address yieldFeeAddress) onlyOwner() external{\\r\\n        YieldFeeAddress = yieldFeeAddress;\\r\\n    }\\r\\n\\r\\n    function SetFeeAddress(address feeAddress) onlyOwner() external{\\r\\n        FeeAddress = feeAddress;\\r\\n    }\\r\\n\\r\\n    function SetUniswapRouterAddress(address router) onlyOwner() external{\\r\\n        UniswapRouterAddress = router;\\r\\n    }\\r\\n\\r\\n    function SetUniswapFactoryAddress(address router) onlyOwner() external{\\r\\n        UniswapFactoryAddress = router;\\r\\n    }\\r\\n\\r\\n    function CreatePresale(PresaleSettings memory settings) external returns(uint256 presaleId){\\r\\n        require(settings.EndDate > settings.StartDate, \\\"Do not start before end\\\");\\r\\n        require(settings.StartDate > block.timestamp, \\\"Start in future\\\");\\r\\n        require(settings.Hardcap >= settings.Softcap, \\\"Hardcap has to equal or exceed softcap\\\");\\r\\n\\r\\n        presaleId = PresaleIndexer.length.add(1);\\r\\n\\r\\n        Presales[presaleId].StartDate = settings.StartDate;\\r\\n        Presales[presaleId].EndDate = settings.EndDate;\\r\\n        Presales[presaleId].Softcap = settings.Softcap;\\r\\n        Presales[presaleId].Hardcap = settings.Hardcap;\\r\\n        Presales[presaleId].TokenLiqAmount = settings.TokenLiqAmount;\\r\\n        Presales[presaleId].LiqPercentage = settings.LiqPercentage;\\r\\n        Presales[presaleId].TokenPresaleAllocation = settings.TokenPresaleAllocation;\\r\\n        Presales[presaleId].PermalockLiq = settings.PermalockLiq;\\r\\n        if(!settings.PermalockLiq) require(settings.LiquidityTokenAllocation.ReleaseDate > block.timestamp, \\\"Liquidity allocation not set in future\\\");\\r\\n        Presales[presaleId].LiquidityTokenAllocation = settings.LiquidityTokenAllocation;\\r\\n\\r\\n        Presales[presaleId].Addresses.TokenOwnerAddress = _msgSender();\\r\\n        Presales[presaleId].Addresses.TokenAddress = settings.Token;\\r\\n        Presales[presaleId].Addresses.TokenTimeLock = address(0x0);\\r\\n\\r\\n        Presales[presaleId].State.TotalTokenAmount = 0;\\r\\n        Presales[presaleId].State.Step = 0;\\r\\n        Presales[presaleId].State.ContributedEth = 0;\\r\\n        Presales[presaleId].State.RaisedFeeEth = 0;\\r\\n        Presales[presaleId].State.Exists = true;\\r\\n        Presales[presaleId].State.RetrievedTokenAmount = 0;\\r\\n        Presales[presaleId].State.RetrievedEthAmount = 0;\\r\\n        Presales[presaleId].State.NumberOfContributors = 0;\\r\\n\\r\\n        Presales[presaleId].Info.Name = settings.Name;\\r\\n        Presales[presaleId].Info.Website = settings.Website;\\r\\n        Presales[presaleId].Info.Telegram = settings.Telegram;\\r\\n        Presales[presaleId].Info.Twitter = settings.Twitter;\\r\\n        Presales[presaleId].Info.Github = settings.Github;\\r\\n        Presales[presaleId].Info.Medium = settings.Medium;\\r\\n\\r\\n        Presales[presaleId].State.TotalTokenAmount = Presales[presaleId].State.TotalTokenAmount.add(settings.TokenLiqAmount);\\r\\n        Presales[presaleId].State.TotalTokenAmount = Presales[presaleId].State.TotalTokenAmount.add(settings.TokenPresaleAllocation);\\r\\n        for(uint i=0; i<settings.TokenAllocations.length; i++)\\r\\n        {\\r\\n            require(settings.TokenAllocations[i].ReleaseDate > block.timestamp, \\\"Allocation not set in future\\\");\\r\\n            TokenAllocation memory allocation = settings.TokenAllocations[i];\\r\\n            if(allocation.Token == Presales[presaleId].Addresses.TokenAddress) Presales[presaleId].State.TotalTokenAmount = Presales[presaleId].State.TotalTokenAmount.add(allocation.Amount);\\r\\n            Presales[presaleId].TokenAllocations.push(allocation);\\r\\n        }\\r\\n        PresaleIndexer.push(presaleId);\\r\\n    }\\r\\n\\r\\n    //step 0 -> part of init\\r\\n    function TransferTokens(uint256 presaleId) nonReentrant() RequireTokenOwner(presaleId) external{\\r\\n        RequireStep(presaleId, 0);\\r\\n        require(IERC20(Presales[presaleId].Addresses.TokenAddress).allowance(_msgSender(), address(this)) >= Presales[presaleId].State.TotalTokenAmount , \\\"Transfer of token has not been approved\\\");\\r\\n        IERC20(Presales[presaleId].Addresses.TokenAddress).transferFrom(_msgSender(), address(this), Presales[presaleId].State.TotalTokenAmount);\\r\\n        Presales[presaleId].State.Step = 1;\\r\\n        emit TokensTransfered(presaleId, Presales[presaleId].State.TotalTokenAmount);\\r\\n    }\\r\\n\\r\\n    //step 1 -> contributions open\\r\\n    function Contribute(uint256 presaleId) nonReentrant() public payable{\\r\\n        RequireStep(presaleId, 1);\\r\\n        require(msg.value > 0, \\\"Cannot contribute 0\\\");\\r\\n        require(!PresaleFinished(presaleId), \\\"Presale has already finished\\\");\\r\\n        require(PresaleStarted(presaleId), \\\"Presale has not started yet!\\\");\\r\\n\\r\\n        uint256 amountRecieved = msg.value;\\r\\n        require(Presales[presaleId].State.ContributedEth + amountRecieved <= Presales[presaleId].Hardcap, \\\"Incoming contribution exceeds hardcap\\\");\\r\\n        Presales[presaleId].State.ContributedEth = Presales[presaleId].State.ContributedEth.add(amountRecieved);\\r\\n        Presales[presaleId].State.RaisedFeeEth = Presales[presaleId].State.RaisedFeeEth.add(amountRecieved.div(100).mul(5));//5% is fee\\r\\n        if(Presales[presaleId].EthContributedPerAddress[_msgSender()] == 0) Presales[presaleId].State.NumberOfContributors = Presales[presaleId].State.NumberOfContributors.add(1);\\r\\n        Presales[presaleId].EthContributedPerAddress[_msgSender()] = Presales[presaleId].EthContributedPerAddress[_msgSender()].add(amountRecieved);\\r\\n        emit Contributed(presaleId, _msgSender(), amountRecieved);\\r\\n     }\\r\\n\\r\\n    //step 1 -> in case of failed presale allow users to retrieve invested eth\\r\\n    //https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now\\r\\n    function RetrieveEth(uint256 presaleId, address contributor) nonReentrant() external{\\r\\n        RequireStep(presaleId, 1);\\r\\n        require(!SoftcapMet(presaleId), \\\"Softcap has been met! you are not able to retrieve ETH\\\");\\r\\n        require(PresaleFinished(presaleId), \\\"Presale has not finished! you are not able to retrieve ETH\\\");\\r\\n\\r\\n        uint256 ethContributedForAddress = Presales[presaleId].EthContributedPerAddress[contributor];\\r\\n        require(ethContributedForAddress > 0, \\\"No eth available for withdrawal\\\");\\r\\n        Presales[presaleId].EthContributedPerAddress[contributor] = 0;\\r\\n        (bool success, ) = contributor.call{value:ethContributedForAddress}('');\\r\\n        require(success, \\\"Transfer failed.\\\");\\r\\n        emit RetrievedEth(presaleId, contributor, ethContributedForAddress);\\r\\n    }\\r\\n\\r\\n    //step 1 -> in case of failed presale allow tokenowner to retrieve tokens\\r\\n    function RetrieveTokens(uint256 presaleId) RequireTokenOwner(presaleId) nonReentrant() external{\\r\\n        RequireStep(presaleId, 1);\\r\\n        require(!SoftcapMet(presaleId), \\\"Softcap has been met! you are not able to retrieve ETH\\\");\\r\\n        require(PresaleFinished(presaleId), \\\"Presale has not finished! you are not able to retrieve ETH\\\");\\r\\n        \\r\\n        uint256 remainingAmount = Presales[presaleId].State.TotalTokenAmount.sub(Presales[presaleId].State.RetrievedTokenAmount);\\r\\n        require(remainingAmount > 0, \\\"No remaining tokens for retrieval\\\");\\r\\n        uint256 balance = IERC20(Presales[presaleId].Addresses.TokenAddress).balanceOf(address(this));\\r\\n        require(balance >= remainingAmount, \\\"No tokens left!\\\");\\r\\n\\r\\n        Presales[presaleId].State.RetrievedTokenAmount = Presales[presaleId].State.RetrievedTokenAmount.add(remainingAmount);\\r\\n        IERC20(Presales[presaleId].Addresses.TokenAddress).transfer(_msgSender(), remainingAmount);\\r\\n        emit RetrievedTokens(presaleId, remainingAmount);\\r\\n    }\\r\\n\\r\\n    //step 1 -> transfer tokens to allocated locks in preperation for step 2 \\r\\n    function TransferTokensToLocks(uint256 presaleId) nonReentrant() external{\\r\\n        RequireStep(presaleId, 1);\\r\\n        require(SoftcapMet(presaleId), \\\"Softcap has not been met!\\\");\\r\\n        require(PresaleFinished(presaleId), \\\"Presale has not finished!\\\");\\r\\n        //create timelock\\r\\n        Presales[presaleId].Addresses.TokenTimeLock = IERC20TimelockFactory(TimelockFactoryAddress).CreateTimelock(address(this), Presales[presaleId].Addresses.TokenOwnerAddress);\\r\\n\\r\\n        if(Presales[presaleId].State.TotalTokenAmount.sub(Presales[presaleId].TokenPresaleAllocation).sub(Presales[presaleId].TokenLiqAmount) == 0){\\r\\n            Presales[presaleId].State.Step = 2;\\r\\n            emit NoTokensTransferedToLocks(presaleId);\\r\\n        }else{\\r\\n            //approve all tokens except used for presale and liq\\r\\n            IERC20(Presales[presaleId].Addresses.TokenAddress).approve(Presales[presaleId].Addresses.TokenTimeLock, Presales[presaleId].State.TotalTokenAmount.sub(Presales[presaleId].TokenPresaleAllocation).sub(Presales[presaleId].TokenLiqAmount));\\r\\n            //create and transfer allocations\\r\\n            for(uint i=0; i<Presales[presaleId].TokenAllocations.length; i++)\\r\\n            {\\r\\n                IERC20Timelock(Presales[presaleId].Addresses.TokenTimeLock).AddAllocation(Presales[presaleId].TokenAllocations[i].Name, Presales[presaleId].TokenAllocations[i].Amount, Presales[presaleId].TokenAllocations[i].ReleaseDate, Presales[presaleId].TokenAllocations[i].IsInterval, Presales[presaleId].TokenAllocations[i].PercentageOfRelease, Presales[presaleId].TokenAllocations[i].IntervalOfRelease, Presales[presaleId].Addresses.TokenAddress);\\r\\n            }\\r\\n            Presales[presaleId].State.Step = 2;\\r\\n            emit TokensTransferedToLocks(presaleId, Presales[presaleId].State.TotalTokenAmount.sub(Presales[presaleId].TokenPresaleAllocation).sub(Presales[presaleId].TokenLiqAmount));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //step 2 -> add liquidity to uniswap in preperation for step 3\\r\\n    function AddUniswapLiquidity(uint256 presaleId) nonReentrant() external{\\r\\n        RequireStep(presaleId, 2);\\r\\n        IERC20(Presales[presaleId].Addresses.TokenAddress).approve(UniswapRouterAddress, Presales[presaleId].TokenLiqAmount);//approve unirouter\\r\\n        uint256 amountOfEth = Presales[presaleId].State.ContributedEth.sub(Presales[presaleId].State.RaisedFeeEth).div(100).mul(Presales[presaleId].LiqPercentage);\\r\\n        if(Presales[presaleId].PermalockLiq)//permanently locked liq\\r\\n        {\\r\\n            IUniswapV2Router02(UniswapRouterAddress).addLiquidityETH{value : amountOfEth}(address(Presales[presaleId].Addresses.TokenAddress), Presales[presaleId].TokenLiqAmount, 0, 0, address(0x000000000000000000000000000000000000dEaD), block.timestamp.add(1 days));\\r\\n        }\\r\\n        else// use allocation for locking\\r\\n        {\\r\\n            IUniswapV2Router02(UniswapRouterAddress).addLiquidityETH{value : amountOfEth}(address(Presales[presaleId].Addresses.TokenAddress), Presales[presaleId].TokenLiqAmount, 0, 0, address(this), block.timestamp.add(1 days));\\r\\n            address pairAddress = IUniswapV2Factory(UniswapFactoryAddress).getPair(IUniswapV2Router02(UniswapRouterAddress).WETH(), Presales[presaleId].Addresses.TokenAddress);\\r\\n            IERC20(pairAddress).approve(Presales[presaleId].Addresses.TokenTimeLock, IERC20(pairAddress).balanceOf(address(this)));\\r\\n            IERC20Timelock(Presales[presaleId].Addresses.TokenTimeLock).AddAllocation(Presales[presaleId].LiquidityTokenAllocation.Name, IERC20(pairAddress).balanceOf(address(this)), Presales[presaleId].LiquidityTokenAllocation.ReleaseDate, Presales[presaleId].LiquidityTokenAllocation.IsInterval, Presales[presaleId].LiquidityTokenAllocation.PercentageOfRelease, Presales[presaleId].LiquidityTokenAllocation.IntervalOfRelease, pairAddress);\\r\\n        }\\r\\n        Presales[presaleId].State.RetrievedEthAmount = Presales[presaleId].State.RetrievedEthAmount.add(amountOfEth);\\r\\n        Presales[presaleId].State.Step = 3;\\r\\n        emit UniswapLiquidityAdded(presaleId, Presales[presaleId].PermalockLiq, amountOfEth, Presales[presaleId].TokenLiqAmount);\\r\\n    }\\r\\n\\r\\n    //step 3 -> claim tokens for presale contributors\\r\\n    function ClaimTokens(uint256 presaleId) nonReentrant() external{\\r\\n        RequireStep(presaleId, 3);\\r\\n        require(Presales[presaleId].EthContributedPerAddress[_msgSender()] > 0, \\\"No contributions for address\\\");\\r\\n        require(Presales[presaleId].ClaimedAddress[_msgSender()] == false, \\\"Already claimed for address\\\");\\r\\n\\r\\n        uint256 amountToSend = Presales[presaleId].EthContributedPerAddress[_msgSender()].mul(Presales[presaleId].TokenPresaleAllocation).div(Presales[presaleId].State.ContributedEth);\\r\\n        Presales[presaleId].ClaimedAddress[_msgSender()] = true;\\r\\n        IERC20(Presales[presaleId].Addresses.TokenAddress).transfer(_msgSender(), amountToSend);\\r\\n        emit ClaimedTokens(presaleId, _msgSender(), amountToSend);\\r\\n    }\\r\\n\\r\\n    //step 3 -> distribute eth to presale host and fees to ysec\\r\\n    function DistributeEth(uint256 presaleId) nonReentrant() external{\\r\\n        RequireStep(presaleId, 3);\\r\\n        require(Presales[presaleId].State.ContributedEth.sub(Presales[presaleId].State.RetrievedEthAmount) > 0, \\\"No eth left to distribute\\\");\\r\\n        \\r\\n        (bool successDiv, ) = YieldFeeAddress.call{value: Presales[presaleId].State.RaisedFeeEth.div(2)}('');\\r\\n        require(successDiv, \\\"Transfer to yield fee address failed.\\\");\\r\\n        Presales[presaleId].State.RetrievedEthAmount = Presales[presaleId].State.RetrievedEthAmount.add(Presales[presaleId].State.RaisedFeeEth.div(2));\\r\\n        (bool successFee, ) = FeeAddress.call{value: Presales[presaleId].State.RaisedFeeEth.div(2)}('');\\r\\n        require(successFee, \\\"Transfer to fee address failed.\\\");\\r\\n        Presales[presaleId].State.RetrievedEthAmount = Presales[presaleId].State.RetrievedEthAmount.add(Presales[presaleId].State.RaisedFeeEth.div(2));\\r\\n        uint256 amountSendToOwner = Presales[presaleId].State.ContributedEth.sub(Presales[presaleId].State.RetrievedEthAmount);\\r\\n        (bool successOwner, ) = Presales[presaleId].Addresses.TokenOwnerAddress.call{value: amountSendToOwner}('');\\r\\n        require(successOwner, \\\"Transfer to owner failed.\\\");\\r\\n        Presales[presaleId].State.RetrievedEthAmount = Presales[presaleId].State.RetrievedEthAmount.add(amountSendToOwner);\\r\\n\\r\\n        emit EthYieldFeeDistributed(presaleId, YieldFeeAddress, Presales[presaleId].State.RaisedFeeEth.div(2));\\r\\n        emit EthFeeDistributed(presaleId, FeeAddress, Presales[presaleId].State.RaisedFeeEth.div(2));\\r\\n        emit EthDistributed(presaleId, Presales[presaleId].Addresses.TokenOwnerAddress, amountSendToOwner);\\r\\n    }\\r\\n\\r\\n    modifier RequireTokenOwner(uint256 presaleId){\\r\\n        ValidPresale(presaleId);\\r\\n        require(Presales[presaleId].Addresses.TokenOwnerAddress == _msgSender(), \\\"Sender is not owner of tokens!\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function PresaleStarted(uint256 presaleId) public view returns(bool){\\r\\n        return Presales[presaleId].State.Step > 0 && Presales[presaleId].StartDate <= block.timestamp && !PresaleFinished(presaleId);\\r\\n    }\\r\\n\\r\\n     function PresaleFinished(uint256 presaleId) public view returns(bool){\\r\\n        return HardcapMet(presaleId) || Presales[presaleId].EndDate <= block.timestamp;\\r\\n    }\\r\\n\\r\\n    function SoftcapMet(uint256 presaleId) public view returns (bool){\\r\\n        return Presales[presaleId].State.ContributedEth >= Presales[presaleId].Softcap;\\r\\n    }\\r\\n\\r\\n    function HardcapMet(uint256 presaleId) public view returns (bool){\\r\\n        return Presales[presaleId].State.ContributedEth >= Presales[presaleId].Hardcap;\\r\\n    }\\r\\n\\r\\n    function RequireStep(uint256 presaleId, uint256 step) private{\\r\\n        require(Presales[presaleId].State.Step == step, \\\"Required step is not active!\\\");\\r\\n    }\\r\\n\\r\\n    function ValidPresale(uint256 presaleId) private{\\r\\n        require(Presales[presaleId].State.Exists, \\\"Presale does not exist\\\");\\r\\n    }\\r\\n    \\r\\n    function PresaleIndexerLength() public view returns(uint256){\\r\\n        return PresaleIndexer.length;\\r\\n    }\\r\\n\\r\\n    function GetTokenAllocations(uint256 presaleId) public view returns(TokenAllocation[] memory){\\r\\n        TokenAllocation[] memory result = new TokenAllocation[](Presales[presaleId].TokenAllocations.length);\\r\\n        for(uint i=0; i< Presales[presaleId].TokenAllocations.length; i++)\\r\\n        {\\r\\n            TokenAllocation storage allocation = Presales[presaleId].TokenAllocations[i];\\r\\n            result[i] = allocation;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function GetEthContributedForAddress(uint256 presaleId, address forAddress) public view returns(uint256){\\r\\n        return Presales[presaleId].EthContributedPerAddress[forAddress];\\r\\n    }\\r\\n\\r\\n    function GetAmountOfTokensForAddress(uint256 presaleId, address forAddress) public view returns(uint256){\\r\\n        return Presales[presaleId].EthContributedPerAddress[forAddress].mul(Presales[presaleId].TokenPresaleAllocation).div(Presales[presaleId].State.ContributedEth);\\r\\n    }\\r\\n\\r\\n    function GetHardcapAmountOfTokensForAddress(uint256 presaleId, address forAddress) public view returns(uint256){\\r\\n        return Presales[presaleId].EthContributedPerAddress[forAddress].mul(Presales[presaleId].TokenPresaleAllocation).div(Presales[presaleId].Hardcap);\\r\\n    }\\r\\n\\r\\n    function GetRatio(uint256 presaleId) public view returns(uint256){\\r\\n        uint256 oneEth = 1000000000000000000;\\r\\n        return oneEth.mul(Presales[presaleId].TokenPresaleAllocation).div(Presales[presaleId].State.ContributedEth);\\r\\n    }\\r\\n\\r\\n    function GetNumberOfContributors(uint256 presaleId) public view returns(uint256){\\r\\n        return Presales[presaleId].State.NumberOfContributors;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"timelockFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"yieldFeeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Contributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reciever\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reciever\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthFeeDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reciever\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthYieldFeeDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"}],\"name\":\"NoTokensTransferedToLocks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RetrievedEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RetrievedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensTransferedToLocks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"permaLockedLiq\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOfEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"UniswapLiquidityAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"}],\"name\":\"AddUniswapLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"}],\"name\":\"ClaimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"}],\"name\":\"Contribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"Name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"StartDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"EndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Softcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Hardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TokenLiqAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LiqPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TokenPresaleAllocation\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"PermalockLiq\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"Name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RemainingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ReleaseDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"IsInterval\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"PercentageOfRelease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"IntervalOfRelease\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"Exists\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"Token\",\"type\":\"address\"}],\"internalType\":\"struct TokenAllocation[]\",\"name\":\"TokenAllocations\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"Name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RemainingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ReleaseDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"IsInterval\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"PercentageOfRelease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"IntervalOfRelease\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"Exists\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"Token\",\"type\":\"address\"}],\"internalType\":\"struct TokenAllocation\",\"name\":\"LiquidityTokenAllocation\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"Token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"Website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Telegram\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Twitter\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Github\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Medium\",\"type\":\"string\"}],\"internalType\":\"struct PresaleSettings\",\"name\":\"settings\",\"type\":\"tuple\"}],\"name\":\"CreatePresale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"}],\"name\":\"DistributeEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FeeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"forAddress\",\"type\":\"address\"}],\"name\":\"GetAmountOfTokensForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"forAddress\",\"type\":\"address\"}],\"name\":\"GetEthContributedForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"forAddress\",\"type\":\"address\"}],\"name\":\"GetHardcapAmountOfTokensForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"}],\"name\":\"GetNumberOfContributors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"}],\"name\":\"GetRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"}],\"name\":\"GetTokenAllocations\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"Name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RemainingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ReleaseDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"IsInterval\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"PercentageOfRelease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"IntervalOfRelease\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"Exists\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"Token\",\"type\":\"address\"}],\"internalType\":\"struct TokenAllocation[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"}],\"name\":\"HardcapMet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"}],\"name\":\"PresaleFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PresaleIndexer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PresaleIndexerLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"}],\"name\":\"PresaleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Presales\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"Name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Telegram\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Twitter\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Github\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Medium\",\"type\":\"string\"}],\"internalType\":\"struct PresaleInfo\",\"name\":\"Info\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"StartDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"EndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Softcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Hardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TokenLiqAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LiqPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TokenPresaleAllocation\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"PermalockLiq\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"Name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RemainingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ReleaseDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"IsInterval\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"PercentageOfRelease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"IntervalOfRelease\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"Exists\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"Token\",\"type\":\"address\"}],\"internalType\":\"struct TokenAllocation\",\"name\":\"LiquidityTokenAllocation\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"TokenOwnerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"TokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"TokenTimeLock\",\"type\":\"address\"}],\"internalType\":\"struct PresaleDataAddresses\",\"name\":\"Addresses\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"TotalTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Step\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ContributedEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RaisedFeeEth\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"Exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"RetrievedTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RetrievedEthAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NumberOfContributors\",\"type\":\"uint256\"}],\"internalType\":\"struct PresaleDataState\",\"name\":\"State\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"RetrieveEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"}],\"name\":\"RetrieveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeAddress\",\"type\":\"address\"}],\"name\":\"SetFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"timelockFactoryAddress\",\"type\":\"address\"}],\"name\":\"SetTimelockFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"SetUniswapFactoryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"SetUniswapRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"yieldFeeAddress\",\"type\":\"address\"}],\"name\":\"SetYieldFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"}],\"name\":\"SoftcapMet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TimelockFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"}],\"name\":\"TransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"}],\"name\":\"TransferTokensToLocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UniswapFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UniswapRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"YieldFeeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"YsecPresale","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000fc80f8251a370f6abecf9748ab5240d06d34bc8e0000000000000000000000008b406df06309758c00fcb52c22e9364c5cc17b0d0000000000000000000000008b406df06309758c00fcb52c22e9364c5cc17b0d","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}