{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SealedSwapper.sol\": {\r\n      \"content\": \"// Be Name KHODA\\n// Bime Abolfazl\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n\\ninterface IBPool {\\n\\tfunction totalSupply() external view returns (uint);\\n\\tfunction exitPool(uint poolAmountIn, uint[] calldata minAmountsOut) external;\\n\\tfunction exitswapPoolAmountIn(address tokenOut, uint poolAmountIn, uint minAmountOut) external returns (uint tokenAmountOut);\\n\\tfunction transferFrom(address src, address dst, uint amt) external returns (bool);\\n}\\n\\ninterface IERC20 {\\n\\tfunction approve(address dst, uint amt) external returns (bool);\\n\\tfunction totalSupply() external view returns (uint);\\n\\tfunction burn(address from, uint amount) external;\\n\\tfunction transfer(address recipient, uint amount) external returns (bool);\\n\\tfunction transferFrom(address src, address dst, uint amt) external returns (bool);\\n\\tfunction balanceOf(address owner) external view returns (uint);\\n}\\n\\ninterface Vault {\\n\\tfunction lockFor(uint amount, address _user) external returns (uint);\\n}\\n\\ninterface IUniswapV2Pair {\\n\\tfunction getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n}\\n\\ninterface IUniswapV2Router02 {\\n\\tfunction removeLiquidityETH(\\n\\t\\taddress token,\\n\\t\\tuint liquidity,\\n\\t\\tuint amountTokenMin,\\n\\t\\tuint amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external returns (uint amountToken, uint amountETH);\\n\\n\\tfunction removeLiquidity(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint liquidity,\\n\\t\\tuint amountAMin,\\n\\t\\tuint amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external returns (uint amountA, uint amountB);\\n\\n\\tfunction swapExactTokensForTokens(\\n\\t\\tuint amountIn,\\n\\t\\tuint amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external returns (uint[] memory amounts);\\n\\n\\tfunction swapExactTokensForETH(\\n\\t\\tuint amountIn,\\n\\t\\tuint amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external returns (uint[] memory amounts);\\n\\n\\tfunction getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface AutomaticMarketMaker {\\n\\tfunction calculateSaleReturn(uint tokenAmount) external view returns (uint);\\n\\tfunction calculatePurchaseReturn(uint etherAmount) external view returns (uint);\\n\\tfunction buy(uint _tokenAmount) external payable;\\n\\tfunction sell(uint tokenAmount, uint _etherAmount) external;\\n\\tfunction withdrawPayments(address payable payee) external;\\n}\\n\\ncontract SealedSwapper is AccessControl, ReentrancyGuard {\\n\\n\\tbytes32 public constant ADMIN_SWAPPER_ROLE = keccak256(\\\"ADMIN_SWAPPER_ROLE\\\");\\n\\tbytes32 public constant TRUSTY_ROLE = keccak256(\\\"TRUSTY_ROLE\\\");\\n\\t\\n\\tIBPool public bpt;\\n\\tIUniswapV2Router02 public uniswapRouter;\\n\\tAutomaticMarketMaker public AMM;\\n\\tVault public sdeaVault;\\n\\taddress public sdeus;\\n\\taddress public sdea;\\n\\taddress public sUniDD;\\n\\taddress public sUniDE;\\n\\taddress public sUniDU;\\n\\taddress public dea;\\n\\taddress public deus;\\n\\taddress public usdc;\\n\\taddress public uniDD;\\n\\taddress public uniDU;\\n\\taddress public uniDE;\\n\\n\\taddress[] public usdc2wethPath =  [0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48, 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2];\\n\\taddress[] public deus2deaPath =  [0x3b62F3820e0B035cc4aD602dECe6d796BC325325, 0x80aB141F324C3d6F2b18b030f1C4E95d4d658778];\\n\\t\\n\\n\\tuint public MAX_INT = type(uint).max;\\n\\tuint public scale = 1e18;\\n\\tuint public DDRatio;\\n\\tuint public DERatio;\\n\\tuint public DURatio;\\n\\tuint public deusRatio;\\n\\tuint public DUVaultRatio;\\n\\n\\tevent Swap(address user, address tokenIn, address tokenOut, uint amountIn, uint amountOut);\\n\\n\\tconstructor (\\n\\t\\taddress _uniswapRouter,\\n\\t\\taddress _bpt,\\n\\t\\taddress _amm,\\n\\t\\taddress _sdeaVault,\\n\\t\\tuint _DERatio,\\n\\t\\tuint _DURatio,\\n\\t\\tuint _DDRatio,\\n\\t\\tuint _deusRatio,\\n\\t\\tuint _DUVaultRatio\\n\\t) ReentrancyGuard() {\\n\\t\\t_setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\t\\t_setupRole(TRUSTY_ROLE, msg.sender);\\n\\t\\tuniswapRouter = IUniswapV2Router02(_uniswapRouter);\\n\\t\\tbpt = IBPool(_bpt);\\n\\t\\tAMM = AutomaticMarketMaker(_amm);\\n\\t\\tsdeaVault = Vault(_sdeaVault);\\n\\t\\tDDRatio = _DDRatio;\\n\\t\\tDURatio = _DURatio;\\n\\t\\tDERatio = _DERatio;\\n\\t\\tdeusRatio = _deusRatio;\\n\\t\\tDUVaultRatio = _DUVaultRatio;\\n\\t}\\n\\t\\n\\tfunction init(\\n\\t\\taddress _sdea,\\n\\t\\taddress _sdeus,\\n\\t\\taddress _sUniDD,\\n\\t\\taddress _sUniDE,\\n\\t\\taddress _sUniDU,\\n\\t\\taddress _dea,\\n\\t\\taddress _deus,\\n\\t\\taddress _usdc,\\n\\t\\taddress _uniDD,\\n\\t\\taddress _uniDU,\\n\\t\\taddress _uniDE\\n\\t) external {\\n\\t\\trequire(hasRole(TRUSTY_ROLE, msg.sender), \\\"SEALED_SWAPPER: Caller is not a TRUSTY\\\");\\n\\t\\tsdea = _sdea;\\n\\t\\tsdeus = _sdeus;\\n\\t\\tsUniDD = _sUniDD;\\n\\t\\tsUniDE = _sUniDE;\\n\\t\\tsUniDU = _sUniDU;\\n\\t\\tdea = _dea;\\n\\t\\tdeus = _deus;\\n\\t\\tusdc = _usdc;\\n\\t\\tuniDD = _uniDD;\\n\\t\\tuniDU = _uniDU;\\n\\t\\tuniDE = _uniDE;\\n\\t\\tIERC20(dea).approve(address(uniswapRouter), MAX_INT);\\n\\t\\tIERC20(deus).approve(address(uniswapRouter), MAX_INT);\\n\\t\\tIERC20(usdc).approve(address(uniswapRouter), MAX_INT);\\n\\t\\tIERC20(uniDD).approve(address(uniswapRouter), MAX_INT);\\n\\t\\tIERC20(uniDE).approve(address(uniswapRouter), MAX_INT);\\n\\t\\tIERC20(uniDU).approve(address(uniswapRouter), MAX_INT);\\n\\t\\tIERC20(dea).approve(address(sdeaVault), MAX_INT);\\n\\t}\\n\\n\\tfunction setRatios(uint _DERatio, uint _DURatio, uint _DDRatio, uint _deusRatio, uint _DUVaultRatio) external {\\n\\t\\trequire(hasRole(TRUSTY_ROLE, msg.sender), \\\"SEALED_SWAPPER: Caller is not a TRUSTY\\\");\\n\\t\\tDDRatio = _DDRatio;\\n\\t\\tDURatio = _DURatio;\\n\\t\\tDERatio = _DERatio;\\n\\t\\tdeusRatio = _deusRatio;\\n\\t\\tDUVaultRatio = _DUVaultRatio;\\n\\t}\\n\\n\\tfunction approve(address token, address recipient, uint amount) external {\\n\\t\\trequire(hasRole(TRUSTY_ROLE, msg.sender), \\\"SEALED_SWAPPER: Caller is not a TRUSTY\\\");\\n\\t\\tIERC20(token).approve(recipient, amount);\\n\\t}\\n\\n\\tfunction bpt2eth(uint poolAmountIn, uint[] memory minAmountsOut) public nonReentrant() {\\n\\t\\tbpt.transferFrom(msg.sender, address(this), poolAmountIn);\\n\\t\\tuint deaAmount = bpt.exitswapPoolAmountIn(dea, poolAmountIn, minAmountsOut[0]);\\n\\t\\tuint deusAmount = uniswapRouter.swapExactTokensForTokens(deaAmount, minAmountsOut[1], deus2deaPath, address(this), block.timestamp + 1 days)[1];\\n\\t\\tuint ethAmount = AMM.calculateSaleReturn(deusAmount);\\n\\t\\tAMM.sell(deusAmount, minAmountsOut[2]);\\n\\t\\tAMM.withdrawPayments(payable(address(this)));\\n\\t\\tpayable(msg.sender).transfer(ethAmount);\\n\\n\\t\\temit Swap(msg.sender, address(bpt), address(0), poolAmountIn, ethAmount);\\n\\t}\\n\\n\\tfunction deus2dea(uint amountIn) internal returns(uint) {\\n\\t\\treturn uniswapRouter.swapExactTokensForTokens(amountIn, 1, deus2deaPath, address(this), block.timestamp + 1 days)[1];\\n\\t}\\n\\n\\tfunction bpt2sdea(uint poolAmountIn, uint minAmountOut) public nonReentrant() {\\n\\t\\tbpt.transferFrom(msg.sender, address(this), poolAmountIn);\\n\\n\\t\\tuint deaAmount = bpt.exitswapPoolAmountIn(dea, poolAmountIn, minAmountOut);\\n\\t\\tuint sdeaAmount = sdeaVault.lockFor(deaAmount, address(this));\\n\\n\\t\\tIERC20(sdea).transfer(msg.sender, sdeaAmount);\\n\\t\\temit Swap(msg.sender, address(bpt), sdea, poolAmountIn, sdeaAmount);\\n\\t}\\n\\n\\tfunction sdea2dea(uint amount, address recipient) external nonReentrant() {\\n\\t\\trequire(hasRole(ADMIN_SWAPPER_ROLE, msg.sender), \\\"SEALED_SWAPPER: Caller is not an ADMIN_SWAPPER\\\");\\n\\t\\tIERC20(sdea).burn(msg.sender, amount);\\n\\t\\tIERC20(dea).transfer(recipient, amount);\\n\\t\\t\\n\\t\\temit Swap(recipient, sdea, dea, amount, amount);\\n\\t}\\n\\n\\tfunction sdeus2deus(uint amount, address recipient) external nonReentrant() {\\n\\t\\trequire(hasRole(ADMIN_SWAPPER_ROLE, msg.sender), \\\"SEALED_SWAPPER: Caller is not an ADMIN_SWAPPER\\\");\\n\\t\\tIERC20(sdeus).burn(msg.sender, amount);\\n\\t\\tIERC20(deus).transfer(recipient, amount);\\n\\n\\t\\temit Swap(recipient, sdeus, deus, amount, amount);\\n\\t}\\n\\n\\tfunction sUniDE2UniDE(uint amount, address recipient) external nonReentrant() {\\n\\t\\trequire(hasRole(ADMIN_SWAPPER_ROLE, msg.sender), \\\"SEALED_SWAPPER: Caller is not an ADMIN_SWAPPER\\\");\\n\\t\\tIERC20(sUniDE).burn(msg.sender, amount);\\n\\t\\tIERC20(uniDE).transfer(recipient, amount);\\n\\n\\t\\temit Swap(recipient, sUniDE, uniDE, amount, amount);\\n\\t}\\n\\n\\tfunction sUniDD2UniDD(uint amount, address recipient) external nonReentrant() {\\n\\t\\trequire(hasRole(ADMIN_SWAPPER_ROLE, msg.sender), \\\"SEALED_SWAPPER: Caller is not an ADMIN_SWAPPER\\\");\\n\\t\\tIERC20(sUniDD).burn(msg.sender, amount);\\n\\t\\tIERC20(uniDD).transfer(recipient, amount);\\n\\n\\t\\temit Swap(recipient, sUniDD, uniDD, amount, amount);\\n\\t}\\n\\n\\tfunction sUniDU2UniDU(uint amount, address recipient) external nonReentrant() {\\n\\t\\trequire(hasRole(ADMIN_SWAPPER_ROLE, msg.sender), \\\"SEALED_SWAPPER: Caller is not an ADMIN_SWAPPER\\\");\\n\\t\\tIERC20(sUniDU).burn(msg.sender, amount);\\n\\t\\tIERC20(uniDU).transfer(recipient, amount * DUVaultRatio / scale);\\n\\n\\t\\temit Swap(recipient, sUniDU, uniDU, amount, amount * DUVaultRatio / scale);\\n\\t}\\n\\n\\tfunction calcExitAmount(address token, uint Predeemed) public view returns(uint) {\\n\\t\\tuint Psupply = bpt.totalSupply();\\n\\t\\tuint Bk = IERC20(token).balanceOf(address(bpt));\\n\\t\\tuint ratio = Predeemed * scale / Psupply;\\n        return Bk * ratio / scale;\\n\\t}\\n\\n\\tfunction bpt2sdea(\\n\\t\\tuint poolAmountIn,\\n\\t\\tuint[] memory balancerMinAmountsOut,\\n\\t\\tuint minAmountOut\\n\\t) external nonReentrant() {\\n\\t\\tbpt.transferFrom(msg.sender, address(this), poolAmountIn);\\n\\t\\tuint deaAmount = calcExitAmount(dea, poolAmountIn);\\n\\t\\tuint sdeaAmount = calcExitAmount(sdea, poolAmountIn);\\n\\t\\tuint sdeusAmount = calcExitAmount(sdeus, poolAmountIn);\\n\\t\\tuint sUniDDAmount = calcExitAmount(sUniDD, poolAmountIn);\\n\\t\\tuint sUniDEAmount = calcExitAmount(sUniDE, poolAmountIn);\\n\\t\\tuint sUniDUAmount = calcExitAmount(sUniDU, poolAmountIn);\\n\\n\\t\\tbpt.exitPool(poolAmountIn, balancerMinAmountsOut);\\n\\n\\t\\tIERC20(sdeus).burn(address(this), sdeusAmount);\\n\\t\\tdeaAmount += deus2dea(sdeusAmount * deusRatio / scale);\\n\\n\\t\\tIERC20(sUniDE).burn(address(this), sUniDEAmount);\\n\\t\\tdeaAmount += uniDE2dea(sUniDEAmount * DERatio / scale);\\n\\n\\t\\tIERC20(sUniDU).burn(address(this), sUniDUAmount);\\n\\t\\tdeaAmount += uniDU2dea(sUniDUAmount * DURatio / scale);\\n\\n\\t\\tIERC20(sUniDD).burn(address(this), sUniDDAmount);\\n\\t\\tdeaAmount += uniDD2dea(sUniDDAmount * DDRatio / scale);\\n\\n\\t\\trequire(deaAmount + sdeaAmount >= minAmountOut, \\\"SEALED_SWAPPER: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n\\n\\t\\tsdeaVault.lockFor(deaAmount, address(this));\\n\\t\\tIERC20(sdea).transfer(msg.sender, deaAmount + sdeaAmount);\\n\\n\\t\\temit Swap(msg.sender, address(bpt), sdea, poolAmountIn, deaAmount + sdeaAmount);\\n\\t}\\n\\n\\n\\n\\tfunction uniDD2dea(uint sUniDDAmount) internal returns(uint) {\\n\\t\\t(uint deusAmount, uint deaAmount) = uniswapRouter.removeLiquidity(deus, dea, sUniDDAmount, 1, 1, address(this), block.timestamp + 1 days);\\n\\n\\t\\tuint deaAmount2 = uniswapRouter.swapExactTokensForTokens(deusAmount, 1, deus2deaPath, address(this), block.timestamp + 1 days)[1];\\n\\n\\t\\treturn deaAmount + deaAmount2;\\n\\t}\\n\\n\\tfunction sUniDD2sdea(uint sUniDDAmount, uint minAmountOut) public nonReentrant() {\\n\\t\\tIERC20(sUniDD).burn(msg.sender, sUniDDAmount);\\n\\n\\t\\tuint deaAmount = uniDD2dea(sUniDDAmount * DDRatio / scale);\\n\\n\\t\\trequire(deaAmount >= minAmountOut, \\\"SEALED_SWAPPER: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n\\t\\tsdeaVault.lockFor(deaAmount, address(this));\\n\\t\\tIERC20(sdea).transfer(msg.sender, deaAmount);\\n\\n\\t\\temit Swap(msg.sender, uniDD, sdea, sUniDDAmount, deaAmount);\\n\\t}\\n\\n\\n\\tfunction uniDU2dea(uint sUniDUAmount) internal returns(uint) {\\n\\t\\t(uint deaAmount, uint usdcAmount) = uniswapRouter.removeLiquidity(dea, usdc, (sUniDUAmount * DUVaultRatio / scale), 1, 1, address(this), block.timestamp + 1 days);\\n\\n\\t\\tuint ethAmount = uniswapRouter.swapExactTokensForETH(usdcAmount, 1, usdc2wethPath, address(this), block.timestamp + 1 days)[1];\\n\\n\\t\\tuint deusAmount = AMM.calculatePurchaseReturn(ethAmount);\\n\\t\\tAMM.buy{value: ethAmount}(deusAmount);\\n\\t\\t\\n\\t\\tuint deaAmount2 = uniswapRouter.swapExactTokensForTokens(deusAmount, 1, deus2deaPath, address(this), block.timestamp + 1 days)[1];\\n\\n\\t\\treturn deaAmount + deaAmount2;\\n\\t}\\n\\t\\n\\n\\tfunction sUniDU2sdea(uint sUniDUAmount, uint minAmountOut) public nonReentrant() {\\n\\t\\tIERC20(sUniDU).burn(msg.sender, sUniDUAmount);\\n\\n\\t\\tuint deaAmount = uniDU2dea(sUniDUAmount * DURatio / scale);\\n\\n\\t\\trequire(deaAmount >= minAmountOut, \\\"SEALED_SWAPPER: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n\\t\\tsdeaVault.lockFor(deaAmount, address(this));\\n\\t\\tIERC20(sdea).transfer(msg.sender, deaAmount);\\n\\t\\t\\n\\t\\temit Swap(msg.sender, uniDU, sdea, sUniDUAmount, deaAmount);\\n\\t}\\n\\n\\n\\tfunction uniDE2dea(uint sUniDEAmount) internal returns(uint) {\\n\\t\\t(uint deusAmount, uint ethAmount) = uniswapRouter.removeLiquidityETH(deus, sUniDEAmount, 1, 1, address(this), block.timestamp + 1 days);\\n\\t\\tuint deusAmount2 = AMM.calculatePurchaseReturn(ethAmount);\\n\\t\\tAMM.buy{value: ethAmount}(deusAmount2);\\n\\t\\tuint deaAmount = uniswapRouter.swapExactTokensForTokens(deusAmount + deusAmount2, 1, deus2deaPath, address(this), block.timestamp + 1 days)[1];\\n\\t\\treturn deaAmount;\\n\\t}\\n\\n\\tfunction sUniDE2sdea(uint sUniDEAmount, uint minAmountOut) public nonReentrant() {\\n\\t\\tIERC20(sUniDE).burn(msg.sender, sUniDEAmount);\\n\\n\\t\\tuint deaAmount = uniDE2dea(sUniDEAmount * DERatio / scale);\\n\\n\\t\\trequire(deaAmount >= minAmountOut, \\\"SEALED_SWAPPER: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n\\t\\tsdeaVault.lockFor(deaAmount, address(this));\\n\\t\\tIERC20(sdea).transfer(msg.sender, deaAmount);\\n\\n\\t\\temit Swap(msg.sender, uniDE, sdea, sUniDEAmount, deaAmount);\\n\\t}\\n\\n\\tfunction withdraw(address token, uint amount, address to) public {\\n\\t\\trequire(hasRole(TRUSTY_ROLE, msg.sender), \\\"SEALED_SWAPPER: Caller is not a TRUSTY\\\");\\n\\t\\tIERC20(token).transfer(to, amount);\\n\\t}\\n\\n\\tfunction withdrawEther(uint amount, address payable to) public {\\n\\t\\trequire(hasRole(TRUSTY_ROLE, msg.sender), \\\"SEALED_SWAPPER: Caller is not a TRUSTY\\\");\\n\\t\\tto.transfer(amount);\\n\\t}\\n\\t\\n\\treceive() external payable {}\\n\\t\\n\\t//--------- View functions --------- //\\n\\n\\tfunction minAmountCaculator(address pair, uint amount) public view returns(uint, uint) {\\n\\t\\t(uint reserve1, uint reserve2, ) = IUniswapV2Pair(pair).getReserves();\\n\\t\\tuint totalSupply = IERC20(pair).totalSupply();\\n\\t\\treturn (amount * reserve1 / totalSupply, amount * reserve2 / totalSupply);\\n\\t}\\n\\n\\tfunction estimateBpt2SDeaAmount(uint poolAmountIn) public view returns(uint[6] memory, uint) {\\n\\t\\tuint deaAmount = calcExitAmount(dea, poolAmountIn);\\n\\t\\tuint sUniDDAmount = calcExitAmount(sUniDD, poolAmountIn);\\n\\t\\tuint sUniDUAmount = calcExitAmount(sUniDU, poolAmountIn);\\n\\t\\tuint sUniDEAmount = calcExitAmount(sUniDE, poolAmountIn);\\n\\t\\tuint balancerSdeaAmount = calcExitAmount(sdea, poolAmountIn);\\n\\t\\tuint sdeusAmount = calcExitAmount(sdeus, poolAmountIn);\\n\\n\\t\\tuint sdeaAmount = balancerSdeaAmount;\\n\\t\\tsdeaAmount += deaAmount;\\n\\t\\tsdeaAmount += getSUniDD2SDeaAmount(sUniDDAmount);\\n\\t\\tsdeaAmount += getSUniDU2SDeaAmount(sUniDUAmount);\\n\\t\\tsdeaAmount += getSUniDE2SDeaAmount(sUniDEAmount);\\n\\t\\tsdeaAmount += uniswapRouter.getAmountsOut(sdeusAmount * deusRatio / scale, deus2deaPath)[1];\\n\\n\\t\\treturn ([deaAmount, sUniDDAmount, sUniDUAmount, sUniDEAmount, balancerSdeaAmount, sdeusAmount], sdeaAmount);\\n\\t}\\n\\tfunction getSUniDU2SDeaAmount(uint amountIn) public view returns(uint) {\\n\\t\\t(uint deaAmount, uint usdcAmount) = minAmountCaculator(uniDU, (amountIn * DUVaultRatio / scale));\\n\\t\\tuint ethAmount = uniswapRouter.getAmountsOut(usdcAmount, usdc2wethPath)[1];\\n\\t\\tuint deusAmount = AMM.calculatePurchaseReturn(ethAmount);\\n\\t\\tuint deaAmount2 = uniswapRouter.getAmountsOut(deusAmount, deus2deaPath)[1];\\n\\t\\treturn (deaAmount + deaAmount2) * DURatio / scale;\\n\\t}\\n\\n\\tfunction uniPairGetAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\n        uint amountInWithFee = amountIn * 997;\\n        uint numerator = amountInWithFee * reserveOut;\\n        uint denominator = reserveIn * 1000 + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n\\tfunction getSUniDD2SDeaAmount(uint amountIn) public view returns(uint) {\\n\\t\\t(uint deusReserve, uint deaReserve, ) = IUniswapV2Pair(uniDD).getReserves();\\n\\t\\t(uint deusAmount, uint deaAmount) = minAmountCaculator(uniDD, amountIn);\\n\\t\\tuint deaAmount2 = uniPairGetAmountOut(deusAmount, deusReserve - deusAmount, deaReserve - deaAmount);\\n\\t\\treturn (deaAmount + deaAmount2) * DDRatio / scale;\\n\\t}\\n\\t\\n\\tfunction getSUniDE2SDeaAmount(uint amountIn) public view returns(uint) {\\n\\t\\t(uint deusAmount, uint ethAmount) = minAmountCaculator(uniDE, amountIn);\\n\\t\\tuint deusAmount2 = AMM.calculatePurchaseReturn(ethAmount);\\n\\t\\tuint deaAmount = uniswapRouter.getAmountsOut(deusAmount + deusAmount2, deus2deaPath)[1];\\n\\t\\treturn deaAmount * DERatio / scale;\\n\\t}\\n}\\n\\n// Dar panahe Khoda\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if(!hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\n                \\\"AccessControl: account \\\",\\n                Strings.toHexString(uint160(account), 20),\\n                \\\" is missing role \\\",\\n                Strings.toHexString(uint256(role), 32)\\n            )));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bpt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_amm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sdeaVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_DERatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_DURatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_DDRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deusRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_DUVaultRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_SWAPPER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AMM\",\"outputs\":[{\"internalType\":\"contract AutomaticMarketMaker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DDRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DERatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DURatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DUVaultRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_INT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRUSTY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bpt\",\"outputs\":[{\"internalType\":\"contract IBPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"}],\"name\":\"bpt2eth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balancerMinAmountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"bpt2sdea\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"bpt2sdea\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Predeemed\",\"type\":\"uint256\"}],\"name\":\"calcExitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dea\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deus2deaPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deusRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolAmountIn\",\"type\":\"uint256\"}],\"name\":\"estimateBpt2SDeaAmount\",\"outputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"\",\"type\":\"uint256[6]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getSUniDD2SDeaAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getSUniDE2SDeaAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getSUniDU2SDeaAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sdea\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sdeus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sUniDD\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sUniDE\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sUniDU\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dea\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_deus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniDD\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniDU\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniDE\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"minAmountCaculator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sUniDD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sUniDD2UniDD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sUniDDAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"sUniDD2sdea\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sUniDE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sUniDE2UniDE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sUniDEAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"sUniDE2sdea\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sUniDU\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sUniDU2UniDU\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sUniDUAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"sUniDU2sdea\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sdea\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sdea2dea\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sdeaVault\",\"outputs\":[{\"internalType\":\"contract Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sdeus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sdeus2deus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_DERatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_DURatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_DDRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deusRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_DUVaultRatio\",\"type\":\"uint256\"}],\"name\":\"setRatios\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniDD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniDE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniDU\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usdc2wethPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"SealedSwapper","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d0000000000000000000000001dc2948b6db34e38291090b825518c1e8346938b000000000000000000000000d77700fc3c78d1cb3acb1a9eac891ff59bc7946d0000000000000000000000001591da306e9726cf8a60bff1ce96d7714d7b24cd0000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000009184e72a000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}