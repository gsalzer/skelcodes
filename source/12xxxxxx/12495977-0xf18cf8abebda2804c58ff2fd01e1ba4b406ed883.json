{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.4.13;\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\ncontract DSGuardEvents {\r\n    event LogPermit(\r\n        bytes32 indexed src,\r\n        bytes32 indexed dst,\r\n        bytes32 indexed sig\r\n    );\r\n\r\n    event LogForbid(\r\n        bytes32 indexed src,\r\n        bytes32 indexed dst,\r\n        bytes32 indexed sig\r\n    );\r\n}\r\n\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n\r\n    function DSAuth() public {\r\n        owner = msg.sender;\r\n        LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n        public\r\n        auth\r\n    {\r\n        owner = owner_;\r\n        LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_)\r\n        public\r\n        auth\r\n    {\r\n        authority = authority_;\r\n        LogSetAuthority(authority);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, this, sig);\r\n        }\r\n    }\r\n}\r\n\r\ncontract DSGuard is DSAuth, DSAuthority, DSGuardEvents {\r\n    bytes32 constant public ANY = bytes32(uint(-1));\r\n\r\n    mapping (bytes32 => mapping (bytes32 => mapping (bytes32 => bool))) acl;\r\n\r\n    function canCall(\r\n        address src_, address dst_, bytes4 sig\r\n    ) public view returns (bool) {\r\n        var src = bytes32(src_);\r\n        var dst = bytes32(dst_);\r\n\r\n        return acl[src][dst][sig]\r\n            || acl[src][dst][ANY]\r\n            || acl[src][ANY][sig]\r\n            || acl[src][ANY][ANY]\r\n            || acl[ANY][dst][sig]\r\n            || acl[ANY][dst][ANY]\r\n            || acl[ANY][ANY][sig]\r\n            || acl[ANY][ANY][ANY];\r\n    }\r\n\r\n    function permit(bytes32 src, bytes32 dst, bytes32 sig) public auth {\r\n        acl[src][dst][sig] = true;\r\n        LogPermit(src, dst, sig);\r\n    }\r\n\r\n    function forbid(bytes32 src, bytes32 dst, bytes32 sig) public auth {\r\n        acl[src][dst][sig] = false;\r\n        LogForbid(src, dst, sig);\r\n    }\r\n\r\n    function permit(address src, address dst, bytes32 sig) public {\r\n        permit(bytes32(src), bytes32(dst), sig);\r\n    }\r\n    function forbid(address src, address dst, bytes32 sig) public {\r\n        forbid(bytes32(src), bytes32(dst), sig);\r\n    }\r\n\r\n}\r\n\r\ncontract DSGuardFactory {\r\n    mapping (address => bool)  public  isGuard;\r\n\r\n    function newGuard() public returns (DSGuard guard) {\r\n        guard = new DSGuard();\r\n        guard.setOwner(msg.sender);\r\n        isGuard[guard] = true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isGuard\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"newGuard\",\"outputs\":[{\"name\":\"guard\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DSGuardFactory","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://c79ff4562be372327c7bcd8bc0af61b3948c95f91607a3b6b80f35d75d3a9106"}]}