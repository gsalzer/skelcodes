{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.11;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface UniswapLens {\r\n    function quoteExactInputSingle(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint24 fee,\r\n        uint256 amountIn,\r\n        uint160 sqrtPriceLimitX96\r\n    ) external returns (uint256 amountOut);\r\n}\r\n\r\ninterface UniswapRouter {\r\n    struct ExactInputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24  fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    function exactInputSingle(\r\n        ExactInputSingleParams calldata params\r\n    ) external returns (uint256 amountOut);\r\n}\r\n\r\ninterface UniswapReserve {\r\n    function swap(\r\n        address recipient,\r\n        bool zeroForOne,\r\n        int256 amountSpecified,\r\n        uint160 sqrtPriceLimitX96,\r\n        bytes calldata data\r\n    ) external returns (int256 amount0, int256 amount1);\r\n}\r\n\r\ninterface ERC20Like {\r\n    function approve(address spender, uint value) external returns(bool);\r\n    function transfer(address to, uint value) external returns(bool);\r\n    function balanceOf(address a) external view returns(uint);\r\n}\r\n\r\ninterface WethLike is ERC20Like {\r\n    function deposit() external payable;\r\n}\r\n\r\ninterface CurveLike {\r\n    function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy) external returns(uint);\r\n}\r\n\r\ninterface BAMMLike {\r\n    function swap(uint lusdAmount, uint minEthReturn, address payable dest) external returns(uint);\r\n}\r\n\r\ncontract Arb {\r\n    address constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    address constant LUSD = 0x5f98805A4E8be255a32880FDeC7F6728C6568bA0;    \r\n    address constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    UniswapLens constant LENS = UniswapLens(0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6);\r\n    UniswapRouter constant ROUTER = UniswapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);\r\n    UniswapReserve constant USDCETH = UniswapReserve(0x8ad599c3A0ff1De082011EFDDc58f1908eb6e6D8);\r\n    uint160 constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\r\n    CurveLike constant CURV = CurveLike(0xEd279fDD11cA84bEef15AF5D39BB4d4bEE23F0cA);\r\n\r\n    constructor() public {\r\n        ERC20Like(USDC).approve(address(CURV), uint(-1));\r\n    }\r\n\r\n    function approve(address bamm) external {\r\n        ERC20Like(LUSD).approve(address(bamm), uint(-1));\r\n    }\r\n\r\n    function getPrice(uint wethQty) external returns(uint) {\r\n        return LENS.quoteExactInputSingle(WETH, USDC, 3000, wethQty, 0);\r\n    }\r\n\r\n    function swap(uint ethQty, address bamm) external payable returns(uint) {\r\n        bytes memory data = abi.encode(bamm);\r\n        USDCETH.swap(address(this), false, int256(ethQty), MAX_SQRT_RATIO - 1, data);\r\n\r\n        uint retVal = address(this).balance;\r\n        msg.sender.transfer(retVal);\r\n\r\n        return retVal;\r\n     }\r\n\r\n    function uniswapV3SwapCallback(\r\n        int256 amount0Delta,\r\n        int256 amount1Delta,\r\n        bytes calldata data\r\n    ) external {\r\n        require(msg.sender == address(USDCETH), \"uniswapV3SwapCallback: invalid sender\");\r\n        // swap USDC to LUSD\r\n        uint USDCAmount = uint(-1 * amount0Delta);\r\n        uint LUSDReturn = CURV.exchange_underlying(2, 0, USDCAmount, 1);\r\n\r\n        address bamm = abi.decode(data, (address));\r\n        BAMMLike(bamm).swap(LUSDReturn, 1, address(this));\r\n\r\n        if(amount1Delta > 0) {\r\n            WethLike(WETH).deposit{value: uint(amount1Delta)}();\r\n            if(amount1Delta > 0) WethLike(WETH).transfer(msg.sender, uint(amount1Delta));            \r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n\r\ncontract ArbChecker {\r\n    Arb immutable public arb;\r\n    constructor(Arb _arb) public {\r\n        arb = _arb;\r\n    }\r\n\r\n    function checkProfitableArb(uint ethQty, uint minProfit, address bamm) public { // revert on failure\r\n        uint balanceBefore = address(this).balance;\r\n        arb.swap(ethQty, bamm);\r\n        uint balanceAfter = address(this).balance;\r\n        require((balanceAfter - balanceBefore) >= minProfit, \"min profit was not reached\");\r\n    }\r\n\r\n    receive() external payable {}       \r\n}\r\n\r\ncontract BKeeper {\r\n    address public masterCopy;\r\n    ArbChecker immutable public arbChecker;\r\n    Arb immutable public arb;\r\n    uint maxEthQty; // = 1000 ether;\r\n    uint minQty; // = 1e10;\r\n    uint minProfitInBps; // = 100;\r\n\r\n    address public admin;\r\n    address[] public bamms;\r\n\r\n    event KeepOperation(bool succ);\r\n\r\n    constructor(Arb _arb, ArbChecker _arbChecker) public {\r\n        arbChecker = ArbChecker(_arbChecker);\r\n        arb = _arb;\r\n    }\r\n\r\n    function findSmallestQty() public returns(uint, address) {\r\n        for(uint i = 0 ; i < bamms.length ; i++) {\r\n            address bamm = bamms[i];\r\n            for(uint qty = maxEthQty ; qty > minQty ; qty = qty / 2) {\r\n                uint minProfit = qty * minProfitInBps / 10000;\r\n                try arbChecker.checkProfitableArb(qty, minProfit, bamm) {\r\n                    return (qty, bamm);\r\n                } catch {\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        return (0, address(0));\r\n    }\r\n\r\n    function checkUpkeep(bytes calldata /*checkData*/) external returns (bool upkeepNeeded, bytes memory performData) {\r\n        uint[] memory balances = new uint[](bamms.length);\r\n        for(uint i = 0 ; i < bamms.length ; i++) {\r\n            balances[i] = bamms[i].balance;\r\n        }\r\n\r\n        (uint qty, address bamm) = findSmallestQty();\r\n\r\n        uint bammBalance;\r\n        for(uint i = 0 ; i < bamms.length ; i++) {\r\n            if(bamms[i] == bamm) bammBalance = balances[i];\r\n        }\r\n\r\n        upkeepNeeded = qty > 0;\r\n        performData = abi.encode(qty, bamm, bammBalance);\r\n    }\r\n    \r\n    function performUpkeep(bytes calldata performData) external {\r\n        (uint qty, address bamm, uint bammBalance) = abi.decode(performData, (uint, address, uint));\r\n        require(bammBalance == bamm.balance, \"performUpkeep: front runned\");\r\n        require(qty > 0, \"0 qty\");\r\n        arb.swap(qty, bamm);\r\n        \r\n        emit KeepOperation(true);        \r\n    }\r\n\r\n    function performUpkeepSafe(bytes calldata performData) external {\r\n        try this.performUpkeep(performData) {\r\n            emit KeepOperation(true);\r\n        }\r\n        catch {\r\n            emit KeepOperation(false);\r\n        }\r\n    }    \r\n\r\n    receive() external payable {}\r\n\r\n    // admin stuff\r\n    function transferAdmin(address newAdmin) external {\r\n        require(msg.sender == admin, \"!admin\");\r\n        admin = newAdmin;\r\n    }\r\n\r\n    function initParams(uint _maxEthQty, uint _minEthQty, uint _minProfit) external {\r\n        require(admin == address(0), \"already init\");\r\n        maxEthQty = _maxEthQty;\r\n        minQty = _minEthQty;\r\n        minProfitInBps = _minProfit;\r\n\r\n        admin = msg.sender;        \r\n    }\r\n\r\n    function setMaxEthQty(uint newVal) external {\r\n        require(msg.sender == admin, \"!admin\");\r\n        maxEthQty = newVal;        \r\n    }\r\n\r\n    function setMinEthQty(uint newVal) external {\r\n        require(msg.sender == admin, \"!admin\");\r\n        minQty = newVal;        \r\n    }\r\n    \r\n    function setMinProfit(uint newVal) external {\r\n        require(msg.sender == admin, \"!admin\");\r\n        minProfitInBps = newVal;        \r\n    }\r\n\r\n    function addBamm(address newBamm) external {\r\n        require(msg.sender == admin, \"!admin\");        \r\n        arb.approve(newBamm);\r\n        bamms.push(newBamm);\r\n    }\r\n\r\n    function removeBamm(address bamm) external {\r\n        require(msg.sender == admin, \"!admin\");\r\n        for(uint i = 0 ; i < bamms.length ; i++) {\r\n            if(bamms[i] == bamm) {\r\n                bamms[i] = bamms[bamms.length - 1];\r\n                bamms.pop();\r\n\r\n                return;\r\n            }\r\n        }\r\n\r\n        revert(\"bamm does not exist\");\r\n    }\r\n\r\n    function withdrawEth() external {\r\n        require(msg.sender == admin, \"!admin\");\r\n        msg.sender.transfer(address(this).balance);        \r\n    }\r\n\r\n    function upgrade(address newMaster) public {\r\n        require(msg.sender == admin, \"!admin\");\r\n        masterCopy = newMaster;        \r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract Arb\",\"name\":\"_arb\",\"type\":\"address\"},{\"internalType\":\"contract ArbChecker\",\"name\":\"_arbChecker\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"succ\",\"type\":\"bool\"}],\"name\":\"KeepOperation\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBamm\",\"type\":\"address\"}],\"name\":\"addBamm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arb\",\"outputs\":[{\"internalType\":\"contract Arb\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbChecker\",\"outputs\":[{\"internalType\":\"contract ArbChecker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bamms\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"findSmallestQty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxEthQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minEthQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minProfit\",\"type\":\"uint256\"}],\"name\":\"initParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterCopy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeepSafe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bamm\",\"type\":\"address\"}],\"name\":\"removeBamm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVal\",\"type\":\"uint256\"}],\"name\":\"setMaxEthQty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVal\",\"type\":\"uint256\"}],\"name\":\"setMinEthQty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVal\",\"type\":\"uint256\"}],\"name\":\"setMinProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMaster\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BKeeper","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000012c60b3170fb43e6a8f8ba2d843621c19324329e000000000000000000000000de843d88b55a38e1e0fb831b6edb0110dee9ab9d","EVMVersion":"Default","Library":"","LicenseType":"BSD-3-Clause","Proxy":"0","Implementation":"","SwarmSource":"ipfs://016217cab8b824662acaa9412c7267a07dbb5a46524da3bc8197eca24c131c27"}]}