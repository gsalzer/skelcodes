{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/rewards/RewardsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.3;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../upgrades/GraphUpgradeable.sol\\\";\\n\\nimport \\\"./RewardsManagerStorage.sol\\\";\\nimport \\\"./IRewardsManager.sol\\\";\\n\\ncontract RewardsManager is RewardsManagerV1Storage, GraphUpgradeable, IRewardsManager {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant TOKEN_DECIMALS = 1e18;\\n    uint256 private constant MIN_ISSUANCE_RATE = 1e18;\\n\\n    // -- Events --\\n\\n    /**\\n     * @dev Emitted when rewards are assigned to an indexer.\\n     */\\n    event RewardsAssigned(\\n        address indexed indexer,\\n        address indexed allocationID,\\n        uint256 epoch,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted when rewards are denied to an indexer.\\n     */\\n    event RewardsDenied(address indexed indexer, address indexed allocationID, uint256 epoch);\\n\\n    /**\\n     * @dev Emitted when a subgraph is denied for claiming rewards.\\n     */\\n    event RewardsDenylistUpdated(bytes32 indexed subgraphDeploymentID, uint256 sinceBlock);\\n\\n    // -- Modifiers --\\n\\n    modifier onlySubgraphAvailabilityOracle() {\\n        require(\\n            msg.sender == address(subgraphAvailabilityOracle),\\n            \\\"Caller must be the subgraph availability oracle\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initialize this contract.\\n     */\\n    function initialize(address _controller, uint256 _issuanceRate) external onlyImpl {\\n        Managed._initialize(_controller);\\n\\n        // Settings\\n        _setIssuanceRate(_issuanceRate);\\n    }\\n\\n    /**\\n     * @dev Sets the issuance rate.\\n     * The issuance rate is defined as a percentage increase of the total supply per block.\\n     * This means that it needs to be greater than 1.0, any number under 1.0 is not\\n     * allowed and an issuance rate of 1.0 means no issuance.\\n     * To accommodate a high precision the issuance rate is expressed in wei.\\n     * @param _issuanceRate Issuance rate expressed in wei\\n     */\\n    function setIssuanceRate(uint256 _issuanceRate) external override onlyGovernor {\\n        _setIssuanceRate(_issuanceRate);\\n    }\\n\\n    /**\\n     * @dev Sets the issuance rate.\\n     * @param _issuanceRate Issuance rate\\n     */\\n    function _setIssuanceRate(uint256 _issuanceRate) private {\\n        require(_issuanceRate >= MIN_ISSUANCE_RATE, \\\"Issuance rate under minimum allowed\\\");\\n\\n        // Called since `issuance rate` will change\\n        updateAccRewardsPerSignal();\\n\\n        issuanceRate = _issuanceRate;\\n        emit ParameterUpdated(\\\"issuanceRate\\\");\\n    }\\n\\n    /**\\n     * @dev Sets the subgraph oracle allowed to denegate distribution of rewards to subgraphs.\\n     * @param _subgraphAvailabilityOracle Address of the subgraph availability oracle\\n     */\\n    function setSubgraphAvailabilityOracle(address _subgraphAvailabilityOracle)\\n        external\\n        override\\n        onlyGovernor\\n    {\\n        subgraphAvailabilityOracle = _subgraphAvailabilityOracle;\\n        emit ParameterUpdated(\\\"subgraphAvailabilityOracle\\\");\\n    }\\n\\n    /**\\n     * @dev Denies to claim rewards for a subgraph.\\n     * NOTE: Can only be called by the subgraph availability oracle\\n     * @param _subgraphDeploymentID Subgraph deployment ID\\n     * @param _deny Whether to set the subgraph as denied for claiming rewards or not\\n     */\\n    function setDenied(bytes32 _subgraphDeploymentID, bool _deny)\\n        external\\n        override\\n        onlySubgraphAvailabilityOracle\\n    {\\n        _setDenied(_subgraphDeploymentID, _deny);\\n    }\\n\\n    /**\\n     * @dev Denies to claim rewards for multiple subgraph.\\n     * NOTE: Can only be called by the subgraph availability oracle\\n     * @param _subgraphDeploymentID Array of subgraph deployment ID\\n     * @param _deny Array of denied status for claiming rewards for each subgraph\\n     */\\n    function setDeniedMany(bytes32[] calldata _subgraphDeploymentID, bool[] calldata _deny)\\n        external\\n        override\\n        onlySubgraphAvailabilityOracle\\n    {\\n        require(_subgraphDeploymentID.length == _deny.length, \\\"!length\\\");\\n        for (uint256 i = 0; i < _subgraphDeploymentID.length; i++) {\\n            _setDenied(_subgraphDeploymentID[i], _deny[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal: Denies to claim rewards for a subgraph.\\n     * @param _subgraphDeploymentID Subgraph deployment ID\\n     * @param _deny Whether to set the subgraph as denied for claiming rewards or not\\n     */\\n    function _setDenied(bytes32 _subgraphDeploymentID, bool _deny) private {\\n        uint256 sinceBlock = _deny ? block.number : 0;\\n        denylist[_subgraphDeploymentID] = sinceBlock;\\n        emit RewardsDenylistUpdated(_subgraphDeploymentID, sinceBlock);\\n    }\\n\\n    /**\\n     * @dev Tells if subgraph is in deny list\\n     * @param _subgraphDeploymentID Subgraph deployment ID to check\\n     */\\n    function isDenied(bytes32 _subgraphDeploymentID) public override view returns (bool) {\\n        return denylist[_subgraphDeploymentID] > 0;\\n    }\\n\\n    /**\\n     * @dev Gets the issuance of rewards per signal since last updated.\\n     *\\n     * Compound interest formula: `a = p(1 + r/n)^nt`\\n     * The formula is simplified with `n = 1` as we apply the interest once every time step.\\n     * The `r` is passed with +1 included. So for 10% instead of 0.1 it is 1.1\\n     * The simplified formula is `a = p * r^t`\\n     *\\n     * Notation:\\n     * t: time steps are in blocks since last updated\\n     * p: total supply of GRT tokens\\n     * a: inflated amount of total supply for the period `t` when interest `r` is applied\\n     * x: newly accrued rewards token for the period `t`\\n     *\\n     * @return newly accrued rewards per signal since last update\\n     */\\n    function getNewRewardsPerSignal() public override view returns (uint256) {\\n        // Calculate time steps\\n        uint256 t = block.number.sub(accRewardsPerSignalLastBlockUpdated);\\n        // Optimization to skip calculations if zero time steps elapsed\\n        if (t == 0) {\\n            return 0;\\n        }\\n\\n        // Zero issuance under a rate of 1.0\\n        if (issuanceRate <= MIN_ISSUANCE_RATE) {\\n            return 0;\\n        }\\n\\n        // Zero issuance if no signalled tokens\\n        IGraphToken graphToken = graphToken();\\n        uint256 signalledTokens = graphToken.balanceOf(address(curation()));\\n        if (signalledTokens == 0) {\\n            return 0;\\n        }\\n\\n        uint256 r = issuanceRate;\\n        uint256 p = graphToken.totalSupply();\\n        uint256 a = p.mul(_pow(r, t, TOKEN_DECIMALS)).div(TOKEN_DECIMALS);\\n\\n        // New issuance of tokens during time steps\\n        uint256 x = a.sub(p);\\n\\n        // Get the new issuance per signalled token\\n        // We multiply the decimals to keep the precision as fixed-point number\\n        return x.mul(TOKEN_DECIMALS).div(signalledTokens);\\n    }\\n\\n    /**\\n     * @dev Gets the currently accumulated rewards per signal.\\n     */\\n    function getAccRewardsPerSignal() public override view returns (uint256) {\\n        return accRewardsPerSignal.add(getNewRewardsPerSignal());\\n    }\\n\\n    /**\\n     * @dev Gets the accumulated rewards for the subgraph.\\n     * @param _subgraphDeploymentID Subgraph deployment\\n     * @return Accumulated rewards for subgraph\\n     */\\n    function getAccRewardsForSubgraph(bytes32 _subgraphDeploymentID)\\n        public\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        Subgraph storage subgraph = subgraphs[_subgraphDeploymentID];\\n\\n        uint256 newRewardsPerSignal = getAccRewardsPerSignal().sub(\\n            subgraph.accRewardsPerSignalSnapshot\\n        );\\n        uint256 subgraphSignalledTokens = curation().getCurationPoolTokens(_subgraphDeploymentID);\\n        uint256 newRewards = newRewardsPerSignal.mul(subgraphSignalledTokens).div(TOKEN_DECIMALS);\\n        return subgraph.accRewardsForSubgraph.add(newRewards);\\n    }\\n\\n    /**\\n     * @dev Gets the accumulated rewards per allocated token for the subgraph.\\n     * @param _subgraphDeploymentID Subgraph deployment\\n     * @return Accumulated rewards per allocated token for the subgraph\\n     * @return Accumulated rewards for subgraph\\n     */\\n    function getAccRewardsPerAllocatedToken(bytes32 _subgraphDeploymentID)\\n        public\\n        override\\n        view\\n        returns (uint256, uint256)\\n    {\\n        Subgraph storage subgraph = subgraphs[_subgraphDeploymentID];\\n\\n        uint256 accRewardsForSubgraph = getAccRewardsForSubgraph(_subgraphDeploymentID);\\n        uint256 newRewardsForSubgraph = accRewardsForSubgraph.sub(\\n            subgraph.accRewardsForSubgraphSnapshot\\n        );\\n\\n        uint256 subgraphAllocatedTokens = staking().getSubgraphAllocatedTokens(\\n            _subgraphDeploymentID\\n        );\\n        if (subgraphAllocatedTokens == 0) {\\n            return (0, accRewardsForSubgraph);\\n        }\\n\\n        uint256 newRewardsPerAllocatedToken = newRewardsForSubgraph.mul(TOKEN_DECIMALS).div(\\n            subgraphAllocatedTokens\\n        );\\n        return (\\n            subgraph.accRewardsPerAllocatedToken.add(newRewardsPerAllocatedToken),\\n            accRewardsForSubgraph\\n        );\\n    }\\n\\n    /**\\n     * @dev Updates the accumulated rewards per signal and save checkpoint block number.\\n     * Must be called before `issuanceRate` or `total signalled GRT` changes\\n     * Called from the Curation contract on mint() and burn()\\n     * @return Accumulated rewards per signal\\n     */\\n    function updateAccRewardsPerSignal() public override returns (uint256) {\\n        accRewardsPerSignal = getAccRewardsPerSignal();\\n        accRewardsPerSignalLastBlockUpdated = block.number;\\n        return accRewardsPerSignal;\\n    }\\n\\n    /**\\n     * @dev Triggers an update of rewards for a subgraph.\\n     * Must be called before `signalled GRT` on a subgraph changes.\\n     * Note: Hook called from the Curation contract on mint() and burn()\\n     * @param _subgraphDeploymentID Subgraph deployment\\n     * @return Accumulated rewards for subgraph\\n     */\\n    function onSubgraphSignalUpdate(bytes32 _subgraphDeploymentID)\\n        external\\n        override\\n        returns (uint256)\\n    {\\n        // Called since `total signalled GRT` will change\\n        updateAccRewardsPerSignal();\\n\\n        // Updates the accumulated rewards for a subgraph\\n        Subgraph storage subgraph = subgraphs[_subgraphDeploymentID];\\n        subgraph.accRewardsForSubgraph = getAccRewardsForSubgraph(_subgraphDeploymentID);\\n        subgraph.accRewardsPerSignalSnapshot = accRewardsPerSignal;\\n        return subgraph.accRewardsForSubgraph;\\n    }\\n\\n    /**\\n     * @dev Triggers an update of rewards for a subgraph.\\n     * Must be called before allocation on a subgraph changes.\\n     * NOTE: Hook called from the Staking contract on allocate() and close()\\n     *\\n     * @param _subgraphDeploymentID Subgraph deployment\\n     * @return Accumulated rewards per allocated token for a subgraph\\n     */\\n    function onSubgraphAllocationUpdate(bytes32 _subgraphDeploymentID)\\n        public\\n        override\\n        returns (uint256)\\n    {\\n        Subgraph storage subgraph = subgraphs[_subgraphDeploymentID];\\n        (\\n            uint256 accRewardsPerAllocatedToken,\\n            uint256 accRewardsForSubgraph\\n        ) = getAccRewardsPerAllocatedToken(_subgraphDeploymentID);\\n        subgraph.accRewardsPerAllocatedToken = accRewardsPerAllocatedToken;\\n        subgraph.accRewardsForSubgraphSnapshot = accRewardsForSubgraph;\\n        return subgraph.accRewardsPerAllocatedToken;\\n    }\\n\\n    /**\\n     * @dev Calculate current rewards for a given allocation on demand.\\n     * @param _allocationID Allocation\\n     * @return Rewards amount for an allocation\\n     */\\n    function getRewards(address _allocationID) external override view returns (uint256) {\\n        IStaking.Allocation memory alloc = staking().getAllocation(_allocationID);\\n\\n        (uint256 accRewardsPerAllocatedToken, ) = getAccRewardsPerAllocatedToken(\\n            alloc.subgraphDeploymentID\\n        );\\n        return\\n            _calcRewards(\\n                alloc.tokens,\\n                alloc.accRewardsPerAllocatedToken,\\n                accRewardsPerAllocatedToken\\n            );\\n    }\\n\\n    /**\\n     * @dev Calculate current rewards for a given allocation.\\n     * @param _tokens Tokens allocated\\n     * @param _startAccRewardsPerAllocatedToken Allocation start accumulated rewards\\n     * @param _endAccRewardsPerAllocatedToken Allocation end accumulated rewards\\n     * @return Rewards amount\\n     */\\n    function _calcRewards(\\n        uint256 _tokens,\\n        uint256 _startAccRewardsPerAllocatedToken,\\n        uint256 _endAccRewardsPerAllocatedToken\\n    ) private pure returns (uint256) {\\n        uint256 newAccrued = _endAccRewardsPerAllocatedToken.sub(_startAccRewardsPerAllocatedToken);\\n        return newAccrued.mul(_tokens).div(TOKEN_DECIMALS);\\n    }\\n\\n    /**\\n     * @dev Pull rewards from the contract for a particular allocation.\\n     * This function can only be called by the Staking contract.\\n     * This function will mint the necessary tokens to reward based on the inflation calculation.\\n     * @param _allocationID Allocation\\n     * @return Assigned rewards amount\\n     */\\n    function takeRewards(address _allocationID) external override returns (uint256) {\\n        // Only Staking contract is authorized as caller\\n        IStaking staking = staking();\\n        require(msg.sender == address(staking), \\\"Caller must be the staking contract\\\");\\n\\n        IStaking.Allocation memory alloc = staking.getAllocation(_allocationID);\\n        uint256 accRewardsPerAllocatedToken = onSubgraphAllocationUpdate(\\n            alloc.subgraphDeploymentID\\n        );\\n\\n        // Do not do rewards on denied subgraph deployments ID\\n        if (isDenied(alloc.subgraphDeploymentID)) {\\n            emit RewardsDenied(alloc.indexer, _allocationID, alloc.closedAtEpoch);\\n            return 0;\\n        }\\n\\n        // Calculate rewards accrued by this allocation\\n        uint256 rewards = _calcRewards(\\n            alloc.tokens,\\n            alloc.accRewardsPerAllocatedToken,\\n            accRewardsPerAllocatedToken\\n        );\\n        if (rewards > 0) {\\n            // Mint directly to staking contract for the reward amount\\n            // The staking contract will do bookkeeping of the reward and\\n            // assign in proportion to each stakeholder incentive\\n            graphToken().mint(address(staking), rewards);\\n        }\\n\\n        emit RewardsAssigned(alloc.indexer, _allocationID, alloc.closedAtEpoch, rewards);\\n\\n        return rewards;\\n    }\\n\\n    /**\\n     * @dev Raises x to the power of n with scaling factor of base.\\n     * Based on: https://github.com/makerdao/dss/blob/master/src/pot.sol#L81\\n     * @param x Base of the exponentiation\\n     * @param n Exponent\\n     * @param base Scaling factor\\n     * @return z Exponential of n with base x\\n     */\\n    function _pow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 base\\n    ) private pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n                case 0 {\\n                    switch n\\n                        case 0 {\\n                            z := base\\n                        }\\n                        default {\\n                            z := 0\\n                        }\\n                }\\n                default {\\n                    switch mod(n, 2)\\n                        case 0 {\\n                            z := base\\n                        }\\n                        default {\\n                            z := x\\n                        }\\n                    let half := div(base, 2) // for rounding.\\n                    for {\\n                        n := div(n, 2)\\n                    } n {\\n                        n := div(n, 2)\\n                    } {\\n                        let xx := mul(x, x)\\n                        if iszero(eq(div(xx, x), x)) {\\n                            revert(0, 0)\\n                        }\\n                        let xxRound := add(xx, half)\\n                        if lt(xxRound, xx) {\\n                            revert(0, 0)\\n                        }\\n                        x := div(xxRound, base)\\n                        if mod(n, 2) {\\n                            let zx := mul(z, x)\\n                            if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) {\\n                                revert(0, 0)\\n                            }\\n                            let zxRound := add(zx, half)\\n                            if lt(zxRound, zx) {\\n                                revert(0, 0)\\n                            }\\n                            z := div(zxRound, base)\\n                        }\\n                    }\\n                }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/upgrades/GraphUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.3;\\n\\nimport \\\"./IGraphProxy.sol\\\";\\n\\n/**\\n * @title Graph Upgradeable\\n * @dev This contract is intended to be inherited from upgradeable contracts.\\n */\\ncontract GraphUpgradeable {\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32\\n        internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Check if the caller is the proxy admin.\\n     */\\n    modifier onlyProxyAdmin(IGraphProxy _proxy) {\\n        require(msg.sender == _proxy.admin(), \\\"Caller must be the proxy admin\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check if the caller is the implementation.\\n     */\\n    modifier onlyImpl {\\n        require(msg.sender == _implementation(), \\\"Caller must be the implementation\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     * @return impl Address of the current implementation\\n     */\\n    function _implementation() internal view returns (address impl) {\\n        bytes32 slot = IMPLEMENTATION_SLOT;\\n        assembly {\\n            impl := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Accept to be an implementation of proxy.\\n     */\\n    function acceptProxy(IGraphProxy _proxy) external onlyProxyAdmin(_proxy) {\\n        _proxy.acceptUpgrade();\\n    }\\n\\n    /**\\n     * @dev Accept to be an implementation of proxy and then call a function from the new\\n     * implementation as specified by `_data`, which should be an encoded function call. This is\\n     * useful to initialize new storage variables in the proxied contract.\\n     */\\n    function acceptProxyAndCall(IGraphProxy _proxy, bytes calldata _data)\\n        external\\n        onlyProxyAdmin(_proxy)\\n    {\\n        _proxy.acceptUpgradeAndCall(_data);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/rewards/RewardsManagerStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.3;\\n\\nimport \\\"./IRewardsManager.sol\\\";\\nimport \\\"../governance/Managed.sol\\\";\\n\\ncontract RewardsManagerV1Storage is Managed {\\n    // -- State --\\n\\n    uint256 public issuanceRate;\\n    uint256 public accRewardsPerSignal;\\n    uint256 public accRewardsPerSignalLastBlockUpdated;\\n\\n    // Address of role allowed to deny rewards on subgraphs\\n    address public subgraphAvailabilityOracle;\\n\\n    // Subgraph related rewards: subgraph deployment ID => subgraph rewards\\n    mapping(bytes32 => IRewardsManager.Subgraph) public subgraphs;\\n\\n    // Subgraph denylist : subgraph deployment ID => block when added or zero (if not denied)\\n    mapping(bytes32 => uint256) public denylist;\\n}\\n\"\r\n    },\r\n    \"contracts/rewards/IRewardsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.3;\\n\\ninterface IRewardsManager {\\n    /**\\n     * @dev Stores accumulated rewards and snapshots related to a particular SubgraphDeployment.\\n     */\\n    struct Subgraph {\\n        uint256 accRewardsForSubgraph;\\n        uint256 accRewardsForSubgraphSnapshot;\\n        uint256 accRewardsPerSignalSnapshot;\\n        uint256 accRewardsPerAllocatedToken;\\n    }\\n\\n    // -- Params --\\n\\n    function setIssuanceRate(uint256 _issuanceRate) external;\\n\\n    // -- Denylist --\\n\\n    function setSubgraphAvailabilityOracle(address _subgraphAvailabilityOracle) external;\\n\\n    function setDenied(bytes32 _subgraphDeploymentID, bool _deny) external;\\n\\n    function setDeniedMany(bytes32[] calldata _subgraphDeploymentID, bool[] calldata _deny)\\n        external;\\n\\n    function isDenied(bytes32 _subgraphDeploymentID) external view returns (bool);\\n\\n    // -- Getters --\\n\\n    function getNewRewardsPerSignal() external view returns (uint256);\\n\\n    function getAccRewardsPerSignal() external view returns (uint256);\\n\\n    function getAccRewardsForSubgraph(bytes32 _subgraphDeploymentID)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getAccRewardsPerAllocatedToken(bytes32 _subgraphDeploymentID)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getRewards(address _allocationID) external view returns (uint256);\\n\\n    // -- Updates --\\n\\n    function updateAccRewardsPerSignal() external returns (uint256);\\n\\n    function takeRewards(address _allocationID) external returns (uint256);\\n\\n    // -- Hooks --\\n\\n    function onSubgraphSignalUpdate(bytes32 _subgraphDeploymentID) external returns (uint256);\\n\\n    function onSubgraphAllocationUpdate(bytes32 _subgraphDeploymentID) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/upgrades/IGraphProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.3;\\n\\ninterface IGraphProxy {\\n    function admin() external returns (address);\\n\\n    function setAdmin(address _newAdmin) external;\\n\\n    function implementation() external returns (address);\\n\\n    function pendingImplementation() external returns (address);\\n\\n    function upgradeTo(address _newImplementation) external;\\n\\n    function acceptUpgrade() external;\\n\\n    function acceptUpgradeAndCall(bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"contracts/governance/Managed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.3;\\n\\nimport \\\"./IManaged.sol\\\";\\nimport \\\"./IController.sol\\\";\\nimport \\\"../curation/ICuration.sol\\\";\\nimport \\\"../epochs/IEpochManager.sol\\\";\\nimport \\\"../rewards/IRewardsManager.sol\\\";\\nimport \\\"../staking/IStaking.sol\\\";\\nimport \\\"../token/IGraphToken.sol\\\";\\n\\n/**\\n * @title Graph Managed contract\\n * @dev The Managed contract provides an interface for contracts to interact with the Controller\\n * Inspired by Livepeer:\\n * https://github.com/livepeer/protocol/blob/streamflow/contracts/Controller.sol\\n */\\ncontract Managed {\\n    // Controller that contract is registered with\\n    IController public controller;\\n    mapping(bytes32 => address) public addressCache;\\n    uint256[10] private __gap;\\n\\n    event ParameterUpdated(string param);\\n    event SetController(address controller);\\n\\n    function _notPartialPaused() internal view {\\n        require(!controller.paused(), \\\"Paused\\\");\\n        require(!controller.partialPaused(), \\\"Partial-paused\\\");\\n    }\\n\\n    function _notPaused() internal view {\\n        require(!controller.paused(), \\\"Paused\\\");\\n    }\\n\\n    function _onlyGovernor() internal view {\\n        require(msg.sender == controller.getGovernor(), \\\"Caller must be Controller governor\\\");\\n    }\\n\\n    modifier notPartialPaused {\\n        _notPartialPaused();\\n        _;\\n    }\\n\\n    modifier notPaused {\\n        _notPaused();\\n        _;\\n    }\\n\\n    // Check if sender is controller\\n    modifier onlyController() {\\n        require(msg.sender == address(controller), \\\"Caller must be Controller\\\");\\n        _;\\n    }\\n\\n    modifier onlyGovernor() {\\n        _onlyGovernor();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initialize the controller\\n     */\\n    function _initialize(address _controller) internal {\\n        _setController(_controller);\\n    }\\n\\n    /**\\n     * @notice Set Controller. Only callable by current controller\\n     * @param _controller Controller contract address\\n     */\\n    function setController(address _controller) external onlyController {\\n        _setController(_controller);\\n    }\\n\\n    /**\\n     * @dev Set controller.\\n     * @param _controller Controller contract address\\n     */\\n    function _setController(address _controller) internal {\\n        require(_controller != address(0), \\\"Controller must be set\\\");\\n        controller = IController(_controller);\\n        emit SetController(_controller);\\n    }\\n\\n    /**\\n     * @dev Return Curation interface\\n     * @return Curation contract registered with Controller\\n     */\\n    function curation() internal view returns (ICuration) {\\n        return ICuration(controller.getContractProxy(keccak256(\\\"Curation\\\")));\\n    }\\n\\n    /**\\n     * @dev Return EpochManager interface\\n     * @return Epoch manager contract registered with Controller\\n     */\\n    function epochManager() internal view returns (IEpochManager) {\\n        return IEpochManager(controller.getContractProxy(keccak256(\\\"EpochManager\\\")));\\n    }\\n\\n    /**\\n     * @dev Return RewardsManager interface\\n     * @return Rewards manager contract registered with Controller\\n     */\\n    function rewardsManager() internal view returns (IRewardsManager) {\\n        return IRewardsManager(controller.getContractProxy(keccak256(\\\"RewardsManager\\\")));\\n    }\\n\\n    /**\\n     * @dev Return Staking interface\\n     * @return Staking contract registered with Controller\\n     */\\n    function staking() internal view returns (IStaking) {\\n        return IStaking(controller.getContractProxy(keccak256(\\\"Staking\\\")));\\n    }\\n\\n    /**\\n     * @dev Return GraphToken interface\\n     * @return Graph token contract registered with Controller\\n     */\\n    function graphToken() internal view returns (IGraphToken) {\\n        return IGraphToken(controller.getContractProxy(keccak256(\\\"GraphToken\\\")));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/governance/IManaged.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.3;\\n\\ninterface IManaged {\\n    function setController(address _controller) external;\\n}\\n\"\r\n    },\r\n    \"contracts/governance/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12 <0.8.0;\\n\\ninterface IController {\\n    function getGovernor() external view returns (address);\\n\\n    // -- Registry --\\n\\n    function setContractProxy(bytes32 _id, address _contractAddress) external;\\n\\n    function unsetContractProxy(bytes32 _id) external;\\n\\n    function updateController(bytes32 _id, address _controller) external;\\n\\n    function getContractProxy(bytes32 _id) external view returns (address);\\n\\n    // -- Pausing --\\n\\n    function setPartialPaused(bool _partialPaused) external;\\n\\n    function setPaused(bool _paused) external;\\n\\n    function setPauseGuardian(address _newPauseGuardian) external;\\n\\n    function paused() external view returns (bool);\\n\\n    function partialPaused() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/curation/ICuration.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.3;\\n\\nimport \\\"./IGraphCurationToken.sol\\\";\\n\\ninterface ICuration {\\n    // -- Pool --\\n\\n    struct CurationPool {\\n        uint256 tokens; // GRT Tokens stored as reserves for the subgraph deployment\\n        uint32 reserveRatio; // Ratio for the bonding curve\\n        IGraphCurationToken gcs; // Curation token contract for this curation pool\\n    }\\n\\n    // -- Configuration --\\n\\n    function setDefaultReserveRatio(uint32 _defaultReserveRatio) external;\\n\\n    function setMinimumCurationDeposit(uint256 _minimumCurationDeposit) external;\\n\\n    function setCurationTaxPercentage(uint32 _percentage) external;\\n\\n    // -- Curation --\\n\\n    function mint(\\n        bytes32 _subgraphDeploymentID,\\n        uint256 _tokensIn,\\n        uint256 _signalOutMin\\n    ) external returns (uint256, uint256);\\n\\n    function burn(\\n        bytes32 _subgraphDeploymentID,\\n        uint256 _signalIn,\\n        uint256 _tokensOutMin\\n    ) external returns (uint256);\\n\\n    function collect(bytes32 _subgraphDeploymentID, uint256 _tokens) external;\\n\\n    // -- Getters --\\n\\n    function isCurated(bytes32 _subgraphDeploymentID) external view returns (bool);\\n\\n    function getCuratorSignal(address _curator, bytes32 _subgraphDeploymentID)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getCurationPoolSignal(bytes32 _subgraphDeploymentID) external view returns (uint256);\\n\\n    function getCurationPoolTokens(bytes32 _subgraphDeploymentID) external view returns (uint256);\\n\\n    function tokensToSignal(bytes32 _subgraphDeploymentID, uint256 _tokensIn)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function signalToTokens(bytes32 _subgraphDeploymentID, uint256 _signalIn)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function curationTaxPercentage() external view returns (uint32);\\n}\\n\"\r\n    },\r\n    \"contracts/epochs/IEpochManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.3;\\n\\ninterface IEpochManager {\\n    // -- Configuration --\\n\\n    function setEpochLength(uint256 _epochLength) external;\\n\\n    // -- Epochs\\n\\n    function runEpoch() external;\\n\\n    // -- Getters --\\n\\n    function isCurrentEpochRun() external view returns (bool);\\n\\n    function blockNum() external view returns (uint256);\\n\\n    function blockHash(uint256 _block) external view returns (bytes32);\\n\\n    function currentEpoch() external view returns (uint256);\\n\\n    function currentEpochBlock() external view returns (uint256);\\n\\n    function currentEpochBlockSinceStart() external view returns (uint256);\\n\\n    function epochsSince(uint256 _epoch) external view returns (uint256);\\n\\n    function epochsSinceUpdate() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/staking/IStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IStakingData.sol\\\";\\n\\ninterface IStaking is IStakingData {\\n    // -- Allocation Data --\\n\\n    /**\\n     * @dev Possible states an allocation can be\\n     * States:\\n     * - Null = indexer == address(0)\\n     * - Active = not Null && tokens > 0\\n     * - Closed = Active && closedAtEpoch != 0\\n     * - Finalized = Closed && closedAtEpoch + channelDisputeEpochs > now()\\n     * - Claimed = not Null && tokens == 0\\n     */\\n    enum AllocationState { Null, Active, Closed, Finalized, Claimed }\\n\\n    // -- Configuration --\\n\\n    function setMinimumIndexerStake(uint256 _minimumIndexerStake) external;\\n\\n    function setThawingPeriod(uint32 _thawingPeriod) external;\\n\\n    function setCurationPercentage(uint32 _percentage) external;\\n\\n    function setProtocolPercentage(uint32 _percentage) external;\\n\\n    function setChannelDisputeEpochs(uint32 _channelDisputeEpochs) external;\\n\\n    function setMaxAllocationEpochs(uint32 _maxAllocationEpochs) external;\\n\\n    function setRebateRatio(uint32 _alphaNumerator, uint32 _alphaDenominator) external;\\n\\n    function setDelegationRatio(uint32 _delegationRatio) external;\\n\\n    function setDelegationParameters(\\n        uint32 _indexingRewardCut,\\n        uint32 _queryFeeCut,\\n        uint32 _cooldownBlocks\\n    ) external;\\n\\n    function setDelegationParametersCooldown(uint32 _blocks) external;\\n\\n    function setDelegationUnbondingPeriod(uint32 _delegationUnbondingPeriod) external;\\n\\n    function setDelegationTaxPercentage(uint32 _percentage) external;\\n\\n    function setSlasher(address _slasher, bool _allowed) external;\\n\\n    function setAssetHolder(address _assetHolder, bool _allowed) external;\\n\\n    // -- Operation --\\n\\n    function setOperator(address _operator, bool _allowed) external;\\n\\n    function isOperator(address _operator, address _indexer) external view returns (bool);\\n\\n    // -- Staking --\\n\\n    function stake(uint256 _tokens) external;\\n\\n    function stakeTo(address _indexer, uint256 _tokens) external;\\n\\n    function unstake(uint256 _tokens) external;\\n\\n    function slash(\\n        address _indexer,\\n        uint256 _tokens,\\n        uint256 _reward,\\n        address _beneficiary\\n    ) external;\\n\\n    function withdraw() external;\\n\\n    function setRewardsDestination(address _destination) external;\\n\\n    // -- Delegation --\\n\\n    function delegate(address _indexer, uint256 _tokens) external returns (uint256);\\n\\n    function undelegate(address _indexer, uint256 _shares) external returns (uint256);\\n\\n    function withdrawDelegated(address _indexer, address _newIndexer) external returns (uint256);\\n\\n    // -- Channel management and allocations --\\n\\n    function allocate(\\n        bytes32 _subgraphDeploymentID,\\n        uint256 _tokens,\\n        address _allocationID,\\n        bytes32 _metadata,\\n        bytes calldata _proof\\n    ) external;\\n\\n    function allocateFrom(\\n        address _indexer,\\n        bytes32 _subgraphDeploymentID,\\n        uint256 _tokens,\\n        address _allocationID,\\n        bytes32 _metadata,\\n        bytes calldata _proof\\n    ) external;\\n\\n    function closeAllocation(address _allocationID, bytes32 _poi) external;\\n\\n    function closeAllocationMany(CloseAllocationRequest[] calldata _requests) external;\\n\\n    function closeAndAllocate(\\n        address _oldAllocationID,\\n        bytes32 _poi,\\n        address _indexer,\\n        bytes32 _subgraphDeploymentID,\\n        uint256 _tokens,\\n        address _allocationID,\\n        bytes32 _metadata,\\n        bytes calldata _proof\\n    ) external;\\n\\n    function collect(uint256 _tokens, address _allocationID) external;\\n\\n    function claim(address _allocationID, bool _restake) external;\\n\\n    function claimMany(address[] calldata _allocationID, bool _restake) external;\\n\\n    // -- Getters and calculations --\\n\\n    function hasStake(address _indexer) external view returns (bool);\\n\\n    function getIndexerStakedTokens(address _indexer) external view returns (uint256);\\n\\n    function getIndexerCapacity(address _indexer) external view returns (uint256);\\n\\n    function getAllocation(address _allocationID) external view returns (Allocation memory);\\n\\n    function getAllocationState(address _allocationID) external view returns (AllocationState);\\n\\n    function isAllocation(address _allocationID) external view returns (bool);\\n\\n    function getSubgraphAllocatedTokens(bytes32 _subgraphDeploymentID)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getDelegation(address _indexer, address _delegator)\\n        external\\n        view\\n        returns (Delegation memory);\\n\\n    function isDelegator(address _indexer, address _delegator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/token/IGraphToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IGraphToken is IERC20 {\\n    // -- Mint and Burn --\\n\\n    function burn(uint256 amount) external;\\n\\n    function mint(address _to, uint256 _amount) external;\\n\\n    // -- Mint Admin --\\n\\n    function addMinter(address _account) external;\\n\\n    function removeMinter(address _account) external;\\n\\n    function renounceMinter() external;\\n\\n    function isMinter(address _account) external view returns (bool);\\n\\n    // -- Permit --\\n\\n    function permit(\\n        address _owner,\\n        address _spender,\\n        uint256 _value,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/curation/IGraphCurationToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IGraphCurationToken is IERC20 {\\n    function burnFrom(address _account, uint256 _amount) external;\\n\\n    function mint(address _to, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/staking/IStakingData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12 <0.8.0;\\n\\ninterface IStakingData {\\n    /**\\n     * @dev Allocate GRT tokens for the purpose of serving queries of a subgraph deployment\\n     * An allocation is created in the allocate() function and consumed in claim()\\n     */\\n    struct Allocation {\\n        address indexer;\\n        bytes32 subgraphDeploymentID;\\n        uint256 tokens; // Tokens allocated to a SubgraphDeployment\\n        uint256 createdAtEpoch; // Epoch when it was created\\n        uint256 closedAtEpoch; // Epoch when it was closed\\n        uint256 collectedFees; // Collected fees for the allocation\\n        uint256 effectiveAllocation; // Effective allocation when closed\\n        uint256 accRewardsPerAllocatedToken; // Snapshot used for reward calc\\n    }\\n\\n    /**\\n     * @dev Represents a request to close an allocation with a specific proof of indexing.\\n     * This is passed when calling closeAllocationMany to define the closing parameters for\\n     * each allocation.\\n     */\\n    struct CloseAllocationRequest {\\n        address allocationID;\\n        bytes32 poi;\\n    }\\n\\n    // -- Delegation Data --\\n\\n    /**\\n     * @dev Delegation pool information. One per indexer.\\n     */\\n    struct DelegationPool {\\n        uint32 cooldownBlocks; // Blocks to wait before updating parameters\\n        uint32 indexingRewardCut; // in PPM\\n        uint32 queryFeeCut; // in PPM\\n        uint256 updatedAtBlock; // Block when the pool was last updated\\n        uint256 tokens; // Total tokens as pool reserves\\n        uint256 shares; // Total shares minted in the pool\\n        mapping(address => Delegation) delegators; // Mapping of delegator => Delegation\\n    }\\n\\n    /**\\n     * @dev Individual delegation data of a delegator in a pool.\\n     */\\n    struct Delegation {\\n        uint256 shares; // Shares owned by a delegator in the pool\\n        uint256 tokensLocked; // Tokens locked for undelegation\\n        uint256 tokensLockedUntil; // Block when locked tokens can be withdrawn\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"param\",\"type\":\"string\"}],\"name\":\"ParameterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"indexer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"allocationID\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"indexer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"allocationID\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"RewardsDenied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"subgraphDeploymentID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sinceBlock\",\"type\":\"uint256\"}],\"name\":\"RewardsDenylistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"SetController\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accRewardsPerSignal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accRewardsPerSignalLastBlockUpdated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IGraphProxy\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"acceptProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IGraphProxy\",\"name\":\"_proxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"acceptProxyAndCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"addressCache\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"denylist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_subgraphDeploymentID\",\"type\":\"bytes32\"}],\"name\":\"getAccRewardsForSubgraph\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_subgraphDeploymentID\",\"type\":\"bytes32\"}],\"name\":\"getAccRewardsPerAllocatedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccRewardsPerSignal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewRewardsPerSignal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_allocationID\",\"type\":\"address\"}],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_issuanceRate\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_subgraphDeploymentID\",\"type\":\"bytes32\"}],\"name\":\"isDenied\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuanceRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_subgraphDeploymentID\",\"type\":\"bytes32\"}],\"name\":\"onSubgraphAllocationUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_subgraphDeploymentID\",\"type\":\"bytes32\"}],\"name\":\"onSubgraphSignalUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_subgraphDeploymentID\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_deny\",\"type\":\"bool\"}],\"name\":\"setDenied\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_subgraphDeploymentID\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"_deny\",\"type\":\"bool[]\"}],\"name\":\"setDeniedMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_issuanceRate\",\"type\":\"uint256\"}],\"name\":\"setIssuanceRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_subgraphAvailabilityOracle\",\"type\":\"address\"}],\"name\":\"setSubgraphAvailabilityOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subgraphAvailabilityOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"subgraphs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accRewardsForSubgraph\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardsForSubgraphSnapshot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardsPerSignalSnapshot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardsPerAllocatedToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_allocationID\",\"type\":\"address\"}],\"name\":\"takeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateAccRewardsPerSignal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RewardsManager","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}