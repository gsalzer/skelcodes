{"status":"1","message":"OK","result":[{"SourceCode":"{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\r\\n    // an instance of this contract, which should be used via inheritance.\\r\\n    constructor () { }\\r\\n\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\"},\"SEPA_Lock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"../Ownable.sol\\\" ;\\r\\n\\r\\n//@title SEPA Token contract interface\\r\\ninterface SEPA_token {                                     \\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n}\\r\\n\\r\\n//@title SEPA Lock Contract\\r\\ncontract SEPA_Lock is Ownable {\\r\\n    \\r\\n    address public token_addr ; \\r\\n    SEPA_token token_contract = SEPA_token(token_addr) ;\\r\\n    \\r\\n    bool public m1_withdrawn = false ; \\r\\n    bool public m2_withdrawn = false ; \\r\\n\\r\\n    /**\\r\\n     * @dev Set SEPA Token contract address\\r\\n     * @param _addr Address of SEPA Token contract\\r\\n     */\\r\\n    function set_token_contract(address _addr) external onlyOwner {\\r\\n        token_addr = _addr ;\\r\\n        token_contract = SEPA_token(token_addr) ;\\r\\n    }\\r\\n    \\r\\n    function withdraw_whitelist(address _addr) external onlyOwner {\\r\\n        require(block.timestamp \\u003e= 162057600, \\\"Cannot withdraw locked whitelist tokens yet. Unlocked: Sun May 09 2021 16:00:00 GMT+0000\\\") ; \\r\\n        \\r\\n        token_contract.transfer(_addr, 9535e18) ; \\r\\n    }\\r\\n    \\r\\n    function withdraw_seed(address _addr) external onlyOwner {\\r\\n        require(block.timestamp \\u003e= 162316800, \\\"Cannot withdraw locked seed tokens yet. Unlocked: Tue Jun 08 2021 16:00:00 GMT+0000\\\") ; \\r\\n        \\r\\n        token_contract.transfer(_addr, 9378e18) ; \\r\\n    }\\r\\n\\r\\n    function withdraw_marketing1(address _addr) external onlyOwner {\\r\\n        require(block.timestamp \\u003e 162057600, \\\"Cannot withdraw locked marketing1 tokens yet. Unlocked: Sun May 09 2021 16:00:00 GMT+0000\\\") ; \\r\\n        require(m1_withdrawn == false) ; \\r\\n        \\r\\n        m1_withdrawn = true ;\\r\\n        token_contract.transfer(_addr, 1167e18) ;\\r\\n    }\\r\\n    \\r\\n    function withdraw_marketing2(address _addr) external onlyOwner {\\r\\n        require(block.timestamp \\u003e 162316000, \\\"Cannot withdraw locked marketing2 tokens yet. Unlocked: Tue Jun 08 2021 16:00:00 GMT+0000\\\") ; \\r\\n        require(m2_withdrawn == false) ; \\r\\n        \\r\\n        m2_withdrawn = true ; \\r\\n        token_contract.transfer(_addr, 1166e18) ; \\r\\n    }\\r\\n    \\r\\n    function withdraw_marketing3(address _addr) external onlyOwner {\\r\\n        require(block.timestamp \\u003e 162576000, \\\"Cannot withdraw locked marketing3 tokens yet. Unlocked: Thu Jul 08 2021 16:00:00 GMT+0000\\\") ; \\r\\n    \\r\\n        token_contract.transfer(_addr, 1166e18) ; \\r\\n    }\\r\\n\\r\\n}\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"m1_withdrawn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"m2_withdrawn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"set_token_contract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"withdraw_marketing1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"withdraw_marketing2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"withdraw_marketing3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"withdraw_seed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"withdraw_whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SEPA_Lock","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://46cd35058209af4204f8aa9361b3f98820236cc0b5443c2cc9653dfbd207d708"}]}