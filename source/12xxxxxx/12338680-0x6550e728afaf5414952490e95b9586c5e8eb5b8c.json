{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.8.0;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function pow(uint256 base, uint256 exponent) internal pure returns (uint256) {\r\n        if (exponent == 0) {\r\n            return 1;\r\n        }\r\n        else if (exponent == 1) {\r\n            return base;\r\n        }\r\n        else if (base == 0 && exponent != 0) {\r\n            return 0;\r\n        }\r\n        else {\r\n            uint256 z = base;\r\n            for (uint256 i = 1; i < exponent; i++)\r\n                z = mul(z, base);\r\n            return z;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary FixedPointMath {\r\n  uint256 public constant DECIMALS = 18;\r\n  uint256 public constant SCALAR = 10**DECIMALS;\r\n\r\n  struct FixedDecimal {\r\n    uint256 x;\r\n  }\r\n\r\n  function fromU256(uint256 value) internal pure returns (FixedDecimal memory) {\r\n    uint256 x;\r\n    require(value == 0 || (x = value * SCALAR) / SCALAR == value);\r\n    return FixedDecimal(x);\r\n  }\r\n\r\n  function maximumValue() internal pure returns (FixedDecimal memory) {\r\n    return FixedDecimal(uint256(-1));\r\n  }\r\n\r\n  function add(FixedDecimal memory self, FixedDecimal memory value) internal pure returns (FixedDecimal memory) {\r\n    uint256 x;\r\n    require((x = self.x + value.x) >= self.x);\r\n    return FixedDecimal(x);\r\n  }\r\n\r\n  function add(FixedDecimal memory self, uint256 value) internal pure returns (FixedDecimal memory) {\r\n    return add(self, fromU256(value));\r\n  }\r\n\r\n  function sub(FixedDecimal memory self, FixedDecimal memory value) internal pure returns (FixedDecimal memory) {\r\n    uint256 x;\r\n    require((x = self.x - value.x) <= self.x);\r\n    return FixedDecimal(x);\r\n  }\r\n\r\n  function sub(FixedDecimal memory self, uint256 value) internal pure returns (FixedDecimal memory) {\r\n    return sub(self, fromU256(value));\r\n  }\r\n\r\n  function mul(FixedDecimal memory self, uint256 value) internal pure returns (FixedDecimal memory) {\r\n    uint256 x;\r\n    require(value == 0 || (x = self.x * value) / value == self.x);\r\n    return FixedDecimal(x);\r\n  }\r\n\r\n  function div(FixedDecimal memory self, uint256 value) internal pure returns (FixedDecimal memory) {\r\n    require(value != 0);\r\n    return FixedDecimal(self.x / value);\r\n  }\r\n\r\n  function cmp(FixedDecimal memory self, FixedDecimal memory value) internal pure returns (int256) {\r\n    if (self.x < value.x) {\r\n      return -1;\r\n    }\r\n\r\n    if (self.x > value.x) {\r\n      return 1;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  function decode(FixedDecimal memory self) internal pure returns (uint256) {\r\n    return self.x / SCALAR;\r\n  }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract Context {\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Accessible is Ownable {\r\n    mapping(address => bool) private access;\r\n    \r\n    constructor() {\r\n        access[msg.sender] = true;\r\n    }\r\n    \r\n     modifier hasAccess() {\r\n        require(checkAccess(msg.sender));\r\n        _;\r\n    }\r\n    \r\n    function checkAccess(address sender) public view returns (bool) {\r\n        if (access[sender] == true) \r\n            return true;\r\n        return false;\r\n    }\r\n    \r\n    function removeAccess(address addr) public hasAccess returns (bool success) {\r\n        access[addr] = false;\r\n        return true;\r\n    }\r\n    \r\n    function addAccess(address addr) public hasAccess returns (bool) {\r\n        access[addr] = true;\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract ExternalAccessible {\r\n    \r\n    address public accessContract;\r\n\r\n    function checkAccess(address sender) public returns (bool) {\r\n        bool result = Accessible(accessContract).checkAccess(sender);\r\n        require(result == true);\r\n        return true;\r\n    }\r\n\r\n    modifier hasAccess() {\r\n        require(checkAccess(msg.sender));\r\n        _;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract ERC20 is Context, IERC20, ExternalAccessible {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string public _name;\r\n    string public _symbol;\r\n    uint8 public _decimals;\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) external virtual hasAccess {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) external virtual hasAccess {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\ncontract wXEQ is ERC20 {\r\n    \r\n    constructor(address _accessContract) {\r\n        _name = \"Wrapped Equilibria v2\";\r\n        _symbol = \"wXEQ\";\r\n        _decimals = 18;\r\n        accessContract = _accessContract;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Helps contracts guard agains rentrancy attacks.\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @notice If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n\r\n  /**\r\n   * @dev We use a single lock for the whole contract.\r\n   */\r\n  bool private rentrancy_lock = false;\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * @notice If you mark a function `nonReentrant`, you should also\r\n   * mark it `external`. Calling one nonReentrant function from\r\n   * another is not supported. Instead, you can implement a\r\n   * `private` function doing the actual work, and a `external`\r\n   * wrapper marked as `nonReentrant`.\r\n   */\r\n  modifier nonReentrant() {\r\n    require(!rentrancy_lock);\r\n    rentrancy_lock = true;\r\n    _;\r\n    rentrancy_lock = false;\r\n  }\r\n\r\n}\r\n\r\nlibrary Pool {\r\n  using FixedPointMath for FixedPointMath.FixedDecimal;\r\n  using Pool for Pool.Data;\r\n  using Pool for Pool.List;\r\n  using SafeMath for uint256;\r\n\r\n  struct Context {\r\n    uint256 rewardRate;\r\n    uint256 totalRewardWeight;\r\n  }\r\n\r\n  struct Data {\r\n    IERC20 token;\r\n    uint256 totalDeposited;\r\n    uint256 rewardWeight;\r\n    FixedPointMath.FixedDecimal accumulatedRewardWeight;\r\n    uint256 lastUpdatedBlock;\r\n  }\r\n\r\n  struct List {\r\n    Data[] elements;\r\n  }\r\n\r\n  /// @dev Updates the pool.\r\n  ///\r\n  /// @param _ctx the pool context.\r\n  function update(Data storage _data, Context storage _ctx) internal {\r\n    _data.accumulatedRewardWeight = _data.getUpdatedAccumulatedRewardWeight(_ctx);\r\n    _data.lastUpdatedBlock = block.number;\r\n  }\r\n\r\n  /// @dev Gets the rate at which the pool will distribute rewards to stakers.\r\n  ///\r\n  /// @param _ctx the pool context.\r\n  ///\r\n  /// @return the reward rate of the pool in tokens per block.\r\n  function getRewardRate(Data storage _data, Context storage _ctx)\r\n    internal view\r\n    returns (uint256)\r\n  {\r\n    // console.log(\"get reward rate\");\r\n    // console.log(uint(_data.rewardWeight));\r\n    // console.log(uint(_ctx.totalRewardWeight));\r\n    // console.log(uint(_ctx.rewardRate));\r\n    return _ctx.rewardRate.mul(_data.rewardWeight).div(_ctx.totalRewardWeight);\r\n  }\r\n\r\n  /// @dev Gets the accumulated reward weight of a pool.\r\n  ///\r\n  /// @param _ctx the pool context.\r\n  ///\r\n  /// @return the accumulated reward weight.\r\n  function getUpdatedAccumulatedRewardWeight(Data storage _data, Context storage _ctx)\r\n    internal view\r\n    returns (FixedPointMath.FixedDecimal memory)\r\n  {\r\n    if (_data.totalDeposited == 0) {\r\n      return _data.accumulatedRewardWeight;\r\n    }\r\n\r\n    uint256 _elapsedTime = block.number.sub(_data.lastUpdatedBlock);\r\n    if (_elapsedTime == 0) {\r\n      return _data.accumulatedRewardWeight;\r\n    }\r\n\r\n    uint256 _rewardRate = _data.getRewardRate(_ctx);\r\n    uint256 _distributeAmount = _rewardRate.mul(_elapsedTime);\r\n\r\n    if (_distributeAmount == 0) {\r\n      return _data.accumulatedRewardWeight;\r\n    }\r\n\r\n    FixedPointMath.FixedDecimal memory _rewardWeight = FixedPointMath.fromU256(_distributeAmount).div(_data.totalDeposited);\r\n    return _data.accumulatedRewardWeight.add(_rewardWeight);\r\n  }\r\n\r\n  /// @dev Adds an element to the list.\r\n  ///\r\n  /// @param _element the element to add.\r\n  function push(List storage _self, Data memory _element) internal {\r\n    _self.elements.push(_element);\r\n  }\r\n\r\n  /// @dev Gets an element from the list.\r\n  ///\r\n  /// @param _index the index in the list.\r\n  ///\r\n  /// @return the element at the specified index.\r\n  function get(List storage _self, uint256 _index) internal view returns (Data storage) {\r\n    return _self.elements[_index];\r\n  }\r\n\r\n  /// @dev Gets the last element in the list.\r\n  ///\r\n  /// This function will revert if there are no elements in the list.\r\n  ///ck\r\n  /// @return the last element in the list.\r\n  function last(List storage _self) internal view returns (Data storage) {\r\n    return _self.elements[_self.lastIndex()];\r\n  }\r\n\r\n  /// @dev Gets the index of the last element in the list.\r\n  ///\r\n  /// This function will revert if there are no elements in the list.\r\n  ///\r\n  /// @return the index of the last element.\r\n  function lastIndex(List storage _self) internal view returns (uint256) {\r\n    uint256 _length = _self.length();\r\n    return _length.sub(1, \"Pool.List: list is empty\");\r\n  }\r\n\r\n  /// @dev Gets the number of elements in the list.\r\n  ///\r\n  /// @return the number of elements.\r\n  function length(List storage _self) internal view returns (uint256) {\r\n    return _self.elements.length;\r\n  }\r\n}\r\n\r\n/// @title Stake\r\n///\r\n/// @dev A library which provides the Stake data struct and associated functions.\r\nlibrary Stake {\r\n  using FixedPointMath for FixedPointMath.FixedDecimal;\r\n  using Pool for Pool.Data;\r\n  using SafeMath for uint256;\r\n  using Stake for Stake.Data;\r\n\r\n  struct Data {\r\n    uint256 totalDeposited;\r\n    uint256 totalUnclaimed;\r\n    FixedPointMath.FixedDecimal lastAccumulatedWeight;\r\n  }\r\n\r\n  function update(Data storage _self, Pool.Data storage _pool, Pool.Context storage _ctx) internal {\r\n    _self.totalUnclaimed = _self.getUpdatedTotalUnclaimed(_pool, _ctx);\r\n    _self.lastAccumulatedWeight = _pool.getUpdatedAccumulatedRewardWeight(_ctx);\r\n  }\r\n\r\n  function getUpdatedTotalUnclaimed(Data storage _self, Pool.Data storage _pool, Pool.Context storage _ctx)\r\n    internal view\r\n    returns (uint256)\r\n  {\r\n    FixedPointMath.FixedDecimal memory _currentAccumulatedWeight = _pool.getUpdatedAccumulatedRewardWeight(_ctx);\r\n    FixedPointMath.FixedDecimal memory _lastAccumulatedWeight = _self.lastAccumulatedWeight;\r\n\r\n    if (_currentAccumulatedWeight.cmp(_lastAccumulatedWeight) == 0) {\r\n      return _self.totalUnclaimed;\r\n    }\r\n\r\n    uint256 _distributedAmount = _currentAccumulatedWeight\r\n      .sub(_lastAccumulatedWeight)\r\n      .mul(_self.totalDeposited)\r\n      .decode();\r\n\r\n    return _self.totalUnclaimed.add(_distributedAmount);\r\n  }\r\n}\r\n\r\ninterface IDetailedERC20 is IERC20 {\r\n  function name() external returns (string memory);\r\n  function symbol() external returns (string memory);\r\n  function decimals() external returns (uint8);\r\n}\r\n\r\ninterface IMintableERC20 is IDetailedERC20{\r\n  function _mint(address _recipient, uint256 _amount) external;\r\n  function _burn(address account, uint256 amount) external;\r\n}\r\n\r\ncontract StakingPools is ReentrancyGuard {\r\n  using FixedPointMath for FixedPointMath.FixedDecimal;\r\n  using Pool for Pool.Data;\r\n  using Pool for Pool.List;\r\n  using SafeERC20 for IERC20;\r\n  using SafeMath for uint256;\r\n  using Stake for Stake.Data;\r\n\r\n  event PendingGovernanceUpdated(\r\n    address pendingGovernance\r\n  );\r\n\r\n  event GovernanceUpdated(\r\n    address governance\r\n  );\r\n\r\n  event RewardRateUpdated(\r\n    uint256 rewardRate\r\n  );\r\n\r\n  event PoolRewardWeightUpdated(\r\n    uint256 indexed poolId,\r\n    uint256 rewardWeight\r\n  );\r\n\r\n  event PoolCreated(\r\n    uint256 indexed poolId,\r\n    IERC20 indexed token\r\n  );\r\n\r\n  event TokensDeposited(\r\n    address indexed user,\r\n    uint256 indexed poolId,\r\n    uint256 amount\r\n  );\r\n\r\n  event TokensWithdrawn(\r\n    address indexed user,\r\n    uint256 indexed poolId,\r\n    uint256 amount\r\n  );\r\n\r\n  event TokensClaimed(\r\n    address indexed user,\r\n    uint256 indexed poolId,\r\n    uint256 amount\r\n  );\r\n\r\n  /// @dev The token which will be minted as a reward for staking.\r\n  IMintableERC20 public reward;\r\n\r\n  /// @dev The address of the account which currently has administrative capabilities over this contract.\r\n  address public governance;\r\n\r\n  address public pendingGovernance;\r\n\r\n  /// @dev Tokens are mapped to their pool identifier plus one. Tokens that do not have an associated pool\r\n  /// will return an identifier of zero.\r\n  mapping(IERC20 => uint256) public tokenPoolIds;\r\n\r\n  /// @dev The context shared between the pools.\r\n  Pool.Context private _ctx;\r\n\r\n  /// @dev A list of all of the pools.\r\n  Pool.List private _pools;\r\n\r\n  /// @dev A mapping of all of the user stakes mapped first by pool and then by address.\r\n  mapping(address => mapping(uint256 => Stake.Data)) private _stakes;\r\n  \r\n  /// @dev Tracks the total amount of tokens claimed as rewards.\r\n  uint256 public totalTokensClaimed;\r\n\r\n  constructor(\r\n    IMintableERC20 _reward,\r\n    address _governance\r\n  ) public {\r\n    require(_governance != address(0), \"StakingPools: governance address cannot be 0x0\");\r\n\r\n    reward = _reward;\r\n    governance = _governance;\r\n    // 2083333300000000\r\n  }\r\n\r\n  /// @dev A modifier which reverts when the caller is not the governance.\r\n  modifier onlyGovernance() {\r\n    require(msg.sender == governance, \"StakingPools: only governance\");\r\n    _;\r\n  }\r\n\r\n  /// @dev Sets the governance.\r\n  ///\r\n  /// This function can only called by the current governance.\r\n  ///\r\n  /// @param _pendingGovernance the new pending governance.\r\n  function setPendingGovernance(address _pendingGovernance) external onlyGovernance {\r\n    require(_pendingGovernance != address(0), \"StakingPools: pending governance address cannot be 0x0\");\r\n    pendingGovernance = _pendingGovernance;\r\n\r\n    emit PendingGovernanceUpdated(_pendingGovernance);\r\n  }\r\n\r\n  function acceptGovernance() external {\r\n    require(msg.sender == pendingGovernance, \"StakingPools: only pending governance\");\r\n\r\n    address _pendingGovernance = pendingGovernance;\r\n    governance = _pendingGovernance;\r\n\r\n    emit GovernanceUpdated(_pendingGovernance);\r\n  }\r\n\r\n  /// @dev Sets the distribution reward rate.\r\n  ///\r\n  /// This will update all of the pools.\r\n  ///\r\n  /// @param _rewardRate The number of tokens to distribute per second.\r\n  function setRewardRate(uint256 _rewardRate) external onlyGovernance {\r\n    _updatePools(); // 951293760000000\r\n\r\n    _ctx.rewardRate = _rewardRate;\r\n\r\n    emit RewardRateUpdated(_rewardRate);\r\n  }\r\n\r\n  /// @dev Creates a new pool.\r\n  ///\r\n  /// The created pool will need to have its reward weight initialized before it begins generating rewards.\r\n  ///\r\n  /// @param _token The token the pool will accept for staking.\r\n  ///\r\n  /// @return the identifier for the newly created pool.\r\n  function createPool(IERC20 _token) external onlyGovernance returns (uint256) {\r\n    require(tokenPoolIds[_token] == 0, \"StakingPools: token already has a pool\");\r\n\r\n    uint256 _poolId = _pools.length();\r\n\r\n    _pools.push(Pool.Data({\r\n      token: _token,\r\n      totalDeposited: 0,\r\n      rewardWeight: 0,\r\n      accumulatedRewardWeight: FixedPointMath.FixedDecimal(0),\r\n      lastUpdatedBlock: block.number\r\n    }));\r\n\r\n    tokenPoolIds[_token] = _poolId + 1;\r\n\r\n    emit PoolCreated(_poolId, _token);\r\n\r\n    return _poolId;\r\n  }\r\n\r\n  /// @dev Sets the reward weights of all of the pools.\r\n  ///\r\n  /// @param _rewardWeights The reward weights of all of the pools.\r\n  function setRewardWeights(uint256[] calldata _rewardWeights) external onlyGovernance {\r\n    require(_rewardWeights.length == _pools.length(), \"StakingPools: weights length mismatch\");\r\n\r\n    _updatePools();\r\n\r\n    uint256 _totalRewardWeight = _ctx.totalRewardWeight;\r\n    for (uint256 _poolId = 0; _poolId < _pools.length(); _poolId++) {\r\n      Pool.Data storage _pool = _pools.get(_poolId);\r\n\r\n      uint256 _currentRewardWeight = _pool.rewardWeight;\r\n      if (_currentRewardWeight == _rewardWeights[_poolId]) {\r\n        continue;\r\n      }\r\n\r\n      // FIXME\r\n      _totalRewardWeight = _totalRewardWeight.sub(_currentRewardWeight).add(_rewardWeights[_poolId]);\r\n      _pool.rewardWeight = _rewardWeights[_poolId];\r\n\r\n      emit PoolRewardWeightUpdated(_poolId, _rewardWeights[_poolId]);\r\n    }\r\n\r\n    _ctx.totalRewardWeight = _totalRewardWeight;\r\n  }\r\n\r\n  /// @dev Stakes tokens into a pool.\r\n  ///\r\n  /// @param _poolId        the pool to deposit tokens into.\r\n  /// @param _depositAmount the amount of tokens to deposit.\r\n  function deposit(uint256 _poolId, uint256 _depositAmount) external nonReentrant {\r\n    Pool.Data storage _pool = _pools.get(_poolId);\r\n    _pool.update(_ctx);\r\n\r\n    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\r\n    _stake.update(_pool, _ctx);\r\n\r\n    _deposit(_poolId, _depositAmount);\r\n  }\r\n\r\n  /// @dev Withdraws staked tokens from a pool.\r\n  ///\r\n  /// @param _poolId          The pool to withdraw staked tokens from.\r\n  /// @param _withdrawAmount  The number of tokens to withdraw.\r\n  function withdraw(uint256 _poolId, uint256 _withdrawAmount) external nonReentrant {\r\n    Pool.Data storage _pool = _pools.get(_poolId);\r\n    _pool.update(_ctx);\r\n\r\n    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\r\n    _stake.update(_pool, _ctx);\r\n    \r\n    _claim(_poolId);\r\n    _withdraw(_poolId, _withdrawAmount);\r\n  }\r\n\r\n  /// @dev Claims all rewarded tokens from a pool.\r\n  ///\r\n  /// @param _poolId The pool to claim rewards from.\r\n  ///\r\n  /// @notice use this function to claim the tokens from a corresponding pool by ID.\r\n  function claim(uint256 _poolId) external nonReentrant {\r\n    Pool.Data storage _pool = _pools.get(_poolId);\r\n    _pool.update(_ctx);\r\n\r\n    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\r\n    _stake.update(_pool, _ctx);\r\n\r\n    _claim(_poolId);\r\n  }\r\n\r\n  /// @dev Claims all rewards from a pool and then withdraws all staked tokens.\r\n  ///\r\n  /// @param _poolId the pool to exit from.\r\n  function exit(uint256 _poolId) external nonReentrant {\r\n    Pool.Data storage _pool = _pools.get(_poolId);\r\n    _pool.update(_ctx);\r\n\r\n    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\r\n    _stake.update(_pool, _ctx);\r\n\r\n    _claim(_poolId);\r\n    _withdraw(_poolId, _stake.totalDeposited);\r\n  }\r\n\r\n  /// @dev Gets the rate at which tokens are minted to stakers for all pools.\r\n  ///\r\n  /// @return the reward rate.\r\n  function rewardRate() external view returns (uint256) {\r\n    return _ctx.rewardRate;\r\n  }\r\n\r\n  /// @dev Gets the total reward weight between all the pools.\r\n  ///\r\n  /// @return the total reward weight.\r\n  function totalRewardWeight() external view returns (uint256) {\r\n    return _ctx.totalRewardWeight;\r\n  }\r\n\r\n  /// @dev Gets the number of pools that exist.\r\n  ///\r\n  /// @return the pool count.\r\n  function poolCount() external view returns (uint256) {\r\n    return _pools.length();\r\n  }\r\n\r\n  /// @dev Gets the token a pool accepts.\r\n  ///\r\n  /// @param _poolId the identifier of the pool.\r\n  ///\r\n  /// @return the token.\r\n  function getPoolToken(uint256 _poolId) external view returns (IERC20) {\r\n    Pool.Data storage _pool = _pools.get(_poolId);\r\n    return _pool.token;\r\n  }\r\n\r\n  /// @dev Gets the total amount of funds staked in a pool.\r\n  ///\r\n  /// @param _poolId the identifier of the pool.\r\n  ///\r\n  /// @return the total amount of staked or deposited tokens.\r\n  function getPoolTotalDeposited(uint256 _poolId) external view returns (uint256) {\r\n    Pool.Data storage _pool = _pools.get(_poolId);\r\n    return _pool.totalDeposited;\r\n  }\r\n\r\n  /// @dev Gets the reward weight of a pool which determines how much of the total rewards it receives per block.\r\n  ///\r\n  /// @param _poolId the identifier of the pool.\r\n  ///\r\n  /// @return the pool reward weight.\r\n  function getPoolRewardWeight(uint256 _poolId) external view returns (uint256) {\r\n    Pool.Data storage _pool = _pools.get(_poolId);\r\n    return _pool.rewardWeight;\r\n  }\r\n\r\n  /// @dev Gets the amount of tokens per block being distributed to stakers for a pool.\r\n  ///\r\n  /// @param _poolId the identifier of the pool.\r\n  ///\r\n  /// @return the pool reward rate.\r\n  function getPoolRewardRate(uint256 _poolId) external view returns (uint256) {\r\n    Pool.Data storage _pool = _pools.get(_poolId);\r\n    return _pool.getRewardRate(_ctx);\r\n  }\r\n\r\n  /// @dev Gets the number of tokens a user has staked into a pool.\r\n  ///\r\n  /// @param _account The account to query.\r\n  /// @param _poolId  the identifier of the pool.\r\n  ///\r\n  /// @return the amount of deposited tokens.\r\n  function getStakeTotalDeposited(address _account, uint256 _poolId) external view returns (uint256) {\r\n    Stake.Data storage _stake = _stakes[_account][_poolId];\r\n    return _stake.totalDeposited;\r\n  }\r\n\r\n  /// @dev Gets the number of unclaimed reward tokens a user can claim from a pool.\r\n  ///\r\n  /// @param _account The account to get the unclaimed balance of.\r\n  /// @param _poolId  The pool to check for unclaimed rewards.\r\n  ///\r\n  /// @return the amount of unclaimed reward tokens a user has in a pool.\r\n  function getStakeTotalUnclaimed(address _account, uint256 _poolId) external view returns (uint256) {\r\n    Stake.Data storage _stake = _stakes[_account][_poolId];\r\n    return _stake.getUpdatedTotalUnclaimed(_pools.get(_poolId), _ctx);\r\n  }\r\n\r\n  /// @dev Updates all of the pools.\r\n  function _updatePools() internal {\r\n    for (uint256 _poolId = 0; _poolId < _pools.length(); _poolId++) {\r\n      Pool.Data storage _pool = _pools.get(_poolId);\r\n      _pool.update(_ctx);\r\n    }\r\n  }\r\n\r\n  /// @dev Stakes tokens into a pool.\r\n  ///\r\n  /// The pool and stake MUST be updated before calling this function.\r\n  ///\r\n  /// @param _poolId        the pool to deposit tokens into.\r\n  /// @param _depositAmount the amount of tokens to deposit.\r\n  function _deposit(uint256 _poolId, uint256 _depositAmount) internal {\r\n    Pool.Data storage _pool = _pools.get(_poolId);\r\n    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\r\n\r\n    _pool.totalDeposited = _pool.totalDeposited.add(_depositAmount);\r\n    _stake.totalDeposited = _stake.totalDeposited.add(_depositAmount);\r\n\r\n    _pool.token.safeTransferFrom(msg.sender, address(this), _depositAmount);\r\n\r\n    emit TokensDeposited(msg.sender, _poolId, _depositAmount);\r\n  }\r\n\r\n  /// @dev Withdraws staked tokens from a pool.\r\n  ///\r\n  /// The pool and stake MUST be updated before calling this function.\r\n  ///\r\n  /// @param _poolId          The pool to withdraw staked tokens from.\r\n  /// @param _withdrawAmount  The number of tokens to withdraw.\r\n  function _withdraw(uint256 _poolId, uint256 _withdrawAmount) internal {\r\n    Pool.Data storage _pool = _pools.get(_poolId);\r\n    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\r\n\r\n    _pool.totalDeposited = _pool.totalDeposited.sub(_withdrawAmount);\r\n    _stake.totalDeposited = _stake.totalDeposited.sub(_withdrawAmount);\r\n\r\n    _pool.token.safeTransfer(msg.sender, _withdrawAmount);\r\n\r\n    emit TokensWithdrawn(msg.sender, _poolId, _withdrawAmount);\r\n  }\r\n\r\n  /// @dev Claims all rewarded tokens from a pool.\r\n  ///\r\n  /// The pool and stake MUST be updated before calling this function.\r\n  ///\r\n  /// @param _poolId The pool to claim rewards from.\r\n  ///\r\n  /// @notice use this function to claim the tokens from a corresponding pool by ID.\r\n  function _claim(uint256 _poolId) internal {\r\n    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\r\n\r\n    uint256 _claimAmount = _stake.totalUnclaimed;\r\n    _stake.totalUnclaimed = 0;\r\n    \r\n    reward._mint(msg.sender, _claimAmount);\r\n    totalTokensClaimed = totalTokensClaimed.add(_claimAmount);\r\n\r\n    emit TokensClaimed(msg.sender, _poolId, _claimAmount);\r\n  }\r\n}\r\n\r\ncontract Snapshot is Ownable {\r\n    \r\n    address[] public addressList;\r\n    address public oldContract;\r\n    address public newContract;\r\n    \r\n    mapping(address => bool) public hasClaimed;\r\n    \r\n    constructor(address _oldContract, address _newContract) {\r\n        oldContract = _oldContract;\r\n        newContract = _newContract;\r\n    }\r\n    \r\n    function swapTokens(uint loops) public onlyOwner {\r\n\r\n        for (uint x = 0; x < loops; x++) {\r\n            if (hasClaimed[addressList[x]] == false) {\r\n                uint256 bal = ERC20(oldContract).balanceOf(addressList[x]);\r\n                if (bal > 0)\r\n                    ERC20(newContract)._mint(addressList[x], bal);\r\n                hasClaimed[addressList[x]] = true;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function numberOfAddresses() public view returns (uint256) {\r\n        return addressList.length;\r\n    }\r\n    \r\n    function addAddresses(address[] calldata _addressList) public onlyOwner {\r\n        for (uint i = 0; i < _addressList.length; i++) {\r\n            addressList.push(_addressList[i]);\r\n        }\r\n    }\r\n}\r\n\r\ncontract XEQSwaps is ExternalAccessible, Ownable {\r\n    using SafeMath for *;\r\n    \r\n    wXEQ wXEQContract;\r\n\r\n    uint256 public wXEQMinted;\r\n    uint256 public wXEQBurned;\r\n    uint256 public teamFees;\r\n\r\n    uint256 teamAmount;\r\n    uint256 burntAmount;\r\n    uint256 devFeePercent;\r\n\r\n    //txHash -> eth address of tx mint\r\n    \r\n    mapping(string => bool) xeq_complete;\r\n    mapping(string => uint256) xeq_amounts;\r\n    mapping(string => address) eth_addresses;\r\n\r\n    \r\n    constructor(address _wxeq, address _accessContract) {\r\n        accessContract = _accessContract;\r\n        wXEQContract = wXEQ(_wxeq);\r\n        wXEQMinted = 0;\r\n        transferOwnership(msg.sender);\r\n        teamAmount = 4000;\r\n        burntAmount = 6000;\r\n        devFeePercent = 100;\r\n        \r\n    }\r\n    \r\n    event NewMint(address indexed account, uint256 amount, uint256 devFee, uint256 amountBurnt);\r\n    \r\n    function devFee(uint256 _value, uint256 devFeeVal1) public pure returns (uint256) {\r\n        return ((_value.mul(devFeeVal1)).div(10000));\r\n    }\r\n    \r\n    function claim_wxeq(string memory tx_hash) public returns (bool) {\r\n        require(xeq_amounts[tx_hash] != 0);\r\n        require(eth_addresses[tx_hash] != address(0));\r\n        require(!xeq_complete[tx_hash]);\r\n        require(eth_addresses[tx_hash] == msg.sender);\r\n        xeq_complete[tx_hash] = true;\r\n        uint256 fee = devFee(xeq_amounts[tx_hash], devFeePercent);\r\n        uint256 teamFee = devFee(fee, teamAmount);\r\n        uint256 burnt = devFee(fee, burntAmount);\r\n        wXEQContract._mint(eth_addresses[tx_hash], xeq_amounts[tx_hash]);\r\n        wXEQContract._mint(owner(), teamFee);\r\n        wXEQBurned = wXEQBurned.add(burnt);\r\n        wXEQMinted = wXEQMinted.add(xeq_amounts[tx_hash]);\r\n        teamFees = teamFees.add(teamFee);\r\n        emit NewMint(eth_addresses[tx_hash], xeq_amounts[tx_hash], teamFee, burnt);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function register_transaction(address account, string memory tx_hash, uint256 amount) public hasAccess returns (bool) {\r\n        require(!xeq_complete[tx_hash]);\r\n        require(xeq_amounts[tx_hash] == 0);\r\n        require(eth_addresses[tx_hash] == address(0));\r\n        \r\n        eth_addresses[tx_hash] = account;\r\n        xeq_amounts[tx_hash] = amount;\r\n        return true;\r\n    }\r\n    \r\n    function isSwapRegistered(string memory tx_hash) public view returns (bool) {\r\n        if(xeq_amounts[tx_hash] == 0) \r\n        {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function testDevFeeVals(uint256 _value, uint256 val1, uint256 val2) public pure returns (uint256) {\r\n        return (_value.mul(val1)).div(val2);\r\n    }\r\n    \r\n    function setDevFee(uint256 val) public hasAccess returns (bool) {\r\n        devFeePercent = val;\r\n        assert(devFeePercent == val);\r\n        return true;\r\n    }\r\n\r\n     function setBurntAmount(uint256 val) public hasAccess returns (bool) {\r\n        burntAmount = val;\r\n        assert(burntAmount == val);\r\n        return true;\r\n    }\r\n\r\n    function setTeamAmount(uint256 val) public hasAccess returns (bool) {\r\n        teamAmount = val;\r\n        assert(teamAmount == val);\r\n        return true;\r\n    }\r\n\r\n    function devFee(uint _value) public view returns (uint256) {\r\n        return ((_value.mul(devFeePercent)).div(10000));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IMintableERC20\",\"name\":\"_reward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"GovernanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingGovernance\",\"type\":\"address\"}],\"name\":\"PendingGovernanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardWeight\",\"type\":\"uint256\"}],\"name\":\"PoolRewardWeightUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"}],\"name\":\"RewardRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolRewardWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolTotalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getStakeTotalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getStakeTotalUnclaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"contract IMintableERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingGovernance\",\"type\":\"address\"}],\"name\":\"setPendingGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_rewardWeights\",\"type\":\"uint256[]\"}],\"name\":\"setRewardWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenPoolIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakingPools","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000004a5b3d0004454988c50e8de1bcfc921ee995ade30000000000000000000000007fb4ecd5b8e234fa5863bfa2799ea25d8819f42d","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f41c38200dfa96c2c512ec16c2ffd375f5d0a5c1d127ce89af17295a2326a667"}]}