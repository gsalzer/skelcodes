{"status":"1","message":"OK","result":[{"SourceCode":"{\"AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n    function decimals()\\n    external\\n    view\\n    returns (\\n        uint8\\n    );\\n\\n    function description()\\n    external\\n    view\\n    returns (\\n        string memory\\n    );\\n\\n    function version()\\n    external\\n    view\\n    returns (\\n        uint256\\n    );\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(\\n        uint80 _roundId\\n    )\\n    external\\n    view\\n    returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n\\n    function latestRoundData()\\n    external\\n    view\\n    returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n\\n}\"},\"Database.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.3;\\r\\n\\r\\nimport {Tytanid} from \\\"./Tytanid.sol\\\";\\r\\nimport \\\"./AggregatorV3Interface.sol\\\";\\r\\n\\r\\ncontract Database is Tytanid {\\r\\n    struct Contract {\\r\\n        address contractAddress;\\r\\n        address owner;\\r\\n        Asset asset;\\r\\n        Currency currency;\\r\\n        uint24 participantsLong;\\r\\n        uint24 participantsShort;\\r\\n        uint32 biddingEndDate;\\r\\n        uint32 maturityDate;\\r\\n        uint strikePrice;\\r\\n        uint longAmount;\\r\\n        uint shortAmount;\\r\\n        bool isMarketHasAnyBids;\\r\\n        uint24 status;\\r\\n    }\\r\\n\\r\\n    mapping(uint48 =\\u003e Contract) contracts;\\r\\n\\r\\n    mapping(address =\\u003e uint48) addressToContractId;\\r\\n\\r\\n    struct Admin {\\r\\n        bool isAdmin;\\r\\n    }\\r\\n\\r\\n    mapping(address =\\u003e Admin) admins;\\r\\n\\r\\n    struct TytanidWallet {\\r\\n        address commissionAddress;\\r\\n    }\\r\\n\\r\\n    mapping(string =\\u003e Asset) assets;\\r\\n    string[] assetsIndices;\\r\\n\\r\\n    mapping(string =\\u003e Currency) currencies;\\r\\n    string[] currenciesIndices;\\r\\n\\r\\n    uint48 nextId = 1;\\r\\n\\r\\n    Activity[] activities;\\r\\n\\r\\n    address sourceContract;\\r\\n\\r\\n    constructor(){\\r\\n        admins[msg.sender].isAdmin = true;\\r\\n\\r\\n        commissions.createMarketStake = 2;\\r\\n        commissions.joinMarketStake = 1;\\r\\n        commissions.exitMarketStake = 5;\\r\\n        commissions.joinMarketTytanidRatio = 90;\\r\\n        commissions.exitMarketTytanidRatio = 80;\\r\\n    }\\r\\n\\r\\n    function getSettings(\\r\\n    ) public view returns (\\r\\n        Asset[] memory,\\r\\n        Currency[] memory,\\r\\n        int[] memory,\\r\\n        Commissions memory\\r\\n    ){\\r\\n        Asset[] memory assetsData = new Asset[](assetsIndices.length);\\r\\n        Currency[] memory currenciesData = new Currency[](currenciesIndices.length);\\r\\n        int[] memory currenciesPrices = new int[](currenciesIndices.length);\\r\\n        AggregatorV3Interface currencyFeed;\\r\\n\\r\\n        for (uint48 i = 0; i \\u003c assetsIndices.length; i++) {\\r\\n            assetsData[i] = assets[assetsIndices[i]];\\r\\n        }\\r\\n\\r\\n        for (uint48 i = 0; i \\u003c currenciesIndices.length; i++) {\\r\\n            currenciesData[i] = currencies[currenciesIndices[i]];\\r\\n            currencyFeed = AggregatorV3Interface(currencies[currenciesIndices[i]].chainlinkAddress);\\r\\n            (\\r\\n            uint80 roundID,\\r\\n            int price,\\r\\n            uint startedAt,\\r\\n            uint timeStamp,\\r\\n            uint80 answeredInRound\\r\\n            ) = currencyFeed.latestRoundData();\\r\\n            currenciesPrices[i] = price;\\r\\n        }\\r\\n\\r\\n        return (assetsData, currenciesData, currenciesPrices, getCommissions());\\r\\n    }\\r\\n\\r\\n    function getAssetsData(\\r\\n    ) public view returns (\\r\\n        int[] memory\\r\\n    ){\\r\\n        int[] memory assetsPrices = new int[](assetsIndices.length);\\r\\n        AggregatorV3Interface assetFeed;\\r\\n\\r\\n        for (uint48 i = 0; i \\u003c assetsIndices.length; i++) {\\r\\n            assetFeed = AggregatorV3Interface(assets[assetsIndices[i]].chainlinkAddress);\\r\\n            (\\r\\n            uint80 roundID,\\r\\n            int price,\\r\\n            uint startedAt,\\r\\n            uint timeStamp,\\r\\n            uint80 answeredInRound\\r\\n            ) = assetFeed.latestRoundData();\\r\\n            assetsPrices[i] = price;\\r\\n        }\\r\\n\\r\\n        return assetsPrices;\\r\\n    }\\r\\n\\r\\n    function getAssetsHistoryDay(\\r\\n    ) public view returns (\\r\\n        int[][] memory,\\r\\n        uint[][] memory\\r\\n    ){\\r\\n        int[][] memory assetsHistory = new int[][](assetsIndices.length);\\r\\n        uint[][] memory assetsTimestamps = new uint256[][](assetsIndices.length);\\r\\n        int[200] memory assetHistory;\\r\\n        uint[200] memory assetTimestamps;\\r\\n        AggregatorV3Interface assetFeed;\\r\\n        uint final_timestamp = 0;\\r\\n        uint roundID;\\r\\n        int price;\\r\\n        uint startedAt;\\r\\n        uint timeStamp;\\r\\n        uint80 answeredInRound;\\r\\n        uint currentAssetMax;\\r\\n\\r\\n        for (uint48 i = 0; i \\u003c assetsIndices.length; i++) {\\r\\n            currentAssetMax = 1;\\r\\n            assetFeed = AggregatorV3Interface(assets[assetsIndices[i]].chainlinkAddress);\\r\\n            (\\r\\n            roundID,\\r\\n            price,\\r\\n            startedAt,\\r\\n            timeStamp,\\r\\n            answeredInRound\\r\\n            ) = assetFeed.latestRoundData();\\r\\n            assetHistory[0] = price;\\r\\n            assetTimestamps[0] = timeStamp;\\r\\n\\r\\n            final_timestamp = timeStamp-86400;\\r\\n\\r\\n            for(uint48 j = 1; j \\u003c 200 \\u0026\\u0026 timeStamp\\u003efinal_timestamp; j++){\\r\\n                currentAssetMax++;\\r\\n                assetFeed = AggregatorV3Interface(assets[assetsIndices[i]].chainlinkAddress);\\r\\n                (\\r\\n                roundID,\\r\\n                price,\\r\\n                startedAt,\\r\\n                timeStamp,\\r\\n                answeredInRound\\r\\n                ) = assetFeed.getRoundData(uint80(roundID - j));\\r\\n                assetHistory[j] = price;\\r\\n                assetTimestamps[j] = timeStamp;\\r\\n            }\\r\\n\\r\\n            assetsHistory[i] = new int[](currentAssetMax);\\r\\n            assetsTimestamps[i] = new uint[](currentAssetMax);\\r\\n            for(uint48 j = 0; j \\u003c currentAssetMax; j++){\\r\\n                assetsHistory[i][j] = assetHistory[j];\\r\\n                assetsTimestamps[i][j] = assetTimestamps[j];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (assetsHistory, assetsTimestamps);\\r\\n    }\\r\\n\\r\\n    function getAll(\\r\\n    ) public view returns (\\r\\n        Contract[] memory\\r\\n    ){\\r\\n        Contract[] memory ret = new Contract[](nextId);\\r\\n        for (uint48 i = 0; i \\u003c nextId; i++) {\\r\\n            ret[i] = contracts[i];\\r\\n        }\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n    function getPage(\\r\\n        uint48 _page\\r\\n    ) public view returns (\\r\\n        Contract[] memory\\r\\n    ){\\r\\n        Contract[] memory ret = new Contract[](1000);\\r\\n        uint48 counter = 0;\\r\\n        for (uint48 i = (_page * 1000); i \\u003c nextId \\u0026\\u0026 i \\u003c ((_page + 1) * 1000); i++) {\\r\\n            ret[counter] = contracts[i];\\r\\n            counter++;\\r\\n        }\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n    function getActivity(\\r\\n    ) public view returns (\\r\\n        Activity[] memory\\r\\n    ){\\r\\n        Activity[] memory ret = new Activity[](activities.length);\\r\\n        for (uint48 i = 0; i \\u003c activities.length; i++) {\\r\\n            ret[i] = activities[i];\\r\\n        }\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n    function getActivityPage(\\r\\n        uint48 _page\\r\\n    ) public view returns (\\r\\n        Activity[] memory\\r\\n    ){\\r\\n        Activity[] memory ret = new Activity[](1000);\\r\\n        for (uint48 i = (_page * 1000); i \\u003c activities.length \\u0026\\u0026 i \\u003c ((_page + 1) * 1000); i++) {\\r\\n            ret[i-(_page * 1000)] = activities[i];\\r\\n        }\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n    function getLastActivity(\\r\\n    ) public view returns (\\r\\n        Activity[] memory\\r\\n    ){\\r\\n        Activity[] memory ret = new Activity[](1000);\\r\\n        uint counter = 0;\\r\\n        for (uint48 i = uint48(activities.length); i \\u003e 0; i--) {\\r\\n            if(activities[i-1].activityTime \\u003c (uint32(block.timestamp) - 86400) || counter == 1000){\\r\\n                break;\\r\\n            }\\r\\n            ret[counter] = activities[i-1];\\r\\n            counter++;\\r\\n        }\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n    function getUserActivity(\\r\\n        address _address\\r\\n    ) public view returns (\\r\\n        Activity[] memory\\r\\n    ){\\r\\n        Activity[] memory ret = new Activity[](1000);\\r\\n        uint counter = 0;\\r\\n        for (uint48 i = uint48(activities.length); i \\u003e 0; i--) {\\r\\n            if(counter == 1000){\\r\\n                break;\\r\\n            }\\r\\n            if(activities[i-1].bidderAddress == _address){\\r\\n                ret[counter] = activities[i-1];\\r\\n                counter++;\\r\\n            }\\r\\n        }\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n    function getUserActivityPage(\\r\\n        address _address,\\r\\n        uint48 _page\\r\\n    ) public view returns (\\r\\n        Activity[] memory\\r\\n    ){\\r\\n        Activity[] memory ret = new Activity[](1000);\\r\\n        uint counter = 0;\\r\\n        uint index = 0;\\r\\n        for (uint48 i = uint48(activities.length); i \\u003e 0; i--) {\\r\\n            if(counter == ((_page+1) * 1000)){\\r\\n                break;\\r\\n            }\\r\\n            if(activities[i-1].bidderAddress == _address){\\r\\n                if(counter \\u003e= (_page * 1000)){\\r\\n                    ret[index] = activities[i-1];\\r\\n                    index++;\\r\\n                }\\r\\n                counter++;\\r\\n            }\\r\\n        }\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n    function getCommissions(\\r\\n    ) public view returns (\\r\\n        Commissions memory\\r\\n    ){\\r\\n        return commissions;\\r\\n    }\\r\\n\\r\\n    function insertContract(\\r\\n        address _owner,\\r\\n        Asset memory _asset,\\r\\n        Currency memory _currency,\\r\\n        uint _strikePrice,\\r\\n        uint32 _biddingEndDate,\\r\\n        uint32 _maturityDate,\\r\\n        uint _longAmount,\\r\\n        uint _shortAmount\\r\\n    ) public\\r\\n    {\\r\\n        contracts[nextId] = Contract({\\r\\n        contractAddress : msg.sender,\\r\\n        owner : _owner,\\r\\n        asset : _asset,\\r\\n        strikePrice : _strikePrice,\\r\\n        currency : _currency,\\r\\n        biddingEndDate : _biddingEndDate,\\r\\n        maturityDate : _maturityDate,\\r\\n        longAmount : _longAmount,\\r\\n        shortAmount : _shortAmount,\\r\\n        participantsLong : (_longAmount \\u003e 0 ? 1 : 0),\\r\\n        participantsShort : (_shortAmount \\u003e 0 ? 1 : 0),\\r\\n        isMarketHasAnyBids : true,\\r\\n        status : 0\\r\\n        });\\r\\n        addressToContractId[msg.sender] = nextId;\\r\\n        nextId++;\\r\\n\\r\\n        if(_longAmount \\u003e 0){\\r\\n            activities.push(\\r\\n                Activity({\\r\\n            bidderAddress : _owner,\\r\\n            marketAddress : msg.sender,\\r\\n            activityType : ActivityType.BID,\\r\\n            side : Side.LONG,\\r\\n            amount : _longAmount,\\r\\n            activityTime : uint32(block.timestamp)\\r\\n            })\\r\\n            );\\r\\n        }\\r\\n        if(_shortAmount \\u003e 0){\\r\\n            activities.push(\\r\\n                Activity({\\r\\n            bidderAddress : _owner,\\r\\n            marketAddress : msg.sender,\\r\\n            activityType : ActivityType.BID,\\r\\n            side : Side.SHORT,\\r\\n            amount : _shortAmount,\\r\\n            activityTime : uint32(block.timestamp)\\r\\n            })\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateContract(\\r\\n        uint _longAmount,\\r\\n        uint _shortAmount,\\r\\n        uint24 _participantsLong,\\r\\n        uint24 _participantsShort,\\r\\n        Activity memory _activity,\\r\\n        bool _isMarketHasAnyBids\\r\\n    ) public onlyTytanidContracts\\r\\n    {\\r\\n        uint48 id = addressToContractId[msg.sender];\\r\\n        contracts[id].longAmount = _longAmount;\\r\\n        contracts[id].shortAmount = _shortAmount;\\r\\n        contracts[id].participantsLong = _participantsLong;\\r\\n        contracts[id].participantsShort = _participantsShort;\\r\\n        contracts[id].isMarketHasAnyBids = _isMarketHasAnyBids;\\r\\n\\r\\n        activities.push(_activity);\\r\\n    }\\r\\n\\r\\n    function getAsset(\\r\\n        string memory _assetName\\r\\n    ) public view returns (\\r\\n        Asset memory\\r\\n    ){\\r\\n        require(assets[_assetName].chainlinkAddress != 0x0000000000000000000000000000000000000000 \\u0026\\u0026 assets[_assetName].status == AssetStatus.ACTIVE, \\\"Asset is not active!\\\");\\r\\n        return assets[_assetName];\\r\\n    }\\r\\n\\r\\n    function getCurrency(\\r\\n        string memory _currencyName\\r\\n    ) public view returns (\\r\\n        Currency memory\\r\\n    ){\\r\\n        require(currencies[_currencyName].chainlinkAddress != 0x0000000000000000000000000000000000000000 \\u0026\\u0026 currencies[_currencyName].status == CurrencyStatus.ACTIVE, \\\"Currency is not active!\\\");\\r\\n        return currencies[_currencyName];\\r\\n    }\\r\\n\\r\\n    function changeMarketStatus(\\r\\n        address _address,\\r\\n        uint24 _status\\r\\n    ) public onlyAdmin\\r\\n    {\\r\\n        uint48 id = addressToContractId[_address];\\r\\n        contracts[id].status = _status;\\r\\n    }\\r\\n\\r\\n    function upsertAsset(\\r\\n        string memory _assetName,\\r\\n        string memory _fullName,\\r\\n        Category _category,\\r\\n        string memory _referenceTo,\\r\\n        address _chainLinkAddress,\\r\\n        AssetStatus _status,\\r\\n        uint8 _decimals,\\r\\n        LogoType _logoType\\r\\n    ) public onlyAdmin\\r\\n    {\\r\\n        bool isNew = assets[_assetName].chainlinkAddress == 0x0000000000000000000000000000000000000000;\\r\\n        assets[_assetName] = Asset({\\r\\n        name : _assetName,\\r\\n        fullName: _fullName,\\r\\n        category: _category,\\r\\n        referenceTo : _referenceTo,\\r\\n        chainlinkAddress : _chainLinkAddress,\\r\\n        status : _status,\\r\\n        decimals : _decimals,\\r\\n        logoType : _logoType\\r\\n        });\\r\\n        if (isNew) {\\r\\n            assetsIndices.push(_assetName);\\r\\n        }\\r\\n        delete isNew;\\r\\n    }\\r\\n\\r\\n    function upsertCurrency(\\r\\n        string memory _currencyName,\\r\\n        string memory _fullName,\\r\\n        string memory _referenceTo,\\r\\n        address _chainLinkAddress,\\r\\n        CurrencyStatus _status,\\r\\n        uint8 _decimals\\r\\n    ) public onlyAdmin\\r\\n    {\\r\\n        bool isNew = currencies[_currencyName].chainlinkAddress == 0x0000000000000000000000000000000000000000;\\r\\n        currencies[_currencyName] = Currency({\\r\\n        name : _currencyName,\\r\\n        fullName: _fullName,\\r\\n        referenceTo : _referenceTo,\\r\\n        chainlinkAddress : _chainLinkAddress,\\r\\n        status : _status,\\r\\n        decimals : _decimals\\r\\n        });\\r\\n        if (isNew) {\\r\\n            currenciesIndices.push(_currencyName);\\r\\n        }\\r\\n        delete isNew;\\r\\n    }\\r\\n\\r\\n    function addAdmin(\\r\\n        address _address\\r\\n    ) public onlyAdmin\\r\\n    {\\r\\n        admins[_address].isAdmin = true;\\r\\n    }\\r\\n\\r\\n    function removeAdmin(\\r\\n        address _address\\r\\n    ) public onlyAdmin\\r\\n    {\\r\\n        if(_address != msg.sender){\\r\\n            admins[_address].isAdmin = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setSourceContract(\\r\\n        address _address\\r\\n    ) public onlyAdmin\\r\\n    {\\r\\n        sourceContract = _address;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin(\\r\\n    ){\\r\\n        require(isAdmin(msg.sender), \\\"Permission denied\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isAdmin(\\r\\n        address _address\\r\\n    ) private view returns (\\r\\n        bool\\r\\n    ){\\r\\n        return admins[_address].isAdmin == true;\\r\\n    }\\r\\n\\r\\n    modifier onlyTytanidContracts(\\r\\n    ){\\r\\n        require(isTytanidContract(msg.sender), \\\"Permission denied\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isTytanidContract(\\r\\n        address _address\\r\\n    ) private view returns (\\r\\n        bool\\r\\n    ){\\r\\n        return keccak256(sourceContract.code) == keccak256(_address.code);\\r\\n    }\\r\\n}\\r\\n\"},\"Tytanid.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.3;\\r\\n\\r\\ncontract Tytanid {\\r\\n    enum Side{\\r\\n        SHORT,\\r\\n        LONG,\\r\\n        TYTANID\\r\\n    }\\r\\n\\r\\n    enum Phase{\\r\\n        BIDDING,\\r\\n        TRADING,\\r\\n        MATURITY,\\r\\n        EXPIRED\\r\\n    }\\r\\n\\r\\n    struct Commissions {\\r\\n        uint8 createMarketStake;\\r\\n        uint8 joinMarketStake;\\r\\n        uint8 exitMarketStake;\\r\\n        uint8 joinMarketTytanidRatio;\\r\\n        uint8 exitMarketTytanidRatio;\\r\\n    }\\r\\n\\r\\n    Commissions commissions;\\r\\n\\r\\n    enum Category{\\r\\n        CRYPTO,\\r\\n        FIAT,\\r\\n        COMMODITIES,\\r\\n        EQUITY\\r\\n    }\\r\\n\\r\\n    enum AssetStatus{ACTIVE, INACTIVE}\\r\\n\\r\\n    enum CurrencyStatus{ACTIVE, INACTIVE}\\r\\n\\r\\n    enum BidStatus {\\r\\n        ACTIVE,\\r\\n        PAID,\\r\\n        EXIT\\r\\n    }\\r\\n\\r\\n    struct SideSummary {\\r\\n        uint24 participants;\\r\\n        uint amount;\\r\\n    }\\r\\n\\r\\n    struct Bid {\\r\\n        address bidder;\\r\\n        Side side;\\r\\n        uint amount;\\r\\n        BidStatus status;\\r\\n        uint32 joinMarketTime;\\r\\n        uint32 exitMarketTime;\\r\\n        uint32 payoutTime;\\r\\n    }\\r\\n\\r\\n    enum ActivityType {\\r\\n        BID,\\r\\n        EXIT,\\r\\n        PAYOUT\\r\\n    }\\r\\n\\r\\n    enum LogoType {\\r\\n        SVG,\\r\\n        PNG\\r\\n    }\\r\\n\\r\\n    struct Activity {\\r\\n        address bidderAddress;\\r\\n        address marketAddress;\\r\\n        ActivityType activityType;\\r\\n        Side side;\\r\\n        uint amount;\\r\\n        uint32 activityTime;\\r\\n    }\\r\\n\\r\\n    struct Asset {\\r\\n        string name;\\r\\n        string fullName;\\r\\n        Category category;\\r\\n        address chainlinkAddress;\\r\\n        string referenceTo;\\r\\n        AssetStatus status;\\r\\n        uint8 decimals;\\r\\n        LogoType logoType;\\r\\n    }\\r\\n\\r\\n    struct Currency {\\r\\n        string name;\\r\\n        string fullName;\\r\\n        address chainlinkAddress;\\r\\n        string referenceTo;\\r\\n        CurrencyStatus status;\\r\\n        uint8 decimals;\\r\\n    }\\r\\n}\\r\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_status\",\"type\":\"uint24\"}],\"name\":\"changeMarketStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActivity\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bidderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"},{\"internalType\":\"enum Tytanid.ActivityType\",\"name\":\"activityType\",\"type\":\"uint8\"},{\"internalType\":\"enum Tytanid.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"activityTime\",\"type\":\"uint32\"}],\"internalType\":\"struct Tytanid.Activity[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"_page\",\"type\":\"uint48\"}],\"name\":\"getActivityPage\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bidderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"},{\"internalType\":\"enum Tytanid.ActivityType\",\"name\":\"activityType\",\"type\":\"uint8\"},{\"internalType\":\"enum Tytanid.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"activityTime\",\"type\":\"uint32\"}],\"internalType\":\"struct Tytanid.Activity[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAll\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fullName\",\"type\":\"string\"},{\"internalType\":\"enum Tytanid.Category\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"chainlinkAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"referenceTo\",\"type\":\"string\"},{\"internalType\":\"enum Tytanid.AssetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"enum Tytanid.LogoType\",\"name\":\"logoType\",\"type\":\"uint8\"}],\"internalType\":\"struct Tytanid.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fullName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"chainlinkAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"referenceTo\",\"type\":\"string\"},{\"internalType\":\"enum Tytanid.CurrencyStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct Tytanid.Currency\",\"name\":\"currency\",\"type\":\"tuple\"},{\"internalType\":\"uint24\",\"name\":\"participantsLong\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"participantsShort\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"biddingEndDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maturityDate\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"longAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shortAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMarketHasAnyBids\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"status\",\"type\":\"uint24\"}],\"internalType\":\"struct Database.Contract[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_assetName\",\"type\":\"string\"}],\"name\":\"getAsset\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fullName\",\"type\":\"string\"},{\"internalType\":\"enum Tytanid.Category\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"chainlinkAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"referenceTo\",\"type\":\"string\"},{\"internalType\":\"enum Tytanid.AssetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"enum Tytanid.LogoType\",\"name\":\"logoType\",\"type\":\"uint8\"}],\"internalType\":\"struct Tytanid.Asset\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetsData\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetsHistoryDay\",\"outputs\":[{\"internalType\":\"int256[][]\",\"name\":\"\",\"type\":\"int256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommissions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"createMarketStake\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"joinMarketStake\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"exitMarketStake\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"joinMarketTytanidRatio\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"exitMarketTytanidRatio\",\"type\":\"uint8\"}],\"internalType\":\"struct Tytanid.Commissions\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_currencyName\",\"type\":\"string\"}],\"name\":\"getCurrency\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fullName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"chainlinkAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"referenceTo\",\"type\":\"string\"},{\"internalType\":\"enum Tytanid.CurrencyStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct Tytanid.Currency\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastActivity\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bidderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"},{\"internalType\":\"enum Tytanid.ActivityType\",\"name\":\"activityType\",\"type\":\"uint8\"},{\"internalType\":\"enum Tytanid.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"activityTime\",\"type\":\"uint32\"}],\"internalType\":\"struct Tytanid.Activity[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"_page\",\"type\":\"uint48\"}],\"name\":\"getPage\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fullName\",\"type\":\"string\"},{\"internalType\":\"enum Tytanid.Category\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"chainlinkAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"referenceTo\",\"type\":\"string\"},{\"internalType\":\"enum Tytanid.AssetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"enum Tytanid.LogoType\",\"name\":\"logoType\",\"type\":\"uint8\"}],\"internalType\":\"struct Tytanid.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fullName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"chainlinkAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"referenceTo\",\"type\":\"string\"},{\"internalType\":\"enum Tytanid.CurrencyStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct Tytanid.Currency\",\"name\":\"currency\",\"type\":\"tuple\"},{\"internalType\":\"uint24\",\"name\":\"participantsLong\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"participantsShort\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"biddingEndDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maturityDate\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"longAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shortAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMarketHasAnyBids\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"status\",\"type\":\"uint24\"}],\"internalType\":\"struct Database.Contract[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSettings\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fullName\",\"type\":\"string\"},{\"internalType\":\"enum Tytanid.Category\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"chainlinkAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"referenceTo\",\"type\":\"string\"},{\"internalType\":\"enum Tytanid.AssetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"enum Tytanid.LogoType\",\"name\":\"logoType\",\"type\":\"uint8\"}],\"internalType\":\"struct Tytanid.Asset[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fullName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"chainlinkAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"referenceTo\",\"type\":\"string\"},{\"internalType\":\"enum Tytanid.CurrencyStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct Tytanid.Currency[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"createMarketStake\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"joinMarketStake\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"exitMarketStake\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"joinMarketTytanidRatio\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"exitMarketTytanidRatio\",\"type\":\"uint8\"}],\"internalType\":\"struct Tytanid.Commissions\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUserActivity\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bidderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"},{\"internalType\":\"enum Tytanid.ActivityType\",\"name\":\"activityType\",\"type\":\"uint8\"},{\"internalType\":\"enum Tytanid.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"activityTime\",\"type\":\"uint32\"}],\"internalType\":\"struct Tytanid.Activity[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"_page\",\"type\":\"uint48\"}],\"name\":\"getUserActivityPage\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bidderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"},{\"internalType\":\"enum Tytanid.ActivityType\",\"name\":\"activityType\",\"type\":\"uint8\"},{\"internalType\":\"enum Tytanid.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"activityTime\",\"type\":\"uint32\"}],\"internalType\":\"struct Tytanid.Activity[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fullName\",\"type\":\"string\"},{\"internalType\":\"enum Tytanid.Category\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"chainlinkAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"referenceTo\",\"type\":\"string\"},{\"internalType\":\"enum Tytanid.AssetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"enum Tytanid.LogoType\",\"name\":\"logoType\",\"type\":\"uint8\"}],\"internalType\":\"struct Tytanid.Asset\",\"name\":\"_asset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fullName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"chainlinkAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"referenceTo\",\"type\":\"string\"},{\"internalType\":\"enum Tytanid.CurrencyStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct Tytanid.Currency\",\"name\":\"_currency\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_biddingEndDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_maturityDate\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_longAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shortAmount\",\"type\":\"uint256\"}],\"name\":\"insertContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSourceContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_longAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shortAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"_participantsLong\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"_participantsShort\",\"type\":\"uint24\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"bidderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"},{\"internalType\":\"enum Tytanid.ActivityType\",\"name\":\"activityType\",\"type\":\"uint8\"},{\"internalType\":\"enum Tytanid.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"activityTime\",\"type\":\"uint32\"}],\"internalType\":\"struct Tytanid.Activity\",\"name\":\"_activity\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"_isMarketHasAnyBids\",\"type\":\"bool\"}],\"name\":\"updateContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_assetName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_fullName\",\"type\":\"string\"},{\"internalType\":\"enum Tytanid.Category\",\"name\":\"_category\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_referenceTo\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_chainLinkAddress\",\"type\":\"address\"},{\"internalType\":\"enum Tytanid.AssetStatus\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"enum Tytanid.LogoType\",\"name\":\"_logoType\",\"type\":\"uint8\"}],\"name\":\"upsertAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_currencyName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_fullName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_referenceTo\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_chainLinkAddress\",\"type\":\"address\"},{\"internalType\":\"enum Tytanid.CurrencyStatus\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"upsertCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Database","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://bfc5ced3fc13c17b84d9ea97af8c087c5b46f9cf6a1cad9c9e2b06894c6d2ad1"}]}