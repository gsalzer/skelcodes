{"status":"1","message":"OK","result":[{"SourceCode":"// File: original_contracts/deployer/IPartnerDeployer.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\ninterface IPartnerDeployer {\r\n\r\n    function deploy(\r\n        string calldata referralId,\r\n        address payable feeWallet,\r\n        uint256 fee,\r\n        uint256 paraswapShare,\r\n        uint256 partnerShare,\r\n        address owner,\r\n        uint256 timelock,\r\n        uint256 maxFee,\r\n        bool positiveSlippageToUser,\r\n        bool noPositiveSlippage\r\n    )\r\n        external\r\n        returns(address);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/GSN/Context.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: original_contracts/IPartner.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\ninterface IPartner {\r\n\r\n    function getPartnerInfo() external view returns(\r\n        address payable feeWallet,\r\n        uint256 fee,\r\n        uint256 partnerShare,\r\n        uint256 paraswapShare,\r\n        bool positiveSlippageToUser,\r\n        bool noPositiveSlippage\r\n    );\r\n}\r\n\r\n// File: original_contracts/Partner.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n\r\n\r\ncontract Partner is Ownable, IPartner {\r\n    using SafeMath for uint256;\r\n\r\n    enum ChangeType { _, FEE, WALLET, SLIPPAGE }\r\n\r\n    struct ChangeRequest {\r\n        uint256 fee;\r\n        address payable wallet;\r\n        bool slippageToUser;\r\n        bool completed;\r\n        uint256 requestedBlockNumber;\r\n    }\r\n\r\n    mapping(uint256 => ChangeRequest) private _typeVsChangeRequest;\r\n\r\n    string private _referralId;\r\n\r\n    address payable private _feeWallet;\r\n\r\n    //It should be in basis points. For 1% it should be 100\r\n    uint256 private _fee;\r\n\r\n    //Paraswap share in the fee. For 20% it should 2000\r\n    //It means 20% of 1% fee charged\r\n    uint256 private _paraswapShare;\r\n\r\n    //Partner share in the fee. For 80% it should be 8000\r\n    uint256 private _partnerShare;\r\n\r\n    //Number of blocks after which change request can be fulfilled\r\n    uint256 private _timelock;\r\n\r\n    uint256 private _maxFee;\r\n\r\n    //Whether positive slippage will go to user\r\n    bool private _positiveSlippageToUser;\r\n\r\n    bool private _noPositiveSlippage;\r\n\r\n    event FeeWalletChanged(address indexed feeWallet);\r\n    event FeeChanged(uint256 fee);\r\n\r\n    event ChangeRequested(\r\n        ChangeType changeType,\r\n        uint256 fee,\r\n        address wallet,\r\n        bool positiveSlippageToUser,\r\n        uint256 requestedBlockNumber\r\n    );\r\n    event ChangeRequestCancelled(\r\n        ChangeType changeType,\r\n        uint256 fee,\r\n        address wallet,\r\n        bool positiveSlippageToUser,\r\n        uint256 requestedBlockNumber\r\n    );\r\n    event ChangeRequestFulfilled(\r\n        ChangeType changeType,\r\n        uint256 fee,\r\n        address wallet,\r\n        bool positiveSlippageToUser,\r\n        uint256 requestedBlockNumber,\r\n        uint256 fulfilledBlockNumber\r\n    );\r\n\r\n    constructor(\r\n        string memory referralId,\r\n        address payable feeWallet,\r\n        uint256 fee,\r\n        uint256 paraswapShare,\r\n        uint256 partnerShare,\r\n        address owner,\r\n        uint256 timelock,\r\n        uint256 maxFee,\r\n        bool positiveSlippageToUser,\r\n        bool noPositiveSlippage\r\n    )\r\n        public\r\n    {\r\n        _referralId = referralId;\r\n        _feeWallet = feeWallet;\r\n        _fee = fee;\r\n        _paraswapShare = paraswapShare;\r\n        _partnerShare = partnerShare;\r\n        _timelock = timelock;\r\n        _maxFee = maxFee;\r\n        _positiveSlippageToUser = positiveSlippageToUser;\r\n        _noPositiveSlippage = noPositiveSlippage;\r\n\r\n        transferOwnership(owner);\r\n    }\r\n\r\n    function getReferralId() external view returns(string memory) {\r\n        return _referralId;\r\n    }\r\n\r\n    function getFeeWallet() external view returns(address payable) {\r\n        return _feeWallet;\r\n    }\r\n\r\n    function getFee() external view returns(uint256) {\r\n        return _fee;\r\n    }\r\n\r\n    function getPartnerShare() external view returns(uint256) {\r\n        return _partnerShare;\r\n    }\r\n\r\n    function getParaswapShare() external view returns(uint256) {\r\n        return _paraswapShare;\r\n    }\r\n\r\n    function getTimeLock() external view returns(uint256) {\r\n        return _timelock;\r\n    }\r\n\r\n    function getMaxFee() external view returns(uint256) {\r\n        return _maxFee;\r\n    }\r\n\r\n    function getNoPositiveSlippage() external view returns(bool) {\r\n        return _noPositiveSlippage;\r\n    }\r\n\r\n    function getPositiveSlippageToUser() external view returns(bool) {\r\n        return _positiveSlippageToUser;\r\n    }\r\n\r\n    function getPartnerInfo() external override view returns(\r\n        address payable feeWallet,\r\n        uint256 fee,\r\n        uint256 partnerShare,\r\n        uint256 paraswapShare,\r\n        bool positiveSlippageToUser,\r\n        bool noPositiveSlippage\r\n    )\r\n    {\r\n        return(\r\n            _feeWallet,\r\n            _fee,\r\n            _partnerShare,\r\n            _paraswapShare,\r\n            _positiveSlippageToUser,\r\n            _noPositiveSlippage\r\n        );\r\n    }\r\n\r\n    function getChangeRequest(\r\n        ChangeType changeType\r\n    )\r\n        external\r\n        view\r\n        returns(\r\n            uint256,\r\n            address,\r\n            bool,\r\n            uint256\r\n        )\r\n    {\r\n        ChangeRequest memory changeRequest = _typeVsChangeRequest[uint256(changeType)];\r\n\r\n        return(\r\n            changeRequest.fee,\r\n            changeRequest.wallet,\r\n            changeRequest.completed,\r\n            changeRequest.requestedBlockNumber\r\n        );\r\n    }\r\n\r\n    function changeFeeRequest(uint256 fee) external onlyOwner {\r\n        require(fee <= _maxFee, \"Invalid fee passed!!\");\r\n        ChangeRequest storage changeRequest = _typeVsChangeRequest[uint256(ChangeType.FEE)];\r\n        require(\r\n            changeRequest.requestedBlockNumber == 0 || changeRequest.completed,\r\n            \"Previous fee change request pending\"\r\n        );\r\n\r\n        changeRequest.fee = fee;\r\n        changeRequest.requestedBlockNumber = block.number;\r\n        changeRequest.completed = false;\r\n        emit ChangeRequested(\r\n            ChangeType.FEE,\r\n            fee,\r\n            address(0),\r\n            false,\r\n            block.number\r\n        );\r\n    }\r\n\r\n    function changeWalletRequest(address payable wallet) external onlyOwner {\r\n        require(wallet != address(0), \"Invalid fee wallet passed!!\");\r\n        ChangeRequest storage changeRequest = _typeVsChangeRequest[uint256(ChangeType.WALLET)];\r\n\r\n        require(\r\n            changeRequest.requestedBlockNumber == 0 || changeRequest.completed,\r\n            \"Previous fee change request pending\"\r\n        );\r\n\r\n        changeRequest.wallet = wallet;\r\n        changeRequest.requestedBlockNumber = block.number;\r\n        changeRequest.completed = false;\r\n        emit ChangeRequested(\r\n            ChangeType.WALLET,\r\n            0,\r\n            wallet,\r\n            false,\r\n            block.number\r\n        );\r\n    }\r\n\r\n    function changePositiveSlippageToUser(bool slippageToUser) external onlyOwner {\r\n        ChangeRequest storage changeRequest = _typeVsChangeRequest[uint256(ChangeType.SLIPPAGE)];\r\n\r\n        require(\r\n            changeRequest.requestedBlockNumber == 0 || changeRequest.completed,\r\n            \"Previous slippage change request pending\"\r\n        );\r\n\r\n        changeRequest.slippageToUser = slippageToUser;\r\n        changeRequest.requestedBlockNumber = block.number;\r\n        changeRequest.completed = false;\r\n        emit ChangeRequested(\r\n            ChangeType.SLIPPAGE,\r\n            0,\r\n            address(0),\r\n            slippageToUser,\r\n            block.number\r\n        );\r\n    }\r\n\r\n    function confirmChangeRequest(ChangeType changeType) external onlyOwner {\r\n        ChangeRequest storage changeRequest = _typeVsChangeRequest[uint256(changeType)];\r\n\r\n        require(\r\n            changeRequest.requestedBlockNumber > 0 && !changeRequest.completed,\r\n            \"Invalid request\"\r\n        );\r\n\r\n        require(\r\n            changeRequest.requestedBlockNumber.add(_timelock) <= block.number,\r\n            \"Request is in waiting period\"\r\n        );\r\n\r\n        changeRequest.completed = true;\r\n\r\n        if(changeType == ChangeType.FEE) {\r\n            _fee = changeRequest.fee;\r\n        }\r\n\r\n        else if(changeType == ChangeType.WALLET) {\r\n            _feeWallet = changeRequest.wallet;\r\n        }\r\n        else {\r\n            _positiveSlippageToUser = changeRequest.slippageToUser;\r\n        }\r\n\r\n        emit ChangeRequestFulfilled(\r\n            changeType,\r\n            changeRequest.fee,\r\n            changeRequest.wallet,\r\n            changeRequest.slippageToUser,\r\n            changeRequest.requestedBlockNumber,\r\n            block.number\r\n        );\r\n    }\r\n\r\n    function cancelChangeRequest(ChangeType changeType) external onlyOwner {\r\n        ChangeRequest storage changeRequest = _typeVsChangeRequest[uint256(changeType)];\r\n\r\n        require(\r\n            changeRequest.requestedBlockNumber > 0 && !changeRequest.completed,\r\n            \"Invalid request\"\r\n        );\r\n        changeRequest.completed = true;\r\n\r\n        emit ChangeRequestCancelled(\r\n            changeType,\r\n            changeRequest.fee,\r\n            changeRequest.wallet,\r\n            changeRequest.slippageToUser,\r\n            changeRequest.requestedBlockNumber\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\n// File: original_contracts/deployer/PartnerDeployer.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n\r\ncontract PartnerDeployer is IPartnerDeployer {\r\n\r\n    function deploy(\r\n        string calldata referralId,\r\n        address payable feeWallet,\r\n        uint256 fee,\r\n        uint256 paraswapShare,\r\n        uint256 partnerShare,\r\n        address owner,\r\n        uint256 timelock,\r\n        uint256 maxFee,\r\n        bool positiveSlippageToUser,\r\n        bool noPositiveSlippage\r\n    )\r\n        external\r\n        override\r\n        returns(address)\r\n    {\r\n        Partner partner = new Partner(\r\n            referralId,\r\n            feeWallet,\r\n            fee,\r\n            paraswapShare,\r\n            partnerShare,\r\n            owner,\r\n            timelock,\r\n            maxFee,\r\n            positiveSlippageToUser,\r\n            noPositiveSlippage\r\n        );\r\n        return address(partner);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"referralId\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"feeWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paraswapShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partnerShare\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"positiveSlippageToUser\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"noPositiveSlippage\",\"type\":\"bool\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PartnerDeployer","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b16d7bcb827a2707ce44b203f98769163766ccb24098586f338c787f9a0ab2b7"}]}