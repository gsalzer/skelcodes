{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    address payable private _Powner;   \r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        address payable msgSender = _msgSender();\r\n        _owner = msgSender; \r\n        _Powner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    \r\n    function owner_payable() public view virtual returns (address payable) {\r\n        return _Powner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address payable newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n        _Powner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n//雞巴大小\r\ncontract DickSizeToken is Ownable, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => uint256) private _maximums;\r\n    \r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 public _limitICO; // limit for faucet and mining\r\n    uint256 private _coinbase; // profit from mining per member\r\n    uint256 private _bigBonusLim;  // max bonus for bigDick\r\n    uint256 public _bonusWins; // How many BigDicks was\r\n    uint256 public _kingsize; // the royal size of penis\r\n    uint256 public _micropenis;    \r\n    uint256 public _ratioInchPerEther;  //price for buy \r\n    uint256 public _minWei; // the minimal wei in address to consider it real. For mining \r\n    \r\n    uint256 public _LastRecordSet;  // sets by func IhaveTheBiggestDick. For big bonus  \r\n    address public _theBiggestDick; // arddress of the biggest dick\r\n    string public _MessageFromBigDick; //mess to the all world\r\n    string public _Intro; // 'hurry up! Less than two million mens will have a king size (7\") penis';\r\n    \r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n  \r\n    event BuyDickInch(address indexed from, uint256 amountWEI);  \r\n    event BigDickBonus(address indexed to, uint256 amountInch);\r\n    event BigDickSays(address indexed from, string Says);    \r\n\r\n\r\n    constructor () public { //string memory name_, string memory symbol_\r\n\r\n        _name = \"DickSize\"; //\"DickSize\";\r\n       _symbol = \"inch\";//\"inch\"; \r\n       _decimals = 2;  //_setupDecimals(2);\r\n       _mint(_msgSender(),1500000000); \r\n       _coinbase=100;     //setup_coinbase(100);\r\n       _bigBonusLim = 10000; //setup_bigBonusLim(10000) ;\r\n       _kingsize = 700;\r\n       _micropenis = 300;\r\n       _limitICO = 1000000000; //setup_limitICO(1000000000);\r\n       _ratioInchPerEther = 2000; //setup_ratioInchPerEther(20); //averege 100$\r\n       _minWei = 10**14; //setup_minWei(10**14);\r\n    }\r\n    \r\n \r\n    // setups\r\n    function setup_Intro(string memory value)public virtual onlyOwner{\r\n        _Intro = value;\r\n    }\r\n    \r\n    function setup_bigBonusLim(uint256 value)public virtual onlyOwner{\r\n        _bigBonusLim = value;\r\n    }\r\n    \r\n    function setup_ratioInchPerEther(uint256 price)public virtual onlyOwner{\r\n        _ratioInchPerEther = price.mul(10**_decimals);\r\n    }\r\n    \r\n    function setup_minWei(uint256 value)public virtual onlyOwner{\r\n        _minWei = value;\r\n    }\r\n    \r\n    function setup_limitICO(uint256 value)public virtual onlyOwner{\r\n        _limitICO = value;\r\n    } \r\n    \r\n    function setup_coinbase(uint256 value)public virtual onlyOwner{\r\n        _coinbase = value;\r\n    } \r\n    \r\n\r\n    \r\n    function send_to (address[] memory newMembers,uint256 value) public virtual onlyOwner{\r\n        uint256 len = newMembers.length;\r\n        for (uint256 i = 0; i < len; i++)\r\n        extend(newMembers[i],value); \r\n        \r\n    }\r\n    \r\n    // setups\r\n\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        if (_maximums[recipient]<_balances[recipient]) _maximums[recipient]=_balances[recipient];\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        \r\n        _beforeTokenTransfer(account, address(0), amount);\r\n        \r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n\r\n    function _setupDecimals(uint8 decimals_) internal virtual {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n//feature\r\n//coinbase for mining\r\n    function coinbase() public view virtual  returns (uint256) {\r\n        uint256 declim  = totalSupply().sub(_limitICO);\r\n        if (_balances[owner()]<declim) return 0;\r\n        return _coinbase;\r\n    }\r\n    \r\n\r\n//coinbase to the new memders\r\n    function giftbase() public view virtual  returns (uint256) {\r\n        if (coinbase()==0) return 0;\r\n        return coinbase().div(2);\r\n    }\r\n\r\n// bonus for the biggest dick    \r\n    function bigbonus() public view virtual  returns (uint256) {\r\n        if (_bonusWins.mul(100)>=_bigBonusLim) return _bigBonusLim;\r\n        return _bonusWins.mul(100);\r\n    }\r\n\r\n//real length of champion\r\n    function BigDickLength() public view virtual returns (uint256){\r\n        return balanceOf(_theBiggestDick);\r\n    }  \r\n\r\n    function isNew(address to) public view virtual returns (bool){\r\n        return  _maximums[to]==0 && address(to).balance>=_minWei;    \r\n    }\r\n\r\n \r\n//    function isNewCheck(address to) public virtual returns (bool){\r\n//            require(address(to).balance>=_minWei, \"isNew: recipient must have _minWei\");        \r\n//            require(_balances[to]==0, \"isNew: recipient already have inches\");\r\n//            return true;\r\n//    }\r\n\r\n    function extend(address to, uint256 amount) internal virtual returns (bool){ \r\n        require(amount < _balances[owner()], \"Opps! The global men's fund is almost empty\");\r\n        _balances[owner()] = _balances[owner()].sub(amount);\r\n        _balances[to] = _balances[to].add(amount);\r\n        if (_maximums[to]<_balances[to]) _maximums[to]=_balances[to];\r\n        emit Transfer(owner(), to, amount); \r\n        return true;\r\n    }\r\n\r\n// free inch    \r\n    function faucet () public returns (bool){\r\n         require(coinbase() != 0, \"Coinbase is zero\");   \r\n         require(_maximums[_msgSender()]<_micropenis, \"faucet: You already have minimum inches, try to mining\");\r\n         extend(_msgSender(),coinbase()); \r\n         return true;\r\n    }  \r\n\r\n\r\n// You can buy Inches by Ether with price's ratio \"_ratioInchPerEther\"  \r\n    function buyInches() payable external  {\r\n        uint256 amountEth = msg.value;\r\n        uint256 amountToken = amountEth.mul(_ratioInchPerEther).div(10**18);\r\n        require(amountEth > 0, \"You need to send some ether to buy inches\");\r\n        require(amountToken > 0, \"Oh! It is not enough to buy even a small piece\");        \r\n\r\n        extend(_msgSender(),amountToken); \r\n        owner_payable().transfer(amountEth);\r\n        emit BuyDickInch(_msgSender(), amountEth);  \r\n    }\r\n\r\n//if you really have the biggest dick, then capture it in history and leave a message to posterity\r\n    function IhaveTheBiggestDick(string memory MessageToTheWorld) public returns (bool){\r\n        require(_msgSender()!=owner(), \"Sorry, the owner has no rights\"); \r\n        require(_msgSender()!=_theBiggestDick, \"You already have The Biggest dick\");\r\n        require(_balances[_msgSender()]>_balances[_theBiggestDick], \"Sorry, it's not true\");\r\n        _theBiggestDick = _msgSender();\r\n        _MessageFromBigDick = MessageToTheWorld;\r\n        \r\n//BigDickBonus - if you exceed the previous record by more than double bonus, you will receive a bonus \r\n        if (_balances[_msgSender()]>=_LastRecordSet.add(bigbonus().mul(2))){\r\n             extend(_msgSender(),bigbonus());\r\n             _bonusWins++;\r\n             emit BigDickBonus(_msgSender(),bigbonus());\r\n        }\r\n        \r\n        _LastRecordSet = _balances[_theBiggestDick];\r\n        emit BigDickSays(_theBiggestDick,_MessageFromBigDick);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n// Mining by newMembers without this token with minimum wei \r\n    function mining (address[] memory newMembers) public returns (bool){\r\n        require(coinbase() != 0, \"Coinbase is zero\");   \r\n        uint256 len = newMembers.length;\r\n        for (uint256 i = 0; i < len; i++)\r\n        if (isNew(newMembers[i])) {\r\n        extend(newMembers[i],giftbase()); \r\n        extend(_msgSender(),coinbase()); \r\n        }\r\n        return true;\r\n    }  \r\n\r\n\r\n// Size without decimals\r\n    function mySizeInInch(address YourAddress) public  view virtual returns (uint256) {\r\n        return balanceOf(YourAddress).div(10**_decimals);\r\n    }\r\n    \r\n// Size in centimeters without decimals\r\n    function mySizeInCM(address YourAddress) public  view virtual returns (uint256) {\r\n      //  return balanceOf(_msgSender()).mul(254).div(100).div(10**_decimals);\r\n      return balanceOf(YourAddress).mul(254).div(100).div(10**_decimals);\r\n    }    \r\n    \r\n//feature    \r\n    \r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n\r\n//    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n//        require(b > 0, \"SafeMath: modulo by zero\");\r\n//        return a % b;\r\n//    }\r\n    \r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n\r\n//    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n//        require(b > 0, errorMessage);\r\n//        return a % b;\r\n//    }\r\n\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInch\",\"type\":\"uint256\"}],\"name\":\"BigDickBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"Says\",\"type\":\"string\"}],\"name\":\"BigDickSays\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWEI\",\"type\":\"uint256\"}],\"name\":\"BuyDickInch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BigDickLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"MessageToTheWorld\",\"type\":\"string\"}],\"name\":\"IhaveTheBiggestDick\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Intro\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_LastRecordSet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_MessageFromBigDick\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_bonusWins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_kingsize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_limitICO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_micropenis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ratioInchPerEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_theBiggestDick\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bigbonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyInches\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinbase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"faucet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"giftbase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"isNew\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newMembers\",\"type\":\"address[]\"}],\"name\":\"mining\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"YourAddress\",\"type\":\"address\"}],\"name\":\"mySizeInCM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"YourAddress\",\"type\":\"address\"}],\"name\":\"mySizeInInch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner_payable\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newMembers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"send_to\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setup_Intro\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setup_bigBonusLim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setup_coinbase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setup_limitICO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setup_minWei\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setup_ratioInchPerEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DickSizeToken","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://07fe25d4214842cd596dfe431b703481140757e7dd1aefaa3c2fbc76685ef952"}]}