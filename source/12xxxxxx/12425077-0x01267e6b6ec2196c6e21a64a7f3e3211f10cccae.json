{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Vaults/VaultETHUSDT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.25 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport { IVault } from \\\"./IVault.sol\\\";\\nimport { VaultBase } from \\\"./VaultBase.sol\\\";\\nimport { IFujiAdmin } from \\\"../IFujiAdmin.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {\\n  AggregatorV3Interface\\n} from \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IFujiERC1155 } from \\\"../FujiERC1155/IFujiERC1155.sol\\\";\\nimport { IProvider } from \\\"../Providers/IProvider.sol\\\";\\nimport { IAlphaWhiteList } from \\\"../IAlphaWhiteList.sol\\\";\\nimport { Errors } from \\\"../Libraries/Errors.sol\\\";\\n\\ninterface IVaultHarvester {\\n  function collectRewards(uint256 _farmProtocolNum) external returns (address claimedToken);\\n}\\n\\ncontract VaultETHUSDT is IVault, VaultBase, ReentrancyGuard {\\n  uint256 internal constant _BASE = 1e18;\\n\\n  struct Factor {\\n    uint64 a;\\n    uint64 b;\\n  }\\n\\n  // Safety factor\\n  Factor public safetyF;\\n\\n  // Collateralization factor\\n  Factor public collatF;\\n\\n  //State variables\\n  address[] public providers;\\n  address public override activeProvider;\\n\\n  IFujiAdmin private _fujiAdmin;\\n  address public override fujiERC1155;\\n  AggregatorV3Interface public oracle;\\n\\n  modifier isAuthorized() {\\n    require(\\n      msg.sender == _fujiAdmin.getController() || msg.sender == owner(),\\n      Errors.VL_NOT_AUTHORIZED\\n    );\\n    _;\\n  }\\n\\n  modifier onlyFlash() {\\n    require(msg.sender == _fujiAdmin.getFlasher(), Errors.VL_NOT_AUTHORIZED);\\n    _;\\n  }\\n\\n  constructor() public {\\n    vAssets.collateralAsset = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE); // ETH\\n    vAssets.borrowAsset = address(0xdAC17F958D2ee523a2206206994597C13D831ec7); // USDT\\n\\n    // 1.05\\n    safetyF.a = 21;\\n    safetyF.b = 20;\\n\\n    // 1.269\\n    collatF.a = 80;\\n    collatF.b = 63;\\n  }\\n\\n  receive() external payable {}\\n\\n  //Core functions\\n\\n  /**\\n   * @dev Deposits collateral and borrows underlying in a single function call from activeProvider\\n   * @param _collateralAmount: amount to be deposited\\n   * @param _borrowAmount: amount to be borrowed\\n   */\\n  function depositAndBorrow(uint256 _collateralAmount, uint256 _borrowAmount) external payable {\\n    deposit(_collateralAmount);\\n    borrow(_borrowAmount);\\n  }\\n\\n  /**\\n   * @dev Paybacks the underlying asset and withdraws collateral in a single function call from activeProvider\\n   * @param _paybackAmount: amount of underlying asset to be payback, pass -1 to pay full amount\\n   * @param _collateralAmount: amount of collateral to be withdrawn, pass -1 to withdraw maximum amount\\n   */\\n  function paybackAndWithdraw(int256 _paybackAmount, int256 _collateralAmount) external payable {\\n    payback(_paybackAmount);\\n    withdraw(_collateralAmount);\\n  }\\n\\n  /**\\n   * @dev Deposit Vault's type collateral to activeProvider\\n   * call Controller checkrates\\n   * @param _collateralAmount: to be deposited\\n   * Emits a {Deposit} event.\\n   */\\n  function deposit(uint256 _collateralAmount) public payable override {\\n    require(msg.value == _collateralAmount && _collateralAmount != 0, Errors.VL_AMOUNT_ERROR);\\n\\n    // Alpha Whitelist Routine\\n    require(\\n      IAlphaWhiteList(_fujiAdmin.getaWhiteList()).whiteListRoutine(\\n        msg.sender,\\n        vAssets.collateralID,\\n        _collateralAmount,\\n        fujiERC1155\\n      ),\\n      Errors.SP_ALPHA_WHITELIST\\n    );\\n\\n    // Delegate Call Deposit to current provider\\n    _deposit(_collateralAmount, address(activeProvider));\\n\\n    // Collateral Management\\n    IFujiERC1155(fujiERC1155).mint(msg.sender, vAssets.collateralID, _collateralAmount, \\\"\\\");\\n\\n    emit Deposit(msg.sender, vAssets.collateralAsset, _collateralAmount);\\n  }\\n\\n  /**\\n   * @dev Withdraws Vault's type collateral from activeProvider\\n   * call Controller checkrates\\n   * @param _withdrawAmount: amount of collateral to withdraw\\n   * otherwise pass -1 to withdraw maximum amount possible of collateral (including safety factors)\\n   * Emits a {Withdraw} event.\\n   */\\n  function withdraw(int256 _withdrawAmount) public override nonReentrant {\\n    // If call from Normal User do typical, otherwise Fliquidator\\n    if (msg.sender != _fujiAdmin.getFliquidator()) {\\n      updateF1155Balances();\\n\\n      // Get User Collateral in this Vault\\n      uint256 providedCollateral =\\n        IFujiERC1155(fujiERC1155).balanceOf(msg.sender, vAssets.collateralID);\\n\\n      // Check User has collateral\\n      require(providedCollateral > 0, Errors.VL_INVALID_COLLATERAL);\\n\\n      // Get Required Collateral with Factors to maintain debt position healthy\\n      uint256 neededCollateral =\\n        getNeededCollateralFor(\\n          IFujiERC1155(fujiERC1155).balanceOf(msg.sender, vAssets.borrowID),\\n          true\\n        );\\n\\n      uint256 amountToWithdraw =\\n        _withdrawAmount < 0 ? providedCollateral.sub(neededCollateral) : uint256(_withdrawAmount);\\n\\n      // Check Withdrawal amount, and that it will not fall undercollaterized.\\n      require(\\n        amountToWithdraw != 0 && providedCollateral.sub(amountToWithdraw) >= neededCollateral,\\n        Errors.VL_INVALID_WITHDRAW_AMOUNT\\n      );\\n\\n      // Collateral Management before Withdraw Operation\\n      IFujiERC1155(fujiERC1155).burn(msg.sender, vAssets.collateralID, amountToWithdraw);\\n\\n      // Delegate Call Withdraw to current provider\\n      _withdraw(amountToWithdraw, address(activeProvider));\\n\\n      // Transer Assets to User\\n      IERC20(vAssets.collateralAsset).uniTransfer(msg.sender, amountToWithdraw);\\n\\n      emit Withdraw(msg.sender, vAssets.collateralAsset, amountToWithdraw);\\n    } else {\\n      // Logic used when called by Fliquidator\\n      _withdraw(uint256(_withdrawAmount), address(activeProvider));\\n      IERC20(vAssets.collateralAsset).uniTransfer(msg.sender, uint256(_withdrawAmount));\\n    }\\n  }\\n\\n  /**\\n   * @dev Borrows Vault's type underlying amount from activeProvider\\n   * @param _borrowAmount: token amount of underlying to borrow\\n   * Emits a {Borrow} event.\\n   */\\n  function borrow(uint256 _borrowAmount) public override nonReentrant {\\n    updateF1155Balances();\\n\\n    uint256 providedCollateral =\\n      IFujiERC1155(fujiERC1155).balanceOf(msg.sender, vAssets.collateralID);\\n\\n    // Get Required Collateral with Factors to maintain debt position healthy\\n    uint256 neededCollateral =\\n      getNeededCollateralFor(\\n        _borrowAmount.add(IFujiERC1155(fujiERC1155).balanceOf(msg.sender, vAssets.borrowID)),\\n        true\\n      );\\n\\n    // Check Provided Collateral is not Zero, and greater than needed to maintain healthy position\\n    require(\\n      _borrowAmount != 0 && providedCollateral > neededCollateral,\\n      Errors.VL_INVALID_BORROW_AMOUNT\\n    );\\n\\n    // Debt Management\\n    IFujiERC1155(fujiERC1155).mint(msg.sender, vAssets.borrowID, _borrowAmount, \\\"\\\");\\n\\n    // Delegate Call Borrow to current provider\\n    _borrow(_borrowAmount, address(activeProvider));\\n\\n    // Transer Assets to User\\n    IERC20(vAssets.borrowAsset).uniTransfer(msg.sender, _borrowAmount);\\n\\n    emit Borrow(msg.sender, vAssets.borrowAsset, _borrowAmount);\\n  }\\n\\n  /**\\n   * @dev Paybacks Vault's type underlying to activeProvider\\n   * @param _repayAmount: token amount of underlying to repay, or pass -1 to repay full ammount\\n   * Emits a {Repay} event.\\n   */\\n  function payback(int256 _repayAmount) public payable override {\\n    // If call from Normal User do typical, otherwise Fliquidator\\n    if (msg.sender != _fujiAdmin.getFliquidator()) {\\n      updateF1155Balances();\\n\\n      uint256 userDebtBalance = IFujiERC1155(fujiERC1155).balanceOf(msg.sender, vAssets.borrowID);\\n\\n      // Check User Debt is greater than Zero and amount is not Zero\\n      require(_repayAmount != 0 && userDebtBalance > 0, Errors.VL_NO_DEBT_TO_PAYBACK);\\n\\n      // TODO: Get => corresponding amount of BaseProtocol Debt and FujiDebt\\n\\n      // If passed argument amount is negative do MAX\\n      uint256 amountToPayback = _repayAmount < 0 ? userDebtBalance : uint256(_repayAmount);\\n\\n      // Check User Allowance\\n      require(\\n        IERC20(vAssets.borrowAsset).allowance(msg.sender, address(this)) >= amountToPayback,\\n        Errors.VL_MISSING_ERC20_ALLOWANCE\\n      );\\n\\n      // Transfer Asset from User to Vault\\n      IERC20(vAssets.borrowAsset).transferFrom(msg.sender, address(this), amountToPayback);\\n\\n      // Delegate Call Payback to current provider\\n      _payback(amountToPayback, address(activeProvider));\\n\\n      //TODO: Transfer corresponding Debt Amount to Fuji Treasury\\n\\n      // Debt Management\\n      IFujiERC1155(fujiERC1155).burn(msg.sender, vAssets.borrowID, amountToPayback);\\n\\n      emit Payback(msg.sender, vAssets.borrowAsset, userDebtBalance);\\n    } else {\\n      // Logic used when called by Fliquidator\\n      _payback(uint256(_repayAmount), address(activeProvider));\\n    }\\n  }\\n\\n  /**\\n   * @dev Changes Vault debt and collateral to newProvider, called by Flasher\\n   * @param _newProvider new provider's address\\n   * @param _flashLoanAmount amount of flashloan underlying to repay Flashloan\\n   * Emits a {Switch} event.\\n   */\\n  function executeSwitch(\\n    address _newProvider,\\n    uint256 _flashLoanAmount,\\n    uint256 fee\\n  ) external override onlyFlash whenNotPaused {\\n    // Compute Ratio of transfer before payback\\n    uint256 ratio =\\n      _flashLoanAmount.mul(1e18).div(\\n        IProvider(activeProvider).getBorrowBalance(vAssets.borrowAsset)\\n      );\\n\\n    // Payback current provider\\n    _payback(_flashLoanAmount, activeProvider);\\n\\n    // Withdraw collateral proportional ratio from current provider\\n    uint256 collateraltoMove =\\n      IProvider(activeProvider).getDepositBalance(vAssets.collateralAsset).mul(ratio).div(1e18);\\n\\n    _withdraw(collateraltoMove, activeProvider);\\n\\n    // Deposit to the new provider\\n    _deposit(collateraltoMove, _newProvider);\\n\\n    // Borrow from the new provider, borrowBalance + premium\\n    _borrow(_flashLoanAmount.add(fee), _newProvider);\\n\\n    // return borrowed amount to Flasher\\n    IERC20(vAssets.borrowAsset).uniTransfer(msg.sender, _flashLoanAmount.add(fee));\\n\\n    emit Switch(address(this), activeProvider, _newProvider, _flashLoanAmount, collateraltoMove);\\n  }\\n\\n  //Setter, change state functions\\n\\n  /**\\n   * @dev Sets the fujiAdmin Address\\n   * @param _newFujiAdmin: FujiAdmin Contract Address\\n   */\\n  function setFujiAdmin(address _newFujiAdmin) public onlyOwner {\\n    _fujiAdmin = IFujiAdmin(_newFujiAdmin);\\n  }\\n\\n  /**\\n   * @dev Sets a new active provider for the Vault\\n   * @param _provider: fuji address of the new provider\\n   * Emits a {SetActiveProvider} event.\\n   */\\n  function setActiveProvider(address _provider) external override isAuthorized {\\n    activeProvider = _provider;\\n\\n    emit SetActiveProvider(_provider);\\n  }\\n\\n  //Administrative functions\\n\\n  /**\\n   * @dev Sets a fujiERC1155 Collateral and Debt Asset manager for this vault and initializes it.\\n   * @param _fujiERC1155: fuji ERC1155 address\\n   */\\n  function setFujiERC1155(address _fujiERC1155) external isAuthorized {\\n    fujiERC1155 = _fujiERC1155;\\n\\n    vAssets.collateralID = IFujiERC1155(_fujiERC1155).addInitializeAsset(\\n      IFujiERC1155.AssetType.collateralToken,\\n      address(this)\\n    );\\n    vAssets.borrowID = IFujiERC1155(_fujiERC1155).addInitializeAsset(\\n      IFujiERC1155.AssetType.debtToken,\\n      address(this)\\n    );\\n  }\\n\\n  /**\\n   * @dev Set Factors \\\"a\\\" and \\\"b\\\" for a Struct Factor\\n   * For safetyF;  Sets Safety Factor of Vault, should be > 1, a/b\\n   * For collatF; Sets Collateral Factor of Vault, should be > 1, a/b\\n   * @param _newFactorA: Nominator\\n   * @param _newFactorB: Denominator\\n   * @param _isSafety: safetyF or collatF\\n   */\\n  function setFactor(\\n    uint64 _newFactorA,\\n    uint64 _newFactorB,\\n    bool _isSafety\\n  ) external isAuthorized {\\n    if (_isSafety) {\\n      safetyF.a = _newFactorA;\\n      safetyF.b = _newFactorB;\\n    } else {\\n      collatF.a = _newFactorA;\\n      collatF.b = _newFactorB;\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets the Oracle address (Must Comply with AggregatorV3Interface)\\n   * @param _oracle: new Oracle address\\n   */\\n  function setOracle(address _oracle) external isAuthorized {\\n    oracle = AggregatorV3Interface(_oracle);\\n  }\\n\\n  /**\\n   * @dev Set providers to the Vault\\n   * @param _providers: new providers' addresses\\n   */\\n  function setProviders(address[] calldata _providers) external isAuthorized {\\n    providers = _providers;\\n  }\\n\\n  /**\\n   * @dev External Function to call updateState in F1155\\n   */\\n  function updateF1155Balances() public override {\\n    uint256 borrowBals;\\n    uint256 depositBals;\\n\\n    // take into account all balances across providers\\n    uint256 length = providers.length;\\n    for (uint256 i = 0; i < length; i++) {\\n      borrowBals = borrowBals.add(IProvider(providers[i]).getBorrowBalance(vAssets.borrowAsset));\\n    }\\n    for (uint256 i = 0; i < length; i++) {\\n      depositBals = depositBals.add(\\n        IProvider(providers[i]).getDepositBalance(vAssets.collateralAsset)\\n      );\\n    }\\n\\n    IFujiERC1155(fujiERC1155).updateState(vAssets.borrowID, borrowBals);\\n    IFujiERC1155(fujiERC1155).updateState(vAssets.collateralID, depositBals);\\n  }\\n\\n  //Getter Functions\\n\\n  /**\\n   * @dev Returns an array of the Vault's providers\\n   */\\n  function getProviders() external view override returns (address[] memory) {\\n    return providers;\\n  }\\n\\n  /**\\n   * @dev Returns an amount to be paid as bonus for liquidation\\n   * @param _amount: Vault underlying type intended to be liquidated\\n   * @param _flash: Flash or classic type of liquidation, bonus differs\\n   */\\n  function getLiquidationBonusFor(uint256 _amount, bool _flash)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    if (_flash) {\\n      // Bonus Factors for Flash Liquidation\\n      (uint64 a, uint64 b) = _fujiAdmin.getBonusFlashL();\\n      return _amount.mul(a).div(b);\\n    } else {\\n      //Bonus Factors for Normal Liquidation\\n      (uint64 a, uint64 b) = _fujiAdmin.getBonusLiq();\\n      return _amount.mul(a).div(b);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the amount of collateral needed, including or not safety factors\\n   * @param _amount: Vault underlying type intended to be borrowed\\n   * @param _withFactors: Inidicate if computation should include safety_Factors\\n   */\\n  function getNeededCollateralFor(uint256 _amount, bool _withFactors)\\n    public\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    // Get price of DAI in ETH\\n    (, int256 latestPrice, , , ) = oracle.latestRoundData();\\n    uint256 minimumReq = (_amount.mul(1e12).mul(uint256(latestPrice))).div(_BASE);\\n\\n    if (_withFactors) {\\n      return minimumReq.mul(collatF.a).mul(safetyF.a).div(collatF.b).div(safetyF.b);\\n    } else {\\n      return minimumReq;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the borrow balance of the Vault's underlying at a particular provider\\n   * @param _provider: address of a provider\\n   */\\n  function borrowBalance(address _provider) external view override returns (uint256) {\\n    return IProvider(_provider).getBorrowBalance(vAssets.borrowAsset);\\n  }\\n\\n  /**\\n   * @dev Returns the deposit balance of the Vault's type collateral at a particular provider\\n   * @param _provider: address of a provider\\n   */\\n  function depositBalance(address _provider) external view override returns (uint256) {\\n    return IProvider(_provider).getDepositBalance(vAssets.collateralAsset);\\n  }\\n\\n  /**\\n   * @dev Harvests the Rewards from baseLayer Protocols\\n   * @param _farmProtocolNum: number per VaultHarvester Contract for specific farm\\n   */\\n  function harvestRewards(uint256 _farmProtocolNum) public onlyOwner {\\n    address tokenReturned =\\n      IVaultHarvester(_fujiAdmin.getVaultHarvester()).collectRewards(_farmProtocolNum);\\n    uint256 tokenBal = IERC20(tokenReturned).balanceOf(address(this));\\n    require(tokenReturned != address(0) && tokenBal > 0, Errors.VL_HARVESTING_FAILED);\\n    IERC20(tokenReturned).uniTransfer(payable(_fujiAdmin.getTreasury()), tokenBal);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Vaults/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IVault {\\n  // Events\\n\\n  // Log Users Deposit\\n  event Deposit(address indexed userAddrs, address indexed asset, uint256 amount);\\n  // Log Users withdraw\\n  event Withdraw(address indexed userAddrs, address indexed asset, uint256 amount);\\n  // Log Users borrow\\n  event Borrow(address indexed userAddrs, address indexed asset, uint256 amount);\\n  // Log Users debt repay\\n  event Payback(address indexed userAddrs, address indexed asset, uint256 amount);\\n\\n  // Log New active provider\\n  event SetActiveProvider(address providerAddr);\\n  // Log Switch providers\\n  event Switch(\\n    address vault,\\n    address fromProviderAddrs,\\n    address toProviderAddr,\\n    uint256 debtamount,\\n    uint256 collattamount\\n  );\\n\\n  // Core Vault Functions\\n\\n  function deposit(uint256 _collateralAmount) external payable;\\n\\n  function withdraw(int256 _withdrawAmount) external;\\n\\n  function borrow(uint256 _borrowAmount) external;\\n\\n  function payback(int256 _repayAmount) external payable;\\n\\n  function executeSwitch(\\n    address _newProvider,\\n    uint256 _flashLoanDebt,\\n    uint256 _fee\\n  ) external;\\n\\n  //Getter Functions\\n\\n  function activeProvider() external view returns (address);\\n\\n  function borrowBalance(address _provider) external view returns (uint256);\\n\\n  function depositBalance(address _provider) external view returns (uint256);\\n\\n  function getNeededCollateralFor(uint256 _amount, bool _withFactors)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function getLiquidationBonusFor(uint256 _amount, bool _flash) external view returns (uint256);\\n\\n  function getProviders() external view returns (address[] memory);\\n\\n  function fujiERC1155() external view returns (address);\\n\\n  //Setter Functions\\n\\n  function setActiveProvider(address _provider) external;\\n\\n  function updateF1155Balances() external;\\n}\\n\"\r\n    },\r\n    \"contracts/Vaults/VaultBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Pausable } from \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { UniERC20 } from \\\"../Libraries/LibUniERC20.sol\\\";\\n\\ncontract VaultControl is Ownable, Pausable {\\n  using SafeMath for uint256;\\n  using UniERC20 for IERC20;\\n\\n  //Asset Struct\\n  struct VaultAssets {\\n    address collateralAsset;\\n    address borrowAsset;\\n    uint64 collateralID;\\n    uint64 borrowID;\\n  }\\n\\n  //Vault Struct for Managed Assets\\n  VaultAssets public vAssets;\\n\\n  //Pause Functions\\n\\n  /**\\n   * @dev Emergency Call to stop all basic money flow functions.\\n   */\\n  function pause() public onlyOwner {\\n    _pause();\\n  }\\n\\n  /**\\n   * @dev Emergency Call to stop all basic money flow functions.\\n   */\\n  function unpause() public onlyOwner {\\n    _pause();\\n  }\\n}\\n\\ncontract VaultBase is VaultControl {\\n  // Internal functions\\n\\n  /**\\n   * @dev Executes deposit operation with delegatecall.\\n   * @param _amount: amount to be deposited\\n   * @param _provider: address of provider to be used\\n   */\\n  function _deposit(uint256 _amount, address _provider) internal {\\n    bytes memory data =\\n      abi.encodeWithSignature(\\\"deposit(address,uint256)\\\", vAssets.collateralAsset, _amount);\\n    _execute(_provider, data);\\n  }\\n\\n  /**\\n   * @dev Executes withdraw operation with delegatecall.\\n   * @param _amount: amount to be withdrawn\\n   * @param _provider: address of provider to be used\\n   */\\n  function _withdraw(uint256 _amount, address _provider) internal {\\n    bytes memory data =\\n      abi.encodeWithSignature(\\\"withdraw(address,uint256)\\\", vAssets.collateralAsset, _amount);\\n    _execute(_provider, data);\\n  }\\n\\n  /**\\n   * @dev Executes borrow operation with delegatecall.\\n   * @param _amount: amount to be borrowed\\n   * @param _provider: address of provider to be used\\n   */\\n  function _borrow(uint256 _amount, address _provider) internal {\\n    bytes memory data =\\n      abi.encodeWithSignature(\\\"borrow(address,uint256)\\\", vAssets.borrowAsset, _amount);\\n    _execute(_provider, data);\\n  }\\n\\n  /**\\n   * @dev Executes payback operation with delegatecall.\\n   * @param _amount: amount to be paid back\\n   * @param _provider: address of provider to be used\\n   */\\n  function _payback(uint256 _amount, address _provider) internal {\\n    bytes memory data =\\n      abi.encodeWithSignature(\\\"payback(address,uint256)\\\", vAssets.borrowAsset, _amount);\\n    _execute(_provider, data);\\n  }\\n\\n  /**\\n   * @dev Returns byte response of delegatcalls\\n   */\\n  function _execute(address _target, bytes memory _data)\\n    internal\\n    whenNotPaused\\n    returns (bytes memory response)\\n  {\\n    /* solhint-disable */\\n    assembly {\\n      let succeeded := delegatecall(sub(gas(), 5000), _target, add(_data, 0x20), mload(_data), 0, 0)\\n      let size := returndatasize()\\n\\n      response := mload(0x40)\\n      mstore(0x40, add(response, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n      mstore(response, size)\\n      returndatacopy(add(response, 0x20), 0, size)\\n\\n      switch iszero(succeeded)\\n        case 1 {\\n          // throw if delegatecall failed\\n          revert(add(response, 0x20), size)\\n        }\\n    }\\n    /* solhint-disable */\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/IFujiAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12 <0.8.0;\\n\\ninterface IFujiAdmin {\\n  function getFlasher() external view returns (address);\\n\\n  function getFliquidator() external view returns (address);\\n\\n  function getController() external view returns (address);\\n\\n  function getTreasury() external view returns (address payable);\\n\\n  function getaWhiteList() external view returns (address);\\n\\n  function getVaultHarvester() external view returns (address);\\n\\n  function getBonusFlashL() external view returns (uint64, uint64);\\n\\n  function getBonusLiq() external view returns (uint64, uint64);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/FujiERC1155/IFujiERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IFujiERC1155 {\\n  //Asset Types\\n  enum AssetType {\\n    //uint8 = 0\\n    collateralToken,\\n    //uint8 = 1\\n    debtToken\\n  }\\n\\n  //General Getter Functions\\n\\n  function getAssetID(AssetType _type, address _assetAddr) external view returns (uint256);\\n\\n  function qtyOfManagedAssets() external view returns (uint64);\\n\\n  function balanceOf(address _account, uint256 _id) external view returns (uint256);\\n\\n  //function splitBalanceOf(address account,uint256 _AssetID) external view  returns (uint256,uint256);\\n\\n  //function balanceOfBatchType(address account, AssetType _Type) external view returns (uint256);\\n\\n  //Permit Controlled  Functions\\n  function mint(\\n    address _account,\\n    uint256 _id,\\n    uint256 _amount,\\n    bytes memory _data\\n  ) external;\\n\\n  function burn(\\n    address _account,\\n    uint256 _id,\\n    uint256 _amount\\n  ) external;\\n\\n  function updateState(uint256 _assetID, uint256 _newBalance) external;\\n\\n  function addInitializeAsset(AssetType _type, address _addr) external returns (uint64);\\n}\\n\"\r\n    },\r\n    \"contracts/Providers/IProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.25 <0.7.0;\\n\\ninterface IProvider {\\n  //Basic Core Functions\\n\\n  function deposit(address _collateralAsset, uint256 _collateralAmount) external payable;\\n\\n  function borrow(address _borrowAsset, uint256 _borrowAmount) external payable;\\n\\n  function withdraw(address _collateralAsset, uint256 _collateralAmount) external payable;\\n\\n  function payback(address _borrowAsset, uint256 _borrowAmount) external payable;\\n\\n  // returns the borrow annualized rate for an asset in ray (1e27)\\n  //Example 8.5% annual interest = 0.085 x 10^27 = 85000000000000000000000000 or 85*(10**24)\\n  function getBorrowRateFor(address _asset) external view returns (uint256);\\n\\n  function getBorrowBalance(address _asset) external view returns (uint256);\\n\\n  function getDepositBalance(address _asset) external view returns (uint256);\\n\\n  function getBorrowBalanceOf(address _asset, address _who) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/IAlphaWhiteList.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12 <0.8.0;\\n\\ninterface IAlphaWhiteList {\\n  function whiteListRoutine(\\n    address _usrAddrs,\\n    uint64 _assetId,\\n    uint256 _amount,\\n    address _erc1155\\n  ) external returns(bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Libraries/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity <0.8.0;\\n\\n/**\\n * @title Errors library\\n * @author Fuji\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = Validation Logic 100 series\\n *  - MATH = Math libraries 200 series\\n *  - RF = Refinancing 300 series\\n *  - VLT = vault 400 series\\n *  - SP = Special 900 series\\n */\\nlibrary Errors {\\n  \\n  //Errors\\n  string public constant VL_INDEX_OVERFLOW = '100'; // index overflows uint128\\n  string public constant VL_INVALID_MINT_AMOUNT = '101'; //invalid amount to mint\\n  string public constant VL_INVALID_BURN_AMOUNT = '102'; //invalid amount to burn\\n  string public constant VL_AMOUNT_ERROR = '103'; //Input value >0, and for ETH msg.value and amount shall match\\n  string public constant VL_INVALID_WITHDRAW_AMOUNT = '104'; //Withdraw amount exceeds provided collateral, or falls undercollaterized\\n  string public constant VL_INVALID_BORROW_AMOUNT = '105'; //Borrow amount does not meet collaterization\\n  string public constant VL_NO_DEBT_TO_PAYBACK = '106'; //Msg sender has no debt amount to be payback\\n  string public constant VL_MISSING_ERC20_ALLOWANCE = '107'; //Msg sender has not approved ERC20 full amount to transfer\\n  string public constant VL_USER_NOT_LIQUIDATABLE = '108'; //User debt position is not liquidatable\\n  string public constant VL_DEBT_LESS_THAN_AMOUNT = '109'; //User debt is less than amount to partial close\\n  string public constant VL_PROVIDER_ALREADY_ADDED = '110'; // Provider is already added in Provider Array\\n  string public constant VL_NOT_AUTHORIZED = '111'; //Not authorized\\n  string public constant VL_INVALID_COLLATERAL = '112'; //There is no Collateral, or Collateral is not in active in vault\\n  string public constant VL_NO_ERC20_BALANCE = '113'; //User does not have ERC20 balance\\n  string public constant VL_INPUT_ERROR = '114'; //Check inputs. For ERC1155 batch functions, array sizes should match.\\n  string public constant VL_ASSET_EXISTS ='115';  //Asset intended to be added already exists in FujiERC1155\\n  string public constant VL_ZERO_ADDR_1155 ='116'; //ERC1155: balance/transfer for zero address\\n  string public constant VL_NOT_A_CONTRACT = '117'; //Address is not a contract.\\n  string public constant VL_INVALID_ASSETID_1155 = '118'; //ERC1155 Asset ID is invalid.\\n  string public constant VL_NO_ERC1155_BALANCE ='119';//ERC1155: insufficient balance for transfer.\\n  string public constant VL_MISSING_ERC1155_APPROVAL = '120'; //ERC1155: transfer caller is not owner nor approved.\\n  string public constant VL_RECEIVER_REJECT_1155 = '121'; //ERC1155Receiver rejected tokens\\n  string public constant VL_RECEIVER_CONTRACT_NON_1155 = '122'; //ERC1155: transfer to non ERC1155Receiver implementer\\n  string public constant VL_OPTIMIZER_FEE_SMALL ='123'; //Fuji OptimizerFee has to be > 1 RAY (1e27)\\n  string public constant VL_UNDERCOLLATERIZED_ERROR = '124'; // Flashloan-Flashclose cannot be used when User's collateral is worth less than intended debt position to close.\\n  string public constant VL_MINIMUM_PAYBACK_ERROR = '125'; // Minimum Amount payback should be at least Fuji Optimizerfee accrued interest.\\n  string public constant VL_HARVESTING_FAILED = '126'; // Harvesting Function failed, check provided _farmProtocolNum or no claimable balance.\\n  string public constant VL_FLASHLOAN_FAILED = '127'; // Flashloan failed\\n\\n  string public constant MATH_DIVISION_BY_ZERO = '201';\\n  string public constant MATH_ADDITION_OVERFLOW = '202';\\n  string public constant MATH_MULTIPLICATION_OVERFLOW = '203';\\n\\n  string public constant RF_NO_GREENLIGHT = '300'; // Conditions for refinancing are not met, greenLight, deltaAPRThreshold, deltatimestampThreshold\\n  string public constant RF_INVALID_RATIO_VALUES = '301'; // Ratio Value provided is invalid, _ratioA/_ratioB <= 1, and > 0, or activeProvider borrowBalance = 0\\n  string public constant RF_CHECK_RATES_FALSE = '302'; //Check Rates routine returned False\\n\\n  string public constant VLT_CALLER_MUST_BE_VAULT = '401'; // The caller of this function must be a vault\\n\\n  string public constant SP_ALPHA_WHITELIST = '901'; // One ETH cap value for Alpha Version < 1 ETH\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Libraries/LibUniERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nlibrary UniERC20 {\\n  using SafeERC20 for IERC20;\\n\\n  IERC20 private constant _ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n  IERC20 private constant _ZERO_ADDRESS = IERC20(0);\\n\\n  function isETH(IERC20 token) internal pure returns (bool) {\\n    return (token == _ZERO_ADDRESS || token == _ETH_ADDRESS);\\n  }\\n\\n  function uniBalanceOf(IERC20 token, address account) internal view returns (uint256) {\\n    if (isETH(token)) {\\n      return account.balance;\\n    } else {\\n      return token.balanceOf(account);\\n    }\\n  }\\n\\n  function uniTransfer(\\n    IERC20 token,\\n    address payable to,\\n    uint256 amount\\n  ) internal {\\n    if (amount > 0) {\\n      if (isETH(token)) {\\n        to.transfer(amount);\\n      } else {\\n        token.safeTransfer(to, amount);\\n      }\\n    }\\n  }\\n\\n  function uniApprove(\\n    IERC20 token,\\n    address to,\\n    uint256 amount\\n  ) internal {\\n    require(!isETH(token), \\\"Approve called on ETH\\\");\\n\\n    if (amount == 0) {\\n      token.safeApprove(to, 0);\\n    } else {\\n      uint256 allowance = token.allowance(address(this), to);\\n      if (allowance < amount) {\\n        if (allowance > 0) {\\n          token.safeApprove(to, 0);\\n        }\\n        token.safeApprove(to, amount);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Vaults/VaultETHUSDC.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.25 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport { IVault } from \\\"./IVault.sol\\\";\\nimport { VaultBase } from \\\"./VaultBase.sol\\\";\\nimport { IFujiAdmin } from \\\"../IFujiAdmin.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {\\n  AggregatorV3Interface\\n} from \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IFujiERC1155 } from \\\"../FujiERC1155/IFujiERC1155.sol\\\";\\nimport { IProvider } from \\\"../Providers/IProvider.sol\\\";\\nimport { IAlphaWhiteList } from \\\"../IAlphaWhiteList.sol\\\";\\nimport { Errors } from \\\"../Libraries/Errors.sol\\\";\\n\\ninterface IVaultHarvester {\\n  function collectRewards(uint256 _farmProtocolNum) external returns (address claimedToken);\\n}\\n\\ncontract VaultETHUSDC is IVault, VaultBase, ReentrancyGuard {\\n  uint256 internal constant _BASE = 1e18;\\n\\n  struct Factor {\\n    uint64 a;\\n    uint64 b;\\n  }\\n\\n  // Safety factor\\n  Factor public safetyF;\\n\\n  // Collateralization factor\\n  Factor public collatF;\\n\\n  //State variables\\n  address[] public providers;\\n  address public override activeProvider;\\n\\n  IFujiAdmin private _fujiAdmin;\\n  address public override fujiERC1155;\\n  AggregatorV3Interface public oracle;\\n\\n  modifier isAuthorized() {\\n    require(\\n      msg.sender == owner() || msg.sender == _fujiAdmin.getController(),\\n      Errors.VL_NOT_AUTHORIZED\\n    );\\n    _;\\n  }\\n\\n  modifier onlyFlash() {\\n    require(msg.sender == _fujiAdmin.getFlasher(), Errors.VL_NOT_AUTHORIZED);\\n    _;\\n  }\\n\\n  constructor() public {\\n    vAssets.collateralAsset = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE); // ETH\\n    vAssets.borrowAsset = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48); // USDC\\n\\n    // 1.05\\n    safetyF.a = 21;\\n    safetyF.b = 20;\\n\\n    // 1.269\\n    collatF.a = 80;\\n    collatF.b = 63;\\n  }\\n\\n  receive() external payable {}\\n\\n  //Core functions\\n\\n  /**\\n   * @dev Deposits collateral and borrows underlying in a single function call from activeProvider\\n   * @param _collateralAmount: amount to be deposited\\n   * @param _borrowAmount: amount to be borrowed\\n   */\\n  function depositAndBorrow(uint256 _collateralAmount, uint256 _borrowAmount) external payable {\\n    deposit(_collateralAmount);\\n    borrow(_borrowAmount);\\n  }\\n\\n  /**\\n   * @dev Paybacks the underlying asset and withdraws collateral in a single function call from activeProvider\\n   * @param _paybackAmount: amount of underlying asset to be payback, pass -1 to pay full amount\\n   * @param _collateralAmount: amount of collateral to be withdrawn, pass -1 to withdraw maximum amount\\n   */\\n  function paybackAndWithdraw(int256 _paybackAmount, int256 _collateralAmount) external payable {\\n    payback(_paybackAmount);\\n    withdraw(_collateralAmount);\\n  }\\n\\n  /**\\n   * @dev Deposit Vault's type collateral to activeProvider\\n   * call Controller checkrates\\n   * @param _collateralAmount: to be deposited\\n   * Emits a {Deposit} event.\\n   */\\n  function deposit(uint256 _collateralAmount) public payable override {\\n    require(msg.value == _collateralAmount && _collateralAmount != 0, Errors.VL_AMOUNT_ERROR);\\n\\n    // Alpha Whitelist Routine\\n    require(\\n      IAlphaWhiteList(_fujiAdmin.getaWhiteList()).whiteListRoutine(\\n        msg.sender,\\n        vAssets.collateralID,\\n        _collateralAmount,\\n        fujiERC1155\\n      ),\\n      Errors.SP_ALPHA_WHITELIST\\n    );\\n\\n    // Delegate Call Deposit to current provider\\n    _deposit(_collateralAmount, address(activeProvider));\\n\\n    // Collateral Management\\n    IFujiERC1155(fujiERC1155).mint(msg.sender, vAssets.collateralID, _collateralAmount, \\\"\\\");\\n\\n    emit Deposit(msg.sender, vAssets.collateralAsset, _collateralAmount);\\n  }\\n\\n  /**\\n   * @dev Withdraws Vault's type collateral from activeProvider\\n   * call Controller checkrates\\n   * @param _withdrawAmount: amount of collateral to withdraw\\n   * otherwise pass -1 to withdraw maximum amount possible of collateral (including safety factors)\\n   * Emits a {Withdraw} event.\\n   */\\n  function withdraw(int256 _withdrawAmount) public override nonReentrant {\\n    // If call from Normal User do typical, otherwise Fliquidator\\n    if (msg.sender != _fujiAdmin.getFliquidator()) {\\n      updateF1155Balances();\\n\\n      // Get User Collateral in this Vault\\n      uint256 providedCollateral =\\n        IFujiERC1155(fujiERC1155).balanceOf(msg.sender, vAssets.collateralID);\\n\\n      // Check User has collateral\\n      require(providedCollateral > 0, Errors.VL_INVALID_COLLATERAL);\\n\\n      // Get Required Collateral with Factors to maintain debt position healthy\\n      uint256 neededCollateral =\\n        getNeededCollateralFor(\\n          IFujiERC1155(fujiERC1155).balanceOf(msg.sender, vAssets.borrowID),\\n          true\\n        );\\n\\n      uint256 amountToWithdraw =\\n        _withdrawAmount < 0 ? providedCollateral.sub(neededCollateral) : uint256(_withdrawAmount);\\n\\n      // Check Withdrawal amount, and that it will not fall undercollaterized.\\n      require(\\n        amountToWithdraw != 0 && providedCollateral.sub(amountToWithdraw) >= neededCollateral,\\n        Errors.VL_INVALID_WITHDRAW_AMOUNT\\n      );\\n\\n      // Collateral Management before Withdraw Operation\\n      IFujiERC1155(fujiERC1155).burn(msg.sender, vAssets.collateralID, amountToWithdraw);\\n\\n      // Delegate Call Withdraw to current provider\\n      _withdraw(amountToWithdraw, address(activeProvider));\\n\\n      // Transer Assets to User\\n      IERC20(vAssets.collateralAsset).uniTransfer(msg.sender, amountToWithdraw);\\n\\n      emit Withdraw(msg.sender, vAssets.collateralAsset, amountToWithdraw);\\n    } else {\\n      // Logic used when called by Fliquidator\\n      _withdraw(uint256(_withdrawAmount), address(activeProvider));\\n      IERC20(vAssets.collateralAsset).uniTransfer(msg.sender, uint256(_withdrawAmount));\\n    }\\n  }\\n\\n  /**\\n   * @dev Borrows Vault's type underlying amount from activeProvider\\n   * @param _borrowAmount: token amount of underlying to borrow\\n   * Emits a {Borrow} event.\\n   */\\n  function borrow(uint256 _borrowAmount) public override nonReentrant {\\n    updateF1155Balances();\\n\\n    uint256 providedCollateral =\\n      IFujiERC1155(fujiERC1155).balanceOf(msg.sender, vAssets.collateralID);\\n\\n    // Get Required Collateral with Factors to maintain debt position healthy\\n    uint256 neededCollateral =\\n      getNeededCollateralFor(\\n        _borrowAmount.add(IFujiERC1155(fujiERC1155).balanceOf(msg.sender, vAssets.borrowID)),\\n        true\\n      );\\n\\n    // Check Provided Collateral is not Zero, and greater than needed to maintain healthy position\\n    require(\\n      _borrowAmount != 0 && providedCollateral > neededCollateral,\\n      Errors.VL_INVALID_BORROW_AMOUNT\\n    );\\n\\n    // Debt Management\\n    IFujiERC1155(fujiERC1155).mint(msg.sender, vAssets.borrowID, _borrowAmount, \\\"\\\");\\n\\n    // Delegate Call Borrow to current provider\\n    _borrow(_borrowAmount, address(activeProvider));\\n\\n    // Transer Assets to User\\n    IERC20(vAssets.borrowAsset).uniTransfer(msg.sender, _borrowAmount);\\n\\n    emit Borrow(msg.sender, vAssets.borrowAsset, _borrowAmount);\\n  }\\n\\n  /**\\n   * @dev Paybacks Vault's type underlying to activeProvider\\n   * @param _repayAmount: token amount of underlying to repay, or pass -1 to repay full ammount\\n   * Emits a {Repay} event.\\n   */\\n  function payback(int256 _repayAmount) public payable override {\\n    // If call from Normal User do typical, otherwise Fliquidator\\n    if (msg.sender != _fujiAdmin.getFliquidator()) {\\n      updateF1155Balances();\\n\\n      uint256 userDebtBalance = IFujiERC1155(fujiERC1155).balanceOf(msg.sender, vAssets.borrowID);\\n\\n      // Check User Debt is greater than Zero and amount is not Zero\\n      require(_repayAmount != 0 && userDebtBalance > 0, Errors.VL_NO_DEBT_TO_PAYBACK);\\n\\n      // TODO: Get => corresponding amount of BaseProtocol Debt and FujiDebt\\n\\n      // If passed argument amount is negative do MAX\\n      uint256 amountToPayback = _repayAmount < 0 ? userDebtBalance : uint256(_repayAmount);\\n\\n      // Check User Allowance\\n      require(\\n        IERC20(vAssets.borrowAsset).allowance(msg.sender, address(this)) >= amountToPayback,\\n        Errors.VL_MISSING_ERC20_ALLOWANCE\\n      );\\n\\n      // Transfer Asset from User to Vault\\n      IERC20(vAssets.borrowAsset).transferFrom(msg.sender, address(this), amountToPayback);\\n\\n      // Delegate Call Payback to current provider\\n      _payback(amountToPayback, address(activeProvider));\\n\\n      //TODO: Transfer corresponding Debt Amount to Fuji Treasury\\n\\n      // Debt Management\\n      IFujiERC1155(fujiERC1155).burn(msg.sender, vAssets.borrowID, amountToPayback);\\n\\n      emit Payback(msg.sender, vAssets.borrowAsset, userDebtBalance);\\n    } else {\\n      // Logic used when called by Fliquidator\\n      _payback(uint256(_repayAmount), address(activeProvider));\\n    }\\n  }\\n\\n  /**\\n   * @dev Changes Vault debt and collateral to newProvider, called by Flasher\\n   * @param _newProvider new provider's address\\n   * @param _flashLoanAmount amount of flashloan underlying to repay Flashloan\\n   * Emits a {Switch} event.\\n   */\\n  function executeSwitch(\\n    address _newProvider,\\n    uint256 _flashLoanAmount,\\n    uint256 _fee\\n  ) external override onlyFlash whenNotPaused {\\n    // Compute Ratio of transfer before payback\\n    uint256 ratio =\\n      (_flashLoanAmount).mul(1e18).div(\\n        IProvider(activeProvider).getBorrowBalance(vAssets.borrowAsset)\\n      );\\n\\n    // Payback current provider\\n    _payback(_flashLoanAmount, activeProvider);\\n\\n    // Withdraw collateral proportional ratio from current provider\\n    uint256 collateraltoMove =\\n      IProvider(activeProvider).getDepositBalance(vAssets.collateralAsset).mul(ratio).div(1e18);\\n\\n    _withdraw(collateraltoMove, activeProvider);\\n\\n    // Deposit to the new provider\\n    _deposit(collateraltoMove, _newProvider);\\n\\n    // Borrow from the new provider, borrowBalance + premium\\n    _borrow(_flashLoanAmount.add(_fee), _newProvider);\\n\\n    // return borrowed amount to Flasher\\n    IERC20(vAssets.borrowAsset).uniTransfer(msg.sender, _flashLoanAmount.add(_fee));\\n\\n    emit Switch(address(this), activeProvider, _newProvider, _flashLoanAmount, collateraltoMove);\\n  }\\n\\n  //Setter, change state functions\\n\\n  /**\\n   * @dev Sets the fujiAdmin Address\\n   * @param _newFujiAdmin: FujiAdmin Contract Address\\n   */\\n  function setFujiAdmin(address _newFujiAdmin) external onlyOwner {\\n    _fujiAdmin = IFujiAdmin(_newFujiAdmin);\\n  }\\n\\n  /**\\n   * @dev Sets a new active provider for the Vault\\n   * @param _provider: fuji address of the new provider\\n   * Emits a {SetActiveProvider} event.\\n   */\\n  function setActiveProvider(address _provider) external override isAuthorized {\\n    activeProvider = _provider;\\n\\n    emit SetActiveProvider(_provider);\\n  }\\n\\n  //Administrative functions\\n\\n  /**\\n   * @dev Sets a fujiERC1155 Collateral and Debt Asset manager for this vault and initializes it.\\n   * @param _fujiERC1155: fuji ERC1155 address\\n   */\\n  function setFujiERC1155(address _fujiERC1155) external isAuthorized {\\n    fujiERC1155 = _fujiERC1155;\\n\\n    vAssets.collateralID = IFujiERC1155(_fujiERC1155).addInitializeAsset(\\n      IFujiERC1155.AssetType.collateralToken,\\n      address(this)\\n    );\\n    vAssets.borrowID = IFujiERC1155(_fujiERC1155).addInitializeAsset(\\n      IFujiERC1155.AssetType.debtToken,\\n      address(this)\\n    );\\n  }\\n\\n  /**\\n   * @dev Set Factors \\\"a\\\" and \\\"b\\\" for a Struct Factor\\n   * For safetyF;  Sets Safety Factor of Vault, should be > 1, a/b\\n   * For collatF; Sets Collateral Factor of Vault, should be > 1, a/b\\n   * @param _newFactorA: Nominator\\n   * @param _newFactorB: Denominator\\n   * @param _isSafety: safetyF or collatF\\n   */\\n  function setFactor(\\n    uint64 _newFactorA,\\n    uint64 _newFactorB,\\n    bool _isSafety\\n  ) external isAuthorized {\\n    if (_isSafety) {\\n      safetyF.a = _newFactorA;\\n      safetyF.b = _newFactorB;\\n    } else {\\n      collatF.a = _newFactorA;\\n      collatF.b = _newFactorB;\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets the Oracle address (Must Comply with AggregatorV3Interface)\\n   * @param _oracle: new Oracle address\\n   */\\n  function setOracle(address _oracle) external isAuthorized {\\n    oracle = AggregatorV3Interface(_oracle);\\n  }\\n\\n  /**\\n   * @dev Set providers to the Vault\\n   * @param _providers: new providers' addresses\\n   */\\n  function setProviders(address[] calldata _providers) external isAuthorized {\\n    providers = _providers;\\n  }\\n\\n  /**\\n   * @dev External Function to call updateState in F1155\\n   */\\n  function updateF1155Balances() public override {\\n    uint256 borrowBals;\\n    uint256 depositBals;\\n\\n    // take into account all balances across providers\\n    uint256 length = providers.length;\\n    for (uint256 i = 0; i < length; i++) {\\n      borrowBals = borrowBals.add(IProvider(providers[i]).getBorrowBalance(vAssets.borrowAsset));\\n    }\\n    for (uint256 i = 0; i < length; i++) {\\n      depositBals = depositBals.add(\\n        IProvider(providers[i]).getDepositBalance(vAssets.collateralAsset)\\n      );\\n    }\\n\\n    IFujiERC1155(fujiERC1155).updateState(vAssets.borrowID, borrowBals);\\n    IFujiERC1155(fujiERC1155).updateState(vAssets.collateralID, depositBals);\\n  }\\n\\n  //Getter Functions\\n\\n  /**\\n   * @dev Returns an array of the Vault's providers\\n   */\\n  function getProviders() external view override returns (address[] memory) {\\n    return providers;\\n  }\\n\\n  /**\\n   * @dev Returns an amount to be paid as bonus for liquidation\\n   * @param _amount: Vault underlying type intended to be liquidated\\n   * @param _flash: Flash or classic type of liquidation, bonus differs\\n   */\\n  function getLiquidationBonusFor(uint256 _amount, bool _flash)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    if (_flash) {\\n      // Bonus Factors for Flash Liquidation\\n      (uint64 a, uint64 b) = _fujiAdmin.getBonusFlashL();\\n      return _amount.mul(a).div(b);\\n    } else {\\n      //Bonus Factors for Normal Liquidation\\n      (uint64 a, uint64 b) = _fujiAdmin.getBonusLiq();\\n      return _amount.mul(a).div(b);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the amount of collateral needed, including or not safety factors\\n   * @param _amount: Vault underlying type intended to be borrowed\\n   * @param _withFactors: Inidicate if computation should include safety_Factors\\n   */\\n  function getNeededCollateralFor(uint256 _amount, bool _withFactors)\\n    public\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    // Get price of USDC in ETH\\n    (, int256 latestPrice, , , ) = oracle.latestRoundData();\\n    uint256 minimumReq = (_amount.mul(1e12).mul(uint256(latestPrice))).div(_BASE);\\n\\n    if (_withFactors) {\\n      return minimumReq.mul(collatF.a).mul(safetyF.a).div(collatF.b).div(safetyF.b);\\n    } else {\\n      return minimumReq;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the borrow balance of the Vault's underlying at a particular provider\\n   * @param _provider: address of a provider\\n   */\\n  function borrowBalance(address _provider) external view override returns (uint256) {\\n    return IProvider(_provider).getBorrowBalance(vAssets.borrowAsset);\\n  }\\n\\n  /**\\n   * @dev Returns the deposit balance of the Vault's type collateral at a particular provider\\n   * @param _provider: address of a provider\\n   */\\n  function depositBalance(address _provider) external view override returns (uint256) {\\n    return IProvider(_provider).getDepositBalance(vAssets.collateralAsset);\\n  }\\n\\n  /**\\n   * @dev Harvests the Rewards from baseLayer Protocols\\n   * @param _farmProtocolNum: number per VaultHarvester Contract for specific farm\\n   */\\n  function harvestRewards(uint256 _farmProtocolNum) external onlyOwner {\\n    address tokenReturned =\\n      IVaultHarvester(_fujiAdmin.getVaultHarvester()).collectRewards(_farmProtocolNum);\\n    uint256 tokenBal = IERC20(tokenReturned).balanceOf(address(this));\\n\\n    require(tokenReturned != address(0) && tokenBal > 0, Errors.VL_HARVESTING_FAILED);\\n    IERC20(tokenReturned).uniTransfer(payable(_fujiAdmin.getTreasury()), tokenBal);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Vaults/VaultETHDAI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport { IVault } from \\\"./IVault.sol\\\";\\nimport { VaultBase } from \\\"./VaultBase.sol\\\";\\nimport { IFujiAdmin } from \\\"../IFujiAdmin.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {\\n  AggregatorV3Interface\\n} from \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IFujiERC1155 } from \\\"../FujiERC1155/IFujiERC1155.sol\\\";\\nimport { IProvider } from \\\"../Providers/IProvider.sol\\\";\\nimport { IAlphaWhiteList } from \\\"../IAlphaWhiteList.sol\\\";\\nimport { Errors } from \\\"../Libraries/Errors.sol\\\";\\n\\ninterface IVaultHarvester {\\n  function collectRewards(uint256 _farmProtocolNum) external returns (address claimedToken);\\n}\\n\\ncontract VaultETHDAI is IVault, VaultBase, ReentrancyGuard {\\n  uint256 internal constant _BASE = 1e18;\\n\\n  struct Factor {\\n    uint64 a;\\n    uint64 b;\\n  }\\n\\n  // Safety factor\\n  Factor public safetyF;\\n\\n  // Collateralization factor\\n  Factor public collatF;\\n\\n  //State variables\\n  address[] public providers;\\n  address public override activeProvider;\\n\\n  IFujiAdmin private _fujiAdmin;\\n  address public override fujiERC1155;\\n  AggregatorV3Interface public oracle;\\n\\n  modifier isAuthorized() {\\n    require(\\n      msg.sender == owner() || msg.sender == _fujiAdmin.getController(),\\n      Errors.VL_NOT_AUTHORIZED\\n    );\\n    _;\\n  }\\n\\n  modifier onlyFlash() {\\n    require(msg.sender == _fujiAdmin.getFlasher(), Errors.VL_NOT_AUTHORIZED);\\n    _;\\n  }\\n\\n  constructor() public {\\n    vAssets.collateralAsset = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE); // ETH\\n    vAssets.borrowAsset = address(0x6B175474E89094C44Da98b954EedeAC495271d0F); // DAI\\n\\n    // 1.05\\n    safetyF.a = 21;\\n    safetyF.b = 20;\\n\\n    // 1.269\\n    collatF.a = 80;\\n    collatF.b = 63;\\n  }\\n\\n  receive() external payable {}\\n\\n  //Core functions\\n\\n  /**\\n   * @dev Deposits collateral and borrows underlying in a single function call from activeProvider\\n   * @param _collateralAmount: amount to be deposited\\n   * @param _borrowAmount: amount to be borrowed\\n   */\\n  function depositAndBorrow(uint256 _collateralAmount, uint256 _borrowAmount) external payable {\\n    deposit(_collateralAmount);\\n    borrow(_borrowAmount);\\n  }\\n\\n  /**\\n   * @dev Paybacks the underlying asset and withdraws collateral in a single function call from activeProvider\\n   * @param _paybackAmount: amount of underlying asset to be payback, pass -1 to pay full amount\\n   * @param _collateralAmount: amount of collateral to be withdrawn, pass -1 to withdraw maximum amount\\n   */\\n  function paybackAndWithdraw(int256 _paybackAmount, int256 _collateralAmount) external payable {\\n    payback(_paybackAmount);\\n    withdraw(_collateralAmount);\\n  }\\n\\n  /**\\n   * @dev Deposit Vault's type collateral to activeProvider\\n   * call Controller checkrates\\n   * @param _collateralAmount: to be deposited\\n   * Emits a {Deposit} event.\\n   */\\n  function deposit(uint256 _collateralAmount) public payable override {\\n    require(msg.value == _collateralAmount && _collateralAmount != 0, Errors.VL_AMOUNT_ERROR);\\n\\n    // Alpha Whitelist Routine\\n    require(\\n      IAlphaWhiteList(_fujiAdmin.getaWhiteList()).whiteListRoutine(\\n        msg.sender,\\n        vAssets.collateralID,\\n        _collateralAmount,\\n        fujiERC1155\\n      ),\\n      Errors.SP_ALPHA_WHITELIST\\n    );\\n\\n    // Delegate Call Deposit to current provider\\n    _deposit(_collateralAmount, address(activeProvider));\\n\\n    // Collateral Management\\n    IFujiERC1155(fujiERC1155).mint(msg.sender, vAssets.collateralID, _collateralAmount, \\\"\\\");\\n\\n    emit Deposit(msg.sender, vAssets.collateralAsset, _collateralAmount);\\n  }\\n\\n  /**\\n   * @dev Withdraws Vault's type collateral from activeProvider\\n   * call Controller checkrates\\n   * @param _withdrawAmount: amount of collateral to withdraw\\n   * otherwise pass -1 to withdraw maximum amount possible of collateral (including safety factors)\\n   * Emits a {Withdraw} event.\\n   */\\n  function withdraw(int256 _withdrawAmount) public override nonReentrant {\\n    // If call from Normal User do typical, otherwise Fliquidator\\n    if (msg.sender != _fujiAdmin.getFliquidator()) {\\n      updateF1155Balances();\\n\\n      // Get User Collateral in this Vault\\n      uint256 providedCollateral =\\n        IFujiERC1155(fujiERC1155).balanceOf(msg.sender, vAssets.collateralID);\\n\\n      // Check User has collateral\\n      require(providedCollateral > 0, Errors.VL_INVALID_COLLATERAL);\\n\\n      // Get Required Collateral with Factors to maintain debt position healthy\\n      uint256 neededCollateral =\\n        getNeededCollateralFor(\\n          IFujiERC1155(fujiERC1155).balanceOf(msg.sender, vAssets.borrowID),\\n          true\\n        );\\n\\n      uint256 amountToWithdraw =\\n        _withdrawAmount < 0 ? providedCollateral.sub(neededCollateral) : uint256(_withdrawAmount);\\n\\n      // Check Withdrawal amount, and that it will not fall undercollaterized.\\n      require(\\n        amountToWithdraw != 0 && providedCollateral.sub(amountToWithdraw) >= neededCollateral,\\n        Errors.VL_INVALID_WITHDRAW_AMOUNT\\n      );\\n\\n      // Collateral Management before Withdraw Operation\\n      IFujiERC1155(fujiERC1155).burn(msg.sender, vAssets.collateralID, amountToWithdraw);\\n\\n      // Delegate Call Withdraw to current provider\\n      _withdraw(amountToWithdraw, address(activeProvider));\\n\\n      // Transer Assets to User\\n      IERC20(vAssets.collateralAsset).uniTransfer(msg.sender, amountToWithdraw);\\n\\n      emit Withdraw(msg.sender, vAssets.collateralAsset, amountToWithdraw);\\n    } else {\\n      // Logic used when called by Fliquidator\\n      _withdraw(uint256(_withdrawAmount), address(activeProvider));\\n      IERC20(vAssets.collateralAsset).uniTransfer(msg.sender, uint256(_withdrawAmount));\\n    }\\n  }\\n\\n  /**\\n   * @dev Borrows Vault's type underlying amount from activeProvider\\n   * @param _borrowAmount: token amount of underlying to borrow\\n   * Emits a {Borrow} event.\\n   */\\n  function borrow(uint256 _borrowAmount) public override nonReentrant {\\n    updateF1155Balances();\\n\\n    uint256 providedCollateral =\\n      IFujiERC1155(fujiERC1155).balanceOf(msg.sender, vAssets.collateralID);\\n\\n    // Get Required Collateral with Factors to maintain debt position healthy\\n    uint256 neededCollateral =\\n      getNeededCollateralFor(\\n        _borrowAmount.add(IFujiERC1155(fujiERC1155).balanceOf(msg.sender, vAssets.borrowID)),\\n        true\\n      );\\n\\n    // Check Provided Collateral is not Zero, and greater than needed to maintain healthy position\\n    require(\\n      _borrowAmount != 0 && providedCollateral > neededCollateral,\\n      Errors.VL_INVALID_BORROW_AMOUNT\\n    );\\n\\n    // Debt Management\\n    IFujiERC1155(fujiERC1155).mint(msg.sender, vAssets.borrowID, _borrowAmount, \\\"\\\");\\n\\n    // Delegate Call Borrow to current provider\\n    _borrow(_borrowAmount, address(activeProvider));\\n\\n    // Transer Assets to User\\n    IERC20(vAssets.borrowAsset).uniTransfer(msg.sender, _borrowAmount);\\n\\n    emit Borrow(msg.sender, vAssets.borrowAsset, _borrowAmount);\\n  }\\n\\n  /**\\n   * @dev Paybacks Vault's type underlying to activeProvider\\n   * @param _repayAmount: token amount of underlying to repay, or pass -1 to repay full ammount\\n   * Emits a {Repay} event.\\n   */\\n  function payback(int256 _repayAmount) public payable override {\\n    // If call from Normal User do typical, otherwise Fliquidator\\n    if (msg.sender != _fujiAdmin.getFliquidator()) {\\n      updateF1155Balances();\\n\\n      uint256 userDebtBalance = IFujiERC1155(fujiERC1155).balanceOf(msg.sender, vAssets.borrowID);\\n\\n      // Check User Debt is greater than Zero and amount is not Zero\\n      require(_repayAmount != 0 && userDebtBalance > 0, Errors.VL_NO_DEBT_TO_PAYBACK);\\n\\n      // TODO: Get => corresponding amount of BaseProtocol Debt and FujiDebt\\n\\n      // If passed argument amount is negative do MAX\\n      uint256 amountToPayback = _repayAmount < 0 ? userDebtBalance : uint256(_repayAmount);\\n\\n      // Check User Allowance\\n      require(\\n        IERC20(vAssets.borrowAsset).allowance(msg.sender, address(this)) >= amountToPayback,\\n        Errors.VL_MISSING_ERC20_ALLOWANCE\\n      );\\n\\n      // Transfer Asset from User to Vault\\n      IERC20(vAssets.borrowAsset).transferFrom(msg.sender, address(this), amountToPayback);\\n\\n      // Delegate Call Payback to current provider\\n      _payback(amountToPayback, address(activeProvider));\\n\\n      //TODO: Transfer corresponding Debt Amount to Fuji Treasury\\n\\n      // Debt Management\\n      IFujiERC1155(fujiERC1155).burn(msg.sender, vAssets.borrowID, amountToPayback);\\n\\n      emit Payback(msg.sender, vAssets.borrowAsset, userDebtBalance);\\n    } else {\\n      // Logic used when called by Fliquidator\\n      _payback(uint256(_repayAmount), address(activeProvider));\\n    }\\n  }\\n\\n  /**\\n   * @dev Changes Vault debt and collateral to newProvider, called by Flasher\\n   * @param _newProvider new provider's address\\n   * @param _flashLoanAmount amount of flashloan underlying to repay Flashloan\\n   * Emits a {Switch} event.\\n   */\\n  function executeSwitch(\\n    address _newProvider,\\n    uint256 _flashLoanAmount,\\n    uint256 _fee\\n  ) external override onlyFlash whenNotPaused {\\n    // Compute Ratio of transfer before payback\\n    uint256 ratio =\\n      _flashLoanAmount.mul(1e18).div(\\n        IProvider(activeProvider).getBorrowBalance(vAssets.borrowAsset)\\n      );\\n\\n    // Payback current provider\\n    _payback(_flashLoanAmount, activeProvider);\\n\\n    // Withdraw collateral proportional ratio from current provider\\n    uint256 collateraltoMove =\\n      IProvider(activeProvider).getDepositBalance(vAssets.collateralAsset).mul(ratio).div(1e18);\\n\\n    _withdraw(collateraltoMove, activeProvider);\\n\\n    // Deposit to the new provider\\n    _deposit(collateraltoMove, _newProvider);\\n\\n    // Borrow from the new provider, borrowBalance + premium\\n    _borrow(_flashLoanAmount.add(_fee), _newProvider);\\n\\n    // return borrowed amount to Flasher\\n    IERC20(vAssets.borrowAsset).uniTransfer(msg.sender, _flashLoanAmount.add(_fee));\\n\\n    emit Switch(address(this), activeProvider, _newProvider, _flashLoanAmount, collateraltoMove);\\n  }\\n\\n  //Setter, change state functions\\n\\n  /**\\n   * @dev Sets a new active provider for the Vault\\n   * @param _provider: fuji address of the new provider\\n   * Emits a {SetActiveProvider} event.\\n   */\\n  function setActiveProvider(address _provider) external override isAuthorized {\\n    activeProvider = _provider;\\n\\n    emit SetActiveProvider(_provider);\\n  }\\n\\n  //Administrative functions\\n\\n  /**\\n   * @dev Sets the fujiAdmin Address\\n   * @param _newFujiAdmin: FujiAdmin Contract Address\\n   */\\n  function setFujiAdmin(address _newFujiAdmin) external onlyOwner {\\n    _fujiAdmin = IFujiAdmin(_newFujiAdmin);\\n  }\\n\\n  /**\\n   * @dev Sets a fujiERC1155 Collateral and Debt Asset manager for this vault and initializes it.\\n   * @param _fujiERC1155: fuji ERC1155 address\\n   */\\n  function setFujiERC1155(address _fujiERC1155) external isAuthorized {\\n    fujiERC1155 = _fujiERC1155;\\n\\n    vAssets.collateralID = IFujiERC1155(_fujiERC1155).addInitializeAsset(\\n      IFujiERC1155.AssetType.collateralToken,\\n      address(this)\\n    );\\n    vAssets.borrowID = IFujiERC1155(_fujiERC1155).addInitializeAsset(\\n      IFujiERC1155.AssetType.debtToken,\\n      address(this)\\n    );\\n  }\\n\\n  /**\\n   * @dev Set Factors \\\"a\\\" and \\\"b\\\" for a Struct Factor\\n   * For safetyF;  Sets Safety Factor of Vault, should be > 1, a/b\\n   * For collatF; Sets Collateral Factor of Vault, should be > 1, a/b\\n   * @param _newFactorA: Nominator\\n   * @param _newFactorB: Denominator\\n   * @param _isSafety: safetyF or collatF\\n   */\\n  function setFactor(\\n    uint64 _newFactorA,\\n    uint64 _newFactorB,\\n    bool _isSafety\\n  ) external isAuthorized {\\n    if (_isSafety) {\\n      safetyF.a = _newFactorA;\\n      safetyF.b = _newFactorB;\\n    } else {\\n      collatF.a = _newFactorA;\\n      collatF.b = _newFactorB;\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets the Oracle address (Must Comply with AggregatorV3Interface)\\n   * @param _oracle: new Oracle address\\n   */\\n  function setOracle(address _oracle) external isAuthorized {\\n    oracle = AggregatorV3Interface(_oracle);\\n  }\\n\\n  /**\\n   * @dev Set providers to the Vault\\n   * @param _providers: new providers' addresses\\n   */\\n  function setProviders(address[] calldata _providers) external isAuthorized {\\n    providers = _providers;\\n  }\\n\\n  /**\\n   * @dev External Function to call updateState in F1155\\n   */\\n  function updateF1155Balances() public override {\\n    uint256 borrowBals;\\n    uint256 depositBals;\\n\\n    // take into balances across all providers\\n    uint256 length = providers.length;\\n    for (uint256 i = 0; i < length; i++) {\\n      borrowBals = borrowBals.add(IProvider(providers[i]).getBorrowBalance(vAssets.borrowAsset));\\n    }\\n    for (uint256 i = 0; i < length; i++) {\\n      depositBals = depositBals.add(\\n        IProvider(providers[i]).getDepositBalance(vAssets.collateralAsset)\\n      );\\n    }\\n\\n    IFujiERC1155(fujiERC1155).updateState(vAssets.borrowID, borrowBals);\\n    IFujiERC1155(fujiERC1155).updateState(vAssets.collateralID, depositBals);\\n  }\\n\\n  //Getter Functions\\n\\n  /**\\n   * @dev Returns an array of the Vault's providers\\n   */\\n  function getProviders() external view override returns (address[] memory) {\\n    return providers;\\n  }\\n\\n  /**\\n   * @dev Returns an amount to be paid as bonus for liquidation\\n   * @param _amount: Vault underlying type intended to be liquidated\\n   * @param _flash: Flash or classic type of liquidation, bonus differs\\n   */\\n  function getLiquidationBonusFor(uint256 _amount, bool _flash)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    if (_flash) {\\n      // Bonus Factors for Flash Liquidation\\n      (uint64 a, uint64 b) = _fujiAdmin.getBonusFlashL();\\n      return _amount.mul(a).div(b);\\n    } else {\\n      //Bonus Factors for Normal Liquidation\\n      (uint64 a, uint64 b) = _fujiAdmin.getBonusLiq();\\n      return _amount.mul(a).div(b);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the amount of collateral needed, including or not safety factors\\n   * @param _amount: Vault underlying type intended to be borrowed\\n   * @param _withFactors: Inidicate if computation should include safety_Factors\\n   */\\n  function getNeededCollateralFor(uint256 _amount, bool _withFactors)\\n    public\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    // Get price of DAI in ETH\\n    (, int256 latestPrice, , , ) = oracle.latestRoundData();\\n    uint256 minimumReq = (_amount.mul(uint256(latestPrice))).div(_BASE);\\n\\n    if (_withFactors) {\\n      return minimumReq.mul(collatF.a).mul(safetyF.a).div(collatF.b).div(safetyF.b);\\n    } else {\\n      return minimumReq;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the borrow balance of the Vault's underlying at a particular provider\\n   * @param _provider: address of a provider\\n   */\\n  function borrowBalance(address _provider) external view override returns (uint256) {\\n    return IProvider(_provider).getBorrowBalance(vAssets.borrowAsset);\\n  }\\n\\n  /**\\n   * @dev Returns the deposit balance of the Vault's type collateral at a particular provider\\n   * @param _provider: address of a provider\\n   */\\n  function depositBalance(address _provider) external view override returns (uint256) {\\n    return IProvider(_provider).getDepositBalance(vAssets.collateralAsset);\\n  }\\n\\n  /**\\n   * @dev Harvests the Rewards from baseLayer Protocols\\n   * @param _farmProtocolNum: number per VaultHarvester Contract for specific farm\\n   */\\n  function harvestRewards(uint256 _farmProtocolNum) external onlyOwner {\\n    address tokenReturned =\\n      IVaultHarvester(_fujiAdmin.getVaultHarvester()).collectRewards(_farmProtocolNum);\\n    uint256 tokenBal = IERC20(tokenReturned).balanceOf(address(this));\\n\\n    require(tokenReturned != address(0) && tokenBal > 0, Errors.VL_HARVESTING_FAILED);\\n    IERC20(tokenReturned).uniTransfer(payable(_fujiAdmin.getTreasury()), tokenBal);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Providers/ProviderLQTY.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.25 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { UniERC20 } from \\\"../Libraries/LibUniERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IProvider } from \\\"./IProvider.sol\\\";\\n\\ninterface LQTYInterface {}\\n\\ncontract LQTYHelpers {\\n  function _initializeTrouve() internal {\\n    //TODO function\\n  }\\n}\\n\\ncontract ProviderLQTY is IProvider, LQTYHelpers {\\n  using SafeMath for uint256;\\n  using UniERC20 for IERC20;\\n\\n  function deposit(address collateralAsset, uint256 collateralAmount) external payable override {\\n    collateralAsset;\\n    collateralAmount;\\n    //TODO\\n  }\\n\\n  function borrow(address borrowAsset, uint256 borrowAmount) external payable override {\\n    borrowAsset;\\n    borrowAmount;\\n    //TODO\\n  }\\n\\n  function withdraw(address collateralAsset, uint256 collateralAmount) external payable override {\\n    collateralAsset;\\n    collateralAmount;\\n    //TODO\\n  }\\n\\n  function payback(address borrowAsset, uint256 borrowAmount) external payable override {\\n    borrowAsset;\\n    borrowAmount;\\n    //TODO\\n  }\\n\\n  function getBorrowRateFor(address asset) external view override returns (uint256) {\\n    asset;\\n    //TODO\\n    return 0;\\n  }\\n\\n  function getBorrowBalance(address _asset) external view override returns (uint256) {\\n    _asset;\\n    //TODO\\n    return 0;\\n  }\\n\\n  function getBorrowBalanceOf(address _asset, address _who) external override returns (uint256) {\\n    _asset;\\n    _who;\\n    //TODO\\n    return 0;\\n  }\\n\\n  function getDepositBalance(address _asset) external view override returns (uint256) {\\n    _asset;\\n    //TODO\\n    return 0;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Providers/ProviderDYDX.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.25 <0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { UniERC20 } from \\\"../Libraries/LibUniERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IProvider } from \\\"./IProvider.sol\\\";\\n\\ninterface IWethERC20 is IERC20 {\\n  function deposit() external payable;\\n\\n  function withdraw(uint256) external;\\n}\\n\\ninterface SoloMarginContract {\\n  struct Info {\\n    address owner;\\n    uint256 number;\\n  }\\n\\n  struct Price {\\n    uint256 value;\\n  }\\n\\n  struct Value {\\n    uint256 value;\\n  }\\n\\n  struct Rate {\\n    uint256 value;\\n  }\\n\\n  enum ActionType { Deposit, Withdraw, Transfer, Buy, Sell, Trade, Liquidate, Vaporize, Call }\\n\\n  enum AssetDenomination { Wei, Par }\\n\\n  enum AssetReference { Delta, Target }\\n\\n  struct AssetAmount {\\n    bool sign;\\n    AssetDenomination denomination;\\n    AssetReference ref;\\n    uint256 value;\\n  }\\n\\n  struct ActionArgs {\\n    ActionType actionType;\\n    uint256 accountId;\\n    AssetAmount amount;\\n    uint256 primaryMarketId;\\n    uint256 secondaryMarketId;\\n    address otherAddress;\\n    uint256 otherAccountId;\\n    bytes data;\\n  }\\n\\n  struct Wei {\\n    bool sign;\\n    uint256 value;\\n  }\\n\\n  function operate(Info[] calldata _accounts, ActionArgs[] calldata _actions) external;\\n\\n  function getAccountWei(Info calldata _account, uint256 _marketId)\\n    external\\n    view\\n    returns (Wei memory);\\n\\n  function getNumMarkets() external view returns (uint256);\\n\\n  function getMarketTokenAddress(uint256 _marketId) external view returns (address);\\n\\n  function getAccountValues(Info memory _account)\\n    external\\n    view\\n    returns (Value memory, Value memory);\\n\\n  function getMarketInterestRate(uint256 _marketId) external view returns (Rate memory);\\n}\\n\\ncontract HelperFunct {\\n  /**\\n   * @dev get Dydx Solo Address\\n   */\\n  function getDydxAddress() public pure returns (address addr) {\\n    addr = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\\n  }\\n\\n  /**\\n   * @dev get WETH address\\n   */\\n  function getWETHAddr() public pure returns (address weth) {\\n    weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n  }\\n\\n  /**\\n   * @dev Return ethereum address\\n   */\\n  function _getEthAddr() internal pure returns (address) {\\n    return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH Address\\n  }\\n\\n  /**\\n   * @dev Get Dydx Market ID from token Address\\n   */\\n  function _getMarketId(SoloMarginContract _solo, address _token)\\n    internal\\n    view\\n    returns (uint256 _marketId)\\n  {\\n    uint256 markets = _solo.getNumMarkets();\\n    address token = _token == _getEthAddr() ? getWETHAddr() : _token;\\n    bool check = false;\\n    for (uint256 i = 0; i < markets; i++) {\\n      if (token == _solo.getMarketTokenAddress(i)) {\\n        _marketId = i;\\n        check = true;\\n        break;\\n      }\\n    }\\n    require(check, \\\"DYDX Market doesnt exist!\\\");\\n  }\\n\\n  /**\\n   * @dev Get Dydx Acccount arg\\n   */\\n  function _getAccountArgs() internal view returns (SoloMarginContract.Info[] memory) {\\n    SoloMarginContract.Info[] memory accounts = new SoloMarginContract.Info[](1);\\n    accounts[0] = (SoloMarginContract.Info(address(this), 0));\\n    return accounts;\\n  }\\n\\n  /**\\n   * @dev Get Dydx Actions args.\\n   */\\n  function _getActionsArgs(\\n    uint256 _marketId,\\n    uint256 _amt,\\n    bool _sign\\n  ) internal view returns (SoloMarginContract.ActionArgs[] memory) {\\n    SoloMarginContract.ActionArgs[] memory actions = new SoloMarginContract.ActionArgs[](1);\\n    SoloMarginContract.AssetAmount memory amount =\\n      SoloMarginContract.AssetAmount(\\n        _sign,\\n        SoloMarginContract.AssetDenomination.Wei,\\n        SoloMarginContract.AssetReference.Delta,\\n        _amt\\n      );\\n    bytes memory empty;\\n    SoloMarginContract.ActionType action =\\n      _sign ? SoloMarginContract.ActionType.Deposit : SoloMarginContract.ActionType.Withdraw;\\n    actions[0] = SoloMarginContract.ActionArgs(\\n      action,\\n      0,\\n      amount,\\n      _marketId,\\n      0,\\n      address(this),\\n      0,\\n      empty\\n    );\\n    return actions;\\n  }\\n}\\n\\ncontract ProviderDYDX is IProvider, HelperFunct {\\n  using SafeMath for uint256;\\n  using UniERC20 for IERC20;\\n\\n  bool public donothing = true;\\n\\n  //Provider Core Functions\\n\\n  /**\\n   * @dev Deposit ETH/ERC20_Token.\\n   * @param _asset: token address to deposit. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n   * @param _amount: token amount to deposit.\\n   */\\n  function deposit(address _asset, uint256 _amount) external payable override {\\n    SoloMarginContract dydxContract = SoloMarginContract(getDydxAddress());\\n\\n    uint256 marketId = _getMarketId(dydxContract, _asset);\\n\\n    if (_asset == _getEthAddr()) {\\n      IWethERC20 tweth = IWethERC20(getWETHAddr());\\n      tweth.deposit{ value: _amount }();\\n      tweth.approve(getDydxAddress(), _amount);\\n    } else {\\n      IWethERC20 tweth = IWethERC20(_asset);\\n      tweth.approve(getDydxAddress(), _amount);\\n    }\\n\\n    dydxContract.operate(_getAccountArgs(), _getActionsArgs(marketId, _amount, true));\\n  }\\n\\n  /**\\n   * @dev Withdraw ETH/ERC20_Token.\\n   * @param _asset: token address to withdraw. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n   * @param _amount: token amount to withdraw.\\n   */\\n  function withdraw(address _asset, uint256 _amount) external payable override {\\n    SoloMarginContract dydxContract = SoloMarginContract(getDydxAddress());\\n\\n    uint256 marketId = _getMarketId(dydxContract, _asset);\\n\\n    dydxContract.operate(_getAccountArgs(), _getActionsArgs(marketId, _amount, false));\\n\\n    if (_asset == _getEthAddr()) {\\n      IWethERC20 tweth = IWethERC20(getWETHAddr());\\n\\n      tweth.approve(address(tweth), _amount);\\n\\n      tweth.withdraw(_amount);\\n    }\\n  }\\n\\n  /**\\n   * @dev Borrow ETH/ERC20_Token.\\n   * @param _asset token address to borrow.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n   * @param _amount: token amount to borrow.\\n   */\\n  function borrow(address _asset, uint256 _amount) external payable override {\\n    SoloMarginContract dydxContract = SoloMarginContract(getDydxAddress());\\n\\n    uint256 marketId = _getMarketId(dydxContract, _asset);\\n\\n    dydxContract.operate(_getAccountArgs(), _getActionsArgs(marketId, _amount, false));\\n\\n    if (_asset == _getEthAddr()) {\\n      IWethERC20 tweth = IWethERC20(getWETHAddr());\\n\\n      tweth.approve(address(_asset), _amount);\\n\\n      tweth.withdraw(_amount);\\n    }\\n  }\\n\\n  /**\\n   * @dev Payback borrowed ETH/ERC20_Token.\\n   * @param _asset token address to payback.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n   * @param _amount: token amount to payback.\\n   */\\n  function payback(address _asset, uint256 _amount) external payable override {\\n    SoloMarginContract dydxContract = SoloMarginContract(getDydxAddress());\\n\\n    uint256 marketId = _getMarketId(dydxContract, _asset);\\n\\n    if (_asset == _getEthAddr()) {\\n      IWethERC20 tweth = IWethERC20(getWETHAddr());\\n      tweth.deposit{ value: _amount }();\\n      tweth.approve(getDydxAddress(), _amount);\\n    } else {\\n      IWethERC20 tweth = IWethERC20(_asset);\\n      tweth.approve(getDydxAddress(), _amount);\\n    }\\n\\n    dydxContract.operate(_getAccountArgs(), _getActionsArgs(marketId, _amount, true));\\n  }\\n\\n  /**\\n   * @dev Returns the current borrowing rate (APR) of a ETH/ERC20_Token, in ray(1e27).\\n   * @param _asset: token address to query the current borrowing rate.\\n   */\\n  function getBorrowRateFor(address _asset) external view override returns (uint256) {\\n    SoloMarginContract dydxContract = SoloMarginContract(getDydxAddress());\\n    uint256 marketId = _getMarketId(dydxContract, _asset);\\n\\n    SoloMarginContract.Rate memory _rate = dydxContract.getMarketInterestRate(marketId);\\n\\n    return (_rate.value).mul(1e9).mul(365 days);\\n  }\\n\\n  /**\\n   * @dev Returns the borrow balance of a ETH/ERC20_Token.\\n   * @param _asset: token address to query the balance.\\n   */\\n  function getBorrowBalance(address _asset) external view override returns (uint256) {\\n    SoloMarginContract dydxContract = SoloMarginContract(getDydxAddress());\\n    uint256 marketId = _getMarketId(dydxContract, _asset);\\n    SoloMarginContract.Info memory account =\\n      SoloMarginContract.Info({ owner: msg.sender, number: 0 });\\n    SoloMarginContract.Wei memory structbalance = dydxContract.getAccountWei(account, marketId);\\n\\n    return structbalance.value;\\n  }\\n\\n  /**\\n   * @dev Returns the borrow balance of a ETH/ERC20_Token.\\n   * @param _asset: token address to query the balance.\\n   * @param _who: address of the account.\\n   */\\n  function getBorrowBalanceOf(address _asset, address _who) external override returns (uint256) {\\n    SoloMarginContract dydxContract = SoloMarginContract(getDydxAddress());\\n    uint256 marketId = _getMarketId(dydxContract, _asset);\\n    SoloMarginContract.Info memory account = SoloMarginContract.Info({ owner: _who, number: 0 });\\n    SoloMarginContract.Wei memory structbalance = dydxContract.getAccountWei(account, marketId);\\n\\n    return structbalance.value;\\n  }\\n\\n  /**\\n   * @dev Returns the borrow balance of a ETH/ERC20_Token.\\n   * @param _asset: token address to query the balance.\\n   */\\n  function getDepositBalance(address _asset) external view override returns (uint256) {\\n    SoloMarginContract dydxContract = SoloMarginContract(getDydxAddress());\\n    uint256 marketId = _getMarketId(dydxContract, _asset);\\n\\n    SoloMarginContract.Info memory account =\\n      SoloMarginContract.Info({ owner: msg.sender, number: 0 });\\n    SoloMarginContract.Wei memory structbalance = dydxContract.getAccountWei(account, marketId);\\n\\n    return structbalance.value;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Providers/ProviderCompound.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.25 <0.7.5;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { UniERC20 } from \\\"../Libraries/LibUniERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IProvider } from \\\"./IProvider.sol\\\";\\n\\ninterface IGenCToken is IERC20 {\\n  function redeem(uint256) external returns (uint256);\\n\\n  function redeemUnderlying(uint256) external returns (uint256);\\n\\n  function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n  function exchangeRateCurrent() external returns (uint256);\\n\\n  function exchangeRateStored() external view returns (uint256);\\n\\n  function borrowRatePerBlock() external view returns (uint256);\\n\\n  function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n  function getAccountSnapshot(address account)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function totalBorrowsCurrent() external returns (uint256);\\n\\n  function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n  function borrowBalanceStored(address account) external view returns (uint256);\\n\\n  function getCash() external view returns (uint256);\\n}\\n\\ninterface ICErc20 is IGenCToken {\\n  function mint(uint256) external returns (uint256);\\n\\n  function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\\n}\\n\\ninterface ICEth is IGenCToken {\\n  function mint() external payable;\\n\\n  function repayBorrow() external payable;\\n\\n  function repayBorrowBehalf(address borrower) external payable;\\n}\\n\\ninterface IComptroller {\\n  function markets(address) external returns (bool, uint256);\\n\\n  function enterMarkets(address[] calldata) external returns (uint256[] memory);\\n\\n  function exitMarket(address cTokenAddress) external returns (uint256);\\n\\n  function getAccountLiquidity(address)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n}\\n\\ninterface IFujiMappings {\\n  function addressMapping(address) external view returns (address);\\n}\\n\\ncontract HelperFunct {\\n  function _isETH(address token) internal pure returns (bool) {\\n    return (token == address(0) || token == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE));\\n  }\\n\\n  function _getMappingAddr() internal pure returns (address) {\\n    return 0x6b09443595BFb8F91eA837c7CB4Fe1255782093b;\\n  }\\n\\n  function _getComptrollerAddress() internal pure returns (address) {\\n    return 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\\n  }\\n\\n  //Compound functions\\n\\n  /**\\n   * @dev Approves vault's assets as collateral for Compound Protocol.\\n   * @param _cTokenAddress: asset type to be approved as collateral.\\n   */\\n  function _enterCollatMarket(address _cTokenAddress) internal {\\n    // Create a reference to the corresponding network Comptroller\\n    IComptroller comptroller = IComptroller(_getComptrollerAddress());\\n\\n    address[] memory cTokenMarkets = new address[](1);\\n    cTokenMarkets[0] = _cTokenAddress;\\n    comptroller.enterMarkets(cTokenMarkets);\\n  }\\n\\n  /**\\n   * @dev Removes vault's assets as collateral for Compound Protocol.\\n   * @param _cTokenAddress: asset type to be removed as collateral.\\n   */\\n  function _exitCollatMarket(address _cTokenAddress) internal {\\n    // Create a reference to the corresponding network Comptroller\\n    IComptroller comptroller = IComptroller(_getComptrollerAddress());\\n\\n    comptroller.exitMarket(_cTokenAddress);\\n  }\\n}\\n\\ncontract ProviderCompound is IProvider, HelperFunct {\\n  using SafeMath for uint256;\\n  using UniERC20 for IERC20;\\n\\n  //Provider Core Functions\\n\\n  /**\\n   * @dev Deposit ETH/ERC20_Token.\\n   * @param _asset: token address to deposit. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n   * @param _amount: token amount to deposit.\\n   */\\n  function deposit(address _asset, uint256 _amount) external payable override {\\n    //Get cToken address from mapping\\n    address cTokenAddr = IFujiMappings(_getMappingAddr()).addressMapping(_asset);\\n\\n    //Enter and/or ensure collateral market is enacted\\n    _enterCollatMarket(cTokenAddr);\\n\\n    if (_isETH(_asset)) {\\n      // Create a reference to the cToken contract\\n      ICEth cToken = ICEth(cTokenAddr);\\n\\n      //Compound protocol Mints cTokens, ETH method\\n      cToken.mint{ value: _amount }();\\n    } else {\\n      // Create reference to the ERC20 contract\\n      IERC20 erc20token = IERC20(_asset);\\n\\n      // Create a reference to the cToken contract\\n      ICErc20 cToken = ICErc20(cTokenAddr);\\n\\n      //Checks, Vault balance of ERC20 to make deposit\\n      require(erc20token.balanceOf(address(this)) >= _amount, \\\"Not enough Balance\\\");\\n\\n      //Approve to move ERC20tokens\\n      erc20token.uniApprove(address(cTokenAddr), _amount);\\n\\n      // Compound Protocol mints cTokens, trhow error if not\\n      require(cToken.mint(_amount) == 0, \\\"Deposit-failed\\\");\\n    }\\n  }\\n\\n  /**\\n   * @dev Withdraw ETH/ERC20_Token.\\n   * @param _asset: token address to withdraw. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n   * @param _amount: token amount to withdraw.\\n   */\\n  function withdraw(address _asset, uint256 _amount) external payable override {\\n    //Get cToken address from mapping\\n    address cTokenAddr = IFujiMappings(_getMappingAddr()).addressMapping(_asset);\\n\\n    // Create a reference to the corresponding cToken contract\\n    IGenCToken cToken = IGenCToken(cTokenAddr);\\n\\n    //Compound Protocol Redeem Process, throw errow if not.\\n    require(cToken.redeemUnderlying(_amount) == 0, \\\"Withdraw-failed\\\");\\n  }\\n\\n  /**\\n   * @dev Borrow ETH/ERC20_Token.\\n   * @param _asset token address to borrow.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n   * @param _amount: token amount to borrow.\\n   */\\n  function borrow(address _asset, uint256 _amount) external payable override {\\n    //Get cToken address from mapping\\n    address cTokenAddr = IFujiMappings(_getMappingAddr()).addressMapping(_asset);\\n\\n    // Create a reference to the corresponding cToken contract\\n    IGenCToken cToken = IGenCToken(cTokenAddr);\\n\\n    //Enter and/or ensure collateral market is enacted\\n    //_enterCollatMarket(cTokenAddr);\\n\\n    //Compound Protocol Borrow Process, throw errow if not.\\n    require(cToken.borrow(_amount) == 0, \\\"borrow-failed\\\");\\n  }\\n\\n  /**\\n   * @dev Payback borrowed ETH/ERC20_Token.\\n   * @param _asset token address to payback.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n   * @param _amount: token amount to payback.\\n   */\\n  function payback(address _asset, uint256 _amount) external payable override {\\n    //Get cToken address from mapping\\n    address cTokenAddr = IFujiMappings(_getMappingAddr()).addressMapping(_asset);\\n\\n    if (_isETH(_asset)) {\\n      // Create a reference to the corresponding cToken contract\\n      ICEth cToken = ICEth(cTokenAddr);\\n\\n      cToken.repayBorrow{ value: msg.value }();\\n    } else {\\n      // Create reference to the ERC20 contract\\n      IERC20 erc20token = IERC20(_asset);\\n\\n      // Create a reference to the corresponding cToken contract\\n      ICErc20 cToken = ICErc20(cTokenAddr);\\n\\n      // Check there is enough balance to pay\\n      require(erc20token.balanceOf(address(this)) >= _amount, \\\"Not-enough-token\\\");\\n      erc20token.uniApprove(address(cTokenAddr), _amount);\\n      cToken.repayBorrow(_amount);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the current borrowing rate (APR) of a ETH/ERC20_Token, in ray(1e27).\\n   * @param _asset: token address to query the current borrowing rate.\\n   */\\n  function getBorrowRateFor(address _asset) external view override returns (uint256) {\\n    address cTokenAddr = IFujiMappings(_getMappingAddr()).addressMapping(_asset);\\n\\n    //Block Rate transformed for common mantissa for Fuji in ray (1e27), Note: Compound uses base 1e18\\n    uint256 bRateperBlock = (IGenCToken(cTokenAddr).borrowRatePerBlock()).mul(10**9);\\n\\n    // The approximate number of blocks per year that is assumed by the Compound interest rate model\\n    uint256 blocksperYear = 2102400;\\n    return bRateperBlock.mul(blocksperYear);\\n  }\\n\\n  /**\\n   * @dev Returns the borrow balance of a ETH/ERC20_Token.\\n   * @param _asset: token address to query the balance.\\n   */\\n  function getBorrowBalance(address _asset) external view override returns (uint256) {\\n    address cTokenAddr = IFujiMappings(_getMappingAddr()).addressMapping(_asset);\\n\\n    return IGenCToken(cTokenAddr).borrowBalanceStored(msg.sender);\\n  }\\n\\n  /**\\n   * @dev Return borrow balance of ETH/ERC20_Token.\\n   * This function is the accurate way to get Compound borrow balance.\\n   * It costs ~84K gas and is not a view function.\\n   * @param _asset token address to query the balance.\\n   * @param _who address of the account.\\n   */\\n  function getBorrowBalanceOf(address _asset, address _who) external override returns (uint256) {\\n    address cTokenAddr = IFujiMappings(_getMappingAddr()).addressMapping(_asset);\\n\\n    return IGenCToken(cTokenAddr).borrowBalanceCurrent(_who);\\n  }\\n\\n  /**\\n   * @dev Returns the deposit balance of a ETH/ERC20_Token.\\n   * @param _asset: token address to query the balance.\\n   */\\n  function getDepositBalance(address _asset) external view override returns (uint256) {\\n    address cTokenAddr = IFujiMappings(_getMappingAddr()).addressMapping(_asset);\\n    uint256 cTokenBal = IGenCToken(cTokenAddr).balanceOf(msg.sender);\\n    uint256 exRate = IGenCToken(cTokenAddr).exchangeRateStored();\\n\\n    return exRate.mul(cTokenBal).div(1e18);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Providers/ProviderAave.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.25 <0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { UniERC20 } from \\\"../Libraries/LibUniERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IProvider } from \\\"./IProvider.sol\\\";\\n\\ninterface ITokenInterface {\\n  function approve(address, uint256) external;\\n\\n  function transfer(address, uint256) external;\\n\\n  function transferFrom(\\n    address,\\n    address,\\n    uint256\\n  ) external;\\n\\n  function deposit() external payable;\\n\\n  function withdraw(uint256) external;\\n\\n  function balanceOf(address) external view returns (uint256);\\n\\n  function decimals() external view returns (uint256);\\n}\\n\\ninterface IAaveInterface {\\n  function deposit(\\n    address _asset,\\n    uint256 _amount,\\n    address _onBehalfOf,\\n    uint16 _referralCode\\n  ) external;\\n\\n  function withdraw(\\n    address _asset,\\n    uint256 _amount,\\n    address _to\\n  ) external;\\n\\n  function borrow(\\n    address _asset,\\n    uint256 _amount,\\n    uint256 _interestRateMode,\\n    uint16 _referralCode,\\n    address _onBehalfOf\\n  ) external;\\n\\n  function repay(\\n    address _asset,\\n    uint256 _amount,\\n    uint256 _rateMode,\\n    address _onBehalfOf\\n  ) external;\\n\\n  function setUserUseReserveAsCollateral(address _asset, bool _useAsCollateral) external;\\n}\\n\\ninterface AaveLendingPoolProviderInterface {\\n  function getLendingPool() external view returns (address);\\n}\\n\\ninterface AaveDataProviderInterface {\\n  function getReserveTokensAddresses(address _asset)\\n    external\\n    view\\n    returns (\\n      address aTokenAddress,\\n      address stableDebtTokenAddress,\\n      address variableDebtTokenAddress\\n    );\\n\\n  function getUserReserveData(address _asset, address _user)\\n    external\\n    view\\n    returns (\\n      uint256 currentATokenBalance,\\n      uint256 currentStableDebt,\\n      uint256 currentVariableDebt,\\n      uint256 principalStableDebt,\\n      uint256 scaledVariableDebt,\\n      uint256 stableBorrowRate,\\n      uint256 liquidityRate,\\n      uint40 stableRateLastUpdated,\\n      bool usageAsCollateralEnabled\\n    );\\n\\n  function getReserveData(address _asset)\\n    external\\n    view\\n    returns (\\n      uint256 availableLiquidity,\\n      uint256 totalStableDebt,\\n      uint256 totalVariableDebt,\\n      uint256 liquidityRate,\\n      uint256 variableBorrowRate,\\n      uint256 stableBorrowRate,\\n      uint256 averageStableBorrowRate,\\n      uint256 liquidityIndex,\\n      uint256 variableBorrowIndex,\\n      uint40 lastUpdateTimestamp\\n    );\\n}\\n\\ninterface AaveAddressProviderRegistryInterface {\\n  function getAddressesProvidersList() external view returns (address[] memory);\\n}\\n\\ncontract ProviderAave is IProvider {\\n  using SafeMath for uint256;\\n  using UniERC20 for IERC20;\\n\\n  function _getAaveProvider() internal pure returns (AaveLendingPoolProviderInterface) {\\n    return AaveLendingPoolProviderInterface(0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5); //mainnet\\n  }\\n\\n  function _getAaveDataProvider() internal pure returns (AaveDataProviderInterface) {\\n    return AaveDataProviderInterface(0x057835Ad21a177dbdd3090bB1CAE03EaCF78Fc6d); //mainnet\\n  }\\n\\n  function _getWethAddr() internal pure returns (address) {\\n    return 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // Mainnet WETH Address\\n  }\\n\\n  function _getEthAddr() internal pure returns (address) {\\n    return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH Address\\n  }\\n\\n  function _getIsColl(\\n    AaveDataProviderInterface _aaveData,\\n    address _token,\\n    address _user\\n  ) internal view returns (bool isCol) {\\n    (, , , , , , , , isCol) = _aaveData.getUserReserveData(_token, _user);\\n  }\\n\\n  function _convertEthToWeth(\\n    bool _isEth,\\n    ITokenInterface _token,\\n    uint256 _amount\\n  ) internal {\\n    if (_isEth) _token.deposit{ value: _amount }();\\n  }\\n\\n  function _convertWethToEth(\\n    bool _isEth,\\n    ITokenInterface _token,\\n    uint256 _amount\\n  ) internal {\\n    if (_isEth) {\\n      _token.approve(address(_token), _amount);\\n      _token.withdraw(_amount);\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the borrowing rate of ETH/ERC20_Token.\\n   * @param _asset to query the borrowing rate.\\n   */\\n  function getBorrowRateFor(address _asset) external view override returns (uint256) {\\n    AaveDataProviderInterface aaveData = _getAaveDataProvider();\\n\\n    (, , , , uint256 variableBorrowRate, , , , , ) =\\n      AaveDataProviderInterface(aaveData).getReserveData(\\n        _asset == _getEthAddr() ? _getWethAddr() : _asset\\n      );\\n\\n    return variableBorrowRate;\\n  }\\n\\n  /**\\n   * @dev Return borrow balance of ETH/ERC20_Token.\\n   * @param _asset token address to query the balance.\\n   */\\n  function getBorrowBalance(address _asset) external view override returns (uint256) {\\n    AaveDataProviderInterface aaveData = _getAaveDataProvider();\\n\\n    bool isEth = _asset == _getEthAddr();\\n    address _token = isEth ? _getWethAddr() : _asset;\\n\\n    (, , uint256 variableDebt, , , , , , ) = aaveData.getUserReserveData(_token, msg.sender);\\n\\n    return variableDebt;\\n  }\\n\\n  /**\\n   * @dev Return borrow balance of ETH/ERC20_Token.\\n   * @param _asset token address to query the balance.\\n   * @param _who address of the account.\\n   */\\n  function getBorrowBalanceOf(address _asset, address _who) external override returns (uint256) {\\n    AaveDataProviderInterface aaveData = _getAaveDataProvider();\\n\\n    bool isEth = _asset == _getEthAddr();\\n    address _token = isEth ? _getWethAddr() : _asset;\\n\\n    (, , uint256 variableDebt, , , , , , ) = aaveData.getUserReserveData(_token, _who);\\n\\n    return variableDebt;\\n  }\\n\\n  /**\\n   * @dev Return deposit balance of ETH/ERC20_Token.\\n   * @param _asset token address to query the balance.\\n   */\\n  function getDepositBalance(address _asset) external view override returns (uint256) {\\n    AaveDataProviderInterface aaveData = _getAaveDataProvider();\\n\\n    bool isEth = _asset == _getEthAddr();\\n    address _token = isEth ? _getWethAddr() : _asset;\\n\\n    (uint256 atokenBal, , , , , , , , ) = aaveData.getUserReserveData(_token, msg.sender);\\n\\n    return atokenBal;\\n  }\\n\\n  /**\\n   * @dev Deposit ETH/ERC20_Token.\\n   * @param _asset token address to deposit.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n   * @param _amount token amount to deposit.\\n   */\\n  function deposit(address _asset, uint256 _amount) external payable override {\\n    IAaveInterface aave = IAaveInterface(_getAaveProvider().getLendingPool());\\n    AaveDataProviderInterface aaveData = _getAaveDataProvider();\\n\\n    bool isEth = _asset == _getEthAddr();\\n    address _token = isEth ? _getWethAddr() : _asset;\\n\\n    ITokenInterface tokenContract = ITokenInterface(_token);\\n\\n    if (isEth) {\\n      _amount = _amount == uint256(-1) ? address(this).balance : _amount;\\n      _convertEthToWeth(isEth, tokenContract, _amount);\\n    } else {\\n      _amount = _amount == uint256(-1) ? tokenContract.balanceOf(address(this)) : _amount;\\n    }\\n\\n    tokenContract.approve(address(aave), _amount);\\n\\n    aave.deposit(_token, _amount, address(this), 0);\\n\\n    if (!_getIsColl(aaveData, _token, address(this))) {\\n      aave.setUserUseReserveAsCollateral(_token, true);\\n    }\\n  }\\n\\n  /**\\n   * @dev Borrow ETH/ERC20_Token.\\n   * @param _asset token address to borrow.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n   * @param _amount token amount to borrow.\\n   */\\n  function borrow(address _asset, uint256 _amount) external payable override {\\n    IAaveInterface aave = IAaveInterface(_getAaveProvider().getLendingPool());\\n\\n    bool isEth = _asset == _getEthAddr();\\n    address _token = isEth ? _getWethAddr() : _asset;\\n\\n    aave.borrow(_token, _amount, 2, 0, address(this));\\n    _convertWethToEth(isEth, ITokenInterface(_token), _amount);\\n  }\\n\\n  /**\\n   * @dev Withdraw ETH/ERC20_Token.\\n   * @param _asset token address to withdraw.\\n   * @param _amount token amount to withdraw.\\n   */\\n  function withdraw(address _asset, uint256 _amount) external payable override {\\n    IAaveInterface aave = IAaveInterface(_getAaveProvider().getLendingPool());\\n\\n    bool isEth = _asset == _getEthAddr();\\n    address _token = isEth ? _getWethAddr() : _asset;\\n\\n    ITokenInterface tokenContract = ITokenInterface(_token);\\n    uint256 initialBal = tokenContract.balanceOf(address(this));\\n\\n    aave.withdraw(_token, _amount, address(this));\\n    uint256 finalBal = tokenContract.balanceOf(address(this));\\n    _amount = finalBal.sub(initialBal);\\n\\n    _convertWethToEth(isEth, tokenContract, _amount);\\n  }\\n\\n  /**\\n   * @dev Payback borrowed ETH/ERC20_Token.\\n   * @param _asset token address to payback.\\n   * @param _amount token amount to payback.\\n   */\\n\\n  function payback(address _asset, uint256 _amount) external payable override {\\n    IAaveInterface aave = IAaveInterface(_getAaveProvider().getLendingPool());\\n    AaveDataProviderInterface aaveData = _getAaveDataProvider();\\n\\n    bool isEth = _asset == _getEthAddr();\\n    address _token = isEth ? _getWethAddr() : _asset;\\n\\n    ITokenInterface tokenContract = ITokenInterface(_token);\\n\\n    (, , uint256 variableDebt, , , , , , ) = aaveData.getUserReserveData(_token, address(this));\\n    _amount = _amount == uint256(-1) ? variableDebt : _amount;\\n\\n    if (isEth) _convertEthToWeth(isEth, tokenContract, _amount);\\n\\n    tokenContract.approve(address(aave), _amount);\\n\\n    aave.repay(_token, _amount, 2, address(this));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Libraries/MathUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { WadRayMath } from \\\"./WadRayMath.sol\\\";\\n\\nlibrary MathUtils {\\n  using SafeMath for uint256;\\n  using WadRayMath for uint256;\\n\\n  /// @dev Ignoring leap years\\n  uint256 internal constant _SECONDS_PER_YEAR = 365 days;\\n\\n  /**\\n   * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n   * @param rate The interest rate, in ray\\n   * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n   * @return The interest rate linearly accumulated during the timeDelta, in ray\\n   **/\\n\\n  function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    //solhint-disable-next-line\\n    uint256 timeDifference = block.timestamp.sub(uint256(lastUpdateTimestamp));\\n\\n    return (rate.mul(timeDifference) / _SECONDS_PER_YEAR).add(WadRayMath.ray());\\n  }\\n\\n  /**\\n   * @dev Function to calculate the interest using a compounded interest rate formula\\n   * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n   *\\n   *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n   *\\n   * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great gas cost reductions\\n   * The whitepaper contains reference to the approximation and a table showing the margin of error per different time periods\\n   *\\n   * @param rate The interest rate, in ray\\n   * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n   * @return The interest rate compounded during the timeDelta, in ray\\n   **/\\n  function calculateCompoundedInterest(\\n    uint256 rate,\\n    uint40 lastUpdateTimestamp,\\n    uint256 currentTimestamp\\n  ) internal pure returns (uint256) {\\n    //solhint-disable-next-line\\n    uint256 exp = currentTimestamp.sub(uint256(lastUpdateTimestamp));\\n\\n    if (exp == 0) {\\n      return WadRayMath.ray();\\n    }\\n\\n    uint256 expMinusOne = exp - 1;\\n\\n    uint256 expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n    uint256 ratePerSecond = rate / _SECONDS_PER_YEAR;\\n\\n    uint256 basePowerTwo = ratePerSecond.rayMul(ratePerSecond);\\n    uint256 basePowerThree = basePowerTwo.rayMul(ratePerSecond);\\n\\n    uint256 secondTerm = exp.mul(expMinusOne).mul(basePowerTwo) / 2;\\n    uint256 thirdTerm = exp.mul(expMinusOne).mul(expMinusTwo).mul(basePowerThree) / 6;\\n\\n    return WadRayMath.ray().add(ratePerSecond.mul(exp)).add(secondTerm).add(thirdTerm);\\n  }\\n\\n  /**\\n   * @dev Calculates the compounded interest between the timestamp of the last update and the current block timestamp\\n   * @param rate The interest rate (in ray)\\n   * @param lastUpdateTimestamp The timestamp from which the interest accumulation needs to be calculated\\n   **/\\n  function calculateCompoundedInterest(uint256 rate, uint40 lastUpdateTimestamp)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    //solhint-disable-next-line\\n    return calculateCompoundedInterest(rate, lastUpdateTimestamp, block.timestamp);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Libraries/WadRayMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\nimport { Errors } from \\\"./Errors.sol\\\";\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n  uint256 internal constant _WAD = 1e18;\\n  uint256 internal constant _HALF_WAD = _WAD / 2;\\n\\n  uint256 internal constant _RAY = 1e27;\\n  uint256 internal constant _HALF_RAY = _RAY / 2;\\n\\n  uint256 internal constant _WAD_RAY_RATIO = 1e9;\\n\\n  /**\\n   * @return One ray, 1e27\\n   **/\\n  function ray() internal pure returns (uint256) {\\n    return _RAY;\\n  }\\n\\n  /**\\n   * @return One wad, 1e18\\n   **/\\n\\n  function wad() internal pure returns (uint256) {\\n    return _WAD;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e27/2\\n   **/\\n  function halfRay() internal pure returns (uint256) {\\n    return _HALF_RAY;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e18/2\\n   **/\\n  function halfWad() internal pure returns (uint256) {\\n    return _HALF_WAD;\\n  }\\n\\n  /**\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a*b, in wad\\n   **/\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    require(a <= (type(uint256).max - _HALF_WAD) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * b + _HALF_WAD) / _WAD;\\n  }\\n\\n  /**\\n   * @dev Divides two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a/b, in wad\\n   **/\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfB = b / 2;\\n\\n    require(a <= (type(uint256).max - halfB) / _WAD, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * _WAD + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Multiplies two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a*b, in ray\\n   **/\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    require(a <= (type(uint256).max - _HALF_RAY) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * b + _HALF_RAY) / _RAY;\\n  }\\n\\n  /**\\n   * @dev Divides two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a/b, in ray\\n   **/\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfB = b / 2;\\n\\n    require(a <= (type(uint256).max - halfB) / _RAY, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * _RAY + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Casts ray down to wad\\n   * @param a Ray\\n   * @return a casted to wad, rounded half up to the nearest wad\\n   **/\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\n    uint256 halfRatio = _WAD_RAY_RATIO / 2;\\n    uint256 result = halfRatio + a;\\n    require(result >= halfRatio, Errors.MATH_ADDITION_OVERFLOW);\\n\\n    return result / _WAD_RAY_RATIO;\\n  }\\n\\n  /**\\n   * @dev Converts wad up to ray\\n   * @param a Wad\\n   * @return a converted in ray\\n   **/\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\n    uint256 result = a * _WAD_RAY_RATIO;\\n    require(result / _WAD_RAY_RATIO == a, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n    return result;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/FujiERC1155/FujiERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport { IFujiERC1155 } from \\\"./IFujiERC1155.sol\\\";\\nimport { FujiBaseERC1155 } from \\\"./FujiBaseERC1155.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { WadRayMath } from \\\"../Libraries/WadRayMath.sol\\\";\\nimport { MathUtils } from \\\"../Libraries/MathUtils.sol\\\";\\nimport { Errors } from \\\"../Libraries/Errors.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ncontract F1155Manager is Ownable {\\n  using Address for address;\\n\\n  // Controls for Mint-Burn Operations\\n  mapping(address => bool) public addrPermit;\\n\\n  modifier onlyPermit() {\\n    require(addrPermit[_msgSender()] || msg.sender == owner(), Errors.VL_NOT_AUTHORIZED);\\n    _;\\n  }\\n\\n  function setPermit(address _address, bool _permit) public onlyOwner {\\n    require((_address).isContract(), Errors.VL_NOT_A_CONTRACT);\\n    addrPermit[_address] = _permit;\\n  }\\n}\\n\\ncontract FujiERC1155 is IFujiERC1155, FujiBaseERC1155, F1155Manager {\\n  using WadRayMath for uint256;\\n\\n  //FujiERC1155 Asset ID Mapping\\n\\n  //AssetType => asset reference address => ERC1155 Asset ID\\n  mapping(AssetType => mapping(address => uint256)) public assetIDs;\\n\\n  //Control mapping that returns the AssetType of an AssetID\\n  mapping(uint256 => AssetType) public assetIDtype;\\n\\n  uint64 public override qtyOfManagedAssets;\\n\\n  //Asset ID  Liquidity Index mapping\\n  //AssetId => Liquidity index for asset ID\\n  mapping(uint256 => uint256) public indexes;\\n\\n  // Optimizer Fee expressed in Ray, where 1 ray = 100% APR\\n  //uint256 public optimizerFee;\\n  //uint256 public lastUpdateTimestamp;\\n  //uint256 public fujiIndex;\\n\\n  /// @dev Ignoring leap years\\n  //uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n  constructor() public {\\n    //fujiIndex = WadRayMath.ray();\\n    //optimizerFee = 1e24;\\n  }\\n\\n  /**\\n   * @dev Updates Index of AssetID\\n   * @param _assetID: ERC1155 ID of the asset which state will be updated.\\n   * @param newBalance: Amount\\n   **/\\n  function updateState(uint256 _assetID, uint256 newBalance) external override onlyPermit {\\n    uint256 total = totalSupply(_assetID);\\n\\n    if (newBalance > 0 && total > 0 && newBalance > total) {\\n      uint256 diff = newBalance.sub(total);\\n\\n      uint256 amountToIndexRatio = (diff.wadToRay()).rayDiv(total.wadToRay());\\n\\n      uint256 result = amountToIndexRatio.add(WadRayMath.ray());\\n\\n      result = result.rayMul(indexes[_assetID]);\\n      require(result <= type(uint128).max, Errors.VL_INDEX_OVERFLOW);\\n\\n      indexes[_assetID] = uint128(result);\\n\\n      // TODO: calculate interest rate for a fujiOptimizer Fee.\\n      /*\\n      if(lastUpdateTimestamp==0){\\n        lastUpdateTimestamp = block.timestamp;\\n      }\\n\\n      uint256 accrued = _calculateCompoundedInterest(\\n        optimizerFee,\\n        lastUpdateTimestamp,\\n        block.timestamp\\n      ).rayMul(fujiIndex);\\n\\n      fujiIndex = accrued;\\n      lastUpdateTimestamp = block.timestamp;\\n      */\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the total supply of Asset_ID with accrued interest.\\n   * @param _assetID: ERC1155 ID of the asset which state will be updated.\\n   **/\\n  function totalSupply(uint256 _assetID) public view virtual override returns (uint256) {\\n    // TODO: include interest accrued by Fuji OptimizerFee\\n\\n    return super.totalSupply(_assetID).rayMul(indexes[_assetID]);\\n  }\\n\\n  /**\\n   * @dev Returns the scaled total supply of the token ID. Represents sum(token ID Principal /index)\\n   * @param _assetID: ERC1155 ID of the asset which state will be updated.\\n   **/\\n  function scaledTotalSupply(uint256 _assetID) public view virtual returns (uint256) {\\n    return super.totalSupply(_assetID);\\n  }\\n\\n  /**\\n   * @dev Returns the principal + accrued interest balance of the user\\n   * @param _account: address of the User\\n   * @param _assetID: ERC1155 ID of the asset which state will be updated.\\n   **/\\n  function balanceOf(address _account, uint256 _assetID)\\n    public\\n    view\\n    override(FujiBaseERC1155, IFujiERC1155)\\n    returns (uint256)\\n  {\\n    uint256 scaledBalance = super.balanceOf(_account, _assetID);\\n\\n    if (scaledBalance == 0) {\\n      return 0;\\n    }\\n\\n    // TODO: include interest accrued by Fuji OptimizerFee\\n    return scaledBalance.rayMul(indexes[_assetID]);\\n  }\\n\\n  /**\\n   * @dev Returns the balance of User, split into owed amounts to BaseProtocol and FujiProtocol\\n   * @param _account: address of the User\\n   * @param _assetID: ERC1155 ID of the asset which state will be updated.\\n   **/\\n  /*\\n  function splitBalanceOf(\\n    address _account,\\n    uint256 _assetID\\n  ) public view override returns (uint256,uint256) {\\n    uint256 scaledBalance = super.balanceOf(_account, _assetID);\\n    if (scaledBalance == 0) {\\n      return (0,0);\\n    } else {\\n    TO DO COMPUTATION\\n      return (baseprotocol, fuji);\\n    }\\n  }\\n  */\\n\\n  /**\\n   * @dev Returns Scaled Balance of the user (e.g. balance/index)\\n   * @param _account: address of the User\\n   * @param _assetID: ERC1155 ID of the asset which state will be updated.\\n   **/\\n  function scaledBalanceOf(address _account, uint256 _assetID)\\n    public\\n    view\\n    virtual\\n    returns (uint256)\\n  {\\n    return super.balanceOf(_account, _assetID);\\n  }\\n\\n  /**\\n   * @dev Returns the sum of balance of the user for an AssetType.\\n   * This function is used for when AssetType have units of account of the same value (e.g stablecoins)\\n   * @param _account: address of the User\\n   * @param _type: enum AssetType, 0 = Collateral asset, 1 = debt asset\\n   **/\\n  /*\\n  function balanceOfBatchType(address _account, AssetType _type) external view override returns (uint256 total) {\\n\\n    uint256[] memory IDs = engagedIDsOf(_account, _type);\\n\\n    for(uint i; i < IDs.length; i++ ){\\n      total = total.add(balanceOf(_account, IDs[i]));\\n    }\\n  }\\n  */\\n\\n  /**\\n   * @dev Mints tokens for Collateral and Debt receipts for the Fuji Protocol\\n   * Emits a {TransferSingle} event.\\n   * Requirements:\\n   * - `_account` cannot be the zero address.\\n   * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n   * acceptance magic value.\\n   * - `_amount` should be in WAD\\n   */\\n  function mint(\\n    address _account,\\n    uint256 _id,\\n    uint256 _amount,\\n    bytes memory _data\\n  ) external override onlyPermit {\\n    require(_account != address(0), Errors.VL_ZERO_ADDR_1155);\\n\\n    address operator = _msgSender();\\n\\n    uint256 accountBalance = _balances[_id][_account];\\n    uint256 assetTotalBalance = _totalSupply[_id];\\n    uint256 amountScaled = _amount.rayDiv(indexes[_id]);\\n\\n    require(amountScaled != 0, Errors.VL_INVALID_MINT_AMOUNT);\\n\\n    _balances[_id][_account] = accountBalance.add(amountScaled);\\n    _totalSupply[_id] = assetTotalBalance.add(amountScaled);\\n\\n    emit TransferSingle(operator, address(0), _account, _id, _amount);\\n\\n    _doSafeTransferAcceptanceCheck(operator, address(0), _account, _id, _amount, _data);\\n  }\\n\\n  /**\\n   * @dev [Batched] version of {mint}.\\n   * Requirements:\\n   * - `_ids` and `_amounts` must have the same length.\\n   * - If `_to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n   * acceptance magic value.\\n   */\\n  function mintBatch(\\n    address _to,\\n    uint256[] memory _ids,\\n    uint256[] memory _amounts,\\n    bytes memory _data\\n  ) external onlyPermit {\\n    require(_to != address(0), Errors.VL_ZERO_ADDR_1155);\\n    require(_ids.length == _amounts.length, Errors.VL_INPUT_ERROR);\\n\\n    address operator = _msgSender();\\n\\n    uint256 accountBalance;\\n    uint256 assetTotalBalance;\\n    uint256 amountScaled;\\n\\n    for (uint256 i = 0; i < _ids.length; i++) {\\n      accountBalance = _balances[_ids[i]][_to];\\n      assetTotalBalance = _totalSupply[_ids[i]];\\n\\n      amountScaled = _amounts[i].rayDiv(indexes[_ids[i]]);\\n\\n      require(amountScaled != 0, Errors.VL_INVALID_MINT_AMOUNT);\\n\\n      _balances[_ids[i]][_to] = accountBalance.add(amountScaled);\\n      _totalSupply[_ids[i]] = assetTotalBalance.add(amountScaled);\\n    }\\n\\n    emit TransferBatch(operator, address(0), _to, _ids, _amounts);\\n\\n    _doSafeBatchTransferAcceptanceCheck(operator, address(0), _to, _ids, _amounts, _data);\\n  }\\n\\n  /**\\n   * @dev Destroys `_amount` receipt tokens of token type `_id` from `account` for the Fuji Protocol\\n   * Requirements:\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `_amount` tokens of token type `_id`.\\n   * - `_amount` should be in WAD\\n   */\\n  function burn(\\n    address _account,\\n    uint256 _id,\\n    uint256 _amount\\n  ) external override onlyPermit {\\n    require(_account != address(0), Errors.VL_ZERO_ADDR_1155);\\n\\n    address operator = _msgSender();\\n\\n    uint256 accountBalance = _balances[_id][_account];\\n    uint256 assetTotalBalance = _totalSupply[_id];\\n\\n    uint256 amountScaled = _amount.rayDiv(indexes[_id]);\\n\\n    require(amountScaled != 0 && accountBalance >= amountScaled, Errors.VL_INVALID_BURN_AMOUNT);\\n\\n    _balances[_id][_account] = accountBalance.sub(amountScaled);\\n    _totalSupply[_id] = assetTotalBalance.sub(amountScaled);\\n\\n    emit TransferSingle(operator, _account, address(0), _id, _amount);\\n  }\\n\\n  /**\\n   * @dev [Batched] version of {burn}.\\n   * Requirements:\\n   * - `_ids` and `_amounts` must have the same length.\\n   */\\n  function burnBatch(\\n    address _account,\\n    uint256[] memory _ids,\\n    uint256[] memory _amounts\\n  ) external onlyPermit {\\n    require(_account != address(0), Errors.VL_ZERO_ADDR_1155);\\n    require(_ids.length == _amounts.length, Errors.VL_INPUT_ERROR);\\n\\n    address operator = _msgSender();\\n\\n    uint256 accountBalance;\\n    uint256 assetTotalBalance;\\n    uint256 amountScaled;\\n\\n    for (uint256 i = 0; i < _ids.length; i++) {\\n      uint256 amount = _amounts[i];\\n\\n      accountBalance = _balances[_ids[i]][_account];\\n      assetTotalBalance = _totalSupply[_ids[i]];\\n\\n      amountScaled = _amounts[i].rayDiv(indexes[_ids[i]]);\\n\\n      require(amountScaled != 0 && accountBalance >= amountScaled, Errors.VL_INVALID_BURN_AMOUNT);\\n\\n      _balances[_ids[i]][_account] = accountBalance.sub(amount);\\n      _totalSupply[_ids[i]] = assetTotalBalance.sub(amount);\\n    }\\n\\n    emit TransferBatch(operator, _account, address(0), _ids, _amounts);\\n  }\\n\\n  //Getter Functions\\n\\n  /**\\n   * @dev Getter Function for the Asset ID locally managed\\n   * @param _type: enum AssetType, 0 = Collateral asset, 1 = debt asset\\n   * @param _addr: Reference Address of the Asset\\n   */\\n  function getAssetID(AssetType _type, address _addr) external view override returns (uint256 id) {\\n    id = assetIDs[_type][_addr];\\n    require(id <= qtyOfManagedAssets, Errors.VL_INVALID_ASSETID_1155);\\n  }\\n\\n  //Setter Functions\\n\\n  /**\\n   * @dev Sets the FujiProtocol Fee to be charged\\n   * @param _fee; Fee in Ray(1e27) to charge users for optimizerFee (1 ray = 100% APR)\\n   */\\n  /*\\n  function setoptimizerFee(uint256 _fee) public onlyOwner {\\n    require(_fee >= WadRayMath.ray(), Errors.VL_OPTIMIZER_FEE_SMALL);\\n    optimizerFee = _fee;\\n  }\\n  */\\n\\n  /**\\n   * @dev Sets a new URI for all token types, by relying on the token type ID\\n   */\\n  function setURI(string memory _newUri) public onlyOwner {\\n    _uri = _newUri;\\n  }\\n\\n  /**\\n   * @dev Adds and initializes liquidity index of a new asset in FujiERC1155\\n   * @param _type: enum AssetType, 0 = Collateral asset, 1 = debt asset\\n   * @param _addr: Reference Address of the Asset\\n   */\\n  function addInitializeAsset(AssetType _type, address _addr)\\n    external\\n    override\\n    onlyPermit\\n    returns (uint64)\\n  {\\n    require(assetIDs[_type][_addr] == 0, Errors.VL_ASSET_EXISTS);\\n\\n    assetIDs[_type][_addr] = qtyOfManagedAssets;\\n    assetIDtype[qtyOfManagedAssets] = _type;\\n\\n    //Initialize the liquidity Index\\n    indexes[qtyOfManagedAssets] = WadRayMath.ray();\\n    qtyOfManagedAssets++;\\n\\n    return qtyOfManagedAssets - 1;\\n  }\\n  /**\\n   * @dev Function to calculate the interest using a compounded interest rate formula\\n   * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n   *\\n   *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n   *\\n   * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great gas cost reductions\\n   * The whitepaper contains reference to the approximation and a table showing the margin of error per different time periods\\n   *\\n   * @param _rate The interest rate, in ray\\n   * @param _lastUpdateTimestamp The timestamp of the last update of the interest\\n   * @return The interest rate compounded during the timeDelta, in ray\\n   **/\\n  /*\\n  function _calculateCompoundedInterest(\\n    uint256 _rate,\\n    uint256 _lastUpdateTimestamp,\\n    uint256 currentTimestamp\\n  ) internal pure returns (uint256) {\\n    //solium-disable-next-line\\n    uint256 exp = currentTimestamp.sub(uint256(_lastUpdateTimestamp));\\n\\n    if (exp == 0) {\\n      return WadRayMath.ray();\\n    }\\n\\n    uint256 expMinusOne = exp - 1;\\n\\n    uint256 expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n    uint256 ratePerSecond = _rate / SECONDS_PER_YEAR;\\n\\n    uint256 basePowerTwo = ratePerSecond.rayMul(ratePerSecond);\\n    uint256 basePowerThree = basePowerTwo.rayMul(ratePerSecond);\\n\\n    uint256 secondTerm = exp.mul(expMinusOne).mul(basePowerTwo) / 2;\\n    uint256 thirdTerm = exp.mul(expMinusOne).mul(expMinusTwo).mul(basePowerThree) / 6;\\n\\n    return WadRayMath.ray().add(ratePerSecond.mul(exp)).add(secondTerm).add(thirdTerm);\\n  }\\n  */\\n}\\n\"\r\n    },\r\n    \"contracts/FujiERC1155/FujiBaseERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport { IERC1155 } from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport { IERC1155Receiver } from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport { IERC1155MetadataURI } from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol\\\";\\nimport { ERC165 } from \\\"@openzeppelin/contracts/introspection/ERC165.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/introspection/IERC165.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { Errors } from \\\"../Libraries/Errors.sol\\\";\\n\\n/**\\n *\\n * @dev Implementation of the Base ERC1155 multi-token standard functions\\n * for Fuji Protocol control of User collaterals and borrow debt positions.\\n * Originally based on Openzeppelin\\n *\\n */\\n\\ncontract FujiBaseERC1155 is IERC1155, ERC165, Context {\\n  using Address for address;\\n\\n  using SafeMath for uint256;\\n\\n  // Mapping from token ID to account balances\\n  mapping(uint256 => mapping(address => uint256)) internal _balances;\\n\\n  // Mapping from account to operator approvals\\n  mapping(address => mapping(address => bool)) internal _operatorApprovals;\\n\\n  // Mapping from token ID to totalSupply\\n  mapping(uint256 => uint256) internal _totalSupply;\\n\\n  //Fuji ERC1155 Transfer Control\\n  bool public transfersActive;\\n\\n  modifier isTransferActive() {\\n    require(transfersActive, Errors.VL_NOT_AUTHORIZED);\\n    _;\\n  }\\n\\n  //URI for all token types by relying on ID substitution\\n  //https://token.fujiDao.org/{id}.json\\n  string internal _uri;\\n\\n  /**\\n   * @return The total supply of a token id\\n   **/\\n  function totalSupply(uint256 id) public view virtual returns (uint256) {\\n    return _totalSupply[id];\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    override(ERC165, IERC165)\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IERC1155).interfaceId ||\\n      interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155MetadataURI-uri}.\\n   * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n   * actual token type ID.\\n   */\\n  function uri(uint256) public view virtual returns (string memory) {\\n    return _uri;\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-balanceOf}.\\n   * Requirements:\\n   * - `account` cannot be the zero address.\\n   */\\n  function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n    require(account != address(0), Errors.VL_ZERO_ADDR_1155);\\n    return _balances[id][account];\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-balanceOfBatch}.\\n   * Requirements:\\n   * - `accounts` and `ids` must have the same length.\\n   */\\n  function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n    public\\n    view\\n    override\\n    returns (uint256[] memory)\\n  {\\n    require(accounts.length == ids.length, Errors.VL_INPUT_ERROR);\\n\\n    uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n    for (uint256 i = 0; i < accounts.length; ++i) {\\n      batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n    }\\n\\n    return batchBalances;\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-setApprovalForAll}.\\n   */\\n  function setApprovalForAll(address operator, bool approved) public virtual override {\\n    require(_msgSender() != operator, Errors.VL_INPUT_ERROR);\\n\\n    _operatorApprovals[_msgSender()][operator] = approved;\\n    emit ApprovalForAll(_msgSender(), operator, approved);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-isApprovedForAll}.\\n   */\\n  function isApprovedForAll(address account, address operator)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return _operatorApprovals[account][operator];\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) public virtual override isTransferActive {\\n    require(to != address(0), Errors.VL_ZERO_ADDR_1155);\\n    require(\\n      from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n      Errors.VL_MISSING_ERC1155_APPROVAL\\n    );\\n\\n    address operator = _msgSender();\\n\\n    _beforeTokenTransfer(\\n      operator,\\n      from,\\n      to,\\n      _asSingletonArray(id),\\n      _asSingletonArray(amount),\\n      data\\n    );\\n\\n    uint256 fromBalance = _balances[id][from];\\n    require(fromBalance >= amount, Errors.VL_NO_ERC1155_BALANCE);\\n\\n    _balances[id][from] = fromBalance.sub(amount);\\n    _balances[id][to] = uint256(_balances[id][to]).add(amount);\\n\\n    emit TransferSingle(operator, from, to, id, amount);\\n\\n    _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-safeBatchTransferFrom}.\\n   */\\n  function safeBatchTransferFrom(\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) public virtual override isTransferActive {\\n    require(ids.length == amounts.length, Errors.VL_INPUT_ERROR);\\n    require(to != address(0), Errors.VL_ZERO_ADDR_1155);\\n    require(\\n      from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n      Errors.VL_MISSING_ERC1155_APPROVAL\\n    );\\n\\n    address operator = _msgSender();\\n\\n    _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n    for (uint256 i = 0; i < ids.length; ++i) {\\n      uint256 id = ids[i];\\n      uint256 amount = amounts[i];\\n\\n      uint256 fromBalance = _balances[id][from];\\n      require(fromBalance >= amount, Errors.VL_NO_ERC1155_BALANCE);\\n      _balances[id][from] = fromBalance.sub(amount);\\n      _balances[id][to] = uint256(_balances[id][to]).add(amount);\\n    }\\n\\n    emit TransferBatch(operator, from, to, ids, amounts);\\n\\n    _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n  }\\n\\n  function _doSafeTransferAcceptanceCheck(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) internal {\\n    if (to.isContract()) {\\n      try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (\\n        bytes4 response\\n      ) {\\n        if (response != IERC1155Receiver(to).onERC1155Received.selector) {\\n          revert(Errors.VL_RECEIVER_REJECT_1155);\\n        }\\n      } catch Error(string memory reason) {\\n        revert(reason);\\n      } catch {\\n        revert(Errors.VL_RECEIVER_CONTRACT_NON_1155);\\n      }\\n    }\\n  }\\n\\n  function _doSafeBatchTransferAcceptanceCheck(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal {\\n    if (to.isContract()) {\\n      try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n        bytes4 response\\n      ) {\\n        if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\\n          revert(Errors.VL_RECEIVER_REJECT_1155);\\n        }\\n      } catch Error(string memory reason) {\\n        revert(reason);\\n      } catch {\\n        revert(Errors.VL_RECEIVER_CONTRACT_NON_1155);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any token transfer. This includes minting\\n   * and burning, as well as batched variants.\\n   *\\n   * The same hook is called on both single and batched variants. For single\\n   * transfers, the length of the `id` and `amount` arrays will be 1.\\n   *\\n   * Calling conditions (for each `id` and `amount` pair):\\n   *\\n   * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * of token type `id` will be  transferred to `to`.\\n   * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n   * for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n   * will be burned.\\n   * - `from` and `to` are never both zero.\\n   * - `ids` and `amounts` have the same, non-zero length.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal virtual {}\\n\\n  function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n    uint256[] memory array = new uint256[](1);\\n    array[0] = element;\\n\\n    return array;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Fliquidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport { IVault } from \\\"./Vaults/IVault.sol\\\";\\nimport { IFujiAdmin } from \\\"./IFujiAdmin.sol\\\";\\nimport { IFujiERC1155 } from \\\"./FujiERC1155/IFujiERC1155.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Flasher } from \\\"./Flashloans/Flasher.sol\\\";\\nimport { FlashLoan } from \\\"./Flashloans/LibFlashLoan.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Errors } from \\\"./Libraries/Errors.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { UniERC20 } from \\\"./Libraries/LibUniERC20.sol\\\";\\nimport {\\n  IUniswapV2Router02\\n} from \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ninterface IVaultExt is IVault {\\n  //Asset Struct\\n  struct VaultAssets {\\n    address collateralAsset;\\n    address borrowAsset;\\n    uint64 collateralID;\\n    uint64 borrowID;\\n  }\\n\\n  function vAssets() external view returns (VaultAssets memory);\\n}\\n\\ncontract Fliquidator is Ownable, ReentrancyGuard {\\n  using SafeMath for uint256;\\n  using UniERC20 for IERC20;\\n\\n  struct Factor {\\n    uint64 a;\\n    uint64 b;\\n  }\\n\\n  // Flash Close Fee Factor\\n  Factor public flashCloseF;\\n\\n  IFujiAdmin private _fujiAdmin;\\n  IUniswapV2Router02 public swapper;\\n\\n  // Log Liquidation\\n  event Liquidate(\\n    address indexed userAddr,\\n    address liquidator,\\n    address indexed asset,\\n    uint256 amount\\n  );\\n  // Log FlashClose\\n  event FlashClose(address indexed userAddr, address indexed asset, uint256 amount);\\n  // Log Liquidation\\n  event FlashLiquidate(address userAddr, address liquidator, address indexed asset, uint256 amount);\\n\\n  modifier isAuthorized() {\\n    require(msg.sender == owner(), Errors.VL_NOT_AUTHORIZED);\\n    _;\\n  }\\n\\n  modifier onlyFlash() {\\n    require(msg.sender == _fujiAdmin.getFlasher(), Errors.VL_NOT_AUTHORIZED);\\n    _;\\n  }\\n\\n  constructor() public {\\n    // 1.013\\n    flashCloseF.a = 1013;\\n    flashCloseF.b = 1000;\\n  }\\n\\n  receive() external payable {}\\n\\n  // FLiquidator Core Functions\\n\\n  /**\\n   * @dev Liquidate an undercollaterized debt and get bonus (bonusL in Vault)\\n   * @param _userAddr: Address of user whose position is liquidatable\\n   * @param _vault: Address of the vault in where liquidation will occur\\n   */\\n  function liquidate(address _userAddr, address _vault) external {\\n    // Update Balances at FujiERC1155\\n    IVault(_vault).updateF1155Balances();\\n\\n    // Create Instance of FujiERC1155\\n    IFujiERC1155 f1155 = IFujiERC1155(IVault(_vault).fujiERC1155());\\n\\n    // Struct Instance to get Vault Asset IDs in f1155\\n    IVaultExt.VaultAssets memory vAssets = IVaultExt(_vault).vAssets();\\n\\n    // Get user Collateral and Debt Balances\\n    uint256 userCollateral = f1155.balanceOf(_userAddr, vAssets.collateralID);\\n    uint256 userDebtBalance = f1155.balanceOf(_userAddr, vAssets.borrowID);\\n\\n    // Compute Amount of Minimum Collateral Required including factors\\n    uint256 neededCollateral = IVault(_vault).getNeededCollateralFor(userDebtBalance, true);\\n\\n    // Check if User is liquidatable\\n    require(userCollateral < neededCollateral, Errors.VL_USER_NOT_LIQUIDATABLE);\\n\\n    // Check Liquidator Allowance\\n    require(\\n      IERC20(vAssets.borrowAsset).allowance(msg.sender, address(this)) >= userDebtBalance,\\n      Errors.VL_MISSING_ERC20_ALLOWANCE\\n    );\\n\\n    // Transfer borrowAsset funds from the Liquidator to Here\\n    IERC20(vAssets.borrowAsset).transferFrom(msg.sender, address(this), userDebtBalance);\\n\\n    // Transfer Amount to Vault\\n    IERC20(vAssets.borrowAsset).transfer(_vault, userDebtBalance);\\n\\n    // TODO: Get => corresponding amount of BaseProtocol Debt and FujiDebt\\n\\n    // Repay BaseProtocol debt\\n    IVault(_vault).payback(int256(userDebtBalance));\\n\\n    //TODO: Transfer corresponding Debt Amount to Fuji Treasury\\n\\n    // Burn Debt f1155 tokens\\n    f1155.burn(_userAddr, vAssets.borrowID, userDebtBalance);\\n\\n    // Compute the Liquidator Bonus bonusL\\n    uint256 bonus = IVault(_vault).getLiquidationBonusFor(userDebtBalance, false);\\n    // Compute how much collateral needs to be swapt\\n    uint256 collateralInPlay =\\n      _getCollateralInPlay(vAssets.borrowAsset, userDebtBalance.add(bonus));\\n\\n    // Burn Collateral f1155 tokens\\n    f1155.burn(_userAddr, vAssets.collateralID, collateralInPlay);\\n\\n    // Withdraw collateral\\n    IVault(_vault).withdraw(int256(collateralInPlay));\\n\\n    // Swap Collateral\\n    _swap(vAssets.borrowAsset, userDebtBalance.add(bonus), collateralInPlay);\\n\\n    // Transfer to Liquidator the debtBalance + bonus\\n    IERC20(vAssets.borrowAsset).uniTransfer(msg.sender, userDebtBalance.add(bonus));\\n\\n    emit Liquidate(_userAddr, msg.sender, vAssets.borrowAsset, userDebtBalance);\\n  }\\n\\n  /**\\n   * @dev Initiates a flashloan used to repay partially or fully the debt position of msg.sender\\n   * @param _amount: Pass -1 to fully close debt position, otherwise Amount to be repaid with a flashloan\\n   * @param _vault: The vault address where the debt position exist.\\n   * @param _flashnum: integer identifier of flashloan provider\\n   */\\n  function flashClose(\\n    int256 _amount,\\n    address _vault,\\n    uint8 _flashnum\\n  ) external nonReentrant {\\n    Flasher flasher = Flasher(payable(_fujiAdmin.getFlasher()));\\n\\n    // Update Balances at FujiERC1155\\n    IVault(_vault).updateF1155Balances();\\n\\n    // Create Instance of FujiERC1155\\n    IFujiERC1155 f1155 = IFujiERC1155(IVault(_vault).fujiERC1155());\\n\\n    // Struct Instance to get Vault Asset IDs in f1155\\n    IVaultExt.VaultAssets memory vAssets = IVaultExt(_vault).vAssets();\\n\\n    // Get user  Balances\\n    uint256 userCollateral = f1155.balanceOf(msg.sender, vAssets.collateralID);\\n    uint256 userDebtBalance = f1155.balanceOf(msg.sender, vAssets.borrowID);\\n\\n    // Check Debt is > zero\\n    require(userDebtBalance > 0, Errors.VL_NO_DEBT_TO_PAYBACK);\\n\\n    uint256 amount = _amount < 0 ? userDebtBalance : uint256(_amount);\\n\\n    uint256 neededCollateral = IVault(_vault).getNeededCollateralFor(amount, false);\\n    require(userCollateral >= neededCollateral, Errors.VL_UNDERCOLLATERIZED_ERROR);\\n\\n    FlashLoan.Info memory info =\\n      FlashLoan.Info({\\n        callType: FlashLoan.CallType.Close,\\n        asset: vAssets.borrowAsset,\\n        amount: amount,\\n        vault: _vault,\\n        newProvider: address(0),\\n        user: msg.sender,\\n        userliquidator: address(0),\\n        fliquidator: address(this)\\n      });\\n\\n    flasher.initiateFlashloan(info, _flashnum);\\n  }\\n\\n  /**\\n   * @dev Close user's debt position by using a flashloan\\n   * @param _userAddr: user addr to be liquidated\\n   * @param _vault: Vault address\\n   * @param _amount: amount received by Flashloan\\n   * @param _flashloanFee: amount extra charged by flashloan provider\\n   * Emits a {FlashClose} event.\\n   */\\n  function executeFlashClose(\\n    address payable _userAddr,\\n    address _vault,\\n    uint256 _amount,\\n    uint256 _flashloanFee\\n  ) external onlyFlash {\\n    // Create Instance of FujiERC1155\\n    IFujiERC1155 f1155 = IFujiERC1155(IVault(_vault).fujiERC1155());\\n\\n    // Struct Instance to get Vault Asset IDs in f1155\\n    IVaultExt.VaultAssets memory vAssets = IVaultExt(_vault).vAssets();\\n\\n    // Get user Collateral and Debt Balances\\n    uint256 userCollateral = f1155.balanceOf(_userAddr, vAssets.collateralID);\\n    uint256 userDebtBalance = f1155.balanceOf(_userAddr, vAssets.borrowID);\\n\\n    // Get user Collateral + Flash Close Fee to close posisition, for _amount passed\\n    uint256 userCollateralInPlay =\\n      IVault(_vault)\\n        .getNeededCollateralFor(_amount.add(_flashloanFee), false)\\n        .mul(flashCloseF.a)\\n        .div(flashCloseF.b);\\n\\n    // TODO: Get => corresponding amount of BaseProtocol Debt and FujiDebt\\n\\n    // Repay BaseProtocol debt\\n    IVault(_vault).payback(int256(_amount));\\n\\n    //TODO: Transfer corresponding Debt Amount to Fuji Treasury\\n\\n    // Full close\\n    if (_amount == userDebtBalance) {\\n      f1155.burn(_userAddr, vAssets.collateralID, userCollateral);\\n\\n      // Withdraw Full collateral\\n      IVault(_vault).withdraw(int256(userCollateral));\\n\\n      // Send unUsed Collateral to User\\n      _userAddr.transfer(userCollateral.sub(userCollateralInPlay));\\n    } else {\\n      f1155.burn(_userAddr, vAssets.collateralID, userCollateralInPlay);\\n\\n      // Withdraw Collateral in play Only\\n      IVault(_vault).withdraw(int256(userCollateralInPlay));\\n    }\\n\\n    // Swap Collateral for underlying to repay Flashloan\\n    uint256 remaining =\\n      _swap(vAssets.borrowAsset, _amount.add(_flashloanFee), userCollateralInPlay);\\n\\n    // Send FlashClose Fee to FujiTreasury\\n    IERC20(vAssets.collateralAsset).uniTransfer(_fujiAdmin.getTreasury(), remaining);\\n\\n    // Send flasher the underlying to repay Flashloan\\n    IERC20(vAssets.borrowAsset).uniTransfer(\\n      payable(_fujiAdmin.getFlasher()),\\n      _amount.add(_flashloanFee)\\n    );\\n\\n    // Burn Debt f1155 tokens\\n    f1155.burn(_userAddr, vAssets.borrowID, _amount);\\n\\n    emit FlashClose(_userAddr, vAssets.borrowAsset, userDebtBalance);\\n  }\\n\\n  /**\\n   * @dev Initiates a flashloan to liquidate an undercollaterized debt position,\\n   * gets bonus (bonusFlashL in Vault)\\n   * @param _userAddr: Address of user whose position is liquidatable\\n   * @param _vault: The vault address where the debt position exist.\\n   * @param _flashnum: integer identifier of flashloan provider\\n   */\\n  function flashLiquidate(\\n    address _userAddr,\\n    address _vault,\\n    uint8 _flashnum\\n  ) external nonReentrant {\\n    // Update Balances at FujiERC1155\\n    IVault(_vault).updateF1155Balances();\\n\\n    // Create Instance of FujiERC1155\\n    IFujiERC1155 f1155 = IFujiERC1155(IVault(_vault).fujiERC1155());\\n\\n    // Struct Instance to get Vault Asset IDs in f1155\\n    IVaultExt.VaultAssets memory vAssets = IVaultExt(_vault).vAssets();\\n\\n    // Get user Collateral and Debt Balances\\n    uint256 userCollateral = f1155.balanceOf(_userAddr, vAssets.collateralID);\\n    uint256 userDebtBalance = f1155.balanceOf(_userAddr, vAssets.borrowID);\\n\\n    // Compute Amount of Minimum Collateral Required including factors\\n    uint256 neededCollateral = IVault(_vault).getNeededCollateralFor(userDebtBalance, true);\\n\\n    // Check if User is liquidatable\\n    require(userCollateral < neededCollateral, Errors.VL_USER_NOT_LIQUIDATABLE);\\n\\n    Flasher flasher = Flasher(payable(_fujiAdmin.getFlasher()));\\n\\n    FlashLoan.Info memory info =\\n      FlashLoan.Info({\\n        callType: FlashLoan.CallType.Liquidate,\\n        asset: vAssets.borrowAsset,\\n        amount: userDebtBalance,\\n        vault: _vault,\\n        newProvider: address(0),\\n        user: _userAddr,\\n        userliquidator: msg.sender,\\n        fliquidator: address(this)\\n      });\\n\\n    flasher.initiateFlashloan(info, _flashnum);\\n  }\\n\\n  /**\\n   * @dev Liquidate a debt position by using a flashloan\\n   * @param _userAddr: user addr to be liquidated\\n   * @param _liquidatorAddr: liquidator address\\n   * @param _vault: Vault address\\n   * @param _amount: amount of debt to be repaid\\n   * @param _flashloanFee: amount extra charged by flashloan provider\\n   * Emits a {FlashLiquidate} event.\\n   */\\n  function executeFlashLiquidation(\\n    address _userAddr,\\n    address _liquidatorAddr,\\n    address _vault,\\n    uint256 _amount,\\n    uint256 _flashloanFee\\n  ) external onlyFlash {\\n    // Create Instance of FujiERC1155\\n    IFujiERC1155 f1155 = IFujiERC1155(IVault(_vault).fujiERC1155());\\n\\n    // Struct Instance to get Vault Asset IDs in f1155\\n    IVaultExt.VaultAssets memory vAssets = IVaultExt(_vault).vAssets();\\n\\n    // Get user Collateral and Debt Balances\\n    uint256 userCollateral = f1155.balanceOf(_userAddr, vAssets.collateralID);\\n    uint256 userDebtBalance = f1155.balanceOf(_userAddr, vAssets.borrowID);\\n\\n    // TODO: Get => corresponding amount of BaseProtocol Debt and FujiDebt\\n\\n    //TODO: Transfer corresponding Debt Amount to Fuji Treasury\\n\\n    // Repay BaseProtocol debt to release collateral\\n    IVault(_vault).payback(int256(_amount));\\n\\n    // Compute the Liquidator Bonus bonusFlashL\\n    uint256 bonus = IVault(_vault).getLiquidationBonusFor(userDebtBalance, true);\\n\\n    // Compute how much collateral needs to be swapt\\n    uint256 collateralInPlay =\\n      _getCollateralInPlay(vAssets.borrowAsset, userDebtBalance.add(_flashloanFee).add(bonus));\\n\\n    // Burn Collateral f1155 tokens\\n    f1155.burn(_userAddr, vAssets.collateralID, collateralInPlay);\\n\\n    // Withdraw collateral\\n    IVault(_vault).withdraw(int256(userCollateral));\\n\\n    _swap(vAssets.borrowAsset, _amount.add(_flashloanFee).add(bonus), collateralInPlay);\\n\\n    // Send flasher the underlying to repay Flashloan\\n    IERC20(vAssets.borrowAsset).uniTransfer(\\n      payable(_fujiAdmin.getFlasher()),\\n      _amount.add(_flashloanFee)\\n    );\\n\\n    // Transfer Bonus bonusFlashL to liquidator\\n    IERC20(vAssets.borrowAsset).uniTransfer(payable(_liquidatorAddr), bonus);\\n\\n    // Burn Debt f1155 tokens\\n    f1155.burn(_userAddr, vAssets.borrowID, userDebtBalance);\\n\\n    emit FlashLiquidate(_userAddr, _liquidatorAddr, vAssets.borrowAsset, userDebtBalance);\\n  }\\n\\n  /**\\n   * @dev Swap an amount of underlying\\n   * @param _borrowAsset: Address of vault borrowAsset\\n   * @param _amountToReceive: amount of underlying to receive\\n   * @param _collateralAmount: collateral Amount sent for swap\\n   */\\n  function _swap(\\n    address _borrowAsset,\\n    uint256 _amountToReceive,\\n    uint256 _collateralAmount\\n  ) internal returns (uint256) {\\n    // Swap Collateral Asset to Borrow Asset\\n    address[] memory path = new address[](2);\\n    path[0] = swapper.WETH();\\n    path[1] = _borrowAsset;\\n    uint256[] memory swapperAmounts =\\n      swapper.swapETHForExactTokens{ value: _collateralAmount }(\\n        _amountToReceive,\\n        path,\\n        address(this),\\n        // solhint-disable-next-line\\n        block.timestamp\\n      );\\n\\n    return _collateralAmount.sub(swapperAmounts[0]);\\n  }\\n\\n  /**\\n   * @dev Get exact amount of collateral to be swapt\\n   * @param _borrowAsset: Address of vault borrowAsset\\n   * @param _amountToReceive: amount of underlying to receive\\n   */\\n  function _getCollateralInPlay(address _borrowAsset, uint256 _amountToReceive)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    address[] memory path = new address[](2);\\n    path[0] = swapper.WETH();\\n    path[1] = _borrowAsset;\\n    uint256[] memory amounts = swapper.getAmountsIn(_amountToReceive, path);\\n\\n    return amounts[0];\\n  }\\n\\n  // Administrative functions\\n\\n  /**\\n   * @dev Set Factors \\\"a\\\" and \\\"b\\\" for a Struct Factor flashcloseF\\n   * For flashCloseF;  should be > 1, a/b\\n   * @param _newFactorA: A number\\n   * @param _newFactorB: A number\\n   */\\n  function setFlashCloseFee(uint64 _newFactorA, uint64 _newFactorB) external isAuthorized {\\n    flashCloseF.a = _newFactorA;\\n    flashCloseF.b = _newFactorB;\\n  }\\n\\n  /**\\n   * @dev Sets the fujiAdmin Address\\n   * @param _newFujiAdmin: FujiAdmin Contract Address\\n   */\\n  function setFujiAdmin(address _newFujiAdmin) external isAuthorized {\\n    _fujiAdmin = IFujiAdmin(_newFujiAdmin);\\n  }\\n\\n  /**\\n   * @dev Changes the Swapper contract address\\n   * @param _newSwapper: address of new swapper contract\\n   */\\n  function setSwapper(address _newSwapper) external isAuthorized {\\n    swapper = IUniswapV2Router02(_newSwapper);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Flashloans/Flasher.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { UniERC20 } from \\\"../Libraries/LibUniERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IFujiAdmin } from \\\"../IFujiAdmin.sol\\\";\\nimport { Errors } from \\\"../Libraries/Errors.sol\\\";\\n\\nimport { ILendingPool, IFlashLoanReceiver } from \\\"./AaveFlashLoans.sol\\\";\\nimport { Actions, Account, DyDxFlashloanBase, ICallee, ISoloMargin } from \\\"./DyDxFlashLoans.sol\\\";\\nimport { ICTokenFlashloan, ICFlashloanReceiver } from \\\"./CreamFlashLoans.sol\\\";\\nimport { FlashLoan } from \\\"./LibFlashLoan.sol\\\";\\nimport { IVault } from \\\"../Vaults/IVault.sol\\\";\\n\\ninterface IFliquidator {\\n  function executeFlashClose(\\n    address _userAddr,\\n    address _vault,\\n    uint256 _amount,\\n    uint256 _flashloanfee\\n  ) external;\\n\\n  function executeFlashLiquidation(\\n    address _userAddr,\\n    address _liquidatorAddr,\\n    address _vault,\\n    uint256 _debtAmount,\\n    uint256 _flashloanfee\\n  ) external;\\n}\\n\\ninterface IFujiMappings {\\n  function addressMapping(address) external view returns (address);\\n}\\n\\ncontract Flasher is DyDxFlashloanBase, IFlashLoanReceiver, ICFlashloanReceiver, ICallee, Ownable {\\n  using SafeMath for uint256;\\n  using UniERC20 for IERC20;\\n\\n  IFujiAdmin private _fujiAdmin;\\n\\n  address private immutable _aaveLendingPool = 0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9;\\n  address private immutable _dydxSoloMargin = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\\n  IFujiMappings private immutable _crMappings =\\n    IFujiMappings(0x03BD587Fe413D59A20F32Fc75f31bDE1dD1CD6c9);\\n\\n  receive() external payable {}\\n\\n  modifier isAuthorized() {\\n    require(\\n      msg.sender == _fujiAdmin.getController() ||\\n        msg.sender == _fujiAdmin.getFliquidator() ||\\n        msg.sender == owner(),\\n      Errors.VL_NOT_AUTHORIZED\\n    );\\n    _;\\n  }\\n\\n  modifier isAuthorizedExternal() {\\n    require(\\n      msg.sender == _dydxSoloMargin || msg.sender == _aaveLendingPool,\\n      Errors.VL_NOT_AUTHORIZED\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @dev Sets the fujiAdmin Address\\n   * @param _newFujiAdmin: FujiAdmin Contract Address\\n   */\\n  function setFujiAdmin(address _newFujiAdmin) public onlyOwner {\\n    _fujiAdmin = IFujiAdmin(_newFujiAdmin);\\n  }\\n\\n  /**\\n   * @dev Routing Function for Flashloan Provider\\n   * @param info: struct information for flashLoan\\n   * @param _flashnum: integer identifier of flashloan provider\\n   */\\n  function initiateFlashloan(FlashLoan.Info memory info, uint8 _flashnum) public isAuthorized {\\n    if (_flashnum == 0) {\\n      _initiateAaveFlashLoan(info);\\n    } else if (_flashnum == 1) {\\n      _initiateDyDxFlashLoan(info);\\n    } else if (_flashnum == 2) {\\n      _initiateCreamFlashLoan(info);\\n    }\\n  }\\n\\n  // ===================== DyDx FlashLoan ===================================\\n\\n  /**\\n   * @dev Initiates a DyDx flashloan.\\n   * @param info: data to be passed between functions executing flashloan logic\\n   */\\n  function _initiateDyDxFlashLoan(FlashLoan.Info memory info) internal {\\n    ISoloMargin solo = ISoloMargin(_dydxSoloMargin);\\n\\n    // Get marketId from token address\\n    uint256 marketId = _getMarketIdFromTokenAddress(solo, info.asset);\\n\\n    // 1. Withdraw $\\n    // 2. Call callFunction(...)\\n    // 3. Deposit back $\\n    Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\\n\\n    operations[0] = _getWithdrawAction(marketId, info.amount);\\n    // Encode FlashLoan.Info for callFunction\\n    operations[1] = _getCallAction(abi.encode(info));\\n    // add fee of 2 wei\\n    operations[2] = _getDepositAction(marketId, info.amount.add(2));\\n\\n    Account.Info[] memory accountInfos = new Account.Info[](1);\\n    accountInfos[0] = _getAccountInfo(address(this));\\n\\n    solo.operate(accountInfos, operations);\\n  }\\n\\n  /**\\n   * @dev Executes DyDx Flashloan, this operation is required\\n   * and called by Solo when sending loaned amount\\n   * @param sender: Not used\\n   * @param account: Not used\\n   */\\n  function callFunction(\\n    address sender,\\n    Account.Info memory account,\\n    bytes memory data\\n  ) external override isAuthorizedExternal {\\n    sender;\\n    account;\\n\\n    FlashLoan.Info memory info = abi.decode(data, (FlashLoan.Info));\\n\\n    //Estimate flashloan payback + premium fee of 2 wei,\\n    uint256 amountOwing = info.amount.add(2);\\n\\n    // Transfer to Vault the flashloan Amount\\n    IERC20(info.asset).uniTransfer(payable(info.vault), info.amount);\\n\\n    if (info.callType == FlashLoan.CallType.Switch) {\\n      IVault(info.vault).executeSwitch(info.newProvider, info.amount, 2);\\n    } else if (info.callType == FlashLoan.CallType.Close) {\\n      IFliquidator(info.fliquidator).executeFlashClose(info.user, info.vault, info.amount, 2);\\n    } else {\\n      IFliquidator(info.fliquidator).executeFlashLiquidation(\\n        info.user,\\n        info.userliquidator,\\n        info.vault,\\n        info.amount,\\n        2\\n      );\\n    }\\n\\n    //Approve DYDXSolo to spend to repay flashloan\\n    IERC20(info.asset).approve(_dydxSoloMargin, amountOwing);\\n  }\\n\\n  // ===================== Aave FlashLoan ===================================\\n\\n  /**\\n   * @dev Initiates an Aave flashloan.\\n   * @param info: data to be passed between functions executing flashloan logic\\n   */\\n  function _initiateAaveFlashLoan(FlashLoan.Info memory info) internal {\\n    //Initialize Instance of Aave Lending Pool\\n    ILendingPool aaveLp = ILendingPool(_aaveLendingPool);\\n\\n    //Passing arguments to construct Aave flashloan -limited to 1 asset type for now.\\n    address receiverAddress = address(this);\\n    address[] memory assets = new address[](1);\\n    assets[0] = address(info.asset);\\n    uint256[] memory amounts = new uint256[](1);\\n    amounts[0] = info.amount;\\n\\n    // 0 = no debt, 1 = stable, 2 = variable\\n    uint256[] memory modes = new uint256[](1);\\n    modes[0] = 0;\\n\\n    address onBehalfOf = address(this);\\n    bytes memory params = abi.encode(info);\\n    uint16 referralCode = 0;\\n\\n    //Aave Flashloan initiated.\\n    aaveLp.flashLoan(receiverAddress, assets, amounts, modes, onBehalfOf, params, referralCode);\\n  }\\n\\n  /**\\n   * @dev Executes Aave Flashloan, this operation is required\\n   * and called by Aaveflashloan when sending loaned amount\\n   */\\n  function executeOperation(\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata premiums,\\n    address initiator,\\n    bytes calldata params\\n  ) external override isAuthorizedExternal returns (bool) {\\n    initiator;\\n\\n    FlashLoan.Info memory info = abi.decode(params, (FlashLoan.Info));\\n\\n    //Estimate flashloan payback + premium fee,\\n    uint256 amountOwing = amounts[0].add(premiums[0]);\\n\\n    // Transfer to the vault ERC20\\n    IERC20(assets[0]).uniTransfer(payable(info.vault), amounts[0]);\\n\\n    if (info.callType == FlashLoan.CallType.Switch) {\\n      IVault(info.vault).executeSwitch(info.newProvider, amounts[0], premiums[0]);\\n    } else if (info.callType == FlashLoan.CallType.Close) {\\n      IFliquidator(info.fliquidator).executeFlashClose(\\n        info.user,\\n        info.vault,\\n        amounts[0],\\n        premiums[0]\\n      );\\n    } else {\\n      IFliquidator(info.fliquidator).executeFlashLiquidation(\\n        info.user,\\n        info.userliquidator,\\n        info.vault,\\n        amounts[0],\\n        premiums[0]\\n      );\\n    }\\n\\n    //Approve aaveLP to spend to repay flashloan\\n    IERC20(assets[0]).uniApprove(payable(_aaveLendingPool), amountOwing);\\n\\n    return true;\\n  }\\n\\n  // ===================== CreamFinance FlashLoan ===================================\\n\\n  /**\\n   * @dev Initiates an CreamFinance flashloan.\\n   * @param info: data to be passed between functions executing flashloan logic\\n   */\\n  function _initiateCreamFlashLoan(FlashLoan.Info memory info) internal {\\n    // Get crToken Address for Flashloan Call\\n    address crToken = _crMappings.addressMapping(info.asset);\\n\\n    // Prepara data for flashloan execution\\n    bytes memory params = abi.encode(info);\\n\\n    // Initialize Instance of Cream crLendingContract\\n    ICTokenFlashloan(crToken).flashLoan(address(this), info.amount, params);\\n  }\\n\\n  /**\\n   * @dev Executes CreamFinance Flashloan, this operation is required\\n   * and called by CreamFinanceflashloan when sending loaned amount\\n   */\\n  function executeOperation(\\n    address sender,\\n    address underlying,\\n    uint256 amount,\\n    uint256 fee,\\n    bytes calldata params\\n  ) external override {\\n    // Check Msg. Sender is crToken Lending Contract\\n    address crToken = _crMappings.addressMapping(underlying);\\n\\n    require(msg.sender == crToken && address(this) == sender, Errors.VL_NOT_AUTHORIZED);\\n    require(IERC20(underlying).balanceOf(address(this)) >= amount, Errors.VL_FLASHLOAN_FAILED);\\n\\n    FlashLoan.Info memory info = abi.decode(params, (FlashLoan.Info));\\n\\n    // Estimate flashloan payback + premium fee,\\n    uint256 amountOwing = amount.add(fee);\\n\\n    // Transfer to the vault ERC20\\n    IERC20(underlying).uniTransfer(payable(info.vault), amount);\\n\\n    // Do task according to CallType\\n    if (info.callType == FlashLoan.CallType.Switch) {\\n      IVault(info.vault).executeSwitch(info.newProvider, amount, fee);\\n    } else if (info.callType == FlashLoan.CallType.Close) {\\n      IFliquidator(info.fliquidator).executeFlashClose(info.user, info.vault, amount, fee);\\n    } else {\\n      IFliquidator(info.fliquidator).executeFlashLiquidation(\\n        info.user,\\n        info.userliquidator,\\n        info.vault,\\n        amount,\\n        fee\\n      );\\n    }\\n\\n    // Transfer flashloan + fee back to crToken Lending Contract\\n    IERC20(underlying).uniTransfer(payable(crToken), amountOwing);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Flashloans/LibFlashLoan.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.25 <0.7.5;\\n\\nlibrary FlashLoan {\\n  /**\\n   * @dev Used to determine which vault's function to call post-flashloan:\\n   * - Switch for executeSwitch(...)\\n   * - Close for executeFlashClose(...)\\n   * - Liquidate for executeFlashLiquidation(...)\\n   */\\n  enum CallType { Switch, Close, Liquidate }\\n\\n  /**\\n   * @dev Struct of params to be passed between functions executing flashloan logic\\n   * @param asset: Address of asset to be borrowed with flashloan\\n   * @param amount: Amount of asset to be borrowed with flashloan\\n   * @param vault: Vault's address on which the flashloan logic to be executed\\n   * @param newProvider: New provider's address. Used when callType is Switch\\n   * @param user: User's address. Used when callType is Close or Liquidate\\n   * @param userliquidator: The user's address who is  performing liquidation. Used when callType is Liquidate\\n   * @param fliquidator: Fujis Liquidator's address.\\n   */\\n  struct Info {\\n    CallType callType;\\n    address asset;\\n    uint256 amount;\\n    address vault;\\n    address newProvider;\\n    address user;\\n    address userliquidator;\\n    address fliquidator;\\n  }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Flashloans/AaveFlashLoans.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.25 <0.7.5;\\n\\ninterface IFlashLoanReceiver {\\n  function executeOperation(\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata premiums,\\n    address initiator,\\n    bytes calldata params\\n  ) external returns (bool);\\n}\\n\\ninterface ILendingPool {\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata modes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Flashloans/DyDxFlashLoans.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.25 <0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nlibrary Account {\\n  enum Status { Normal, Liquid, Vapor }\\n  struct Info {\\n    address owner; // The address that owns the account\\n    uint256 number; // A nonce that allows a single address to control many accounts\\n  }\\n}\\n\\nlibrary Actions {\\n  enum ActionType {\\n    Deposit, // supply tokens\\n    Withdraw, // borrow tokens\\n    Transfer, // transfer balance between accounts\\n    Buy, // buy an amount of some token (publicly)\\n    Sell, // sell an amount of some token (publicly)\\n    Trade, // trade tokens against another account\\n    Liquidate, // liquidate an undercollateralized or expiring account\\n    Vaporize, // use excess tokens to zero-out a completely negative account\\n    Call // send arbitrary data to an address\\n  }\\n\\n  struct ActionArgs {\\n    ActionType actionType;\\n    uint256 accountId;\\n    Types.AssetAmount amount;\\n    uint256 primaryMarketId;\\n    uint256 secondaryMarketId;\\n    address otherAddress;\\n    uint256 otherAccountId;\\n    bytes data;\\n  }\\n}\\n\\nlibrary Types {\\n  enum AssetDenomination {\\n    Wei, // the amount is denominated in wei\\n    Par // the amount is denominated in par\\n  }\\n\\n  enum AssetReference {\\n    Delta, // the amount is given as a delta from the current value\\n    Target // the amount is given as an exact number to end up at\\n  }\\n\\n  struct AssetAmount {\\n    bool sign; // true if positive\\n    AssetDenomination denomination;\\n    AssetReference ref;\\n    uint256 value;\\n  }\\n}\\n\\n/**\\n * @title ICallee\\n * @author dYdX\\n *\\n * Interface that Callees for Solo must implement in order to ingest data.\\n */\\ninterface ICallee {\\n  /**\\n   * Allows users to send this contract arbitrary data.\\n   *\\n   * @param  sender       The msg.sender to Solo\\n   * @param  accountInfo  The account from which the data is being sent\\n   * @param  data         Arbitrary data given by the sender\\n   */\\n  function callFunction(\\n    address sender,\\n    Account.Info memory accountInfo,\\n    bytes memory data\\n  ) external;\\n}\\n\\ninterface ISoloMargin {\\n  function getNumMarkets() external view returns (uint256);\\n\\n  function getMarketTokenAddress(uint256 marketId) external view returns (address);\\n\\n  function operate(Account.Info[] memory accounts, Actions.ActionArgs[] memory actions) external;\\n}\\n\\ncontract DyDxFlashloanBase {\\n  // -- Internal Helper functions -- //\\n\\n  function _getMarketIdFromTokenAddress(ISoloMargin solo, address token)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 numMarkets = solo.getNumMarkets();\\n\\n    address curToken;\\n    for (uint256 i = 0; i < numMarkets; i++) {\\n      curToken = solo.getMarketTokenAddress(i);\\n\\n      if (curToken == token) {\\n        return i;\\n      }\\n    }\\n\\n    revert(\\\"No marketId found\\\");\\n  }\\n\\n  function _getAccountInfo(address receiver) internal pure returns (Account.Info memory) {\\n    return Account.Info({ owner: receiver, number: 1 });\\n  }\\n\\n  function _getWithdrawAction(uint256 marketId, uint256 amount)\\n    internal\\n    view\\n    returns (Actions.ActionArgs memory)\\n  {\\n    return\\n      Actions.ActionArgs({\\n        actionType: Actions.ActionType.Withdraw,\\n        accountId: 0,\\n        amount: Types.AssetAmount({\\n          sign: false,\\n          denomination: Types.AssetDenomination.Wei,\\n          ref: Types.AssetReference.Delta,\\n          value: amount\\n        }),\\n        primaryMarketId: marketId,\\n        secondaryMarketId: 0,\\n        otherAddress: address(this),\\n        otherAccountId: 0,\\n        data: \\\"\\\"\\n      });\\n  }\\n\\n  function _getCallAction(bytes memory data) internal view returns (Actions.ActionArgs memory) {\\n    return\\n      Actions.ActionArgs({\\n        actionType: Actions.ActionType.Call,\\n        accountId: 0,\\n        amount: Types.AssetAmount({\\n          sign: false,\\n          denomination: Types.AssetDenomination.Wei,\\n          ref: Types.AssetReference.Delta,\\n          value: 0\\n        }),\\n        primaryMarketId: 0,\\n        secondaryMarketId: 0,\\n        otherAddress: address(this),\\n        otherAccountId: 0,\\n        data: data\\n      });\\n  }\\n\\n  function _getDepositAction(uint256 marketId, uint256 amount)\\n    internal\\n    view\\n    returns (Actions.ActionArgs memory)\\n  {\\n    return\\n      Actions.ActionArgs({\\n        actionType: Actions.ActionType.Deposit,\\n        accountId: 0,\\n        amount: Types.AssetAmount({\\n          sign: true,\\n          denomination: Types.AssetDenomination.Wei,\\n          ref: Types.AssetReference.Delta,\\n          value: amount\\n        }),\\n        primaryMarketId: marketId,\\n        secondaryMarketId: 0,\\n        otherAddress: address(this),\\n        otherAccountId: 0,\\n        data: \\\"\\\"\\n      });\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Flashloans/CreamFlashLoans.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.25 <0.7.5;\\n\\ninterface ICFlashloanReceiver {\\n  function executeOperation(\\n    address sender,\\n    address underlying,\\n    uint256 amount,\\n    uint256 fee,\\n    bytes calldata params\\n  ) external;\\n}\\n\\ninterface ICTokenFlashloan {\\n  function flashLoan(\\n    address receiver,\\n    uint256 amount,\\n    bytes calldata params\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"contracts/Controller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IVault } from \\\"./Vaults/IVault.sol\\\";\\nimport { IProvider } from \\\"./Providers/IProvider.sol\\\";\\nimport { Flasher } from \\\"./Flashloans/Flasher.sol\\\";\\nimport { FlashLoan } from \\\"./Flashloans/LibFlashLoan.sol\\\";\\nimport { IFujiAdmin } from \\\"./IFujiAdmin.sol\\\";\\nimport { Errors } from \\\"./Libraries/Errors.sol\\\";\\n\\ninterface IVaultExt is IVault {\\n  //Asset Struct\\n  struct VaultAssets {\\n    address collateralAsset;\\n    address borrowAsset;\\n    uint64 collateralID;\\n    uint64 borrowID;\\n  }\\n\\n  function vAssets() external view returns (VaultAssets memory);\\n}\\n\\ncontract Controller is Ownable {\\n  using SafeMath for uint256;\\n\\n  IFujiAdmin private _fujiAdmin;\\n\\n  /**\\n   * @dev Sets the fujiAdmin Address\\n   * @param _newFujiAdmin: FujiAdmin Contract Address\\n   */\\n  function setFujiAdmin(address _newFujiAdmin) external onlyOwner {\\n    _fujiAdmin = IFujiAdmin(_newFujiAdmin);\\n  }\\n\\n  /**\\n   * @dev Performs a forced refinancing routine\\n   * @param _vaultAddr: fuji Vault address\\n   * @param _newProvider: new provider address\\n   * @param _ratioA: ratio to determine how much of debtposition to move\\n   * @param _ratioB: _ratioA/_ratioB <= 1, and > 0\\n   * @param _flashNum: integer identifier of flashloan provider\\n   */\\n  function doRefinancing(\\n    address _vaultAddr,\\n    address _newProvider,\\n    uint256 _ratioA,\\n    uint256 _ratioB,\\n    uint8 _flashNum\\n  ) external onlyOwner {\\n    IVault vault = IVault(_vaultAddr);\\n    IVaultExt.VaultAssets memory vAssets = IVaultExt(_vaultAddr).vAssets();\\n    vault.updateF1155Balances();\\n\\n    // Check Vault borrowbalance and apply ratio (consider compound or not)\\n    uint256 debtPosition =\\n      IProvider(vault.activeProvider()).getBorrowBalanceOf(vAssets.borrowAsset, _vaultAddr);\\n    uint256 applyRatiodebtPosition = debtPosition.mul(_ratioA).div(_ratioB);\\n\\n    // Check Ratio Input and Vault Balance at ActiveProvider\\n    require(\\n      debtPosition >= applyRatiodebtPosition && applyRatiodebtPosition > 0,\\n      Errors.RF_INVALID_RATIO_VALUES\\n    );\\n\\n    //Initiate Flash Loan Struct\\n    FlashLoan.Info memory info =\\n      FlashLoan.Info({\\n        callType: FlashLoan.CallType.Switch,\\n        asset: vAssets.borrowAsset,\\n        amount: applyRatiodebtPosition,\\n        vault: _vaultAddr,\\n        newProvider: _newProvider,\\n        user: address(0),\\n        userliquidator: address(0),\\n        fliquidator: address(0)\\n      });\\n\\n    Flasher(payable(_fujiAdmin.getFlasher())).initiateFlashloan(info, _flashNum);\\n\\n    IVault(_vaultAddr).setActiveProvider(_newProvider);\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"internalType\":\"struct Account.Info\",\"name\":\"account\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum FlashLoan.CallType\",\"name\":\"callType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userliquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fliquidator\",\"type\":\"address\"}],\"internalType\":\"struct FlashLoan.Info\",\"name\":\"info\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"_flashnum\",\"type\":\"uint8\"}],\"name\":\"initiateFlashloan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFujiAdmin\",\"type\":\"address\"}],\"name\":\"setFujiAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Flasher","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}