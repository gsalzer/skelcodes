{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n\r\n// Copyright (c) 2021 0xdev0 - All rights reserved\r\n// https://twitter.com/0xdev0\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n  function initialize() external;\r\n  function totalSupply() external view returns (uint);\r\n  function balanceOf(address account) external view returns (uint);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint);\r\n  function symbol() external view returns (string memory);\r\n  function decimals() external view returns (uint);\r\n  function approve(address spender, uint amount) external returns (bool);\r\n  function mint(address account, uint amount) external;\r\n  function burn(address account, uint amount) external;\r\n  function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ninterface IInterestRateModel {\r\n  function systemRate(ILendingPair _pair) external view returns(uint);\r\n  function supplyRate(ILendingPair _pair, address _token) external view returns(uint);\r\n  function borrowRate(ILendingPair _pair, address _token) external view returns(uint);\r\n}\r\n\r\ninterface IController {\r\n  function interestRateModel() external view returns(IInterestRateModel);\r\n  function feeRecipient() external view returns(address);\r\n  function priceDelay() external view returns(uint);\r\n  function slowPricePeriod() external view returns(uint);\r\n  function slowPriceRange() external view returns(uint);\r\n  function liqMinHealth() external view returns(uint);\r\n  function liqFeePool() external view returns(uint);\r\n  function liqFeeSystem() external view returns(uint);\r\n  function liqFeeCaller() external view returns(uint);\r\n  function liqFeesTotal() external view returns(uint);\r\n  function depositLimit(address _lendingPair, address _token) external view returns(uint);\r\n}\r\n\r\n\r\ninterface ILendingPair {\r\n  function checkAccountHealth(address _account) external view;\r\n  function totalDebt(address _token) external view returns(uint);\r\n  function lpToken(address _token) external view returns(IERC20);\r\n  function debtOf(address _account, address _token) external view returns(uint);\r\n  function deposit(address _token, uint _amount) external;\r\n  function withdraw(address _token, uint _amount) external;\r\n  function borrow(address _token, uint _amount) external;\r\n  function repay(address _token, uint _amount) external;\r\n  function withdrawRepay(address _token, uint _amount) external;\r\n  function withdrawBorrow(address _token, uint _amount) external;\r\n  function controller() external view returns(IController);\r\n\r\n  function swapTokenToToken(\r\n    address  _fromToken,\r\n    address  _toToken,\r\n    address  _recipient,\r\n    uint     _inputAmount,\r\n    uint     _minOutput,\r\n    uint     _deadline\r\n  ) external returns(uint);\r\n}\r\n\r\ninterface IFeeConverter {\r\n\r\n  function convert(\r\n    address _sender,\r\n    ILendingPair _pair,\r\n    address[] memory _path,\r\n    uint _supplyTokenAmount\r\n  ) external;\r\n}\r\n\r\n\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() {\r\n    owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), owner);\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(isOwner(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  function isOwner() public view returns (bool) {\r\n    return msg.sender == owner;\r\n  }\r\n\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(owner, address(0));\r\n    owner = address(0);\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract FeeRecipient is Ownable {\r\n\r\n  IFeeConverter public feeConverter;\r\n\r\n  constructor(IFeeConverter _feeConverter) {\r\n    feeConverter = _feeConverter;\r\n  }\r\n\r\n  function convert(\r\n    ILendingPair _pair,\r\n    address[] memory _path\r\n  ) public {\r\n    IERC20 lpToken = IERC20(_pair.lpToken(_path[0]));\r\n    uint supplyTokenAmount = lpToken.balanceOf(address(this));\r\n    lpToken.transfer(address(feeConverter), supplyTokenAmount);\r\n    feeConverter.convert(msg.sender, _pair, _path, supplyTokenAmount);\r\n  }\r\n\r\n  function setFeeConverter(IFeeConverter _value) onlyOwner public {\r\n    feeConverter = _value;\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IFeeConverter\",\"name\":\"_feeConverter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract ILendingPair\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"convert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeConverter\",\"outputs\":[{\"internalType\":\"contract IFeeConverter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFeeConverter\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setFeeConverter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FeeRecipient","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c604ff7670a65153158f38162997b2a885d6aeb77f359abdfcab044a526c3315"}]}