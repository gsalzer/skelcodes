{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/mnt/f/eth/graphlinq/GraphLinq.Engine/NodeBlock.EngineDepositorContract/contracts/GraphLinqDepositor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"./interfaces/IERC20.sol\\\";\\r\\nimport \\\"./maths/SafeMath.sol\\\";\\r\\n\\r\\ncontract GraphLinqDepositor {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    address private _graphLinkContract;\\r\\n    mapping (address => uint256) _balances;\\r\\n    address private _engineManager;\\r\\n\\r\\n    constructor(address engineManager, address graphLinqContract) {\\r\\n        _engineManager = engineManager;\\r\\n        _graphLinkContract = graphLinqContract;\\r\\n    }\\r\\n\\r\\n    /* Parameters: Amount of GLQ Token to burn\\r\\n    ** Desc: Burn a specific amount of token by calling the GLQ Token Contract for All Wallets\\r\\n    ** Return: void\\r\\n    */\\r\\n    function burnAmount(uint256 amount) public {\\r\\n        IERC20 graphLinqToken = IERC20(address(_graphLinkContract));\\r\\n         require (\\r\\n            msg.sender == _engineManager,\\r\\n            \\\"Only the GraphLinq engine manager can decide which funds should be burned for graph costs.\\\"\\r\\n        );\\r\\n        require(\\r\\n            graphLinqToken.balanceOf(address(this)) >= amount, \\r\\n            \\\"Invalid fund in the depositor contract, cant reach the contract balance amount.\\\"\\r\\n        );\\r\\n        graphLinqToken.burnFuel(amount);\\r\\n    }\\r\\n\\r\\n    /* Parameters: Amount of GLQ Token to burn\\r\\n    ** Desc: Burn a specific amount of token by calling the GLQ Token Contract for a specific wallet\\r\\n    */\\r\\n    function burnBalance(address fromWallet, uint256 amount) public {\\r\\n        IERC20 graphLinqToken = IERC20(address(_graphLinkContract));\\r\\n        require (\\r\\n            msg.sender == _engineManager,\\r\\n            \\\"Only the GraphLinq engine manager can decide which funds should be burned for graph costs.\\\"\\r\\n        );\\r\\n\\r\\n        require (_balances[fromWallet] >= amount,\\r\\n            \\\"Invalid amount to withdraw, amount is higher then current wallet balance.\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            graphLinqToken.balanceOf(address(this)) >= amount, \\r\\n            \\\"Invalid fund in the depositor contract, cant reach the contract balance amount.\\\"\\r\\n        );\\r\\n\\r\\n        graphLinqToken.burnFuel(amount);\\r\\n        _balances[fromWallet] -= amount;\\r\\n    }\\r\\n\\r\\n    /* Parameters: wallet owner address, amount asked to withdraw, fees to pay for graphs execs\\r\\n    ** Desc: Withdraw funds from this contract to the base wallet depositor, applying fees if necessary\\r\\n    */\\r\\n    function withdrawWalletBalance(address walletOwner, uint256 amount,\\r\\n     uint256 removeFees) public {\\r\\n        IERC20 graphLinqToken = IERC20(address(_graphLinkContract));\\r\\n\\r\\n        require (\\r\\n            msg.sender == _engineManager,\\r\\n            \\\"Only the GraphLinq engine manager can decide which funds are withdrawable or not.\\\"\\r\\n        );\\r\\n\\r\\n        uint256 summedAmount = amount.add(removeFees);\\r\\n        require (_balances[walletOwner] >= summedAmount,\\r\\n            \\\"Invalid amount to withdraw, amount is higher then current wallet balance.\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            graphLinqToken.balanceOf(address(this)) >= summedAmount, \\r\\n            \\\"Invalid fund in the depositor contract, cant reach the wallet balance amount.\\\"\\r\\n        );\\r\\n\\r\\n        _balances[walletOwner] -= amount;\\r\\n        require(\\r\\n            graphLinqToken.transfer(walletOwner, amount),\\r\\n            \\\"Error transfering balance back to his owner from the depositor contract.\\\"\\r\\n        );\\r\\n        \\r\\n        // in case the wallet runned some graph on the engine and have fees to pay\\r\\n        if (removeFees > 0) {\\r\\n            graphLinqToken.burnFuel(removeFees);\\r\\n            _balances[walletOwner] -= removeFees;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* Parameters: Amount to add into the contract\\r\\n    ** Desc: Deposit GLQ token in the contract to pay for graphs fees executions\\r\\n    */\\r\\n    function addBalance(uint256 amount) public {\\r\\n         IERC20 graphLinqToken = IERC20(address(_graphLinkContract));\\r\\n\\r\\n         require(\\r\\n             graphLinqToken.balanceOf(msg.sender) >= amount,\\r\\n             \\\"Invalid balance to add in your credits\\\"\\r\\n         );\\r\\n\\r\\n         require(\\r\\n             graphLinqToken.transferFrom(msg.sender, address(this), amount) == true,\\r\\n             \\\"Error while trying to add credit to your balance, please check allowance.\\\"\\r\\n         );\\r\\n\\r\\n         _balances[msg.sender] += amount;\\r\\n    }\\r\\n\\r\\n    function getBalance(address from) public view returns(uint256) {\\r\\n        return _balances[from];\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/mnt/f/eth/graphlinq/GraphLinq.Engine/NodeBlock.EngineDepositorContract/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n     // Allow deployer to burn his own wallet funds (which is the amount from depositor contract)\\r\\n    function burnFuel(uint256 amount) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"\r\n    },\r\n    \"/mnt/f/eth/graphlinq/GraphLinq.Engine/NodeBlock.EngineDepositorContract/contracts/maths/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"engineManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"graphLinqContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"removeFees\",\"type\":\"uint256\"}],\"name\":\"withdrawWalletBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GraphLinqDepositor","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000b0bdc18be58da5bb61b5bd10403f393258d8c0f00000000000000000000000009f9c8ec3534c3ce16f928381372bfbfbfb9f4d24","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}