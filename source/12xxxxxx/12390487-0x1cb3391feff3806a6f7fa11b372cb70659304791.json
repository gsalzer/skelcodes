{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CoverPoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./proxy/InitializableAdminUpgradeabilityProxy.sol\\\";\\nimport \\\"./proxy/Clones.sol\\\";\\nimport \\\"./utils/Address.sol\\\";\\nimport \\\"./utils/Create2.sol\\\";\\nimport \\\"./utils/Ownable.sol\\\";\\nimport \\\"./interfaces/ICoverPool.sol\\\";\\nimport \\\"./interfaces/ICoverPoolFactory.sol\\\";\\n\\n/**\\n * @title CoverPoolFactory contract, manages all the coverPools for Cover Protocol\\n * @author crypto-pumpkin\\n * Using string (instead of bytes32) for all inputs for operation convinience at the expenses of a slightly higher cost\\n */\\ncontract CoverPoolFactory is ICoverPoolFactory, Ownable {\\n\\n  bytes4 private constant COVER_POOL_INIT_SIGNITURE = bytes4(keccak256(\\\"initialize(string,bool,string[],address,uint256,uint48,string)\\\"));\\n\\n  bool public override paused; // set by responder or owner, pause token transfer events for the protocol\\n  address public override responder;\\n  address public override coverPoolImpl;\\n  address public override coverImpl;\\n  address public override coverERC20Impl;\\n  address public override treasury; // receive fees collected\\n  address public override claimManager;\\n  // delay # of seconds for redeem with/o. accepted claim, redeem with all covTokens is not affected\\n  uint256 public override defaultRedeemDelay = 3 days;\\n  uint256 public constant override MAX_REDEEM_DELAY = 30 days;\\n  uint256 public override yearlyFeeRate = 0.006 ether; // 0.6% yearly rate\\n  /// @notice min gas left requirement before continue deployments (when creating new Cover or adding risks to CoverPool)\\n  uint256 public override deployGasMin = 1000000;\\n  string[] public override coverPoolNames;\\n  mapping(string => address) public override coverPools;\\n\\n  constructor (\\n    address _coverPoolImpl,\\n    address _coverImpl,\\n    address _coverERC20Impl,\\n    address _treasury\\n  ) {\\n    require(Address.isContract(_coverPoolImpl), \\\"Factory: _coverPoolImpl is not a contract\\\");\\n    require(Address.isContract(_coverImpl), \\\"Factory: _coverImpl is not a contract\\\");\\n    require(Address.isContract(_coverERC20Impl), \\\"Factory: _coverERC20Impl is not a contract\\\");\\n    require(_treasury != address(0), \\\"Factory: treasury cannot be 0\\\");\\n    coverPoolImpl = _coverPoolImpl;\\n    coverImpl = _coverImpl;\\n    coverERC20Impl = _coverERC20Impl;\\n    treasury = _treasury;\\n\\n    initializeOwner();\\n  }\\n\\n  /**\\n   * @notice Create a new Cover Pool, it will deploy the Cover and covTokens for the collateral and expiry\\n   * @param _name name for pool, has to be unique, e.g. Yearn\\n   * @param _extendablePool extendable pools allow adding new risk\\n   * @param _riskList list of underlyings that are covered in the pool\\n   * @param _collateral the collateral of the pool\\n   * @param _mintRatio must be 18 decimals, in (0, + infinity), 1.5 means 1 collateral mints 1.5 covTokens\\n   * @param _expiry expiration date supported for the pool\\n   * @param _expiryString MONTH_DATE_YEAR, used to create covToken symbols only\\n   * Emits CoverPoolCreated\\n   */\\n  function createCoverPool(\\n    string calldata _name,\\n    bool _extendablePool,\\n    string[] calldata _riskList,\\n    address _collateral,\\n    uint256 _mintRatio,\\n    uint48 _expiry,\\n    string calldata _expiryString\\n  ) external override onlyOwner returns (address _addr) {\\n    require(coverPools[_name] == address(0), \\\"Factory: coverPool exists\\\");\\n    require(_riskList.length > 0, \\\"Factory: riskList is empty\\\");\\n    require(_expiry > block.timestamp, \\\"Factory: expiry in the past\\\");\\n    require(_collateral != address(0), \\\"Factory: collateral cannot be 0\\\");\\n\\n    coverPoolNames.push(_name);\\n    bytes memory initData = abi.encodeWithSelector(COVER_POOL_INIT_SIGNITURE, _name, _extendablePool, _riskList, _collateral, _mintRatio, _expiry, _expiryString);\\n    _addr = address(_deployCoverPool(_name, initData));\\n    coverPools[_name] = _addr;\\n    emit CoverPoolCreated(_addr);\\n  }\\n\\n  /// @notice this only affects future Covers, a Cover's fee rate is fixed once deployed\\n  function setYearlyFeeRate(uint256 _yearlyFeeRate) external override onlyOwner {\\n    require(_yearlyFeeRate <= 0.1 ether, \\\"Factory: must < 10%\\\");\\n    emit IntUpdated('YearlyFeeRate', yearlyFeeRate, _yearlyFeeRate);\\n    yearlyFeeRate = _yearlyFeeRate;\\n  }\\n\\n  /// @notice takes effects immediately, it will apply to all coverages\\n  function setDefaultRedeemDelay(uint256 _defaultRedeemDelay) external override onlyOwner {\\n    emit IntUpdated('DefaultRedeemDelay', defaultRedeemDelay, _defaultRedeemDelay);\\n    defaultRedeemDelay = _defaultRedeemDelay;\\n  }\\n\\n  function setPaused(bool _paused) external override {\\n    require(msg.sender == owner() || msg.sender == responder, \\\"Factory: not owner or responder\\\");\\n    emit PausedStatusUpdated(paused, _paused);\\n    paused = _paused;\\n  }\\n\\n  function setDeployGasMin(uint256 _deployGasMin) external override onlyOwner {\\n    require(_deployGasMin > 0, \\\"Factory: min gas cannot be 0\\\");\\n    emit IntUpdated('DeployGasMin', deployGasMin, _deployGasMin);\\n    deployGasMin = _deployGasMin;\\n  }\\n\\n  /// @dev update this will only affect coverPools deployed after\\n  function setCoverPoolImpl(address _newImpl) external override onlyOwner {\\n    require(Address.isContract(_newImpl), \\\"Factory: impl is not a contract\\\");\\n    emit AddressUpdated('CoverPoolImpl', coverPoolImpl, _newImpl);\\n    coverPoolImpl = _newImpl;\\n  }\\n\\n  /// @dev update this will only affect covers of coverPools deployed after\\n  function setCoverImpl(address _newImpl) external override onlyOwner {\\n    require(Address.isContract(_newImpl), \\\"Factory: impl is not a contract\\\");\\n    emit AddressUpdated('CoverImpl', coverImpl, _newImpl);\\n    coverImpl = _newImpl;\\n  }\\n\\n  /// @dev update this will only affect covTokens of covers of coverPools deployed after\\n  function setCoverERC20Impl(address _newImpl) external override onlyOwner {\\n    require(Address.isContract(_newImpl), \\\"Factory: impl is not a contract\\\");\\n    emit AddressUpdated('CoverERC20Impl', coverERC20Impl, _newImpl);\\n    coverERC20Impl = _newImpl;\\n  }\\n\\n  function setClaimManager(address _address) external override onlyOwner {\\n    require(_address != address(0), \\\"Factory: address cannot be 0\\\");\\n    emit AddressUpdated('claimManager', claimManager, _address);\\n    claimManager = _address;\\n  }\\n\\n  function setTreasury(address _address) external override onlyOwner {\\n    require(_address != address(0), \\\"Factory: address cannot be 0\\\");\\n    emit AddressUpdated('treasury', treasury, _address);\\n    treasury = _address;\\n  }\\n\\n  function setResponder(address _address) external override onlyOwner {\\n    require(_address != address(0), \\\"Factory: address cannot be 0\\\");\\n    emit AddressUpdated('responder', responder, _address);\\n    responder = _address;\\n  }\\n\\n  function getCoverPools() external view override returns (address[] memory) {\\n    string[] memory coverPoolNamesCopy = coverPoolNames;\\n    address[] memory coverPoolAddresses = new address[](coverPoolNamesCopy.length);\\n    for (uint256 i = 0; i < coverPoolNamesCopy.length; i++) {\\n      coverPoolAddresses[i] = coverPools[coverPoolNamesCopy[i]];\\n    }\\n    return coverPoolAddresses;\\n  }\\n\\n  /// @notice return covToken contract address, the contract may not be deployed yet, _prefix example: \\\"C_CURVE\\\", \\\"C_FUT1\\\", or \\\"NC_\\\"\\n  function getCovTokenAddress(\\n    string calldata _coverPoolName,\\n    uint48 _timestamp,\\n    address _collateral,\\n    uint256 _claimNonce,\\n    string memory _prefix\\n  ) external view override returns (address) {\\n    bytes32 salt = keccak256(abi.encodePacked(_coverPoolName, _timestamp, _collateral, _claimNonce, _prefix));\\n    address deployer = getCoverAddress(_coverPoolName, _timestamp, _collateral, _claimNonce);\\n    return Clones.predictDeterministicAddress(coverERC20Impl, salt, deployer);\\n  }\\n\\n  /// @notice return coverPool contract address, the contract may not be deployed yet\\n  function getCoverPoolAddress(string calldata _name) public view override returns (address) {\\n    return _computeAddress(keccak256(abi.encodePacked(\\\"CoverV2\\\", _name)), address(this));\\n  }\\n\\n  /// @notice return cover contract address, the contract may not be deployed yet\\n  function getCoverAddress(\\n    string calldata _coverPoolName,\\n    uint48 _timestamp,\\n    address _collateral,\\n    uint256 _claimNonce\\n  ) public view override returns (address) {\\n    return _computeAddress(\\n      keccak256(abi.encodePacked(_coverPoolName, _timestamp, _collateral, _claimNonce)),\\n      getCoverPoolAddress(_coverPoolName)\\n    );\\n  }\\n\\n  function _deployCoverPool(string calldata _name, bytes memory _initData) private returns (address payable _proxyAddr) {\\n    bytes memory bytecode = type(InitializableAdminUpgradeabilityProxy).creationCode;\\n    // unique salt required for each coverPool, salt + deployer decides contract address\\n    _proxyAddr = Create2.deploy(0, keccak256(abi.encodePacked(\\\"CoverV2\\\", _name)), bytecode);\\n    InitializableAdminUpgradeabilityProxy(_proxyAddr).initialize(coverPoolImpl, owner(), _initData);\\n  }\\n\\n  function _computeAddress(bytes32 salt, address deployer) private pure returns (address) {\\n    bytes memory bytecode = type(InitializableAdminUpgradeabilityProxy).creationCode;\\n    return Create2.computeAddress(salt, keccak256(bytecode), deployer);\\n  }\\n}\"\r\n    },\r\n    \"contracts/proxy/InitializableAdminUpgradeabilityProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\n\\npragma solidity ^0.8.0;\\n\\nimport './BaseAdminUpgradeabilityProxy.sol';\\n\\n/**\\n * @title InitializableAdminUpgradeabilityProxy\\n * @dev Extends from BaseAdminUpgradeabilityProxy with an initializer for \\n * initializing the implementation, admin, and init data.\\n */\\ncontract InitializableAdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy {\\n  /**\\n   * Contract initializer.\\n   * @param _logic address of the initial implementation.\\n   * @param _admin Address of the proxy administrator.\\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\\n   * It should include the signature and the parameters of the function to be called, as -described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\\n   */\\n  function initialize(address _logic, address _admin, bytes memory _data) public payable {\\n    require(_implementation() == address(0));\\n\\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\\n    _setImplementation(_logic);\\n    if(_data.length > 0) {\\n      (bool success,) = _logic.delegatecall(_data);\\n      require(success);\\n    }\\n\\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\\n    _setAdmin(_admin);\\n  }\\n}\"\r\n    },\r\n    \"contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `master` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address master, bytes32 salt) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address master, bytes32 salt, address deployer) internal pure returns (address predicted) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address master, bytes32 salt) internal view returns (address predicted) {\\n        return predictDeterministicAddress(master, salt, address(this));\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/Create2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address payable) {\\n        address payable addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\\n        bytes32 _data = keccak256(\\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\\n        );\\n        return address(uint160(uint256(_data)));\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IOwnable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n * @author crypto-pumpkin\\n *\\n * By initialization, the owner account will be the one that called initializeOwner. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Initializable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev COVER: Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function initializeOwner() internal initializer {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/ICoverPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev CoverPool contract interface. See {CoverPool}.\\n * @author crypto-pumpkin\\n */\\ninterface ICoverPool {\\n  event CoverCreated(address indexed);\\n  event CoverAdded(address indexed _cover, address _acount, uint256 _amount);\\n  event NoclaimRedeemDelayUpdated(uint256 _oldDelay, uint256 _newDelay);\\n  event ClaimEnacted(uint256 _enactedClaimNonce);\\n  event RiskUpdated(bytes32 _risk, bool _isAddRisk);\\n  event PoolStatusUpdated(Status _old, Status _new);\\n  event ExpiryUpdated(uint48 _expiry, string _expiryStr,  Status _status);\\n  event CollateralUpdated(address indexed _collateral, uint256 _mintRatio,  Status _status);\\n\\n  enum Status { Null, Active, Disabled }\\n\\n  struct ExpiryInfo {\\n    string name;\\n    Status status;\\n  }\\n  struct CollateralInfo {\\n    uint256 mintRatio;\\n    Status status;\\n  }\\n  struct ClaimDetails {\\n    uint48 incidentTimestamp;\\n    uint48 claimEnactedTimestamp;\\n    uint256 totalPayoutRate;\\n    bytes32[] payoutRiskList;\\n    uint256[] payoutRates;\\n  }\\n\\n  // state vars\\n  function name() external view returns (string memory);\\n  function extendablePool() external view returns (bool);\\n  function poolStatus() external view returns (Status _status);\\n  /// @notice only active (true) coverPool allows adding more covers (aka. minting more CLAIM and NOCLAIM tokens)\\n  function claimNonce() external view returns (uint256);\\n  function noclaimRedeemDelay() external view returns (uint256);\\n  function addingRiskWIP() external view returns (bool);\\n  function addingRiskIndex() external view returns (uint256);\\n  function activeCovers(uint256 _index) external view returns (address);\\n  function allCovers(uint256 _index) external view returns (address);\\n  function expiries(uint256 _index) external view returns (uint48);\\n  function collaterals(uint256 _index) external view returns (address);\\n  function riskList(uint256 _index) external view returns (bytes32);\\n  function deletedRiskList(uint256 _index) external view returns (bytes32);\\n  function riskMap(bytes32 _risk) external view returns (Status);\\n  function collateralStatusMap(address _collateral) external view returns (uint256 _mintRatio, Status _status);\\n  function expiryInfoMap(uint48 _expiry) external view returns (string memory _name, Status _status);\\n  function coverMap(address _collateral, uint48 _expiry) external view returns (address);\\n\\n  // extra view\\n  function getRiskList() external view returns (bytes32[] memory _riskList);\\n  function getClaimDetails(uint256 _claimNonce) external view returns (ClaimDetails memory);\\n  function getCoverPoolDetails()\\n    external view returns (\\n      address[] memory _collaterals,\\n      uint48[] memory _expiries,\\n      bytes32[] memory _riskList,\\n      bytes32[] memory _deletedRiskList,\\n      address[] memory _allCovers\\n    );\\n\\n  // user action\\n  /// @notice cover must be deployed first\\n  function addCover(\\n    address _collateral,\\n    uint48 _expiry,\\n    address _receiver,\\n    uint256 _colAmountIn,\\n    uint256 _amountOut,\\n    bytes calldata _data\\n  ) external;\\n  function deployCover(address _collateral, uint48 _expiry) external returns (address _coverAddress);\\n\\n  // access restriction - claimManager\\n  function enactClaim(\\n    bytes32[] calldata _payoutRiskList,\\n    uint256[] calldata _payoutRates,\\n    uint48 _incidentTimestamp,\\n    uint256 _coverPoolNonce\\n  ) external;\\n\\n  // CM and dev only\\n  function setNoclaimRedeemDelay(uint256 _noclaimRedeemDelay) external;\\n\\n  // access restriction - dev\\n  function addRisk(string calldata _risk) external returns (bool);\\n  function deleteRisk(string calldata _risk) external;\\n  function setExpiry(uint48 _expiry, string calldata _expiryName, Status _status) external;\\n  function setCollateral(address _collateral, uint256 _mintRatio, Status _status) external;\\n  function setPoolStatus(Status _poolStatus) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/ICoverPoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev CoverPoolFactory contract interface. See {CoverPoolFactory}.\\n * @author crypto-pumpkin\\n */\\ninterface ICoverPoolFactory {\\n  event CoverPoolCreated(address indexed _addr);\\n  event IntUpdated(string _type, uint256 _old, uint256 _new);\\n  event AddressUpdated(string _type, address indexed _old, address indexed _new);\\n  event PausedStatusUpdated(bool _old, bool _new);\\n\\n  // state vars\\n  function MAX_REDEEM_DELAY() external view returns (uint256);\\n  function defaultRedeemDelay() external view returns (uint256);\\n  // yearlyFeeRate is scaled 1e18\\n  function yearlyFeeRate() external view returns (uint256);\\n  function paused() external view returns (bool);\\n  function responder() external view returns (address);\\n  function coverPoolImpl() external view returns (address);\\n  function coverImpl() external view returns (address);\\n  function coverERC20Impl() external view returns (address);\\n  function treasury() external view returns (address);\\n  function claimManager() external view returns (address);\\n  /// @notice min gas left requirement before continue deployments (when creating new Cover or adding risks to CoverPool)\\n  function deployGasMin() external view returns (uint256);\\n  function coverPoolNames(uint256 _index) external view returns (string memory);\\n  function coverPools(string calldata _coverPoolName) external view returns (address);\\n\\n  // extra view\\n  function getCoverPools() external view returns (address[] memory);\\n  /// @notice return contract address, the contract may not be deployed yet\\n  function getCoverPoolAddress(string calldata _name) external view returns (address);\\n  function getCoverAddress(string calldata _coverPoolName, uint48 _timestamp, address _collateral, uint256 _claimNonce) external view returns (address);\\n  /// @notice _prefix example: \\\"C_CURVE\\\", \\\"C_FUT1\\\", or \\\"NC_\\\"\\n  function getCovTokenAddress(string calldata _coverPoolName, uint48 _expiry, address _collateral, uint256 _claimNonce, string memory _prefix) external view returns (address);\\n\\n  // access restriction - owner (dev) & responder\\n  function setPaused(bool _paused) external;\\n\\n  // access restriction - owner (dev)\\n  function setYearlyFeeRate(uint256 _yearlyFeeRate) external;\\n  function setDefaultRedeemDelay(uint256 _defaultRedeemDelay) external;\\n  function setResponder(address _responder) external;\\n  function setDeployGasMin(uint256 _deployGasMin) external;\\n  /// @dev update Impl will only affect contracts deployed after\\n  function setCoverPoolImpl(address _newImpl) external;\\n  function setCoverImpl(address _newImpl) external;\\n  function setCoverERC20Impl(address _newImpl) external;\\n  function setTreasury(address _address) external;\\n  function setClaimManager(address _address) external;\\n  /**\\n   * @notice Create a new Cover Pool\\n   * @param _name name for pool, e.g. Yearn\\n   * @param _extendablePool open pools allow adding new risk\\n   * @param _riskList risk risks that are covered in this pool\\n   * @param _collateral the collateral of the pool\\n   * @param _mintRatio 18 decimals, in (0, + infinity) the deposit ratio for the collateral the pool, 1.5 means =  1 collateral mints 1.5 CLAIM/NOCLAIM tokens\\n   * @param _expiry expiration date supported for the pool\\n   * @param _expiryString MONTH_DATE_YEAR, used to create covToken symbols only\\n   * \\n   * Emits CoverPoolCreated, add a supported coverPool in COVER\\n   */\\n  function createCoverPool(\\n    string calldata _name,\\n    bool _extendablePool,\\n    string[] calldata _riskList,\\n    address _collateral,\\n    uint256 _mintRatio,\\n    uint48 _expiry,\\n    string calldata _expiryString\\n  ) external returns (address);\\n}  \"\r\n    },\r\n    \"contracts/proxy/BaseAdminUpgradeabilityProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport './BaseUpgradeabilityProxy.sol';\\n\\n/**\\n * @title BaseAdminUpgradeabilityProxy\\n * @dev This contract combines an upgradeability proxy with an authorization\\n * mechanism for administrative tasks.\\n * All external functions in this contract must be guarded by the\\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\\n * feature proposal that would enable this to be done automatically.\\n */\\ncontract BaseAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\\n  /**\\n   * @dev Emitted when the administration has been transferred.\\n   * @param previousAdmin Address of the previous admin.\\n   * @param newAdmin Address of the new admin.\\n   */\\n  event AdminChanged(address previousAdmin, address newAdmin);\\n\\n  /**\\n   * @dev Storage slot with the admin of the contract.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n\\n  bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  /**\\n   * @dev Modifier to check whether the `msg.sender` is the admin.\\n   * If it is, it will run the function. Otherwise, it will delegate the call\\n   * to the implementation.\\n   */\\n  modifier ifAdmin() {\\n    if (msg.sender == _admin()) {\\n      _;\\n    } else {\\n      _fallback();\\n    }\\n  }\\n\\n  /**\\n   * @return proxyAdmin The address of the proxy admin.\\n   */\\n  function admin() external ifAdmin returns (address proxyAdmin) {\\n    proxyAdmin = _admin();\\n  }\\n\\n  /**\\n   * @return impl The address of the implementation.\\n   */\\n  function implementation() external ifAdmin returns (address impl) {\\n    impl = _implementation();\\n  }\\n\\n  /**\\n   * @dev Changes the admin of the proxy.\\n   * Only the current admin can call this function.\\n   * @param newAdmin Address to transfer proxy administration to.\\n   */\\n  function changeAdmin(address newAdmin) external ifAdmin {\\n    require(newAdmin != address(0), \\\"Cannot change the admin of a proxy to the zero address\\\");\\n    emit AdminChanged(_admin(), newAdmin);\\n    _setAdmin(newAdmin);\\n  }\\n\\n  /**\\n   * @dev Upgrade the backing implementation of the proxy.\\n   * Only the admin can call this function.\\n   * @param newImplementation Address of the new implementation.\\n   */\\n  function upgradeTo(address newImplementation) external ifAdmin {\\n    _upgradeTo(newImplementation);\\n  }\\n\\n  /**\\n   * @dev Upgrade the backing implementation of the proxy and call a function\\n   * on the new implementation.\\n   * This is useful to initialize the proxied contract.\\n   * @param newImplementation Address of the new implementation.\\n   * @param data Data to send as msg.data in the low level call.\\n   * It should include the signature and the parameters of the function to be called, as -described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   */\\n  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\\n    _upgradeTo(newImplementation);\\n    (bool success,) = newImplementation.delegatecall(data);\\n    require(success);\\n  }\\n\\n  /**\\n   * @return adm The admin slot.\\n   */\\n  function _admin() internal view returns (address adm) {\\n    bytes32 slot = ADMIN_SLOT;\\n    assembly {\\n      adm := sload(slot)\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets the address of the proxy admin.\\n   * @param newAdmin Address of the new proxy admin.\\n   */\\n  function _setAdmin(address newAdmin) internal {\\n    bytes32 slot = ADMIN_SLOT;\\n\\n    assembly {\\n      sstore(slot, newAdmin)\\n    }\\n  }\\n} \"\r\n    },\r\n    \"contracts/proxy/BaseUpgradeabilityProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"./Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n * \\n * Upgradeability is only provided internally through {_upgradeTo}. For an externally upgradeable proxy see\\n * {TransparentUpgradeableProxy}.\\n */\\ncontract BaseUpgradeabilityProxy is Proxy {\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal override view returns (address impl) {\\n        bytes32 slot = IMPLEMENTATION_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            impl := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Upgrades the proxy to a new implementation.\\n     * \\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) internal {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableProxy: new implementation is not a contract\\\");\\n\\n        bytes32 slot = IMPLEMENTATION_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, newImplementation)\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n * \\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n * \\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     * \\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 { revert(0, returndatasize()) }\\n            default { return(0, returndatasize()) }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal virtual view returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     * \\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal {\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback () payable external {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive () payable external {\\n        _fallback();\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Interface of Ownable\\n */\\ninterface IOwnable {\\n    function owner() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coverPoolImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_coverImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_coverERC20Impl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_old\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"AddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"CoverPoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"IntUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_old\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_new\",\"type\":\"bool\"}],\"name\":\"PausedStatusUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_REDEEM_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coverERC20Impl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coverImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coverPoolImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coverPoolNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"coverPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_extendablePool\",\"type\":\"bool\"},{\"internalType\":\"string[]\",\"name\":\"_riskList\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"_expiry\",\"type\":\"uint48\"},{\"internalType\":\"string\",\"name\":\"_expiryString\",\"type\":\"string\"}],\"name\":\"createCoverPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultRedeemDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployGasMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_coverPoolName\",\"type\":\"string\"},{\"internalType\":\"uint48\",\"name\":\"_timestamp\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_claimNonce\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_prefix\",\"type\":\"string\"}],\"name\":\"getCovTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_coverPoolName\",\"type\":\"string\"},{\"internalType\":\"uint48\",\"name\":\"_timestamp\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_claimNonce\",\"type\":\"uint256\"}],\"name\":\"getCoverAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getCoverPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCoverPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"responder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setClaimManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newImpl\",\"type\":\"address\"}],\"name\":\"setCoverERC20Impl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newImpl\",\"type\":\"address\"}],\"name\":\"setCoverImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newImpl\",\"type\":\"address\"}],\"name\":\"setCoverPoolImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultRedeemDelay\",\"type\":\"uint256\"}],\"name\":\"setDefaultRedeemDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deployGasMin\",\"type\":\"uint256\"}],\"name\":\"setDeployGasMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setResponder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_yearlyFeeRate\",\"type\":\"uint256\"}],\"name\":\"setYearlyFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yearlyFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CoverPoolFactory","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000083085b8cb406cdb4034622198b518bda133032e2000000000000000000000000617c41b9f7adee1ec0eda14edd7c090b841ae3ae0000000000000000000000007e8b62b2ab8db3f3d085ba3437216fd10b6b4eb50000000000000000000000006bef09f99bf6d92d6486889bdd8a374af151461d","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}