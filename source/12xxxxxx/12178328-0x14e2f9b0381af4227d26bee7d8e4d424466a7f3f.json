{"status":"1","message":"OK","result":[{"SourceCode":"// File: node_modules\\@openzeppelin\\contracts\\introspection\\IERC165.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC721\\IERC721.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n// File: contracts\\GFarmNftSwap.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\ninterface GFarmNftInterface{\r\n    function idToLeverage(uint id) external view returns(uint8);\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n}\r\n\r\ninterface GFarmBridgeableNftInterface{\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n\tfunction mint(address to, uint tokenId) external;\r\n\tfunction burn(uint tokenId) external;\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n}\r\n\r\ncontract GFarmNftSwap{\r\n\r\n\tGFarmNftInterface public nft;\r\n\tGFarmBridgeableNftInterface[5] public bridgeableNfts;\r\n\taddress public gov;\r\n\r\n\tevent NftToBridgeableNft(uint nftType, uint tokenId);\r\n\tevent BridgeableNftToNft(uint nftType, uint tokenId);\r\n\r\n\tconstructor(GFarmNftInterface _nft){\r\n\t\tnft = _nft;\r\n\t\tgov = msg.sender;\r\n\t}\r\n\r\n\tfunction setBridgeableNfts(GFarmBridgeableNftInterface[5] calldata _bridgeableNfts) external{\r\n\t\trequire(msg.sender == gov, \"ONLY_GOV\");\r\n\t\trequire(bridgeableNfts[0] == GFarmBridgeableNftInterface(0), \"BRIDGEABLE_NFTS_ALREADY_SET\");\r\n\t\tbridgeableNfts = _bridgeableNfts;\r\n\t}\r\n\r\n\tfunction leverageToType(uint leverage) pure private returns(uint){\r\n\t\t// 150 => 5\r\n\t\tif(leverage == 150){ return 5; }\r\n\t\t\r\n\t\t// 25 => 1, 50 => 2, 75 => 3, 100 => 4\r\n\t\treturn leverage / 25;\r\n\t}\r\n\r\n\t// Important: nft types = 1,2,3,4,5 (25x, 50x, 75x, 100x, 150x)\r\n\tmodifier correctNftType(uint nftType){\r\n\t\trequire(nftType > 0 && nftType < 6, \"NFT_TYPE_BETWEEN_1_AND_5\");\r\n\t\t_;\r\n\t}\r\n\r\n\t// Swap non-bridgeable nft for bridgeable nft\r\n\tfunction getBridgeableNft(uint nftType, uint tokenId) public correctNftType(nftType){\r\n\t\t// 1. token id corresponds to type provided\r\n\t\trequire(leverageToType(nft.idToLeverage(tokenId)) == nftType, \"WRONG_TYPE\");\r\n\r\n\t\t// 2. transfer nft to this contract\r\n\t\tnft.transferFrom(msg.sender, address(this), tokenId);\r\n\r\n\t\t// 3. mint bridgeable nft of same type\r\n\t\tbridgeableNfts[nftType-1].mint(msg.sender, tokenId);\r\n\r\n\t\temit NftToBridgeableNft(nftType, tokenId);\r\n\t}\r\n\r\n\t// Swap non-bridgeable nfts for bridgeable nfts\r\n\tfunction getBridgeableNfts(uint nftType, uint[] calldata ids) external correctNftType(nftType){\r\n\t\t// 1. max 10 at the same time\r\n\t\trequire(ids.length <= 10, \"MAX_10\");\r\n\r\n\t\t// 2. loop over ids\r\n\t\tfor(uint i = 0; i < ids.length; i++){\r\n\t\t\tgetBridgeableNft(nftType, ids[i]);\r\n\t\t}\r\n\t}\r\n\r\n\t// Swap bridgeable nft for unbridgeable nft\r\n\tfunction getNft(uint nftType, uint tokenId) public correctNftType(nftType){\r\n\t\t// 1. Verify he owns the NFT\r\n\t\trequire(bridgeableNfts[nftType-1].ownerOf(tokenId) == msg.sender, \"NOT_OWNER\");\r\n\r\n\t\t// 2. Burn bridgeable nft\r\n\t\tbridgeableNfts[nftType-1].burn(tokenId);\r\n\r\n\t\t// 3. transfer nft to msg.sender\r\n\t\tnft.transferFrom(address(this), msg.sender, tokenId);\r\n\r\n\t\temit BridgeableNftToNft(nftType, tokenId);\r\n\t}\r\n\r\n\t// Swap bridgeable nft for unbridgeable nfts\r\n\tfunction getNfts(uint nftType, uint[] calldata ids) external correctNftType(nftType){\r\n\t\t// 1. max 10 at the same time\r\n\t\trequire(ids.length <= 10, \"MAX_10\");\r\n\r\n\t\t// 2. loop over ids\r\n\t\tfor(uint i = 0; i < ids.length; i++){\r\n\t\t\tgetNft(nftType, ids[i]);\r\n\t\t}\r\n\t}\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract GFarmNftInterface\",\"name\":\"_nft\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"BridgeableNftToNft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NftToBridgeableNft\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bridgeableNfts\",\"outputs\":[{\"internalType\":\"contract GFarmBridgeableNftInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getBridgeableNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"getBridgeableNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"getNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract GFarmNftInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract GFarmBridgeableNftInterface[5]\",\"name\":\"_bridgeableNfts\",\"type\":\"address[5]\"}],\"name\":\"setBridgeableNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GFarmNftSwap","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"1500","ConstructorArguments":"00000000000000000000000043ccd9ea8f64b8918267f7ee4a071d3e9168f9cd","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d7b14ee9177a1a8cb3bbc60e9d04f36d7230ca4f98128aae160fb802511dfa91"}]}