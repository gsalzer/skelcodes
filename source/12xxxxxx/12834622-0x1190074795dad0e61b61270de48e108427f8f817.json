{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n    *Website:  https://www.coinmerge.io\r\n    *Telegram: https://t.me/CoinMergeMain\r\n    *Twitter: https://twitter.com/coinmerge?s=21\r\n    *\r\n    *CoinMerge is the revolutionary new token and platform that not only rewards holders in Ethereum just for holding, \r\n    * but is also building and expanding on a platform that combines all of the best charts and data from sites like DexTools \r\n    * with all of the Community chat features offered by programs like Telegram, into a single, seamless, easy to use platform.\r\n    *\r\n    * Using FTPEthReflect\r\n    *   - FTPEthReflect is a contract as a service (CaaS). Let your traders earn rewards in ETH\r\n    *\r\n    * Withdraw at https://app.fairtokenproject.com\r\n    *   - Recommended wallet is Metamask. Support for additional wallets coming soon!\r\n    *\r\n    * ****USING FTPAntiBot**** \r\n    * \r\n    * Visit FairTokenProject.com to learn how to use FTPAntiBot and FTP Eth Redist with your project\r\n    */ \r\n\r\n    // SPDX-License-Identifier: MIT\r\n\r\n    pragma solidity ^0.8.4;\r\n\r\n    abstract contract Context {\r\n        function _msgSender() internal view virtual returns (address) {\r\n            return msg.sender;\r\n        }\r\n    }\r\n\r\n    interface IERC20 {\r\n        function totalSupply() external view returns (uint256);\r\n        function balanceOf(address account) external view returns (uint256);\r\n        function transfer(address recipient, uint256 amount) external returns (bool);\r\n        function allowance(address owner, address spender) external view returns (uint256);\r\n        function approve(address spender, uint256 amount) external returns (bool);\r\n        function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n        event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    }\r\n\r\n    library SafeMath {\r\n        function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            uint256 c = a + b;\r\n            require(c >= a, \"SafeMath: addition overflow\");\r\n            return c;\r\n        }\r\n\r\n        function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return sub(a, b, \"SafeMath: subtraction overflow\");\r\n        }\r\n\r\n        function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n            require(b <= a, errorMessage);\r\n            uint256 c = a - b;\r\n            return c;\r\n        }\r\n\r\n        function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            if (a == 0) {\r\n                return 0;\r\n            }\r\n            uint256 c = a * b;\r\n            require(c / a == b, \"SafeMath: multiplication overflow\");\r\n            return c;\r\n        }\r\n\r\n        function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return div(a, b, \"SafeMath: division by zero\");\r\n        }\r\n\r\n        function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n            require(b > 0, errorMessage);\r\n            uint256 c = a / b;\r\n            return c;\r\n        }\r\n    }\r\n\r\n    contract Ownable is Context {\r\n        address private m_Owner;\r\n        event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n        constructor () {\r\n            address msgSender = _msgSender();\r\n            m_Owner = msgSender;\r\n            emit OwnershipTransferred(address(0), msgSender);\r\n        }\r\n\r\n        function owner() public view returns (address) {\r\n            return m_Owner;\r\n        }\r\n\r\n        function _transferOwnership(address _address) internal onlyOwner() {\r\n            emit OwnershipTransferred(m_Owner, _address);\r\n            m_Owner = _address;\r\n        }\r\n\r\n        modifier onlyOwner() {\r\n            require(_msgSender() == m_Owner, \"Ownable: caller is not the owner\");\r\n            _;\r\n        }                                                                                           // You will notice there is no renounceOwnership() This is an unsafe and unnecessary practice\r\n    }                                                                                               // By renouncing ownership you lose control over your coin and open it up to potential attacks \r\n                                                                                                    // This practice only came about because of the lack of understanding on how contracts work\r\n    interface IUniswapV2Factory {                                                                   // We advise not using a renounceOwnership() function. You can look up hacks of address(0) contracts.\r\n        function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    }\r\n\r\n    interface IUniswapV2Router02 {\r\n        function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            uint amountIn,\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external;\r\n        function factory() external pure returns (address);\r\n        function WETH() external pure returns (address);\r\n        function addLiquidityETH(\r\n            address token,\r\n            uint amountTokenDesired,\r\n            uint amountTokenMin,\r\n            uint amountETHMin,\r\n            address to,\r\n            uint deadline\r\n        ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    }\r\n\r\n    interface FTPAntiBot {                                                                          // Here we create the interface to interact with AntiBot\r\n        function scanAddress(address _address, address _safeAddress, address _origin) external returns (bool);\r\n        function registerBlock(address _recipient, address _sender, address _origin) external;\r\n    }\r\n    interface FTPEthReflect {\r\n        function init(address _contract, uint256 _alloc, address _pair, address _pairCurrency, uint256 _liquidity, uint256 _supply) external;\r\n        // function getAlloc() external view returns (uint256);\r\n        function trackSell(address _holder, uint256 _newEth) external;\r\n        function trackPurchase(address _holder) external;\r\n    }\r\n    interface FTPExternal {\r\n        function owner() external returns(address);\r\n        function deposit(uint256 _amount) external;\r\n    }\r\n\r\n    contract CoinMerge is Context, IERC20, Ownable {\r\n        using SafeMath for uint256;\r\n        \r\n        uint256 private constant TOTAL_SUPPLY = 5000000000 * 10**9;\r\n        string private m_Name = \"Coin Merge\";\r\n        string private m_Symbol = \"CMERGE\";\r\n        uint8 private m_Decimals = 9;\r\n        \r\n        uint256 private m_TxLimit  = 24000000 * 10**9;\r\n        uint256 private m_WalletLimit = m_TxLimit;\r\n        uint256 private m_TXRelease;\r\n        uint256 private m_PreviousBalance;\r\n        \r\n        uint8 private m_DevFee = 5;    \r\n        uint8 private m_RedistFee = 5;\r\n\r\n        address payable private m_ProjectWallet;\r\n        address private m_UniswapV2Pair;\r\n        \r\n        bool private m_Launched = false;\r\n        bool private m_IsSwap = false;\r\n        bool private m_Liquidity = false;\r\n        \r\n        mapping (address => bool) private m_Banned;\r\n        mapping (address => bool) private m_TeamMember;\r\n        mapping (address => bool) private m_ExcludedAddresses;\r\n        mapping (address => uint256) private m_Balances; \r\n        mapping (address => uint256) private m_IncomingEth;\r\n        mapping (address => uint256) private m_TeamBalance;\r\n        mapping (address => mapping (address => uint256)) private m_Allowances;\r\n\r\n        // ETH REFLECT\r\n        FTPEthReflect private EthReflect;\r\n        address payable m_EthReflectSvcAddress = payable(0x574Fc478BC45cE144105Fa44D98B4B2e4BD442CB);\r\n        uint256 m_EthReflectAlloc;\r\n        uint256 m_EthReflectAmount;\r\n        address payable private m_ExternalServiceAddress = payable(0x1Fc90cbA64722D5e70AF16783a2DFAcfD19F3beD);\r\n        \r\n        FTPExternal private External;\r\n        FTPAntiBot private AntiBot;\r\n        IUniswapV2Router02 private m_UniswapV2Router;\r\n\r\n        event MaxOutTxLimit(uint MaxTransaction);\r\n        event BanAddress(address Address, address Origin);\r\n        \r\n        modifier lockTheSwap {\r\n            m_IsSwap = true;\r\n            _;\r\n            m_IsSwap = false;\r\n        }\r\n\r\n        receive() external payable {\r\n            m_IncomingEth[msg.sender] += msg.value;\r\n        }\r\n\r\n        constructor () {\r\n            AntiBot = FTPAntiBot(0xCD5312d086f078D1554e8813C27Cf6C9D1C3D9b3);       \r\n            External = FTPExternal(m_ExternalServiceAddress);\r\n            EthReflect = FTPEthReflect(m_EthReflectSvcAddress);\r\n\r\n            m_Balances[address(this)] = TOTAL_SUPPLY;        \r\n            m_ExcludedAddresses[address(this)] = true;\r\n            m_ExcludedAddresses[owner()] = true;\r\n            m_TeamBalance[0xbAAAaEb86551aB8f0C04Bb45C1BC10167E9377c7] = 0;\r\n            m_TeamBalance[0xf101308187ef98d1acFa34b774CF3334Ec7279e4] = 0;\r\n            m_TeamBalance[0x16E7451D072eA28f2952eefCd7cC4A30B1F6A557] = 0;\r\n            m_TeamMember[0xbAAAaEb86551aB8f0C04Bb45C1BC10167E9377c7] = true;\r\n            m_TeamMember[0xf101308187ef98d1acFa34b774CF3334Ec7279e4] = true;\r\n            m_TeamMember[0x16E7451D072eA28f2952eefCd7cC4A30B1F6A557] = true;\r\n            emit Transfer(address(0), address(this), TOTAL_SUPPLY);\r\n        }\r\n\r\n    // ####################\r\n    // ##### DEFAULTS #####\r\n    // ####################\r\n\r\n        function name() public view returns (string memory) {\r\n            return m_Name;\r\n        }\r\n\r\n        function symbol() public view returns (string memory) {\r\n            return m_Symbol;\r\n        }\r\n\r\n        function decimals() public view returns (uint8) {\r\n            return m_Decimals;\r\n        }\r\n\r\n    // #####################\r\n    // ##### OVERRIDES #####\r\n    // #####################\r\n\r\n        function totalSupply() public pure override returns (uint256) {\r\n            return TOTAL_SUPPLY;\r\n        }\r\n\r\n        function balanceOf(address _account) public view override returns (uint256) {\r\n            return m_Balances[_account];\r\n        }\r\n\r\n        function transfer(address _recipient, uint256 _amount) public override returns (bool) {\r\n            _transfer(_msgSender(), _recipient, _amount);\r\n            return true;\r\n        }\r\n\r\n        function allowance(address _owner, address _spender) public view override returns (uint256) {\r\n            return m_Allowances[_owner][_spender];\r\n        }\r\n\r\n        function approve(address _spender, uint256 _amount) public override returns (bool) {\r\n            _approve(_msgSender(), _spender, _amount);\r\n            return true;\r\n        }\r\n\r\n        function transferFrom(address _sender, address _recipient, uint256 _amount) public override returns (bool) {\r\n            _transfer(_sender, _recipient, _amount);\r\n            _approve(_sender, _msgSender(), m_Allowances[_sender][_msgSender()].sub(_amount, \"ERC20: transfer amount exceeds allowance\"));\r\n            return true;\r\n        }\r\n\r\n    // ####################\r\n    // ##### PRIVATES #####\r\n    // ####################\r\n\r\n        function _readyToTax(address _sender) private view returns(bool) {\r\n            return !m_IsSwap && _sender != m_UniswapV2Pair;\r\n        }\r\n\r\n        function _pleb(address _sender, address _recipient) private view returns(bool) {\r\n            return !(m_ExcludedAddresses[_sender] || m_ExcludedAddresses[_recipient]);\r\n        }\r\n\r\n        function _isTrade(address _sender, address _recipient) private view returns(bool) {\r\n            return _sender == m_UniswapV2Pair || _recipient == m_UniswapV2Pair;\r\n        }\r\n\r\n        function _senderNotUni(address _sender) private view returns(bool) {\r\n            return _sender != m_UniswapV2Pair;\r\n        }\r\n        function _isBuy(address _sender) private view returns (bool) {\r\n            return _sender == m_UniswapV2Pair;\r\n        }\r\n\r\n        function _txRestricted(address _sender, address _recipient) private view returns(bool) {\r\n            return _sender == m_UniswapV2Pair && !m_ExcludedAddresses[_recipient];\r\n        }\r\n\r\n        function _walletCapped(address _recipient) private view returns(bool) {\r\n            return _recipient != m_UniswapV2Pair && !m_ExcludedAddresses[_recipient];\r\n        }\r\n\r\n        function _checkTX() private view returns(uint256) {\r\n            if(block.timestamp <= m_TXRelease)\r\n                return m_TxLimit;\r\n            else\r\n                return TOTAL_SUPPLY;\r\n        }\r\n\r\n        function _approve(address _owner, address _spender, uint256 _amount) private {\r\n            require(_owner != address(0), \"ERC20: approve from the zero address\");\r\n            require(_spender != address(0), \"ERC20: approve to the zero address\");\r\n            m_Allowances[_owner][_spender] = _amount;\r\n            emit Approval(_owner, _spender, _amount);\r\n        }\r\n\r\n        function _transfer(address _sender, address _recipient, uint256 _amount) private {\r\n            require(_sender != address(0), \"ERC20: transfer from the zero address\");\r\n            require(_amount > 0, \"Transfer amount must be greater than zero\");\r\n            require(!m_Banned[_sender] && !m_Banned[_recipient] && !m_Banned[tx.origin], \"You were manually banned\");        \r\n            \r\n            uint256 _devFee = _setFee(_sender, _recipient, m_DevFee);\r\n            uint256 _redistFee = _setFee(_sender, _recipient, m_RedistFee);\r\n            uint256 _totalFee = _devFee.add(_redistFee);\r\n            uint256 _feeAmount = _amount.div(100).mul(_totalFee);\r\n            uint256 _newAmount = _amount.sub(_feeAmount);        \r\n        \r\n            if(_isTrade(_sender, _recipient)){\r\n                require(!AntiBot.scanAddress(_recipient, m_UniswapV2Pair, tx.origin), \"Beep Beep Boop, You're a piece of poop\");                                          \r\n                require(!AntiBot.scanAddress(_sender, m_UniswapV2Pair, tx.origin),  \"Beep Beep Boop, You're a piece of poop\");\r\n                AntiBot.registerBlock(_sender, _recipient, tx.origin); \r\n            }       \r\n                \r\n            if(_walletCapped(_recipient))\r\n                require(balanceOf(_recipient).add(_amount) <= _checkTX());                                     \r\n                \r\n            if (_pleb(_sender, _recipient)) {\r\n                require(m_Launched);\r\n                if (_txRestricted(_sender, _recipient)) \r\n                    require(_amount <= _checkTX());\r\n                _tax(_sender);                                                                      \r\n            }\r\n            \r\n            m_Balances[_sender] = m_Balances[_sender].sub(_amount);\r\n            m_Balances[_recipient] = m_Balances[_recipient].add(_newAmount);\r\n            m_Balances[address(this)] = m_Balances[address(this)].add(_feeAmount);\r\n            \r\n            emit Transfer(_sender, _recipient, _newAmount);        \r\n            _trackEthReflection(_sender, _recipient);\r\n        }\r\n\r\n        function _trackEthReflection(address _sender, address _recipient) private {\r\n            if (_pleb(_sender, _recipient)) {\r\n                if (_isBuy(_sender))\r\n                    EthReflect.trackPurchase(_recipient);\r\n                else if (m_EthReflectAmount > 0){\r\n                    EthReflect.trackSell(_sender, m_EthReflectAmount);\r\n                    m_EthReflectAmount = 0;\r\n                }\r\n            }\r\n        }\r\n        \r\n        function _setFee(address _sender, address _recipient,uint256 _amount) private view returns(uint256){\r\n            bool _takeFee = !(m_ExcludedAddresses[_sender] || m_ExcludedAddresses[_recipient]);\r\n            uint256 _fee = _amount;\r\n            if(!_takeFee)\r\n                _fee = 0;\r\n            return _fee;\r\n        }\r\n\r\n        function _tax(address _sender) private {\r\n            uint256 _tokenBalance = balanceOf(address(this));\r\n            if (_readyToTax(_sender)) {\r\n                _swapTokensForETH(_tokenBalance);\r\n                _disperseEth();\r\n            }\r\n        }\r\n\r\n        function _swapTokensForETH(uint256 _amount) private lockTheSwap {                         \r\n            address[] memory _path = new address[](2);                                              \r\n            _path[0] = address(this);                                                               \r\n            _path[1] = m_UniswapV2Router.WETH();                                                   \r\n            _approve(address(this), address(m_UniswapV2Router), _amount);                           \r\n            m_UniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                _amount,\r\n                0,\r\n                _path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n        }\r\n        \r\n        function _disperseEth() private {\r\n            uint256 _currentAmount = m_IncomingEth[address(m_UniswapV2Router)].sub(m_PreviousBalance);\r\n            uint256 _redistBalance = _currentAmount.div(2);\r\n            uint256 _ethBalance = _currentAmount.sub(_redistBalance);                                                                             \r\n            uint256 _devBalance = _ethBalance.mul(1000).div(3333);               \r\n            uint256 _teamBalance = _ethBalance.mul(10).div(126).add(_ethBalance.div(10)).add(_ethBalance.mul(100).div(1666));\r\n            uint256 _projectBalance = _ethBalance.sub(_teamBalance).sub(_devBalance);\r\n            m_EthReflectAmount = _redistBalance;\r\n            m_TeamBalance[0xbAAAaEb86551aB8f0C04Bb45C1BC10167E9377c7] = m_TeamBalance[0xbAAAaEb86551aB8f0C04Bb45C1BC10167E9377c7].add(_ethBalance.mul(10).div(126));\r\n            m_TeamBalance[0xf101308187ef98d1acFa34b774CF3334Ec7279e4] = m_TeamBalance[0xf101308187ef98d1acFa34b774CF3334Ec7279e4].add(_ethBalance.div(10));\r\n            m_TeamBalance[0x16E7451D072eA28f2952eefCd7cC4A30B1F6A557] = m_TeamBalance[0x16E7451D072eA28f2952eefCd7cC4A30B1F6A557].add(_ethBalance.mul(100).div(1666));\r\n\r\n\r\n\r\n            payable(address(External)).transfer(_devBalance);\r\n            External.deposit(_devBalance);\r\n            payable(address(EthReflect)).transfer(_redistBalance); \r\n        // m_ProjectWallet.transfer(_ethBalance.mul(1000).div(2173));                     \r\n            m_ProjectWallet.transfer(_projectBalance);                           // transfer remainder instead, incase rounding is off \r\n            \r\n            m_PreviousBalance = m_IncomingEth[address(m_UniswapV2Router)];                                                   \r\n        }                                                                                           \r\n        \r\n    // ####################\r\n    // ##### EXTERNAL #####\r\n    // ####################\r\n\r\n    // ######################\r\n    // ##### ONLY OWNER #####\r\n    // ######################\r\n\r\n        function addLiquidity() external onlyOwner() {\r\n            require(!m_Liquidity,\"trading is already open\");\r\n            uint256 _ethBalance = address(this).balance;\r\n            m_UniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n            _approve(address(this), address(m_UniswapV2Router), TOTAL_SUPPLY);\r\n            m_UniswapV2Pair = IUniswapV2Factory(m_UniswapV2Router.factory()).createPair(address(this), m_UniswapV2Router.WETH());\r\n            m_UniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n            EthReflect.init(address(this), 5000, m_UniswapV2Pair, m_UniswapV2Router.WETH(), _ethBalance, TOTAL_SUPPLY);\r\n            IERC20(m_UniswapV2Pair).approve(address(m_UniswapV2Router), type(uint).max);\r\n            m_Liquidity = true;        \r\n        }\r\n\r\n        function launch() external onlyOwner() {\r\n            m_Launched = true;\r\n            m_TXRelease = block.timestamp + (7 minutes);\r\n        }\r\n\r\n        function transferOwnership(address _address) external onlyOwner() {\r\n            m_ExcludedAddresses[owner()] = false;\r\n            _transferOwnership(_address);        \r\n            m_ExcludedAddresses[_address] = true;\r\n        }\r\n\r\n        function addTaxWhitelist(address _address) external onlyOwner() {\r\n            m_ExcludedAddresses[_address] = true;\r\n        }\r\n\r\n        function removeTaxWhitelist(address _address) external onlyOwner() {\r\n            m_ExcludedAddresses[_address] = false;\r\n        }\r\n\r\n        function setTxLimit(uint256 _amount) external onlyOwner() {                                            \r\n            m_TxLimit = _amount.mul(10**9);\r\n            emit MaxOutTxLimit(m_TxLimit);\r\n        }\r\n\r\n        function setWalletLimit(uint256 _amount) external onlyOwner() {\r\n            m_WalletLimit = _amount.mul(10**9);\r\n        }\r\n        \r\n        function manualBan(address _a) external onlyOwner() {\r\n            m_Banned[_a] = true;\r\n        }\r\n        \r\n        function removeBan(address _a) external onlyOwner() {\r\n            m_Banned[_a] = false;\r\n        }\r\n\r\n        function teamWithdraw() external {\r\n            require(m_TeamMember[_msgSender()]);\r\n            require(m_TeamBalance[_msgSender()] > 0);\r\n            payable(_msgSender()).transfer(m_TeamBalance[_msgSender()]);\r\n            m_TeamBalance[_msgSender()] = 0;\r\n        }\r\n        \r\n        function setProjectWallet(address payable _address) external onlyOwner() {                  \r\n            m_ProjectWallet = _address;    \r\n            m_ExcludedAddresses[_address] = true;\r\n        }\r\n    }","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Origin\",\"type\":\"address\"}],\"name\":\"BanAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"MaxTransaction\",\"type\":\"uint256\"}],\"name\":\"MaxOutTxLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addTaxWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"manualBan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"removeBan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeTaxWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setProjectWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"CoinMerge","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c178cc668993e42f1ada2a3278b03175e2036054f3069481b40269a075270102"}]}