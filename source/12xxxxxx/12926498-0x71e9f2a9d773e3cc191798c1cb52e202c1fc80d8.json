{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/ganesh/repos/dfyn/router-aggregator/contracts/IOneSplit.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n//\\n//  [ msg.sender ]\\n//       | |\\n//       | |\\n//       \\\\_/\\n// +---------------+ ________________________________\\n// | OneSplitAudit | _______________________________  \\\\\\n// +---------------+                                 \\\\ \\\\\\n//       | |                      ______________      | | (staticcall)\\n//       | |                    /  ____________  \\\\    | |\\n//       | | (call)            / /              \\\\ \\\\   | |\\n//       | |                  / /               | |   | |\\n//       \\\\_/                  | |               \\\\_/   \\\\_/\\n// +--------------+           | |           +----------------------+\\n// | OneSplitWrap |           | |           |   OneSplitViewWrap   |\\n// +--------------+           | |           +----------------------+\\n//       | |                  | |                     | |\\n//       | | (delegatecall)   | | (staticcall)        | | (staticcall)\\n//       \\\\_/                  | |                     \\\\_/\\n// +--------------+           | |             +------------------+\\n// |   OneSplit   |           | |             |   OneSplitView   |\\n// +--------------+           | |             +------------------+\\n//       | |                  / /\\n//        \\\\ \\\\________________/ /\\n//         \\\\__________________/\\n//\\n\\n\\ncontract IOneSplitConsts {\\n    // flags = FLAG_DISABLE_UNISWAP + FLAG_DISABLE_BANCOR + ...\\n    uint256 internal constant FLAG_DISABLE_UNISWAP = 0x01;\\n    uint256 internal constant DEPRECATED_FLAG_DISABLE_KYBER = 0x02; // Deprecated\\n    uint256 internal constant FLAG_DISABLE_BANCOR = 0x04;\\n    uint256 internal constant FLAG_DISABLE_OASIS = 0x08;\\n    uint256 internal constant FLAG_DISABLE_COMPOUND = 0x10;\\n    uint256 internal constant FLAG_DISABLE_FULCRUM = 0x20;\\n    uint256 internal constant FLAG_DISABLE_CHAI = 0x40;\\n    uint256 internal constant FLAG_DISABLE_AAVE = 0x80;\\n    uint256 internal constant FLAG_DISABLE_SMART_TOKEN = 0x100;\\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_ETH = 0x200; // Deprecated, Turned off by default\\n    uint256 internal constant FLAG_DISABLE_BDAI = 0x400;\\n    uint256 internal constant FLAG_DISABLE_IEARN = 0x400000000000000000;\\n    uint256 internal constant FLAG_DISABLE_CURVE_COMPOUND = 0x1000;\\n    uint256 internal constant FLAG_DISABLE_CURVE_USDT = 0x2000;\\n    uint256 internal constant FLAG_DISABLE_CURVE_Y = 0x4000;\\n    uint256 internal constant FLAG_DISABLE_CURVE_BINANCE = 0x8000;\\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_DAI = 0x10000; // Deprecated, Turned off by default\\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_USDC = 0x20000; // Deprecated, Turned off by default\\n    uint256 internal constant FLAG_DISABLE_CURVE_SYNTHETIX = 0x40000;\\n    uint256 internal constant FLAG_DISABLE_WETH = 0x80000;\\n    uint256 internal constant FLAG_DISABLE_UNISWAP_COMPOUND = 0x100000; // Works only when one of assets is ETH or FLAG_ENABLE_MULTI_PATH_ETH\\n    uint256 internal constant FLAG_DISABLE_UNISWAP_CHAI = 0x200000; // Works only when ETH<>DAI or FLAG_ENABLE_MULTI_PATH_ETH\\n    uint256 internal constant FLAG_DISABLE_UNISWAP_AAVE = 0x400000; // Works only when one of assets is ETH or FLAG_ENABLE_MULTI_PATH_ETH\\n    uint256 internal constant FLAG_DISABLE_IDLE = 0x800000;\\n    uint256 internal constant FLAG_DISABLE_MOONISWAP = 0x1000000;\\n    uint256 internal constant FLAG_DISABLE_UNISWAP_V2 = 0x2000000;\\n    uint256 internal constant FLAG_DISABLE_UNISWAP_V2_ETH = 0x4000000;\\n    uint256 internal constant FLAG_DISABLE_UNISWAP_V2_DAI = 0x8000000;\\n    uint256 internal constant FLAG_DISABLE_UNISWAP_V2_USDC = 0x10000000;\\n    uint256 internal constant FLAG_DISABLE_ALL_SPLIT_SOURCES = 0x20000000;\\n    uint256 internal constant FLAG_DISABLE_ALL_WRAP_SOURCES = 0x40000000;\\n    uint256 internal constant FLAG_DISABLE_CURVE_PAX = 0x80000000;\\n    uint256 internal constant FLAG_DISABLE_CURVE_RENBTC = 0x100000000;\\n    uint256 internal constant FLAG_DISABLE_CURVE_TBTC = 0x200000000;\\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_USDT = 0x400000000; // Deprecated, Turned off by default\\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_WBTC = 0x800000000; // Deprecated, Turned off by default\\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_TBTC = 0x1000000000; // Deprecated, Turned off by default\\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_RENBTC = 0x2000000000; // Deprecated, Turned off by default\\n    uint256 internal constant FLAG_DISABLE_DFORCE_SWAP = 0x4000000000;\\n    uint256 internal constant FLAG_DISABLE_SHELL = 0x8000000000;\\n    uint256 internal constant FLAG_ENABLE_CHI_BURN = 0x10000000000;\\n    uint256 internal constant FLAG_DISABLE_MSTABLE_MUSD = 0x20000000000;\\n    uint256 internal constant FLAG_DISABLE_CURVE_SBTC = 0x40000000000;\\n    uint256 internal constant FLAG_DISABLE_DMM = 0x80000000000;\\n    uint256 internal constant FLAG_DISABLE_UNISWAP_ALL = 0x100000000000;\\n    uint256 internal constant FLAG_DISABLE_CURVE_ALL = 0x200000000000;\\n    uint256 internal constant FLAG_DISABLE_UNISWAP_V2_ALL = 0x400000000000;\\n    uint256 internal constant FLAG_DISABLE_SPLIT_RECALCULATION = 0x800000000000;\\n    uint256 internal constant FLAG_DISABLE_BALANCER_ALL = 0x1000000000000;\\n    uint256 internal constant FLAG_DISABLE_BALANCER_1 = 0x2000000000000;\\n    uint256 internal constant FLAG_DISABLE_BALANCER_2 = 0x4000000000000;\\n    uint256 internal constant FLAG_DISABLE_BALANCER_3 = 0x8000000000000;\\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_KYBER_UNISWAP_RESERVE = 0x10000000000000; // Deprecated, Turned off by default\\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_KYBER_OASIS_RESERVE = 0x20000000000000; // Deprecated, Turned off by default\\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_KYBER_BANCOR_RESERVE = 0x40000000000000; // Deprecated, Turned off by default\\n    uint256 internal constant FLAG_ENABLE_REFERRAL_GAS_SPONSORSHIP = 0x80000000000000; // Turned off by default\\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_COMP = 0x100000000000000; // Deprecated, Turned off by default\\n    uint256 internal constant FLAG_DISABLE_KYBER_ALL = 0x200000000000000;\\n    uint256 internal constant FLAG_DISABLE_KYBER_1 = 0x400000000000000;\\n    uint256 internal constant FLAG_DISABLE_KYBER_2 = 0x800000000000000;\\n    uint256 internal constant FLAG_DISABLE_KYBER_3 = 0x1000000000000000;\\n    uint256 internal constant FLAG_DISABLE_KYBER_4 = 0x2000000000000000;\\n    uint256 internal constant FLAG_ENABLE_CHI_BURN_BY_ORIGIN = 0x4000000000000000;\\n    uint256 internal constant FLAG_DISABLE_MOONISWAP_ALL = 0x8000000000000000;\\n    uint256 internal constant FLAG_DISABLE_MOONISWAP_ETH = 0x10000000000000000;\\n    uint256 internal constant FLAG_DISABLE_MOONISWAP_DAI = 0x20000000000000000;\\n    uint256 internal constant FLAG_DISABLE_MOONISWAP_USDC = 0x40000000000000000;\\n    uint256 internal constant FLAG_DISABLE_MOONISWAP_POOL_TOKEN = 0x80000000000000000;\\n    uint256 internal constant FLAG_DISABLE_DFYN= 0x800; //0x400000000000000000\\n}\\n\\n\\ncontract IOneSplit is IOneSplitConsts {\\n    function getExpectedReturn(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 flags // See constants in IOneSplit.sol\\n    )\\n        public\\n        view\\n        returns(\\n            uint256 returnAmount,\\n            uint256[] memory distribution\\n        );\\n\\n    function getExpectedReturnWithGas(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 flags, // See constants in IOneSplit.sol\\n        uint256 destTokenEthPriceTimesGasPrice\\n    )\\n        public\\n        view\\n        returns(\\n            uint256 returnAmount,\\n            uint256 estimateGasAmount,\\n            uint256[] memory distribution\\n        );\\n\\n    function swap(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 minReturn,\\n        uint256[] memory distribution,\\n        uint256 flags,\\n        bool isWrapper\\n    )\\n        public\\n        payable\\n        returns(uint256 returnAmount);\\n    \\n    function swapMulti(\\n        IERC20[] memory tokens,\\n        uint256 amount,\\n        uint256 minReturn,\\n        uint256[] memory distribution,\\n        uint256[] memory flags,\\n        bool isWrapper\\n    )\\n        public\\n        payable\\n        returns(uint256 returnAmount);\\n}\\n\\n\\ncontract IOneSplitMulti is IOneSplit {\\n    function getExpectedReturnWithGasMulti(\\n        IERC20[] memory tokens,\\n        uint256 amount,\\n        uint256[] memory parts,\\n        uint256[] memory flags,\\n        uint256[] memory destTokenEthPriceTimesGasPrices\\n    )\\n        public\\n        view\\n        returns(\\n            uint256[] memory returnAmounts,\\n            uint256 estimateGasAmount,\\n            uint256[] memory distribution\\n        );\\n\\n}\\n\"\r\n    },\r\n    \"/Users/ganesh/repos/dfyn/router-aggregator/contracts/OneSplitBase.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interface/IUniswapFactory.sol\\\";\\nimport \\\"./interface/IUniswapV2Factory.sol\\\";\\nimport \\\"./IOneSplit.sol\\\";\\nimport \\\"./UniversalERC20.sol\\\";\\nimport \\\"./interface/IWETH.sol\\\";\\n\\ncontract IOneSplitView is IOneSplitConsts {\\n    function getExpectedReturn(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 flags\\n    ) public view returns (uint256 returnAmount, uint256[] memory distribution);\\n\\n    function getExpectedReturnWithGas(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 flags,\\n        uint256 destTokenEthPriceTimesGasPrice\\n    )\\n        public\\n        view\\n        returns (\\n            uint256 returnAmount,\\n            uint256 estimateGasAmount,\\n            uint256[] memory distribution\\n        );\\n}\\n\\nlibrary DisableFlags {\\n    function check(uint256 flags, uint256 flag) internal pure returns (bool) {\\n        return (flags & flag) != 0;\\n    }\\n}\\n\\ncontract OneSplitRoot is IOneSplitView {\\n    using SafeMath for uint256;\\n    using DisableFlags for uint256;\\n\\n    using UniversalERC20 for IERC20;\\n    using UniversalERC20 for IWETH;\\n    using UniswapV2ExchangeLib for IUniswapV2Exchange;\\n\\n    uint256 internal constant DEXES_COUNT = 3;\\n    IERC20 internal constant ETH_ADDRESS =\\n        IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n    IERC20 internal constant ZERO_ADDRESS = IERC20(0);\\n    IWETH internal constant weth =\\n        IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n\\n    IUniswapFactory internal constant uniswapFactory =\\n        IUniswapFactory(0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95);\\n    IUniswapV2Factory internal constant uniswapV2 =\\n        IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f); //Ganache: 0x88b50446977d217Eda84F28edFC514E0e17Bf351\\n    IUniswapV2Factory internal constant dfynExchange =\\n        IUniswapV2Factory(0xE7Fb3e833eFE5F9c441105EB65Ef8b261266423B);\\n\\n    int256 internal constant VERY_NEGATIVE_VALUE = -1e72;\\n\\n    function _findBestDistribution(\\n        uint256 s, // parts\\n        int256[][] memory amounts // exchangesReturns\\n    )\\n        internal\\n        pure\\n        returns (int256 returnAmount, uint256[] memory distribution)\\n    {\\n        uint256 n = amounts.length;\\n\\n        int256[][] memory answer = new int256[][](n); // int[n][s+1]\\n        uint256[][] memory parent = new uint256[][](n); // int[n][s+1]\\n\\n        for (uint256 i = 0; i < n; i++) {\\n            answer[i] = new int256[](s + 1);\\n            parent[i] = new uint256[](s + 1);\\n        }\\n\\n        for (uint256 j = 0; j <= s; j++) {\\n            answer[0][j] = amounts[0][j];\\n            for (uint256 i = 1; i < n; i++) {\\n                answer[i][j] = -1e72;\\n            }\\n            parent[0][j] = 0;\\n        }\\n\\n        for (uint256 i = 1; i < n; i++) {\\n            for (uint256 j = 0; j <= s; j++) {\\n                answer[i][j] = answer[i - 1][j];\\n                parent[i][j] = j;\\n\\n                for (uint256 k = 1; k <= j; k++) {\\n                    if (answer[i - 1][j - k] + amounts[i][k] > answer[i][j]) {\\n                        answer[i][j] = answer[i - 1][j - k] + amounts[i][k];\\n                        parent[i][j] = j - k;\\n                    }\\n                }\\n            }\\n        }\\n\\n        distribution = new uint256[](DEXES_COUNT);\\n\\n        uint256 partsLeft = s;\\n        for (uint256 curExchange = n - 1; partsLeft > 0; curExchange--) {\\n            distribution[curExchange] =\\n                partsLeft -\\n                parent[curExchange][partsLeft];\\n            partsLeft = parent[curExchange][partsLeft];\\n        }\\n\\n        returnAmount = (answer[n - 1][s] == VERY_NEGATIVE_VALUE)\\n            ? 0\\n            : answer[n - 1][s];\\n    }\\n\\n    function _linearInterpolation(uint256 value, uint256 parts)\\n        internal\\n        pure\\n        returns (uint256[] memory rets)\\n    {\\n        rets = new uint256[](parts);\\n        for (uint256 i = 0; i < parts; i++) {\\n            rets[i] = value.mul(i + 1).div(parts);\\n        }\\n    }\\n\\n    function _tokensEqual(IERC20 tokenA, IERC20 tokenB)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return ((tokenA.isETH() && tokenB.isETH()) || tokenA == tokenB);\\n    }\\n}\\n\\ncontract OneSplitViewWrapBase is IOneSplitView, OneSplitRoot {\\n    function getExpectedReturn(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 flags // See constants in IOneSplit.sol\\n    )\\n        public\\n        view\\n        returns (uint256 returnAmount, uint256[] memory distribution)\\n    {\\n        (returnAmount, , distribution) = this.getExpectedReturnWithGas(\\n            fromToken,\\n            destToken,\\n            amount,\\n            parts,\\n            flags,\\n            0\\n        );\\n    }\\n\\n    function getExpectedReturnWithGas(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 flags,\\n        uint256 destTokenEthPriceTimesGasPrice\\n    )\\n        public\\n        view\\n        returns (\\n            uint256 returnAmount,\\n            uint256 estimateGasAmount,\\n            uint256[] memory distribution\\n        )\\n    {\\n        return\\n            _getExpectedReturnRespectingGasFloor(\\n                fromToken,\\n                destToken,\\n                amount,\\n                parts,\\n                flags,\\n                destTokenEthPriceTimesGasPrice\\n            );\\n    }\\n\\n    function _getExpectedReturnRespectingGasFloor(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 flags, // See constants in IOneSplit.sol\\n        uint256 destTokenEthPriceTimesGasPrice\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 returnAmount,\\n            uint256 estimateGasAmount,\\n            uint256[] memory distribution\\n        );\\n}\\n\\ncontract OneSplitView is IOneSplitView, OneSplitRoot {\\n    function getExpectedReturn(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 flags // See constants in IOneSplit.sol\\n    )\\n        public\\n        view\\n        returns (uint256 returnAmount, uint256[] memory distribution)\\n    {\\n        (returnAmount, , distribution) = getExpectedReturnWithGas(\\n            fromToken,\\n            destToken,\\n            amount,\\n            parts,\\n            flags,\\n            0\\n        );\\n    }\\n\\n    function getExpectedReturnWithGas(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 flags, // See constants in IOneSplit.sol\\n        uint256 destTokenEthPriceTimesGasPrice\\n    )\\n        public\\n        view\\n        returns (\\n            uint256 returnAmount,\\n            uint256 estimateGasAmount,\\n            uint256[] memory distribution\\n        )\\n    {\\n        distribution = new uint256[](DEXES_COUNT);\\n\\n        if (fromToken == destToken) {\\n            return (amount, 0, distribution);\\n        }\\n\\n\\n            function(IERC20, IERC20, uint256, uint256, uint256)\\n                view\\n                returns (uint256[] memory, uint256)[DEXES_COUNT]\\n                memory reserves\\n         = _getAllReserves(flags);\\n\\n        int256[][] memory matrix = new int256[][](DEXES_COUNT);\\n        uint256[DEXES_COUNT] memory gases;\\n        bool atLeastOnePositive = false;\\n        for (uint256 i = 0; i < DEXES_COUNT; i++) {\\n            uint256[] memory rets;\\n            (rets, gases[i]) = reserves[i](\\n                fromToken,\\n                destToken,\\n                amount,\\n                parts,\\n                flags\\n            );\\n\\n            // Prepend zero and sub gas\\n            int256 gas = int256(\\n                gases[i].mul(destTokenEthPriceTimesGasPrice).div(1e18)\\n            );\\n            matrix[i] = new int256[](parts + 1);\\n            for (uint256 j = 0; j < rets.length; j++) {\\n                matrix[i][j + 1] = int256(rets[j]) - gas;\\n                atLeastOnePositive =\\n                    atLeastOnePositive ||\\n                    (matrix[i][j + 1] > 0);\\n            }\\n        }\\n\\n        if (!atLeastOnePositive) {\\n            for (uint256 i = 0; i < DEXES_COUNT; i++) {\\n                for (uint256 j = 1; j < parts + 1; j++) {\\n                    if (matrix[i][j] == 0) {\\n                        matrix[i][j] = VERY_NEGATIVE_VALUE;\\n                    }\\n                }\\n            }\\n        }\\n\\n        (, distribution) = _findBestDistribution(parts, matrix);\\n\\n        (returnAmount, estimateGasAmount) = _getReturnAndGasByDistribution(\\n            Args({\\n                fromToken: fromToken,\\n                destToken: destToken,\\n                amount: amount,\\n                parts: parts,\\n                flags: flags,\\n                destTokenEthPriceTimesGasPrice: destTokenEthPriceTimesGasPrice,\\n                distribution: distribution,\\n                matrix: matrix,\\n                gases: gases,\\n                reserves: reserves\\n            })\\n        );\\n        return (returnAmount, estimateGasAmount, distribution);\\n    }\\n \\n    struct Args {\\n        IERC20 fromToken;\\n        IERC20 destToken;\\n        uint256 amount;\\n        uint256 parts;\\n        uint256 flags;\\n        uint256 destTokenEthPriceTimesGasPrice;\\n        uint256[] distribution;\\n        int256[][] matrix;\\n        uint256[DEXES_COUNT] gases;\\n        function(IERC20, IERC20, uint256, uint256, uint256)\\n            view\\n            returns (uint256[] memory, uint256)[DEXES_COUNT] reserves;\\n    }\\n\\n    function _getReturnAndGasByDistribution(Args memory args)\\n        internal\\n        view\\n        returns (uint256 returnAmount, uint256 estimateGasAmount)\\n    {\\n        bool[DEXES_COUNT] memory exact = [\\n            true, // \\\"Uniswap\\\",\\n            true, // \\\"Uniswap V2\\\",\\n            true //DFYN\\n        ];\\n\\n        for (uint256 i = 0; i < DEXES_COUNT; i++) {\\n            if (args.distribution[i] > 0) {\\n                if (\\n                    args.distribution[i] == args.parts ||\\n                    exact[i] ||\\n                    args.flags.check(FLAG_DISABLE_SPLIT_RECALCULATION)\\n                ) {\\n                    estimateGasAmount = estimateGasAmount.add(args.gases[i]);\\n                    int256 value = args.matrix[i][args.distribution[i]];\\n                    returnAmount = returnAmount.add(\\n                        uint256(\\n                            (value == VERY_NEGATIVE_VALUE ? 0 : value) +\\n                                int256(\\n                                    args\\n                                    .gases[i]\\n                                    .mul(args.destTokenEthPriceTimesGasPrice)\\n                                    .div(1e18)\\n                                )\\n                        )\\n                    );\\n                } else {\\n                    (uint256[] memory rets, uint256 gas) = args.reserves[i](\\n                        args.fromToken,\\n                        args.destToken,\\n                        args.amount.mul(args.distribution[i]).div(args.parts),\\n                        1,\\n                        args.flags\\n                    );\\n                    estimateGasAmount = estimateGasAmount.add(gas);\\n                    returnAmount = returnAmount.add(rets[0]);\\n                }\\n            }\\n        }\\n    }\\n\\n    function _getAllReserves(uint256 flags)\\n        internal\\n        pure\\n        returns (\\n            function(IERC20, IERC20, uint256, uint256, uint256)\\n                view\\n                returns (uint256[] memory, uint256)[DEXES_COUNT]\\n                memory\\n        )\\n    {\\n        bool invert = flags.check(FLAG_DISABLE_ALL_SPLIT_SOURCES);\\n        return [\\n            invert !=\\n                flags.check(FLAG_DISABLE_UNISWAP_ALL | FLAG_DISABLE_UNISWAP)\\n                ? _calculateNoReturn\\n                : calculateUniswap,\\n            invert !=\\n                flags.check(\\n                    FLAG_DISABLE_UNISWAP_V2_ALL | FLAG_DISABLE_UNISWAP_V2\\n                )\\n                ? _calculateNoReturn\\n                : calculateUniswapV2,\\n            invert != flags.check(FLAG_DISABLE_DFYN)\\n                ? _calculateNoReturn\\n                : calculateDfyn\\n        ];\\n    }\\n\\n    function _calculateUniswapFormula(\\n        uint256 fromBalance,\\n        uint256 toBalance,\\n        uint256 amount\\n    ) internal pure returns (uint256) {\\n        if (amount == 0) {\\n            return 0;\\n        }\\n        return\\n            amount.mul(toBalance).mul(997).div(\\n                fromBalance.mul(1000).add(amount.mul(997))\\n            );\\n    }\\n\\n    function _calculateUniswap(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256[] memory amounts,\\n        uint256 /*flags*/\\n    ) internal view returns (uint256[] memory rets, uint256 gas) {\\n        rets = amounts;\\n\\n        if (!fromToken.isETH()) {\\n            IUniswapExchange fromExchange = uniswapFactory.getExchange(\\n                fromToken\\n            );\\n            if (fromExchange == IUniswapExchange(0)) {\\n                return (new uint256[](rets.length), 0);\\n            }\\n\\n            uint256 fromTokenBalance = fromToken.universalBalanceOf(\\n                address(fromExchange)\\n            );\\n            uint256 fromEtherBalance = address(fromExchange).balance;\\n\\n            for (uint256 i = 0; i < rets.length; i++) {\\n                rets[i] = _calculateUniswapFormula(\\n                    fromTokenBalance,\\n                    fromEtherBalance,\\n                    rets[i]\\n                );\\n            }\\n        }\\n\\n        if (!destToken.isETH()) {\\n            IUniswapExchange toExchange = uniswapFactory.getExchange(destToken);\\n            if (toExchange == IUniswapExchange(0)) {\\n                return (new uint256[](rets.length), 0);\\n            }\\n\\n            uint256 toEtherBalance = address(toExchange).balance;\\n            uint256 toTokenBalance = destToken.universalBalanceOf(\\n                address(toExchange)\\n            );\\n\\n            for (uint256 i = 0; i < rets.length; i++) {\\n                rets[i] = _calculateUniswapFormula(\\n                    toEtherBalance,\\n                    toTokenBalance,\\n                    rets[i]\\n                );\\n            }\\n        }\\n\\n        return (\\n            rets,\\n            fromToken.isETH() || destToken.isETH() ? 60_000 : 100_000\\n        );\\n    }\\n\\n    function calculateUniswap(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 flags\\n    ) internal view returns (uint256[] memory rets, uint256 gas) {\\n        return\\n            _calculateUniswap(\\n                fromToken,\\n                destToken,\\n                _linearInterpolation(amount, parts),\\n                flags\\n            );\\n    }\\n\\n    function calculateDfyn(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 flags\\n    ) internal view returns (uint256[] memory rets, uint256 gas) {\\n        return\\n            _calculateDfynswap(\\n                fromToken,\\n                destToken,\\n                _linearInterpolation(amount, parts),\\n                flags\\n            );\\n    }\\n\\n    function calculateUniswapV2(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 flags\\n    ) internal view returns (uint256[] memory rets, uint256 gas) {\\n        return\\n            _calculateUniswapV2(\\n                fromToken,\\n                destToken,\\n                _linearInterpolation(amount, parts),\\n                flags\\n            );\\n    }\\n\\n    function _calculateDfynswap(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256[] memory amounts,\\n        uint256 /*flags*/\\n    ) internal view returns (uint256[] memory rets, uint256 gas) {\\n        rets = new uint256[](amounts.length);\\n\\n        IERC20 fromTokenReal = fromToken.isETH() ? weth : fromToken;\\n        IERC20 destTokenReal = destToken.isETH() ? weth : destToken;\\n        IUniswapV2Exchange exchange = dfynExchange.getPair(\\n            fromTokenReal,\\n            destTokenReal\\n        );\\n        if (exchange != IUniswapV2Exchange(0)) {\\n            uint256 fromTokenBalance = fromTokenReal.universalBalanceOf(\\n                address(exchange)\\n            );\\n            uint256 destTokenBalance = destTokenReal.universalBalanceOf(\\n                address(exchange)\\n            );\\n            for (uint256 i = 0; i < amounts.length; i++) {\\n                rets[i] = _calculateUniswapFormula(\\n                    fromTokenBalance,\\n                    destTokenBalance,\\n                    amounts[i]\\n                );\\n            }\\n            return (rets, 50_000);\\n        }\\n    }\\n\\n    function _calculateUniswapV2(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256[] memory amounts,\\n        uint256 /*flags*/\\n    ) internal view returns (uint256[] memory rets, uint256 gas) {\\n        rets = new uint256[](amounts.length);\\n\\n        IERC20 fromTokenReal = fromToken.isETH() ? weth : fromToken;\\n        IERC20 destTokenReal = destToken.isETH() ? weth : destToken;\\n        IUniswapV2Exchange exchange = uniswapV2.getPair(\\n            fromTokenReal,\\n            destTokenReal\\n        );\\n        if (exchange != IUniswapV2Exchange(0)) {\\n            uint256 fromTokenBalance = fromTokenReal.universalBalanceOf(\\n                address(exchange)\\n            );\\n            uint256 destTokenBalance = destTokenReal.universalBalanceOf(\\n                address(exchange)\\n            );\\n            for (uint256 i = 0; i < amounts.length; i++) {\\n                rets[i] = _calculateUniswapFormula(\\n                    fromTokenBalance,\\n                    destTokenBalance,\\n                    amounts[i]\\n                );\\n            }\\n            return (rets, 50_000);\\n        }\\n    }\\n\\n    function _calculateNoReturn(\\n        IERC20, /*fromToken*/\\n        IERC20, /*destToken*/\\n        uint256, /*amount*/\\n        uint256 parts,\\n        uint256 /*flags*/\\n    ) internal view returns (uint256[] memory rets, uint256 gas) {\\n        this;\\n        return (new uint256[](parts), 0);\\n    }\\n}\\n\\ncontract OneSplitBaseWrap is IOneSplit, OneSplitRoot {\\n    function _swap(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256[] memory distribution,\\n        uint256 flags // See constants in IOneSplit.sol\\n    ) internal {\\n        if (fromToken == destToken) {\\n            return;\\n        }\\n        //todo: check with monice\\n        //fromToken.universalTransferFrom(msg.sender, address(this), amount);\\n\\n        // _swapFloor(\\n        //     fromToken,\\n        //     destToken,\\n        //     amount,\\n        //     distribution,\\n        //     flags\\n        // );\\n    }\\n\\n    function _swapFloor(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256[] memory distribution,\\n        uint256, /*flags*/ // See constants in IOneSplit.sol,\\n        bool isWrapper\\n    ) internal;\\n}\\n\\ncontract OneSplit is IOneSplit, OneSplitRoot {\\n    IOneSplitView public oneSplitView;\\n\\n    constructor(IOneSplitView _oneSplitView) public {\\n        oneSplitView = _oneSplitView;\\n    }\\n\\n    function() external payable {\\n        // solium-disable-next-line security/no-tx-origin\\n        require(msg.sender != tx.origin);\\n    }\\n\\n    function getExpectedReturn(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 flags\\n    )\\n        public\\n        view\\n        returns (uint256 returnAmount, uint256[] memory distribution)\\n    {\\n        (returnAmount, , distribution) = getExpectedReturnWithGas(\\n            fromToken,\\n            destToken,\\n            amount,\\n            parts,\\n            flags,\\n            0\\n        );\\n    }\\n\\n    function getExpectedReturnWithGas(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 flags,\\n        uint256 destTokenEthPriceTimesGasPrice\\n    )\\n        public\\n        view\\n        returns (\\n            uint256 returnAmount,\\n            uint256 estimateGasAmount,\\n            uint256[] memory distribution\\n        )\\n    {\\n        return\\n            oneSplitView.getExpectedReturnWithGas(\\n                fromToken,\\n                destToken,\\n                amount,\\n                parts,\\n                flags,\\n                destTokenEthPriceTimesGasPrice\\n            );\\n    }\\n    \\n    function getExpectedReturnWithGasMulti(\\n        IERC20[] memory tokens,\\n        uint256 amount,\\n        uint256[] memory parts,\\n        uint256[] memory flags,\\n        uint256[] memory destTokenEthPriceTimesGasPrices\\n    )\\n        public\\n        view\\n        returns(\\n            uint256[] memory returnAmounts,\\n            uint256 estimateGasAmount,\\n            uint256[] memory distribution\\n        )\\n    {\\n        uint256[] memory dist;\\n\\n        returnAmounts = new uint256[](tokens.length - 1);\\n        for (uint i = 1; i < tokens.length; i++) {\\n            if (tokens[i - 1] == tokens[i]) {\\n                returnAmounts[i - 1] = (i == 1) ? amount : returnAmounts[i - 2];\\n                continue;\\n            }\\n\\n            IERC20[] memory _tokens = tokens;\\n\\n            (\\n                returnAmounts[i - 1],\\n                amount,\\n                dist\\n            ) = getExpectedReturnWithGas(\\n                _tokens[i - 1],\\n                _tokens[i],\\n                (i == 1) ? amount : returnAmounts[i - 2],\\n                parts[i - 1],\\n                flags[i - 1],\\n                destTokenEthPriceTimesGasPrices[i - 1]\\n            );\\n            estimateGasAmount = estimateGasAmount.add(amount);\\n\\n            if (distribution.length == 0) {\\n                distribution = new uint256[](dist.length);\\n            }\\n\\n            for (uint j = 0; j < distribution.length; j++) {\\n                distribution[j] = distribution[j].add(dist[j] << (8 * (i - 1)));\\n            }\\n        }\\n    }\\n    \\n    function swap(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 minReturn,\\n        uint256[] memory distribution,\\n        uint256 flags,\\n        bool isWrapper\\n    ) public payable returns (uint256 returnAmount) {\\n        if (!isWrapper) {\\n            fromToken.universalTransferFrom(msg.sender, address(this), amount);\\n        }\\n\\n        uint256 confirmed = fromToken.universalBalanceOf(address(this));\\n\\n        // _swap(fromToken, destToken, confirmed, distribution, flags);\\n        _swapFloor(\\n            fromToken,\\n            destToken,\\n            confirmed,\\n            distribution,\\n            flags,\\n            isWrapper\\n        );\\n        returnAmount = destToken.universalBalanceOf(address(this));\\n        require(\\n            returnAmount >= minReturn,\\n            \\\"OneSplit: actual return amount is less than minReturn\\\"\\n        );\\n        destToken.universalTransfer(msg.sender, returnAmount);\\n        fromToken.universalTransfer(\\n            msg.sender,\\n            fromToken.universalBalanceOf(address(this))\\n        );\\n        return returnAmount;\\n    }\\n\\n    function swapMulti(\\n        IERC20[] memory tokens,\\n        uint256 amount,\\n        uint256 minReturn,\\n        uint256[] memory distribution,\\n        uint256[] memory flags,\\n        bool isWrapper\\n    ) public payable returns (uint256 returnAmount) {\\n        if (!isWrapper) {\\n            tokens[0].universalTransferFrom(msg.sender, address(this), amount);\\n        }\\n\\n        returnAmount = tokens[0].universalBalanceOf(address(this));\\n        for (uint256 i = 1; i < tokens.length; i++) {\\n            if (tokens[i - 1] == tokens[i]) {\\n                continue;\\n            }\\n\\n            uint256[] memory dist = new uint256[](distribution.length);\\n            for (uint256 j = 0; j < distribution.length; j++) {\\n                dist[j] = distribution[j]; //>> (8 * (i - 1))) & 0xFF;\\n            }\\n\\n            _swapFloor(\\n                tokens[i - 1],\\n                tokens[i],\\n                returnAmount,\\n                dist,\\n                flags[i - 1],\\n                isWrapper\\n            );\\n            returnAmount = tokens[i].universalBalanceOf(address(this));\\n            tokens[i - 1].universalTransfer(\\n                msg.sender,\\n                tokens[i - 1].universalBalanceOf(address(this))\\n            );\\n        }\\n\\n        require(\\n            returnAmount >= minReturn,\\n            \\\"OneSplit: actual return amount is less than minReturn\\\"\\n        );\\n        tokens[tokens.length - 1].universalTransfer(msg.sender, returnAmount);\\n    }\\n\\n    function _swapFloor(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256[] memory distribution,\\n        uint256 flags,\\n        bool isWrapper\\n    ) internal {\\n        //fromToken.universalTransferFrom(msg.sender, address(this), amount);\\n\\n        // fromToken.universalApprove(address(oneSplit), amount); //todo: commented as no need of multiple contracts\\n        _swap(fromToken, destToken, amount, 0, distribution, flags, isWrapper);\\n    }\\n\\n    function _swap(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 minReturn,\\n        uint256[] memory distribution,\\n        uint256 flags, // See constants in IOneSplit.sol\\n        bool isWrapper\\n    ) internal returns (uint256 returnAmount) {\\n        if (fromToken == destToken) {\\n            return amount;\\n        }\\n\\n\\n        function(IERC20, IERC20, uint256, uint256)[DEXES_COUNT]\\n            memory reserves\\n        = [_swapOnUniswap, _swapOnUniswapV2, _swapOnDfyn];\\n\\n        require(\\n            distribution.length <= reserves.length,\\n            \\\"OneSplit: Distribution array should not exceed reserves array size\\\"\\n        );\\n\\n        uint256 parts = 0;\\n        uint256 lastNonZeroIndex = 0;\\n        for (uint256 i = 0; i < distribution.length; i++) {\\n            if (distribution[i] > 0) {\\n                parts = parts.add(distribution[i]);\\n                lastNonZeroIndex = i;\\n            }\\n        }\\n\\n        if (parts == 0) {\\n            if (fromToken.isETH()) {\\n                msg.sender.transfer(msg.value);\\n                return msg.value;\\n            }\\n            return amount;\\n        }\\n\\n        // fromToken.universalTransferFrom(msg.sender, address(this), amount); //todo: removed to prevent amount doubling\\n        uint256 remainingAmount = fromToken.universalBalanceOf(address(this));\\n\\n        for (uint256 i = 0; i < distribution.length; i++) {\\n            if (distribution[i] == 0) {\\n                continue;\\n            }\\n\\n            uint256 swapAmount = amount.mul(distribution[i]).div(parts);\\n            if (i == lastNonZeroIndex) {\\n                swapAmount = remainingAmount;\\n            }\\n            remainingAmount -= swapAmount;\\n            reserves[i](fromToken, destToken, swapAmount, flags);\\n        }\\n\\n        returnAmount = destToken.universalBalanceOf(address(this));\\n        require(\\n            returnAmount >= minReturn,\\n            \\\"OneSplit: Return amount was not enough\\\"\\n        );\\n        destToken.universalTransfer(msg.sender, returnAmount);\\n        fromToken.universalTransfer(\\n            msg.sender,\\n            fromToken.universalBalanceOf(address(this))\\n        );\\n    }\\n\\n    function _swapOnUniswap(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 /*flags*/\\n    ) internal {\\n        uint256 returnAmount = amount;\\n\\n        if (!fromToken.isETH()) {\\n            IUniswapExchange fromExchange = uniswapFactory.getExchange(\\n                fromToken\\n            );\\n            if (fromExchange != IUniswapExchange(0)) {\\n                fromToken.universalApprove(address(fromExchange), returnAmount);\\n                returnAmount = fromExchange.tokenToEthSwapInput(\\n                    returnAmount,\\n                    1,\\n                    now\\n                );\\n            }\\n        }\\n\\n        if (!destToken.isETH()) {\\n            IUniswapExchange toExchange = uniswapFactory.getExchange(destToken);\\n            if (toExchange != IUniswapExchange(0)) {\\n                returnAmount = toExchange.ethToTokenSwapInput.value(\\n                    returnAmount\\n                )(1, now);\\n            }\\n        }\\n    }\\n\\n    function _swapOnDfynInternal(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 /*flags*/\\n    ) internal returns (uint256 returnAmount) {\\n        if (fromToken.isETH()) {\\n            weth.deposit.value(amount)();\\n        }\\n\\n        IERC20 fromTokenReal = fromToken.isETH() ? weth : fromToken;\\n        IERC20 toTokenReal = destToken.isETH() ? weth : destToken;\\n        IUniswapV2Exchange exchange = dfynExchange.getPair(\\n            fromTokenReal,\\n            toTokenReal\\n        );\\n        bool needSync;\\n        bool needSkim;\\n        (returnAmount, needSync, needSkim) = exchange.getReturn(\\n            fromTokenReal,\\n            toTokenReal,\\n            amount\\n        );\\n        if (needSync) {\\n            exchange.sync();\\n        } else if (needSkim) {\\n            exchange.skim(0x68a17B587CAF4f9329f0e372e3A78D23A46De6b5);\\n        }\\n\\n        fromTokenReal.universalTransfer(address(exchange), amount);\\n        if (uint256(address(fromTokenReal)) < uint256(address(toTokenReal))) {\\n            exchange.swap(0, returnAmount, address(this), \\\"\\\");\\n        } else {\\n            exchange.swap(returnAmount, 0, address(this), \\\"\\\");\\n        }\\n\\n        if (destToken.isETH()) {\\n            weth.withdraw(weth.balanceOf(address(this)));\\n        }\\n    }\\n\\n    function _swapOnUniswapV2Internal(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 /*flags*/\\n    ) internal returns (uint256 returnAmount) {\\n        if (fromToken.isETH()) {\\n            weth.deposit.value(amount)();\\n        }\\n\\n        IERC20 fromTokenReal = fromToken.isETH() ? weth : fromToken;\\n        IERC20 toTokenReal = destToken.isETH() ? weth : destToken;\\n        IUniswapV2Exchange exchange = uniswapV2.getPair(\\n            fromTokenReal,\\n            toTokenReal\\n        );\\n        bool needSync;\\n        bool needSkim;\\n        (returnAmount, needSync, needSkim) = exchange.getReturn(\\n            fromTokenReal,\\n            toTokenReal,\\n            amount\\n        );\\n        if (needSync) {\\n            exchange.sync();\\n        } else if (needSkim) {\\n            exchange.skim(0x68a17B587CAF4f9329f0e372e3A78D23A46De6b5);\\n        }\\n\\n        fromTokenReal.universalTransfer(address(exchange), amount);\\n        if (uint256(address(fromTokenReal)) < uint256(address(toTokenReal))) {\\n            exchange.swap(0, returnAmount, address(this), \\\"\\\");\\n        } else {\\n            exchange.swap(returnAmount, 0, address(this), \\\"\\\");\\n        }\\n\\n        if (destToken.isETH()) {\\n            weth.withdraw(weth.balanceOf(address(this)));\\n        }\\n    }\\n\\n    function _swapOnUniswapV2(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 flags\\n    ) internal {\\n        _swapOnUniswapV2Internal(fromToken, destToken, amount, flags);\\n    }\\n\\n    function _swapOnDfyn(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 flags\\n    ) internal {\\n        _swapOnDfynInternal(fromToken, destToken, amount, flags);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/ganesh/repos/dfyn/router-aggregator/contracts/UniversalERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport './libraries/TransferHelper.sol';\\n\\nlibrary UniversalERC20 {\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 private constant ZERO_ADDRESS = IERC20(0x0000000000000000000000000000000000000000);\\n    IERC20 private constant ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    function universalTransfer(IERC20 token, address to, uint256 amount) internal returns(bool) {\\n        if (amount == 0) {\\n            return true;\\n        }\\n\\n        if (isETH(token)) {\\n            address(uint160(to)).transfer(amount);\\n        } else {\\n            TransferHelper.safeTransfer(address(token), to, amount);\\n            return true;\\n        }\\n    }\\n\\n    function universalTransferFrom(IERC20 token, address from, address to, uint256 amount) internal {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        if (isETH(token)) {\\n            require(from == msg.sender && msg.value >= amount, \\\"Wrong usage of ETH.universalTransferFrom()\\\");\\n            if (to != address(this)) {\\n                address(uint160(to)).transfer(amount);\\n            }\\n            if (msg.value > amount) {\\n                msg.sender.transfer(msg.value.sub(amount));\\n            }\\n        } else {\\n            TransferHelper.safeTransferFrom(address(token), from, to, amount);\\n        }\\n    }\\n\\n    function universalTransferFromSenderToThis(IERC20 token, uint256 amount) internal {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        if (isETH(token)) {\\n            if (msg.value > amount) {\\n                // Return remainder if exist\\n                msg.sender.transfer(msg.value.sub(amount));\\n            }\\n        } else {\\n            TransferHelper.safeTransferFrom(address(token),msg.sender, address(this), amount);\\n        }\\n    }\\n\\n    function universalApprove(IERC20 token, address to, uint256 amount) internal {\\n        if (!isETH(token)) {\\n            if (amount == 0) {\\n                TransferHelper.safeApprove(address(token), to, 0);\\n                return;\\n            }\\n\\n            uint256 allowance = token.allowance(address(this), to);\\n            if (allowance < amount) {\\n                if (allowance > 0) {\\n                    TransferHelper.safeApprove(address(token), to, 0);\\n                }\\n               TransferHelper.safeApprove(address(token), to, amount);\\n            }\\n        }\\n    }\\n\\n    function universalBalanceOf(IERC20 token, address who) internal view returns (uint256) {\\n        if (isETH(token)) {\\n            return who.balance;\\n        } else {\\n            return token.balanceOf(who);\\n        }\\n    }\\n\\n    function universalDecimals(IERC20 token) internal view returns (uint256) {\\n\\n        if (isETH(token)) {\\n            return 18;\\n        }\\n\\n        (bool success, bytes memory data) = address(token).staticcall.gas(10000)(\\n            abi.encodeWithSignature(\\\"decimals()\\\")\\n        );\\n        if (!success || data.length == 0) {\\n            (success, data) = address(token).staticcall.gas(10000)(\\n                abi.encodeWithSignature(\\\"DECIMALS()\\\")\\n            );\\n        }\\n\\n        return (success && data.length > 0) ? abi.decode(data, (uint256)) : 18;\\n    }\\n\\n    function isETH(IERC20 token) internal pure returns(bool) {\\n        return (address(token) == address(ZERO_ADDRESS) || address(token) == address(ETH_ADDRESS));\\n    }\\n\\n    function eq(IERC20 a, IERC20 b) internal pure returns(bool) {\\n        return a == b || (isETH(a) && isETH(b));\\n    }\\n\\n    function notExist(IERC20 token) internal pure returns(bool) {\\n        return (address(token) == address(-1));\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/ganesh/repos/dfyn/router-aggregator/contracts/interface/IUniswapExchange.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IUniswapExchange {\\n    function getEthToTokenInputPrice(uint256 ethSold) external view returns (uint256 tokensBought);\\n\\n    function getTokenToEthInputPrice(uint256 tokensSold) external view returns (uint256 ethBought);\\n\\n    function ethToTokenSwapInput(uint256 minTokens, uint256 deadline)\\n        external\\n        payable\\n        returns (uint256 tokensBought);\\n\\n    function tokenToEthSwapInput(uint256 tokensSold, uint256 minEth, uint256 deadline)\\n        external\\n        returns (uint256 ethBought);\\n\\n    function tokenToTokenSwapInput(\\n        uint256 tokensSold,\\n        uint256 minTokensBought,\\n        uint256 minEthBought,\\n        uint256 deadline,\\n        address tokenAddr\\n    ) external returns (uint256 tokensBought);\\n}\\n\"\r\n    },\r\n    \"/Users/ganesh/repos/dfyn/router-aggregator/contracts/interface/IUniswapFactory.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IUniswapExchange.sol\\\";\\n\\n\\ninterface IUniswapFactory {\\n    function getExchange(IERC20 token) external view returns (IUniswapExchange exchange);\\n}\\n\"\r\n    },\r\n    \"/Users/ganesh/repos/dfyn/router-aggregator/contracts/interface/IUniswapV2Exchange.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../UniversalERC20.sol\\\";\\n\\n\\ninterface IUniswapV2Exchange {\\n    function getReserves() external view returns(uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n}\\n\\n\\nlibrary UniswapV2ExchangeLib {\\n    using Math for uint256;\\n    using SafeMath for uint256;\\n    using UniversalERC20 for IERC20;\\n\\n    function getReturn(\\n        IUniswapV2Exchange exchange,\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint amountIn\\n    ) internal view returns (uint256 result, bool needSync, bool needSkim) {\\n        uint256 reserveIn = fromToken.universalBalanceOf(address(exchange));\\n        uint256 reserveOut = destToken.universalBalanceOf(address(exchange));\\n        (uint112 reserve0, uint112 reserve1,) = exchange.getReserves();\\n        if (fromToken > destToken) {\\n            (reserve0, reserve1) = (reserve1, reserve0);\\n        }\\n        needSync = (reserveIn < reserve0 || reserveOut < reserve1);\\n        needSkim = !needSync && (reserveIn > reserve0 || reserveOut > reserve1);\\n\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(Math.min(reserveOut, reserve1));\\n        uint256 denominator = Math.min(reserveIn, reserve0).mul(1000).add(amountInWithFee);\\n        result = (denominator == 0) ? 0 : numerator.div(denominator);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/ganesh/repos/dfyn/router-aggregator/contracts/interface/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IUniswapV2Exchange.sol\\\";\\n\\n\\ninterface IUniswapV2Factory {\\n    function getPair(IERC20 tokenA, IERC20 tokenB) external view returns (IUniswapV2Exchange pair);\\n}\\n\"\r\n    },\r\n    \"/Users/ganesh/repos/dfyn/router-aggregator/contracts/interface/IWETH.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ncontract IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"/Users/ganesh/repos/dfyn/router-aggregator/contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.5.16;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IOneSplitView\",\"name\":\"_oneSplitView\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"}],\"name\":\"getExpectedReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destTokenEthPriceTimesGasPrice\",\"type\":\"uint256\"}],\"name\":\"getExpectedReturnWithGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimateGasAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"parts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"flags\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"destTokenEthPriceTimesGasPrices\",\"type\":\"uint256[]\"}],\"name\":\"getExpectedReturnWithGasMulti\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"returnAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"estimateGasAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oneSplitView\",\"outputs\":[{\"internalType\":\"contract IOneSplitView\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isWrapper\",\"type\":\"bool\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"flags\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"isWrapper\",\"type\":\"bool\"}],\"name\":\"swapMulti\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"OneSplit","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"000000000000000000000000c37aac8aa45ec4cb5ad9ddac9c797aa4ee687292","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}