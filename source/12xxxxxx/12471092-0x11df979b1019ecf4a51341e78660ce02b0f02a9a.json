{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"sources\": {\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"Initializable.sol\": {\r\n      \"content\": \"// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/v3.0.0/contracts/Initializable.sol\\n// Added public isInitialized() view of private initialized bool.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to use in the initializer function of a contract.\\n     */\\n    modifier initializer() {\\n        require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        assembly {\\n            cs := extcodesize(self)\\n        }\\n        return cs == 0;\\n    }\\n\\n    /**\\n     * @dev Return true if and only if the contract has been initialized\\n     * @return whether the contract has been initialized\\n     */\\n    function isInitialized() public view returns (bool) {\\n        return initialized;\\n    }\\n\\n    // Reserved storage space to allow for layout changes in the future.\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"ITrueDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\nimport {IERC20} from \\\"IERC20.sol\\\";\\n\\ninterface ITrueDistributor {\\n    function trustToken() external view returns (IERC20);\\n\\n    function farm() external view returns (address);\\n\\n    function distribute() external;\\n\\n    function nextDistribution() external view returns (uint256);\\n\\n    function empty() external;\\n}\\n\"\r\n    },\r\n    \"ITrueFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\nimport {IERC20} from \\\"IERC20.sol\\\";\\n\\nimport {ITrueDistributor} from \\\"ITrueDistributor.sol\\\";\\n\\ninterface ITrueFarm {\\n    function stakingToken() external view returns (IERC20);\\n\\n    function trustToken() external view returns (IERC20);\\n\\n    function trueDistributor() external view returns (ITrueDistributor);\\n\\n    function name() external view returns (string memory);\\n\\n    function totalStaked() external view returns (uint256);\\n\\n    function stake(uint256 amount) external;\\n\\n    function unstake(uint256 amount) external;\\n\\n    function claim() external;\\n\\n    function exit(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"TrueFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\nimport {IERC20} from \\\"IERC20.sol\\\";\\nimport {SafeMath} from \\\"SafeMath.sol\\\";\\n\\nimport {Initializable} from \\\"Initializable.sol\\\";\\nimport {ITrueDistributor} from \\\"ITrueDistributor.sol\\\";\\nimport {ITrueFarm} from \\\"ITrueFarm.sol\\\";\\n\\n/**\\n * @title TrueFarm\\n * @notice Deposit liquidity tokens to earn TRU rewards over time\\n * @dev Staking pool where tokens are staked for TRU rewards\\n * A Distributor contract decides how much TRU a farm can earn over time\\n */\\ncontract TrueFarm is ITrueFarm, Initializable {\\n    using SafeMath for uint256;\\n    uint256 constant PRECISION = 1e30;\\n\\n    // ================ WARNING ==================\\n    // ===== THIS CONTRACT IS INITIALIZABLE ======\\n    // === STORAGE VARIABLES ARE DECLARED BELOW ==\\n    // REMOVAL OR REORDER OF VARIABLES WILL RESULT\\n    // ========= IN STORAGE CORRUPTION ===========\\n\\n    IERC20 public override stakingToken;\\n    IERC20 public override trustToken;\\n    ITrueDistributor public override trueDistributor;\\n    string public override name;\\n\\n    // track stakes\\n    uint256 public override totalStaked;\\n    mapping(address => uint256) public staked;\\n\\n    // track overall cumulative rewards\\n    uint256 public cumulativeRewardPerToken;\\n    // track previous cumulate rewards for accounts\\n    mapping(address => uint256) public previousCumulatedRewardPerToken;\\n    // track claimable rewards for accounts\\n    mapping(address => uint256) public claimableReward;\\n\\n    // track total rewards\\n    uint256 public totalClaimedRewards;\\n    uint256 public totalFarmRewards;\\n\\n    // ======= STORAGE DECLARATION END ============\\n\\n    /**\\n     * @dev Emitted when an account stakes\\n     * @param who Account staking\\n     * @param amountStaked Amount of tokens staked\\n     */\\n    event Stake(address indexed who, uint256 amountStaked);\\n\\n    /**\\n     * @dev Emitted when an account unstakes\\n     * @param who Account unstaking\\n     * @param amountUnstaked Amount of tokens unstaked\\n     */\\n    event Unstake(address indexed who, uint256 amountUnstaked);\\n\\n    /**\\n     * @dev Emitted when an account claims TRU rewards\\n     * @param who Account claiming\\n     * @param amountClaimed Amount of TRU claimed\\n     */\\n    event Claim(address indexed who, uint256 amountClaimed);\\n\\n    /**\\n     * @dev Initialize staking pool with a Distributor contract\\n     * The distributor contract calculates how much TRU rewards this contract\\n     * gets, and stores TRU for distribution.\\n     * @param _stakingToken Token to stake\\n     * @param _trueDistributor Distributor contract\\n     * @param _name Farm name\\n     */\\n    function initialize(\\n        IERC20 _stakingToken,\\n        ITrueDistributor _trueDistributor,\\n        string memory _name\\n    ) public initializer {\\n        stakingToken = _stakingToken;\\n        trueDistributor = _trueDistributor;\\n        trustToken = _trueDistributor.trustToken();\\n        name = _name;\\n        require(trueDistributor.farm() == address(this), \\\"TrueFarm: Distributor farm is not set\\\");\\n    }\\n\\n    /**\\n     * @dev Stake tokens for TRU rewards.\\n     * Also claims any existing rewards.\\n     * @param amount Amount of tokens to stake\\n     */\\n    function stake(uint256 amount) external override update {\\n        if (claimableReward[msg.sender] > 0) {\\n            _claim();\\n        }\\n        staked[msg.sender] = staked[msg.sender].add(amount);\\n        totalStaked = totalStaked.add(amount);\\n        require(stakingToken.transferFrom(msg.sender, address(this), amount));\\n        emit Stake(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Internal unstake function\\n     * @param amount Amount of tokens to unstake\\n     */\\n    function _unstake(uint256 amount) internal {\\n        require(amount <= staked[msg.sender], \\\"TrueFarm: Cannot withdraw amount bigger than available balance\\\");\\n        staked[msg.sender] = staked[msg.sender].sub(amount);\\n        totalStaked = totalStaked.sub(amount);\\n        require(stakingToken.transfer(msg.sender, amount));\\n        emit Unstake(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Internal claim function\\n     */\\n    function _claim() internal {\\n        totalClaimedRewards = totalClaimedRewards.add(claimableReward[msg.sender]);\\n        uint256 rewardToClaim = claimableReward[msg.sender];\\n        claimableReward[msg.sender] = 0;\\n        require(trustToken.transfer(msg.sender, rewardToClaim));\\n        emit Claim(msg.sender, rewardToClaim);\\n    }\\n\\n    /**\\n     * @dev Remove staked tokens\\n     * @param amount Amount of tokens to unstake\\n     */\\n    function unstake(uint256 amount) external override update {\\n        _unstake(amount);\\n    }\\n\\n    /**\\n     * @dev Claim TRU rewards\\n     */\\n    function claim() external override update {\\n        _claim();\\n    }\\n\\n    /**\\n     * @dev Unstake amount and claim rewards\\n     * @param amount Amount of tokens to unstake\\n     */\\n    function exit(uint256 amount) external override update {\\n        _unstake(amount);\\n        _claim();\\n    }\\n\\n    /**\\n     * @dev View to estimate the claimable reward for an account\\n     * @return claimable rewards for account\\n     */\\n    function claimable(address account) external view returns (uint256) {\\n        if (staked[account] == 0) {\\n            return claimableReward[account];\\n        }\\n        // estimate pending reward from distributor\\n        uint256 pending = trueDistributor.nextDistribution();\\n        // calculate total rewards (including pending)\\n        uint256 newTotalFarmRewards = trustToken.balanceOf(address(this)).add(pending).add(totalClaimedRewards).mul(PRECISION);\\n        // calculate block reward\\n        uint256 totalBlockReward = newTotalFarmRewards.sub(totalFarmRewards);\\n        // calculate next cumulative reward per token\\n        uint256 nextcumulativeRewardPerToken = cumulativeRewardPerToken.add(totalBlockReward.div(totalStaked));\\n        // return claimable reward for this account\\n        // prettier-ignore\\n        return claimableReward[account].add(\\n            staked[account].mul(nextcumulativeRewardPerToken.sub(previousCumulatedRewardPerToken[account])).div(PRECISION));\\n    }\\n\\n    /**\\n     * @dev Update state and get TRU from distributor\\n     */\\n    modifier update() {\\n        // pull TRU from distributor\\n        // only pull if there is distribution and distributor farm is set to this farm\\n        if (trueDistributor.nextDistribution() > 0 && trueDistributor.farm() == address(this)) {\\n            trueDistributor.distribute();\\n        }\\n        // calculate total rewards\\n        uint256 newTotalFarmRewards = trustToken.balanceOf(address(this)).add(totalClaimedRewards).mul(PRECISION);\\n        // calculate block reward\\n        uint256 totalBlockReward = newTotalFarmRewards.sub(totalFarmRewards);\\n        // update farm rewards\\n        totalFarmRewards = newTotalFarmRewards;\\n        // if there are stakers\\n        if (totalStaked > 0) {\\n            cumulativeRewardPerToken = cumulativeRewardPerToken.add(totalBlockReward.div(totalStaked));\\n        }\\n        // update claimable reward for sender\\n        claimableReward[msg.sender] = claimableReward[msg.sender].add(\\n            staked[msg.sender].mul(cumulativeRewardPerToken.sub(previousCumulatedRewardPerToken[msg.sender])).div(PRECISION)\\n        );\\n        // update previous cumulative for sender\\n        previousCumulatedRewardPerToken[msg.sender] = cumulativeRewardPerToken;\\n        _;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUnstaked\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimableReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cumulativeRewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"contract ITrueDistributor\",\"name\":\"_trueDistributor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"previousCumulatedRewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFarmRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trueDistributor\",\"outputs\":[{\"internalType\":\"contract ITrueDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TrueFarm","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}