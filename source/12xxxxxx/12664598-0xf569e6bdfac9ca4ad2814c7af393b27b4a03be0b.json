{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.26;\r\n\r\n/// import base  contracts, interfaces, libraries from latest gitHUB\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n \r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n \r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n \r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n \r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a); \r\n    return a - b; \r\n  } \r\n  \r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) { \r\n    uint256 c = a + b; assert(c >= a);\r\n    return c;\r\n  }\r\n \r\n}\r\n\r\n/**\r\n * @title ERC223 interface\r\n * @dev interface ERC223 for emit tokenFallback event\r\n */\r\n \r\ncontract TokenReceiver {\r\n  function tokenFallback(address _sender, address _origin, uint _value) public returns (bool ok);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n * @dev Addedd ERC223 send tokens to another contract Implementation\r\n */\r\n \r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n \r\n  mapping(address => uint256) balances;\r\n  \r\n  modifier onlyPayloadSize(uint size) {\r\n      require(!(msg.data.length < size + 4));\r\n      _;\r\n  }\r\n \r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public onlyPayloadSize(2*32) returns (bool) {\r\n    bool result = _transfer(msg.sender, _to, _value);\r\n    if (result && isContract(_to)) {\r\n        result = _transferToContract(msg.sender, _to, _value);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n  function _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value > 0);\r\n    require(_value <= balances[_from]); \r\n    // SafeMath.sub will throw if there is not enough balance. \r\n    balances[_from] = balances[_from].sub(_value); \r\n    balances[_to] = balances[_to].add(_value); \r\n    emit Transfer(_from, _to, _value); \r\n    return true; \r\n  }\r\n  \r\n  //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n  function isContract(address _addr) internal constant returns (bool is_contract) {\r\n    uint length;\r\n    assembly {\r\n        //retrieve the size of the code on target address, this needs assembly\r\n        length := extcodesize(_addr)\r\n    }\r\n    return (length > 0);\r\n  }\r\n  \r\n  /**\r\n    * @dev Function that is called when a user or another contract wants\r\n    *  to transfer funds to smart-contract\r\n    * @return A boolean that indicates if the operation was successful\r\n    */\r\n    function _transferToContract(address _from, address _to, uint _value) internal returns (bool success) {\r\n        TokenReceiver receiver = TokenReceiver(_to);\r\n        return receiver.tokenFallback(_from, this, _value);\r\n    }\r\n \r\n  /** \r\n   * @dev Gets the balance of the specified address. \r\n   * @param _owner The address to query the the balance of. \r\n   * @return An uint256 representing the amount owned by the passed address. \r\n   */ \r\n  function balanceOf(address _owner) public constant returns (uint256 balance) { \r\n    return balances[_owner]; \r\n  } \r\n}\r\n\r\n/** \r\n * @title Standard ERC20 token \r\n * \r\n * @dev Implementation of the basic standard token. \r\n * @dev https://github.com/ethereum/EIPs/issues/20 \r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol \r\n */ \r\ncontract StandardToken is ERC20, BasicToken {\r\n \r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n \r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3*32) returns (bool) {\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    bool result = _transfer(_from, _to, _value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    if (result && isContract(_to)) {\r\n        result = _transferToContract(_from, _to, _value);\r\n    }\r\n    return result; \r\n  } \r\n \r\n /** \r\n  * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. \r\n  * \r\n  * Beware that changing an allowance with this method brings the risk that someone may use both the old \r\n  * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this \r\n  * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: \r\n  * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 \r\n  * @param _spender The address which will spend the funds. \r\n  * @param _value The amount of tokens to be spent. \r\n  */ \r\n  function approve(address _spender, uint256 _value) public onlyPayloadSize(2*32) returns (bool) { \r\n    allowed[msg.sender][_spender] = _value; \r\n    emit Approval(msg.sender, _spender, _value); \r\n    return true; \r\n  }\r\n \r\n /** \r\n  * @dev Function to check the amount of tokens that an owner allowed to a spender. \r\n  * @param _owner address The address which owns the funds. \r\n  * @param _spender address The address which will spend the funds. \r\n  * @return A uint256 specifying the amount of tokens still available for the spender. \r\n  */ \r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) { \r\n    return allowed[_owner][_spender]; \r\n  } \r\n \r\n /** \r\n  * approve should be called when allowed[_spender] == 0. To increment \r\n  * allowed value is better to use this function to avoid 2 calls (and wait until \r\n  * the first transaction is mined) * From MonolithDAO Token.sol \r\n  */ \r\n  function increaseApproval (address _spender, uint _addedValue) public onlyPayloadSize(2*32) returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]); \r\n    return true; \r\n  }\r\n \r\n  function decreaseApproval (address _spender, uint _subtractedValue) public onlyPayloadSize(2*32) returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender]; \r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n \r\n  /*this function is commented for payload to commissions ability. see ERC223Receiver contract\r\n  function () public payable {\r\n    revert();\r\n  }*/\r\n \r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n \r\n \r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n \r\n \r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor () public {\r\n    owner = msg.sender;\r\n  }\r\n \r\n \r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n \r\n \r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n \r\n}\r\n\r\n/**\r\n * @title ERC223 receiver\r\n * @dev - basic implementation that sent all tokens to special address, by default to owner.\r\n */\r\ncontract ERC223Receiver is TokenReceiver, Ownable {\r\n    address tokenHolder;\r\n    event getTokens(address indexed _from, address indexed _origin, uint _value);\r\n    \r\n    constructor () public {\r\n        tokenHolder = msg.sender;\r\n    }\r\n    \r\n    /**\r\n     * @dev - set new address to sent all incoming tokens.\r\n     * @param _newTokenHolder address to sent all incoming tokens.\r\n     */\r\n    function setTokenHolder(address _newTokenHolder) public onlyOwner {\r\n        tokenHolder = _newTokenHolder;\r\n    }\r\n    \r\n    /**\r\n     * @dev - ERC223 special callback function. callable from another contract.\r\n     * @param _sender address that sent tokens\r\n     * @param _origin ERC223 contract address\r\n     * @param _value amount of transferred tokens.\r\n     */\r\n    function tokenFallback(address _sender, address _origin, uint _value) public returns (bool ok) {\r\n        // in contract._origin was transfer(_sender, this, _value);\r\n        // to send all we can\r\n        // 1. create contract._origin\r\n        // 2. transfer from this to special address _value tokens.\r\n        // 3. do something changes in this contract? mint some tokens?\r\n        ERC20Basic erc223 = ERC20Basic(_origin);\r\n        bool result = erc223.transfer(tokenHolder, _value);\r\n        emit getTokens(_sender, _origin, _value);\r\n        return result;\r\n    }\r\n    \r\n    /**\r\n     * @dev noERC223 special function for transfer erc20 basable tokens from this contract to tokenHolder(by default owner) special address.\r\n     * @param _contract address of contract to check for balance & transfer tokens to tokenHolder.\r\n     * @return true if balance greter than 0 & transfer is ok.\r\n     */\r\n    function collectTokens(address _contract) public returns (bool ok) {\r\n        ERC20Basic erc20 = ERC20Basic(_contract);\r\n        uint256 balance = erc20.balanceOf(this);\r\n        ok = false;\r\n        if (balance > 0) {\r\n            ok = erc20.transfer(tokenHolder, balance);\r\n            emit getTokens(msg.sender, _contract, balance);\r\n        }\r\n        return ok;\r\n    }\r\n    \r\n    /**\r\n     * @dev function to send all ethers from contract to owner\r\n     */\r\n    function collectEther() public onlyOwner payable {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n    \r\n    function () external payable {\r\n    }\r\n}\r\n\r\n/**\r\n * @title - Liqnet Extension Token\r\n * @dev - LIQNET Extension for Mintable & Burnable for maxMintableSupply\r\n */\r\ncontract LiqnetExtToken is ERC223Receiver {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    uint public maxMintSupply;\r\n    uint public totalMinted = 0;\r\n    \r\n    modifier canMint(uint value) {\r\n        require((totalMinted.add(value)) <= maxMintSupply);\r\n        _;\r\n    }\r\n    \r\n    function isMintFinished() internal view returns (bool isFinished) {\r\n        return (totalMinted >= maxMintSupply);\r\n    }\r\n}\r\n\r\n\r\n \r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n \r\ncontract MintableToken is StandardToken, Ownable, LiqnetExtToken {\r\n    \r\n  event Mint(address indexed to, uint256 amount);\r\n  \r\n  event MintFinished();\r\n \r\n  bool public mintingFinished = false;\r\n \r\n  address public saleAgent;\r\n  \r\n  constructor () public {\r\n      saleAgent = msg.sender;\r\n  }\r\n  \r\n  /**\r\n   * @dev Allows the current owner to approve control of the minting to additional address.\r\n   * @param newSaleAgent The address to approve minting control.\r\n   */\r\n  function setSaleAgent(address newSaleAgent) public {\r\n    require(msg.sender == saleAgent || msg.sender == owner);\r\n    saleAgent = newSaleAgent;\r\n  }\r\n  \r\n  /**\r\n   * @dev Allows the current owner or saleAgent mint some coins to address.\r\n   * @param _to The address for new coins.\r\n   * @param _amount amount of coin to mint.\r\n   * @return true if mint is successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) public canMint(_amount) returns (bool) {\r\n    require((msg.sender == saleAgent || msg.sender == owner) && !mintingFinished);\r\n    totalSupply = totalSupply.add(_amount);\r\n    totalMinted = totalMinted.add(_amount); //**************************LiqnetExtToken\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    if (isMintFinished()) { finishMinting(); } //***********LiqnetExtToken\r\n    return true;\r\n  }\r\n \r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() public returns (bool) {\r\n    require((msg.sender == saleAgent || msg.sender == owner) && !mintingFinished);\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Burnable tokens\r\n * @dev functions for burn previosly minted tokens\r\n */\r\ncontract BurnableToken is StandardToken, Ownable, LiqnetExtToken {\r\n    \r\n    uint public totalBurned = 0;\r\n    \r\n    /**\r\n   * @dev Allows the current owner of coins burn it.\r\n   * @param value - amount of coins to burn.\r\n   */\r\n    function burn(uint value) public onlyPayloadSize(32) {\r\n        require(value>0 && balances[msg.sender] >= value);\r\n        balances[msg.sender] = balances[msg.sender].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        totalBurned = totalBurned.add(value);\r\n        emit Burn(msg.sender, value);\r\n    }\r\n    \r\n    /**\r\n   * @dev Allows the spender (approve function) to burn some coins from another address.\r\n   * @param from - address for burn coins.\r\n   * @param value - amount of coins to burn.\r\n   */\r\n    function burnFrom(address from, uint value) public onlyPayloadSize(2*32)  {\r\n        require(value > 0 && value <= balances[from] && value <= allowed[from][msg.sender]);\r\n        balances[from] = balances[from].sub(value);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        totalBurned = totalBurned.add(value);\r\n        emit Burn(from, value);\r\n    }\r\n    \r\n    event Burn(address indexed burner, uint indexed value);\r\n}\r\n\r\n\r\n/**\r\n * @title - LIQNET Liqidity Exchange Network tokens\r\n * @dev mint will be executed from Crowdsale contract\r\n */\r\ncontract LiqnetCoin is MintableToken, BurnableToken {\r\n    \r\n    string public constant name = \"Liqnet Coin\";\r\n    \r\n    string public constant symbol = \"LEN\";\r\n    \r\n    uint32 public constant decimals = 18;\r\n    \r\n    constructor() public {\r\n        maxMintSupply = 3500000 * (1 ether);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSaleAgent\",\"type\":\"address\"}],\"name\":\"setSaleAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"collectTokens\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxMintSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_origin\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"tokenFallback\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTokenHolder\",\"type\":\"address\"}],\"name\":\"setTokenHolder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_origin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"getTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"LiqnetCoin","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b5c41b987c460f17932452280bf4d77d4b48d42744876f4842dd655af97bef64"}]}