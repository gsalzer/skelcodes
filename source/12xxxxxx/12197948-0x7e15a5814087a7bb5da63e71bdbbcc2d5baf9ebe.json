{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance \\u003e= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance \\u003e= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) =\\n            target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    function burn(uint256 amount) external returns(bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyGovernance`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"},\"SwipeIWO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\ncontract SwipeIWO is Ownable {\\n    struct WhiteList {\\n        bool isWhite;\\n        uint256 maxAllowance;\\n    }\\n\\n    // Use SafeMath for uint256 and SafeERC20 for IERC20\\n    using SafeMath for uint256;\\n\\n    // Address For BaseToken. e.x: SXP\\n    address private _baseToken;\\n    // Address For SaleToken. e.x: STRK\\n    address private _saleToken;\\n    // Rate STRK To SXP\\n    uint256 private _saleRate;\\n    // Is Sale, Only set with owner\\n    bool private _isSale;\\n    // Sale Start Time\\n    uint256 private _startTime;\\n    // Sale End Time\\n    uint256 private _endTime;\\n    // Maximum Base Token Amount\\n    uint256 private _maxBaseAmount;\\n    // Minimum Base Token Amount\\n    uint256 private _minBaseAmount;\\n    // Limit Base Token Amount\\n    uint256 private _limitBaseAmount;\\n\\n    // baseAmount with each address\\n    mapping(address =\\u003e uint256) _baseAmounts;\\n    mapping(address =\\u003e WhiteList) _whiteList;\\n\\n    modifier isNoContract() {\\n        require(\\n            Address.isContract(_msgSender()) == false,\\n            \\\"Contract is not allowed on SwipeIWO\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier isWhite(uint256 newSaleAmount) {\\n        require(_whiteList[_msgSender()].isWhite, \\\"You\\u0027re not allowed to purchased\\\");\\n        require(\\n            _baseAmounts[_msgSender()].add(newSaleAmount) \\u003c= _whiteList[_msgSender()].maxAllowance,\\n            \\\"You can not purchase more than maxAllowance\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check IWO is not Over\\n     */\\n    modifier isNotOver() {\\n        require(_isSale, \\\"SwipeIWO is sale over\\\");\\n        require(block.timestamp \\u003e= _startTime, \\\"SwipeIWO is not started yet\\\");\\n        require(block.timestamp \\u003c= _endTime, \\\"SwipeIWO is already finished\\\");\\n        require(IERC20(_baseToken).balanceOf(address(this)) \\u003c= _limitBaseAmount, \\\"Already sold out.\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check IWO is Over\\n     */\\n    modifier isOver() {\\n        require(!_isSale || block.timestamp \\u003c _startTime || block.timestamp \\u003e _endTime || IERC20(_baseToken).balanceOf(address(this)) \\u003e _limitBaseAmount, \\\"SwipeIWO is not finished yet\\\");\\n        _;\\n    }\\n\\n    event PurchaseToken(address indexed account, uint256 baseAmount, uint256 saleAmount);\\n    \\n    constructor() {\\n        // Initialize the base\\u0026sale Tokens\\n        _baseToken = address(0);\\n        _saleToken = address(0);\\n\\n        // // Initialize the rate\\u0026isSale, should be divide 1e18 when purchase\\n        // _saleRate = 1e18;\\n        // _isSale = false;\\n\\n        // // Initialize the start\\u0026end time\\n        // _startTime = block.timestamp;\\n        // _endTime = block.timestamp;\\n\\n        // // Initialize the max\\u0026min base amount\\n        // _minBaseAmount = 1e18;\\n        // _maxBaseAmount = 1e18;\\n\\n        // // Initialize the baseLimitAmount\\n        // _limitBaseAmount = 1e18;\\n\\n        // Initialize the rate\\u0026isSale, should be divide 1e18 when purchase\\n        _saleRate = 10e18;\\n        _isSale = true;\\n\\n        // Initialize the start\\u0026end time\\n        _startTime = uint256(block.timestamp).sub(10000);\\n        _endTime = uint256(block.timestamp).add(10000);\\n\\n        // Initialize the max\\u0026min base amount\\n        _minBaseAmount = 1e18;\\n        _maxBaseAmount = 10e18;\\n\\n        // Initialize the baseLimitAmount\\n        _limitBaseAmount = 100e18;\\n    }\\n\\n    /**\\n     * @dev Get White Status\\n     */\\n    function getWhiteStatus(address userAddress) public view returns (bool, uint256) {\\n        return (\\n            _whiteList[userAddress].isWhite,\\n            _whiteList[userAddress].maxAllowance\\n        );\\n    }\\n\\n    /**\\n     * @dev Set White Statuses, only owner call it\\n     */\\n    function setWhiteStatus(address[] memory userAddressList, WhiteList[] memory userInfoList) external onlyOwner returns (bool) {\\n        require(userAddressList.length == userInfoList.length, \\\"The lengths of arrays should be same.\\\");\\n\\n        for (uint i = 0; i \\u003c userAddressList.length; i += 1) {\\n            _whiteList[userAddressList[i]] = userInfoList[i];\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Get Base Token\\n     */\\n    function getBaseToken() public view returns (address) {\\n        return _baseToken;\\n    }\\n\\n    /**\\n     * @dev Set Base Token, only owner call it\\n     */\\n    function setBaseToken(address baseToken) external onlyOwner {\\n        require(baseToken != address(0), \\\"BaseToken should be not 0x0\\\");\\n        _baseToken = baseToken;\\n    }\\n\\n    /**\\n     * @dev Get Sale Token\\n     */\\n    function getSaleToken() public view returns (address) {\\n        return _saleToken;\\n    }\\n\\n    /**\\n     * @dev Set Sale Token, only owner call it\\n     */\\n    function setSaleToken(address saleToken) external onlyOwner {\\n        require(saleToken != address(0), \\\"SaleToken should be not 0x0\\\");\\n        _saleToken = saleToken;\\n    }\\n\\n    /**\\n     * @dev Get Sale Rate\\n     */\\n    function getSaleRate() public view returns (uint256) {\\n        return _saleRate;\\n    }\\n\\n    /**\\n     * @dev Set Sale Rate, only owner call it\\n     */\\n    function setSaleRate(uint256 saleRate) external onlyOwner {\\n        _saleRate = saleRate;\\n    }\\n\\n    /**\\n     * @dev Get IsSale\\n     */\\n    function getIsSale() public view returns (bool) {\\n        return _isSale;\\n    }\\n\\n    /**\\n     * @dev Set IsSale, only owner call it\\n     */\\n    function setIsSale(bool isSale) external onlyOwner {\\n        _isSale = isSale;\\n    }\\n\\n    /**\\n     * @dev Get IWO Start Time\\n     */\\n    function getStartTime() public view returns (uint256) {\\n        return _startTime;\\n    }\\n\\n    /**\\n     * @dev Set IWO Start Time, only owner call it\\n     */\\n    function setStartTime(uint256 startTime) external onlyOwner {\\n        _startTime = startTime;\\n    }\\n\\n    /**\\n     * @dev Get IWO End Time\\n     */\\n    function getEndTime() public view returns (uint256) {\\n        return _endTime;\\n    }\\n\\n    /**\\n     * @dev Set End Time, only owner call it\\n     */\\n    function setEndTime(uint256 endTime) external onlyOwner {\\n        require(endTime \\u003e _startTime, \\\"EndTime should be over than startTime\\\");\\n        _endTime = endTime;\\n    }\\n\\n    /**\\n     * @dev Get MinBase Amount\\n     */\\n    function getMinBaseAmount() public view returns (uint256) {\\n        return _minBaseAmount;\\n    }\\n\\n    /**\\n     * @dev Set MinBase Amount, only owner call it\\n     */\\n    function setMinBaseAmount(uint256 minBaseAmount) external onlyOwner {\\n        _minBaseAmount = minBaseAmount;\\n    }\\n\\n    /**\\n     * @dev Get MaxBase Amount\\n     */\\n    function getMaxBaseAmount() public view returns (uint256) {\\n        return _maxBaseAmount;\\n    }\\n\\n    /**\\n     * @dev Set MaxBase Amount, only owner call it\\n     */\\n    function setMaxBaseAmount(uint256 maxBaseAmount) external onlyOwner {\\n        require(maxBaseAmount \\u003e _minBaseAmount, \\\"MaxBaseAmount should be over than minBaseAmount\\\");\\n        _maxBaseAmount = maxBaseAmount;\\n    }\\n\\n    /**\\n     * @dev Get LimitBase Amount\\n     */\\n    function getLimitBaseAmount() public view returns (uint256) {\\n        return _limitBaseAmount;\\n    }\\n\\n    /**\\n     * @dev Set LimitBase Amount, only owner call it\\n     */\\n    function setLimitBaseAmount(uint256 limitBaseAmount) external onlyOwner {\\n        _limitBaseAmount = limitBaseAmount;\\n    }\\n\\n    /**\\n     * @dev Check IsIWO On Status\\n     */\\n    function isIWOOn() public view returns (bool) {\\n        if (_isSale \\u0026\\u0026\\n            block.timestamp \\u003e= _startTime \\u0026\\u0026\\n            block.timestamp \\u003c= _endTime \\u0026\\u0026\\n            IERC20(_baseToken).balanceOf(address(this)) \\u003c= _limitBaseAmount) {\\n                return true;\\n            }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Set Allocation Amount with Sale Token, only owner call it\\n            Should approve the amount before call this function\\n     */\\n    function allocationAmount(uint256 amount) external onlyOwner returns (bool) {\\n        require(IERC20(_saleToken).balanceOf(address(_msgSender())) \\u003e= amount, \\\"Owner should have more than amount with Sale Token\\\");\\n\\n        IERC20(_saleToken).transferFrom(\\n            _msgSender(),\\n            address(this),\\n            amount\\n        );\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Burn baseToken, only owner call it\\n     */\\n    function burnBaseToken(uint256 burnAmount) external onlyOwner returns (bool) {\\n        require(IERC20(_baseToken).balanceOf(address(this)) \\u003e= burnAmount, \\\"Burn Amount should be less than balance of contract\\\");\\n\\n        // IERC20(_baseToken).burn(burnAmount);\\n        IERC20(_baseToken).transfer(address(0), burnAmount);\\n\\n        return true;\\n    }   \\n\\n    /**\\n     * @dev Withdraw Base Token, only owner call it\\n     */\\n    function withdrawBaseToken(address withdrawAddress, uint256 withdrawAmount) external onlyOwner returns (bool) {\\n        uint256 baseBalance = IERC20(_baseToken).balanceOf(address(this));\\n        require(withdrawAmount \\u003c= baseBalance, \\\"The withdrawAmount should be less than balance\\\");\\n\\n        IERC20(_baseToken).transfer(withdrawAddress, withdrawAmount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Withdraw Sale Token, only owner call it\\n     */\\n    function withdrawSaleToken(address withdrawAddress, uint256 withdrawAmount) external onlyOwner returns (bool) {\\n        uint256 saleBalance = IERC20(_saleToken).balanceOf(address(this));\\n        require(withdrawAmount \\u003c= saleBalance, \\\"The withdrawAmount should be less than balance\\\");\\n\\n        IERC20(_saleToken).transfer(withdrawAddress, withdrawAmount);\\n\\n        return true;\\n    }\\n    \\n    /**\\n     * @dev Purchase Sale Token\\n            Should approve the baseToken before purchase\\n     */\\n    function purchaseSaleToken(uint256 baseAmountForSale)\\n        external\\n        isNoContract\\n        isNotOver\\n        isWhite(baseAmountForSale)\\n        returns (bool)\\n    {\\n        // Check min\\u0026max base amount\\n        uint256 currentBaseTotalAmount = IERC20(_baseToken).balanceOf(address(this));\\n        // Get Sale Amount\\n        uint256 saleAmount = baseAmountForSale.mul(_saleRate).div(1e18);\\n\\n        require(baseAmountForSale \\u003e= _minBaseAmount, \\\"Purchase Amount should be more than minBaseAmount\\\");\\n        require(_baseAmounts[_msgSender()].add(baseAmountForSale) \\u003c= _maxBaseAmount, \\\"Purchase Amount should be less than maxBaseAmount\\\");\\n        require(currentBaseTotalAmount.add(baseAmountForSale) \\u003c= _limitBaseAmount, \\\"Total Base Amount shoould be less than baseLimitAmount\\\");\\n        require(IERC20(_saleToken).balanceOf(address(this)) \\u003e= saleAmount, \\\"The contract should have saleAmount with saleToken at least\\\");\\n\\n        // Update baseAmounts\\n        _baseAmounts[_msgSender()] = _baseAmounts[_msgSender()].add(baseAmountForSale);\\n\\n        // TransferFrom baseToken from msgSender to Contract\\n        IERC20(_baseToken).transferFrom(\\n            _msgSender(),\\n            address(this),\\n            baseAmountForSale\\n        );\\n\\n        // Send Sale Token to msgSender\\n        IERC20(_saleToken).transfer(\\n            _msgSender(),\\n            saleAmount\\n        );\\n\\n        emit PurchaseToken(_msgSender(), baseAmountForSale, saleAmount);\\n\\n        return true;\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saleAmount\",\"type\":\"uint256\"}],\"name\":\"PurchaseToken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"allocationAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"burnBaseToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIsSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLimitBaseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxBaseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinBaseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSaleRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSaleToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getWhiteStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isIWOOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseAmountForSale\",\"type\":\"uint256\"}],\"name\":\"purchaseSaleToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"setBaseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isSale\",\"type\":\"bool\"}],\"name\":\"setIsSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitBaseAmount\",\"type\":\"uint256\"}],\"name\":\"setLimitBaseAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxBaseAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxBaseAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minBaseAmount\",\"type\":\"uint256\"}],\"name\":\"setMinBaseAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleRate\",\"type\":\"uint256\"}],\"name\":\"setSaleRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"saleToken\",\"type\":\"address\"}],\"name\":\"setSaleToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"userAddressList\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isWhite\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxAllowance\",\"type\":\"uint256\"}],\"internalType\":\"struct SwipeIWO.WhiteList[]\",\"name\":\"userInfoList\",\"type\":\"tuple[]\"}],\"name\":\"setWhiteStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawBaseToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawSaleToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SwipeIWO","CompilerVersion":"v0.7.2+commit.51b20bc0","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2007e6b38ade42534d53e7098c0dd229f1e391fc0fe1bc879f9ef094ed510c90"}]}