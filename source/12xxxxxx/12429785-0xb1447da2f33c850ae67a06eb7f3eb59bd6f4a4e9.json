{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/noah/github/5d/2.0/contracts/contracts/core/Redeem.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Token} from \\\"./Token.sol\\\";\\nimport {TokenIdLib} from \\\"../lib/TokenId.sol\\\";\\nimport {Stake, NFTStatus} from \\\"./Stake.sol\\\";\\n\\naddress constant ETHEREUM = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\ncontract Redeem is Ownable {\\n    struct NFTRedeemDetails {\\n        uint256 redeemFee;\\n    }\\n\\n    // Power map for each series - { collectionId: { seriesId: power }}.\\n    mapping(IERC721 => mapping(uint256 => mapping(uint256 => NFTRedeemDetails)))\\n        public nftRedeemDetails;\\n\\n    // Record the owner of each token ID.\\n    mapping(IERC721 => mapping(uint256 => bool)) public nftRedeemed;\\n\\n    IERC20 public feeCurrency;\\n    Stake public lock;\\n\\n    constructor(Stake lock_, IERC20 feeCurrency_) Ownable() {\\n        lock = lock_;\\n        feeCurrency = feeCurrency_;\\n    }\\n\\n    function getNFTRedeemDetails(\\n        IERC721 nft,\\n        uint256 collectionId,\\n        uint256 seriesId\\n    ) public view returns (NFTRedeemDetails memory) {\\n        return nftRedeemDetails[nft][collectionId][seriesId];\\n    }\\n\\n    // EVENTS //////////////////////////////////////////////////////////////////\\n\\n    event NFTRedeemed(\\n        IERC721 indexed nft,\\n        uint256 indexed tokenId,\\n        bytes32 formHash\\n    );\\n\\n    // PERMISSIONED METHODS ////////////////////////////////////////////////////\\n\\n    function setLock(Stake lock_) public onlyOwner {\\n        lock = lock_;\\n    }\\n\\n    function setPaymentCurrency(IERC20 feeCurrency_) public onlyOwner {\\n        feeCurrency = feeCurrency_;\\n    }\\n\\n    function addNFTRedeemDetails(\\n        IERC721 nft,\\n        uint256 collectionId,\\n        uint256[] memory seriesIds,\\n        uint256[] memory fees\\n    ) public onlyOwner {\\n        for (uint256 i = 0; i < seriesIds.length; i++) {\\n            nftRedeemDetails[nft][collectionId][\\n                seriesIds[i]\\n            ] = NFTRedeemDetails({redeemFee: fees[i]});\\n        }\\n    }\\n\\n    // USER METHODS ////////////////////////////////////////////////////////////\\n\\n    // Only callable by the owner of the NFTs.\\n    function redeemNFTs(\\n        IERC721 nft,\\n        uint256[] memory tokenIds,\\n        bytes32 formHash\\n    ) public {\\n        uint256 summedRedeemShippingFee = 0;\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n            require(\\n                lock.nftStatus(nft, tokenId) != NFTStatus.Lockable,\\n                \\\"NEVER_LOCKED\\\"\\n            );\\n            require(!nftRedeemed[nft][tokenId], \\\"ALREADY_REDEEMED\\\");\\n            require(lock.nftOwner(nft, tokenId) == msg.sender, \\\"NOT_NFT_OWNER\\\");\\n            nftRedeemed[nft][tokenId] = true;\\n\\n            uint256 collectionId = TokenIdLib.extractCollectionId(tokenId);\\n            uint256 seriesId = TokenIdLib.extractSeriesId(tokenId);\\n\\n            summedRedeemShippingFee += nftRedeemDetails[nft][collectionId][\\n                seriesId\\n            ]\\n                .redeemFee;\\n\\n            emit NFTRedeemed(nft, tokenId, formHash);\\n        }\\n\\n        takePayment(address(feeCurrency), summedRedeemShippingFee);\\n    }\\n\\n    function takePayment(address token, uint256 amount) internal {\\n        if (token == ETHEREUM) {\\n            require(msg.value >= amount, \\\"INSUFFICIENT_ETH_AMOUNT\\\");\\n            // Refund change.\\n            payable(msg.sender).transfer(msg.value - amount);\\n        } else {\\n            IERC20(token).transferFrom(msg.sender, address(this), amount);\\n        }\\n    }\\n\\n    function withdraw(address token) public onlyOwner {\\n        if (token == ETHEREUM) {\\n            payable(msg.sender).transfer(address(this).balance);\\n        } else {\\n            IERC20(token).transfer(\\n                msg.sender,\\n                IERC20(token).balanceOf(address(this))\\n            );\\n        }\\n    }\\n\\n    // USER METHODS - MULTIPLE NFT CONTRACTS ///////////////////////////////////\\n\\n    function redeemMultipleNFTs(\\n        IERC721[] memory nftArray,\\n        uint256[][] memory tokenIdsArray,\\n        bytes32 formHash\\n    ) public {\\n        require(nftArray.length == tokenIdsArray.length, \\\"MISMATCHED_LENGTHS\\\");\\n        for (uint256 i = 0; i < nftArray.length; i++) {\\n            redeemNFTs(nftArray[i], tokenIdsArray[i], formHash);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/noah/github/5d/2.0/contracts/contracts/core/Stake.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Token} from \\\"./Token.sol\\\";\\nimport {TokenIdLib} from \\\"../lib/TokenId.sol\\\";\\n\\naddress constant ETHEREUM = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\nenum NFTStatus {Lockable, Locked, Unlockable, Unlocked}\\n\\ncontract Stake is Ownable {\\n    struct NFTLockDetails {\\n        uint256 power;\\n        uint256 lockPeriod;\\n    }\\n\\n    // Power map for each series - { collectionId: { seriesId: power }}.\\n    mapping(IERC721 => mapping(uint256 => mapping(uint256 => NFTLockDetails)))\\n        public nftStakeDetails;\\n\\n    // Record the owner of each token ID.\\n    mapping(IERC721 => mapping(address => uint256[])) public ownerNFTs;\\n    mapping(IERC721 => mapping(uint256 => address)) public nftOwner;\\n    mapping(IERC721 => mapping(uint256 => uint256)) public nftLockTimestamp;\\n    mapping(IERC721 => mapping(uint256 => uint256)) public nftTokensClaimed;\\n\\n    Token public token;\\n\\n    constructor(Token token_) Ownable() {\\n        token = token_;\\n    }\\n\\n    // EVENTS //////////////////////////////////////////////////////////////////\\n\\n    event NFTLocked(IERC721 indexed nft, uint256 indexed tokenId);\\n    event NFTRedeemed(\\n        IERC721 indexed nft,\\n        uint256 indexed tokenId,\\n        bytes32 formHash\\n    );\\n    event NFTUnlocked(IERC721 indexed nft, uint256 indexed tokenId);\\n\\n    // PERMISSIONED METHODS ////////////////////////////////////////////////////\\n\\n    function addNFTLockDetails(\\n        IERC721 nft,\\n        uint256 collectionId,\\n        uint256[] memory seriesIds,\\n        uint256[] memory powers,\\n        uint256[] memory lockPeriods\\n    ) public onlyOwner {\\n        for (uint256 i = 0; i < seriesIds.length; i++) {\\n            uint256 currentLockPeriod =\\n                nftStakeDetails[nft][collectionId][seriesIds[i]].lockPeriod;\\n            require(\\n                currentLockPeriod == 0 || lockPeriods[i] <= currentLockPeriod,\\n                \\\"CANNOT_INCREASE_LOCK_PERIOD\\\"\\n            );\\n            nftStakeDetails[nft][collectionId][seriesIds[i]] = NFTLockDetails({\\n                power: powers[i],\\n                lockPeriod: lockPeriods[i]\\n            });\\n        }\\n    }\\n\\n    // USER METHODS ////////////////////////////////////////////////////////////\\n\\n    function stakeNFTs(IERC721 nft, uint256[] memory tokenIds) public {\\n        // Optimize accessing power storage in loop.\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n            require(nftStatus(nft, tokenId) == NFTStatus.Lockable);\\n\\n            nftOwner[nft][tokenIds[i]] = msg.sender;\\n            nftLockTimestamp[nft][tokenIds[i]] = block.timestamp;\\n\\n            ownerNFTs[nft][msg.sender].push(tokenId);\\n            nft.transferFrom(msg.sender, address(this), tokenId);\\n\\n            emit NFTLocked(nft, tokenId);\\n        }\\n    }\\n\\n    function claimableTokens(IERC721 nft, uint256 tokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 tokensClaimed = nftTokensClaimed[nft][tokenId];\\n        uint256 lockTimestamp = nftLockTimestamp[nft][tokenId];\\n\\n        uint256 collectionId = TokenIdLib.extractCollectionId(tokenId);\\n        uint256 seriesId = TokenIdLib.extractSeriesId(tokenId);\\n        NFTLockDetails memory lockDetails =\\n            nftStakeDetails[nft][collectionId][seriesId];\\n        uint256 nftPower = lockDetails.power;\\n        uint256 lockPeriod = lockDetails.lockPeriod;\\n\\n        uint256 lockProgress = block.timestamp - lockTimestamp;\\n        if (lockProgress > lockPeriod) {\\n            lockProgress = lockPeriod;\\n        }\\n\\n        uint256 claimableProgress = (nftPower * lockProgress) / lockPeriod;\\n\\n        if (tokensClaimed >= claimableProgress) {\\n            return 0;\\n        }\\n\\n        uint256 claimable = claimableProgress - tokensClaimed;\\n\\n        // Sanity check.\\n        require(\\n            claimable + tokensClaimed <= nftPower,\\n            \\\"Stake: invalid claimable amount\\\"\\n        );\\n\\n        return claimable;\\n    }\\n\\n    function claimTokens(IERC721 nft, uint256[] memory tokenIds) public {\\n        uint256 powerOwed = 0;\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 claimable = claimableTokens(nft, tokenId);\\n\\n            if (claimable > 0) {\\n                powerOwed += claimable;\\n                nftTokensClaimed[nft][tokenId] += claimable;\\n            }\\n        }\\n\\n        if (powerOwed > 0) {\\n            token.transfer(msg.sender, powerOwed);\\n        }\\n    }\\n\\n    // The following is exposed as a backup. `claimAndUnstakeNFTs` should be\\n    // used instead.\\n    function _unstakeNFTs(IERC721 nft, uint256[] memory tokenIds) public {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n            require(nftOwner[nft][tokenId] == msg.sender, \\\"NOT_NFT_OWNER\\\");\\n            require(\\n                nftStatus(nft, tokenId) == NFTStatus.Unlockable,\\n                \\\"NOT_UNLOCKABLE\\\"\\n            );\\n\\n            nft.transferFrom(address(this), msg.sender, tokenId);\\n\\n            emit NFTUnlocked(nft, tokenId);\\n        }\\n    }\\n\\n    // Only callable by the owner of the NFTs.\\n    function claimAndUnstakeNFTs(IERC721 nft, uint256[] memory tokenIds)\\n        public\\n    {\\n        claimTokens(nft, tokenIds);\\n        _unstakeNFTs(nft, tokenIds);\\n    }\\n\\n    function takePayment(address paymentToken, uint256 amount) internal {\\n        if (paymentToken == ETHEREUM) {\\n            require(msg.value >= amount, \\\"INSUFFICIENT_ETH_AMOUNT\\\");\\n            // Refund change.\\n            payable(msg.sender).transfer(msg.value - amount);\\n        } else {\\n            IERC20(paymentToken).transferFrom(\\n                msg.sender,\\n                address(this),\\n                amount\\n            );\\n        }\\n    }\\n\\n    function withdraw(address withdrawToken) public onlyOwner {\\n        if (withdrawToken == ETHEREUM) {\\n            payable(msg.sender).transfer(address(this).balance);\\n        } else {\\n            IERC20(withdrawToken).transfer(\\n                msg.sender,\\n                IERC20(withdrawToken).balanceOf(address(this))\\n            );\\n        }\\n    }\\n\\n    // USER METHODS - MULTIPLE NFT CONTRACTS ///////////////////////////////////\\n\\n    function stakeMultipleNFTs(\\n        IERC721[] memory nftArray,\\n        uint256[][] memory tokenIdsArray\\n    ) public {\\n        require(nftArray.length == tokenIdsArray.length, \\\"MISMATCHED_LENGTHS\\\");\\n        for (uint256 i = 0; i < nftArray.length; i++) {\\n            stakeNFTs(nftArray[i], tokenIdsArray[i]);\\n        }\\n    }\\n\\n    function claimForMultipleNFTs(\\n        IERC721[] memory nftArray,\\n        uint256[][] memory tokenIdsArray\\n    ) public {\\n        require(nftArray.length == tokenIdsArray.length, \\\"MISMATCHED_LENGTHS\\\");\\n        for (uint256 i = 0; i < nftArray.length; i++) {\\n            claimTokens(nftArray[i], tokenIdsArray[i]);\\n        }\\n    }\\n\\n    function unstakeMultipleNFTs(\\n        IERC721[] memory nftArray,\\n        uint256[][] memory tokenIdsArray\\n    ) public {\\n        require(nftArray.length == tokenIdsArray.length, \\\"MISMATCHED_LENGTHS\\\");\\n        for (uint256 i = 0; i < nftArray.length; i++) {\\n            claimAndUnstakeNFTs(nftArray[i], tokenIdsArray[i]);\\n        }\\n    }\\n\\n    // VIEW ////////////////////////////////////////////////////////////////////\\n\\n    function getNFTStakeDetails(\\n        IERC721 nft,\\n        uint256 collectionId,\\n        uint256 seriesId\\n    ) public view returns (NFTLockDetails memory) {\\n        return nftStakeDetails[nft][collectionId][seriesId];\\n    }\\n\\n    function nftStatus(IERC721 nft, uint256 tokenId)\\n        public\\n        view\\n        returns (NFTStatus)\\n    {\\n        // If there's no owner associated, it's never been locked.\\n        if (nftOwner[nft][tokenId] == address(0x0)) {\\n            return NFTStatus.Lockable;\\n        }\\n\\n        // If this contract no longer holds the token, it has been unlocked.\\n        if (nft.ownerOf(tokenId) != address(this)) {\\n            return NFTStatus.Unlocked;\\n        }\\n\\n        uint256 collectionId = TokenIdLib.extractCollectionId(tokenId);\\n        uint256 seriesId = TokenIdLib.extractSeriesId(tokenId);\\n\\n        uint256 tokenLockTimestamp = nftLockTimestamp[nft][tokenId];\\n        uint256 tokenLockPeriod =\\n            nftStakeDetails[nft][collectionId][seriesId].lockPeriod;\\n\\n        if (block.timestamp >= tokenLockTimestamp + tokenLockPeriod) {\\n            return NFTStatus.Unlockable;\\n        }\\n\\n        return NFTStatus.Locked;\\n    }\\n\\n    function getOwnerNFTs(IERC721 nft, address owner)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return ownerNFTs[nft][owner];\\n    }\\n\\n    // INTERNAL ////////////////////////////////////////////////////////////////\\n}\\n\"\r\n    },\r\n    \"/home/noah/github/5d/2.0/contracts/contracts/core/Token.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract Token is Ownable, ERC20 {\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint256 totalSupply\\n    ) Ownable() ERC20(name, symbol) {\\n        _mint(msg.sender, totalSupply);\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/noah/github/5d/2.0/contracts/contracts/lib/TokenId.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nuint256 constant TOKEN_ID_LIMIT = 100000000;\\n\\nlibrary TokenIdLib {\\n    uint256 internal constant tokenIdLimit = TOKEN_ID_LIMIT;\\n    uint256 internal constant collectionIdMultiplier =\\n        tokenIdLimit * tokenIdLimit;\\n    uint256 internal constant seriesIdMultiplier = tokenIdLimit;\\n\\n    // Combine the collection ID, series ID and the token's position into a\\n    // single token ID. For example, if the series ID is `0` and the token\\n    // position is `23`, generate `100000023`.\\n    function encodeTokenId(\\n        uint256 collectionId,\\n        uint256 seriesId,\\n        uint256 tokenPosition\\n    ) internal pure returns (uint256) {\\n        return\\n            (collectionId + 1) *\\n            collectionIdMultiplier +\\n            (seriesId + 1) *\\n            seriesIdMultiplier +\\n            tokenPosition +\\n            1;\\n    }\\n\\n    function extractEdition(uint256 tokenId) internal pure returns (uint256) {\\n        return ((tokenId % seriesIdMultiplier)) - 1;\\n    }\\n\\n    // Extract the series ID from the tokenId. For example, `100000010` returns\\n    // `0`.\\n    function extractSeriesId(uint256 tokenId) internal pure returns (uint256) {\\n        return ((tokenId % collectionIdMultiplier) / seriesIdMultiplier) - 1;\\n    }\\n\\n    // Extract the series ID from the tokenId. For example, `100000010` returns\\n    // `0`.\\n    function extractCollectionId(uint256 tokenId)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 id = tokenId / collectionIdMultiplier;\\n        return id == 0 ? 0 : id - 1;\\n    }\\n}\\n\\ncontract TokenId {\\n    uint256 internal constant tokenIdLimit = TOKEN_ID_LIMIT;\\n    uint256 public constant collectionIdMultiplier =\\n        tokenIdLimit * tokenIdLimit;\\n    uint256 public constant seriesIdMultiplier = tokenIdLimit;\\n\\n    // Combine the collection ID, series ID and the token's position into a\\n    // single token ID. For example, if the series ID is `0` and the token\\n    // position is `23`, generate `100000023`.\\n    function encodeTokenId(\\n        uint256 collectionId,\\n        uint256 seriesId,\\n        uint256 tokenPosition\\n    ) public pure returns (uint256) {\\n        return TokenIdLib.encodeTokenId(collectionId, seriesId, tokenPosition);\\n    }\\n\\n    function extractEdition(uint256 tokenId) public pure returns (uint256) {\\n        return TokenIdLib.extractEdition(tokenId);\\n    }\\n\\n    // Extract the series ID from the tokenId. For example, `100000010` returns\\n    // `0`.\\n    function extractSeriesId(uint256 tokenId) public pure returns (uint256) {\\n        return TokenIdLib.extractSeriesId(tokenId);\\n    }\\n\\n    // Extract the series ID from the tokenId. For example, `100000010` returns\\n    // `0`.\\n    function extractCollectionId(uint256 tokenId)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return TokenIdLib.extractCollectionId(tokenId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overloaded;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract Stake\",\"name\":\"lock_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"feeCurrency_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC721\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"formHash\",\"type\":\"bytes32\"}],\"name\":\"NFTRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"seriesIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"}],\"name\":\"addNFTRedeemDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCurrency\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"}],\"name\":\"getNFTRedeemDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"redeemFee\",\"type\":\"uint256\"}],\"internalType\":\"struct Redeem.NFTRedeemDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"contract Stake\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftRedeemDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftRedeemed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721[]\",\"name\":\"nftArray\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"tokenIdsArray\",\"type\":\"uint256[][]\"},{\"internalType\":\"bytes32\",\"name\":\"formHash\",\"type\":\"bytes32\"}],\"name\":\"redeemMultipleNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"formHash\",\"type\":\"bytes32\"}],\"name\":\"redeemNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Stake\",\"name\":\"lock_\",\"type\":\"address\"}],\"name\":\"setLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"feeCurrency_\",\"type\":\"address\"}],\"name\":\"setPaymentCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Redeem","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000064b82567df90dcf40a146c9ec6ffe689314d12f3000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}