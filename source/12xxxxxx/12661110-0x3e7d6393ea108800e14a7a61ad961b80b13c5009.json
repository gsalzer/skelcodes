{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.4;\n\n\n\n// Part: AggregatorV3Interface\n\ninterface AggregatorV3Interface {\n\n  function decimals() external view returns (uint8);\n  function description() external view returns (string memory);\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n}\n\n// Part: IUniswapV2Factory\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n\n// Part: IUniswapV2Pair\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/Context\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/SafeMath\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/Ownable\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// Part: AmuletPriceProviderBase\n\ncontract AmuletPriceProviderBase is Ownable {\n    using SafeMath for uint256;\n\n    address constant public WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address constant public UNI_FACTORY = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\n\n    enum OracleType {None, Uniswap, SushiSwap, ChainLink}\n    \n    struct PriceFeedProvider {\n        address provider;\n        OracleType providerType;\n    }\n\n    mapping(address => PriceFeedProvider) public feed;\n    \n    event NewOracleAdded(address indexed _amulet, address _provider, uint8 _providerType);\n\n    constructor() {\n    }\n\n    function getLastPrice(address _amulet) public virtual view returns (uint256) {\n        OracleType providerType = feed[_amulet].providerType;\n        require(providerType != OracleType.None, 'Oracle not configured for this token');\n\n        if (providerType == OracleType.Uniswap || providerType == OracleType.SushiSwap) {\n            address pair = feed[_amulet].provider;\n            address token0 = IUniswapV2Pair(pair).token0();\n            address token1 = IUniswapV2Pair(pair).token1();\n            (uint112 _reserve0, uint112 _reserve1, uint32 _timeStamp) = IUniswapV2Pair(pair).getReserves();\n            // Let's check what token is WETH and calc rate\n            if (token0 == WETH) {\n                return (uint256)(_reserve0)*1e18/_reserve1;\n            } else {\n                return (uint256)(_reserve1)*1e18/_reserve0;\n            }\n        }\n        if (providerType == OracleType.ChainLink) {\n            ( \n                uint80 roundID, \n                int price,\n                uint startedAt,\n                uint timeStamp,\n                uint80 answeredInRound\n            ) = AggregatorV3Interface(feed[_amulet].provider).latestRoundData();\n            return uint256(price);\n        }\n        return 0;\n    }\n\n    function setPriceFeedProvider(address _token, address _provider, OracleType _providerType)\n        external\n        onlyOwner \n    {\n        _setPriceFeedProvider(_token, _provider, _providerType);\n    }\n\n    function setBatchPriceFeedProvider(address[] memory _token, address[] memory _provider, OracleType[] memory _providerType)\n        external\n        onlyOwner \n    {\n        require(_token.length == _provider.length , 'Arguments must have same length');\n        require(_token.length == _providerType.length , 'Arguments2 must have same length');\n        require(_token.length < 255, 'To long array');\n        for (uint8 i = 0; i < _token.length; i++) {\n            _setPriceFeedProvider(_token[i], _provider[i], _providerType[i]);\n        } \n     \n    }\n\n    function _setPriceFeedProvider(address _token, address _provider, OracleType _providerType)\n        internal\n    {\n        require(_token != address(0), \"Can't add oracle for None asset\");\n        //Some checks for available oracle types\n        if (_providerType == OracleType.Uniswap) {\n\n            if (_provider == address(0)){\n                // Try find pair address on UniSwap\n                _provider = IUniswapV2Factory(UNI_FACTORY).getPair(_token, WETH);\n                require(_provider != address(0), \"Can't find pair on UniSwap\");\n            }\n\n            require(\n                keccak256(abi.encodePacked(IUniswapV2Pair(_provider).name())) ==\n                keccak256(abi.encodePacked('Uniswap V2')), \"It seems NOT like Uniswap pair\");\n            require(IUniswapV2Pair(_provider).token0() == WETH || IUniswapV2Pair(_provider).token1() == WETH,\n                \"One token in pair must be WETH\"\n            );\n        }\n        if (_providerType == OracleType.SushiSwap) {\n\n            if (_provider == address(0)){\n                // Try find pair address on UniSwap\n                _provider = IUniswapV2Factory(UNI_FACTORY).getPair(_token, WETH);\n                require(_provider != address(0), \"Can't find pair on UniSwap\");\n            }\n\n            require(\n                keccak256(abi.encodePacked(IUniswapV2Pair(_provider).name())) ==\n                keccak256(abi.encodePacked('SushiSwap LP Token')), \"It seems NOT like SushiSwap pair\");\n            require(IUniswapV2Pair(_provider).token0() == WETH || IUniswapV2Pair(_provider).token1() == WETH,\n                \"One token in pair must be WETH\"\n            );\n        }\n        feed[_token].provider     = _provider;\n        feed[_token].providerType = OracleType(_providerType);\n        emit NewOracleAdded(_token, _provider, (uint8)(_providerType));\n    }\n\n}\n\n// File: AmuletPriceProvider.sol\n\ncontract AmuletPriceProvider is AmuletPriceProviderBase {\n\n    constructor() AmuletPriceProviderBase() {\n        _setPriceFeedProvider(0xD533a949740bb3306d119CC777fa900bA034cd52, 0x8a12Be339B0cD1829b91Adc01977caa5E9ac121e, OracleType.ChainLink); // $CRV\n        _setPriceFeedProvider(0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984, 0xD6aA3D25116d8dA79Ea0246c4826EB951872e02e, OracleType.ChainLink); // $UNI\n        _setPriceFeedProvider(0xfA5047c9c78B8877af97BDcb85Db743fD7313d4a, 0xc16935B445F4BDC172e408433c8f7101bbBbE368, OracleType.ChainLink); // $RGT\n        _setPriceFeedProvider(0xDADA00A9C23390112D08a1377cc59f7d03D9df55, 0x83B04AF7a77C727273B7a582D6Fda65472FCB3f2, OracleType.SushiSwap); // $DUNG\n        _setPriceFeedProvider(0x6B3595068778DD592e39A122f4f5a5cF09C90fE2, 0xe572CeF69f43c2E488b33924AF04BDacE19079cf, OracleType.ChainLink); // $SUSHI\n        _setPriceFeedProvider(0x0D8775F648430679A709E98d2b0Cb6250d2887EF, 0x0d16d4528239e9ee52fa531af613AcdB23D88c94, OracleType.ChainLink); // $BAT\n        _setPriceFeedProvider(0x3472A5A71965499acd81997a54BBA8D852C6E53d, 0x58921Ac140522867bf50b9E009599Da0CA4A2379, OracleType.ChainLink); // $BADGER\n        _setPriceFeedProvider(0x0d438F3b5175Bebc262bF23753C1E53d03432bDE, 0xe5Dc0A609Ab8bCF15d3f35cFaa1Ff40f521173Ea, OracleType.ChainLink); // $WNXM\n        _setPriceFeedProvider(0x3155BA85D5F96b2d030a4966AF206230e46849cb, 0x875D60C44cfbC38BaA4Eb2dDB76A767dEB91b97e, OracleType.ChainLink); // $RUNE\n        _setPriceFeedProvider(0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9, 0x6Df09E975c830ECae5bd4eD9d90f3A95a4f88012, OracleType.ChainLink); // $AAVE\n        _setPriceFeedProvider(0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F, 0x79291A9d692Df95334B1a0B3B4AE6bC606782f8c, OracleType.ChainLink); // $SNX\n        _setPriceFeedProvider(0x967da4048cD07aB37855c090aAF366e4ce1b9F48, 0x9b0FC4bb9981e5333689d69BdBF66351B9861E62, OracleType.ChainLink); // $OCEAN\n        _setPriceFeedProvider(0x0F5D2fB29fb7d3CFeE444a200298f468908cC942, 0x82A44D92D6c329826dc557c5E1Be6ebeC5D5FeB9, OracleType.ChainLink); // $MANA\n        _setPriceFeedProvider(0x514910771AF9Ca656af840dff83E8264EcF986CA, 0xDC530D9457755926550b59e8ECcdaE7624181557, OracleType.ChainLink); // $LINK\n        _setPriceFeedProvider(0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32, 0x4e844125952D32AcdF339BE976c98E22F6F318dB, OracleType.ChainLink); // $LDO\n        _setPriceFeedProvider(0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C, 0xCf61d1841B178fe82C8895fe60c2EDDa08314416, OracleType.ChainLink); // $BNT\n        _setPriceFeedProvider(0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2, 0x24551a8Fb2A7211A25a17B1481f043A8a8adC7f2, OracleType.ChainLink); // $MKR\n        _setPriceFeedProvider(0x111111111117dC0aa78b770fA6A738034120C302, 0x72AFAECF99C9d9C8215fF44C77B94B99C28741e8, OracleType.ChainLink); // $1INCH\n        _setPriceFeedProvider(0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e, 0x7c5d4F8345e66f68099581Db340cd65B078C41f4, OracleType.ChainLink); // $YFI\n        _setPriceFeedProvider(0xc00e94Cb662C3520282E6f5717214004A7f26888, 0x1B39Ee86Ec5979ba5C322b826B3ECb8C79991699, OracleType.ChainLink); // $COMP\n    }\n}\n","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_amulet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_providerType\",\"type\":\"uint8\"}],\"name\":\"NewOracleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UNI_FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"enum AmuletPriceProviderBase.OracleType\",\"name\":\"providerType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_amulet\",\"type\":\"address\"}],\"name\":\"getLastPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_token\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_provider\",\"type\":\"address[]\"},{\"internalType\":\"enum AmuletPriceProviderBase.OracleType[]\",\"name\":\"_providerType\",\"type\":\"uint8[]\"}],\"name\":\"setBatchPriceFeedProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"enum AmuletPriceProviderBase.OracleType\",\"name\":\"_providerType\",\"type\":\"uint8\"}],\"name\":\"setPriceFeedProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AmuletPriceProvider","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}