{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/EPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./interfaces/IETokenFactory.sol\\\";\\nimport \\\"./interfaces/IEToken.sol\\\";\\nimport \\\"./interfaces/IEPool.sol\\\";\\nimport \\\"./utils/ControllerMixin.sol\\\";\\nimport \\\"./utils/ChainlinkMixin.sol\\\";\\nimport \\\"./utils/TokenUtils.sol\\\";\\nimport \\\"./utils/Math.sol\\\";\\nimport \\\"./EPoolLibrary.sol\\\";\\n\\ncontract EPool is ControllerMixin, ChainlinkMixin, IEPool {\\n    using SafeERC20 for IERC20;\\n    using TokenUtils for IERC20;\\n    using TokenUtils for IEToken;\\n\\n    uint256 public constant FEE_RATE_LIMIT = 0.5e18;\\n    uint256 public constant TRANCHE_LIMIT = 5;\\n\\n    IETokenFactory public immutable eTokenFactory;\\n\\n    IERC20 public immutable override tokenA;\\n    IERC20 public immutable override tokenB;\\n    // scaling factor for TokenA and TokenB\\n    // assuming decimals can't be changed for both token\\n    uint256 public immutable override sFactorA;\\n    uint256 public immutable override sFactorB;\\n\\n    mapping(address => Tranche) public tranches;\\n    address[] public tranchesByIndex;\\n\\n    // rebalancing strategy\\n    uint256 public override rebalanceMinRDiv;\\n    uint256 public override rebalanceInterval;\\n    uint256 public override lastRebalance;\\n\\n    // fees\\n    uint256 public override feeRate;\\n    uint256 public override cumulativeFeeA;\\n    uint256 public override cumulativeFeeB;\\n\\n    event AddedTranche(address indexed eToken);\\n    event RebalancedTranches(uint256 deltaA, uint256 deltaB, uint256 rChange, uint256 rDiv);\\n    event IssuedEToken(address indexed eToken, uint256 amount, uint256 amountA, uint256 amountB, address user);\\n    event RedeemedEToken(address indexed eToken, uint256 amount, uint256 amountA, uint256 amountB, address user);\\n    event SetMinRDiv(uint256 minRDiv);\\n    event SetRebalanceInterval(uint256 interval);\\n    event SetFeeRate(uint256 feeRate);\\n    event TransferFees(address indexed feesOwner, uint256 cumulativeFeeA, uint256 cumulativeFeeB);\\n    event RecoveredToken(address token, uint256 amount);\\n\\n    /**\\n     * @dev Token with higher precision should be set as TokenA for max. precision\\n     * @param _controller Address of Controller\\n     * @param _eTokenFactory Address of the EToken factory\\n     * @param _tokenA Address of TokenA\\n     * @param _tokenB Address of TokenB\\n     * @param _aggregator Address of the exchange rate aggregator\\n     * @param inverseRate Bool indicating whether rate returned from aggregator should be inversed (1/rate)\\n     */\\n    constructor(\\n        IController _controller,\\n        IETokenFactory _eTokenFactory,\\n        IERC20 _tokenA,\\n        IERC20 _tokenB,\\n        address _aggregator,\\n        bool inverseRate\\n    ) ControllerMixin(_controller) ChainlinkMixin(_aggregator, inverseRate, EPoolLibrary.sFactorI) {\\n        eTokenFactory = _eTokenFactory;\\n        (tokenA, tokenB) = (_tokenA, _tokenB);\\n        (sFactorA, sFactorB) = (10**_tokenA.decimals(), 10**_tokenB.decimals());\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current Aggregator which provides the exchange rate between TokenA and TokenB\\n     * @return Address of aggregator\\n     */\\n    function getController() external view override returns (address) {\\n        return address(controller);\\n    }\\n\\n    /**\\n     * @notice Updates the Controller\\n     * @dev Can only called by an authorized sender\\n     * @param _controller Address of the new Controller\\n     * @return True on success\\n     */\\n    function setController(address _controller) external override onlyDao(\\\"EPool: not dao\\\") returns (bool) {\\n        _setController(_controller);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Returns the price of TokenA denominated in TokenB\\n     * @return current exchange rate\\n     */\\n    function getRate() external view override returns (uint256) {\\n        return _rate();\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current Aggregator which provides the exchange rate between TokenA and TokenB\\n     * @return Address of aggregator\\n     */\\n    function getAggregator() external view override returns (address) {\\n        return address(aggregator);\\n    }\\n\\n    /**\\n     * @notice Updates the Aggregator which provides the the exchange rate between TokenA and TokenB\\n     * @dev Can only called by an authorized sender. Setting the aggregator to 0x0 disables rebalancing\\n     * and issuance of new EToken and redeeming TokenA and TokenB is based on the users current share of EToken.\\n     * @param _aggregator Address of the new exchange rate aggregator\\n     * @param inverseRate Bool indicating whether rate returned from aggregator should be inversed (1/rate)\\n     * @return True on success\\n     */\\n    function setAggregator(\\n        address _aggregator,\\n        bool inverseRate\\n    ) external override onlyDao(\\\"EPool: not dao\\\") returns (bool) {\\n        _setAggregator(_aggregator, inverseRate);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Set min. deviation (in percentage scaled by 1e18) required for triggering a rebalance\\n     * @dev Can only be called by an authorized sender\\n     * @param minRDiv min. ratio deviation\\n     * @return True on success\\n     */\\n    function setMinRDiv(\\n        uint256 minRDiv\\n    ) external onlyDao(\\\"EPool: not dao\\\") returns (bool) {\\n        rebalanceMinRDiv = minRDiv;\\n        emit SetMinRDiv(minRDiv);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Set frequency of rebalances\\n     * @dev Can only be called by an authorized sender\\n     * @param interval rebalance interval\\n     * @return True on success\\n     */\\n    function setRebalanceInterval(\\n        uint256 interval\\n    ) external onlyDao(\\\"EPool: not dao\\\") returns (bool) {\\n        rebalanceInterval = interval;\\n        emit SetRebalanceInterval(interval);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Sets the fee rate\\n     * @dev Can only be called by the dao\\n     * @param _feeRate fee rate\\n     * @return True on success\\n     */\\n    function setFeeRate(uint256 _feeRate) external override onlyDao(\\\"EPool: not dao\\\") returns (bool) {\\n        require(_feeRate <= FEE_RATE_LIMIT, \\\"EPool: above fee rate limit\\\");\\n        feeRate = _feeRate;\\n        emit SetFeeRate(_feeRate);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfers the accumulated fees in TokenA and TokenB to feesOwner\\n     * @return True on success\\n     */\\n    function transferFees() external override returns (bool) {\\n        (uint256 _cumulativeFeeA, uint256 _cumulativeFeeB) = (cumulativeFeeA, cumulativeFeeB);\\n        (cumulativeFeeA, cumulativeFeeB) = (0, 0);\\n        tokenA.safeTransfer(controller.feesOwner(), _cumulativeFeeA);\\n        tokenB.safeTransfer(controller.feesOwner(), _cumulativeFeeB);\\n        emit TransferFees(controller.feesOwner(), _cumulativeFeeA, _cumulativeFeeB);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Returns the tranche data for a EToken\\n     * @param eToken Address of the EToken\\n     * @return Tranche\\n     */\\n    function getTranche(address eToken) external view override returns(Tranche memory) {\\n        return tranches[eToken];\\n    }\\n\\n    /**\\n     * @notice Returns the all tranches of the EPool\\n     * @return _tranches Tranches\\n     */\\n    function getTranches() external view override returns(Tranche[] memory _tranches) {\\n        _tranches = new Tranche[](tranchesByIndex.length);\\n        for (uint256 i = 0; i < tranchesByIndex.length; i++) {\\n            _tranches[i] = tranches[tranchesByIndex[i]];\\n        }\\n    }\\n\\n    /**\\n     * @notice Adds a new tranche to the EPool\\n     * @dev Can only called by an authorized sender\\n     * @param targetRatio Target ratio between reserveA and reserveB as reserveValueA/reserveValueB\\n     * @param eTokenName Name of the tranches EToken\\n     * @param eTokenSymbol Symbol of the tranches EToken\\n     * @return True on success\\n     */\\n    function addTranche(\\n        uint256 targetRatio,\\n        string memory eTokenName,\\n        string memory eTokenSymbol\\n    ) external override onlyDao(\\\"EPool: not dao\\\") returns (bool) {\\n        require(tranchesByIndex.length < TRANCHE_LIMIT, \\\"EPool: max. tranche count\\\");\\n        require(targetRatio != 0, \\\"EPool: targetRatio == 0\\\");\\n        IEToken eToken = eTokenFactory.createEToken(eTokenName, eTokenSymbol);\\n        tranches[address(eToken)] = Tranche(eToken, 10**eToken.decimals(), 0, 0, targetRatio);\\n        tranchesByIndex.push(address(eToken));\\n        emit AddedTranche(address(eToken));\\n        return true;\\n    }\\n\\n    function _trancheDelta(\\n        Tranche storage t, uint256 fracDelta\\n    ) internal view returns (uint256 deltaA, uint256 deltaB, uint256 rChange) {\\n        uint256 rate = _rate();\\n        (uint256 _deltaA, uint256 _deltaB, uint256 _rChange) = EPoolLibrary.trancheDelta(\\n            t, rate, sFactorA, sFactorB\\n        );\\n        (deltaA, deltaB, rChange) = (\\n            fracDelta * _deltaA / EPoolLibrary.sFactorI, fracDelta * _deltaB / EPoolLibrary.sFactorI, _rChange\\n        );\\n    }\\n\\n    /**\\n     * @notice Rebalances all tranches based on the current rate\\n     */\\n    function _rebalanceTranches(\\n        uint256 fracDelta\\n    ) internal returns (uint256 deltaA, uint256 deltaB, uint256 rChange, uint256 rDiv) {\\n        require(fracDelta <= EPoolLibrary.sFactorI, \\\"EPool: fracDelta > 1.0\\\");\\n        uint256 totalReserveA;\\n        int256 totalDeltaA;\\n        int256 totalDeltaB;\\n        for (uint256 i = 0; i < tranchesByIndex.length; i++) {\\n            Tranche storage t = tranches[tranchesByIndex[i]];\\n            totalReserveA += t.reserveA;\\n            (uint256 _deltaA, uint256 _deltaB, uint256 _rChange) = _trancheDelta(t, fracDelta);\\n            if (_rChange == 0) {\\n                (t.reserveA, t.reserveB) = (t.reserveA - _deltaA, t.reserveB + _deltaB);\\n                (totalDeltaA, totalDeltaB) = (totalDeltaA - int256(_deltaA), totalDeltaB + int256(_deltaB));\\n            } else {\\n                (t.reserveA, t.reserveB) = (t.reserveA + _deltaA, t.reserveB - _deltaB);\\n                (totalDeltaA, totalDeltaB) = (totalDeltaA + int256(_deltaA), totalDeltaB - int256(_deltaB));\\n            }\\n        }\\n        if (totalDeltaA > 0 && totalDeltaB < 0)  {\\n            (deltaA, deltaB, rChange) = (uint256(totalDeltaA), uint256(-totalDeltaB), 1);\\n        } else if (totalDeltaA < 0 && totalDeltaB > 0) {\\n            (deltaA, deltaB, rChange) = (uint256(-totalDeltaA), uint256(totalDeltaB), 0);\\n        }\\n        rDiv = (totalReserveA == 0) ? 0 : deltaA * EPoolLibrary.sFactorI / totalReserveA;\\n        emit RebalancedTranches(deltaA, deltaB, rChange, rDiv);\\n    }\\n\\n    /**\\n     * @notice Rebalances all tranches based on the current rate\\n     * @dev Can be overriden contract inherting EPool for custom logic during rebalancing\\n     * @param fracDelta Fraction of the delta of deltaA or deltaB to rebalance\\n     * @return deltaA Rebalanced delta of reserveA\\n     * @return deltaB Rebalanced delta of reserveB\\n     * @return rChange 0 for deltaA <= 0 and deltaB >= 0, 1 for deltaA > 0 and deltaB < 0 (trancheDelta method)\\n     * @return rDiv Deviation from target in percentage (1e18)\\n     */\\n    function rebalance(\\n        uint256 fracDelta\\n    ) external virtual override returns (uint256 deltaA, uint256 deltaB, uint256 rChange, uint256 rDiv) {\\n        (deltaA, deltaB, rChange, rDiv) = _rebalanceTranches(fracDelta);\\n        require(rDiv >= rebalanceMinRDiv, \\\"EPool: minRDiv not met\\\");\\n        require(block.timestamp >= lastRebalance + rebalanceInterval, \\\"EPool: within interval\\\");\\n        lastRebalance = block.timestamp;\\n        if (rChange == 0) {\\n            tokenA.safeTransfer(msg.sender, deltaA);\\n            tokenB.safeTransferFrom(msg.sender, address(this), deltaB);\\n        } else {\\n            tokenA.safeTransferFrom(msg.sender, address(this), deltaA);\\n            tokenB.safeTransfer(msg.sender, deltaB);\\n        }\\n    }\\n\\n    /**\\n     * @notice Issues EToken by depositing TokenA and TokenB proportionally to the current ratio\\n     * @dev Requires setting allowance for TokenA and TokenB\\n     * @param eToken Address of the eToken of the tranche\\n     * @param amount Amount of EToken to redeem\\n     * @return amountA Amount of TokenA deposited\\n     * @return amountB Amount of TokenB deposited\\n     */\\n    function issueExact(\\n        address eToken,\\n        uint256 amount\\n    ) external override issuanceNotPaused(\\\"EPool: issuance paused\\\") returns (uint256 amountA, uint256 amountB) {\\n        Tranche storage t = tranches[eToken];\\n        (amountA, amountB) = EPoolLibrary.tokenATokenBForEToken(t, amount, _rate(), sFactorA, sFactorB);\\n        (t.reserveA, t.reserveB) = (t.reserveA + amountA, t.reserveB + amountB);\\n        t.eToken.mint(msg.sender, amount);\\n        tokenA.safeTransferFrom(msg.sender, address(this), amountA);\\n        tokenB.safeTransferFrom(msg.sender, address(this), amountB);\\n        emit IssuedEToken(eToken, amount, amountA, amountB, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Redeems EToken for TokenA and TokenB proportionally to the current ratio\\n     * @dev Requires setting allowance for EToken\\n     * @param eToken Address of the eToken of the tranche\\n     * @param amount Amount of EToken to redeem\\n     * @return amountA Amount of TokenA withdrawn\\n     * @return amountB Amount of TokenB withdrawn\\n     */\\n    function redeemExact(\\n        address eToken,\\n        uint256 amount\\n    ) external override returns (uint256 amountA, uint256 amountB) {\\n        Tranche storage t = tranches[eToken];\\n        require(t.reserveA + t.reserveB > 0, \\\"EPool: insufficient liquidity\\\");\\n        require(amount <= t.eToken.balanceOf(msg.sender), \\\"EPool: insufficient EToken\\\");\\n        (amountA, amountB) = EPoolLibrary.tokenATokenBForEToken(t, amount, 0, sFactorA, sFactorB);\\n        (t.reserveA, t.reserveB) = (t.reserveA - amountA, t.reserveB - amountB);\\n        t.eToken.burn(msg.sender, amount);\\n        if (feeRate != 0) {\\n            (uint256 feeA, uint256 feeB) = EPoolLibrary.feeAFeeBForTokenATokenB(amountA, amountB, feeRate);\\n            (cumulativeFeeA, cumulativeFeeB) = (cumulativeFeeA + feeA, cumulativeFeeB + feeB);\\n            (amountA, amountB) = (amountA - feeA, amountB - feeB);\\n        }\\n        tokenA.safeTransfer(msg.sender, amountA);\\n        tokenB.safeTransfer(msg.sender, amountB);\\n        emit RedeemedEToken(eToken, amount, amountA, amountB, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Recovers untracked amounts\\n     * @dev Can only called by an authorized sender\\n     * @param token Address of the token\\n     * @param amount Amount to recover\\n     * @return True on success\\n     */\\n    function recover(IERC20 token, uint256 amount) external override onlyDao(\\\"EPool: not dao\\\") returns (bool) {\\n        uint256 reserved;\\n        if (token == tokenA) {\\n            for (uint256 i = 0; i < tranchesByIndex.length; i++) {\\n                reserved += tranches[tranchesByIndex[i]].reserveA;\\n            }\\n        } else if (token == tokenB) {\\n            for (uint256 i = 0; i < tranchesByIndex.length; i++) {\\n                reserved += tranches[tranchesByIndex[i]].reserveB;\\n            }\\n        }\\n        require(amount <= token.balanceOf(address(this)) - reserved, \\\"EPool: no excess\\\");\\n        token.safeTransfer(msg.sender, amount);\\n        emit RecoveredToken(address(token), amount);\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IETokenFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.1;\\n\\nimport \\\"./IEToken.sol\\\";\\n\\ninterface IETokenFactory {\\n\\n    function getController() external view returns (address);\\n\\n    function setController(address _controller) external returns (bool);\\n\\n    function createEToken(string memory name, string memory symbol) external returns (IEToken);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IEToken is IERC20 {\\n\\n    function getController() external view returns (address);\\n\\n    function setController(address _controller) external returns (bool);\\n\\n    function mint(address account, uint256 amount) external returns (bool);\\n\\n    function burn(address account, uint256 amount) external returns (bool);\\n\\n    function recover(IERC20 token, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IEToken.sol\\\";\\n\\ninterface IEPool {\\n    struct Tranche {\\n        IEToken eToken;\\n        uint256 sFactorE;\\n        uint256 reserveA;\\n        uint256 reserveB;\\n        uint256 targetRatio;\\n    }\\n\\n    function getController() external view returns (address);\\n\\n    function setController(address _controller) external returns (bool);\\n\\n    function tokenA() external view returns (IERC20);\\n\\n    function tokenB() external view returns (IERC20);\\n\\n    function sFactorA() external view returns (uint256);\\n\\n    function sFactorB() external view returns (uint256);\\n\\n    function getTranche(address eToken) external view returns (Tranche memory);\\n\\n    function getTranches() external view returns(Tranche[] memory _tranches);\\n\\n    function addTranche(uint256 targetRatio, string memory eTokenName, string memory eTokenSymbol) external returns (bool);\\n\\n    function getAggregator() external view returns (address);\\n\\n    function setAggregator(address oracle, bool inverseRate) external returns (bool);\\n\\n    function rebalanceMinRDiv() external view returns (uint256);\\n\\n    function rebalanceInterval() external view returns (uint256);\\n\\n    function lastRebalance() external view returns (uint256);\\n\\n    function feeRate() external view returns (uint256);\\n\\n    function cumulativeFeeA() external view returns (uint256);\\n\\n    function cumulativeFeeB() external view returns (uint256);\\n\\n    function setFeeRate(uint256 _feeRate) external returns (bool);\\n\\n    function transferFees() external returns (bool);\\n\\n    function getRate() external view returns (uint256);\\n\\n    function rebalance(uint256 fracDelta) external returns (uint256 deltaA, uint256 deltaB, uint256 rChange, uint256 rDiv);\\n\\n    function issueExact(address eToken, uint256 amount) external returns (uint256 amountA, uint256 amountB);\\n\\n    function redeemExact(address eToken, uint256 amount) external returns (uint256 amountA, uint256 amountB);\\n\\n    function recover(IERC20 token, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ControllerMixin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.1;\\n\\nimport \\\"../interfaces/IController.sol\\\";\\n\\ncontract ControllerMixin {\\n    event SetController(address controller);\\n\\n    IController internal controller;\\n\\n    constructor(IController _controller) {\\n        controller = _controller;\\n    }\\n\\n    modifier onlyDao(string memory revertMsg) {\\n        require(msg.sender == controller.dao(), revertMsg);\\n        _;\\n    }\\n\\n    modifier onlyDaoOrGuardian(string memory revertMsg) {\\n        require(controller.isDaoOrGuardian(msg.sender), revertMsg);\\n        _;\\n    }\\n\\n    modifier issuanceNotPaused(string memory revertMsg) {\\n        require(controller.pausedIssuance() == false, revertMsg);\\n        _;\\n    }\\n\\n    function _setController(address _controller) internal {\\n        controller = IController(_controller);\\n        emit SetController(_controller);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ChainlinkMixin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.1;\\n\\nimport \\\"../interfaces/IAggregatorV3Interface.sol\\\";\\n\\ncontract ChainlinkMixin {\\n    event SetAggregator(address aggregator, bool inverseRate);\\n\\n    AggregatorV3Interface internal aggregator;\\n    uint256 private immutable sFactorTarget;\\n    uint256 private sFactorSource;\\n    uint256 private inverseRate; // if true return rate as inverse (1 / rate)\\n\\n    constructor(address _aggregator, bool _inverseRate, uint256 _sFactorTarget) {\\n        sFactorTarget = _sFactorTarget;\\n        _setAggregator(_aggregator, _inverseRate);\\n    }\\n\\n    function _setAggregator(address _aggregator, bool _inverseRate) internal {\\n        aggregator = AggregatorV3Interface(_aggregator);\\n        sFactorSource = 10**aggregator.decimals();\\n        inverseRate = (_inverseRate == false) ? 0 : 1;\\n        emit SetAggregator(_aggregator, _inverseRate);\\n    }\\n\\n    function _rate() internal view returns (uint256) {\\n        (, int256 rate, , , ) = aggregator.latestRoundData();\\n        if (inverseRate == 0) return uint256(rate) * sFactorTarget / sFactorSource;\\n        return (sFactorTarget * sFactorTarget) / (uint256(rate) * sFactorTarget / sFactorSource);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/TokenUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../interfaces/IERC20Optional.sol\\\";\\n\\nlibrary TokenUtils {\\n    function decimals(IERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSignature(\\\"decimals()\\\"));\\n        require(success, \\\"TokenUtils: no decimals\\\");\\n        uint8 _decimals = abi.decode(data, (uint8));\\n        return _decimals;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU\\npragma solidity ^0.8.1;\\n\\nlibrary Math {\\n\\n    function abs(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a > b) ? a - b : b - a;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/EPoolLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./interfaces/IETokenFactory.sol\\\";\\nimport \\\"./interfaces/IEToken.sol\\\";\\nimport \\\"./interfaces/IEPool.sol\\\";\\nimport \\\"./utils/TokenUtils.sol\\\";\\nimport \\\"./utils/Math.sol\\\";\\n\\nlibrary EPoolLibrary {\\n    using TokenUtils for IERC20;\\n\\n    uint256 internal constant sFactorI = 1e18; // internal scaling factor (18 decimals)\\n\\n    /**\\n     * @notice Returns the target ratio if reserveA and reserveB are 0 (for initial deposit)\\n     * currentRatio := (reserveA denominated in tokenB / reserveB denominated in tokenB) with decI decimals\\n     */\\n    function currentRatio(\\n        IEPool.Tranche memory t,\\n        uint256 rate,\\n        uint256 sFactorA,\\n        uint256 sFactorB\\n    ) internal pure returns(uint256) {\\n        if (t.reserveA == 0 || t.reserveB == 0) {\\n            if (t.reserveA == 0 && t.reserveB == 0) return t.targetRatio;\\n            if (t.reserveA == 0) return 0;\\n            if (t.reserveB == 0) return type(uint256).max;\\n        }\\n        return ((t.reserveA * rate / sFactorA) * sFactorI) / (t.reserveB * sFactorI / sFactorB);\\n    }\\n\\n    /**\\n     * @notice Returns the deviation of reserveA and reserveB from target ratio\\n     * currentRatio > targetRatio: release TokenA liquidity and add TokenB liquidity\\n     * currentRatio < targetRatio: add TokenA liquidity and release TokenB liquidity\\n     * deltaA := abs(t.reserveA, (t.reserveB / rate * t.targetRatio)) / (1 + t.targetRatio)\\n     * deltaB := deltaA * rate\\n     */\\n    function trancheDelta(\\n        IEPool.Tranche memory t,\\n        uint256 rate,\\n        uint256 sFactorA,\\n        uint256 sFactorB\\n    ) internal pure returns (uint256 deltaA, uint256 deltaB, uint256 rChange) {\\n        rChange = (currentRatio(t, rate, sFactorA, sFactorB) < t.targetRatio) ? 1 : 0;\\n        deltaA = (\\n            Math.abs(t.reserveA, tokenAForTokenB(t.reserveB, t.targetRatio, rate, sFactorA, sFactorB)) * sFactorA\\n        ) / (sFactorA + (t.targetRatio * sFactorA / sFactorI));\\n        // (convert to TokenB precision first to avoid altering deltaA)\\n        deltaB = ((deltaA * sFactorB / sFactorA) * rate) / sFactorI;\\n        // round to 0 in case of rounding errors\\n        if (deltaA == 0 || deltaB == 0) (deltaA, deltaB, rChange) = (0, 0, 0);\\n    }\\n\\n    /**\\n     * @notice Returns the sum of the tranches reserve deltas\\n     */\\n    function delta(\\n        IEPool.Tranche[] memory ts,\\n        uint256 rate,\\n        uint256 sFactorA,\\n        uint256 sFactorB\\n    ) internal pure returns (uint256 deltaA, uint256 deltaB, uint256 rChange, uint256 rDiv) {\\n        uint256 totalReserveA;\\n        int256 totalDeltaA;\\n        int256 totalDeltaB;\\n        for (uint256 i = 0; i < ts.length; i++) {\\n            totalReserveA += ts[i].reserveA;\\n            (uint256 _deltaA, uint256 _deltaB, uint256 _rChange) = trancheDelta(\\n                ts[i], rate, sFactorA, sFactorB\\n            );\\n            (totalDeltaA, totalDeltaB) = (_rChange == 0)\\n                ? (totalDeltaA - int256(_deltaA), totalDeltaB + int256(_deltaB))\\n                : (totalDeltaA + int256(_deltaA), totalDeltaB - int256(_deltaB));\\n\\n        }\\n        if (totalDeltaA > 0 && totalDeltaB < 0)  {\\n            (deltaA, deltaB, rChange) = (uint256(totalDeltaA), uint256(-totalDeltaB), 1);\\n        } else if (totalDeltaA < 0 && totalDeltaB > 0) {\\n            (deltaA, deltaB, rChange) = (uint256(-totalDeltaA), uint256(totalDeltaB), 0);\\n        }\\n        rDiv = (totalReserveA == 0) ? 0 : deltaA * EPoolLibrary.sFactorI / totalReserveA;\\n    }\\n\\n    /**\\n     * @notice how much EToken can be issued, redeemed for amountA and amountB\\n     * initial issuance / last redemption: sqrt(amountA * amountB)\\n     * subsequent issuances / non nullifying redemptions: claim on reserve * EToken total supply\\n     */\\n    function eTokenForTokenATokenB(\\n        IEPool.Tranche memory t,\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 rate,\\n        uint256 sFactorA,\\n        uint256 sFactorB\\n    ) internal view returns (uint256) {\\n        uint256 amountsA = totalA(amountA, amountB, rate, sFactorA, sFactorB);\\n        if (t.reserveA + t.reserveB == 0) {\\n            return (Math.sqrt((amountsA * t.sFactorE / sFactorA) * t.sFactorE));\\n        }\\n        uint256 reservesA = totalA(t.reserveA, t.reserveB, rate, sFactorA, sFactorB);\\n        uint256 share = ((amountsA * t.sFactorE / sFactorA) * t.sFactorE) / (reservesA * t.sFactorE / sFactorA);\\n        return share * t.eToken.totalSupply() / t.sFactorE;\\n    }\\n\\n    /**\\n     * @notice Given an amount of EToken, how much TokenA and TokenB have to be deposited, withdrawn for it\\n     * initial issuance / last redemption: sqrt(amountA * amountB) -> such that the inverse := EToken amount ** 2\\n     * subsequent issuances / non nullifying redemptions: claim on EToken supply * reserveA/B\\n     */\\n    function tokenATokenBForEToken(\\n        IEPool.Tranche memory t,\\n        uint256 amount,\\n        uint256 rate,\\n        uint256 sFactorA,\\n        uint256 sFactorB\\n    ) internal view returns (uint256 amountA, uint256 amountB) {\\n        if (t.reserveA + t.reserveB == 0) {\\n            uint256 amountsA = amount * sFactorA / t.sFactorE;\\n            (amountA, amountB) = tokenATokenBForTokenA(\\n                amountsA * amountsA / sFactorA , t.targetRatio, rate, sFactorA, sFactorB\\n            );\\n        } else {\\n            uint256 eTokenTotalSupply = t.eToken.totalSupply();\\n            if (eTokenTotalSupply == 0) return(0, 0);\\n            uint256 share = amount * t.sFactorE / eTokenTotalSupply;\\n            amountA = share * t.reserveA / t.sFactorE;\\n            amountB = share * t.reserveB / t.sFactorE;\\n        }\\n    }\\n\\n    /**\\n     * @notice Given amountB, which amountA is required such that amountB / amountA is equal to the ratio\\n     * amountA := amountBInTokenA * ratio\\n     */\\n    function tokenAForTokenB(\\n        uint256 amountB,\\n        uint256 ratio,\\n        uint256 rate,\\n        uint256 sFactorA,\\n        uint256 sFactorB\\n    ) internal pure returns(uint256) {\\n        return (((amountB * sFactorI / sFactorB) * ratio) / rate) * sFactorA / sFactorI;\\n    }\\n\\n    /**\\n     * @notice Given amountA, which amountB is required such that amountB / amountA is equal to the ratio\\n     * amountB := amountAInTokenB / ratio\\n     */\\n    function tokenBForTokenA(\\n        uint256 amountA,\\n        uint256 ratio,\\n        uint256 rate,\\n        uint256 sFactorA,\\n        uint256 sFactorB\\n    ) internal pure returns(uint256) {\\n        return (((amountA * sFactorI / sFactorA) * rate) / ratio) * sFactorB / sFactorI;\\n    }\\n\\n    /**\\n     * @notice Given an amount of TokenA, how can it be split up proportionally into amountA and amountB\\n     * according to the ratio\\n     * amountA := total - (total / (1 + ratio)) == (total * ratio) / (1 + ratio)\\n     * amountB := (total / (1 + ratio)) * rate\\n     */\\n    function tokenATokenBForTokenA(\\n        uint256 _totalA,\\n        uint256 ratio,\\n        uint256 rate,\\n        uint256 sFactorA,\\n        uint256 sFactorB\\n    ) internal pure returns (uint256 amountA, uint256 amountB) {\\n        amountA = _totalA - (_totalA * sFactorI / (sFactorI + ratio));\\n        amountB = (((_totalA * sFactorI / sFactorA) * rate) / (sFactorI + ratio)) * sFactorB / sFactorI;\\n    }\\n\\n    /**\\n     * @notice Given an amount of TokenB, how can it be split up proportionally into amountA and amountB\\n     * according to the ratio\\n     * amountA := (total * ratio) / (rate * (1 + ratio))\\n     * amountB := total / (1 + ratio)\\n     */\\n    function tokenATokenBForTokenB(\\n        uint256 _totalB,\\n        uint256 ratio,\\n        uint256 rate,\\n        uint256 sFactorA,\\n        uint256 sFactorB\\n    ) internal pure returns (uint256 amountA, uint256 amountB) {\\n        amountA = ((((_totalB * sFactorI / sFactorB) * ratio) / (sFactorI + ratio)) * sFactorA) / rate;\\n        amountB = (_totalB * sFactorI) / (sFactorI + ratio);\\n    }\\n\\n    /**\\n     * @notice Return the total value of amountA and amountB denominated in TokenA\\n     * totalA := amountA + (amountB / rate)\\n     */\\n    function totalA(\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 rate,\\n        uint256 sFactorA,\\n        uint256 sFactorB\\n    ) internal pure returns (uint256 _totalA) {\\n        return amountA + ((((amountB * sFactorI / sFactorB) * sFactorI) / rate) * sFactorA) / sFactorI;\\n    }\\n\\n    /**\\n     * @notice Return the total value of amountA and amountB denominated in TokenB\\n     * totalB := amountB + (amountA * rate)\\n     */\\n    function totalB(\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 rate,\\n        uint256 sFactorA,\\n        uint256 sFactorB\\n    ) internal pure returns (uint256 _totalB) {\\n        return amountB + ((amountA * rate / sFactorA) * sFactorB) / sFactorI;\\n    }\\n\\n    /**\\n     * @notice Return the withdrawal fee for a given amount of TokenA and TokenB\\n     * feeA := amountA * feeRate\\n     * feeB := amountB * feeRate\\n     */\\n    function feeAFeeBForTokenATokenB(\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 feeRate\\n    ) internal pure returns (uint256 feeA, uint256 feeB) {\\n        feeA = amountA * feeRate / EPoolLibrary.sFactorI;\\n        feeB = amountB * feeRate / EPoolLibrary.sFactorI;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.1;\\npragma experimental ABIEncoderV2;\\n\\ninterface IController {\\n\\n    function dao() external view returns (address);\\n\\n    function guardian() external view returns (address);\\n\\n    function isDaoOrGuardian(address sender) external view returns (bool);\\n\\n    function setDao(address _dao) external returns (bool);\\n\\n    function setGuardian(address _guardian) external returns (bool);\\n\\n    function feesOwner() external view returns (address);\\n\\n    function pausedIssuance() external view returns (bool);\\n\\n    function setFeesOwner(address _feesOwner) external returns (bool);\\n\\n    function setPausedIssuance(bool _pausedIssuance) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface AggregatorV3Interface {\\n\\n    function decimals() external view returns (uint8);\\n    function description() external view returns (string memory);\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Optional.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Interface of the the optional methods of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Optional {\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IController\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"contract IETokenFactory\",\"name\":\"_eTokenFactory\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"inverseRate\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"eToken\",\"type\":\"address\"}],\"name\":\"AddedTranche\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"eToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"IssuedEToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deltaA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deltaB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rChange\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rDiv\",\"type\":\"uint256\"}],\"name\":\"RebalancedTranches\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoveredToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"eToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RedeemedEToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"inverseRate\",\"type\":\"bool\"}],\"name\":\"SetAggregator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"SetController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeRate\",\"type\":\"uint256\"}],\"name\":\"SetFeeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minRDiv\",\"type\":\"uint256\"}],\"name\":\"SetMinRDiv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"SetRebalanceInterval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feesOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumulativeFeeA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumulativeFeeB\",\"type\":\"uint256\"}],\"name\":\"TransferFees\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_RATE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANCHE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetRatio\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"eTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"eTokenSymbol\",\"type\":\"string\"}],\"name\":\"addTranche\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cumulativeFeeA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cumulativeFeeB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eTokenFactory\",\"outputs\":[{\"internalType\":\"contract IETokenFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"eToken\",\"type\":\"address\"}],\"name\":\"getTranche\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IEToken\",\"name\":\"eToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sFactorE\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetRatio\",\"type\":\"uint256\"}],\"internalType\":\"struct IEPool.Tranche\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTranches\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IEToken\",\"name\":\"eToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sFactorE\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetRatio\",\"type\":\"uint256\"}],\"internalType\":\"struct IEPool.Tranche[]\",\"name\":\"_tranches\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"eToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"issueExact\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fracDelta\",\"type\":\"uint256\"}],\"name\":\"rebalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deltaA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deltaB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rChange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rDiv\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceMinRDiv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recover\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"eToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemExact\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sFactorA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sFactorB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"inverseRate\",\"type\":\"bool\"}],\"name\":\"setAggregator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minRDiv\",\"type\":\"uint256\"}],\"name\":\"setMinRDiv\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"setRebalanceInterval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenA\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenB\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tranches\",\"outputs\":[{\"internalType\":\"contract IEToken\",\"name\":\"eToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sFactorE\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tranchesByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EPool","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000913d3924c2e52b500d5acc6f6080120045dc507b0000000000000000000000003e2f548954a7f8169486936e2bb616aabce979e9000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000986b5e1e1755e3c2440e960477f25201b0a8bbd40000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}