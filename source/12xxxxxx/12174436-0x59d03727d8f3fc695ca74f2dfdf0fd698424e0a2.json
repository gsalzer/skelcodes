{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: solidity/contracts/utility/interfaces/IOwned.sol\n\n\npragma solidity 0.6.12;\n\n/*\n    Owned contract interface\n*/\ninterface IOwned {\n    // this function isn't since the compiler emits automatically generated getter functions as external\n    function owner() external view returns (address);\n\n    function transferOwnership(address _newOwner) external;\n\n    function acceptOwnership() external;\n}\n\n// File: solidity/contracts/utility/interfaces/ITokenHolder.sol\n\n\npragma solidity 0.6.12;\n\n\n\n/*\n    Token Holder interface\n*/\ninterface ITokenHolder is IOwned {\n    receive() external payable;\n\n    function withdrawTokens(\n        IERC20 token,\n        address payable to,\n        uint256 amount\n    ) external;\n\n    function withdrawTokensMultiple(\n        IERC20[] calldata tokens,\n        address payable to,\n        uint256[] calldata amounts\n    ) external;\n}\n\n// File: solidity/contracts/INetworkSettings.sol\n\n\npragma solidity 0.6.12;\n\n\ninterface INetworkSettings {\n    function networkFeeParams() external view returns (ITokenHolder, uint32);\n\n    function networkFeeWallet() external view returns (ITokenHolder);\n\n    function networkFee() external view returns (uint32);\n}\n\n// File: solidity/contracts/utility/Owned.sol\n\n\npragma solidity 0.6.12;\n\n\n/**\n * @dev This contract provides support and utilities for contract ownership.\n */\ncontract Owned is IOwned {\n    address public override owner;\n    address public newOwner;\n\n    /**\n     * @dev triggered when the owner is updated\n     *\n     * @param _prevOwner previous owner\n     * @param _newOwner  new owner\n     */\n    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\n\n    /**\n     * @dev initializes a new Owned instance\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    // allows execution by the owner only\n    modifier ownerOnly {\n        _ownerOnly();\n        _;\n    }\n\n    // error message binary size optimization\n    function _ownerOnly() internal view {\n        require(msg.sender == owner, \"ERR_ACCESS_DENIED\");\n    }\n\n    /**\n     * @dev allows transferring the contract ownership\n     * the new owner still needs to accept the transfer\n     * can only be called by the contract owner\n     *\n     * @param _newOwner    new contract owner\n     */\n    function transferOwnership(address _newOwner) public override ownerOnly {\n        require(_newOwner != owner, \"ERR_SAME_OWNER\");\n        newOwner = _newOwner;\n    }\n\n    /**\n     * @dev used by a new owner to accept an ownership transfer\n     */\n    function acceptOwnership() public override {\n        require(msg.sender == newOwner, \"ERR_ACCESS_DENIED\");\n        emit OwnerUpdate(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\n// File: solidity/contracts/utility/Utils.sol\n\n\npragma solidity 0.6.12;\n\n\n/**\n * @dev Utilities & Common Modifiers\n */\ncontract Utils {\n    uint32 internal constant PPM_RESOLUTION = 1000000;\n    IERC20 internal constant NATIVE_TOKEN_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    // verifies that a value is greater than zero\n    modifier greaterThanZero(uint256 _value) {\n        _greaterThanZero(_value);\n        _;\n    }\n\n    // error message binary size optimization\n    function _greaterThanZero(uint256 _value) internal pure {\n        require(_value > 0, \"ERR_ZERO_VALUE\");\n    }\n\n    // validates an address - currently only checks that it isn't null\n    modifier validAddress(address _address) {\n        _validAddress(_address);\n        _;\n    }\n\n    // error message binary size optimization\n    function _validAddress(address _address) internal pure {\n        require(_address != address(0), \"ERR_INVALID_ADDRESS\");\n    }\n\n    // ensures that the portion is valid\n    modifier validPortion(uint32 _portion) {\n        _validPortion(_portion);\n        _;\n    }\n\n    // error message binary size optimization\n    function _validPortion(uint32 _portion) internal pure {\n        require(_portion > 0 && _portion <= PPM_RESOLUTION, \"ERR_INVALID_PORTION\");\n    }\n\n    // validates an external address - currently only checks that it isn't null or this\n    modifier validExternalAddress(address _address) {\n        _validExternalAddress(_address);\n        _;\n    }\n\n    // error message binary size optimization\n    function _validExternalAddress(address _address) internal view {\n        require(_address != address(0) && _address != address(this), \"ERR_INVALID_EXTERNAL_ADDRESS\");\n    }\n\n    // ensures that the fee is valid\n    modifier validFee(uint32 fee) {\n        _validFee(fee);\n        _;\n    }\n\n    // error message binary size optimization\n    function _validFee(uint32 fee) internal pure {\n        require(fee <= PPM_RESOLUTION, \"ERR_INVALID_FEE\");\n    }\n}\n\n// File: solidity/contracts/NetworkSettings.sol\n\n\npragma solidity 0.6.12;\n\n\n\n\n/**\n * @dev This contract maintains the network settings.\n *\n */\ncontract NetworkSettings is INetworkSettings, Owned, Utils {\n    ITokenHolder private _networkFeeWallet;\n    uint32 private _networkFee;\n\n    /**\n     * @dev triggered when the network fee wallet is updated\n     *\n     * @param prevNetworkFeeWallet  previous network fee wallet\n     * @param newNetworkFeeWallet   new network fee wallet\n     */\n    event NetworkFeeWalletUpdated(ITokenHolder prevNetworkFeeWallet, ITokenHolder newNetworkFeeWallet);\n\n    /**\n     * @dev triggered when the network fee is updated\n     *\n     * @param prevNetworkFee    previous network fee\n     * @param newNetworkFee     new network fee\n     */\n    event NetworkFeeUpdated(uint32 prevNetworkFee, uint32 newNetworkFee);\n\n    /**\n     * @dev initializes a new NetworkSettings contract\n     *\n     * @param initialNetworkFeeWallet initial network fee wallet\n     * @param initialNetworkFee initial network fee in ppm units\n     */\n    constructor(ITokenHolder initialNetworkFeeWallet, uint32 initialNetworkFee)\n        public\n        validAddress(address(initialNetworkFeeWallet))\n        validFee(initialNetworkFee)\n    {\n        _networkFeeWallet = initialNetworkFeeWallet;\n        _networkFee = initialNetworkFee;\n    }\n\n    /**\n     * @dev returns the network fee parameters\n     *\n     * @return network fee wallet\n     * @return network fee in ppm units\n     */\n    function networkFeeParams() external view override returns (ITokenHolder, uint32) {\n        return (_networkFeeWallet, _networkFee);\n    }\n\n    /**\n     * @dev returns the wallet that receives the global network fees\n     *\n     * @return network fee wallet\n     */\n    function networkFeeWallet() external view override returns (ITokenHolder) {\n        return _networkFeeWallet;\n    }\n\n    /**\n     * @dev returns the global network fee\n     * the network fee is a portion of the total fees from each pool\n     *\n     * @return network fee in ppm units\n     */\n    function networkFee() external view override returns (uint32) {\n        return _networkFee;\n    }\n\n    /**\n     * @dev sets the network fee wallet\n     * can be executed only by the owner\n     *\n     * @param newNetworkFeeWallet new network fee wallet\n     */\n    function setNetworkFeeWallet(ITokenHolder newNetworkFeeWallet)\n        external\n        ownerOnly\n        validAddress(address(newNetworkFeeWallet))\n    {\n        emit NetworkFeeWalletUpdated(_networkFeeWallet, newNetworkFeeWallet);\n        _networkFeeWallet = newNetworkFeeWallet;\n    }\n\n    /**\n     * @dev sets the network fee\n     * can be executed only by the owner\n     *\n     * @param newNetworkFee new network fee in ppm units\n     */\n    function setNetworkFee(uint32 newNetworkFee) external ownerOnly validFee(newNetworkFee) {\n        emit NetworkFeeUpdated(_networkFee, newNetworkFee);\n        _networkFee = newNetworkFee;\n    }\n}\n","ABI":"[{\"inputs\":[{\"internalType\":\"contract ITokenHolder\",\"name\":\"initialNetworkFeeWallet\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"initialNetworkFee\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"prevNetworkFee\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newNetworkFee\",\"type\":\"uint32\"}],\"name\":\"NetworkFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ITokenHolder\",\"name\":\"prevNetworkFeeWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ITokenHolder\",\"name\":\"newNetworkFeeWallet\",\"type\":\"address\"}],\"name\":\"NetworkFeeWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"networkFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"networkFeeParams\",\"outputs\":[{\"internalType\":\"contract ITokenHolder\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"networkFeeWallet\",\"outputs\":[{\"internalType\":\"contract ITokenHolder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newNetworkFee\",\"type\":\"uint32\"}],\"name\":\"setNetworkFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITokenHolder\",\"name\":\"newNetworkFeeWallet\",\"type\":\"address\"}],\"name\":\"setNetworkFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NetworkSettings","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ebcc959479634eec5a4d7162e36f8b8cc763f4910000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}