{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT \r\n\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\ncontract FolkitoTimelock {\r\n    using SafeMath for uint256;\r\n    \r\n    \r\n    uint256 tokenBalance;\r\n    IERC20 public _tokenInstance;\r\n\r\n\r\n    address public owner;\r\n\r\n\r\n\r\n    address public teamAndAdvisorWallet;\r\n    address public marketingWallet;\r\n    address public privateSaleWallet;\r\n    address public whitelistingWallet;\r\n    address public airdropWallet;\r\n    address public publicWallet;\r\n\r\n    \r\n    \r\n    uint256 public constant TEAM_AND_ADVISOR_SHARE = 20000000 *10**18;\r\n    uint256 public constant AIRDROP_SHARE = 1600000 *10**18;\r\n    uint256 public constant PRIVATE_SALE_SHARE = 5000000*10**18;\r\n\r\n\r\n\r\n    uint256 public constant MARKETING_SHARE =2500000*10**18;\r\n    uint256 public constant WHITELISTING_SHARE =6000000*10**18;\r\n    uint256 public constant PUBLIC_SHARE =4000000*10**18;\r\n\r\n    uint256 public TOTAL_DISTRIBUTION =TEAM_AND_ADVISOR_SHARE.add(AIRDROP_SHARE)\r\n                                        .add(PRIVATE_SALE_SHARE).add(MARKETING_SHARE).add(WHITELISTING_SHARE)\r\n                                        .add(PUBLIC_SHARE);\r\n\r\n    uint256 public  teamWalletClaimed;\r\n    uint256 public  airdropWalletClaimed;\r\n    uint256 public  privateSaleWalletClaimed;\r\n    uint256 public  whitelistingWalletClaimed;\r\n    uint256 public  marketingWalletClaimed;\r\n\r\n    uint256 public  publicWalletClaimed;\r\n\r\n    \r\n    uint256 public teamReserveReleaseTime;\r\n    uint256 public airdropReserveReleaseTime;\r\n    uint256 public privateSaleReserveReleaseTime;\r\n    uint256 public whitelistingReleaseTime;\r\n    uint256 public marketingReserveReleaseTime;\r\n    uint256 public publicReserveReleaseTime;\r\n\r\n    uint256 public ONE_DAY = 1 days;\r\n    \r\n    \r\n\r\n      modifier onlyOwner {\r\n        require(msg.sender == owner,\"You are not authorized\");\r\n        _;\r\n    }\r\n\r\n  \r\n    constructor(address tokenInstance,\r\n    \r\n        address _teamAndAdvisorWallet,\r\n        address _airdropWallet,\r\n        address _marketingWallet,\r\n        address _privateSaleWallet,\r\n        address _whitelistingWallet,\r\n        address _publicWallet\r\n    \r\n    \r\n    \r\n        ) {\r\n        teamAndAdvisorWallet = _teamAndAdvisorWallet;\r\n        privateSaleWallet = _privateSaleWallet;\r\n        whitelistingWallet = _whitelistingWallet;\r\n        airdropWallet = _airdropWallet;\r\n        marketingWallet = _marketingWallet;\r\n        publicWallet = _publicWallet;\r\n\r\n        owner = msg.sender;\r\n        teamReserveReleaseTime = block.timestamp.add(ONE_DAY.mul(180));\r\n\r\n        marketingReserveReleaseTime = block.timestamp.add(ONE_DAY.mul(30));\r\n\r\n        airdropReserveReleaseTime = block.timestamp.add(ONE_DAY.mul(180));\r\n        privateSaleReserveReleaseTime= block.timestamp;\r\n        whitelistingReleaseTime = block.timestamp;\r\n        publicReserveReleaseTime = block.timestamp;\r\n\r\n        _tokenInstance = IERC20(address(tokenInstance));\r\n        \r\n    \r\n\r\n\r\n        \r\n    }\r\n    \r\n    \r\n    \r\n    function getContractBalance() public view returns (uint256){\r\n        return _tokenInstance.balanceOf(address(this));\r\n    }\r\n    \r\n    \r\n    \r\n    function claimAirdropShare() public onlyOwner{\r\n        require(block.timestamp>airdropReserveReleaseTime,\"Lock Period has not passed\");\r\n        \r\n        uint256 amount  = AIRDROP_SHARE;\r\n        require(airdropWalletClaimed.add(amount)<=AIRDROP_SHARE,\"Amount Exceeds\");\r\n        airdropWalletClaimed = airdropWalletClaimed.add(amount);\r\n        _tokenInstance.transfer(airdropWallet,amount);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n      function claimPublicShare() public onlyOwner{\r\n        require(block.timestamp>publicReserveReleaseTime,\"Lock Period has not passed\");\r\n        \r\n        uint256 amount  = PUBLIC_SHARE;\r\n        require(publicWalletClaimed.add(amount)<=PUBLIC_SHARE,\"Amount Exceeds\");\r\n        publicWalletClaimed = publicWalletClaimed.add(amount);\r\n        _tokenInstance.transfer(publicWallet,amount);\r\n\r\n    }\r\n    \r\n\r\n    \r\n    \r\n    \r\n    function claimMarketingShare() public onlyOwner{\r\n        require(block.timestamp>marketingReserveReleaseTime,\"Lock Period has not passed\");\r\n        uint256 amount  =MARKETING_SHARE.mul(10).div(100);\r\n\r\n        require(marketingWalletClaimed.add(amount)<=MARKETING_SHARE,\"Amount Exceeds\");\r\n\r\n        marketingWalletClaimed = marketingWalletClaimed.add(amount);\r\n        _tokenInstance.transfer(marketingWallet,amount);\r\n        marketingReserveReleaseTime = marketingReserveReleaseTime.add(ONE_DAY.mul(30));\r\n        \r\n    }\r\n    \r\n    \r\n    function claimPrivateSaleShare() public onlyOwner{\r\n        require(block.timestamp>privateSaleReserveReleaseTime,\"Lock Period has not passed\");\r\n\r\n        uint256 amount  = PRIVATE_SALE_SHARE.mul(20).div(100);\r\n\r\n        require(privateSaleWalletClaimed.add(amount)<=PRIVATE_SALE_SHARE,\"Amount Exceeds\");\r\n\r\n        privateSaleWalletClaimed = privateSaleWalletClaimed.add(amount);\r\n        _tokenInstance.transfer(privateSaleWallet,amount);\r\n        privateSaleReserveReleaseTime = privateSaleReserveReleaseTime.add(ONE_DAY.mul(30));\r\n\r\n    }\r\n    \r\n    \r\n    \r\n    function claimWhitelistingShare() public onlyOwner{\r\n        require(block.timestamp>whitelistingReleaseTime,\"Lock Period has not passed\");\r\n\r\n        uint256 amount  = WHITELISTING_SHARE.mul(20).div(100);\r\n\r\n        require(whitelistingWalletClaimed.add(amount)<=WHITELISTING_SHARE,\"Amount Exceeds\");\r\n\r\n        whitelistingWalletClaimed = whitelistingWalletClaimed.add(amount);\r\n        _tokenInstance.transfer(whitelistingWallet,amount);\r\n        whitelistingReleaseTime = whitelistingReleaseTime.add(ONE_DAY.mul(30));\r\n\r\n    }\r\n    \r\n    \r\n    function claimTeamAndAdvisorShare() public onlyOwner{\r\n        require(block.timestamp>teamReserveReleaseTime,\"Lock Period has not passed\");\r\n        uint256 amount  = TEAM_AND_ADVISOR_SHARE.div(24);\r\n\r\n        require(teamWalletClaimed.add(amount)<=TEAM_AND_ADVISOR_SHARE,\"Amount Exceeds\");\r\n\r\n        teamWalletClaimed = teamWalletClaimed.add(amount);\r\n        _tokenInstance.transfer(teamAndAdvisorWallet,amount);\r\n        teamReserveReleaseTime = teamReserveReleaseTime.add(ONE_DAY.mul(30));\r\n\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenInstance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamAndAdvisorWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_airdropWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_privateSaleWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelistingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_publicWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AIRDROP_SHARE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKETING_SHARE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRIVATE_SALE_SHARE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_SHARE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEAM_AND_ADVISOR_SHARE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_DISTRIBUTION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELISTING_SHARE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenInstance\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropReserveReleaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropWalletClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAirdropShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimMarketingShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPrivateSaleShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPublicShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTeamAndAdvisorShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimWhitelistingShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingReserveReleaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWalletClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateSaleReserveReleaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateSaleWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateSaleWalletClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicReserveReleaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicWalletClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAndAdvisorWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamReserveReleaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWalletClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistingReleaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistingWalletClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FolkitoTimelock","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009791bc7beb646b139a35780e5e9c68e4df0d027e0000000000000000000000001535a49ead4321a1769458a98bd303eb8a7675430000000000000000000000001535a49ead4321a1769458a98bd303eb8a7675430000000000000000000000001535a49ead4321a1769458a98bd303eb8a7675430000000000000000000000001535a49ead4321a1769458a98bd303eb8a7675430000000000000000000000001535a49ead4321a1769458a98bd303eb8a7675430000000000000000000000001535a49ead4321a1769458a98bd303eb8a767543","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://bd59d9d09682c2a81adda2bebf99418a13441306876407f67745991412c1a247"}]}