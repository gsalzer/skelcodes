{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// ----------------------------------------------------------------------------\r\n// 'Bull Token' token contract\r\n//\r\n// Deployed to : 0xdFdC8d107C2f6d9ab087f66F563a6397bAB1D2FB\r\n// Symbol      : BLL\r\n// Name        : Bull Token\r\n// Total supply: 50000000000\r\n// Decimals    : 18\r\n//\r\n// (c) by Marco De Dilectis & Federico Lazzarotto 06/2021. (Unlicense)).\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\ncontract SafeMath {\r\n    // It returns 0,0001 percentual rounded down to previous Integer\r\n    function mulDiv(uint a) internal pure returns (uint c) {\r\n        if(a>=10000000000000000000000){\r\n            return a / 10000;\r\n        }\r\n        else return 0;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract BTInterface {\r\n    function balanceOf(address tokenOwner) public constant returns (uint256 balance);\r\n    function transfer(address recipient, uint amount) public returns (bool success);\r\n    function approve(address spender, uint amount) public returns (bool success);\r\n    function checkGivenAllowance (address spender) public view returns (uint256);\r\n    function checkReceivedAllowance (address owner) public view returns (uint256);\r\n    function thirdPartTransaction(address spender, address recipient, uint256 amount) public returns (bool);\r\n    function myBlockedToken() public view returns(uint256);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and assisted\r\n// token transfers\r\n// ----------------------------------------------------------------------------\r\ncontract BullToken is BTInterface, SafeMath {\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint256 public _totalSupply;\r\n    uint256 private _burning;\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => mapping(address => uint256)) public allowed;\r\n    mapping (address => uint256) public _blocked_token;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor() public {\r\n        symbol = \"BLL\";\r\n        name = \"Bull Token\";\r\n        decimals = 18;\r\n        _totalSupply = 50000000000000000000000000000;\r\n        balances[0xdFdC8d107C2f6d9ab087f66F563a6397bAB1D2FB] = _totalSupply;\r\n        emit Transfer(address(0), 0xdFdC8d107C2f6d9ab087f66F563a6397bAB1D2FB, _totalSupply);\r\n    }\r\n\r\n    function totalSupply() public constant returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function _msgSender() internal view returns (address){\r\n        return msg.sender;\r\n    }\r\n    \r\n        function decimals() public constant returns(uint8){\r\n        return decimals;\r\n    }\r\n    \r\n        function myBalance() public view returns(uint256){\r\n        return balances[_msgSender()];\r\n    }\r\n    \r\n        function myAvailableBalance() public view returns(uint256){\r\n        return balances[_msgSender()] - _blocked_token[_msgSender()];\r\n    }\r\n    \r\n        function myBlockedToken() public view returns(uint256){\r\n        return _blocked_token[_msgSender()];\r\n    }\r\n    \r\n    // restituisce la quantità dei token che spender può spendere per conto dell'owner\r\n    function checkGivenAllowance(address spender) public view returns (uint256){\r\n        return allowed[_msgSender()][spender];\r\n    }\r\n\r\n    // restituisce la quantità dei token che spender può spendere per conto dell'owner\r\n    function checkReceivedAllowance(address owner) public view returns (uint256){\r\n        return allowed[owner][_msgSender()];\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account tokenOwner\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to to account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address recipient, uint amount) public returns (bool success) {\r\n        require(_msgSender() != address(0), \"Invalid sender address\");\r\n        require(recipient != address(0), \"Invalid recipient address\");\r\n        require(balances[_msgSender()] >= amount, \"Transfer amount exceeds balance\");\r\n        require(balances[_msgSender()] - _blocked_token[_msgSender()] >= amount, \"You are trying to use suspended token, check your allowances\");\r\n        \r\n        \r\n        _burning = (mulDiv(amount));\r\n        require(balances[_msgSender()] >= (amount + _burning), \"Transfer amount exceeds balance plus fee\");\r\n        require(balances[_msgSender()] - _blocked_token[_msgSender()] >= amount + _burning, \"Transfer amount exceeds balance plus fee\");\r\n        \r\n        if(_burning != 0){\r\n            _burn(_msgSender(), _burning); // fai controlli, leva i token da bruciare dal wallet del sender e li manda a adress(0)\r\n        }\r\n        balances[_msgSender()] -= amount;\r\n        balances[recipient] += amount;\r\n        \r\n        emit Transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for spender to transferFrom(...) tokens\r\n    // from the token owner's account\r\n    //\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n    // recommends that there are no checks for the approval double-spend attack\r\n    // as this should be implemented in user interfaces \r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint amount) public returns (bool success) {\r\n        require(balances[_msgSender()] >= amount, \"You are not allowed to authorize more than your balance\");\r\n        require(_msgSender() != spender, \"You're already allowed to use your token\");\r\n        require(_msgSender() != address(0), \"Approve from the zero address\");\r\n        require(spender != address(0), \"Approve from the zero address\");\r\n        _blocked_token[_msgSender()] = amount;\r\n        \r\n        allowed[_msgSender()][spender] = amount;\r\n        emit Approval(_msgSender(), spender, amount);\r\n        \r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer tokens from the from account to the to account\r\n    // \r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the from account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferThirdPart(address sender, address recipient, uint amount) internal returns (bool success) {\r\n        require(sender != address(0), \"Invalid sender address\");\r\n        require(recipient != address(0), \"Invalid recipient address\");\r\n        require(balances[sender] >= amount, \"Transfer amount exceeds balance\");\r\n        require(_blocked_token[sender] >= amount, \"You are trying to use suspended token, check your allowances\");\r\n\r\n        _burning = (mulDiv(amount));\r\n        require(balances[sender] >= (amount + _burning), \"Transfer amount exceeds balance plus fee\");\r\n        require(_blocked_token[sender] >= amount + _burning, \"Transfer amount exceeds balance plus fee\");\r\n\r\n        if (_burning != 0){\r\n            _burnThirdPart(sender, _burning); // fai controlli, leva i token da bruciare dal wallet del sender e li manda a adress(0)\r\n        }\r\n        balances[sender] -= amount;\r\n        balances[recipient] += amount;\r\n        _blocked_token[sender] -= (amount + _burning);\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) internal constant returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n\r\n    // It burns token decreasing totalSupply\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        uint256 accountBalance = balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    \r\n        // It burns token decreasing totalSupply\r\n    function _burnThirdPart(address account, uint256 burning) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        require(balances[account] >= burning, \"ERC20: burn amount exceeds balance\");\r\n        balances[account] -= burning;\r\n        _totalSupply -= burning;\r\n        emit Transfer(account, address(0), burning);\r\n    }\r\n    \r\n        // lo spender che è stato abilitato a spendere i token può trasferire i miei token dal mio conto ad un altro conto\r\n    function thirdPartTransaction(address sender, address recipient, uint256 amount) public returns (bool){\r\n        require(amount <= allowed[sender][_msgSender()], \"Amount exeeds allowance\");\r\n        \r\n        transferThirdPart(sender, recipient, amount);\r\n        _burning = (mulDiv(amount));\r\n        allowed[sender][_msgSender()]-= (amount + _burning);\r\n        emit Approval(sender, _msgSender(), amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    // It increase allowance of \"addedValue\"\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns(bool){\r\n        require(balances[_msgSender()] >= addedValue, \"It's not allowed to authorize more than your balance\");\r\n        require(allowed[_msgSender()][spender] + addedValue <= balances[_msgSender()], \"It's not allowed to authorize more than own balance\");\r\n        allowed[_msgSender()][spender] += addedValue;\r\n        _approve(_msgSender(), spender, allowed[_msgSender()][spender]);\r\n        return true;\r\n    }\r\n\r\n    // It decrease allowance of \"subtractedValue\"\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns(bool){\r\n        require(allowed[_msgSender()][spender] >= subtractedValue, \"Decreased allowance below zero\");\r\n        allowed[_msgSender()][spender] -= subtractedValue;\r\n        \r\n        _approve(_msgSender(), spender, allowed[_msgSender()][spender]);\r\n        return true;\r\n    }\r\n\r\n\r\n    // Private hidden function, to approve transfers and blocked token\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"Approve from the zero address\");\r\n        require(spender != address(0), \"Approve from the zero address\");\r\n        _blocked_token[_msgSender()] = amount;\r\n\r\n        allowed[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n        \r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"thirdPartTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blocked_token\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"checkReceivedAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"checkGivenAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myAvailableBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myBlockedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BullToken","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"bzzr://d979018564ebc3cebd0803d61e76bd8dfdc00dd6e4b6de6316b468a0aab6527b"}]}