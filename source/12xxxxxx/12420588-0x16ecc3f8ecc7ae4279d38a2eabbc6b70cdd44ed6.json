{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >= 0.8.0;\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\nlibrary SafeERC20 {\r\n  function safeTransfer(\r\n    IERC20 token,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    IERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.approve(spender, value));\r\n  }\r\n}\r\n\r\nabstract contract IQLF is IERC165 {\r\n    /**\r\n     * @dev Returns if the given address is qualified, implemented on demand.\r\n     */\r\n    function ifQualified (address account) virtual external view returns (bool);\r\n\r\n    /**\r\n     * @dev Logs if the given address is qualified, implemented on demand.\r\n     */\r\n    function logQualified (address account, uint256 ito_start_time) virtual external returns (bool);\r\n\r\n    /**\r\n     * @dev Ensure that custom contract implements `ifQualified` amd `logQualified` correctly.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) virtual external override pure returns (bool) {\r\n        return interfaceId == this.supportsInterface.selector || \r\n            interfaceId == (this.ifQualified.selector ^ this.logQualified.selector);\r\n    }\r\n\r\n    /**\r\n     * @dev Emit when `ifQualified` is called to decide if the given `address`\r\n     * is `qualified` according to the preset rule by the contract creator and \r\n     * the current block `number` and the current block `timestamp`.\r\n     */\r\n    event Qualification(address account, bool qualified, uint256 blockNumber, uint256 timestamp);\r\n}\r\n\r\nabstract contract IMTS {\r\n  /**\r\n    * @dev Returns a historical position of MASK of an address.\r\n    */  \r\n  function get_balance(address addr) virtual view public returns (uint256);\r\n}\r\n\r\ncontract QLF_HISTORY_POSITION_500_MASK_MAIN is IQLF {\r\n    using SafeERC20 for IERC20;\r\n\r\n    string private name;\r\n    uint256 private creation_time;\r\n    uint256 start_time;\r\n    address creator;\r\n    mapping(address => bool) black_list;\r\n\r\n    modifier creatorOnly {\r\n        require(msg.sender == creator, \"Not Authorized\");\r\n        _;\r\n    }\r\n\r\n    constructor (string memory _name, uint256 _start_time) {\r\n        name = _name;\r\n        creation_time = block.timestamp;\r\n        start_time = _start_time;\r\n        creator = msg.sender;\r\n    }\r\n\r\n    function get_name() public view returns (string memory) {\r\n        return name;\r\n    }\r\n\r\n    function get_creation_time() public view returns (uint256) {\r\n        return creation_time;\r\n    }\r\n\r\n    function get_start_time() public view returns (uint256) {\r\n        return start_time;\r\n    }\r\n\r\n    function set_start_time(uint256 _start_time) public creatorOnly {\r\n        start_time = _start_time;\r\n    }\r\n\r\n    function ifQualified(address account) public view override returns (bool qualified) {\r\n        if (IMTS(address(0x42aca25Fd7Be774225abfbE4275beb9BF59c832f)).get_balance(account) < 500) {\r\n            return false;\r\n        }\r\n        qualified = true;\r\n    } \r\n\r\n    function logQualified(address account, uint256 ito_start_time) public override returns (bool qualified) {\r\n        if (IMTS(address(0x42aca25Fd7Be774225abfbE4275beb9BF59c832f)).get_balance(account) < 500) {\r\n            return false;\r\n        }              \r\n        if (start_time > block.timestamp || ito_start_time > block.timestamp) {\r\n            black_list[account] = true;\r\n            return false;\r\n        }\r\n        if (black_list[account]) {\r\n            return false;\r\n        }\r\n        emit Qualification(account, true, block.number, block.timestamp);\r\n        return true;\r\n    } \r\n\r\n    function supportsInterface(bytes4 interfaceId) external override pure returns (bool) {\r\n        return interfaceId == this.supportsInterface.selector || \r\n            interfaceId == (this.ifQualified.selector ^ this.logQualified.selector) ||\r\n            interfaceId == this.get_start_time.selector;\r\n    }    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_start_time\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"qualified\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Qualification\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"get_creation_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_start_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ifQualified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"qualified\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ito_start_time\",\"type\":\"uint256\"}],\"name\":\"logQualified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"qualified\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start_time\",\"type\":\"uint256\"}],\"name\":\"set_start_time\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"QLF_HISTORY_POSITION_500_MASK_MAIN","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000086d61736b20353030000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d87d7c2ae580e02dea0c2c4bc9aedebb5c85d72e0fbb49eb24de3fed480a84b0"}]}