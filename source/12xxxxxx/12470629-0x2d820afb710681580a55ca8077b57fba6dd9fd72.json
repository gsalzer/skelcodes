{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n * @title Artifex Smart Contract\r\n * @author GigLabs, Brian Burns <brian@giglabs.io>\r\n */\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) =\r\n            target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant alphabet = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = alphabet[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    mapping(address => uint8) private _otherOperators;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the operator state for an address. State\r\n     * of 1 means active operator of the contract. State of 0 means\r\n     * not an operator of the contract.\r\n     */\r\n    function otherOperator(address operatorAddress)\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint8)\r\n    {\r\n        return _otherOperators[operatorAddress];\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than an operator.\r\n     */\r\n    modifier anyOperator() {\r\n        require(\r\n            owner() == _msgSender() || _otherOperators[msg.sender] == 1,\r\n            \"Ownable: caller is not an operator\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the state of other operators for performaing certain\r\n     * contract functions. Can only be called by the current owner.\r\n     */\r\n    function setOtherOperator(address _newOperator, uint8 _state)\r\n        public\r\n        virtual\r\n        onlyOwner\r\n    {\r\n        require(_newOperator != address(0));\r\n        _otherOperators[_newOperator] = _state;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index)\r\n        external\r\n        view\r\n        returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override(ERC165, IERC165)\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            owner != address(0),\r\n            \"ERC721: balance query for the zero address\"\r\n        );\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (address)\r\n    {\r\n        address owner = _owners[tokenId];\r\n        require(\r\n            owner != address(0),\r\n            \"ERC721: owner query for nonexistent token\"\r\n        );\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721Metadata: URI query for nonexistent token\"\r\n        );\r\n\r\n        string memory baseURI = _baseURI();\r\n        return\r\n            bytes(baseURI).length > 0\r\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\r\n                : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\r\n     * in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (address)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721: approved query for nonexistent token\"\r\n        );\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved)\r\n        public\r\n        virtual\r\n        override\r\n    {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(\r\n            _isApprovedOrOwner(_msgSender(), tokenId),\r\n            \"ERC721: transfer caller is not owner nor approved\"\r\n        );\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(\r\n            _isApprovedOrOwner(_msgSender(), tokenId),\r\n            \"ERC721: transfer caller is not owner nor approved\"\r\n        );\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(from, to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\r\n        internal\r\n        view\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721: operator query for nonexistent token\"\r\n        );\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner ||\r\n            getApproved(tokenId) == spender ||\r\n            isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(\r\n            ERC721.ownerOf(tokenId) == from,\r\n            \"ERC721: transfer of token that is not own\"\r\n        );\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try\r\n                IERC721Receiver(to).onERC721Received(\r\n                    _msgSender(),\r\n                    from,\r\n                    tokenId,\r\n                    _data\r\n                )\r\n            returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\r\n                        \"ERC721: transfer to non ERC721Receiver implementer\"\r\n                    );\r\n                } else {\r\n                    // solhint-disable-next-line no-inline-assembly\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n/**\r\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\r\n * enumerability of all the token ids in the contract as well as all token ids owned by each\r\n * account.\r\n */\r\nabstract contract ERC721Enumerable is\r\n    Context,\r\n    ERC165,\r\n    ERC721,\r\n    IERC721Enumerable\r\n{\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override(IERC165, ERC165, ERC721)\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(IERC721Enumerable).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            index < ERC721.balanceOf(owner),\r\n            \"ERC721Enumerable: owner index out of bounds\"\r\n        );\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            index < ERC721Enumerable.totalSupply(),\r\n            \"ERC721Enumerable: global index out of bounds\"\r\n        );\r\n        return _allTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's token tracking data structures.\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId)\r\n        private\r\n    {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's token tracking data structures.\r\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n     */\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\n\r\n/**\r\n * @dev The Artifex main contract.\r\n *\r\n * Each Artifex token implements full on-chain metadata\r\n * in standard JSON format for anyone to retreive using the\r\n * getMetadata() function in this contract. A mirrored copy of the\r\n * metadata JSON is also stored on IPFS.\r\n *\r\n * Each NFT 2D image is stored on both IPFS and Arweave\r\n * Each NFT 3D model is stored on both IPFS and Arweave\r\n *\r\n * The metadata on-chain in this contract (and mirrored on IPFS)\r\n * return the hashes / locations of all NFT images and 3D model files\r\n * stored on IPFS and Arweave.\r\n *\r\n * The metadata on-chain in this contract (and mirrored on IPFS)\r\n * also return SHA256 hashes of the NFT images and 3D model files\r\n * for verifying authenticity of the NFTs.\r\n *\r\n * Metadata is retreivable using the tokenURI() call as specified\r\n * in the ERC721-Metadata standard. tokenURI can't point to on-chain\r\n * locations directly - it points to an off-chain URI for\r\n * returning metadata.\r\n */\r\ncontract Artifex is Ownable, ERC721Enumerable {\r\n    // NOTE: `SafeMath` is no longer needed starting with Solidity 0.8.\r\n    // The compiler now has built in overflow checking.\r\n    //\r\n    // using SafeMath for uint256;\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Core series metadata\r\n    struct ArtistNFTSeriesInfo {\r\n        uint256 totalEditions;\r\n        string creatorName;\r\n        string artistName;\r\n        string artTitle;\r\n        string description;\r\n        string sha256ImageHash;\r\n        string ipfsImageHash;\r\n        string arweaveImageHash;\r\n        string imageFileType;\r\n    }\r\n\r\n    // Extended series metadata\r\n    struct ArtistNFTSeries3DModelInfo {\r\n        string sha256ModelHash;\r\n        string ipfs3DModelHash;\r\n        string arweave3DModelHash;\r\n        string modelFileType;\r\n    }\r\n\r\n    // Series ID => Core series metadata for NFT Type 1 (2D art piece)\r\n    mapping(uint256 => ArtistNFTSeriesInfo) private artist2DSeriesInfo;\r\n\r\n    // Series ID => Core series metadata for NFT Type 2 (3D art piece,\r\n    // in 2D format)\r\n    mapping(uint256 => ArtistNFTSeriesInfo) private artist3DSeriesInfo;\r\n\r\n    // Series ID => Extended series metadata for NFT Type 2 (3D model\r\n    // files for 3D art piece)\r\n    mapping(uint256 => ArtistNFTSeries3DModelInfo)\r\n        private artistSeries3DModelInfo;\r\n\r\n    // Series ID => series locked state\r\n    mapping(uint256 => bool) private artistSeriesLocked;\r\n\r\n    // Token ID => token's IPFS Metadata hash\r\n    mapping(uint256 => string) private tokenIdToIPFSMetadataHash;\r\n\r\n    // Base token URI used as a prefix for all tokens to build\r\n    // a full token URI string\r\n    string private _baseTokenURI;\r\n\r\n    // Base external token URI used as a prefix for all tokens\r\n    // to build a full external token URI string\r\n    string private _externalBaseTokenURI;\r\n\r\n    // Multipliers for token Id calculations\r\n    uint256 constant SERIES_MULTIPLIER = 100000000;\r\n    uint256 constant NFT_TYPE_MULTIPLIER = 10000;\r\n\r\n    /**\r\n     * @notice Event emitted when the takenBaseUri is set after\r\n     * contract deployment\r\n     * @param tokenBaseUri the base URI for tokenURI calls\r\n     */\r\n    event TokenBaseUriSet(string tokenBaseUri);\r\n\r\n    /**\r\n     * @notice Event emitted when the externalBaseUri is set after\r\n     * contract deployment.\r\n     * @param externalBaseUri the new external base URI\r\n     */\r\n    event ExternalBaseUriSet(string externalBaseUri);\r\n\r\n    /**\r\n     * @notice Event emitted when a series is locked/sealed\r\n     * @param seriesId the ID of the newly locked/sealed series\r\n     */\r\n    event SeriesLocked(uint256 seriesId);\r\n\r\n    /**\r\n     * @dev Constructor\r\n     * @param name the token name\r\n     * @param symbol the token symbol\r\n     * @param base_uri the base URI for location of off-chain metadata\r\n     * @param external_base_uri the base URI for viewing token on website\r\n     */\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        string memory base_uri,\r\n        string memory external_base_uri\r\n    ) ERC721(name, symbol) {\r\n        _baseTokenURI = base_uri;\r\n        _externalBaseTokenURI = external_base_uri;\r\n    }\r\n\r\n    /**\r\n     * @notice Add core metadata for the 2D piece in an artist series.\r\n     * NOTE: For Artifex, there will only be 100 artist series IDs (1-100).\r\n     * Each series will have a 1 of 1 2D art piece (nftType 1) and a run\r\n     * of 100 3D art pieces (nftType 2). Series ID 0 will be a gift\r\n     * series and is not included in the 1-100 artist series IDs.\r\n     * @param seriesId the ID of the series (0-100)\r\n     * @param seriesInfo structure with series metadata\r\n     */\r\n    function addArtistSeries2dNftType(\r\n        uint256 seriesId,\r\n        ArtistNFTSeriesInfo calldata seriesInfo\r\n    ) external anyOperator {\r\n        // Series ID must be 0-100\r\n        require(seriesId <= 100);\r\n\r\n        // Once a series metadata is locked, it cannot be updated. The\r\n        // information will live as permanent metadata in the contract.\r\n        require(artistSeriesLocked[seriesId] == false, \"Series is locked\");\r\n\r\n        artist2DSeriesInfo[seriesId] = seriesInfo;\r\n    }\r\n\r\n    /**\r\n     * @notice Add core metadata for the 3D pieces in an artist series.\r\n     * NOTE: For Artifex, there will only be 100 artist series IDs (1-100).\r\n     * Each series will have a 1 of 1 2D art piece (nftType 1) and a run\r\n     * of 100 3D art pieces (nftType 2). Series ID 0 will be a gift\r\n     * series and is not included in the 1-100 artist series IDs.\r\n     * @param seriesId the ID of the series (0-100)\r\n     * @param seriesInfo structure with series metadata\r\n     * @param series3DModelInfo structure with series 3D model metadata\r\n     */\r\n    function addArtistSeries3dNftType(\r\n        uint256 seriesId,\r\n        ArtistNFTSeriesInfo calldata seriesInfo,\r\n        ArtistNFTSeries3DModelInfo calldata series3DModelInfo\r\n    ) external anyOperator {\r\n        // Series ID must be 0-100\r\n        require(seriesId <= 100);\r\n\r\n        // Once a series metadata is locked, it cannot be updated. The\r\n        // information will live as permanent metadata in the contract and\r\n        // on IFPS\r\n        require(artistSeriesLocked[seriesId] == false, \"Series is locked\");\r\n\r\n        artist3DSeriesInfo[seriesId] = seriesInfo;\r\n        artistSeries3DModelInfo[seriesId] = series3DModelInfo;\r\n    }\r\n\r\n    /**\r\n     * @dev Update the IPFS hash for a given token.\r\n     * Series metadata must NOT be locked yet (must still be within\r\n     * the series metadata update window)\r\n     * Reverts if the token ID does not exist.\r\n     * @param tokenId uint256 ID of the token to set its URI\r\n     * @param ipfsHash string IPFS link to assign\r\n     */\r\n    function updateTokenIPFSMetadataHash(\r\n        uint256 tokenId,\r\n        string calldata ipfsHash\r\n    ) external anyOperator {\r\n        require(\r\n            artistSeriesLocked[getSeriesId(tokenId)] == false,\r\n            \"Series is locked\"\r\n        );\r\n        _setTokenIPFSMetadataHash(tokenId, ipfsHash);\r\n    }\r\n\r\n    /**\r\n     * @notice This function permanently locks metadata updates for all NFTs\r\n     * in a Series. For practical reasons, a short period of time is given\r\n     * for updates following a series mint. For example, maybe an artist\r\n     * notices incorrect info in the description of their art after it is\r\n     * minted. In most projects, metadata updates would be possible by changning\r\n     * the metadata on the web server hosting the metadata. However, for\r\n     * Artifex once metadata is locked, no updates to the metadata will be\r\n     * possible - the information is permanent and immutable.\r\n     *\r\n     * The metadata will be permanent on-chain here in the contract, retrievable\r\n     * as a JSON string via the getMetadata() call. A mirror of the metadata will\r\n     * also live permanently on IPFS at the location stored in the\r\n     * tokenIdToIPFSMetadataHash mapping in this contract.\r\n     *\r\n     * @param seriesId the ID of the series (0-100)\r\n     */\r\n    function lockSeries(uint256 seriesId) external anyOperator {\r\n        // Series ID must be 0-100\r\n        require(seriesId <= 100);\r\n\r\n        // Series must not have been previously locked\r\n        require(artistSeriesLocked[seriesId] == false, \"Series is locked\");\r\n\r\n        // Lock the series. Once a series information is set, it can no\r\n        // longer be updated. The information will live as permanent\r\n        // metadata in the contract.\r\n        artistSeriesLocked[seriesId] = true;\r\n\r\n        // Emit the event\r\n        emit SeriesLocked(seriesId);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets a new base token URI for accessing off-chain metadata\r\n     * location. If this is changed, an event gets emitted.\r\n     * @param newBaseTokenURI the new base token URI\r\n     */\r\n    function setBaseURI(string calldata newBaseTokenURI) external anyOperator {\r\n        _baseTokenURI = newBaseTokenURI;\r\n\r\n        // Emit the event\r\n        emit TokenBaseUriSet(newBaseTokenURI);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets a new base external URI for accessing the nft on a web site.\r\n     * If this is changed, an event gets emitted\r\n     * @param newExternalBaseTokenURI the new base external token URI\r\n     */\r\n    function setExternalBaseURI(string calldata newExternalBaseTokenURI)\r\n        external\r\n        anyOperator\r\n    {\r\n        _externalBaseTokenURI = newExternalBaseTokenURI;\r\n\r\n        // Emit the event\r\n        emit ExternalBaseUriSet(newExternalBaseTokenURI);\r\n    }\r\n\r\n    /**\r\n     * @dev Batch transfer of Artifex NFTs from one address to another\r\n     * @param _to The address of the recipient\r\n     * @param _tokenIds List of token IDs to transfer\r\n     */\r\n    function batchTransfer(address _to, uint256[] calldata _tokenIds) public {\r\n        require(_tokenIds.length > 0);\r\n\r\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\r\n            safeTransferFrom(msg.sender, _to, _tokenIds[i], \"\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Given a series ID, return the locked state\r\n     * @param seriesId the series ID\r\n     * @return true if series is locked, otherwise returns false\r\n     */\r\n    function isSeriesLocked(uint256 seriesId) external view returns (bool) {\r\n        return artistSeriesLocked[seriesId];\r\n    }\r\n\r\n    /**\r\n     * @notice return the base URI used for accessing off-chain metadata\r\n     * @return base URI for location of the off-chain metadata\r\n     */\r\n    function baseURI() external view returns (string memory) {\r\n        return _baseURI();\r\n    }\r\n\r\n    /**\r\n     * @notice return the base external URI used for accessing nft on a web site.\r\n     * @return base external URI\r\n     */\r\n    function externalBaseURI() external view returns (string memory) {\r\n        return _externalBaseTokenURI;\r\n    }\r\n\r\n    /**\r\n     * @notice Given a token ID, return whether or not it exists\r\n     * @param tokenId the token ID\r\n     * @return a bool which is true of the token exists\r\n     */\r\n    function exists(uint256 tokenId) external view returns (bool) {\r\n        return _exists(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @notice Given a token ID, return all on-chain metadata for the\r\n     * token as JSON string\r\n     *\r\n     * For each NFT, the following on-chain metadata is returned:\r\n     *    - Name: The title of the art piece (includes creator of the art piece)\r\n     *    - Descriptiom: Details about the art piece (includes the artist represented)\r\n     *    - Image URI: The off-chain URI location of the image\r\n     *    - External URI: Website to view the NFT\r\n     *    - SHA256 Image Hash: The actual image hash stored on-chain for anyone\r\n     *      to validate authenticity of their art piece\r\n     *    - IPFS Image Hash: IFPS storage hash of the image\r\n     *    - Arweave Image Hash: Arweave storage hash of the image\r\n     *    - Image File Type: File extension of the image, since file stores such\r\n     *      as IPFS may not return the image file type\r\n     *\r\n     *    IF 3D MODEL INFO AVAILABLE, THEN INCLUDE THIS IN METADATA\r\n     *    - SHA256 3D Model Hash: The actual 3D Model hash stored\r\n     *      on-chain for anyone to validate authenticity of their\r\n     *       3D model asset\r\n     *    - IPFS 3D Model Hash: IFPS storage hash of the 3D model\r\n     *    - Arweave Image Hash: Arweave storage hash of the 3D model\r\n     *    - 3D Model File Type: File extension of the 3D model\r\n     *\r\n     *    ATTRIBUTES INCLUDED:\r\n     *    - Creator name: The creator of the art piece\r\n     *    - Artist name: The artist represented / honored by the creator\r\n     *    - Edition Number: The edition number of the NFT\r\n     *    - Total Editions: Total editions that can ever exist in the series\r\n     *\r\n     * @param tokenId the token ID\r\n     * @return metadata a JSON string of the metadata\r\n     */\r\n    function getMetadata(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (string memory metadata)\r\n    {\r\n        require(_exists(tokenId), \"Token does not exist\");\r\n\r\n        uint256 seriesId = getSeriesId(tokenId);\r\n        uint256 nftType = getNftType(tokenId);\r\n        uint256 editionNum = getNftNum(tokenId);\r\n\r\n        string memory creatorName;\r\n        ArtistNFTSeriesInfo memory seriesInfo;\r\n        ArtistNFTSeries3DModelInfo memory series3DModelInfo;\r\n        if (nftType == 1) {\r\n            seriesInfo = artist2DSeriesInfo[seriesId];\r\n            creatorName = seriesInfo.artistName;\r\n        } else if (nftType == 2) {\r\n            seriesInfo = artist3DSeriesInfo[seriesId];\r\n            creatorName = seriesInfo.creatorName;\r\n            series3DModelInfo = artistSeries3DModelInfo[seriesId];\r\n        }\r\n\r\n        // Name\r\n        metadata = string(\r\n            abi.encodePacked('{\\n  \"name\": \"', seriesInfo.artistName)\r\n        );\r\n        metadata = string(abi.encodePacked(metadata, \" Artifex #\"));\r\n        metadata = string(abi.encodePacked(metadata, editionNum.toString()));\r\n        metadata = string(abi.encodePacked(metadata, \" of \"));\r\n        metadata = string(\r\n            abi.encodePacked(metadata, seriesInfo.totalEditions.toString())\r\n        );\r\n        metadata = string(abi.encodePacked(metadata, '\",\\n'));\r\n\r\n        // Description: Generation\r\n        metadata = string(abi.encodePacked(metadata, '  \"description\": \"'));\r\n        metadata = string(abi.encodePacked(metadata, seriesInfo.description));\r\n        metadata = string(abi.encodePacked(metadata, '\",\\n'));\r\n\r\n        // Image URI\r\n        metadata = string(abi.encodePacked(metadata, '  \"image\": \"'));\r\n        metadata = string(abi.encodePacked(metadata, _baseTokenURI));\r\n        metadata = string(abi.encodePacked(metadata, seriesInfo.ipfsImageHash));\r\n        metadata = string(abi.encodePacked(metadata, '\",\\n'));\r\n\r\n        // External URI\r\n        metadata = string(abi.encodePacked(metadata, '  \"external_url\": \"'));\r\n        metadata = string(abi.encodePacked(metadata, externalURI(tokenId)));\r\n        metadata = string(abi.encodePacked(metadata, '\",\\n'));\r\n\r\n        // SHA256 Image Hash\r\n        metadata = string(\r\n            abi.encodePacked(metadata, '  \"sha256_image_hash\": \"')\r\n        );\r\n        metadata = string(\r\n            abi.encodePacked(metadata, seriesInfo.sha256ImageHash)\r\n        );\r\n        metadata = string(abi.encodePacked(metadata, '\",\\n'));\r\n\r\n        // IPFS Image Hash\r\n        metadata = string(abi.encodePacked(metadata, '  \"ipfs_image_hash\": \"'));\r\n        metadata = string(abi.encodePacked(metadata, seriesInfo.ipfsImageHash));\r\n        metadata = string(abi.encodePacked(metadata, '\",\\n'));\r\n\r\n        // Arweave Image Hash\r\n        metadata = string(\r\n            abi.encodePacked(metadata, '  \"arweave_image_hash\": \"')\r\n        );\r\n        metadata = string(\r\n            abi.encodePacked(metadata, seriesInfo.arweaveImageHash)\r\n        );\r\n        metadata = string(abi.encodePacked(metadata, '\",\\n'));\r\n\r\n        // Image file type\r\n        metadata = string(abi.encodePacked(metadata, '  \"image_file_type\": \"'));\r\n        metadata = string(abi.encodePacked(metadata, seriesInfo.imageFileType));\r\n        metadata = string(abi.encodePacked(metadata, '\",\\n'));\r\n\r\n        // Optional 3D Model metadata\r\n        if (nftType == 2) {\r\n            // SHA256 3D Model Hash\r\n            metadata = string(\r\n                abi.encodePacked(metadata, '  \"sha256_3d_model_hash\": \"')\r\n            );\r\n            metadata = string(\r\n                abi.encodePacked(metadata, series3DModelInfo.sha256ModelHash)\r\n            );\r\n            metadata = string(abi.encodePacked(metadata, '\",\\n'));\r\n\r\n            // IPFS 3D Model Hash\r\n            metadata = string(\r\n                abi.encodePacked(metadata, '  \"ipfs_3d_model_hash\": \"')\r\n            );\r\n            metadata = string(\r\n                abi.encodePacked(metadata, series3DModelInfo.ipfs3DModelHash)\r\n            );\r\n            metadata = string(abi.encodePacked(metadata, '\",\\n'));\r\n\r\n            // Arweave 3D Model Hash\r\n            metadata = string(\r\n                abi.encodePacked(metadata, '  \"arweave_3d_model_hash\": \"')\r\n            );\r\n            metadata = string(\r\n                abi.encodePacked(metadata, series3DModelInfo.arweave3DModelHash)\r\n            );\r\n            metadata = string(abi.encodePacked(metadata, '\",\\n'));\r\n\r\n            // 3D model file type\r\n            metadata = string(\r\n                abi.encodePacked(metadata, '  \"model_file_type\": \"')\r\n            );\r\n            metadata = string(\r\n                abi.encodePacked(metadata, series3DModelInfo.modelFileType)\r\n            );\r\n            metadata = string(abi.encodePacked(metadata, '\",\\n'));\r\n        }\r\n\r\n        // Atributes section\r\n\r\n        // Artist Name\r\n        metadata = string(\r\n            abi.encodePacked(\r\n                metadata,\r\n                '  \"attributes\": [\\n     {\"trait_type\": \"Artist\", \"value\": \"'\r\n            )\r\n        );\r\n        metadata = string(abi.encodePacked(metadata, seriesInfo.artistName));\r\n        metadata = string(abi.encodePacked(metadata, '\"},\\n'));\r\n\r\n        // Creator Name\r\n        metadata = string(\r\n            abi.encodePacked(\r\n                metadata,\r\n                '     {\"trait_type\": \"Creator\", \"value\": \"'\r\n            )\r\n        );\r\n        metadata = string(abi.encodePacked(metadata, creatorName));\r\n        metadata = string(abi.encodePacked(metadata, '\"},\\n'));\r\n\r\n        // Edition Number\r\n        metadata = string(\r\n            abi.encodePacked(\r\n                metadata,\r\n                '     {\"trait_type\": \"Edition\", \"value\": '\r\n            )\r\n        );\r\n        metadata = string(abi.encodePacked(metadata, editionNum.toString()));\r\n        metadata = string(abi.encodePacked(metadata, \",\"));\r\n\r\n        // Total Editions\r\n        metadata = string(abi.encodePacked(metadata, ' \"max_value\": '));\r\n        metadata = string(\r\n            abi.encodePacked(metadata, seriesInfo.totalEditions.toString())\r\n        );\r\n        metadata = string(abi.encodePacked(metadata, \",\"));\r\n        metadata = string(\r\n            abi.encodePacked(metadata, ' \"display_type\": \"number\"}\\n ]')\r\n        );\r\n\r\n        // Finish JSON object\r\n        metadata = string(abi.encodePacked(metadata, \"\\n}\"));\r\n    }\r\n\r\n    /**\r\n     * @notice Mints an Artifex NFT\r\n     * @param to address of the recipient\r\n     * @param seriesId series to mint\r\n     * @param nftType the type of nft - 1 for 2D piece, 2 for 3D piece\r\n     * @param nftNum the edition number of the nft\r\n     * @param ipfsHash the ipfsHash of a copy of the token's Metadata on ipfs\r\n     */\r\n    function mintArtifexNft(\r\n        address to,\r\n        uint256 seriesId,\r\n        uint256 nftType,\r\n        uint256 nftNum,\r\n        string memory ipfsHash\r\n    ) public anyOperator {\r\n        // Ensure the series is not locked yet. No more minting can\r\n        // happen once the series is locked\r\n        require(artistSeriesLocked[seriesId] == false, \"Series is locked\");\r\n        // Series 0 is a gift series. Only enforce edition limits\r\n        // for artist Series > 0.\r\n        if (seriesId > 0) {\r\n            if (nftType == 1) {\r\n                require(nftNum == 1, \"Edition must be 1\");\r\n            } else if (nftType == 2) {\r\n                require(nftNum <= 100, \"Edition must be <= 100\");\r\n            }\r\n        }\r\n        uint256 tokenId = encodeTokenId(seriesId, nftType, nftNum);\r\n        _safeMint(to, tokenId);\r\n        _setTokenIPFSMetadataHash(tokenId, ipfsHash);\r\n    }\r\n\r\n    /**\r\n     * @notice Mints multiple Artifex NFTs for same series and nftType\r\n     * @param to address of the recipient\r\n     * @param seriesId series to mint\r\n     * @param nftType the type of nft - 1 for 2D piece, 2 for 3D piece\r\n     * @param nftStartingNum the starting edition number of the nft\r\n     * @param numTokens the number of tokens to mint in the edition,\r\n     * starting from nftStartingNum edition number\r\n     * @param ipfsHashes an array of ipfsHashes of each token's Metadata on ipfs\r\n     */\r\n    function batchMintArtifexNft(\r\n        address to,\r\n        uint256 seriesId,\r\n        uint256 nftType,\r\n        uint256 nftStartingNum,\r\n        uint256 numTokens,\r\n        string[] memory ipfsHashes\r\n    ) public anyOperator {\r\n        require(\r\n            numTokens == ipfsHashes.length,\r\n            \"numTokens and num ipfsHashes must match\"\r\n        );\r\n        for (uint256 i = 0; i < numTokens; i++) {\r\n            mintArtifexNft(\r\n                to,\r\n                seriesId,\r\n                nftType,\r\n                nftStartingNum + i,\r\n                ipfsHashes[i]\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Given a token ID, return the series ID of the token\r\n     * @param tokenId the token ID\r\n     * @return the series ID of the token\r\n     */\r\n    function getSeriesId(uint256 tokenId) public pure returns (uint256) {\r\n        return (uint256(tokenId / SERIES_MULTIPLIER));\r\n    }\r\n\r\n    /**\r\n     * @notice Given a token ID, return the nft type of the token\r\n     * @param tokenId the token ID\r\n     * @return the nft type of the token\r\n     */\r\n    function getNftType(uint256 tokenId) public pure returns (uint256) {\r\n        uint256 seriesId = getSeriesId(tokenId);\r\n        return\r\n            uint256(\r\n                (tokenId - (SERIES_MULTIPLIER * seriesId)) / NFT_TYPE_MULTIPLIER\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Given a token ID, return the nft edition number of the token\r\n     * @param tokenId the token ID\r\n     * @return the nft edition number of the token\r\n     */\r\n    function getNftNum(uint256 tokenId) public pure returns (uint256) {\r\n        uint256 seriesId = getSeriesId(tokenId);\r\n        uint256 nftType = getNftType(tokenId);\r\n        return\r\n            uint256(\r\n                tokenId -\r\n                    (SERIES_MULTIPLIER * seriesId) -\r\n                    (nftType * NFT_TYPE_MULTIPLIER)\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Generate a tokenId given the series ID, nft type,\r\n     * and nft edition number\r\n     * @param seriesId series to mint\r\n     * @param nftType the type of nft - 1 for 2D piece, 2 for 3D piece\r\n     * @param nftNum the edition number of the nft\r\n     * @return the token ID\r\n     */\r\n    function encodeTokenId(\r\n        uint256 seriesId,\r\n        uint256 nftType,\r\n        uint256 nftNum\r\n    ) public pure returns (uint256) {\r\n        return ((seriesId * SERIES_MULTIPLIER) +\r\n            (nftType * NFT_TYPE_MULTIPLIER) +\r\n            nftNum);\r\n    }\r\n\r\n    /**\r\n     * @notice Given a token ID, return the name of the artist name\r\n     * for the token\r\n     * @param tokenId the token ID\r\n     * @return artistName the name of the artist\r\n     */\r\n    function getArtistNameByTokenId(uint256 tokenId)\r\n        public\r\n        view\r\n        returns (string memory artistName)\r\n    {\r\n        require(_exists(tokenId), \"Token does not exist\");\r\n        if (getNftType(tokenId) == 1) {\r\n            artistName = artist2DSeriesInfo[getSeriesId(tokenId)].artistName;\r\n        } else if (getNftType(tokenId) == 2) {\r\n            artistName = artist3DSeriesInfo[getSeriesId(tokenId)].artistName;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Given a series ID and nft type, return information about the series\r\n     * @param seriesId series to mint\r\n     * @param nftType the type of nft - 1 for 2D piece, 2 for 3D piece\r\n     * @return seriesInfo structure with series information\r\n     */\r\n    function getSeriesInfo(uint256 seriesId, uint256 nftType)\r\n        public\r\n        view\r\n        returns (\r\n            ArtistNFTSeriesInfo memory seriesInfo,\r\n            ArtistNFTSeries3DModelInfo memory series3dModelInfo\r\n        )\r\n    {\r\n        if (nftType == 1) {\r\n            seriesInfo = artist2DSeriesInfo[seriesId];\r\n        } else if (nftType == 2) {\r\n            seriesInfo = artist3DSeriesInfo[seriesId];\r\n            series3dModelInfo = artistSeries3DModelInfo[seriesId];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Given a token ID, return information about the series\r\n     * @param tokenId the token ID\r\n     * @return seriesInfo structure with series information\r\n     */\r\n    function getSeriesInfoByTokenId(uint256 tokenId)\r\n        public\r\n        view\r\n        returns (\r\n            ArtistNFTSeriesInfo memory seriesInfo,\r\n            ArtistNFTSeries3DModelInfo memory series3dModelInfo\r\n        )\r\n    {\r\n        require(_exists(tokenId), \"Token does not exist\");\r\n        (seriesInfo, series3dModelInfo) = getSeriesInfo(\r\n            getSeriesId(tokenId),\r\n            getNftType(tokenId)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an URI for a given token ID.\r\n     * See {IERC721Metadata-tokenURI}.\r\n     * @param tokenId uint256 ID of the token to query\r\n     * @return URI for location of the off-chain metadata\r\n     */\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721Metadata: URI query for nonexistent token\"\r\n        );\r\n\r\n        return\r\n            bytes(_baseTokenURI).length > 0\r\n                ? string(\r\n                    abi.encodePacked(\r\n                        _baseTokenURI,\r\n                        tokenIdToIPFSMetadataHash[tokenId]\r\n                    )\r\n                )\r\n                : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the actual CID hash pointing to the token's metadata on IPFS.\r\n     * @param tokenId token ID of the token to query\r\n     * @return the ipfs hash of the metadata\r\n     */\r\n    function tokenIPFSMetadataHash(uint256 tokenId)\r\n        public\r\n        view\r\n        returns (string memory)\r\n    {\r\n        return tokenIdToIPFSMetadataHash[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @notice Given a token ID, return the external URI for viewing the nft on a\r\n     * web site.\r\n     * @param tokenId the token ID\r\n     * @return external URI\r\n     */\r\n    function externalURI(uint256 tokenId) public view returns (string memory) {\r\n        return\r\n            string(abi.encodePacked(_externalBaseTokenURI, tokenId.toString()));\r\n    }\r\n\r\n    /**\r\n     * @notice return the base URI used for accessing off-chain metadata\r\n     * @return base URI for location of the off-chain metadata\r\n     */\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return _baseTokenURI;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to set the token IPFS hash for a given token.\r\n     * Reverts if the token ID does not exist.\r\n     * @param tokenId uint256 ID of the token to set its URI\r\n     * @param ipfs_hash string IPFS link to assign\r\n     */\r\n    function _setTokenIPFSMetadataHash(uint256 tokenId, string memory ipfs_hash)\r\n        private\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721Metadata: URI set of nonexistent token\"\r\n        );\r\n        tokenIdToIPFSMetadataHash[tokenId] = ipfs_hash;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"base_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"external_base_uri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"externalBaseUri\",\"type\":\"string\"}],\"name\":\"ExternalBaseUriSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"}],\"name\":\"SeriesLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenBaseUri\",\"type\":\"string\"}],\"name\":\"TokenBaseUriSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalEditions\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"creatorName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artistName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artTitle\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sha256ImageHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsImageHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"arweaveImageHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageFileType\",\"type\":\"string\"}],\"internalType\":\"struct Artifex.ArtistNFTSeriesInfo\",\"name\":\"seriesInfo\",\"type\":\"tuple\"}],\"name\":\"addArtistSeries2dNftType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalEditions\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"creatorName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artistName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artTitle\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sha256ImageHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsImageHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"arweaveImageHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageFileType\",\"type\":\"string\"}],\"internalType\":\"struct Artifex.ArtistNFTSeriesInfo\",\"name\":\"seriesInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"sha256ModelHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfs3DModelHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"arweave3DModelHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"modelFileType\",\"type\":\"string\"}],\"internalType\":\"struct Artifex.ArtistNFTSeries3DModelInfo\",\"name\":\"series3DModelInfo\",\"type\":\"tuple\"}],\"name\":\"addArtistSeries3dNftType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftStartingNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"ipfsHashes\",\"type\":\"string[]\"}],\"name\":\"batchMintArtifexNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftNum\",\"type\":\"uint256\"}],\"name\":\"encodeTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"externalBaseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"externalURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getArtistNameByTokenId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"artistName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getNftNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getNftType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getSeriesId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"}],\"name\":\"getSeriesInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalEditions\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"creatorName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artistName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artTitle\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sha256ImageHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsImageHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"arweaveImageHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageFileType\",\"type\":\"string\"}],\"internalType\":\"struct Artifex.ArtistNFTSeriesInfo\",\"name\":\"seriesInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"sha256ModelHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfs3DModelHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"arweave3DModelHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"modelFileType\",\"type\":\"string\"}],\"internalType\":\"struct Artifex.ArtistNFTSeries3DModelInfo\",\"name\":\"series3dModelInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getSeriesInfoByTokenId\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalEditions\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"creatorName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artistName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artTitle\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sha256ImageHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsImageHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"arweaveImageHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageFileType\",\"type\":\"string\"}],\"internalType\":\"struct Artifex.ArtistNFTSeriesInfo\",\"name\":\"seriesInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"sha256ModelHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfs3DModelHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"arweave3DModelHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"modelFileType\",\"type\":\"string\"}],\"internalType\":\"struct Artifex.ArtistNFTSeries3DModelInfo\",\"name\":\"series3dModelInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"}],\"name\":\"isSeriesLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"}],\"name\":\"lockSeries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftNum\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"}],\"name\":\"mintArtifexNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operatorAddress\",\"type\":\"address\"}],\"name\":\"otherOperator\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseTokenURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newExternalBaseTokenURI\",\"type\":\"string\"}],\"name\":\"setExternalBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOperator\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"setOtherOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenIPFSMetadataHash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"}],\"name\":\"updateTokenIPFSMetadataHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Artifex","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000007417274696665780000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000074152544946455800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002268747470733a2f2f676174657761792e70696e6174612e636c6f75642f697066732f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001468747470733a2f2f617274696665782e6172742f000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9f8cbc42b7f9fb994edadbfb0a2f8ac4451bc42c2991eccc64186c6f6c33fcb8"}]}