{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.0;\r\n\r\n\r\n/*\r\n\r\nXAdspace - Dutch auction digital advertisement spaces \r\n\r\n  v0.15.4\r\n\r\n*/\r\n                                                                                 \r\n  \r\n \r\n\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n  \r\n  \r\n/**\r\n * \r\n * \r\n *  Dutch auction digital advertisement spaces\r\n *\r\n * \r\n */\r\ncontract XAdspace {\r\n\r\n   mapping(bytes32 => AdProgram) public adPrograms;  \r\n\r\n   mapping(address => uint256) public adProgramNonces;  \r\n   \r\n\r\n   //polygon network, 50000 blocks per day approx\r\n   uint256 public adspaceAuctionTimeBlocks = 50000 * 7;\r\n \r\n   struct AdProgram {\r\n\r\n     address programOwner;\r\n     string programName;\r\n     address paymentDelegate; //address to recieve payment      \r\n     address token;\r\n\r\n     address renter;\r\n     uint256 startPrice;\r\n     uint256 rentStartBlock;\r\n     string adURL; \r\n\r\n     bool newRentalsAllowed;\r\n      \r\n   }\r\n\r\n   event BoughtAdspace(bytes32 programId, address programOwner, address token, uint256 tokens, string adURL, address renter);\r\n   event CreatedAdProgram(bytes32 programId, address programOwner, address token, uint256 tokens, string adURL);\r\n\r\n\r\n   \r\n  constructor( uint256 _timeBlocks )   {  \r\n    adspaceAuctionTimeBlocks = _timeBlocks;\r\n  }\r\n\r\n   \r\n   \r\n\r\n  function createAdProgram(address token, uint256 startPrice, string calldata programName, string calldata initialUrl ) public returns (bool) {\r\n    \r\n    address from = msg.sender; \r\n \r\n    bytes32 programId = keccak256(abi.encodePacked(from, adProgramNonces[from]++));\r\n\r\n    require( !adspaceIsDefined(programId) );\r\n\r\n    adPrograms[programId] = AdProgram( from, programName, from, token, address(0), startPrice, block.number, initialUrl, true);\r\n\r\n    require( adspaceIsDefined(programId) );\r\n\r\n    emit CreatedAdProgram(programId, from, token, startPrice, initialUrl);\r\n\r\n    return true;\r\n  }\r\n\r\n\r\n  function buyAdspace(bytes32 programId, address token, uint256 tokens, string calldata adURL) public returns (bool) {\r\n     \r\n\r\n    address from = msg.sender;\r\n\r\n    require(adspaceIsDefined(programId), 'That adspace does not exist');\r\n    require(adPrograms[programId].newRentalsAllowed == true, 'New rentals disallowed');\r\n\r\n\r\n    uint256 remainingAdspaceValue = getRemainingAdspaceValue(programId);\r\n \r\n    if( remainingAdspaceValue > 0  ){  \r\n      //need to pay off the previous owner to refund   for the rest of their time that remained \r\n       IERC20(adPrograms[programId].token).transferFrom(from, adPrograms[programId].renter, remainingAdspaceValue );\r\n    }\r\n \r\n    uint256 rentalPremium = getAdspaceRentalPremium(programId);\r\n\r\n    if( rentalPremium > 0 ){ \r\n      //need to pay the adspace owner the rental premium \r\n      IERC20(adPrograms[programId].token).transferFrom(from, adPrograms[programId].paymentDelegate, rentalPremium );\r\n    }\r\n\r\n    adPrograms[programId].renter = from;\r\n    adPrograms[programId].adURL = adURL;\r\n    adPrograms[programId].startPrice = remainingAdspaceValue + rentalPremium;\r\n    adPrograms[programId].rentStartBlock = block.number;\r\n\r\n    //make sure the buyer explicity authorizes these values in the input parameters \r\n    require( token == adPrograms[programId].token );\r\n    require( tokens >= remainingAdspaceValue + rentalPremium );\r\n\r\n    emit BoughtAdspace(programId, adPrograms[programId].programOwner, token, remainingAdspaceValue + rentalPremium, adURL, from);\r\n\r\n\r\n    return true;\r\n   \r\n\r\n  }\r\n\r\n\r\n  function setPaymentDelegate( bytes32 programId, address delegate ) public returns (bool) {\r\n     \r\n      require(adPrograms[programId].programOwner == msg.sender);\r\n\r\n      require(adspaceIsDefined(programId));\r\n      \r\n      adPrograms[programId].paymentDelegate = delegate;\r\n\r\n      return true; \r\n  }\r\n\r\n  function setNewRentalsAllowed(  bytes32 programId, bool allowed ) public returns (bool) {\r\n     \r\n      require(adPrograms[programId].programOwner == msg.sender);\r\n\r\n      require(adspaceIsDefined(programId));\r\n      \r\n      adPrograms[programId].newRentalsAllowed = allowed;\r\n\r\n      return true; \r\n  }\r\n\r\n\r\n  //can always set price, but can never be lower than what the  current space owners's \r\n  function setPriceForAdspace(bytes32 programId, uint256 newPrice) public returns (bool) {\r\n     \r\n       \r\n      require(adPrograms[programId].programOwner == msg.sender);\r\n\r\n      require(adspaceIsDefined(programId));\r\n     \r\n      //must be expired, or must be no bounty to pay to the previous renter \r\n      require ( getRemainingAdspaceValue(programId) == 0);\r\n\r\n      adPrograms[programId].startPrice = newPrice;\r\n\r\n      return true; \r\n  }\r\n\r\n  function setTokenForAdspace(bytes32 programId, address newToken) public returns (bool) {\r\n \r\n      require(adPrograms[programId].programOwner == msg.sender);\r\n\r\n      require(adspaceIsDefined(programId));\r\n      \r\n      //must be expired, or must be no bounty to pay to the previous renter \r\n      require ( getRemainingAdspaceValue(programId) == 0);\r\n\r\n      adPrograms[programId].token = newToken;\r\n\r\n      return true; \r\n  }\r\n\r\n\r\n  function adspaceTimeRemaining( bytes32 programId ) public view returns (uint256){\r\n\r\n      uint256 expirationBlock = adPrograms[programId].rentStartBlock + adspaceAuctionTimeBlocks;\r\n\r\n\r\n       if(block.number <= expirationBlock){\r\n         return expirationBlock - block.number; \r\n       }\r\n\r\n       return 0;\r\n     \r\n  }\r\n \r\n  function adspaceIsDefined( bytes32 programId ) public view returns (bool){\r\n     \r\n      return adPrograms[programId].token != address(0x0)  ;\r\n  }\r\n\r\n  \r\n   \r\n  function getRemainingAdspaceValue( bytes32 programId ) public view returns (uint256){\r\n      if(adspaceIsDefined(programId) && adPrograms[programId].renter != address(0x0)){\r\n  \r\n        uint256 blocksRemaining = adspaceTimeRemaining(programId);\r\n \r\n        return (2 * adPrograms[programId].startPrice * blocksRemaining / adspaceAuctionTimeBlocks);\r\n         \r\n      }\r\n\r\n      return 0;\r\n  }\r\n \r\n  function getAdspaceRentalPremium( bytes32 programId ) public view returns (uint256){\r\n      if(adspaceIsDefined(programId) && adPrograms[programId].renter != address(0x0)){\r\n\r\n             uint256 blocksRemaining = adspaceTimeRemaining(programId);\r\n  \r\n        return (adPrograms[programId].startPrice /2) +  (adPrograms[programId].startPrice  )  * (  blocksRemaining / adspaceAuctionTimeBlocks);\r\n         \r\n      }\r\n\r\n      return  adPrograms[programId].startPrice  ;\r\n  }\r\n \r\n    \r\n   \r\n     // ------------------------------------------------------------------------\r\n\r\n    // Don't accept ETH\r\n\r\n    // ------------------------------------------------------------------------\r\n \r\n    fallback() external payable { revert(); }\r\n    receive() external payable { revert(); }\r\n   \r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeBlocks\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"programId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"programOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"adURL\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"renter\",\"type\":\"address\"}],\"name\":\"BoughtAdspace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"programId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"programOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"adURL\",\"type\":\"string\"}],\"name\":\"CreatedAdProgram\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adProgramNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"adPrograms\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"programOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"programName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"paymentDelegate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"renter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rentStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"adURL\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"newRentalsAllowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adspaceAuctionTimeBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"programId\",\"type\":\"bytes32\"}],\"name\":\"adspaceIsDefined\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"programId\",\"type\":\"bytes32\"}],\"name\":\"adspaceTimeRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"programId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"adURL\",\"type\":\"string\"}],\"name\":\"buyAdspace\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"programName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"initialUrl\",\"type\":\"string\"}],\"name\":\"createAdProgram\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"programId\",\"type\":\"bytes32\"}],\"name\":\"getAdspaceRentalPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"programId\",\"type\":\"bytes32\"}],\"name\":\"getRemainingAdspaceValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"programId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setNewRentalsAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"programId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"setPaymentDelegate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"programId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPriceForAdspace\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"programId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"setTokenForAdspace\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"XAdspace","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000001388","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6d1b51d5eb0a0e6119ea079f2bbec6e5c830748e1c39ae7eaa5d95f91ea55528"}]}