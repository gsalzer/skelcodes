{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\" \r\npragma solidity ^0.6.0;\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\ncontract CrashCoin {\r\n\r\n    string public constant name = \"CrashCoin\";\r\n    string public constant symbol = \"CRASC\";\r\n    uint8 public constant decimals = 18;  \r\n\r\n    AggregatorV3Interface internal priceFeed;\r\n\r\n    bool under50ktrigger = false;\r\n    bool under40ktrigger = false;\r\n    bool under30ktrigger = false;\r\n    bool under20ktrigger = false;\r\n    bool under10ktrigger = false;\r\n    mapping(address => bool) x50kreg;\r\n    mapping(address => bool) x40kreg;\r\n    mapping(address => bool) x30kreg;\r\n    mapping(address => bool) x20kreg;\r\n    mapping(address => bool) x10kreg;\r\n\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n    \r\n    uint256 totalSupply_;\r\n\r\n    using SafeMath for uint256;\r\n\r\n\r\n   constructor(uint256 total) public {  \r\n    totalSupply_ = total;\r\n    balances[msg.sender] = totalSupply_;\r\n    priceFeed = AggregatorV3Interface(0xF4030086522a5bEEa4988F8cA5B36dbC97BeE88c); // BTCUSD\r\n    }  \r\n\r\n    function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n    }\r\n    \r\n    function balanceOf(address tokenOwner) public view returns (uint) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    function transfer(address receiver, uint numTokens) public returns (bool) {\r\n        require(numTokens <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(numTokens);\r\n        balances[receiver] = balances[receiver].add(numTokens);\r\n        int price = getLatestPrice();\r\n        if(price<5000000000000) {\r\n            under50ktrigger = true;\r\n        }\r\n        if(price<4000000000000) {\r\n            under40ktrigger = true;\r\n        }\r\n        if(price<3000000000000) {\r\n            under30ktrigger = true;\r\n        }\r\n        if(price<2000000000000) {\r\n            under20ktrigger = true;\r\n        }\r\n        if(price<1000000000000) {\r\n            under10ktrigger = true;\r\n        }\r\n        if(under50ktrigger && !x50kreg[msg.sender]){\r\n            totalSupply_.add(balances[msg.sender]);\r\n            emit Transfer(0x0000000000000000000000000000000000000000, msg.sender, balances[msg.sender]);\r\n            balances[msg.sender] = balances[msg.sender].add(balances[msg.sender]);\r\n            x50kreg[msg.sender] = true;\r\n        }\r\n        if(under40ktrigger && !x40kreg[msg.sender]){\r\n            totalSupply_.add(balances[msg.sender]);\r\n            emit Transfer(0x0000000000000000000000000000000000000000, msg.sender, balances[msg.sender]);\r\n            balances[msg.sender] = balances[msg.sender].add(balances[msg.sender]);\r\n            x40kreg[msg.sender] = true;\r\n        }\r\n        if(under30ktrigger && !x30kreg[msg.sender]){\r\n            totalSupply_.add(balances[msg.sender]);\r\n            emit Transfer(0x0000000000000000000000000000000000000000, msg.sender, balances[msg.sender]);\r\n            balances[msg.sender] = balances[msg.sender].add(balances[msg.sender]);\r\n            x30kreg[msg.sender] = true;\r\n        }\r\n        if(under20ktrigger && !x20kreg[msg.sender]){\r\n            totalSupply_.add(balances[msg.sender]);\r\n            emit Transfer(0x0000000000000000000000000000000000000000, msg.sender, balances[msg.sender]);\r\n            balances[msg.sender] = balances[msg.sender].add(balances[msg.sender]);\r\n            x20kreg[msg.sender] = true;\r\n        }\r\n        if(under10ktrigger && !x10kreg[msg.sender]){\r\n            totalSupply_.add(balances[msg.sender]);\r\n            emit Transfer(0x0000000000000000000000000000000000000000, msg.sender, balances[msg.sender]);\r\n            balances[msg.sender] = balances[msg.sender].add(balances[msg.sender]);\r\n            x10kreg[msg.sender] = true;\r\n        }\r\n        emit Transfer(msg.sender, receiver, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function approve(address delegate, uint numTokens) public returns (bool) {\r\n        allowed[msg.sender][delegate] = numTokens;\r\n        emit Approval(msg.sender, delegate, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address delegate) public view returns (uint) {\r\n        return allowed[owner][delegate];\r\n    }\r\n\r\n    function transferFrom(address owner, address buyer, uint numTokens) public returns (bool) {\r\n        require(numTokens <= balances[owner]);    \r\n        require(numTokens <= allowed[owner][msg.sender]);\r\n    \r\n        balances[owner] = balances[owner].sub(numTokens);\r\n        allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\r\n        balances[buyer] = balances[buyer].add(numTokens);\r\n\r\n        emit Transfer(owner, buyer, numTokens);\r\n        return true;\r\n    }\r\n\r\n     function getLatestPrice() private view returns (int) {\r\n        (\r\n            uint80 roundID, \r\n            int price,\r\n            uint startedAt,\r\n            uint timeStamp,\r\n            uint80 answeredInRound\r\n        ) = priceFeed.latestRoundData();\r\n        return price;\r\n    }\r\n}\r\n\r\nlibrary SafeMath { \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      assert(b <= a);\r\n      return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CrashCoin","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000295be96e64066972000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9f92dbef5eb7eb6d13af502774f25c89b465f676217118ede0a8de78408b2bf9"}]}