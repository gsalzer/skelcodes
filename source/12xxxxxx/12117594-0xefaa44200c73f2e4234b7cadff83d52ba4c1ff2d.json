{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/igor/job/dev/defi-sdk/contracts/ERC20.sol\": {\r\n      \"content\": \"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity 0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface ERC20 {\\n    function approve(address, uint256) external returns (bool);\\n    function transfer(address, uint256) external returns (bool);\\n    function transferFrom(address, address, uint256) external returns (bool);\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/igor/job/dev/defi-sdk/contracts/adapters/ProtocolAdapter.sol\": {\r\n      \"content\": \"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity 0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\n/**\\n * @title Protocol adapter interface.\\n * @dev adapterType(), tokenType(), and getBalance() functions MUST be implemented.\\n * @author Igor Sobolev <sobolev@zerion.io>\\n */\\ninterface ProtocolAdapter {\\n\\n    /**\\n     * @dev MUST return \\\"Asset\\\" or \\\"Debt\\\".\\n     * SHOULD be implemented by the public constant state variable.\\n     */\\n    function adapterType() external pure returns (string memory);\\n\\n    /**\\n     * @dev MUST return token type (default is \\\"ERC20\\\").\\n     * SHOULD be implemented by the public constant state variable.\\n     */\\n    function tokenType() external pure returns (string memory);\\n\\n    /**\\n     * @dev MUST return amount of the given token locked on the protocol by the given account.\\n     */\\n    function getBalance(address token, address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/igor/job/dev/defi-sdk/contracts/adapters/bzx/BzxStakingAdapter.sol\": {\r\n      \"content\": \"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity 0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport {ERC20} from \\\"../../ERC20.sol\\\";\\nimport {ProtocolAdapter} from \\\"../ProtocolAdapter.sol\\\";\\n\\n/**\\n * @dev StakingRewards contract interface.\\n * Only the functions required for AragonStakingAdapter contract are added.\\n * The StakingRewards contract is available here\\n * github.com/Synthetixio/synthetix/blob/master/contracts/StakingRewards.sol.\\n */\\ninterface StakingRewards {\\n    function earned(address)\\n        external\\n        view\\n        returns (\\n            uint256 bzrxRewardsEarned,\\n            uint256 stableCoinRewardsEarned,\\n            uint256 bzrxRewardsVesting,\\n            uint256 stableCoinRewardsVesting\\n        );\\n\\n    function balanceOfByAssets(address account)\\n        external\\n        view\\n        returns (\\n            uint256 bzrxBalance,\\n            uint256 iBZRXBalance,\\n            uint256 vBZRXBalance,\\n            uint256 lPTokenBalance\\n        );\\n\\n    function balanceOfByAsset(address token, address account)\\n        external\\n        view\\n        returns (uint256 balance);\\n}\\n\\n/**\\n * @title Adapter for BZX protocol (staking).\\n * This will return current staking + earnigns that can be immediately withdrawn.\\n * @dev Implementation of ProtocolAdapter interface.\\n * @author Roman Iftodi <romeo8881@gmail.com>\\n */\\ncontract BzxStakingAdapter is ProtocolAdapter {\\n    string public constant override adapterType = \\\"Asset\\\";\\n\\n    string public constant override tokenType = \\\"ERC20\\\";\\n\\n    address internal constant IBZRX = 0x18240BD9C07fA6156Ce3F3f61921cC82b2619157;\\n    address internal constant VBZRX = 0xB72B31907C1C95F3650b64b2469e08EdACeE5e8F;\\n    address internal constant BZRX = 0x56d811088235F11C8920698a204A5010a788f4b3;\\n    address internal constant BPT = 0xe26A220a341EAca116bDa64cF9D5638A935ae629;\\n    address internal constant CURVE3CRV = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\\n\\n    address internal constant STAKING_CONTRACT = 0xe95Ebce2B02Ee07dEF5Ed6B53289801F7Fc137A4;\\n\\n    /**\\n     * @return Amount of staked LP tokens for a given account.\\n     * @dev Implementation of ProtocolAdapter interface function.\\n     */\\n    function getBalance(address token, address account)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        if (token == IBZRX || token == VBZRX || token == BPT) {\\n            return StakingRewards(STAKING_CONTRACT).balanceOfByAsset(token, account);\\n        } else if (token == BZRX) {\\n            (uint256 bzrxEarnings, , , ) = StakingRewards(STAKING_CONTRACT).earned(account);\\n            return StakingRewards(STAKING_CONTRACT).balanceOfByAsset(token, account) + bzrxEarnings;\\n        } else if (token == CURVE3CRV) {\\n            (, uint256 curve3crv, , ) = StakingRewards(STAKING_CONTRACT).earned(account);\\n            return curve3crv;\\n        } else {\\n            return 0;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"adapterType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BzxStakingAdapter","CompilerVersion":"v0.6.5+commit.f956cc89","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}