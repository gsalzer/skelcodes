{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MovieVoting.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.6.2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport \\\"./matic/BasicMetaTransaction.sol\\\";\\r\\nimport \\\"./interfaces/IMogulSmartWallet.sol\\\";\\r\\nimport \\\"./interfaces/IMovieVotingMasterChef.sol\\\";\\r\\nimport \\\"./utils/Sqrt.sol\\\";\\r\\n\\r\\ncontract MovieVoting is BasicMetaTransaction, AccessControl {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    bytes32 public constant ROLE_ADMIN = keccak256(\\\"ROLE_ADMIN\\\");\\r\\n\\r\\n    // The Stars token.\\r\\n    IERC20 public stars;\\r\\n    // The movie NFT.\\r\\n    IERC1155 public mglMovie;\\r\\n    // The staking contrract.\\r\\n    IMovieVotingMasterChef movieVotingMasterChef;\\r\\n    // Max amount of movies per round\\r\\n    uint256 public constant MAX_MOVIES = 5;\\r\\n\\r\\n    enum VotingRoundState { Active, Paused, Canceled, Executed }\\r\\n\\r\\n    struct VotingRound {\\r\\n        // list of movies available to vote on.\\r\\n        // The list must be filled left to right, leaving empty slots as 0.\\r\\n        uint256[MAX_MOVIES] movieIds;\\r\\n        // voting starts on this block.\\r\\n        uint256 startVoteBlockNum;\\r\\n        // voting ends at this block.\\r\\n        uint256 endVoteBlockNum;\\r\\n        // total Stars rewards for the round.\\r\\n        uint256 starsRewards;\\r\\n        VotingRoundState votingRoundState;\\r\\n        // mapping variables: movieId\\r\\n        mapping(uint256 => uint256) votes;\\r\\n        // mapping variables: userAddress\\r\\n        mapping(address => bool) rewardsClaimed;\\r\\n        // mapping variables: userAddress, movieId\\r\\n        mapping(address => mapping(uint256 => uint256)) totalStarsEntered;\\r\\n    }\\r\\n\\r\\n    VotingRound[] public votingRounds;\\r\\n\\r\\n    event VotingRoundCreated(\\r\\n        uint256[MAX_MOVIES] movieIds,\\r\\n        uint256 startVoteBlockNum,\\r\\n        uint256 endVoteBlockNum,\\r\\n        uint256 starsRewards,\\r\\n        uint256 votingRound\\r\\n    );\\r\\n    event VotingRoundPaused(uint256 roundId);\\r\\n    event VotingRoundUnpaused(uint256 roundId);\\r\\n    event VotingRoundCanceled(uint256 roundId);\\r\\n    event VotingRoundExecuted(uint256 roundId);\\r\\n\\r\\n    event Voted(\\r\\n        address voter,\\r\\n        uint256 roundId,\\r\\n        uint256 movieId,\\r\\n        uint256 starsAmountMantissa,\\r\\n        uint256 quadraticVoteScore\\r\\n    );\\r\\n    event Unvoted(\\r\\n        address voter,\\r\\n        uint256 roundId,\\r\\n        uint256 movieId,\\r\\n        uint256 starsAmountMantissa,\\r\\n        uint256 quadraticVoteScore\\r\\n    );\\r\\n\\r\\n    modifier onlyAdmin {\\r\\n        require(hasRole(ROLE_ADMIN, msgSender()), \\\"Sender is not admin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier votingRoundMustExist(uint256 roundId) {\\r\\n        require(\\r\\n            roundId < votingRounds.length,\\r\\n            \\\"Voting Round id does not exist yet\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the admin role and records the stars, movie nft\\r\\n     * and staking contract addresses. Also approves Stars\\r\\n     * for the staking contract.\\r\\n     *\\r\\n     * Parameters:\\r\\n     *\\r\\n     * - _admin: admin of the smart wallet.\\r\\n     * - _stars: Stars token address.\\r\\n     * - _mglMovie: Movie NFT address.\\r\\n     * - _movieVotingMasterChef: staking contract address.\\r\\n     *\\r\\n     */\\r\\n    constructor(\\r\\n        address _admin,\\r\\n        address _stars,\\r\\n        address _mglMovie,\\r\\n        address _movieVotingMasterChef\\r\\n    ) public {\\r\\n        _setupRole(ROLE_ADMIN, _admin);\\r\\n        _setRoleAdmin(ROLE_ADMIN, ROLE_ADMIN);\\r\\n\\r\\n        stars = IERC20(_stars);\\r\\n        mglMovie = IERC1155(_mglMovie);\\r\\n        movieVotingMasterChef = IMovieVotingMasterChef(_movieVotingMasterChef);\\r\\n        // Note: uint256(-1) is max number\\r\\n        stars.approve(_movieVotingMasterChef, uint256(-1));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns all movie NFT ids of the voting round.\\r\\n     * id 0 represents empty slot.\\r\\n     *\\r\\n     * Parameters:\\r\\n     *\\r\\n     * - votingRoundId: id of the voting round.\\r\\n     */\\r\\n    function getMovieIds(uint256 votingRoundId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[MAX_MOVIES] memory)\\r\\n    {\\r\\n        return votingRounds[votingRoundId].movieIds;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns all movie NFT votes of the voting round.\\r\\n     *\\r\\n     * Parameters:\\r\\n     *\\r\\n     * - votingRoundId: voting round id.\\r\\n     */\\r\\n    function getMovieVotes(uint256 votingRoundId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[MAX_MOVIES] memory)\\r\\n    {\\r\\n        VotingRound storage votingRound = votingRounds[votingRoundId];\\r\\n        uint256[MAX_MOVIES] memory votes;\\r\\n        for (uint256 i; i < MAX_MOVIES; i++) {\\r\\n            votes[i] = (votingRound.votes[votingRound.movieIds[i]]);\\r\\n        }\\r\\n        return votes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the details of the voting round.\\r\\n     *\\r\\n     * Parameters:\\r\\n     *\\r\\n     * - votingRoundId: voting round id.\\r\\n     */\\r\\n    function getVotingRound(uint256 votingRoundId)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256[MAX_MOVIES] memory,\\r\\n            uint256[MAX_MOVIES] memory,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            VotingRoundState\\r\\n        )\\r\\n    {\\r\\n        VotingRound storage votingRound = votingRounds[votingRoundId];\\r\\n        uint256[MAX_MOVIES] memory movieIds = votingRound.movieIds;\\r\\n        uint256[MAX_MOVIES] memory votes;\\r\\n\\r\\n        for (uint256 i; i < MAX_MOVIES; i++) {\\r\\n            votes[i] = (votingRound.votes[votingRound.movieIds[i]]);\\r\\n        }\\r\\n        return (\\r\\n            movieIds,\\r\\n            votes,\\r\\n            votingRound.startVoteBlockNum,\\r\\n            votingRound.endVoteBlockNum,\\r\\n            votingRound.starsRewards,\\r\\n            votingRound.votingRoundState\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total stars entered by a user.\\r\\n     *\\r\\n     * Parameters:\\r\\n     *\\r\\n     * - userAddress: user's address.\\r\\n     * - movieId: movie round id.\\r\\n     * - votingRoundId: voting round id.\\r\\n     */\\r\\n    function getUserMovieTotalStarsEntered(\\r\\n        address userAddress,\\r\\n        uint256 movieId,\\r\\n        uint256 votingRoundId\\r\\n    ) external view returns (uint256) {\\r\\n        uint256 userMovieTotalStarsEntered =\\r\\n            votingRounds[votingRoundId].totalStarsEntered[userAddress][movieId];\\r\\n        return userMovieTotalStarsEntered;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if user has already claimed their Stars rewards.\\r\\n     *\\r\\n     * Parameters:\\r\\n     *\\r\\n     * - userAddress: user's address.\\r\\n     * - votingRoundId: voting round id.\\r\\n     */\\r\\n    function didUserClaimRewards(address userAddress, uint256 votingRoundId)\\r\\n        external\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        bool _didUserClaimRewards =\\r\\n            votingRounds[votingRoundId].rewardsClaimed[userAddress];\\r\\n        return _didUserClaimRewards;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates a new movie voting round.\\r\\n     *\\r\\n     * Parameters:\\r\\n     *\\r\\n     * - movieIds: list of movie ids, filled from left to right.\\r\\n     * Id 0 represents empty slot.\\r\\n     * - startVoteBlockNum: the block voting will start on.\\r\\n     * - endVoteBlockNum: the block voting will end on.\\r\\n     * - starsRewards: the total Stars rewards to distribute to voters.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Start Vote Block must be less than End Vote Block.\\r\\n     * - Caller must be an admin.\\r\\n     */\\r\\n    function createNewVotingRound(\\r\\n        uint256[MAX_MOVIES] calldata movieIds,\\r\\n        uint256 startVoteBlockNum,\\r\\n        uint256 endVoteBlockNum,\\r\\n        uint256 starsRewards\\r\\n    ) external onlyAdmin {\\r\\n        require(\\r\\n            startVoteBlockNum < endVoteBlockNum,\\r\\n            \\\"Start block must be less than end block\\\"\\r\\n        );\\r\\n\\r\\n        VotingRound memory votingRound;\\r\\n        votingRound.movieIds = movieIds;\\r\\n        votingRound.startVoteBlockNum = startVoteBlockNum;\\r\\n        votingRound.endVoteBlockNum = endVoteBlockNum;\\r\\n        votingRound.starsRewards = starsRewards;\\r\\n        votingRound.votingRoundState = VotingRoundState.Active;\\r\\n\\r\\n        votingRounds.push(votingRound);\\r\\n\\r\\n        stars.transferFrom(msgSender(), address(this), starsRewards);\\r\\n\\r\\n        // transfer stars for rewards\\r\\n        movieVotingMasterChef.add(\\r\\n            startVoteBlockNum,\\r\\n            endVoteBlockNum,\\r\\n            starsRewards,\\r\\n            false\\r\\n        );\\r\\n\\r\\n        emit VotingRoundCreated(\\r\\n            movieIds,\\r\\n            startVoteBlockNum,\\r\\n            endVoteBlockNum,\\r\\n            starsRewards,\\r\\n            votingRounds.length\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pause a movie voting round.\\r\\n     *\\r\\n     * Parameters:\\r\\n     *\\r\\n     * - roundId: Voting round id.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Caller must be an admin.\\r\\n     * - Voting round must exist.\\r\\n     * - Voting round must be active.\\r\\n     * - Voting round has not ended.\\r\\n     */\\r\\n    function pauseVotingRound(uint256 roundId)\\r\\n        external\\r\\n        onlyAdmin\\r\\n        votingRoundMustExist(roundId)\\r\\n    {\\r\\n        VotingRound storage votingRound = votingRounds[roundId];\\r\\n\\r\\n        require(\\r\\n            votingRound.votingRoundState == VotingRoundState.Active,\\r\\n            \\\"Only active voting rounds can be paused\\\"\\r\\n        );\\r\\n        require(\\r\\n            votingRound.endVoteBlockNum >= block.number,\\r\\n            \\\"Voting Round has already concluded\\\"\\r\\n        );\\r\\n        votingRound.votingRoundState = VotingRoundState.Paused;\\r\\n\\r\\n        emit VotingRoundPaused(roundId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Unpause a movie voting round.\\r\\n     *\\r\\n     * Parameters:\\r\\n     *\\r\\n     * - roundId: Voting round id.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Caller must be an admin.\\r\\n     * - Voting round must exist.\\r\\n     * - Voting round must be paused.\\r\\n     */\\r\\n    function unpauseVotingRound(uint256 roundId)\\r\\n        external\\r\\n        onlyAdmin\\r\\n        votingRoundMustExist(roundId)\\r\\n    {\\r\\n        VotingRound storage votingRound = votingRounds[roundId];\\r\\n\\r\\n        require(\\r\\n            votingRound.votingRoundState == VotingRoundState.Paused,\\r\\n            \\\"Only paused voting rounds can be unpaused\\\"\\r\\n        );\\r\\n        votingRound.votingRoundState = VotingRoundState.Active;\\r\\n\\r\\n        emit VotingRoundUnpaused(roundId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Cancel a movie voting round.\\r\\n     *\\r\\n     * Parameters:\\r\\n     *\\r\\n     * - roundId: Voting round id.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Caller must be an admin.\\r\\n     * - Voting round must exist.\\r\\n     * - Voting round must be active or paused.\\r\\n     */\\r\\n    function cancelVotingRound(uint256 roundId)\\r\\n        external\\r\\n        onlyAdmin\\r\\n        votingRoundMustExist(roundId)\\r\\n    {\\r\\n        VotingRound storage votingRound = votingRounds[roundId];\\r\\n\\r\\n        require(\\r\\n            votingRound.votingRoundState == VotingRoundState.Active ||\\r\\n                votingRound.votingRoundState == VotingRoundState.Paused,\\r\\n            \\\"Only active or paused voting rounds can be cancelled\\\"\\r\\n        );\\r\\n        require(\\r\\n            block.number <= votingRound.endVoteBlockNum,\\r\\n            \\\"Voting Round has already concluded\\\"\\r\\n        );\\r\\n        votingRound.votingRoundState = VotingRoundState.Canceled;\\r\\n\\r\\n        emit VotingRoundCanceled(roundId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Execute a movie voting round.\\r\\n     *\\r\\n     * Parameters:\\r\\n     *\\r\\n     * - roundId: Voting round id.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Caller must be an admin.\\r\\n     * - Voting round must exist.\\r\\n     * - Voting round must be active.\\r\\n     * - Voting round has not ended.\\r\\n     */\\r\\n    function executeVotingRound(uint256 roundId)\\r\\n        external\\r\\n        onlyAdmin\\r\\n        votingRoundMustExist(roundId)\\r\\n    {\\r\\n        VotingRound storage votingRound = votingRounds[roundId];\\r\\n\\r\\n        require(\\r\\n            votingRound.votingRoundState == VotingRoundState.Active,\\r\\n            \\\"Only active voting rounds can be executed\\\"\\r\\n        );\\r\\n        require(\\r\\n            votingRound.endVoteBlockNum < block.number,\\r\\n            \\\"Voting round has not ended\\\"\\r\\n        );\\r\\n        votingRound.votingRoundState = VotingRoundState.Executed;\\r\\n\\r\\n        emit VotingRoundExecuted(roundId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total amount of voting rounds\\r\\n     * that have been created.\\r\\n     *\\r\\n     */\\r\\n    function totalVotingRounds() external view returns (uint256) {\\r\\n        return votingRounds.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if the caller is the owner of the Mogul Smart Wallet and return its address.\\r\\n     * Return the caller's addres if it is declared smart wallet is not used.\\r\\n     *\\r\\n     * Parameters:\\r\\n     *\\r\\n     * - isMogulSmartWallet: Whether or not smart wallet is used.\\r\\n     * - mogulSmartWallet: address of the smart wallet, Zero address is passed if not used.\\r\\n     * - msgSender: address of the caller.\\r\\n     *\\r\\n     */\\r\\n    function _verifySmartWalletOwner(\\r\\n        bool isMogulSmartWallet,\\r\\n        address mogulSmartWallet,\\r\\n        address msgSender\\r\\n    ) internal returns (address) {\\r\\n        if (isMogulSmartWallet) {\\r\\n            require(\\r\\n                msgSender == IMogulSmartWallet(mogulSmartWallet).owner(),\\r\\n                \\\"Invalid Mogul Smart Wallet Owner\\\"\\r\\n            );\\r\\n            return mogulSmartWallet;\\r\\n        } else {\\r\\n            return msgSender;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Vote for a movie by staking Stars.\\r\\n     *\\r\\n     * Parameters:\\r\\n     *\\r\\n     * - roundId: voting round id.\\r\\n     * - movieId: movie id to vote for.\\r\\n     * - starsAmountMantissa: total Stars to stake.\\r\\n     * - isMogulSmartWallet: Whether or not smart wallet is used.\\r\\n     * - mogulSmartWallet: address of the smart wallet, Zero address is passed if not used.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Voting round id must exists.\\r\\n     * - Must deposit at least 1 Stars token.\\r\\n     * - Movie Id must be in voting round.\\r\\n     * - Voting round must be active.\\r\\n     * - Voting round must be started and has not ended.\\r\\n     */\\r\\n    function voteForMovie(\\r\\n        uint256 roundId,\\r\\n        uint256 movieId,\\r\\n        uint256 starsAmountMantissa,\\r\\n        bool isMogulSmartWallet,\\r\\n        address mogulSmartWalletAddress\\r\\n    ) external votingRoundMustExist(roundId) {\\r\\n        require(\\r\\n            starsAmountMantissa >= 1 ether,\\r\\n            \\\"Must deposit at least 1 Stars token\\\"\\r\\n        );\\r\\n\\r\\n        address _msgSender =\\r\\n            _verifySmartWalletOwner(\\r\\n                isMogulSmartWallet,\\r\\n                mogulSmartWalletAddress,\\r\\n                msgSender()\\r\\n            );\\r\\n\\r\\n        VotingRound storage votingRound = votingRounds[roundId];\\r\\n\\r\\n        uint256[MAX_MOVIES] memory movieIds = votingRound.movieIds;\\r\\n        require(\\r\\n            movieId != 0 &&\\r\\n                (movieId == movieIds[0] ||\\r\\n                    movieId == movieIds[1] ||\\r\\n                    movieId == movieIds[2] ||\\r\\n                    movieId == movieIds[3] ||\\r\\n                    movieId == movieIds[4]),\\r\\n            \\\"Movie Id is not in voting round\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            votingRound.votingRoundState == VotingRoundState.Active,\\r\\n            \\\"Can only vote in active rounds\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            votingRound.startVoteBlockNum <= block.number &&\\r\\n                block.number <= votingRound.endVoteBlockNum,\\r\\n            \\\"Voting round has not started or has ended\\\"\\r\\n        );\\r\\n\\r\\n        uint256 quadraticVoteScoreOld =\\r\\n            Sqrt.sqrt(\\r\\n                votingRound.totalStarsEntered[_msgSender][movieId].div(1 ether)\\r\\n            );\\r\\n\\r\\n        votingRound.totalStarsEntered[_msgSender][movieId] = votingRound\\r\\n            .totalStarsEntered[_msgSender][movieId]\\r\\n            .add(starsAmountMantissa);\\r\\n\\r\\n        uint256 quadraticVoteScoreNew =\\r\\n            Sqrt.sqrt(\\r\\n                votingRound.totalStarsEntered[_msgSender][movieId].div(1 ether)\\r\\n            );\\r\\n\\r\\n        votingRound.votes[movieId] = votingRound.votes[movieId]\\r\\n            .add(quadraticVoteScoreNew)\\r\\n            .sub(quadraticVoteScoreOld);\\r\\n\\r\\n        movieVotingMasterChef.deposit(roundId, starsAmountMantissa, _msgSender);\\r\\n\\r\\n        emit Voted(\\r\\n            _msgSender,\\r\\n            roundId,\\r\\n            movieId,\\r\\n            starsAmountMantissa,\\r\\n            quadraticVoteScoreNew\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove vote for a movie by withdrawing Stars, and forgoing Stars rewards.\\r\\n     *\\r\\n     * Parameters:\\r\\n     *\\r\\n     * - roundId: voting round id.\\r\\n     * - movieId: movie id to vote for.\\r\\n     * - starsAmountMantissa: total Stars to stake.\\r\\n     * - isMogulSmartWallet: Whether or not smart wallet is used.\\r\\n     * - mogulSmartWallet: address of the smart wallet, Zero address is passed if not used.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Voting round id must exists.\\r\\n     * - Must withdraw more than 0 Stars token.\\r\\n     * - Must have enough Stars deposited to withdraw.\\r\\n     * - Movie Id must be in voting round.\\r\\n     * - Voting round must be active.\\r\\n     * - Voting round must be started and has not ended.\\r\\n     */\\r\\n    function removeVoteForMovie(\\r\\n        uint256 roundId,\\r\\n        uint256 movieId,\\r\\n        uint256 starsAmountMantissa,\\r\\n        bool isMogulSmartWallet,\\r\\n        address mogulSmartWalletAddress\\r\\n    ) external votingRoundMustExist(roundId) {\\r\\n        require(starsAmountMantissa > 0, \\\"Cannot remove 0 votes\\\");\\r\\n\\r\\n        address _msgSender =\\r\\n            _verifySmartWalletOwner(\\r\\n                isMogulSmartWallet,\\r\\n                mogulSmartWalletAddress,\\r\\n                msgSender()\\r\\n            );\\r\\n\\r\\n        VotingRound storage votingRound = votingRounds[roundId];\\r\\n\\r\\n        uint256[MAX_MOVIES] memory movieIds = votingRound.movieIds;\\r\\n        require(\\r\\n            movieId == movieIds[0] ||\\r\\n                movieId == movieIds[1] ||\\r\\n                movieId == movieIds[2] ||\\r\\n                movieId == movieIds[3] ||\\r\\n                movieId == movieIds[4],\\r\\n            \\\"Movie Id is not in voting round\\\"\\r\\n        );\\r\\n        require(\\r\\n            starsAmountMantissa <=\\r\\n                votingRound.totalStarsEntered[_msgSender][movieId],\\r\\n            \\\"Not enough Stars to remove\\\"\\r\\n        );\\r\\n        require(\\r\\n            votingRound.votingRoundState == VotingRoundState.Active,\\r\\n            \\\"Can only remove vote in active rounds\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            votingRound.startVoteBlockNum <= block.number &&\\r\\n                block.number <= votingRound.endVoteBlockNum,\\r\\n            \\\"Voting round has not started or ended\\\"\\r\\n        );\\r\\n\\r\\n        uint256 oldQuadraticVoteScore =\\r\\n            Sqrt.sqrt(\\r\\n                votingRound.totalStarsEntered[_msgSender][movieId].div(1 ether)\\r\\n            );\\r\\n\\r\\n        votingRound.totalStarsEntered[_msgSender][movieId] = votingRound\\r\\n            .totalStarsEntered[_msgSender][movieId]\\r\\n            .sub(starsAmountMantissa);\\r\\n\\r\\n        uint256 updatedUserTotalStarsEntered =\\r\\n            votingRound.totalStarsEntered[_msgSender][movieId];\\r\\n\\r\\n        movieVotingMasterChef.withdrawPartial(\\r\\n            roundId,\\r\\n            starsAmountMantissa,\\r\\n            _msgSender\\r\\n        );\\r\\n\\r\\n        votingRound.votes[movieId] = votingRound.votes[movieId]\\r\\n            .add(Sqrt.sqrt(updatedUserTotalStarsEntered.div(1 ether)))\\r\\n            .sub(oldQuadraticVoteScore);\\r\\n\\r\\n        emit Unvoted(\\r\\n            _msgSender,\\r\\n            roundId,\\r\\n            movieId,\\r\\n            starsAmountMantissa,\\r\\n            Sqrt.sqrt(updatedUserTotalStarsEntered.div(1 ether))\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function calculateStarsRewards(address userAddress, uint256 roundId)\\r\\n        external\\r\\n        view\\r\\n        votingRoundMustExist(roundId)\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return movieVotingMasterChef.pendingStars(roundId, userAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw deposited Stars and claim Stars rewards for a given\\r\\n     * voting round.\\r\\n     *\\r\\n     * Parameters:\\r\\n     *\\r\\n     * - roundId: voting round id.\\r\\n     * - isMogulSmartWallet: Whether or not smart wallet is used.\\r\\n     * - mogulSmartWallet: address of the smart wallet, Zero address is passed if not used.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Rewards has not been claimed.\\r\\n     */\\r\\n    function withdrawAndClaimStarsRewards(\\r\\n        uint256 roundId,\\r\\n        bool isMogulSmartWallet,\\r\\n        address mogulSmartWalletAddress\\r\\n    ) external votingRoundMustExist(roundId) {\\r\\n        address _msgSender =\\r\\n            _verifySmartWalletOwner(\\r\\n                isMogulSmartWallet,\\r\\n                mogulSmartWalletAddress,\\r\\n                msgSender()\\r\\n            );\\r\\n\\r\\n        VotingRound storage votingRound = votingRounds[roundId];\\r\\n\\r\\n        require(\\r\\n            !votingRound.rewardsClaimed[_msgSender],\\r\\n            \\\"Rewards have already been claimed\\\"\\r\\n        );\\r\\n\\r\\n        votingRound.rewardsClaimed[_msgSender] = true;\\r\\n\\r\\n        movieVotingMasterChef.withdraw(roundId, _msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw deposited ETH.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Withdrawer must be an admin\\r\\n     */\\r\\n    function withdrawETH() external onlyAdmin {\\r\\n        payable(msgSender()).transfer(address(this).balance);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"contracts/matic/BasicMetaTransaction.sol\": {\r\n      \"content\": \"pragma solidity 0.6.2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\ncontract BasicMetaTransaction {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    event MetaTransactionExecuted(\\r\\n        address userAddress,\\r\\n        address payable relayerAddress,\\r\\n        bytes functionSignature\\r\\n    );\\r\\n    mapping(address => uint256) private nonces;\\r\\n\\r\\n    function getChainID() public pure returns (uint256) {\\r\\n        uint256 id;\\r\\n        assembly {\\r\\n            id := chainid()\\r\\n        }\\r\\n        return id;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Main function to be called when user wants to execute meta transaction.\\r\\n     * The actual function to be called should be passed as param with name functionSignature\\r\\n     * Here the basic signature recovery is being used. Signature is expected to be generated using\\r\\n     * personal_sign method.\\r\\n     * @param userAddress Address of user trying to do meta transaction\\r\\n     * @param functionSignature Signature of the actual function to be called via meta transaction\\r\\n     * @param sigR R part of the signature\\r\\n     * @param sigS S part of the signature\\r\\n     * @param sigV V part of the signature\\r\\n     */\\r\\n    function executeMetaTransaction(\\r\\n        address userAddress,\\r\\n        bytes calldata functionSignature,\\r\\n        bytes32 sigR,\\r\\n        bytes32 sigS,\\r\\n        uint8 sigV\\r\\n    ) external payable returns (bytes memory) {\\r\\n        require(\\r\\n            verify(\\r\\n                userAddress,\\r\\n                nonces[userAddress],\\r\\n                getChainID(),\\r\\n                functionSignature,\\r\\n                sigR,\\r\\n                sigS,\\r\\n                sigV\\r\\n            ),\\r\\n            \\\"Signer and signature do not match\\\"\\r\\n        );\\r\\n        nonces[userAddress] = nonces[userAddress].add(1);\\r\\n\\r\\n        // Append userAddress at the end to extract it from calling context\\r\\n        (bool success, bytes memory returnData) =\\r\\n            address(this).call(\\r\\n                abi.encodePacked(functionSignature, userAddress)\\r\\n            );\\r\\n\\r\\n        require(success, \\\"Function call not successful\\\");\\r\\n        emit MetaTransactionExecuted(\\r\\n            userAddress,\\r\\n            msg.sender,\\r\\n            functionSignature\\r\\n        );\\r\\n        return returnData;\\r\\n    }\\r\\n\\r\\n    function getNonce(address user) external view returns (uint256 nonce) {\\r\\n        nonce = nonces[user];\\r\\n    }\\r\\n\\r\\n    // Builds a prefixed hash to mimic the behavior of eth_sign.\\r\\n    function prefixed(bytes32 hash) internal pure returns (bytes32) {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function verify(\\r\\n        address owner,\\r\\n        uint256 nonce,\\r\\n        uint256 chainID,\\r\\n        bytes memory functionSignature,\\r\\n        bytes32 sigR,\\r\\n        bytes32 sigS,\\r\\n        uint8 sigV\\r\\n    ) public view returns (bool) {\\r\\n        bytes32 hash =\\r\\n            prefixed(\\r\\n                keccak256(\\r\\n                    abi.encodePacked(nonce, this, chainID, functionSignature)\\r\\n                )\\r\\n            );\\r\\n        address signer = ecrecover(hash, sigV, sigR, sigS);\\r\\n        require(signer != address(0), \\\"Invalid signature\\\");\\r\\n        return (owner == signer);\\r\\n    }\\r\\n\\r\\n    function msgSender() internal view returns (address sender) {\\r\\n        if (msg.sender == address(this)) {\\r\\n            bytes memory array = msg.data;\\r\\n            uint256 index = msg.data.length;\\r\\n            assembly {\\r\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\r\\n                sender := and(\\r\\n                    mload(add(array, index)),\\r\\n                    0xffffffffffffffffffffffffffffffffffffffff\\r\\n                )\\r\\n            }\\r\\n        } else {\\r\\n            return msg.sender;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IMogulSmartWallet.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.6.2;\\r\\n\\r\\ninterface IMogulSmartWallet {\\r\\n    function owner() external returns (address);\\r\\n\\r\\n    function initialize(\\r\\n        address _owner,\\r\\n        address[] calldata _guardians,\\r\\n        uint256 _minGuardianVotesRequired,\\r\\n        uint256 _pausePeriod\\r\\n    ) external;\\r\\n\\r\\n    function addGuardians(address[] calldata newGuardians) external;\\r\\n\\r\\n    function removeGuardians(address[] calldata newGuardians) external;\\r\\n\\r\\n    function getGuardiansAmount() external view returns (uint256);\\r\\n\\r\\n    function getAllGuardians() external view returns (address[100] memory);\\r\\n\\r\\n    function isGuardian(address accountAddress) external view returns (bool);\\r\\n\\r\\n    function changeOwnerByOwner(address newOwner) external;\\r\\n\\r\\n    function createChangeOwnerProposal(address newOwner) external;\\r\\n\\r\\n    function addVoteChangeOwnerProposal() external;\\r\\n\\r\\n    function removeVoteChangeOwnerProposal() external;\\r\\n\\r\\n    function changeOwnerByGuardian() external;\\r\\n\\r\\n    function setMinGuardianVotesRequired(uint256 _minGuardianVotesRequired)\\r\\n        external;\\r\\n\\r\\n    function approveERC20(\\r\\n        address erc20Address,\\r\\n        address spender,\\r\\n        uint256 amt\\r\\n    ) external;\\r\\n\\r\\n    function transferERC20(\\r\\n        address erc20Address,\\r\\n        address recipient,\\r\\n        uint256 amt\\r\\n    ) external;\\r\\n\\r\\n    function transferFromERC20(\\r\\n        address erc20Address,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amt\\r\\n    ) external;\\r\\n\\r\\n    function transferFromERC721(\\r\\n        address erc721Address,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    function safeTransferFromERC721(\\r\\n        address erc721Address,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    function safeTransferFromERC721(\\r\\n        address erc721Address,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function approveERC721(\\r\\n        address erc721Address,\\r\\n        address spender,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    function setApprovalForAllERC721(\\r\\n        address erc721Address,\\r\\n        address operator,\\r\\n        bool approved\\r\\n    ) external;\\r\\n\\r\\n    function safeTransferFromERC1155(\\r\\n        address erc1155Address,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tokenId,\\r\\n        uint256 amt,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function safeBatchTransferFromERC1155(\\r\\n        address erc1155Address,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256[] calldata tokenIds,\\r\\n        uint256[] calldata amts,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function setApprovalForAllERC1155(\\r\\n        address erc1155Address,\\r\\n        address operator,\\r\\n        bool approved\\r\\n    ) external;\\r\\n\\r\\n    function transferNativeToken(address payable recipient, uint256 amt)\\r\\n        external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IMovieVotingMasterChef.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.6.2;\\r\\n\\r\\ninterface IMovieVotingMasterChef {\\r\\n    struct UserInfo {\\r\\n        uint256 amount;\\r\\n        uint256 rewardDebt;\\r\\n    }\\r\\n\\r\\n    struct PoolInfo {\\r\\n        uint256 lastRewardBlock; // Last block number that Stars distribution occurs.\\r\\n        uint256 accStarsPerShare; // Accumulated Stars per share, times ACC_SUSHI_PRECISION. See below.\\r\\n        uint256 poolSupply;\\r\\n        uint256 rewardAmount;\\r\\n        uint256 rewardAmountPerBlock;\\r\\n        uint256 startBlock;\\r\\n        uint256 endBlock;\\r\\n    }\\r\\n\\r\\n    function userInfo(uint256 pid, address user)\\r\\n        external\\r\\n        returns (uint256, uint256);\\r\\n\\r\\n    function init(address _movieVotingAddress) external;\\r\\n\\r\\n    function poolLength() external returns (uint256);\\r\\n\\r\\n    function add(\\r\\n        uint256 _startBlock,\\r\\n        uint256 _endBlock,\\r\\n        uint256 _rewardAmount,\\r\\n        bool _withUpdate\\r\\n    ) external;\\r\\n\\r\\n    function pendingStars(uint256 _pid, address _user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function accStarsPerShareAtCurrRate(\\r\\n        uint256 blocks,\\r\\n        uint256 rewardAmountPerBlock,\\r\\n        uint256 poolSupply,\\r\\n        uint256 startBlock,\\r\\n        uint256 endBlock\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function starsPerBlock(uint256 pid) external returns (uint256);\\r\\n\\r\\n    function updatePool(uint256 _pid) external;\\r\\n\\r\\n    function massUpdatePools() external;\\r\\n\\r\\n    function deposit(\\r\\n        uint256 _pid,\\r\\n        uint256 _amount,\\r\\n        address _staker\\r\\n    ) external;\\r\\n\\r\\n    function withdraw(uint256 _pid, address _staker) external;\\r\\n\\r\\n    function withdrawPartial(uint256 _pid, uint256 _amount, address _staker) external;\\r\\n\\r\\n    function emergencyWithdraw(uint256 _pid, address _staker) external;\\r\\n\\r\\n    function safeStarsTransfer(address _to, uint256 _amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/Sqrt.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.2;\\r\\n\\r\\nlibrary Sqrt {\\r\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\r\\n        if (x == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // Calculate the square root of the perfect square of a power of two that is the closest to x.\\r\\n        uint256 xAux = uint256(x);\\r\\n        result = 1;\\r\\n        if (xAux >= 0x100000000000000000000000000000000) {\\r\\n            xAux >>= 128;\\r\\n            result <<= 64;\\r\\n        }\\r\\n        if (xAux >= 0x10000000000000000) {\\r\\n            xAux >>= 64;\\r\\n            result <<= 32;\\r\\n        }\\r\\n        if (xAux >= 0x100000000) {\\r\\n            xAux >>= 32;\\r\\n            result <<= 16;\\r\\n        }\\r\\n        if (xAux >= 0x10000) {\\r\\n            xAux >>= 16;\\r\\n            result <<= 8;\\r\\n        }\\r\\n        if (xAux >= 0x100) {\\r\\n            xAux >>= 8;\\r\\n            result <<= 4;\\r\\n        }\\r\\n        if (xAux >= 0x10) {\\r\\n            xAux >>= 4;\\r\\n            result <<= 2;\\r\\n        }\\r\\n        if (xAux >= 0x8) {\\r\\n            result <<= 1;\\r\\n        }\\r\\n\\r\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\r\\n        result = (result + x / result) >> 1;\\r\\n        result = (result + x / result) >> 1;\\r\\n        result = (result + x / result) >> 1;\\r\\n        result = (result + x / result) >> 1;\\r\\n        result = (result + x / result) >> 1;\\r\\n        result = (result + x / result) >> 1;\\r\\n        result = (result + x / result) >> 1; // Seven iterations should be enough\\r\\n        uint256 roundedDownResult = x / result;\\r\\n        return result >= roundedDownResult ? roundedDownResult : result;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stars\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mglMovie\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_movieVotingMasterChef\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"movieId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"starsAmountMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quadraticVoteScore\",\"type\":\"uint256\"}],\"name\":\"Unvoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"movieId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"starsAmountMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quadraticVoteScore\",\"type\":\"uint256\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"VotingRoundCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[5]\",\"name\":\"movieIds\",\"type\":\"uint256[5]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startVoteBlockNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endVoteBlockNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"starsRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingRound\",\"type\":\"uint256\"}],\"name\":\"VotingRoundCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"VotingRoundExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"VotingRoundPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"VotingRoundUnpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_MOVIES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"calculateStarsRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"cancelVotingRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"movieIds\",\"type\":\"uint256[5]\"},{\"internalType\":\"uint256\",\"name\":\"startVoteBlockNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endVoteBlockNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"starsRewards\",\"type\":\"uint256\"}],\"name\":\"createNewVotingRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingRoundId\",\"type\":\"uint256\"}],\"name\":\"didUserClaimRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"executeVotingRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"votingRoundId\",\"type\":\"uint256\"}],\"name\":\"getMovieIds\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"votingRoundId\",\"type\":\"uint256\"}],\"name\":\"getMovieVotes\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"movieId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingRoundId\",\"type\":\"uint256\"}],\"name\":\"getUserMovieTotalStarsEntered\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"votingRoundId\",\"type\":\"uint256\"}],\"name\":\"getVotingRound\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"\",\"type\":\"uint256[5]\"},{\"internalType\":\"uint256[5]\",\"name\":\"\",\"type\":\"uint256[5]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum MovieVoting.VotingRoundState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mglMovie\",\"outputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"pauseVotingRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"movieId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"starsAmountMantissa\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMogulSmartWallet\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"mogulSmartWalletAddress\",\"type\":\"address\"}],\"name\":\"removeVoteForMovie\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stars\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVotingRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"unpauseVotingRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"movieId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"starsAmountMantissa\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMogulSmartWallet\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"mogulSmartWalletAddress\",\"type\":\"address\"}],\"name\":\"voteForMovie\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votingRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startVoteBlockNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endVoteBlockNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"starsRewards\",\"type\":\"uint256\"},{\"internalType\":\"enum MovieVoting.VotingRoundState\",\"name\":\"votingRoundState\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMogulSmartWallet\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"mogulSmartWalletAddress\",\"type\":\"address\"}],\"name\":\"withdrawAndClaimStarsRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MovieVoting","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000017aad37fdf5bdc1b7d0e9cb601f623e647cc849a000000000000000000000000c55c2175e90a46602fd42e931f62b3acc1a013ca000000000000000000000000316a7c7e3cc126d1461f933fc4b295b84d37e70d0000000000000000000000004be937b3c22f266dcb4f86c98b2fa40a399efab7","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}