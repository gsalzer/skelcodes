{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Math\r\n * @dev Assorted math operations\r\n */\r\nlibrary Math {\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC21/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev A token holder contract that will allow a beneficiary to extract the\r\n * tokens after a given release time - the amount of coin allowed to be recovered\r\n * is proportional to the time taken. \r\n *\r\n * This contract will be used to lock up 40% of minted ChowCoin (40 million coins)\r\n * over the course of 40 months specified in 30 day increments. Calling the release\r\n * method will recover the total number of available tokens after the given time period\r\n * and transfer the tokens back into the minting account.\r\n */\r\ncontract EATTokenLockup {\r\n\r\n    // ERC20 basic token contract being held\r\n    IERC20 immutable private _token;\r\n\r\n    // beneficiary of tokens after they are released\r\n    address immutable private _beneficiary;\r\n\r\n    // time in seconds that the lockup should occur for\r\n    uint256 immutable private _totalLockupDuration;\r\n\r\n    // total number of increments of coin that should be released by\r\n    uint256 immutable private _totalIncrements;\r\n\r\n    // total number of tokens saved at this address\r\n    uint256 immutable private _totalNumTokens;\r\n\r\n    // start time of the lockup in epoch seconds\r\n    uint256 immutable private _startTime;\r\n\r\n    constructor (IERC20 token_, uint256 duration_, uint256 increments_, uint256 numTokens_) {\r\n        _token = token_;\r\n        _beneficiary = msg.sender;\r\n        _totalLockupDuration = duration_;\r\n        _totalIncrements = increments_;\r\n        _totalNumTokens = numTokens_;\r\n        _startTime = block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * @return the token being held.\r\n     */\r\n    function token() public view virtual returns (IERC20) {\r\n        return _token;\r\n    }\r\n\r\n    /**\r\n     * @return the beneficiary of the tokens.\r\n     */\r\n    function beneficiary() public view virtual returns (address) {\r\n        return _beneficiary;\r\n    }\r\n\r\n    /**\r\n     * @return the total duration of the lockup in seconds\r\n     */\r\n    function duration() public view virtual returns (uint256) {\r\n        return _totalLockupDuration;\r\n    }\r\n\r\n    /**\r\n     * @return the total remaining time for the lockup\r\n     */\r\n    function remainingDuration() public view virtual returns (uint256) {\r\n        require(block.timestamp <= _startTime + _totalLockupDuration, \"EATTokenLockup: all tokens are avilable for release\");\r\n        return _startTime + _totalLockupDuration - block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * @return the total number of tokens available for release.\r\n     */\r\n    function numReleasableTokens() public view virtual returns (uint256) {\r\n        uint256 timeIncrementSize = _totalLockupDuration / _totalIncrements;\r\n        uint256 timeDuration = block.timestamp - _startTime;\r\n        uint256 numTokensInIncrement = _totalNumTokens / _totalIncrements;\r\n        uint256 incrementsAvailable = Math.min256(timeDuration / timeIncrementSize, _totalIncrements);\r\n        uint256 maxNumTokensAvailable = incrementsAvailable * numTokensInIncrement;\r\n        uint256 numTokensReleased = _totalNumTokens - remainingTokens();\r\n        uint256 numTokensAvailable = maxNumTokensAvailable - numTokensReleased;\r\n        return numTokensAvailable;\r\n    }\r\n\r\n    /**\r\n     * @return the total number of increments in which coins are released\r\n     */\r\n    function increments() public view virtual returns (uint256) {\r\n        return _totalIncrements;\r\n    }\r\n\r\n    /**\r\n     * @return the total remaining coins held within the lockup\r\n     */\r\n    function remainingTokens() public view virtual returns (uint256) {\r\n        return _token.balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @return the total remaining coins held within the lockup\r\n     */\r\n    function tokensReleased() public view virtual returns (uint256) {\r\n        return _totalNumTokens - _token.balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers tokens held by timelock to beneficiary.\r\n     */\r\n    function release() public virtual {\r\n        uint256 amount = token().balanceOf(address(this));\r\n        require(amount > 0, \"EATTokenLockup: no tokens remaining to release\");\r\n        // solhint-disable-next-line not-rely-on-time\r\n        uint256 numTokensAvailable = numReleasableTokens();\r\n        require(amount >= numTokensAvailable, \"EATTokenLockup: not enough tokens available\");\r\n        token().transfer(beneficiary(), numTokensAvailable);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"increments_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numReleasableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EATTokenLockup","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d3bd7287374ddc0838b8b2c40f4c6d5319be999c00000000000000000000000000000000000000000000000000000000062e080000000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000002116545850052128000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://325219f5ed112e3d3205770b33326d389ac232a6d024eddb57edbd10407ee5b6"}]}