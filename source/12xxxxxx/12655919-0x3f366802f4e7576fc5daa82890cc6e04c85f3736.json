{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Controller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport { IVault } from \\\"./Vaults/IVault.sol\\\";\\r\\nimport { IProvider } from \\\"./Providers/IProvider.sol\\\";\\r\\nimport { Flasher } from \\\"./Flashloans/Flasher.sol\\\";\\r\\nimport { FlashLoan } from \\\"./Flashloans/LibFlashLoan.sol\\\";\\r\\nimport { IFujiAdmin } from \\\"./IFujiAdmin.sol\\\";\\r\\nimport { Errors } from \\\"./Libraries/Errors.sol\\\";\\r\\n\\r\\ninterface IVaultExt is IVault {\\r\\n  //Asset Struct\\r\\n  struct VaultAssets {\\r\\n    address collateralAsset;\\r\\n    address borrowAsset;\\r\\n    uint64 collateralID;\\r\\n    uint64 borrowID;\\r\\n  }\\r\\n\\r\\n  function vAssets() external view returns (VaultAssets memory);\\r\\n}\\r\\n\\r\\ncontract Controller is Ownable {\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  IFujiAdmin private _fujiAdmin;\\r\\n\\r\\n  modifier isValidVault(address _vaultAddr) {\\r\\n    require(_fujiAdmin.validVault(_vaultAddr), \\\"Invalid vault!\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the fujiAdmin Address\\r\\n   * @param _newFujiAdmin: FujiAdmin Contract Address\\r\\n   */\\r\\n  function setFujiAdmin(address _newFujiAdmin) external onlyOwner {\\r\\n    _fujiAdmin = IFujiAdmin(_newFujiAdmin);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Performs a forced refinancing routine\\r\\n   * @param _vaultAddr: fuji Vault address\\r\\n   * @param _newProvider: new provider address\\r\\n   * @param _ratioA: ratio to determine how much of debtposition to move\\r\\n   * @param _ratioB: _ratioA/_ratioB <= 1, and > 0\\r\\n   * @param _flashNum: integer identifier of flashloan provider\\r\\n   */\\r\\n  function doRefinancing(\\r\\n    address _vaultAddr,\\r\\n    address _newProvider,\\r\\n    uint256 _ratioA,\\r\\n    uint256 _ratioB,\\r\\n    uint8 _flashNum\\r\\n  ) external isValidVault(_vaultAddr) onlyOwner {\\r\\n    IVault vault = IVault(_vaultAddr);\\r\\n    IVaultExt.VaultAssets memory vAssets = IVaultExt(_vaultAddr).vAssets();\\r\\n    vault.updateF1155Balances();\\r\\n\\r\\n    // Check Vault borrowbalance and apply ratio (consider compound or not)\\r\\n    uint256 debtPosition =\\r\\n      IProvider(vault.activeProvider()).getBorrowBalanceOf(vAssets.borrowAsset, _vaultAddr);\\r\\n    uint256 applyRatiodebtPosition = debtPosition.mul(_ratioA).div(_ratioB);\\r\\n\\r\\n    // Check Ratio Input and Vault Balance at ActiveProvider\\r\\n    require(\\r\\n      debtPosition >= applyRatiodebtPosition && applyRatiodebtPosition > 0,\\r\\n      Errors.RF_INVALID_RATIO_VALUES\\r\\n    );\\r\\n\\r\\n    //Initiate Flash Loan Struct\\r\\n    FlashLoan.Info memory info =\\r\\n      FlashLoan.Info({\\r\\n        callType: FlashLoan.CallType.Switch,\\r\\n        asset: vAssets.borrowAsset,\\r\\n        amount: applyRatiodebtPosition,\\r\\n        vault: _vaultAddr,\\r\\n        newProvider: _newProvider,\\r\\n        userAddrs: new address[](0),\\r\\n        userBalances: new uint256[](0),\\r\\n        userliquidator: address(0),\\r\\n        fliquidator: address(0)\\r\\n      });\\r\\n\\r\\n    Flasher(payable(_fujiAdmin.getFlasher())).initiateFlashloan(info, _flashNum);\\r\\n\\r\\n    IVault(_vaultAddr).setActiveProvider(_newProvider);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Vaults/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IVault {\\n  // Events\\n\\n  // Log Users Deposit\\n  event Deposit(address indexed userAddrs, address indexed asset, uint256 amount);\\n  // Log Users withdraw\\n  event Withdraw(address indexed userAddrs, address indexed asset, uint256 amount);\\n  // Log Users borrow\\n  event Borrow(address indexed userAddrs, address indexed asset, uint256 amount);\\n  // Log Users debt repay\\n  event Payback(address indexed userAddrs, address indexed asset, uint256 amount);\\n\\n  // Log New active provider\\n  event SetActiveProvider(address providerAddr);\\n  // Log Switch providers\\n  event Switch(\\n    address vault,\\n    address fromProviderAddrs,\\n    address toProviderAddr,\\n    uint256 debtamount,\\n    uint256 collattamount\\n  );\\n\\n  // Core Vault Functions\\n\\n  function deposit(uint256 _collateralAmount) external payable;\\n\\n  function withdraw(int256 _withdrawAmount) external;\\n\\n  function borrow(uint256 _borrowAmount) external;\\n\\n  function payback(int256 _repayAmount) external payable;\\n\\n  function executeSwitch(\\n    address _newProvider,\\n    uint256 _flashLoanDebt,\\n    uint256 _fee\\n  ) external;\\n\\n  //Getter Functions\\n\\n  function activeProvider() external view returns (address);\\n\\n  function borrowBalance(address _provider) external view returns (uint256);\\n\\n  function depositBalance(address _provider) external view returns (uint256);\\n\\n  function getNeededCollateralFor(uint256 _amount, bool _withFactors)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function getLiquidationBonusFor(uint256 _amount, bool _flash) external view returns (uint256);\\n\\n  function getProviders() external view returns (address[] memory);\\n\\n  function fujiERC1155() external view returns (address);\\n\\n  //Setter Functions\\n\\n  function setActiveProvider(address _provider) external;\\n\\n  function updateF1155Balances() external;\\n}\\n\"\r\n    },\r\n    \"contracts/Providers/IProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.25 <0.7.0;\\n\\ninterface IProvider {\\n  //Basic Core Functions\\n\\n  function deposit(address _collateralAsset, uint256 _collateralAmount) external payable;\\n\\n  function borrow(address _borrowAsset, uint256 _borrowAmount) external payable;\\n\\n  function withdraw(address _collateralAsset, uint256 _collateralAmount) external payable;\\n\\n  function payback(address _borrowAsset, uint256 _borrowAmount) external payable;\\n\\n  // returns the borrow annualized rate for an asset in ray (1e27)\\n  //Example 8.5% annual interest = 0.085 x 10^27 = 85000000000000000000000000 or 85*(10**24)\\n  function getBorrowRateFor(address _asset) external view returns (uint256);\\n\\n  function getBorrowBalance(address _asset) external view returns (uint256);\\n\\n  function getDepositBalance(address _asset) external view returns (uint256);\\n\\n  function getBorrowBalanceOf(address _asset, address _who) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/Flashloans/Flasher.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { UniERC20 } from \\\"../Libraries/LibUniERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IFujiAdmin } from \\\"../IFujiAdmin.sol\\\";\\nimport { Errors } from \\\"../Libraries/Errors.sol\\\";\\n\\nimport { ILendingPool, IFlashLoanReceiver } from \\\"./AaveFlashLoans.sol\\\";\\nimport { Actions, Account, DyDxFlashloanBase, ICallee, ISoloMargin } from \\\"./DyDxFlashLoans.sol\\\";\\nimport { ICTokenFlashloan, ICFlashloanReceiver } from \\\"./CreamFlashLoans.sol\\\";\\nimport { FlashLoan } from \\\"./LibFlashLoan.sol\\\";\\nimport { IVault } from \\\"../Vaults/IVault.sol\\\";\\n\\ninterface IFliquidator {\\n  function executeFlashClose(\\n    address _userAddr,\\n    address _vault,\\n    uint256 _amount,\\n    uint256 _flashloanfee\\n  ) external;\\n\\n  function executeFlashBatchLiquidation(\\n    address[] calldata _userAddrs,\\n    uint256[] calldata _usrsBals,\\n    address _liquidatorAddr,\\n    address _vault,\\n    uint256 _amount,\\n    uint256 _flashloanFee\\n  ) external;\\n}\\n\\ninterface IFujiMappings {\\n  function addressMapping(address) external view returns (address);\\n}\\n\\ncontract Flasher is DyDxFlashloanBase, IFlashLoanReceiver, ICFlashloanReceiver, ICallee, Ownable {\\n  using SafeMath for uint256;\\n  using UniERC20 for IERC20;\\n\\n  IFujiAdmin private _fujiAdmin;\\n\\n  address private immutable _aaveLendingPool = 0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9;\\n  address private immutable _dydxSoloMargin = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\\n  IFujiMappings private immutable _crMappings =\\n    IFujiMappings(0x03BD587Fe413D59A20F32Fc75f31bDE1dD1CD6c9);\\n\\n  receive() external payable {}\\n\\n  modifier isAuthorized() {\\n    require(\\n      msg.sender == _fujiAdmin.getController() ||\\n        msg.sender == _fujiAdmin.getFliquidator() ||\\n        msg.sender == owner(),\\n      Errors.VL_NOT_AUTHORIZED\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @dev Sets the fujiAdmin Address\\n   * @param _newFujiAdmin: FujiAdmin Contract Address\\n   */\\n  function setFujiAdmin(address _newFujiAdmin) public onlyOwner {\\n    _fujiAdmin = IFujiAdmin(_newFujiAdmin);\\n  }\\n\\n  /**\\n   * @dev Routing Function for Flashloan Provider\\n   * @param info: struct information for flashLoan\\n   * @param _flashnum: integer identifier of flashloan provider\\n   */\\n  function initiateFlashloan(FlashLoan.Info calldata info, uint8 _flashnum) external isAuthorized {\\n    if (_flashnum == 0) {\\n      _initiateAaveFlashLoan(info);\\n    } else if (_flashnum == 1) {\\n      _initiateDyDxFlashLoan(info);\\n    } else if (_flashnum == 2) {\\n      _initiateCreamFlashLoan(info);\\n    }\\n  }\\n\\n  // ===================== DyDx FlashLoan ===================================\\n\\n  /**\\n   * @dev Initiates a DyDx flashloan.\\n   * @param info: data to be passed between functions executing flashloan logic\\n   */\\n  function _initiateDyDxFlashLoan(FlashLoan.Info calldata info) internal {\\n    ISoloMargin solo = ISoloMargin(_dydxSoloMargin);\\n\\n    // Get marketId from token address\\n    uint256 marketId = _getMarketIdFromTokenAddress(solo, info.asset);\\n\\n    // 1. Withdraw $\\n    // 2. Call callFunction(...)\\n    // 3. Deposit back $\\n    Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\\n\\n    operations[0] = _getWithdrawAction(marketId, info.amount);\\n    // Encode FlashLoan.Info for callFunction\\n    operations[1] = _getCallAction(abi.encode(info));\\n    // add fee of 2 wei\\n    operations[2] = _getDepositAction(marketId, info.amount.add(2));\\n\\n    Account.Info[] memory accountInfos = new Account.Info[](1);\\n    accountInfos[0] = _getAccountInfo(address(this));\\n\\n    solo.operate(accountInfos, operations);\\n  }\\n\\n  /**\\n   * @dev Executes DyDx Flashloan, this operation is required\\n   * and called by Solo when sending loaned amount\\n   * @param sender: Not used\\n   * @param account: Not used\\n   */\\n  function callFunction(\\n    address sender,\\n    Account.Info calldata account,\\n    bytes calldata data\\n  ) external override {\\n    require(msg.sender == _dydxSoloMargin && sender == address(this), Errors.VL_NOT_AUTHORIZED);\\n    account;\\n\\n    FlashLoan.Info memory info = abi.decode(data, (FlashLoan.Info));\\n\\n    //Estimate flashloan payback + premium fee of 2 wei,\\n    uint256 amountOwing = info.amount.add(2);\\n\\n    // Transfer to Vault the flashloan Amount\\n    IERC20(info.asset).uniTransfer(payable(info.vault), info.amount);\\n\\n    if (info.callType == FlashLoan.CallType.Switch) {\\n      IVault(info.vault).executeSwitch(info.newProvider, info.amount, 2);\\n    } else if (info.callType == FlashLoan.CallType.Close) {\\n      IFliquidator(info.fliquidator).executeFlashClose(\\n        info.userAddrs[0],\\n        info.vault,\\n        info.amount,\\n        2\\n      );\\n    } else {\\n      IFliquidator(info.fliquidator).executeFlashBatchLiquidation(\\n        info.userAddrs,\\n        info.userBalances,\\n        info.userliquidator,\\n        info.vault,\\n        info.amount,\\n        2\\n      );\\n    }\\n\\n    //Approve DYDXSolo to spend to repay flashloan\\n    IERC20(info.asset).approve(_dydxSoloMargin, amountOwing);\\n  }\\n\\n  // ===================== Aave FlashLoan ===================================\\n\\n  /**\\n   * @dev Initiates an Aave flashloan.\\n   * @param info: data to be passed between functions executing flashloan logic\\n   */\\n  function _initiateAaveFlashLoan(FlashLoan.Info calldata info) internal {\\n    //Initialize Instance of Aave Lending Pool\\n    ILendingPool aaveLp = ILendingPool(_aaveLendingPool);\\n\\n    //Passing arguments to construct Aave flashloan -limited to 1 asset type for now.\\n    address receiverAddress = address(this);\\n    address[] memory assets = new address[](1);\\n    assets[0] = address(info.asset);\\n    uint256[] memory amounts = new uint256[](1);\\n    amounts[0] = info.amount;\\n\\n    // 0 = no debt, 1 = stable, 2 = variable\\n    uint256[] memory modes = new uint256[](1);\\n    //modes[0] = 0;\\n\\n    //address onBehalfOf = address(this);\\n    //bytes memory params = abi.encode(info);\\n    //uint16 referralCode = 0;\\n\\n    //Aave Flashloan initiated.\\n    aaveLp.flashLoan(receiverAddress, assets, amounts, modes, address(this), abi.encode(info), 0);\\n  }\\n\\n  /**\\n   * @dev Executes Aave Flashloan, this operation is required\\n   * and called by Aaveflashloan when sending loaned amount\\n   */\\n  function executeOperation(\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata premiums,\\n    address initiator,\\n    bytes calldata params\\n  ) external override returns (bool) {\\n    require(msg.sender == _aaveLendingPool && initiator == address(this), Errors.VL_NOT_AUTHORIZED);\\n\\n    FlashLoan.Info memory info = abi.decode(params, (FlashLoan.Info));\\n\\n    //Estimate flashloan payback + premium fee,\\n    uint256 amountOwing = amounts[0].add(premiums[0]);\\n\\n    // Transfer to the vault ERC20\\n    IERC20(assets[0]).uniTransfer(payable(info.vault), amounts[0]);\\n\\n    if (info.callType == FlashLoan.CallType.Switch) {\\n      IVault(info.vault).executeSwitch(info.newProvider, amounts[0], premiums[0]);\\n    } else if (info.callType == FlashLoan.CallType.Close) {\\n      IFliquidator(info.fliquidator).executeFlashClose(\\n        info.userAddrs[0],\\n        info.vault,\\n        amounts[0],\\n        premiums[0]\\n      );\\n    } else {\\n      IFliquidator(info.fliquidator).executeFlashBatchLiquidation(\\n        info.userAddrs,\\n        info.userBalances,\\n        info.userliquidator,\\n        info.vault,\\n        amounts[0],\\n        premiums[0]\\n      );\\n    }\\n\\n    //Approve aaveLP to spend to repay flashloan\\n    IERC20(assets[0]).uniApprove(payable(_aaveLendingPool), amountOwing);\\n\\n    return true;\\n  }\\n\\n  // ===================== CreamFinance FlashLoan ===================================\\n\\n  /**\\n   * @dev Initiates an CreamFinance flashloan.\\n   * @param info: data to be passed between functions executing flashloan logic\\n   */\\n  function _initiateCreamFlashLoan(FlashLoan.Info calldata info) internal {\\n    // Get crToken Address for Flashloan Call\\n    address crToken = _crMappings.addressMapping(info.asset);\\n\\n    // Prepara data for flashloan execution\\n    bytes memory params = abi.encode(info);\\n\\n    // Initialize Instance of Cream crLendingContract\\n    ICTokenFlashloan(crToken).flashLoan(address(this), info.amount, params);\\n  }\\n\\n  /**\\n   * @dev Executes CreamFinance Flashloan, this operation is required\\n   * and called by CreamFinanceflashloan when sending loaned amount\\n   */\\n  function executeOperation(\\n    address sender,\\n    address underlying,\\n    uint256 amount,\\n    uint256 fee,\\n    bytes calldata params\\n  ) external override {\\n    // Check Msg. Sender is crToken Lending Contract\\n    address crToken = _crMappings.addressMapping(underlying);\\n\\n    require(msg.sender == crToken && address(this) == sender, Errors.VL_NOT_AUTHORIZED);\\n    require(IERC20(underlying).balanceOf(address(this)) >= amount, Errors.VL_FLASHLOAN_FAILED);\\n\\n    FlashLoan.Info memory info = abi.decode(params, (FlashLoan.Info));\\n\\n    // Estimate flashloan payback + premium fee,\\n    uint256 amountOwing = amount.add(fee);\\n\\n    // Transfer to the vault ERC20\\n    IERC20(underlying).uniTransfer(payable(info.vault), amount);\\n\\n    // Do task according to CallType\\n    if (info.callType == FlashLoan.CallType.Switch) {\\n      IVault(info.vault).executeSwitch(info.newProvider, amount, fee);\\n    } else if (info.callType == FlashLoan.CallType.Close) {\\n      IFliquidator(info.fliquidator).executeFlashClose(info.userAddrs[0], info.vault, amount, fee);\\n    } else {\\n      IFliquidator(info.fliquidator).executeFlashBatchLiquidation(\\n        info.userAddrs,\\n        info.userBalances,\\n        info.userliquidator,\\n        info.vault,\\n        amount,\\n        fee\\n      );\\n    }\\n\\n    // Transfer flashloan + fee back to crToken Lending Contract\\n    IERC20(underlying).uniTransfer(payable(crToken), amountOwing);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Flashloans/LibFlashLoan.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.25 <0.7.5;\\n\\nlibrary FlashLoan {\\n  /**\\n   * @dev Used to determine which vault's function to call post-flashloan:\\n   * - Switch for executeSwitch(...)\\n   * - Close for executeFlashClose(...)\\n   * - Liquidate for executeFlashLiquidation(...)\\n   * - BatchLiquidate for executeFlashBatchLiquidation(...)\\n   */\\n  enum CallType { Switch, Close, BatchLiquidate }\\n\\n  /**\\n   * @dev Struct of params to be passed between functions executing flashloan logic\\n   * @param asset: Address of asset to be borrowed with flashloan\\n   * @param amount: Amount of asset to be borrowed with flashloan\\n   * @param vault: Vault's address on which the flashloan logic to be executed\\n   * @param newProvider: New provider's address. Used when callType is Switch\\n   * @param userAddrs: User's address array Used when callType is BatchLiquidate\\n   * @param userBals:  Array of user's balances, Used when callType is BatchLiquidate\\n   * @param userliquidator: The user's address who is  performing liquidation. Used when callType is Liquidate\\n   * @param fliquidator: Fujis Liquidator's address.\\n   */\\n  struct Info {\\n    CallType callType;\\n    address asset;\\n    uint256 amount;\\n    address vault;\\n    address newProvider;\\n    address[] userAddrs;\\n    uint256[] userBalances;\\n    address userliquidator;\\n    address fliquidator;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/IFujiAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.12 <0.8.0;\\r\\n\\r\\ninterface IFujiAdmin {\\r\\n  function validVault(address _vaultAddr) external view returns (bool);\\r\\n\\r\\n  function getFlasher() external view returns (address);\\r\\n\\r\\n  function getFliquidator() external view returns (address);\\r\\n\\r\\n  function getController() external view returns (address);\\r\\n\\r\\n  function getTreasury() external view returns (address payable);\\r\\n\\r\\n  function getaWhiteList() external view returns (address);\\r\\n\\r\\n  function getVaultHarvester() external view returns (address);\\r\\n\\r\\n  function getBonusFlashL() external view returns (uint64, uint64);\\r\\n\\r\\n  function getBonusLiq() external view returns (uint64, uint64);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Libraries/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity <0.8.0;\\n\\n/**\\n * @title Errors library\\n * @author Fuji\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = Validation Logic 100 series\\n *  - MATH = Math libraries 200 series\\n *  - RF = Refinancing 300 series\\n *  - VLT = vault 400 series\\n *  - SP = Special 900 series\\n */\\nlibrary Errors {\\n  //Errors\\n  string public constant VL_INDEX_OVERFLOW = \\\"100\\\"; // index overflows uint128\\n  string public constant VL_INVALID_MINT_AMOUNT = \\\"101\\\"; //invalid amount to mint\\n  string public constant VL_INVALID_BURN_AMOUNT = \\\"102\\\"; //invalid amount to burn\\n  string public constant VL_AMOUNT_ERROR = \\\"103\\\"; //Input value >0, and for ETH msg.value and amount shall match\\n  string public constant VL_INVALID_WITHDRAW_AMOUNT = \\\"104\\\"; //Withdraw amount exceeds provided collateral, or falls undercollaterized\\n  string public constant VL_INVALID_BORROW_AMOUNT = \\\"105\\\"; //Borrow amount does not meet collaterization\\n  string public constant VL_NO_DEBT_TO_PAYBACK = \\\"106\\\"; //Msg sender has no debt amount to be payback\\n  string public constant VL_MISSING_ERC20_ALLOWANCE = \\\"107\\\"; //Msg sender has not approved ERC20 full amount to transfer\\n  string public constant VL_USER_NOT_LIQUIDATABLE = \\\"108\\\"; //User debt position is not liquidatable\\n  string public constant VL_DEBT_LESS_THAN_AMOUNT = \\\"109\\\"; //User debt is less than amount to partial close\\n  string public constant VL_PROVIDER_ALREADY_ADDED = \\\"110\\\"; // Provider is already added in Provider Array\\n  string public constant VL_NOT_AUTHORIZED = \\\"111\\\"; //Not authorized\\n  string public constant VL_INVALID_COLLATERAL = \\\"112\\\"; //There is no Collateral, or Collateral is not in active in vault\\n  string public constant VL_NO_ERC20_BALANCE = \\\"113\\\"; //User does not have ERC20 balance\\n  string public constant VL_INPUT_ERROR = \\\"114\\\"; //Check inputs. For ERC1155 batch functions, array sizes should match.\\n  string public constant VL_ASSET_EXISTS = \\\"115\\\"; //Asset intended to be added already exists in FujiERC1155\\n  string public constant VL_ZERO_ADDR_1155 = \\\"116\\\"; //ERC1155: balance/transfer for zero address\\n  string public constant VL_NOT_A_CONTRACT = \\\"117\\\"; //Address is not a contract.\\n  string public constant VL_INVALID_ASSETID_1155 = \\\"118\\\"; //ERC1155 Asset ID is invalid.\\n  string public constant VL_NO_ERC1155_BALANCE = \\\"119\\\"; //ERC1155: insufficient balance for transfer.\\n  string public constant VL_MISSING_ERC1155_APPROVAL = \\\"120\\\"; //ERC1155: transfer caller is not owner nor approved.\\n  string public constant VL_RECEIVER_REJECT_1155 = \\\"121\\\"; //ERC1155Receiver rejected tokens\\n  string public constant VL_RECEIVER_CONTRACT_NON_1155 = \\\"122\\\"; //ERC1155: transfer to non ERC1155Receiver implementer\\n  string public constant VL_OPTIMIZER_FEE_SMALL = \\\"123\\\"; //Fuji OptimizerFee has to be > 1 RAY (1e27)\\n  string public constant VL_UNDERCOLLATERIZED_ERROR = \\\"124\\\"; // Flashloan-Flashclose cannot be used when User's collateral is worth less than intended debt position to close.\\n  string public constant VL_MINIMUM_PAYBACK_ERROR = \\\"125\\\"; // Minimum Amount payback should be at least Fuji Optimizerfee accrued interest.\\n  string public constant VL_HARVESTING_FAILED = \\\"126\\\"; // Harvesting Function failed, check provided _farmProtocolNum or no claimable balance.\\n  string public constant VL_FLASHLOAN_FAILED = \\\"127\\\"; // Flashloan failed\\n\\n  string public constant MATH_DIVISION_BY_ZERO = \\\"201\\\";\\n  string public constant MATH_ADDITION_OVERFLOW = \\\"202\\\";\\n  string public constant MATH_MULTIPLICATION_OVERFLOW = \\\"203\\\";\\n\\n  string public constant RF_NO_GREENLIGHT = \\\"300\\\"; // Conditions for refinancing are not met, greenLight, deltaAPRThreshold, deltatimestampThreshold\\n  string public constant RF_INVALID_RATIO_VALUES = \\\"301\\\"; // Ratio Value provided is invalid, _ratioA/_ratioB <= 1, and > 0, or activeProvider borrowBalance = 0\\n  string public constant RF_CHECK_RATES_FALSE = \\\"302\\\"; //Check Rates routine returned False\\n\\n  string public constant VLT_CALLER_MUST_BE_VAULT = \\\"401\\\"; // The caller of this function must be a vault\\n\\n  string public constant SP_ALPHA_WHITELIST = \\\"901\\\"; // One ETH cap value for Alpha Version < 1 ETH\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Libraries/LibUniERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nlibrary UniERC20 {\\n  using SafeERC20 for IERC20;\\n\\n  IERC20 private constant _ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n  IERC20 private constant _ZERO_ADDRESS = IERC20(0);\\n\\n  function isETH(IERC20 token) internal pure returns (bool) {\\n    return (token == _ZERO_ADDRESS || token == _ETH_ADDRESS);\\n  }\\n\\n  function uniBalanceOf(IERC20 token, address account) internal view returns (uint256) {\\n    if (isETH(token)) {\\n      return account.balance;\\n    } else {\\n      return token.balanceOf(account);\\n    }\\n  }\\n\\n  function uniTransfer(\\n    IERC20 token,\\n    address payable to,\\n    uint256 amount\\n  ) internal {\\n    if (amount > 0) {\\n      if (isETH(token)) {\\n        to.transfer(amount);\\n      } else {\\n        token.safeTransfer(to, amount);\\n      }\\n    }\\n  }\\n\\n  function uniApprove(\\n    IERC20 token,\\n    address to,\\n    uint256 amount\\n  ) internal {\\n    require(!isETH(token), \\\"Approve called on ETH\\\");\\n\\n    if (amount == 0) {\\n      token.safeApprove(to, 0);\\n    } else {\\n      uint256 allowance = token.allowance(address(this), to);\\n      if (allowance < amount) {\\n        if (allowance > 0) {\\n          token.safeApprove(to, 0);\\n        }\\n        token.safeApprove(to, amount);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/Flashloans/AaveFlashLoans.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.25 <0.7.5;\\n\\ninterface IFlashLoanReceiver {\\n  function executeOperation(\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata premiums,\\n    address initiator,\\n    bytes calldata params\\n  ) external returns (bool);\\n}\\n\\ninterface ILendingPool {\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata modes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Flashloans/DyDxFlashLoans.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.25 <0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nlibrary Account {\\n  enum Status { Normal, Liquid, Vapor }\\n  struct Info {\\n    address owner; // The address that owns the account\\n    uint256 number; // A nonce that allows a single address to control many accounts\\n  }\\n}\\n\\nlibrary Actions {\\n  enum ActionType {\\n    Deposit, // supply tokens\\n    Withdraw, // borrow tokens\\n    Transfer, // transfer balance between accounts\\n    Buy, // buy an amount of some token (publicly)\\n    Sell, // sell an amount of some token (publicly)\\n    Trade, // trade tokens against another account\\n    Liquidate, // liquidate an undercollateralized or expiring account\\n    Vaporize, // use excess tokens to zero-out a completely negative account\\n    Call // send arbitrary data to an address\\n  }\\n\\n  struct ActionArgs {\\n    ActionType actionType;\\n    uint256 accountId;\\n    Types.AssetAmount amount;\\n    uint256 primaryMarketId;\\n    uint256 secondaryMarketId;\\n    address otherAddress;\\n    uint256 otherAccountId;\\n    bytes data;\\n  }\\n}\\n\\nlibrary Types {\\n  enum AssetDenomination {\\n    Wei, // the amount is denominated in wei\\n    Par // the amount is denominated in par\\n  }\\n\\n  enum AssetReference {\\n    Delta, // the amount is given as a delta from the current value\\n    Target // the amount is given as an exact number to end up at\\n  }\\n\\n  struct AssetAmount {\\n    bool sign; // true if positive\\n    AssetDenomination denomination;\\n    AssetReference ref;\\n    uint256 value;\\n  }\\n}\\n\\n/**\\n * @title ICallee\\n * @author dYdX\\n *\\n * Interface that Callees for Solo must implement in order to ingest data.\\n */\\ninterface ICallee {\\n  /**\\n   * Allows users to send this contract arbitrary data.\\n   *\\n   * @param  sender       The msg.sender to Solo\\n   * @param  accountInfo  The account from which the data is being sent\\n   * @param  data         Arbitrary data given by the sender\\n   */\\n  function callFunction(\\n    address sender,\\n    Account.Info memory accountInfo,\\n    bytes memory data\\n  ) external;\\n}\\n\\ninterface ISoloMargin {\\n  function getNumMarkets() external view returns (uint256);\\n\\n  function getMarketTokenAddress(uint256 marketId) external view returns (address);\\n\\n  function operate(Account.Info[] memory accounts, Actions.ActionArgs[] memory actions) external;\\n}\\n\\ncontract DyDxFlashloanBase {\\n  // -- Internal Helper functions -- //\\n\\n  function _getMarketIdFromTokenAddress(ISoloMargin solo, address token)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 numMarkets = solo.getNumMarkets();\\n\\n    address curToken;\\n    for (uint256 i = 0; i < numMarkets; i++) {\\n      curToken = solo.getMarketTokenAddress(i);\\n\\n      if (curToken == token) {\\n        return i;\\n      }\\n    }\\n\\n    revert(\\\"No marketId found\\\");\\n  }\\n\\n  function _getAccountInfo(address receiver) internal pure returns (Account.Info memory) {\\n    return Account.Info({ owner: receiver, number: 1 });\\n  }\\n\\n  function _getWithdrawAction(uint256 marketId, uint256 amount)\\n    internal\\n    view\\n    returns (Actions.ActionArgs memory)\\n  {\\n    return\\n      Actions.ActionArgs({\\n        actionType: Actions.ActionType.Withdraw,\\n        accountId: 0,\\n        amount: Types.AssetAmount({\\n          sign: false,\\n          denomination: Types.AssetDenomination.Wei,\\n          ref: Types.AssetReference.Delta,\\n          value: amount\\n        }),\\n        primaryMarketId: marketId,\\n        secondaryMarketId: 0,\\n        otherAddress: address(this),\\n        otherAccountId: 0,\\n        data: \\\"\\\"\\n      });\\n  }\\n\\n  function _getCallAction(bytes memory data) internal view returns (Actions.ActionArgs memory) {\\n    return\\n      Actions.ActionArgs({\\n        actionType: Actions.ActionType.Call,\\n        accountId: 0,\\n        amount: Types.AssetAmount({\\n          sign: false,\\n          denomination: Types.AssetDenomination.Wei,\\n          ref: Types.AssetReference.Delta,\\n          value: 0\\n        }),\\n        primaryMarketId: 0,\\n        secondaryMarketId: 0,\\n        otherAddress: address(this),\\n        otherAccountId: 0,\\n        data: data\\n      });\\n  }\\n\\n  function _getDepositAction(uint256 marketId, uint256 amount)\\n    internal\\n    view\\n    returns (Actions.ActionArgs memory)\\n  {\\n    return\\n      Actions.ActionArgs({\\n        actionType: Actions.ActionType.Deposit,\\n        accountId: 0,\\n        amount: Types.AssetAmount({\\n          sign: true,\\n          denomination: Types.AssetDenomination.Wei,\\n          ref: Types.AssetReference.Delta,\\n          value: amount\\n        }),\\n        primaryMarketId: marketId,\\n        secondaryMarketId: 0,\\n        otherAddress: address(this),\\n        otherAccountId: 0,\\n        data: \\\"\\\"\\n      });\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Flashloans/CreamFlashLoans.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.25 <0.7.5;\\n\\ninterface ICFlashloanReceiver {\\n  function executeOperation(\\n    address sender,\\n    address underlying,\\n    uint256 amount,\\n    uint256 fee,\\n    bytes calldata params\\n  ) external;\\n}\\n\\ninterface ICTokenFlashloan {\\n  function flashLoan(\\n    address receiver,\\n    uint256 amount,\\n    bytes calldata params\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ratioA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ratioB\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_flashNum\",\"type\":\"uint8\"}],\"name\":\"doRefinancing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFujiAdmin\",\"type\":\"address\"}],\"name\":\"setFujiAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Controller","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}