{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\npragma experimental ABIEncoderV2;\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) =\r\n            target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata =\r\n            address(token).functionCall(\r\n                data,\r\n                \"SafeERC20: low-level call failed\"\r\n            );\r\n        if (returndata.length > 0) {\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    address private _dev;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        _dev = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function dev() public view returns (address) {\r\n        return _dev;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyDev() {\r\n        require(_dev == _msgSender(), \"Ownable: caller is not the dev\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function transferDevship(address newDev) public virtual onlyDev {\r\n        require(newDev != address(0), \"Ownable: new dev is the zero address\");\r\n        _dev = newDev;\r\n    }\r\n}\r\n\r\nlibrary SafeMathUniswap {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n}\r\n\r\nlibrary UniswapV2Library {\r\n    using SafeMathUniswap for uint256;\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB)\r\n        internal\r\n        pure\r\n        returns (address token0, address token1)\r\n    {\r\n        require(tokenA != tokenB, \"UniswapV2Library: IDENTICAL_ADDRESSES\");\r\n        (token0, token1) = tokenA < tokenB\r\n            ? (tokenA, tokenB)\r\n            : (tokenB, tokenA);\r\n        require(token0 != address(0), \"UniswapV2Library: ZERO_ADDRESS\");\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(\r\n        address factory,\r\n        address tokenA,\r\n        address tokenB\r\n    ) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(\r\n            uint256(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        hex\"ff\",\r\n                        factory,\r\n                        keccak256(abi.encodePacked(token0, token1)),\r\n                        hex\"e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\" // init code hash\r\n                    )\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(\r\n        address factory,\r\n        address tokenA,\r\n        address tokenB\r\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\r\n        (address token0, ) = sortTokens(tokenA, tokenB);\r\n        (uint256 reserve0, uint256 reserve1, ) =\r\n            IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0\r\n            ? (reserve0, reserve1)\r\n            : (reserve1, reserve0);\r\n    }\r\n\r\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) internal pure returns (uint256 amountOut) {\r\n        require(amountIn > 0, \"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\");\r\n        require(\r\n            reserveIn > 0 && reserveOut > 0,\r\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\r\n        );\r\n        uint256 amountInWithFee = amountIn.mul(997);\r\n        uint256 numerator = amountInWithFee.mul(reserveOut);\r\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n}\r\n\r\ninterface TokenInterface is IERC20 {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256) external;\r\n}\r\n\r\ninterface IFreeFromUpTo {\r\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\r\n}\r\n\r\nlibrary Math {\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\ncontract SwapBot is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using SafeERC20 for TokenInterface;\r\n\r\n    IFreeFromUpTo public constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\r\n\r\n    TokenInterface private _weth;\r\n\r\n    IUniswapV2Router02[] public _routers;\r\n    IUniswapV2Factory[] public _factories;\r\n    address[] private _runners;\r\n\r\n    struct Root {\r\n        uint8[] routerIds;\r\n        address[] inTokens;\r\n        uint256 startAmount;\r\n        uint256 estimateProfit;\r\n        uint256 chiAmount;\r\n    }\r\n\r\n    struct PairInfo {\r\n        IUniswapV2Pair pair;\r\n        uint256 outputAmount;\r\n        bool isReserveIn;\r\n    }\r\n\r\n    modifier onlyRunner() {\r\n        (bool exist, ) = checkRunner(_msgSender());\r\n        require(exist, \"caller is not the runner\");\r\n        _;\r\n    }\r\n\r\n    modifier discountCHI(uint256 chiAmount) {\r\n        if (chiAmount > 0) {\r\n            uint256 gasStart = gasleft();\r\n            _;\r\n            uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\r\n            chi.freeFromUpTo(_msgSender(), Math.min((gasSpent + 14154) / 41947, chiAmount));\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n\r\n    constructor() {\r\n        _weth = TokenInterface(address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2));\r\n\r\n        IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D));\r\n        IUniswapV2Router02 sushiswapV2Router = IUniswapV2Router02(address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F));\r\n\r\n        _routers.push(uniswapV2Router);\r\n        _routers.push(sushiswapV2Router);\r\n\r\n        _factories.push(IUniswapV2Factory(uniswapV2Router.factory()));\r\n        _factories.push(IUniswapV2Factory(sushiswapV2Router.factory()));\r\n\r\n        _runners.push(_msgSender());\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    function deposit(uint256 depositAmount) public onlyDev {\r\n        _weth.deposit{value: depositAmount}();\r\n    }\r\n\r\n    function runnerLength() public view returns (uint8) {\r\n        return uint8(_runners.length);\r\n    }\r\n    \r\n    function checkRunner(address runner)\r\n        public\r\n        view\r\n        returns (bool exist, uint8 index)\r\n    {\r\n        uint8 length = runnerLength();\r\n        exist = false;\r\n        for (uint8 i = 0; i < length; i++) {\r\n            if (_runners[i] == runner) {\r\n                exist = true;\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function addRunner(address runner) external onlyDev {\r\n        require(runner != address(0), \"Invalid runner address.\");\r\n\r\n        _runners.push(address(runner));\r\n    }\r\n\r\n    function withdrawProfit(address withdrawAddress, uint256 withdrawAmount)\r\n        public\r\n        onlyOwner\r\n        returns (bool sent)\r\n    {\r\n        uint256 balance = _weth.balanceOf(address(this));\r\n        require(balance > withdrawAmount, \"Invalid Withdraw Amount\");\r\n\r\n        _weth.withdraw(withdrawAmount);\r\n        (sent, ) = withdrawAddress.call{value: withdrawAmount}(\"\");\r\n        require(sent, \"Invalid withdraw ETH\");\r\n    }\r\n\r\n    function emergencyWithdraw(address withdrawAddress) \r\n        public\r\n        onlyDev\r\n        returns (bool sent)\r\n    {\r\n        uint256 withdrawAmount = _weth.balanceOf(address(this));\r\n        _weth.withdraw(withdrawAmount);\r\n        uint256 ethAmount = address(this).balance;\r\n        (sent, ) = withdrawAddress.call{value: ethAmount}(\"\");\r\n        require(sent, \"Invalid withdraw ETH\");\r\n    }\r\n\r\n    function checkEstimatedProfit(\r\n        uint8[] memory routerIds,\r\n        uint256 startAmount,\r\n        address[] memory inTokens\r\n    ) \r\n        public \r\n        view \r\n        returns (\r\n            uint256,\r\n            PairInfo[] memory\r\n        )\r\n    {\r\n        uint256 len = inTokens.length;\r\n        uint256 amountIn = startAmount;\r\n        bool isReserveIn;\r\n        PairInfo[] memory pairList = new PairInfo[](len - 1);\r\n\r\n\r\n        for (uint256 i = 0; i < len - 1; i++) {\r\n            IUniswapV2Factory factory = _factories[routerIds[i]];\r\n\r\n            IUniswapV2Pair pair = IUniswapV2Pair(factory.getPair(inTokens[i], inTokens[i + 1]));\r\n\r\n            (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\r\n\r\n            isReserveIn = pair.token0() == inTokens[i] ? true : false;\r\n\r\n            amountIn = UniswapV2Library.getAmountOut(\r\n                amountIn,\r\n                isReserveIn ? reserve0 : reserve1,\r\n                !isReserveIn ? reserve0 : reserve1\r\n            );\r\n\r\n            pairList[i] = PairInfo(\r\n                pair,\r\n                amountIn,\r\n                isReserveIn\r\n            );\r\n        }\r\n\r\n        uint256 profit = amountIn <= startAmount ? 0 : amountIn.sub(startAmount);\r\n        return (profit, pairList);\r\n    }\r\n\r\n    function run(\r\n        Root memory router\r\n    ) public onlyRunner discountCHI(router.chiAmount) {\r\n        (uint256 estimateProfit, PairInfo[] memory pairList)\r\n            = checkEstimatedProfit(router.routerIds, router.startAmount, router.inTokens);\r\n\r\n        if (estimateProfit < router.estimateProfit) {\r\n            return;\r\n        }\r\n\r\n        uint256 len = router.inTokens.length;\r\n        uint256 amountIn = router.startAmount;\r\n\r\n        for (uint256 i = 0; i < len - 1; i++) {\r\n            amountIn = _swapTokenToToken(\r\n                amountIn,\r\n                router.inTokens[i],\r\n                router.inTokens[i + 1],\r\n                pairList[i]\r\n            );\r\n        }\r\n        return;\r\n    }\r\n\r\n    function bulkRun(Root[] memory roots)\r\n        external\r\n        onlyRunner\r\n        returns (bool)\r\n    {\r\n        uint256 length = roots.length;\r\n\r\n        uint256 maxProfit = 0;\r\n        uint256 goalRoot = 0;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            Root memory root = roots[i];\r\n\r\n            (uint256 profit, ) = checkEstimatedProfit(\r\n                root.routerIds,\r\n                root.startAmount,\r\n                root.inTokens\r\n            );\r\n\r\n            if (profit > maxProfit) {\r\n                maxProfit = profit;\r\n                goalRoot = i;\r\n            }\r\n        }\r\n\r\n        if (maxProfit > 0) {\r\n            Root memory root = roots[goalRoot];\r\n            run(root);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _swapTokenToToken(\r\n        uint256 tokenInAmount,\r\n        address inToken,\r\n        address outToken,\r\n        PairInfo memory pairInfo\r\n    ) private returns (uint256 amountOut) {\r\n        uint256 oldTokenOutAmount = TokenInterface(outToken).balanceOf(address(this));\r\n\r\n        TokenInterface(inToken).safeTransfer(address(pairInfo.pair), tokenInAmount);\r\n        _swapSupportingFeeOnTransferTokens(\r\n            pairInfo\r\n        );\r\n        \r\n        uint256 newTokenOutAmount = TokenInterface(outToken).balanceOf(address(this));\r\n        amountOut = newTokenOutAmount.sub(oldTokenOutAmount);\r\n    }\r\n\r\n    function _swapSupportingFeeOnTransferTokens(\r\n        PairInfo memory pairInfo\r\n    ) internal virtual {\r\n        (uint256 amount0Out, uint256 amount1Out) =\r\n            pairInfo.isReserveIn\r\n                ? (uint256(0), pairInfo.outputAmount)\r\n                : (pairInfo.outputAmount, uint256(0));\r\n\r\n        pairInfo.pair.swap(amount0Out, amount1Out, address(this), new bytes(0));\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_factories\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_routers\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"runner\",\"type\":\"address\"}],\"name\":\"addRunner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8[]\",\"name\":\"routerIds\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"inTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimateProfit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chiAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct SwapBot.Root[]\",\"name\":\"roots\",\"type\":\"tuple[]\"}],\"name\":\"bulkRun\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"routerIds\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"inTokens\",\"type\":\"address[]\"}],\"name\":\"checkEstimatedProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isReserveIn\",\"type\":\"bool\"}],\"internalType\":\"struct SwapBot.PairInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"runner\",\"type\":\"address\"}],\"name\":\"checkRunner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chi\",\"outputs\":[{\"internalType\":\"contract IFreeFromUpTo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8[]\",\"name\":\"routerIds\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"inTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimateProfit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chiAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct SwapBot.Root\",\"name\":\"router\",\"type\":\"tuple\"}],\"name\":\"run\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"runnerLength\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDev\",\"type\":\"address\"}],\"name\":\"transferDevship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawProfit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"SwapBot","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://731a2d86ea8d2adba7011c9ddb20b907b77bae317354639d42cf60446ee02c91"}]}