{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `from` cannot be the zero address.\r\n      * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\ninterface IERC721Metadata is IERC721 {\r\n\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary Strings {\r\n    bytes16 private constant alphabet = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = alphabet[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n}\r\n\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping (uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping (address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping (uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC721).interfaceId\r\n            || interfaceId == type(IERC721Metadata).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0\r\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\r\n            : '';\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\r\n     * in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\n        private returns (bool)\r\n    {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    // solhint-disable-next-line no-inline-assembly\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\r\n}\r\n\r\n\r\ninterface LinkTokenInterface {\r\n\r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint256 remaining\r\n    );\r\n\r\n  function approve(\r\n    address spender,\r\n    uint256 value\r\n  )\r\n    external\r\n    returns (\r\n      bool success\r\n    );\r\n\r\n  function balanceOf(\r\n    address owner\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint256 balance\r\n    );\r\n\r\n  function decimals()\r\n    external\r\n    view\r\n    returns (\r\n      uint8 decimalPlaces\r\n    );\r\n\r\n  function decreaseApproval(\r\n    address spender,\r\n    uint256 addedValue\r\n  )\r\n    external\r\n    returns (\r\n      bool success\r\n    );\r\n\r\n  function increaseApproval(\r\n    address spender,\r\n    uint256 subtractedValue\r\n  ) external;\r\n\r\n  function name()\r\n    external\r\n    view\r\n    returns (\r\n      string memory tokenName\r\n    );\r\n\r\n  function symbol()\r\n    external\r\n    view\r\n    returns (\r\n      string memory tokenSymbol\r\n    );\r\n\r\n  function totalSupply()\r\n    external\r\n    view\r\n    returns (\r\n      uint256 totalTokensIssued\r\n    );\r\n\r\n  function transfer(\r\n    address to,\r\n    uint256 value\r\n  )\r\n    external\r\n    returns (\r\n      bool success\r\n    );\r\n\r\n  function transferAndCall(\r\n    address to,\r\n    uint256 value,\r\n    bytes calldata data\r\n  )\r\n    external\r\n    returns (\r\n      bool success\r\n    );\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    external\r\n    returns (\r\n      bool success\r\n    );\r\n\r\n}\r\n\r\ncontract VRFRequestIDBase {\r\n\r\n  /**\r\n   * @notice returns the seed which is actually input to the VRF coordinator\r\n   *\r\n   * @dev To prevent repetition of VRF output due to repetition of the\r\n   * @dev user-supplied seed, that seed is combined in a hash with the\r\n   * @dev user-specific nonce, and the address of the consuming contract. The\r\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\r\n   * @dev the final seed, but the nonce does protect against repetition in\r\n   * @dev requests which are included in a single block.\r\n   *\r\n   * @param _userSeed VRF seed input provided by user\r\n   * @param _requester Address of the requesting contract\r\n   * @param _nonce User-specific nonce at the time of the request\r\n   */\r\n  function makeVRFInputSeed(\r\n    bytes32 _keyHash,\r\n    uint256 _userSeed,\r\n    address _requester,\r\n    uint256 _nonce\r\n  )\r\n    internal\r\n    pure\r\n    returns (\r\n      uint256\r\n    )\r\n  {\r\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the id for this request\r\n   * @param _keyHash The serviceAgreement ID to be used for this request\r\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\r\n   * @return The id for this request\r\n   *\r\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\r\n   * @dev contract, but the one generated by makeVRFInputSeed\r\n   */\r\n  function makeRequestId(\r\n    bytes32 _keyHash,\r\n    uint256 _vRFInputSeed\r\n  )\r\n    internal\r\n    pure\r\n    returns (\r\n      bytes32\r\n    )\r\n  {\r\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\r\n  }\r\n}\r\n\r\nabstract contract VRFConsumerBase is VRFRequestIDBase {\r\n\r\n  /**\r\n   * @notice fulfillRandomness handles the VRF response. Your contract must\r\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\r\n   * @notice principles to keep in mind when implementing your fulfillRandomness\r\n   * @notice method.\r\n   *\r\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\r\n   * @dev signature, and will call it once it has verified the proof\r\n   * @dev associated with the randomness. (It is triggered via a call to\r\n   * @dev rawFulfillRandomness, below.)\r\n   *\r\n   * @param requestId The Id initially returned by requestRandomness\r\n   * @param randomness the VRF output\r\n   */\r\n  function fulfillRandomness(\r\n    bytes32 requestId,\r\n    uint256 randomness\r\n  )\r\n    internal\r\n    virtual;\r\n\r\n  /**\r\n   * @dev In order to keep backwards compatibility we have kept the user\r\n   * seed field around. We remove the use of it because given that the blockhash\r\n   * enters later, it overrides whatever randomness the used seed provides.\r\n   * Given that it adds no security, and can easily lead to misunderstandings,\r\n   * we have removed it from usage and can now provide a simpler API.\r\n   */\r\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\r\n\r\n  /**\r\n   * @notice requestRandomness initiates a request for VRF output given _seed\r\n   *\r\n   * @dev The fulfillRandomness method receives the output, once it's provided\r\n   * @dev by the Oracle, and verified by the vrfCoordinator.\r\n   *\r\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\r\n   * @dev the _fee must exceed the fee specified during registration of the\r\n   * @dev _keyHash.\r\n   *\r\n   * @dev The _seed parameter is vestigial, and is kept only for API\r\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\r\n   * @dev your own randomness, here, but it's not necessary because the VRF\r\n   * @dev oracle will mix the hash of the block containing your request into the\r\n   * @dev VRF seed it ultimately uses.\r\n   *\r\n   * @param _keyHash ID of public key against which randomness is generated\r\n   * @param _fee The amount of LINK to send with the request\r\n   *\r\n   * @return requestId unique ID for this request\r\n   *\r\n   * @dev The returned requestId can be used to distinguish responses to\r\n   * @dev concurrent requests. It is passed as the first argument to\r\n   * @dev fulfillRandomness.\r\n   */\r\n  function requestRandomness(\r\n    bytes32 _keyHash,\r\n    uint256 _fee\r\n  )\r\n    internal\r\n    returns (\r\n      bytes32 requestId\r\n    )\r\n  {\r\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\r\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\r\n    // the hash of the block containing this request to obtain the seed/input\r\n    // which is finally passed to the VRF cryptographic machinery.\r\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\r\n    // nonces[_keyHash] must stay in sync with\r\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\r\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\r\n    // This provides protection against the user repeating their input seed,\r\n    // which would result in a predictable/duplicate output, if multiple such\r\n    // requests appeared in the same block.\r\n    nonces[_keyHash] = nonces[_keyHash] + 1;\r\n    return makeRequestId(_keyHash, vRFSeed);\r\n  }\r\n\r\n  LinkTokenInterface immutable internal LINK;\r\n  address immutable private vrfCoordinator;\r\n\r\n  // Nonces for each VRF key from which randomness has been requested.\r\n  //\r\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\r\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\r\n\r\n  /**\r\n   * @param _vrfCoordinator address of VRFCoordinator contract\r\n   * @param _link address of LINK token contract\r\n   *\r\n   * @dev https://docs.chain.link/docs/link-token-contracts\r\n   */\r\n  constructor(\r\n    address _vrfCoordinator,\r\n    address _link\r\n  ) {\r\n    vrfCoordinator = _vrfCoordinator;\r\n    LINK = LinkTokenInterface(_link);\r\n  }\r\n\r\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\r\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\r\n  // the origin of the call\r\n  function rawFulfillRandomness(\r\n    bytes32 requestId,\r\n    uint256 randomness\r\n  )\r\n    external\r\n  {\r\n    require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\r\n    fulfillRandomness(requestId, randomness);\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n}\r\n\r\ncontract Administrative is Ownable {\r\n  using Counters for Counters.Counter;\r\n\r\n  address private _withdrawer;\r\n\r\n  string public uriBase      = \"https://i.nfinity.space/\";\r\n  string public uriPathQuilt = \"quilts/\";\r\n  string public uriPathPatch = \"patches/\";\r\n\r\n  Counters.Counter public version;\r\n\r\n  uint256 public staticPatchMintPrice  = .025 ether;\r\n  uint256 public dynamicPatchMintPrice = .001 ether;\r\n\r\n  uint256 public staticPatchDrawPrice = .001 ether;\r\n\r\n  bool public patchMintingEnabled = true;\r\n  bool public patchDrawingEnabled = true;\r\n\r\n  // The first quilt raffle happens at the 16th Patch (aka Patch #15),\r\n  uint256 public quiltGiftIndex = 16;\r\n\r\n  bool public secureRandom = false;\r\n  bool public ignoreLinkBalance = false;\r\n\r\n  bytes32 internal _vrfKeyHash = 0;\r\n  uint256 internal _vrfFee = 0;\r\n\r\n  constructor(bytes32 newVrfKeyHash, uint256 newVrfFee) {\r\n    _vrfKeyHash = newVrfKeyHash;\r\n    _vrfFee = newVrfFee;\r\n    _withdrawer = _msgSender();\r\n  }\r\n\r\n  /*\r\n   * Admin functions\r\n   */\r\n\r\n  function adminUpdateDynamicPatchMintPrice(uint256 price) external onlyOwner {\r\n    dynamicPatchMintPrice = price;\r\n  }\r\n\r\n  function adminUpdateStaticPatchMintPrice(uint256 price) external onlyOwner {\r\n    staticPatchMintPrice = price;\r\n  }\r\n\r\n  function adminUpdateStaticPatchDrawPrice(uint256 price) external onlyOwner {\r\n    staticPatchDrawPrice = price;\r\n  }\r\n\r\n  function adminTogglePatchMinting(bool enabled) external onlyOwner {\r\n    patchMintingEnabled = enabled;\r\n  }\r\n\r\n  function adminTogglePatchDrawing(bool enabled) external onlyOwner {\r\n    patchDrawingEnabled = enabled;\r\n  }\r\n\r\n  function adminUpdateUris(string memory base, string memory pathQuilt, string memory pathPatch)\r\n  external onlyOwner {\r\n    uriBase         = base;\r\n    uriPathQuilt    = pathQuilt;\r\n    uriPathPatch    = pathPatch;\r\n  }\r\n\r\n  function adminUpdateSecureRandom(bool enabled) external onlyOwner {\r\n    secureRandom = enabled;\r\n  }\r\n\r\n  function adminUpdateIgnoreLinkBalance(bool ignore) external onlyOwner {\r\n    ignoreLinkBalance = ignore;\r\n  }\r\n\r\n  function adminUpdateQuiltGiftIndex(uint256 index) external onlyOwner {\r\n    quiltGiftIndex = index;\r\n  }\r\n\r\n  function adminUpdateVrfFee(uint256 fee) external onlyOwner {\r\n    _vrfFee = fee;\r\n  }\r\n\r\n  function adminUpdateVrfKeyHash(bytes32 keyHash) external onlyOwner {\r\n    _vrfKeyHash = keyHash;\r\n  }\r\n\r\n  function adminUpdateWithdrawer(address withdrawer) external onlyOwner {\r\n    _withdrawer = withdrawer;\r\n  }\r\n\r\n  /*\r\n   * Funds\r\n   */\r\n\r\n  function getBalance() public view returns(uint256) {\r\n    return address(this).balance;\r\n  }\r\n\r\n  function withdraw() external {\r\n    require(_withdrawer == msg.sender, \"not_withdrawer\");\r\n    payable(msg.sender).transfer(getBalance());\r\n  }\r\n\r\n  // solhint-disable-next-line no-empty-blocks\r\n  receive() external payable { }\r\n  fallback() external payable { }\r\n}\r\n\r\n\r\nlibrary Data {\r\n  enum TokenType {\r\n    NULL, QUILT, PATCH\r\n  }\r\n\r\n  struct DefinedIndex {\r\n    uint256 index;\r\n    bool defined;\r\n  }\r\n\r\n  function index(uint256 value) internal pure returns(DefinedIndex memory) {\r\n    return DefinedIndex(value, true);\r\n  }\r\n}\r\n\r\n\r\n\r\nlibrary Cursors {\r\n  struct Cursor {\r\n    uint256 segMax;\r\n    uint256 segCur;\r\n    int256  dirX;\r\n    int256  dirY;\r\n    int256  headX;\r\n    int256  headY;\r\n  }\r\n\r\n  function initialCursor() internal pure returns(Cursor memory) {\r\n    return Cursor({\r\n      segMax: 1,\r\n      segCur: 0,\r\n      dirX:   1,\r\n      dirY:   0,\r\n      headX:  0,\r\n      headY:  0\r\n    });\r\n  }\r\n\r\n  /// Move the Cursor head outward in a spiral matrix pattern\r\n  function moveHead(Cursor storage cursor) internal {\r\n    cursor.headX += cursor.dirX;\r\n    cursor.headY += cursor.dirY;\r\n\r\n    cursor.segCur++;\r\n\r\n    if (cursor.segCur == cursor.segMax) {\r\n      cursor.segCur = 0;\r\n\r\n      int256 buffer = cursor.dirX;\r\n      cursor.dirX = cursor.dirY;\r\n      cursor.dirY = -buffer;\r\n\r\n      if (cursor.dirY == 0) {\r\n        cursor.segMax++;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\nlibrary Helpers {\r\n  function tokenURI(Nfinity instance, uint256 tokenId, uint256 version) internal view returns (string memory) {\r\n    require(instance.tokenExists(tokenId), \"token_not_found\");\r\n\r\n    uint256 index = 0;\r\n    Data.TokenType tokenType = instance.tokenIdToType(tokenId);\r\n    string memory path;\r\n\r\n    if (tokenType == Data.TokenType.QUILT) {\r\n      (index, ) = instance.tokenIdToQuiltIndex(tokenId);\r\n      path = instance.uriPathQuilt();\r\n    } else if (tokenType == Data.TokenType.PATCH) {\r\n      (index,) = instance.tokenIdToPatchIndex(tokenId);\r\n      path = instance.uriPathPatch();\r\n    } else {\r\n      revert(\"token_type_not_found\");\r\n    }\r\n\r\n    return string(abi.encodePacked(instance.uriBase(), path, Strings.toString(index), \"/meta.json?version=\", Strings.toString(version)));\r\n  }\r\n}\r\n\r\n\r\n\r\nlibrary Quilts {\r\n  using Patches for Patches.Patch;\r\n\r\n  struct Quilt {\r\n    uint256 id;\r\n    uint256 index;\r\n    uint256 createdAt;\r\n    address winner;\r\n    uint256 blockNum;\r\n  }\r\n\r\n  /* static */\r\n\r\n  function getQuiltIdsByOwner(Nfinity instance, address owner) internal view returns(uint256[] memory quiltIds) {\r\n    uint quiltCount = instance.getQuiltCount();\r\n    uint ownedCount = 0;\r\n\r\n    for (uint i = 0; i < quiltCount; i++) {\r\n      if (instance.ownerOf(instance.getQuiltIdByIndex(i)) == owner) {\r\n        ownedCount++;\r\n      }\r\n    }\r\n\r\n    quiltIds = new uint[](ownedCount);\r\n\r\n    uint counter = 0;\r\n    for (uint i = 0; i < quiltCount; i++) {\r\n      uint id = instance.getQuiltIdByIndex(i);\r\n      if (instance.ownerOf(id) == owner) {\r\n        quiltIds[counter] = id;\r\n        counter++;\r\n      }\r\n    }\r\n\r\n    return quiltIds;\r\n  }\r\n\r\n  function create(address owner, uint256 id, Quilt[] storage allQuilts, mapping (uint256 => Data.DefinedIndex) storage idToIndexMap) internal returns(Quilt memory quilt) {\r\n    uint index = allQuilts.length;\r\n\r\n    quilt = Quilt({\r\n      id:        id,\r\n      index:     index,\r\n      createdAt: block.timestamp, // solhint-disable-line not-rely-on-time\r\n      winner:    owner,\r\n      blockNum:  0\r\n    });\r\n\r\n    allQuilts.push(quilt);\r\n\r\n    idToIndexMap[id] = Data.index(index);\r\n\r\n    return quilt;\r\n  }\r\n\r\n  function freeze(uint256 id, uint256 blockNum, mapping (uint256 => Data.DefinedIndex) storage map, Quilt[] storage quilts) internal {\r\n    Data.DefinedIndex memory index = map[id];\r\n    require(index.defined, \"quilt_not_found\");\r\n\r\n    Quilts.Quilt storage quilt = quilts[index.index];\r\n    quilt.blockNum = blockNum;\r\n  }\r\n}\r\n\r\n\r\n\r\nlibrary Patches {\r\n  using Cursors for Cursors.Cursor;\r\n  using Raffles for Raffles.Pool;\r\n\r\n  uint public constant PATCH_PIXEL_COUNT = 32 * 32;\r\n\r\n  // uint24[256] internal _emptyPatchImage; // = [ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 ];\r\n\r\n  struct Patch {\r\n    uint256 id;\r\n    uint256 index;\r\n    int256 x;\r\n    int256 y;\r\n    uint256 createdAt;\r\n    address creator;\r\n    uint256 adminFlags;\r\n    uint256 userFlags;\r\n    uint256 lastBlockDrawn;\r\n  }\r\n\r\n  event PatchDrawn(address indexed owner, uint256 indexed patchId, Patches.Patch patch, uint24[PATCH_PIXEL_COUNT] pixels);\r\n\r\n  /* static */\r\n\r\n  function create(address owner, uint256 id, Cursors.Cursor storage cursor, Patch[] storage allPatches, mapping (uint256 => Data.DefinedIndex) storage idToIndexMap) internal returns(Patch memory patch) {\r\n    uint index = allPatches.length;\r\n\r\n    patch = Patch({\r\n      id:             id,\r\n      index:          index,\r\n      x:              cursor.headX,\r\n      y:              cursor.headY,\r\n      createdAt:      block.timestamp, // solhint-disable-line not-rely-on-time\r\n      creator:        owner,\r\n      adminFlags:     0,\r\n      userFlags:      0,\r\n      lastBlockDrawn: 0\r\n    });\r\n\r\n    allPatches.push(patch);\r\n\r\n    cursor.moveHead();\r\n\r\n    idToIndexMap[id] = Data.index(index);\r\n\r\n    return patch;\r\n  }\r\n\r\n  function getPatchIdsByOwner(Nfinity instance, address owner) internal view returns(uint256[] memory patchIds) {\r\n    uint patchCount = instance.getPatchCount();\r\n    uint ownedCount = 0;\r\n\r\n    for (uint i = 0; i < patchCount; i++) {\r\n      if (instance.ownerOf(instance.getPatchIdByIndex(i)) == owner) {\r\n        ownedCount++;\r\n      }\r\n    }\r\n\r\n    patchIds = new uint[](ownedCount);\r\n\r\n    uint counter = 0;\r\n    for (uint i = 0; i < patchCount; i++) {\r\n      uint id = instance.getPatchIdByIndex(i);\r\n      if (instance.ownerOf(id) == owner) {\r\n        patchIds[counter] = id;\r\n        counter++;\r\n      }\r\n    }\r\n\r\n    return patchIds;\r\n  }\r\n\r\n  function draw(uint256 patchId, uint24[PATCH_PIXEL_COUNT] memory pixels, uint256 price,\r\n                mapping (uint256 => Data.DefinedIndex) storage map, Patch[] storage patches,\r\n                Raffles.Pool storage rafflePool,\r\n                address ignoreAddress) internal\r\n  {\r\n    require(msg.value >= price, \"patch_draw_fee_not_met\");\r\n\r\n    Data.DefinedIndex memory index = map[patchId];\r\n    require(index.defined, \"patch_not_found\");\r\n\r\n    Patch storage patch = patches[index.index];\r\n    patch.lastBlockDrawn = block.number;\r\n\r\n    // Contract owner can't participate in raffles. Neither can the withdrawer.\r\n    if (msg.sender != ignoreAddress) {\r\n      rafflePool.add(patch.id);\r\n    }\r\n\r\n    emit PatchDrawn(msg.sender, patchId, patch, pixels);\r\n  }\r\n\r\n  function setUserFlags(uint256 patchId, uint256 newUserFlags, mapping (uint256 => Data.DefinedIndex) storage map,\r\n                        Patch[] storage patches)  internal\r\n  {\r\n    Data.DefinedIndex memory index = map[patchId];\r\n    require(index.defined, \"patch_not_found\");\r\n\r\n    Patch storage patch = patches[index.index];\r\n    patch.userFlags = newUserFlags;\r\n  }\r\n\r\n  function setAdminFlags(uint256 patchId, uint256 newAdminFlags, mapping (uint256 => Data.DefinedIndex) storage map,\r\n                         Patch[] storage patches) internal\r\n  {\r\n    Data.DefinedIndex memory index = map[patchId];\r\n    require(index.defined, \"patch_not_found\");\r\n\r\n    Patch storage patch = patches[index.index];\r\n    patch.adminFlags = newAdminFlags;\r\n  }\r\n}\r\n\r\n\r\n\r\nabstract contract Rng is VRFConsumerBase, Administrative {\r\n  mapping(bytes32 => address) public rngRequestIdToSender;\r\n\r\n  function rngReceive(address sender, uint256 randomNumber) internal virtual;\r\n\r\n  function hasEnoughLink() public view returns(bool) {\r\n    if (ignoreLinkBalance) {\r\n      return true;\r\n    }\r\n\r\n    return LINK.balanceOf(address(this)) > _vrfFee;\r\n  }\r\n\r\n  function rngGenerate() internal {\r\n    if (secureRandom && hasEnoughLink()) {\r\n      bytes32 requestId = requestRandomness(_vrfKeyHash, _vrfFee);\r\n      rngRequestIdToSender[requestId] = msg.sender;\r\n    } else {\r\n      requestRandomnessInsecure();\r\n    }\r\n  }\r\n\r\n  function requestRandomnessInsecure() private {\r\n    uint256 randomNumber = uint256(\r\n      keccak256(\r\n        abi.encode(\r\n          blockhash(block.number - 1),\r\n          block.number,\r\n          block.difficulty,\r\n          msg.sender\r\n        )\r\n      )\r\n    );\r\n\r\n    rngReceive(msg.sender, randomNumber);\r\n  }\r\n\r\n  function fulfillRandomness(bytes32 requestId, uint256 randomNumber) internal override {\r\n    address sender = rngRequestIdToSender[requestId];\r\n    if (sender == address(0)) return;\r\n\r\n    rngReceive(sender, randomNumber);\r\n  }\r\n}\r\n\r\n\r\nlibrary Raffles {\r\n  struct Pool {\r\n    bool ignore;\r\n    mapping(uint256 => bool) _map;\r\n    uint256[] _list;\r\n  }\r\n\r\n  function add(Pool storage pool, uint256 value) internal {\r\n    if (pool._map[value] == false) {\r\n      pool._map[value] = true;\r\n      pool._list.push(value);\r\n    }\r\n  }\r\n\r\n  function getWinner(Pool storage pool, uint256 randomNumber) internal view returns(bool found, uint256 winner) {\r\n    // Choose from a list of drawn patches, plus 1 for the minter. They get entered\r\n    // into the raffle too since they haven't had an opportunity to Draw yet.\r\n    uint256 winnerPatchIndex = randomNumber % (pool._list.length + 1);\r\n\r\n    if (winnerPatchIndex == pool._list.length) {\r\n      return (false, 0);\r\n    } else {\r\n      return (true, pool._list[winnerPatchIndex]);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract Nfinity is Administrative, Rng, ERC721 {\r\n  using Counters for Counters.Counter;\r\n  using Cursors for Cursors.Cursor;\r\n  using Patches for Patches.Patch;\r\n  using Quilts for Quilts.Quilt;\r\n  using Raffles for Raffles.Pool;\r\n\r\n  uint public constant PATCH_PIXEL_COUNT = 32 * 32;\r\n  string public constant TOKEN_NAME   = \"Nfinity\";\r\n  string public constant TOKEN_SYMBOL = \"NFI\";\r\n\r\n  Counters.Counter public tokenIds;\r\n  Raffles.Pool public rafflePool;\r\n  Cursors.Cursor public cursor = Cursors.initialCursor();\r\n\r\n  Patches.Patch[] public patches;\r\n  Quilts.Quilt[] public quilts;\r\n\r\n  mapping (uint256 => Data.TokenType) public tokenIdToType;\r\n\r\n  mapping (uint256 => Data.DefinedIndex) public tokenIdToPatchIndex;\r\n  mapping (uint256 => Data.DefinedIndex) public tokenIdToQuiltIndex;\r\n\r\n  event NewQuiltMinted(address indexed owner, uint256 indexed quiltId, Quilts.Quilt quilt);\r\n  event NewPatchMinted(address indexed owner, uint256 indexed patchId, Patches.Patch patch);\r\n  event PatchDrawn(address indexed owner, uint256 indexed patchId, Patches.Patch patch, uint24[PATCH_PIXEL_COUNT] pixels);\r\n\r\n  constructor(address vrfCoordinator, address vrfLink, bytes32 vrfKeyHash, uint256 vrfFee)\r\n    ERC721(TOKEN_NAME, TOKEN_SYMBOL)\r\n    VRFConsumerBase(vrfCoordinator, vrfLink)\r\n    Administrative(vrfKeyHash, vrfFee)\r\n  {\r\n    // Secure the first 3 Quilt NFTs for Jimmie\r\n    // This is done manually so that the genesis Quilt's tokenId is 0\r\n    for (uint i = 0; i < 3; i++) {\r\n      _createQuilt(msg.sender);\r\n    }\r\n\r\n    // Secure the first 12 Patch NFTs for Jimmie\r\n    for (uint i = 0; i < 12; i++) {\r\n      _createPatchNoRaffle(msg.sender);\r\n    }\r\n  }\r\n\r\n  function _createToken(Data.TokenType tokenType, address recipient) private returns(uint256 tokenId) {\r\n    tokenId = tokenIds.current();\r\n    _mint(recipient, tokenId);\r\n    tokenIds.increment();\r\n    version.increment();\r\n\r\n    tokenIdToType[tokenId] = tokenType;\r\n\r\n    return tokenId;\r\n  }\r\n\r\n  function tokenExists(uint256 tokenId) public view returns(bool) {\r\n    return _exists(tokenId);\r\n  }\r\n\r\n  function tokenURI(uint256 tokenId) public view override returns(string memory) {\r\n    return Helpers.tokenURI(this, tokenId, version.current());\r\n  }\r\n\r\n  /*\r\n   * Quilts\r\n   */\r\n\r\n  function _createQuilt(address owner) private returns(Quilts.Quilt memory quilt) {\r\n    uint256 quiltId = _createToken(Data.TokenType.QUILT, owner);\r\n    quilt = Quilts.create(owner, quiltId, quilts, tokenIdToQuiltIndex);\r\n    emit NewQuiltMinted(owner, quiltId, quilt);\r\n    return quilt;\r\n  }\r\n\r\n  function getQuiltCount() public view returns(uint) {\r\n    return quilts.length;\r\n  }\r\n\r\n  function getQuiltById(uint256 quiltId) public view returns(Quilts.Quilt memory) {\r\n    Data.DefinedIndex memory quiltIndex = tokenIdToQuiltIndex[quiltId];\r\n    require(quiltIndex.defined, \"quilt_not_found\");\r\n\r\n    return quilts[quiltIndex.index];\r\n  }\r\n\r\n  function getQuiltIdByIndex(uint256 index) public view returns(uint256) {\r\n    return quilts[index].id;\r\n  }\r\n\r\n  function getQuiltIdsByOwner(address owner) external view returns(uint256[] memory quiltIds) {\r\n    return Quilts.getQuiltIdsByOwner(this, owner);\r\n  }\r\n\r\n  function freezeQuilt(uint256 id, uint256 blockNum) external {\r\n    require(ownerOf(id) == msg.sender, \"quilt_incorrect_owner\");\r\n    Quilts.freeze(id, blockNum, tokenIdToQuiltIndex, quilts);\r\n  }\r\n\r\n  /*\r\n   * Patches\r\n   */\r\n\r\n  function _createPatchNoRaffle(address owner) private returns(Patches.Patch memory patch) {\r\n    uint256 patchId = _createToken(Data.TokenType.PATCH, owner);\r\n    patch = Patches.create(owner, patchId, cursor, patches, tokenIdToPatchIndex);\r\n    emit NewPatchMinted(owner, patchId, patch);\r\n\r\n    return patch;\r\n  }\r\n\r\n  function _createPatch(address owner) private returns(Patches.Patch memory patch) {\r\n    patch = _createPatchNoRaffle(owner);\r\n    _startRaffleIfNeeded();\r\n    return patch;\r\n  }\r\n\r\n  function getPatchById(uint256 id) public view returns(Patches.Patch memory) {\r\n    Data.DefinedIndex memory patchIndex = tokenIdToPatchIndex[id];\r\n    require(patchIndex.defined, \"patch_not_found\");\r\n\r\n    return patches[patchIndex.index];\r\n  }\r\n\r\n  function getPatchIdByIndex(uint256 index) public view returns(uint256) {\r\n    return patches[index].id;\r\n  }\r\n\r\n  function getPatchCount() public view returns(uint) {\r\n    return patches.length;\r\n  }\r\n\r\n  function getMintPatchPrice() public view returns(uint) {\r\n    return staticPatchMintPrice + dynamicPatchMintPrice * cursor.segMax;\r\n  }\r\n\r\n  function mintPatch() external payable returns(Patches.Patch memory) {\r\n    require(patchMintingEnabled, \"patch_minting_disabled\");\r\n    require(msg.value >= getMintPatchPrice(), \"patch_mint_fee_not_met\");\r\n    return _createPatch(msg.sender);\r\n  }\r\n\r\n  function draw(uint256 patchId, uint24[PATCH_PIXEL_COUNT] memory pixels) external payable {\r\n    require(patchDrawingEnabled, \"patch_drawing_disabled\");\r\n    require(ownerOf(patchId) == msg.sender, \"patch_incorrect_owner\");\r\n    address owner = owner();\r\n\r\n    Patches.draw({\r\n      patchId:        patchId,\r\n      pixels:         pixels,\r\n      price:          staticPatchDrawPrice,\r\n      map:            tokenIdToPatchIndex,\r\n      patches:        patches,\r\n      rafflePool:     rafflePool,\r\n      ignoreAddress:  owner\r\n    });\r\n\r\n    version.increment();\r\n  }\r\n\r\n  function getPatchIdsByOwner(address owner) external view returns(uint256[] memory patchIds) {\r\n    return Patches.getPatchIdsByOwner(this, owner);\r\n  }\r\n\r\n  function setPatchUserFlags(uint256 patchId, uint256 newUserFlags) external payable {\r\n    require(ownerOf(patchId) == msg.sender, \"patch_incorrect_owner\");\r\n    Patches.setUserFlags(patchId, newUserFlags, tokenIdToPatchIndex, patches);\r\n  }\r\n\r\n  function adminSetPatchAdminFlags(uint256 patchId, uint256 newAdminFlags) external onlyOwner {\r\n    Patches.setAdminFlags(patchId, newAdminFlags, tokenIdToPatchIndex, patches);\r\n  }\r\n\r\n  /*\r\n   * Raffle\r\n   */\r\n\r\n  function _startRaffleIfNeeded() private {\r\n    if (patches.length == quiltGiftIndex) {\r\n      rngGenerate();\r\n      quiltGiftIndex *= 2;\r\n    }\r\n  }\r\n\r\n  function rngReceive(address sender, uint256 randomNumber) internal virtual override {\r\n    (bool found, uint256 winningPatchId) = rafflePool.getWinner(randomNumber);\r\n    address winner = found ? ownerOf(winningPatchId) : sender;\r\n\r\n    _createQuilt(winner);\r\n\r\n  }\r\n\r\n  function getRaffleParticipants() external view returns(uint256[] memory) {\r\n    return rafflePool._list;\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vrfLink\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"vrfKeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"vrfFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"patchId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"adminFlags\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userFlags\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBlockDrawn\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Patches.Patch\",\"name\":\"patch\",\"type\":\"tuple\"}],\"name\":\"NewPatchMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"quiltId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNum\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Quilts.Quilt\",\"name\":\"quilt\",\"type\":\"tuple\"}],\"name\":\"NewQuiltMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"patchId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"adminFlags\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userFlags\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBlockDrawn\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Patches.Patch\",\"name\":\"patch\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint24[1024]\",\"name\":\"pixels\",\"type\":\"uint24[1024]\"}],\"name\":\"PatchDrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"PATCH_PIXEL_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_SYMBOL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"patchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newAdminFlags\",\"type\":\"uint256\"}],\"name\":\"adminSetPatchAdminFlags\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"adminTogglePatchDrawing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"adminTogglePatchMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"adminUpdateDynamicPatchMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"ignore\",\"type\":\"bool\"}],\"name\":\"adminUpdateIgnoreLinkBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"adminUpdateQuiltGiftIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"adminUpdateSecureRandom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"adminUpdateStaticPatchDrawPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"adminUpdateStaticPatchMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"base\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pathQuilt\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pathPatch\",\"type\":\"string\"}],\"name\":\"adminUpdateUris\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"adminUpdateVrfFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"name\":\"adminUpdateVrfKeyHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"}],\"name\":\"adminUpdateWithdrawer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cursor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"segMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"segCur\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"dirX\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"dirY\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"headX\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"headY\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"patchId\",\"type\":\"uint256\"},{\"internalType\":\"uint24[1024]\",\"name\":\"pixels\",\"type\":\"uint24[1024]\"}],\"name\":\"draw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dynamicPatchMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNum\",\"type\":\"uint256\"}],\"name\":\"freezeQuilt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintPatchPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPatchById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"adminFlags\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userFlags\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBlockDrawn\",\"type\":\"uint256\"}],\"internalType\":\"struct Patches.Patch\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPatchCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPatchIdByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getPatchIdsByOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"patchIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quiltId\",\"type\":\"uint256\"}],\"name\":\"getQuiltById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNum\",\"type\":\"uint256\"}],\"internalType\":\"struct Quilts.Quilt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQuiltCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getQuiltIdByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getQuiltIdsByOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"quiltIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleParticipants\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasEnoughLink\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ignoreLinkBalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPatch\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"adminFlags\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userFlags\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBlockDrawn\",\"type\":\"uint256\"}],\"internalType\":\"struct Patches.Patch\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"patchDrawingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"patchMintingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"patches\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"adminFlags\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userFlags\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBlockDrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quiltGiftIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"quilts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rafflePool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ignore\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"rngRequestIdToSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secureRandom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"patchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newUserFlags\",\"type\":\"uint256\"}],\"name\":\"setPatchUserFlags\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staticPatchDrawPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staticPatchMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToPatchIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"defined\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToQuiltIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"defined\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToType\",\"outputs\":[{\"internalType\":\"enum Data.TokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uriBase\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uriPathPatch\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uriPathQuilt\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Nfinity","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"000000000000000000000000f0d54349addcf704f77ae15b96510dea15cb7952000000000000000000000000514910771af9ca656af840dff83e8264ecf986caaa77729d3466ca35ae8d28b3bbac7cc36a5031efdc430821c02bc31a238af4450000000000000000000000000000000000000000000000001bc16d674ec80000","EVMVersion":"byzantium","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8c850755b57b763ccba9ed11f62d9eb2419c14ae68e44d584c3d4b6f8c4ea45d"}]}