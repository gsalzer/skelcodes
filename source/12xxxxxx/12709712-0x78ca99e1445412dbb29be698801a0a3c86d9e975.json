{"status":"1","message":"OK","result":[{"SourceCode":"{\"ownable.sol\":{\"content\":\"pragma solidity \\u003e=0.4.16 \\u003c0.6.0;\\n\\n/**\\n* @title Ownable\\n* @dev The Ownable contract has an owner address, and provides basic authorization control\\n* functions, this simplifies the implementation of \\\"user permissions\\\".\\n*/\\ncontract Ownable {\\n  address private _owner;\\n\\n  event OwnershipTransferred(\\n    address indexed previousOwner,\\n    address indexed newOwner\\n  );\\n\\n  /**\\n  * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n  * account.\\n  */\\n  constructor() internal {\\n    _owner = msg.sender;\\n    emit OwnershipTransferred(address(0), _owner);\\n  }\\n\\n  /**\\n  * @return the address of the owner.\\n  */\\n  function owner() public view returns(address) {\\n    return _owner;\\n  }\\n\\n  /**\\n  * @dev Throws if called by any account other than the owner.\\n  */\\n  modifier onlyOwner() {\\n    require(isOwner());\\n    _;\\n  }\\n\\n  /**\\n  * @return true if `msg.sender` is the owner of the contract.\\n  */\\n  function isOwner() public view returns(bool) {\\n    return msg.sender == _owner;\\n  }\\n\\n  /**\\n  * @dev Allows the current owner to relinquish control of the contract.\\n  * @notice Renouncing to ownership will leave the contract without an owner.\\n  * It will not be possible to call the functions with the `onlyOwner`\\n  * modifier anymore.\\n  */\\n  function renounceOwnership() public onlyOwner {\\n    emit OwnershipTransferred(_owner, address(0));\\n    _owner = address(0);\\n  }\\n\\n  /**\\n  * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n  * @param newOwner The address to transfer ownership to.\\n  */\\n  function transferOwnership(address newOwner) public onlyOwner {\\n    _transferOwnership(newOwner);\\n  }\\n\\n  /**\\n  * @dev Transfers control of the contract to a newOwner.\\n  * @param newOwner The address to transfer ownership to.\\n  */\\n  function _transferOwnership(address newOwner) internal {\\n    require(newOwner != address(0));\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n  }\\n}\\n\"},\"safemath.sol\":{\"content\":\"pragma solidity \\u003e=0.4.16 \\u003c0.6.0;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n  /**\\n  * @dev Multiplies two numbers, throws on overflow.\\n  */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n    uint256 c = a * b;\\n    assert(c / a == b);\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Integer division of two numbers, truncating the quotient.\\n  */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n  */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    assert(b \\u003c= a);\\n    return a - b;\\n  }\\n\\n  /**\\n  * @dev Adds two numbers, throws on overflow.\\n  */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    assert(c \\u003e= a);\\n    return c;\\n  }\\n}\\n\\n/**\\n * @title SafeMath32\\n * @dev SafeMath library implemented for uint32\\n */\\nlibrary SafeMath32 {\\n\\n  function mul(uint32 a, uint32 b) internal pure returns (uint32) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n    uint32 c = a * b;\\n    assert(c / a == b);\\n    return c;\\n  }\\n\\n  function div(uint32 a, uint32 b) internal pure returns (uint32) {\\n    // assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\n    uint32 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n    return c;\\n  }\\n\\n  function sub(uint32 a, uint32 b) internal pure returns (uint32) {\\n    assert(b \\u003c= a);\\n    return a - b;\\n  }\\n\\n  function add(uint32 a, uint32 b) internal pure returns (uint32) {\\n    uint32 c = a + b;\\n    assert(c \\u003e= a);\\n    return c;\\n  }\\n}\\n\\n/**\\n * @title SafeMath16\\n * @dev SafeMath library implemented for uint16\\n */\\nlibrary SafeMath16 {\\n\\n  function mul(uint16 a, uint16 b) internal pure returns (uint16) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n    uint16 c = a * b;\\n    assert(c / a == b);\\n    return c;\\n  }\\n\\n  function div(uint16 a, uint16 b) internal pure returns (uint16) {\\n    // assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\n    uint16 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n    return c;\\n  }\\n\\n  function sub(uint16 a, uint16 b) internal pure returns (uint16) {\\n    assert(b \\u003c= a);\\n    return a - b;\\n  }\\n\\n  function add(uint16 a, uint16 b) internal pure returns (uint16) {\\n    uint16 c = a + b;\\n    assert(c \\u003e= a);\\n    return c;\\n  }\\n}\\n\"},\"TokenSales.sol\":{\"content\":\"pragma solidity \\u003e=0.4.25 \\u003c0.6.0;\\n\\nimport \\\"./ownable.sol\\\";\\nimport \\\"./safemath.sol\\\";\\n\\n//@title creates sales (ICOs) for ERC-20 tokens created on contract 0x0c199144D2952294daDBE14ea2D01155eE921232 only\\n//@R^3\\n//@notice create token sales for ERC-20 tokens\\n\\n//@dev sets up interface with ERC-20 token contract\\ncontract ERCInterface {\\n  function transfer(address to, uint256 value) public returns (bool);\\n  function totalSupply() public view returns (uint256);\\n   function balanceOf(address who) public view returns (uint256);\\n   function owner() public view returns(address);\\n   function decimals() public view returns (uint256);\\n   function creator() public view returns(address);\\n}\\n\\n//@dev token sale factory creates sales for ERC-20 tokens\\ncontract TokenSaleFactory is Ownable{\\n    //@logs all depoloyed sales\\n    address[] public deployedSales;\\n    TokenSales public newTokenSale;\\n    //@allows checking of which sales are associated with a specific address\\n    mapping (address =\\u003e address) public mySales;\\n\\n\\n    //@dev fee for generating Sale\\n    uint public tokenFee = 0.01 ether;\\n    //@dev set token fee (owner only)\\n    function setTokenFee(uint _fee) external onlyOwner {\\n      tokenFee = _fee;\\n    }\\n\\n  ERCInterface tokenContract;\\n\\n    //@function that creates sale\\n    function createTokenSale(address _tokenAddress) external payable returns (TokenSales) {\\n      tokenContract = ERCInterface(_tokenAddress);\\n       require(tokenContract.creator() == msg.sender);\\n        require(msg.value == tokenFee);\\n        newTokenSale = new TokenSales(msg.sender, _tokenAddress);\\n        deployedSales.push(address(newTokenSale));\\n        mySales[address(newTokenSale)] = msg.sender;\\n        return(newTokenSale);\\n    }\\n\\n    //@retreives all deployed sales\\n    function getDeployedSales() public view returns (address[] memory) {\\n        return deployedSales;\\n    }\\n\\n    //@allows owner to withdraw fees\\n    function withdraw() external onlyOwner {\\n      address _owner = address(uint160(owner()));\\n      _owner.transfer(address(this).balance);\\n      }\\n}\\n\\n//@ sets structure for token sale\\ncontract TokenSales is Ownable {\\n\\n    constructor (address _creator, address _tokenAddress) public {\\n        tokenOwner = _creator;\\n        tokenAddress = _tokenAddress;\\n         tokenContract = ERCInterface(_tokenAddress);\\n\\n    }\\n    using SafeMath for uint256;\\n  using SafeMath32 for uint32;\\n  using SafeMath16 for uint16;\\n\\n    bool saleActive = false;\\n      uint256 public tokenPrice;\\n      uint256 public tokensSold;\\n      address public tokenOwner;\\n        address public tokenAddress;\\n\\n        event Sell(address _buyer, uint256 _amount);\\n\\n\\n  ERCInterface tokenContract;\\n\\n   modifier onlyTokenOwner() {\\n        require(msg.sender == tokenOwner);\\n        _;\\n    }\\n\\n    //@dev this function allows purchase of ERC-20 tokens\\n      function buyTokens(uint256 _numberOfTokens) external payable {\\n        require(msg.value == _numberOfTokens.mul(tokenPrice));\\n        uint256 numberOfTokens = _numberOfTokens.mul(10**(tokenContract.decimals()));\\n       //@mul only to prevent overflow\\n        require(tokenContract.totalSupply() \\u003e= numberOfTokens);\\n        require(saleActive == true);\\n        tokenContract.transfer(msg.sender, numberOfTokens);\\n        tokensSold += numberOfTokens;\\n        emit Sell(msg.sender, _numberOfTokens);\\n      }\\n\\n        //@dev function ends sale and send remaining tokens to sale creator\\n      function endSale() public onlyTokenOwner {\\n        tokenContract.transfer(msg.sender, (tokenContract.balanceOf(address(this))));\\n        saleActive = false;\\n      }\\n\\n        //@dev starts sale and initiates sale price\\n       function startSale(uint _tokenPrice, uint _multiplier) public onlyTokenOwner {\\n        //@dev e.g. multiplier 1 = wei, 9 = gwei, 18 = ether\\n        tokenPrice = _tokenPrice.mul(10**_multiplier);\\n        saleActive = true;\\n      }\\n\\n    //@dev checks whether sale is active\\n    //@returns true or false\\n      function saleStatus() public view returns (bool) {\\n        return saleActive;\\n      }\\n\\n    //@dev allows sale creator to withdraw fees from token sale\\n      function withdraw() external onlyTokenOwner {\\n        address _owner = address(uint160(tokenOwner));\\n        _owner.transfer(address(this).balance);\\n        }\\n\\n        //@returns the owner of the sale\\n        function tokenOwnerAdd() public view returns (address) {\\n            return tokenOwner;\\n        }\\n\\n}\\n\"}}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deployedSales\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setTokenFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newTokenSale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDeployedSales\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"createTokenSale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mySales\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenSaleFactory","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://599f0c7a4c2e1263b599ff5571141ba1852b066c90addcaeb4e0760adb2266f5"}]}