{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.14;\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract GlobalConfig is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public communityFundRatio = 10;\r\n    uint256 public minReserveRatio = 10;\r\n    uint256 public maxReserveRatio = 20;\r\n    uint256 public liquidationThreshold = 85;\r\n    uint256 public liquidationDiscountRatio = 95;\r\n    uint256 public compoundSupplyRateWeights = 4;\r\n    uint256 public compoundBorrowRateWeights = 6;\r\n    uint256 public rateCurveSlope = 15 * 10 ** 16;\r\n    uint256 public rateCurveConstant = 3 * 10 ** 16;\r\n    uint256 public deFinerRate = 10;\r\n    address payable public deFinerCommunityFund = msg.sender;\r\n\r\n    address public bank;                               // the Bank contract\r\n    address public savingAccount;             // the SavingAccount contract\r\n    address public tokenInfoRegistry;     // the TokenRegistry contract\r\n    address public accounts;                       // the Accounts contract\r\n    address public constants;                      // the constants contract\r\n    address public chainLink;\r\n\r\n    event CommunityFundRatioUpdated(uint256 indexed communityFundRatio);\r\n    event MinReserveRatioUpdated(uint256 indexed minReserveRatio);\r\n    event MaxReserveRatioUpdated(uint256 indexed maxReserveRatio);\r\n    event LiquidationThresholdUpdated(uint256 indexed liquidationThreshold);\r\n    event LiquidationDiscountRatioUpdated(uint256 indexed liquidationDiscountRatio);\r\n    event CompoundSupplyRateWeightsUpdated(uint256 indexed compoundSupplyRateWeights);\r\n    event CompoundBorrowRateWeightsUpdated(uint256 indexed compoundBorrowRateWeights);\r\n    event rateCurveSlopeUpdated(uint256 indexed rateCurveSlope);\r\n    event rateCurveConstantUpdated(uint256 indexed rateCurveConstant);\r\n    event ConstantUpdated(address indexed constants);\r\n    event BankUpdated(address indexed bank);\r\n    event SavingAccountUpdated(address indexed savingAccount);\r\n    event TokenInfoRegistryUpdated(address indexed tokenInfoRegistry);\r\n    event AccountsUpdated(address indexed accounts);\r\n    event DeFinerCommunityFundUpdated(address indexed deFinerCommunityFund);\r\n    event DeFinerRateUpdated(uint256 indexed deFinerRate);\r\n    event ChainLinkUpdated(address indexed chainLink);\r\n\r\n\r\n    function initialize(\r\n        address _bank,\r\n        address _savingAccount,\r\n        address _tokenInfoRegistry,\r\n        address _accounts,\r\n        address _constants,\r\n        address _chainLink\r\n    ) public onlyOwner {\r\n        bank = _bank;\r\n        savingAccount = _savingAccount;\r\n        tokenInfoRegistry = _tokenInfoRegistry;\r\n        accounts = _accounts;\r\n        constants = _constants;\r\n        chainLink = _chainLink;\r\n    }\r\n\r\n    /**\r\n     * Update the community fund (commision fee) ratio.\r\n     * @param _communityFundRatio the new ratio\r\n     */\r\n    function updateCommunityFundRatio(uint256 _communityFundRatio) external onlyOwner {\r\n        if (_communityFundRatio == communityFundRatio)\r\n            return;\r\n\r\n        require(_communityFundRatio > 0 && _communityFundRatio < 100,\r\n            \"Invalid community fund ratio.\");\r\n        communityFundRatio = _communityFundRatio;\r\n\r\n        emit CommunityFundRatioUpdated(_communityFundRatio);\r\n    }\r\n\r\n    /**\r\n     * Update the minimum reservation reatio\r\n     * @param _minReserveRatio the new value of the minimum reservation ratio\r\n     */\r\n    function updateMinReserveRatio(uint256 _minReserveRatio) external onlyOwner {\r\n        if (_minReserveRatio == minReserveRatio)\r\n            return;\r\n\r\n        require(_minReserveRatio > 0 && _minReserveRatio < maxReserveRatio,\r\n            \"Invalid min reserve ratio.\");\r\n        minReserveRatio = _minReserveRatio;\r\n\r\n        emit MinReserveRatioUpdated(_minReserveRatio);\r\n    }\r\n\r\n    /**\r\n     * Update the maximum reservation reatio\r\n     * @param _maxReserveRatio the new value of the maximum reservation ratio\r\n     */\r\n    function updateMaxReserveRatio(uint256 _maxReserveRatio) external onlyOwner {\r\n        if (_maxReserveRatio == maxReserveRatio)\r\n            return;\r\n\r\n        require(_maxReserveRatio > minReserveRatio && _maxReserveRatio < 100,\r\n            \"Invalid max reserve ratio.\");\r\n        maxReserveRatio = _maxReserveRatio;\r\n\r\n        emit MaxReserveRatioUpdated(_maxReserveRatio);\r\n    }\r\n\r\n    /**\r\n     * Update the liquidation threshold, i.e. the LTV that will trigger the liquidation.\r\n     * @param _liquidationThreshold the new threshhold value\r\n     */\r\n    function updateLiquidationThreshold(uint256 _liquidationThreshold) external onlyOwner {\r\n        if (_liquidationThreshold == liquidationThreshold)\r\n            return;\r\n\r\n        require(_liquidationThreshold > 0 && _liquidationThreshold < liquidationDiscountRatio,\r\n            \"Invalid liquidation threshold.\");\r\n        liquidationThreshold = _liquidationThreshold;\r\n\r\n        emit LiquidationThresholdUpdated(_liquidationThreshold);\r\n    }\r\n\r\n    /**\r\n     * Update the liquidation discount\r\n     * @param _liquidationDiscountRatio the new liquidation discount\r\n     */\r\n    function updateLiquidationDiscountRatio(uint256 _liquidationDiscountRatio) external onlyOwner {\r\n        if (_liquidationDiscountRatio == liquidationDiscountRatio)\r\n            return;\r\n\r\n        require(_liquidationDiscountRatio > liquidationThreshold && _liquidationDiscountRatio < 100,\r\n            \"Invalid liquidation discount ratio.\");\r\n        liquidationDiscountRatio = _liquidationDiscountRatio;\r\n\r\n        emit LiquidationDiscountRatioUpdated(_liquidationDiscountRatio);\r\n    }\r\n\r\n    /**\r\n     * Medium value of the reservation ratio, which is the value that the pool try to maintain.\r\n     */\r\n    function midReserveRatio() public view returns(uint256){\r\n        return minReserveRatio.add(maxReserveRatio).div(2);\r\n    }\r\n\r\n    function updateCompoundSupplyRateWeights(uint256 _compoundSupplyRateWeights) external onlyOwner{\r\n        compoundSupplyRateWeights = _compoundSupplyRateWeights;\r\n\r\n        emit CompoundSupplyRateWeightsUpdated(_compoundSupplyRateWeights);\r\n    }\r\n\r\n    function updateCompoundBorrowRateWeights(uint256 _compoundBorrowRateWeights) external onlyOwner{\r\n        compoundBorrowRateWeights = _compoundBorrowRateWeights;\r\n\r\n        emit CompoundBorrowRateWeightsUpdated(_compoundBorrowRateWeights);\r\n    }\r\n\r\n    function updaterateCurveSlope(uint256 _rateCurveSlope) external onlyOwner{\r\n        rateCurveSlope = _rateCurveSlope;\r\n\r\n        emit rateCurveSlopeUpdated(_rateCurveSlope);\r\n    }\r\n\r\n    function updaterateCurveConstant(uint256 _rateCurveConstant) external onlyOwner{\r\n        rateCurveConstant = _rateCurveConstant;\r\n\r\n        emit rateCurveConstantUpdated(_rateCurveConstant);\r\n    }\r\n\r\n    function updateBank(address _bank) external onlyOwner{\r\n        bank = _bank;\r\n\r\n        emit BankUpdated(_bank);\r\n    }\r\n\r\n    function updateSavingAccount(address _savingAccount) external onlyOwner{\r\n        savingAccount = _savingAccount;\r\n\r\n        emit SavingAccountUpdated(_savingAccount);\r\n    }\r\n\r\n    function updateTokenInfoRegistry(address _tokenInfoRegistry) external onlyOwner{\r\n        tokenInfoRegistry = _tokenInfoRegistry;\r\n\r\n        emit TokenInfoRegistryUpdated(_tokenInfoRegistry);\r\n    }\r\n\r\n    function updateAccounts(address _accounts) external onlyOwner{\r\n        accounts = _accounts;\r\n\r\n        emit AccountsUpdated(_accounts);\r\n    }\r\n\r\n    function updateConstant(address _constants) external onlyOwner{\r\n        constants = _constants;\r\n\r\n        emit ConstantUpdated(_constants);\r\n    }\r\n\r\n    function updatedeFinerCommunityFund(address payable _deFinerCommunityFund) external onlyOwner{\r\n        deFinerCommunityFund = _deFinerCommunityFund;\r\n\r\n        emit DeFinerCommunityFundUpdated(_deFinerCommunityFund);\r\n    }\r\n\r\n    function updatedeFinerRate(uint256 _deFinerRate) external onlyOwner{\r\n        require(_deFinerRate <= 100,\"_deFinerRate cannot exceed 100\");\r\n        deFinerRate = _deFinerRate;\r\n\r\n        emit DeFinerRateUpdated(_deFinerRate);\r\n    }\r\n\r\n    function updateChainLink(address _chainLink) external onlyOwner{\r\n        chainLink = _chainLink;\r\n\r\n        emit ChainLinkUpdated(address(_chainLink));\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Constant {\r\n    enum ActionType { DepositAction, WithdrawAction, BorrowAction, RepayAction }\r\n    address public constant ETH_ADDR = 0x000000000000000000000000000000000000000E;\r\n    uint256 public constant INT_UNIT = 10 ** uint256(18);\r\n    uint256 public constant ACCURACY = 10 ** 18;\r\n    uint256 public constant BLOCKS_PER_YEAR = 2102400;\r\n}\r\n\r\n\r\nlibrary Utils{\r\n\r\n    function _isETH(address globalConfig, address _token) public view returns (bool) {\r\n        return IConstant(IGlobalConfig(globalConfig).constants()).ETH_ADDR() == _token;\r\n    }\r\n\r\n    function getDivisor(address globalConfig, address _token) public view returns (uint256) {\r\n        if(_isETH(globalConfig, _token)) return IConstant(IGlobalConfig(globalConfig).constants()).INT_UNIT();\r\n        return 10 ** uint256(ITokenRegistry(IGlobalConfig(globalConfig).tokenInfoRegistry()).getTokenDecimals(_token));\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @dev Token Info Registry to manage Token information\r\n *      The Owner of the contract allowed to update the information\r\n */\r\ncontract TokenRegistry is Ownable, Constant {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev TokenInfo struct stores Token Information, this includes:\r\n     *      ERC20 Token address, Compound Token address, ChainLink Aggregator address etc.\r\n     * @notice This struct will consume 5 storage locations\r\n     */\r\n    struct TokenInfo {\r\n        // Token index, can store upto 255\r\n        uint8 index;\r\n        // ERC20 Token decimal\r\n        uint8 decimals;\r\n        // If token is enabled / disabled\r\n        bool enabled;\r\n        // Is ERC20 token charge transfer fee?\r\n        bool isTransferFeeEnabled;\r\n        // Is Token supported on Compound\r\n        bool isSupportedOnCompound;\r\n        // cToken address on Compound\r\n        address cToken;\r\n        // Chain Link Aggregator address for TOKEN/ETH pair\r\n        address chainLinkOracle;\r\n        // Borrow LTV, by default 60%\r\n        uint256 borrowLTV;\r\n    }\r\n\r\n    event TokenAdded(address indexed token);\r\n    event TokenUpdated(address indexed token);\r\n\r\n    uint256 public constant MAX_TOKENS = 128;\r\n    uint256 public constant SCALE = 100;\r\n\r\n    // TokenAddress to TokenInfo mapping\r\n    mapping (address => TokenInfo) public tokenInfo;\r\n\r\n    // TokenAddress array\r\n    address[] public tokens;\r\n    IGlobalConfig public globalConfig;\r\n\r\n    /**\r\n     */\r\n    modifier whenTokenExists(address _token) {\r\n        require(isTokenExist(_token), \"Token not exists\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     *  initializes the symbols structure\r\n     */\r\n    function initialize(IGlobalConfig _globalConfig) public onlyOwner{\r\n        globalConfig = _globalConfig;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a new token to registry\r\n     * @param _token ERC20 Token address\r\n     * @param _decimals Token's decimals\r\n     * @param _isTransferFeeEnabled Is token changes transfer fee\r\n     * @param _isSupportedOnCompound Is token supported on Compound\r\n     * @param _cToken cToken contract address\r\n     * @param _chainLinkOracle Chain Link Aggregator address to get TOKEN/ETH rate\r\n     */\r\n    function addToken(\r\n        address _token,\r\n        uint8 _decimals,\r\n        bool _isTransferFeeEnabled,\r\n        bool _isSupportedOnCompound,\r\n        address _cToken,\r\n        address _chainLinkOracle\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_token != address(0), \"Token address is zero\");\r\n        require(!isTokenExist(_token), \"Token already exist\");\r\n        require(_chainLinkOracle != address(0), \"ChainLinkAggregator address is zero\");\r\n        require(tokens.length < MAX_TOKENS, \"Max token limit reached\");\r\n\r\n        TokenInfo storage storageTokenInfo = tokenInfo[_token];\r\n        storageTokenInfo.index = uint8(tokens.length);\r\n        storageTokenInfo.decimals = _decimals;\r\n        storageTokenInfo.enabled = true;\r\n        storageTokenInfo.isTransferFeeEnabled = _isTransferFeeEnabled;\r\n        storageTokenInfo.isSupportedOnCompound = _isSupportedOnCompound;\r\n        storageTokenInfo.cToken = _cToken;\r\n        storageTokenInfo.chainLinkOracle = _chainLinkOracle;\r\n        // Default values\r\n        storageTokenInfo.borrowLTV = 60; //6e7; // 60%\r\n\r\n        tokens.push(_token);\r\n        emit TokenAdded(_token);\r\n    }\r\n\r\n    function updateBorrowLTV(\r\n        address _token,\r\n        uint256 _borrowLTV\r\n    )\r\n        external\r\n        onlyOwner\r\n        whenTokenExists(_token)\r\n    {\r\n        if (tokenInfo[_token].borrowLTV == _borrowLTV)\r\n            return;\r\n\r\n        // require(_borrowLTV != 0, \"Borrow LTV is zero\");\r\n        require(_borrowLTV < SCALE, \"Borrow LTV must be less than Scale\");\r\n        // require(liquidationThreshold > _borrowLTV, \"Liquidation threshold must be greater than Borrow LTV\");\r\n\r\n        tokenInfo[_token].borrowLTV = _borrowLTV;\r\n        emit TokenUpdated(_token);\r\n    }\r\n\r\n    /**\r\n     */\r\n    function updateTokenTransferFeeFlag(\r\n        address _token,\r\n        bool _isTransfeFeeEnabled\r\n    )\r\n        external\r\n        onlyOwner\r\n        whenTokenExists(_token)\r\n    {\r\n        if (tokenInfo[_token].isTransferFeeEnabled == _isTransfeFeeEnabled)\r\n            return;\r\n\r\n        tokenInfo[_token].isTransferFeeEnabled = _isTransfeFeeEnabled;\r\n        emit TokenUpdated(_token);\r\n    }\r\n\r\n    /**\r\n     */\r\n    function updateTokenSupportedOnCompoundFlag(\r\n        address _token,\r\n        bool _isSupportedOnCompound\r\n    )\r\n        external\r\n        onlyOwner\r\n        whenTokenExists(_token)\r\n    {\r\n        if (tokenInfo[_token].isSupportedOnCompound == _isSupportedOnCompound)\r\n            return;\r\n\r\n        tokenInfo[_token].isSupportedOnCompound = _isSupportedOnCompound;\r\n        emit TokenUpdated(_token);\r\n    }\r\n\r\n    /**\r\n     */\r\n    function updateCToken(\r\n        address _token,\r\n        address _cToken\r\n    )\r\n        external\r\n        onlyOwner\r\n        whenTokenExists(_token)\r\n    {\r\n        if (tokenInfo[_token].cToken == _cToken)\r\n            return;\r\n\r\n        tokenInfo[_token].cToken = _cToken;\r\n        emit TokenUpdated(_token);\r\n    }\r\n\r\n    /**\r\n     */\r\n    function updateChainLinkAggregator(\r\n        address _token,\r\n        address _chainLinkOracle\r\n    )\r\n        external\r\n        onlyOwner\r\n        whenTokenExists(_token)\r\n    {\r\n        if (tokenInfo[_token].chainLinkOracle == _chainLinkOracle)\r\n            return;\r\n\r\n        tokenInfo[_token].chainLinkOracle = _chainLinkOracle;\r\n        emit TokenUpdated(_token);\r\n    }\r\n\r\n\r\n    function enableToken(address _token) external onlyOwner whenTokenExists(_token) {\r\n        require(!tokenInfo[_token].enabled, \"Token already enabled\");\r\n\r\n        tokenInfo[_token].enabled = true;\r\n\r\n        emit TokenUpdated(_token);\r\n    }\r\n\r\n    function disableToken(address _token) external onlyOwner whenTokenExists(_token) {\r\n        require(tokenInfo[_token].enabled, \"Token already disabled\");\r\n\r\n        tokenInfo[_token].enabled = false;\r\n\r\n        emit TokenUpdated(_token);\r\n    }\r\n\r\n    // =====================\r\n    //      GETTERS\r\n    // =====================\r\n\r\n    /**\r\n     * @dev Is token address is registered\r\n     * @param _token token address\r\n     * @return Returns `true` when token registered, otherwise `false`\r\n     */\r\n    function isTokenExist(address _token) public view returns (bool isExist) {\r\n        isExist = tokenInfo[_token].chainLinkOracle != address(0);\r\n    }\r\n\r\n    function getTokens() external view returns (address[] memory) {\r\n        return tokens;\r\n    }\r\n\r\n    function getTokenIndex(address _token) external view returns (uint8) {\r\n        return tokenInfo[_token].index;\r\n    }\r\n\r\n    function isTokenEnabled(address _token) external view returns (bool) {\r\n        return tokenInfo[_token].enabled;\r\n    }\r\n\r\n    /**\r\n     */\r\n    function getCTokens() external view returns (address[] memory cTokens) {\r\n        uint256 len = tokens.length;\r\n        cTokens = new address[](len);\r\n        for(uint256 i = 0; i < len; i++) {\r\n            cTokens[i] = tokenInfo[tokens[i]].cToken;\r\n        }\r\n    }\r\n\r\n    function getTokenDecimals(address _token) public view returns (uint8) {\r\n        return tokenInfo[_token].decimals;\r\n    }\r\n\r\n    function isTransferFeeEnabled(address _token) external view returns (bool) {\r\n        return tokenInfo[_token].isTransferFeeEnabled;\r\n    }\r\n\r\n    function isSupportedOnCompound(address _token) external view returns (bool) {\r\n        return tokenInfo[_token].isSupportedOnCompound;\r\n    }\r\n\r\n    /**\r\n     */\r\n    function getCToken(address _token) external view returns (address) {\r\n        return tokenInfo[_token].cToken;\r\n    }\r\n\r\n    function getChainLinkAggregator(address _token) external view returns (address) {\r\n        return tokenInfo[_token].chainLinkOracle;\r\n    }\r\n\r\n    function getBorrowLTV(address _token) external view returns (uint256) {\r\n        return tokenInfo[_token].borrowLTV;\r\n    }\r\n\r\n    function getCoinLength() public view returns (uint256 length) {\r\n        return tokens.length;\r\n    }\r\n\r\n    function addressFromIndex(uint index) public view returns(address) {\r\n        require(index < tokens.length, \"coinIndex must be smaller than the coins length.\");\r\n        return tokens[index];\r\n    }\r\n\r\n    function priceFromIndex(uint index) public view returns(uint256) {\r\n        require(index < tokens.length, \"coinIndex must be smaller than the coins length.\");\r\n        address tokenAddress = tokens[index];\r\n        // Temp fix\r\n        if(Utils._isETH(address(globalConfig), tokenAddress)) {\r\n            return 1e18;\r\n        }\r\n        return uint256(IAggregator(tokenInfo[tokenAddress].chainLinkOracle).latestAnswer());\r\n    }\r\n\r\n    function priceFromAddress(address tokenAddress) public view returns(uint256) {\r\n        if(Utils._isETH(address(globalConfig), tokenAddress)) {\r\n            return 1e18;\r\n        }\r\n        return uint256(IAggregator(tokenInfo[tokenAddress].chainLinkOracle).latestAnswer());\r\n    }\r\n\r\n     function _priceFromAddress(address _token) internal view returns (uint) {\r\n        return _token != ETH_ADDR ? uint256(IAggregator(tokenInfo[_token].chainLinkOracle).latestAnswer()) : INT_UNIT;\r\n    }\r\n\r\n    function _tokenDivisor(address _token) internal view returns (uint) {\r\n        return _token != ETH_ADDR ? 10**uint256(tokenInfo[_token].decimals) : INT_UNIT;\r\n    }\r\n\r\n    function getTokenInfoFromIndex(uint index)\r\n        external\r\n        view\r\n        whenTokenExists(addressFromIndex(index))\r\n        returns (\r\n            address,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        address token = tokens[index];\r\n        return (\r\n            token,\r\n            _tokenDivisor(token),\r\n            _priceFromAddress(token),\r\n            tokenInfo[token].borrowLTV\r\n        );\r\n    }\r\n\r\n    function getTokenInfoFromAddress(address _token)\r\n        external\r\n        view\r\n        whenTokenExists(_token)\r\n        returns (\r\n            uint8,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return (\r\n            tokenInfo[_token].index,\r\n            _tokenDivisor(_token),\r\n            _priceFromAddress(_token),\r\n            tokenInfo[_token].borrowLTV\r\n        );\r\n    }\r\n\r\n    // function _isETH(address _token) public view returns (bool) {\r\n    //     return globalConfig.constants().ETH_ADDR() == _token;\r\n    // }\r\n\r\n    // function getDivisor(address _token) public view returns (uint256) {\r\n    //     if(_isETH(_token)) return INT_UNIT;\r\n    //     return 10 ** uint256(getTokenDecimals(_token));\r\n    // }\r\n\r\n    mapping(address => uint) public depositeMiningSpeeds;\r\n    mapping(address => uint) public borrowMiningSpeeds;\r\n\r\n    function updateMiningSpeed(address _token, uint _depositeMiningSpeed, uint _borrowMiningSpeed) public onlyOwner{\r\n        if(_depositeMiningSpeed != depositeMiningSpeeds[_token]) {\r\n            depositeMiningSpeeds[_token] = _depositeMiningSpeed;\r\n        }\r\n        \r\n        if(_borrowMiningSpeed != borrowMiningSpeeds[_token]) {\r\n            borrowMiningSpeeds[_token] = _borrowMiningSpeed;\r\n        }\r\n\r\n        emit TokenUpdated(_token);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\ninterface IAggregator {\r\n    function latestAnswer() external view returns (int256);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary SavingLib {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /**\r\n     * Receive the amount of token from msg.sender\r\n     * @param _amount amount of token\r\n     * @param _token token address\r\n     */\r\n    function receive(GlobalConfig globalConfig, uint256 _amount, address _token) public {\r\n        if (Utils._isETH(address(globalConfig), _token)) {\r\n            require(msg.value == _amount, \"The amount is not sent from address.\");\r\n        } else {\r\n            //When only tokens received, msg.value must be 0\r\n            require(msg.value == 0, \"msg.value must be 0 when receiving tokens\");\r\n            IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send the amount of token to an address\r\n     * @param _amount amount of token\r\n     * @param _token token address\r\n     */\r\n    function send(GlobalConfig globalConfig, uint256 _amount, address _token) public {\r\n        if (Utils._isETH(address(globalConfig), _token)) {\r\n            msg.sender.transfer(_amount);\r\n        } else {\r\n            IERC20(_token).safeTransfer(msg.sender, _amount);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n\r\n/**\r\n * @notice Code copied from OpenZeppelin, to make it an upgradable contract\r\n */\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n *\r\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\r\n * metering changes introduced in the Istanbul hardfork.\r\n */\r\ncontract InitializableReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    function _initialize() internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract InitializablePausable {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\r\n     */\r\n    event Unpaused(address account);\r\n    \r\n    address private globalConfigPausable;\r\n    bool private _paused;\r\n\r\n    function _initialize(address _globalConfig) internal {\r\n        globalConfigPausable = _globalConfig;\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to pause, triggers stopped state.\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(GlobalConfig(globalConfigPausable).owner());\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to unpause, returns to normal state.\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(GlobalConfig(globalConfigPausable).owner());\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(msg.sender == GlobalConfig(globalConfigPausable).owner(), \"PauserRole: caller does not have the Pauser role\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n\r\ninterface ICToken {\r\n    function supplyRatePerBlock() external view returns (uint);\r\n    function borrowRatePerBlock() external view returns (uint);\r\n    function mint(uint mintAmount) external returns (uint);\r\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\r\n    function redeem(uint redeemAmount) external returns (uint);\r\n    function exchangeRateStore() external view returns (uint);\r\n    function exchangeRateCurrent() external returns (uint);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function balanceOfUnderlying(address owner) external returns (uint);\r\n}\r\n\r\ninterface ICETH{\r\n    function mint() external payable;\r\n}\r\n\r\ninterface IController {\r\n    function fastForward(uint blocks) external returns (uint);\r\n    function getBlockNumber() external view returns (uint);\r\n}\r\n\r\ncontract SavingAccount is Initializable, InitializableReentrancyGuard, Constant, InitializablePausable {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    GlobalConfig public globalConfig;\r\n\r\n    event Transfer(address indexed token, address from, address to, uint256 amount);\r\n    event Borrow(address indexed token, address from, uint256 amount);\r\n    event Repay(address indexed token, address from, uint256 amount);\r\n    event Deposit(address indexed token, address from, uint256 amount);\r\n    event Withdraw(address indexed token, address from, uint256 amount);\r\n    event WithdrawAll(address indexed token, address from, uint256 amount);\r\n    event Liquidate(address liquidator, address borrower, address borrowedToken, uint256 repayAmount, address collateralToken, uint256 payAmount);\r\n    event Claim(address from, uint256 amount);\r\n\r\n    modifier onlySupportedToken(address _token) {\r\n        if(!Utils._isETH(address(globalConfig), _token)) {\r\n            require(ITokenRegistry(globalConfig.tokenInfoRegistry()).isTokenExist(_token), \"Unsupported token\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyEnabledToken(address _token) {\r\n        require(ITokenRegistry(globalConfig.tokenInfoRegistry()).isTokenEnabled(_token), \"The token is not enabled\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAuthorized() {\r\n        require(msg.sender == address(globalConfig.bank()),\r\n            \"Only authorized to call from DeFiner internal contracts.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Initialize function to be called by the Deployer for the first time\r\n     * @param _tokenAddresses list of token addresses\r\n     * @param _cTokenAddresses list of corresponding cToken addresses\r\n     * @param _globalConfig global configuration contract\r\n     */\r\n    function initialize(\r\n        address[] memory _tokenAddresses,\r\n        address[] memory _cTokenAddresses,\r\n        GlobalConfig _globalConfig\r\n    )\r\n        public\r\n        initializer\r\n    {\r\n        // Initialize InitializableReentrancyGuard\r\n        super._initialize();\r\n        super._initialize(address(_globalConfig));\r\n\r\n        globalConfig = _globalConfig;\r\n\r\n        require(_tokenAddresses.length == _cTokenAddresses.length, \"Token and cToken length don't match.\");\r\n        uint tokenNum = _tokenAddresses.length;\r\n        for(uint i = 0;i < tokenNum;i++) {\r\n            if(_cTokenAddresses[i] != address(0x0) && _tokenAddresses[i] != ETH_ADDR) {\r\n                approveAll(_tokenAddresses[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Approve transfer of all available tokens\r\n     * @param _token token address\r\n     */\r\n    function approveAll(address _token) public {\r\n        address cToken = ITokenRegistry(globalConfig.tokenInfoRegistry()).getCToken(_token);\r\n        require(cToken != address(0x0), \"cToken address is zero\");\r\n        IERC20(_token).safeApprove(cToken, 0);\r\n        IERC20(_token).safeApprove(cToken, uint256(-1));\r\n    }\r\n\r\n    /**\r\n     * Get current block number\r\n     * @return the current block number\r\n     */\r\n    function getBlockNumber() internal view returns (uint) {\r\n        return block.number;\r\n    }\r\n\r\n    /**\r\n     * Transfer the token between users inside DeFiner\r\n     * @param _to the address that the token be transfered to\r\n     * @param _token token address\r\n     * @param _amount amout of tokens transfer\r\n     */\r\n    function transfer(address _to, address _token, uint _amount) external onlySupportedToken(_token) onlyEnabledToken(_token) whenNotPaused nonReentrant {\r\n\r\n        IBank(globalConfig.bank()).newRateIndexCheckpoint(_token);\r\n        uint256 amount = IAccounts(globalConfig.accounts()).withdraw(msg.sender, _token, _amount);\r\n        IAccounts(globalConfig.accounts()).deposit(_to, _token, amount);\r\n\r\n        emit Transfer(_token, msg.sender, _to, amount);\r\n    }\r\n\r\n    /**\r\n     * Borrow the amount of token from the saving pool.\r\n     * @param _token token address\r\n     * @param _amount amout of tokens to borrow\r\n     */\r\n    function borrow(address _token, uint256 _amount) external onlySupportedToken(_token) onlyEnabledToken(_token) whenNotPaused nonReentrant {\r\n\r\n        require(_amount != 0, \"Borrow zero amount of token is not allowed.\");\r\n\r\n        IBank(globalConfig.bank()).borrow(msg.sender, _token, _amount);\r\n\r\n        // Transfer the token on Ethereum\r\n        SavingLib.send(globalConfig, _amount, _token);\r\n\r\n        emit Borrow(_token, msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n     * Repay the amount of token back to the saving pool.\r\n     * @param _token token address\r\n     * @param _amount amout of tokens to borrow\r\n     * @dev If the repay amount is larger than the borrowed balance, the extra will be returned.\r\n     */\r\n    function repay(address _token, uint256 _amount) public payable onlySupportedToken(_token) nonReentrant {\r\n        require(_amount != 0, \"Amount is zero\");\r\n        SavingLib.receive(globalConfig, _amount, _token);\r\n\r\n        // Add a new checkpoint on the index curve.\r\n        uint256 amount = IBank(globalConfig.bank()).repay(msg.sender, _token, _amount);\r\n\r\n        // Send the remain money back\r\n        if(amount < _amount) {\r\n            SavingLib.send(globalConfig, _amount.sub(amount), _token);\r\n        }\r\n\r\n        emit Repay(_token, msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * Deposit the amount of token to the saving pool.\r\n     * @param _token the address of the deposited token\r\n     * @param _amount the mount of the deposited token\r\n     */\r\n    function deposit(address _token, uint256 _amount) public payable onlySupportedToken(_token) onlyEnabledToken(_token) nonReentrant {\r\n        require(_amount != 0, \"Amount is zero\");\r\n        SavingLib.receive(globalConfig, _amount, _token);\r\n        IBank(globalConfig.bank()).deposit(msg.sender, _token, _amount);\r\n\r\n        emit Deposit(_token, msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n     * Withdraw a token from an address\r\n     * @param _token token address\r\n     * @param _amount amount to be withdrawn\r\n     */\r\n    function withdraw(address _token, uint256 _amount) external onlySupportedToken(_token) whenNotPaused nonReentrant {\r\n        require(_amount != 0, \"Amount is zero\");\r\n        uint256 amount = IBank(globalConfig.bank()).withdraw(msg.sender, _token, _amount);\r\n        SavingLib.send(globalConfig, amount, _token);\r\n\r\n        emit Withdraw(_token, msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * Withdraw all tokens from the saving pool.\r\n     * @param _token the address of the withdrawn token\r\n     */\r\n    function withdrawAll(address _token) external onlySupportedToken(_token) whenNotPaused nonReentrant {\r\n\r\n        // Sanity check\r\n        require(IAccounts(globalConfig.accounts()).getDepositPrincipal(msg.sender, _token) > 0, \"Token depositPrincipal must be greater than 0\");\r\n\r\n        // Add a new checkpoint on the index curve.\r\n        IBank(globalConfig.bank()).newRateIndexCheckpoint(_token);\r\n\r\n        // Get the total amount of token for the account\r\n        uint amount = IAccounts(globalConfig.accounts()).getDepositBalanceCurrent(_token, msg.sender);\r\n\r\n        uint256 actualAmount = IBank(globalConfig.bank()).withdraw(msg.sender, _token, amount);\r\n        if(actualAmount != 0) {\r\n            SavingLib.send(globalConfig, actualAmount, _token);\r\n        }\r\n        emit WithdrawAll(_token, msg.sender, actualAmount);\r\n    }\r\n\r\n    function liquidate(address _borrower, address _borrowedToken, address _collateralToken) public onlySupportedToken(_borrowedToken) onlySupportedToken(_collateralToken) whenNotPaused nonReentrant {\r\n        (uint256 repayAmount, uint256 payAmount) = IAccounts(globalConfig.accounts()).liquidate(msg.sender, _borrower, _borrowedToken, _collateralToken);\r\n\r\n        emit Liquidate(msg.sender, _borrower, _borrowedToken, repayAmount, _collateralToken, payAmount);\r\n    }\r\n\r\n    /**\r\n     * Withdraw token from Compound\r\n     * @param _token token address\r\n     * @param _amount amount of token\r\n     */\r\n    function fromCompound(address _token, uint _amount) external onlyAuthorized {\r\n        require(ICToken(ITokenRegistry(globalConfig.tokenInfoRegistry()).getCToken(_token)).redeemUnderlying(_amount) == 0, \"redeemUnderlying failed\");\r\n    }\r\n\r\n    function toCompound(address _token, uint _amount) external onlyAuthorized {\r\n        address cToken = ITokenRegistry(globalConfig.tokenInfoRegistry()).getCToken(_token);\r\n        if (Utils._isETH(address(globalConfig), _token)) {\r\n            ICETH(cToken).mint.value(_amount)();\r\n        } else {\r\n            // uint256 success = ICToken(cToken).mint(_amount);\r\n            require(ICToken(cToken).mint(_amount) == 0, \"mint failed\");\r\n        }\r\n    }\r\n\r\n    function() external payable{}\r\n\r\n    /**\r\n     * An account claim all mined FIN token\r\n     */\r\n    function claim() public nonReentrant {\r\n        uint FINAmount = IAccounts(globalConfig.accounts()).claim(msg.sender);\r\n        IERC20(ITokenRegistry(globalConfig.tokenInfoRegistry()).addressFromIndex(11)).safeTransfer(msg.sender, FINAmount);\r\n\r\n        emit Claim(msg.sender, FINAmount);\r\n    }\r\n}\r\n\r\ninterface IGlobalConfig {\r\n    function constants() external view returns (address);\r\n    function tokenInfoRegistry() external view returns (address);\r\n    function chainLink() external view returns (address);\r\n}\r\n\r\ninterface IConstant {\r\n    function ETH_ADDR() external view returns (address);\r\n    function INT_UNIT() external view returns (uint256);\r\n}\r\n\r\ninterface ITokenRegistry {\r\n    function getTokenDecimals(address) external view returns (uint8);\r\n    function isTokenExist(address) external view returns (bool);\r\n    function isTokenEnabled(address) external view returns (bool);\r\n    function getCToken(address) external view returns (address);\r\n    function addressFromIndex(uint index) external view returns(address);\r\n}\r\n\r\ninterface IBank {\r\n    function newRateIndexCheckpoint(address) external;\r\n    function deposit(address _to, address _token, uint256 _amount) external;\r\n    function withdraw(address _from, address _token, uint256 _amount) external returns(uint);\r\n    function borrow(address _from, address _token, uint256 _amount) external;\r\n    function repay(address _to, address _token, uint256 _amount) external returns(uint);\r\n}\r\n\r\ninterface IAccounts {\r\n    function withdraw(address _accountAddr, address _token, uint256 _amount) external returns (uint256);\r\n    function deposit(address _accountAddr, address _token, uint256 _amount) external;\r\n    function getDepositPrincipal(address _accountAddr, address _token) external view returns(uint256);\r\n    function getDepositBalanceCurrent(address _token, address _accountAddr) external view returns (uint256);\r\n    function liquidate(address _liquidator, address _borrower, address _borrowedToken, address _collateralToken) external returns (uint256, uint256);\r\n    function claim(address _account) external returns(uint256);\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrowedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAll\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCURACY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BLOCKS_PER_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INT_UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"approveAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fromCompound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalConfig\",\"outputs\":[{\"internalType\":\"contract GlobalConfig\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_cTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"contract GlobalConfig\",\"name\":\"_globalConfig\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrowedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"toCompound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SavingAccount","CompilerVersion":"v0.5.14+commit.01f1aaa4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"Utils:8e13d5ac37110742f62bf5eeea5045fa33ff428c;SavingLib:d20a0ba23d29e00ad5ed638cb51c7b14ca00d836","LicenseType":"GNU LGPLv2.1","Proxy":"0","Implementation":"","SwarmSource":"bzzr://eca038fd10b160e20d891b3b0165fefed02e8022b6b2684d31854aa77b23acab"}]}