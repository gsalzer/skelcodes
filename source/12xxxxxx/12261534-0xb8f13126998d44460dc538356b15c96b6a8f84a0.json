{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.14;\r\n\r\n\r\n/**\r\n * @notice Bitmap library to set or unset bits on bitmap value\r\n */\r\nlibrary BitmapLib {\r\n\r\n    /**\r\n     * @dev Sets the given bit in the bitmap value\r\n     * @param _bitmap Bitmap value to update the bit in\r\n     * @param _index Index range from 0 to 127\r\n     * @return Returns the updated bitmap value\r\n     */\r\n    function setBit(uint128 _bitmap, uint8 _index) internal pure returns (uint128) {\r\n        // Suppose `_bitmap` is in bit value:\r\n        // 0001 0100 = represents third(_index == 2) and fifth(_index == 4) bit is set\r\n\r\n        // Bit not set, hence, set the bit\r\n        if( ! isBitSet(_bitmap, _index)) {\r\n            // Suppose `_index` is = 3 = 4th bit\r\n            // mask = 0000 1000 = Left shift to create mask to find 4rd bit status\r\n            uint128 mask = uint128(1) << _index;\r\n\r\n            // Setting the corrospending bit in _bitmap\r\n            // Performing OR (|) operation\r\n            // 0001 0100 (_bitmap)\r\n            // 0000 1000 (mask)\r\n            // -------------------\r\n            // 0001 1100 (result)\r\n            return _bitmap | mask;\r\n        }\r\n\r\n        // Bit already set, just return without any change\r\n        return _bitmap;\r\n    }\r\n\r\n    /**\r\n     * @dev Unsets the bit in given bitmap\r\n     * @param _bitmap Bitmap value to update the bit in\r\n     * @param _index Index range from 0 to 127\r\n     * @return Returns the updated bitmap value\r\n     */\r\n    function unsetBit(uint128 _bitmap, uint8 _index) internal pure returns (uint128) {\r\n        // Suppose `_bitmap` is in bit value:\r\n        // 0001 0100 = represents third(_index == 2) and fifth(_index == 4) bit is set\r\n\r\n        // Bit is set, hence, unset the bit\r\n        if(isBitSet(_bitmap, _index)) {\r\n            // Suppose `_index` is = 2 = 3th bit\r\n            // mask = 0000 0100 = Left shift to create mask to find 3rd bit status\r\n            uint128 mask = uint128(1) << _index;\r\n\r\n            // Performing Bitwise NOT(~) operation\r\n            // 1111 1011 (mask)\r\n            mask = ~mask;\r\n\r\n            // Unsetting the corrospending bit in _bitmap\r\n            // Performing AND (&) operation\r\n            // 0001 0100 (_bitmap)\r\n            // 1111 1011 (mask)\r\n            // -------------------\r\n            // 0001 0000 (result)\r\n            return _bitmap & mask;\r\n        }\r\n\r\n        // Bit not set, just return without any change\r\n        return _bitmap;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the corrosponding bit set in the bitmap\r\n     * @param _bitmap Bitmap value to check\r\n     * @param _index Index to check. Index range from 0 to 127\r\n     * @return Returns true if bit is set, false otherwise\r\n     */\r\n    function isBitSet(uint128 _bitmap, uint8 _index) internal pure returns (bool) {\r\n        require(_index < 128, \"Index out of range for bit operation\");\r\n        // Suppose `_bitmap` is in bit value:\r\n        // 0001 0100 = represents third(_index == 2) and fifth(_index == 4) bit is set\r\n\r\n        // Suppose `_index` is = 2 = 3th bit\r\n        // 0000 0100 = Left shift to create mask to find 3rd bit status\r\n        uint128 mask = uint128(1) << _index;\r\n\r\n        // Example: When bit is set:\r\n        // Performing AND (&) operation\r\n        // 0001 0100 (_bitmap)\r\n        // 0000 0100 (mask)\r\n        // -------------------------\r\n        // 0000 0100 (bitSet > 0)\r\n\r\n        // Example: When bit is not set:\r\n        // Performing AND (&) operation\r\n        // 0001 0100 (_bitmap)\r\n        // 0000 1000 (mask)\r\n        // -------------------------\r\n        // 0000 0000 (bitSet == 0)\r\n\r\n        uint128 bitSet = _bitmap & mask;\r\n        // Bit is set when greater than zero, else not set\r\n        return bitSet > 0;\r\n    }\r\n}\r\ncontract Constant {\r\n    enum ActionType { DepositAction, WithdrawAction, BorrowAction, RepayAction }\r\n    address public constant ETH_ADDR = 0x000000000000000000000000000000000000000E;\r\n    uint256 public constant INT_UNIT = 10 ** uint256(18);\r\n    uint256 public constant ACCURACY = 10 ** 18;\r\n    uint256 public constant BLOCKS_PER_YEAR = 2102400;\r\n}\r\n\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// This is for per user\r\nlibrary AccountTokenLib {\r\n    using SafeMath for uint256;\r\n    struct TokenInfo {\r\n        // Deposit info\r\n        uint256 depositPrincipal;   // total deposit principal of ther user\r\n        uint256 depositInterest;    // total deposit interest of the user\r\n        uint256 lastDepositBlock;   // the block number of user's last deposit\r\n        // Borrow info\r\n        uint256 borrowPrincipal;    // total borrow principal of ther user\r\n        uint256 borrowInterest;     // total borrow interest of ther user\r\n        uint256 lastBorrowBlock;    // the block number of user's last borrow\r\n    }\r\n\r\n    uint256 constant BASE = 10**18;\r\n\r\n    // returns the principal\r\n    function getDepositPrincipal(TokenInfo storage self) public view returns(uint256) {\r\n        return self.depositPrincipal;\r\n    }\r\n\r\n    function getBorrowPrincipal(TokenInfo storage self) public view returns(uint256) {\r\n        return self.borrowPrincipal;\r\n    }\r\n\r\n    function getDepositBalance(TokenInfo storage self, uint accruedRate) public view returns(uint256) {\r\n        return self.depositPrincipal.add(calculateDepositInterest(self, accruedRate));\r\n    }\r\n\r\n    function getBorrowBalance(TokenInfo storage self, uint accruedRate) public view returns(uint256) {\r\n        return self.borrowPrincipal.add(calculateBorrowInterest(self, accruedRate));\r\n    }\r\n\r\n    function getLastDepositBlock(TokenInfo storage self) public view returns(uint256) {\r\n        return self.lastDepositBlock;\r\n    }\r\n\r\n    function getLastBorrowBlock(TokenInfo storage self) public view returns(uint256) {\r\n        return self.lastBorrowBlock;\r\n    }\r\n\r\n    function getDepositInterest(TokenInfo storage self) public view returns(uint256) {\r\n        return self.depositInterest;\r\n    }\r\n\r\n    function getBorrowInterest(TokenInfo storage self) public view returns(uint256) {\r\n        return self.borrowInterest;\r\n    }\r\n\r\n    function borrow(TokenInfo storage self, uint256 amount, uint256 accruedRate, uint256 _block) public {\r\n        newBorrowCheckpoint(self, accruedRate, _block);\r\n        self.borrowPrincipal = self.borrowPrincipal.add(amount);\r\n    }\r\n\r\n    /**\r\n     * Update token info for withdraw. The interest will be withdrawn with higher priority.\r\n     */\r\n    function withdraw(TokenInfo storage self, uint256 amount, uint256 accruedRate, uint256 _block) public {\r\n        newDepositCheckpoint(self, accruedRate, _block);\r\n        if (self.depositInterest >= amount) {\r\n            self.depositInterest = self.depositInterest.sub(amount);\r\n        } else if (self.depositPrincipal.add(self.depositInterest) >= amount) {\r\n            self.depositPrincipal = self.depositPrincipal.sub(amount.sub(self.depositInterest));\r\n            self.depositInterest = 0;\r\n        } else {\r\n            self.depositPrincipal = 0;\r\n            self.depositInterest = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update token info for deposit\r\n     */\r\n    function deposit(TokenInfo storage self, uint256 amount, uint accruedRate, uint256 _block) public {\r\n        newDepositCheckpoint(self, accruedRate, _block);\r\n        self.depositPrincipal = self.depositPrincipal.add(amount);\r\n    }\r\n\r\n    function repay(TokenInfo storage self, uint256 amount, uint accruedRate, uint256 _block) public {\r\n        // updated rate (new index rate), applying the rate from startBlock(checkpoint) to currBlock\r\n        newBorrowCheckpoint(self, accruedRate, _block);\r\n        // user owes money, then he tries to repays\r\n        if (self.borrowInterest > amount) {\r\n            self.borrowInterest = self.borrowInterest.sub(amount);\r\n        } else if (self.borrowPrincipal.add(self.borrowInterest) > amount) {\r\n            self.borrowPrincipal = self.borrowPrincipal.sub(amount.sub(self.borrowInterest));\r\n            self.borrowInterest = 0;\r\n        } else {\r\n            self.borrowPrincipal = 0;\r\n            self.borrowInterest = 0;\r\n        }\r\n    }\r\n\r\n    function newDepositCheckpoint(TokenInfo storage self, uint accruedRate, uint256 _block) public {\r\n        self.depositInterest = calculateDepositInterest(self, accruedRate);\r\n        self.lastDepositBlock = _block;\r\n    }\r\n\r\n    function newBorrowCheckpoint(TokenInfo storage self, uint accruedRate, uint256 _block) public {\r\n        self.borrowInterest = calculateBorrowInterest(self, accruedRate);\r\n        self.lastBorrowBlock = _block;\r\n    }\r\n\r\n    // Calculating interest according to the new rate\r\n    // calculated starting from last deposit checkpoint\r\n    function calculateDepositInterest(TokenInfo storage self, uint accruedRate) public view returns(uint256) {\r\n        return self.depositPrincipal.add(self.depositInterest).mul(accruedRate).sub(self.depositPrincipal.mul(BASE)).div(BASE);\r\n    }\r\n\r\n    function calculateBorrowInterest(TokenInfo storage self, uint accruedRate) public view returns(uint256) {\r\n        uint256 _balance = self.borrowPrincipal;\r\n        if(accruedRate == 0 || _balance == 0 || BASE >= accruedRate) {\r\n            return self.borrowInterest;\r\n        } else {\r\n            return _balance.add(self.borrowInterest).mul(accruedRate).sub(_balance.mul(BASE)).div(BASE);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\ncontract Accounts is Constant, Initializable{\r\n    using AccountTokenLib for AccountTokenLib.TokenInfo;\r\n    using BitmapLib for uint128;\r\n    using SafeMath for uint256;\r\n    using Math for uint256;\r\n\r\n    mapping(address => Account) public accounts;\r\n    IGlobalConfig globalConfig;\r\n    mapping(address => uint256) public FINAmount;\r\n\r\n    modifier onlyAuthorized() {\r\n        require(msg.sender == address(globalConfig.savingAccount()) || msg.sender == address(globalConfig.bank()),\r\n            \"Only authorized to call from DeFiner internal contracts.\");\r\n        _;\r\n    }\r\n\r\n    struct Account {\r\n        // Note, it's best practice to use functions minusAmount, addAmount, totalAmount\r\n        // to operate tokenInfos instead of changing it directly.\r\n        mapping(address => AccountTokenLib.TokenInfo) tokenInfos;\r\n        uint128 depositBitmap;\r\n        uint128 borrowBitmap;\r\n    }\r\n\r\n    /**\r\n     * Initialize the Accounts\r\n     * @param _globalConfig the global configuration contract\r\n     */\r\n    function initialize(\r\n        IGlobalConfig _globalConfig\r\n    ) public initializer {\r\n        globalConfig = _globalConfig;\r\n    }\r\n\r\n    /**\r\n     * Check if the user has deposit for any tokens\r\n     * @param _account address of the user\r\n     * @return true if the user has positive deposit balance\r\n     */\r\n    function isUserHasAnyDeposits(address _account) public view returns (bool) {\r\n        Account storage account = accounts[_account];\r\n        return account.depositBitmap > 0;\r\n    }\r\n\r\n    /**\r\n     * Check if the user has deposit for a token\r\n     * @param _account address of the user\r\n     * @param _index index of the token\r\n     * @return true if the user has positive deposit balance for the token\r\n     */\r\n    function isUserHasDeposits(address _account, uint8 _index) public view returns (bool) {\r\n        Account storage account = accounts[_account];\r\n        return account.depositBitmap.isBitSet(_index);\r\n    }\r\n\r\n    /**\r\n     * Check if the user has borrowed a token\r\n     * @param _account address of the user\r\n     * @param _index index of the token\r\n     * @return true if the user has borrowed the token\r\n     */\r\n    function isUserHasBorrows(address _account, uint8 _index) public view returns (bool) {\r\n        Account storage account = accounts[_account];\r\n        return account.borrowBitmap.isBitSet(_index);\r\n    }\r\n\r\n    /**\r\n     * Set the deposit bitmap for a token.\r\n     * @param _account address of the user\r\n     * @param _index index of the token\r\n     */\r\n    function setInDepositBitmap(address _account, uint8 _index) internal {\r\n        Account storage account = accounts[_account];\r\n        account.depositBitmap = account.depositBitmap.setBit(_index);\r\n    }\r\n\r\n    /**\r\n     * Unset the deposit bitmap for a token\r\n     * @param _account address of the user\r\n     * @param _index index of the token\r\n     */\r\n    function unsetFromDepositBitmap(address _account, uint8 _index) internal {\r\n        Account storage account = accounts[_account];\r\n        account.depositBitmap = account.depositBitmap.unsetBit(_index);\r\n    }\r\n\r\n    /**\r\n     * Set the borrow bitmap for a token.\r\n     * @param _account address of the user\r\n     * @param _index index of the token\r\n     */\r\n    function setInBorrowBitmap(address _account, uint8 _index) internal {\r\n        Account storage account = accounts[_account];\r\n        account.borrowBitmap = account.borrowBitmap.setBit(_index);\r\n    }\r\n\r\n    /**\r\n     * Unset the borrow bitmap for a token\r\n     * @param _account address of the user\r\n     * @param _index index of the token\r\n     */\r\n    function unsetFromBorrowBitmap(address _account, uint8 _index) internal {\r\n        Account storage account = accounts[_account];\r\n        account.borrowBitmap = account.borrowBitmap.unsetBit(_index);\r\n    }\r\n\r\n    function getDepositPrincipal(address _accountAddr, address _token) public view returns(uint256) {\r\n        AccountTokenLib.TokenInfo storage tokenInfo = accounts[_accountAddr].tokenInfos[_token];\r\n        return tokenInfo.getDepositPrincipal();\r\n    }\r\n\r\n    function getBorrowPrincipal(address _accountAddr, address _token) public view returns(uint256) {\r\n        AccountTokenLib.TokenInfo storage tokenInfo = accounts[_accountAddr].tokenInfos[_token];\r\n        return tokenInfo.getBorrowPrincipal();\r\n    }\r\n\r\n    function getLastDepositBlock(address _accountAddr, address _token) public view returns(uint256) {\r\n        AccountTokenLib.TokenInfo storage tokenInfo = accounts[_accountAddr].tokenInfos[_token];\r\n        return tokenInfo.getLastDepositBlock();\r\n    }\r\n\r\n    function getLastBorrowBlock(address _accountAddr, address _token) public view returns(uint256) {\r\n        AccountTokenLib.TokenInfo storage tokenInfo = accounts[_accountAddr].tokenInfos[_token];\r\n        return tokenInfo.getLastBorrowBlock();\r\n    }\r\n\r\n    /**\r\n     * Get deposit interest of an account for a specific token\r\n     * @param _account account address\r\n     * @param _token token address\r\n     * @dev The deposit interest may not have been updated in AccountTokenLib, so we need to explicited calcuate it.\r\n     */\r\n    function getDepositInterest(address _account, address _token) public view returns(uint256) {\r\n        AccountTokenLib.TokenInfo storage tokenInfo = accounts[_account].tokenInfos[_token];\r\n        // If the account has never deposited the token, return 0.\r\n        if (tokenInfo.getLastDepositBlock() == 0)\r\n            return 0;\r\n        else {\r\n            // As the last deposit block exists, the block is also a check point on index curve.\r\n            uint256 accruedRate = IBank(globalConfig.bank()).getDepositAccruedRate(_token, tokenInfo.getLastDepositBlock());\r\n            return tokenInfo.calculateDepositInterest(accruedRate);\r\n        }\r\n    }\r\n\r\n    function getBorrowInterest(address _accountAddr, address _token) public view returns(uint256) {\r\n        AccountTokenLib.TokenInfo storage tokenInfo = accounts[_accountAddr].tokenInfos[_token];\r\n        // If the account has never borrowed the token, return 0\r\n        if (tokenInfo.getLastBorrowBlock() == 0)\r\n            return 0;\r\n        else {\r\n            // As the last borrow block exists, the block is also a check point on index curve.\r\n            uint256 accruedRate = IBank(globalConfig.bank()).getBorrowAccruedRate(_token, tokenInfo.getLastBorrowBlock());\r\n            return tokenInfo.calculateBorrowInterest(accruedRate);\r\n        }\r\n    }\r\n\r\n    function borrow(address _accountAddr, address _token, uint256 _amount) external onlyAuthorized {\r\n        require(_amount != 0, \"Borrow zero amount of token is not allowed.\");\r\n        require(isUserHasAnyDeposits(_accountAddr), \"The user doesn't have any deposits.\");\r\n        (uint8 tokenIndex, uint256 tokenDivisor, uint256 tokenPrice,) = ITokenRegistry(globalConfig.tokenInfoRegistry()).getTokenInfoFromAddress(_token);\r\n        require(\r\n            getBorrowETH(_accountAddr).add(_amount.mul(tokenPrice).div(tokenDivisor))\r\n            <= getBorrowPower(_accountAddr), \"Insufficient collateral when borrow.\"\r\n        );\r\n\r\n        AccountTokenLib.TokenInfo storage tokenInfo = accounts[_accountAddr].tokenInfos[_token];\r\n\r\n        if(tokenInfo.getLastBorrowBlock() == 0)\r\n            tokenInfo.borrow(_amount, INT_UNIT, getBlockNumber());\r\n        else {\r\n            calculateBorrowFIN(tokenInfo.getLastBorrowBlock(), _token, _accountAddr, getBlockNumber());\r\n            uint256 accruedRate = IBank(globalConfig.bank()).getBorrowAccruedRate(_token, tokenInfo.getLastBorrowBlock());\r\n            // Update the token principla and interest\r\n            tokenInfo.borrow(_amount, accruedRate, getBlockNumber());\r\n        }\r\n\r\n        // Since we have checked that borrow amount is larget than zero. We can set the borrow\r\n        // map directly without checking the borrow balance.\r\n        setInBorrowBitmap(_accountAddr, tokenIndex);\r\n    }\r\n\r\n    /**\r\n     * Update token info for withdraw. The interest will be withdrawn with higher priority.\r\n     */\r\n    function withdraw(address _accountAddr, address _token, uint256 _amount) public onlyAuthorized returns (uint256) {\r\n        (, uint256 tokenDivisor, uint256 tokenPrice, uint256 borrowLTV) = ITokenRegistry(globalConfig.tokenInfoRegistry()).getTokenInfoFromAddress(_token);\r\n\r\n        uint256 withdrawETH = _amount.mul(tokenPrice).mul(borrowLTV).div(tokenDivisor).div(100);\r\n        require(getBorrowETH(_accountAddr) <= getBorrowPower(_accountAddr).sub(withdrawETH), \"Insufficient collateral when withdraw.\");\r\n\r\n        (uint256 amountAfterCommission, ) = _withdraw(_accountAddr, _token, _amount, true);\r\n\r\n        return amountAfterCommission;\r\n    }\r\n\r\n    /**\r\n     * This function is called in liquidation function. There two difference between this function and\r\n     * the Account.withdraw function: 1) It doesn't check the user's borrow power, because the user\r\n     * is already borrowed more than it's borrowing power. 2) It doesn't take commissions.\r\n     */\r\n    function withdraw_liquidate(address _accountAddr, address _token, uint256 _amount) internal {\r\n        _withdraw(_accountAddr, _token, _amount, false);\r\n    }\r\n\r\n    function _withdraw(address _accountAddr, address _token, uint256 _amount, bool _isCommission) internal returns (uint256, uint256) {\r\n        // Check if withdraw amount is less than user's balance\r\n        require(_amount <= getDepositBalanceCurrent(_token, _accountAddr), \"Insufficient balance.\");\r\n\r\n        AccountTokenLib.TokenInfo storage tokenInfo = accounts[_accountAddr].tokenInfos[_token];\r\n        uint256 lastBlock = tokenInfo.getLastDepositBlock();\r\n        uint256 currentBlock = getBlockNumber();\r\n        calculateDepositFIN(lastBlock, _token, _accountAddr, currentBlock);\r\n\r\n        uint256 principalBeforeWithdraw = tokenInfo.getDepositPrincipal();\r\n\r\n        if (tokenInfo.getLastDepositBlock() == 0)\r\n            tokenInfo.withdraw(_amount, INT_UNIT, getBlockNumber());\r\n        else {\r\n            // As the last deposit block exists, the block is also a check point on index curve.\r\n            uint256 accruedRate = IBank(globalConfig.bank()).getDepositAccruedRate(_token, tokenInfo.getLastDepositBlock());\r\n            tokenInfo.withdraw(_amount, accruedRate, getBlockNumber());\r\n        }\r\n\r\n        uint256 principalAfterWithdraw = tokenInfo.getDepositPrincipal();\r\n        if(tokenInfo.getDepositPrincipal() == 0) {\r\n            uint8 tokenIndex = ITokenRegistry(globalConfig.tokenInfoRegistry()).getTokenIndex(_token);\r\n            unsetFromDepositBitmap(_accountAddr, tokenIndex);\r\n        }\r\n\r\n        uint256 commission = 0;\r\n        if (_isCommission && _accountAddr != globalConfig.deFinerCommunityFund()) {\r\n            // DeFiner takes 10% commission on the interest a user earn\r\n            commission = _amount.sub(principalBeforeWithdraw.sub(principalAfterWithdraw)).mul(globalConfig.deFinerRate()).div(100);\r\n            deposit(globalConfig.deFinerCommunityFund(), _token, commission);\r\n            _amount = _amount.sub(commission);\r\n        }\r\n\r\n        return (_amount, commission);\r\n    }\r\n\r\n    /**\r\n     * Update token info for deposit\r\n     */\r\n    function deposit(address _accountAddr, address _token, uint256 _amount) public onlyAuthorized {\r\n        AccountTokenLib.TokenInfo storage tokenInfo = accounts[_accountAddr].tokenInfos[_token];\r\n        if(tokenInfo.getDepositPrincipal() == 0) {\r\n            uint8 tokenIndex = ITokenRegistry(globalConfig.tokenInfoRegistry()).getTokenIndex(_token);\r\n            setInDepositBitmap(_accountAddr, tokenIndex);\r\n        }\r\n\r\n        if(tokenInfo.getLastDepositBlock() == 0)\r\n            tokenInfo.deposit(_amount, INT_UNIT, getBlockNumber());\r\n        else {\r\n            calculateDepositFIN(tokenInfo.getLastDepositBlock(), _token, _accountAddr, getBlockNumber());\r\n            uint256 accruedRate = IBank(globalConfig.bank()).getDepositAccruedRate(_token, tokenInfo.getLastDepositBlock());\r\n            tokenInfo.deposit(_amount, accruedRate, getBlockNumber());\r\n        }\r\n    }\r\n\r\n    function repay(address _accountAddr, address _token, uint256 _amount) public onlyAuthorized returns(uint256){\r\n        // Update tokenInfo\r\n        uint256 amountOwedWithInterest = getBorrowBalanceCurrent(_token, _accountAddr);\r\n        uint256 amount = _amount > amountOwedWithInterest ? amountOwedWithInterest : _amount;\r\n        uint256 remain =  _amount > amountOwedWithInterest ? _amount.sub(amountOwedWithInterest) : 0;\r\n        AccountTokenLib.TokenInfo storage tokenInfo = accounts[_accountAddr].tokenInfos[_token];\r\n        // Sanity check\r\n        require(tokenInfo.getBorrowPrincipal() > 0, \"Token BorrowPrincipal must be greater than 0. To deposit balance, please use deposit button.\");\r\n        if(tokenInfo.getLastBorrowBlock() == 0)\r\n            tokenInfo.repay(amount, INT_UNIT, getBlockNumber());\r\n        else {\r\n            calculateBorrowFIN(tokenInfo.getLastBorrowBlock(), _token, _accountAddr, getBlockNumber());\r\n            uint256 accruedRate = IBank(globalConfig.bank()).getBorrowAccruedRate(_token, tokenInfo.getLastBorrowBlock());\r\n            tokenInfo.repay(amount, accruedRate, getBlockNumber());\r\n        }\r\n\r\n        if(tokenInfo.getBorrowPrincipal() == 0) {\r\n            uint8 tokenIndex = ITokenRegistry(globalConfig.tokenInfoRegistry()).getTokenIndex(_token);\r\n            unsetFromBorrowBitmap(_accountAddr, tokenIndex);\r\n        }\r\n        return remain;\r\n    }\r\n\r\n    function getDepositBalanceCurrent(\r\n        address _token,\r\n        address _accountAddr\r\n    ) public view returns (uint256 depositBalance) {\r\n        AccountTokenLib.TokenInfo storage tokenInfo = accounts[_accountAddr].tokenInfos[_token];\r\n        IBank bank = IBank(globalConfig.bank());\r\n        uint256 accruedRate;\r\n        if(tokenInfo.getDepositPrincipal() == 0) {\r\n            return 0;\r\n        } else {\r\n            if(bank.depositRateIndex(_token, tokenInfo.getLastDepositBlock()) == 0) {\r\n                accruedRate = INT_UNIT;\r\n            } else {\r\n                accruedRate = bank.depositRateIndexNow(_token)\r\n                .mul(INT_UNIT)\r\n                .div(bank.depositRateIndex(_token, tokenInfo.getLastDepositBlock()));\r\n            }\r\n            return tokenInfo.getDepositBalance(accruedRate);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get current borrow balance of a token\r\n     * @param _token token address\r\n     * @dev This is an estimation. Add a new checkpoint first, if you want to derive the exact balance.\r\n     */\r\n    function getBorrowBalanceCurrent(\r\n        address _token,\r\n        address _accountAddr\r\n    ) public view returns (uint256 borrowBalance) {\r\n        AccountTokenLib.TokenInfo storage tokenInfo = accounts[_accountAddr].tokenInfos[_token];\r\n        IBank bank = IBank(globalConfig.bank());\r\n        uint256 accruedRate;\r\n        if(tokenInfo.getBorrowPrincipal() == 0) {\r\n            return 0;\r\n        } else {\r\n            if(bank.borrowRateIndex(_token, tokenInfo.getLastBorrowBlock()) == 0) {\r\n                accruedRate = INT_UNIT;\r\n            } else {\r\n                accruedRate = bank.borrowRateIndexNow(_token)\r\n                .mul(INT_UNIT)\r\n                .div(bank.borrowRateIndex(_token, tokenInfo.getLastBorrowBlock()));\r\n            }\r\n            return tokenInfo.getBorrowBalance(accruedRate);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate an account's borrow power based on token's LTV\r\n     */\r\n    function getBorrowPower(address _borrower) public view returns (uint256 power) {\r\n        ITokenRegistry tokenRegistry = ITokenRegistry(globalConfig.tokenInfoRegistry());\r\n        uint256 tokenNum = tokenRegistry.getCoinLength();\r\n        for(uint256 i = 0; i < tokenNum; i++) {\r\n            if (isUserHasDeposits(_borrower, uint8(i))) {\r\n                (address token, uint256 divisor, uint256 price, uint256 borrowLTV) = tokenRegistry.getTokenInfoFromIndex(i);\r\n\r\n                uint256 depositBalanceCurrent = getDepositBalanceCurrent(token, _borrower);\r\n                power = power.add(depositBalanceCurrent.mul(price).mul(borrowLTV).div(100).div(divisor));\r\n            }\r\n        }\r\n        return power;\r\n    }\r\n\r\n    /**\r\n     * Get current deposit balance of a token\r\n     * @dev This is an estimation. Add a new checkpoint first, if you want to derive the exact balance.\r\n     */\r\n    function getDepositETH(\r\n        address _accountAddr\r\n    ) public view returns (uint256 depositETH) {\r\n        ITokenRegistry tokenRegistry = ITokenRegistry(globalConfig.tokenInfoRegistry());\r\n        uint256 tokenNum = tokenRegistry.getCoinLength();\r\n        for(uint256 i = 0; i < tokenNum; i++) {\r\n            if(isUserHasDeposits(_accountAddr, uint8(i))) {\r\n                (address token, uint256 divisor, uint256 price, ) = tokenRegistry.getTokenInfoFromIndex(i);\r\n\r\n                uint256 depositBalanceCurrent = getDepositBalanceCurrent(token, _accountAddr);\r\n                depositETH = depositETH.add(depositBalanceCurrent.mul(price).div(divisor));\r\n            }\r\n        }\r\n        return depositETH;\r\n    }\r\n    /**\r\n     * Get borrowed balance of a token in the uint256 of Wei\r\n     */\r\n    function getBorrowETH(\r\n        address _accountAddr\r\n    ) public view returns (uint256 borrowETH) {\r\n        ITokenRegistry tokenRegistry = ITokenRegistry(globalConfig.tokenInfoRegistry());\r\n        uint256 tokenNum = tokenRegistry.getCoinLength();\r\n        for(uint256 i = 0; i < tokenNum; i++) {\r\n            if(isUserHasBorrows(_accountAddr, uint8(i))) {\r\n                (address token, uint256 divisor, uint256 price, ) = tokenRegistry.getTokenInfoFromIndex(i);\r\n\r\n                uint256 borrowBalanceCurrent = getBorrowBalanceCurrent(token, _accountAddr);\r\n                borrowETH = borrowETH.add(borrowBalanceCurrent.mul(price).div(divisor));\r\n            }\r\n        }\r\n        return borrowETH;\r\n    }\r\n\r\n    /**\r\n     * Check if the account is liquidatable\r\n     * @param _borrower borrower's account\r\n     * @return true if the account is liquidatable\r\n     */\r\n    function isAccountLiquidatable(address _borrower) public returns (bool) {\r\n        ITokenRegistry tokenRegistry = ITokenRegistry(globalConfig.tokenInfoRegistry());\r\n        IBank bank = IBank(globalConfig.bank());\r\n\r\n        // Add new rate check points for all the collateral tokens from borrower in order to\r\n        // have accurate calculation of liquidation oppotunites.\r\n        uint256 tokenNum = tokenRegistry.getCoinLength();\r\n        for(uint8 i = 0; i < tokenNum; i++) {\r\n            if (isUserHasDeposits(_borrower, i) || isUserHasBorrows(_borrower, i)) {\r\n                address token = tokenRegistry.addressFromIndex(i);\r\n                bank.newRateIndexCheckpoint(token);\r\n            }\r\n        }\r\n\r\n        uint256 liquidationThreshold = globalConfig.liquidationThreshold();\r\n        uint256 liquidationDiscountRatio = globalConfig.liquidationDiscountRatio();\r\n\r\n        uint256 totalBorrow = getBorrowETH(_borrower);\r\n        uint256 totalCollateral = getDepositETH(_borrower);\r\n\r\n        // It is required that LTV is larger than LIQUIDATE_THREADHOLD for liquidation\r\n        // return totalBorrow.mul(100) > totalCollateral.mul(liquidationThreshold);\r\n        return totalBorrow.mul(100) > totalCollateral.mul(liquidationThreshold) && totalBorrow.mul(100) <= totalCollateral.mul(liquidationDiscountRatio);\r\n    }\r\n\r\n    struct LiquidationVars {\r\n        uint256 borrowerCollateralValue;\r\n        uint256 targetTokenBalance;\r\n        uint256 targetTokenBalanceBorrowed;\r\n        uint256 targetTokenPrice;\r\n        uint256 liquidationDiscountRatio;\r\n        uint256 totalBorrow;\r\n        uint256 borrowPower;\r\n        uint256 liquidateTokenBalance;\r\n        uint256 liquidateTokenPrice;\r\n        uint256 limitRepaymentValue;\r\n        uint256 borrowTokenLTV;\r\n        uint256 repayAmount;\r\n        uint256 payAmount;\r\n    }\r\n\r\n    function liquidate(\r\n        address _liquidator,\r\n        address _borrower,\r\n        address _borrowedToken,\r\n        address _collateralToken\r\n    )\r\n        external\r\n        onlyAuthorized\r\n        returns (\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        require(isAccountLiquidatable(_borrower), \"The borrower is not liquidatable.\");\r\n\r\n        // It is required that the liquidator doesn't exceed it's borrow power.\r\n        require(\r\n            getBorrowETH(_liquidator) < getBorrowPower(_liquidator),\r\n            \"No extra funds are used for liquidation.\"\r\n        );\r\n\r\n        LiquidationVars memory vars;\r\n\r\n        ITokenRegistry tokenRegistry = ITokenRegistry(globalConfig.tokenInfoRegistry());\r\n\r\n        // _borrowedToken balance of the liquidator (deposit balance)\r\n        vars.targetTokenBalance = getDepositBalanceCurrent(_borrowedToken, _liquidator);\r\n        require(vars.targetTokenBalance > 0, \"The account amount must be greater than zero.\");\r\n\r\n        // _borrowedToken balance of the borrower (borrow balance)\r\n        vars.targetTokenBalanceBorrowed = getBorrowBalanceCurrent(_borrowedToken, _borrower);\r\n        require(vars.targetTokenBalanceBorrowed > 0, \"The borrower doesn't own any debt token specified by the liquidator.\");\r\n\r\n        // _borrowedToken available for liquidation\r\n        uint256 borrowedTokenAmountForLiquidation = vars.targetTokenBalance.min(vars.targetTokenBalanceBorrowed);\r\n\r\n        // _collateralToken balance of the borrower (deposit balance)\r\n        vars.liquidateTokenBalance = getDepositBalanceCurrent(_collateralToken, _borrower);\r\n        vars.liquidateTokenPrice = tokenRegistry.priceFromAddress(_collateralToken);\r\n\r\n        uint256 divisor = 10 ** uint256(tokenRegistry.getTokenDecimals(_borrowedToken));\r\n        uint256 liquidateTokendivisor = 10 ** uint256(tokenRegistry.getTokenDecimals(_collateralToken));\r\n\r\n        // _collateralToken to purchase so that borrower's balance matches its borrow power\r\n        vars.totalBorrow = getBorrowETH(_borrower);\r\n        vars.borrowPower = getBorrowPower(_borrower);\r\n        vars.liquidationDiscountRatio = globalConfig.liquidationDiscountRatio();\r\n        vars.borrowTokenLTV = tokenRegistry.getBorrowLTV(_borrowedToken);\r\n        vars.limitRepaymentValue = vars.totalBorrow.sub(vars.borrowPower).mul(100).div(vars.liquidationDiscountRatio.sub(vars.borrowTokenLTV));\r\n\r\n        uint256 collateralTokenValueForLiquidation = vars.limitRepaymentValue.min(vars.liquidateTokenBalance.mul(vars.liquidateTokenPrice).div(liquidateTokendivisor));\r\n\r\n        vars.targetTokenPrice = tokenRegistry.priceFromAddress(_borrowedToken);\r\n        uint256 liquidationValue = collateralTokenValueForLiquidation.min(borrowedTokenAmountForLiquidation.mul(vars.targetTokenPrice).mul(100).div(divisor).div(vars.liquidationDiscountRatio));\r\n\r\n        vars.repayAmount = liquidationValue.mul(vars.liquidationDiscountRatio).mul(divisor).div(100).div(vars.targetTokenPrice);\r\n        vars.payAmount = vars.repayAmount.mul(liquidateTokendivisor).mul(100).mul(vars.targetTokenPrice);\r\n        vars.payAmount = vars.payAmount.div(divisor).div(vars.liquidationDiscountRatio).div(vars.liquidateTokenPrice);\r\n\r\n        deposit(_liquidator, _collateralToken, vars.payAmount);\r\n        withdraw_liquidate(_liquidator, _borrowedToken, vars.repayAmount);\r\n        withdraw_liquidate(_borrower, _collateralToken, vars.payAmount);\r\n        repay(_borrower, _borrowedToken, vars.repayAmount);\r\n\r\n        return (vars.repayAmount, vars.payAmount);\r\n    }\r\n\r\n\r\n    /**\r\n     * Get current block number\r\n     * @return the current block number\r\n     */\r\n    function getBlockNumber() private view returns (uint256) {\r\n        return block.number;\r\n    }\r\n\r\n    /**\r\n     * An account claim all mined FIN token.\r\n     * @dev If the FIN mining index point doesn't exist, we have to calculate the FIN amount \r\n     * accurately. So the user can withdraw all available FIN tokens.\r\n     */\r\n    function claim(address _account) public onlyAuthorized returns(uint256){\r\n        ITokenRegistry tokenRegistry = ITokenRegistry(globalConfig.tokenInfoRegistry());\r\n        IBank bank = IBank(globalConfig.bank());\r\n        uint256 coinLength = tokenRegistry.getCoinLength();\r\n        for(uint8 i = 0; i < coinLength; i++) {\r\n            if (isUserHasDeposits(_account, i) || isUserHasBorrows(_account, i)) {\r\n                address token = tokenRegistry.addressFromIndex(i);\r\n                AccountTokenLib.TokenInfo storage tokenInfo = accounts[_account].tokenInfos[token];\r\n                uint256 currentBlock = getBlockNumber();\r\n                bank.updateMining(token);\r\n\r\n                if (isUserHasDeposits(_account, i)) {\r\n                    bank.updateDepositFINIndex(token);\r\n                    uint256 accruedRate = bank.getDepositAccruedRate(token, tokenInfo.getLastDepositBlock());\r\n                    calculateDepositFIN(tokenInfo.getLastDepositBlock(), token, _account, currentBlock);\r\n                    tokenInfo.deposit(0, accruedRate, currentBlock);\r\n                }\r\n\r\n                if (isUserHasBorrows(_account, i)) {\r\n                    bank.updateBorrowFINIndex(token);\r\n                    uint256 accruedRate = bank.getBorrowAccruedRate(token, tokenInfo.getLastBorrowBlock());\r\n                    calculateBorrowFIN(tokenInfo.getLastBorrowBlock(), token, _account, currentBlock);\r\n                    tokenInfo.borrow(0, accruedRate, currentBlock);\r\n                }\r\n            }\r\n        }\r\n        uint256 _FINAmount = FINAmount[_account];\r\n        FINAmount[_account] = 0;\r\n        return _FINAmount;\r\n    }\r\n\r\n    /**\r\n     * Accumulate the amount FIN mined by depositing between _lastBlock and _currentBlock\r\n     */\r\n    function calculateDepositFIN(uint256 _lastBlock, address _token, address _accountAddr, uint256 _currentBlock) internal {\r\n        IBank bank = IBank(globalConfig.bank());\r\n\r\n        uint256 indexDifference = bank.depositFINRateIndex(_token, _currentBlock)\r\n                                .sub(bank.depositFINRateIndex(_token, _lastBlock));\r\n        uint256 getFIN = getDepositBalanceCurrent(_token, _accountAddr)\r\n                        .mul(indexDifference)\r\n                        .div(bank.depositRateIndex(_token, _currentBlock));\r\n        FINAmount[_accountAddr] = FINAmount[_accountAddr].add(getFIN);\r\n    }\r\n\r\n    /**\r\n     * Accumulate the amount FIN mined by borrowing between _lastBlock and _currentBlock\r\n     */\r\n    function calculateBorrowFIN(uint256 _lastBlock, address _token, address _accountAddr, uint256 _currentBlock) internal {\r\n        IBank bank = IBank(globalConfig.bank());\r\n\r\n        uint256 indexDifference = bank.borrowFINRateIndex(_token, _currentBlock)\r\n                                .sub(bank.borrowFINRateIndex(_token, _lastBlock));\r\n        uint256 getFIN = getBorrowBalanceCurrent(_token, _accountAddr)\r\n                        .mul(indexDifference)\r\n                        .div(bank.borrowRateIndex(_token, _currentBlock));\r\n        FINAmount[_accountAddr] = FINAmount[_accountAddr].add(getFIN);\r\n    }\r\n}\r\n\r\ninterface IGlobalConfig {\r\n    function constants() external view returns (address);\r\n    function tokenInfoRegistry() external view returns (address);\r\n    function chainLink() external view returns (address);\r\n    function bank() external view returns (address);\r\n    function savingAccount() external view returns (address);\r\n    function accounts() external view returns (address);\r\n    function maxReserveRatio() external view returns (uint256);\r\n    function midReserveRatio() external view returns (uint256);\r\n    function minReserveRatio() external view returns (uint256);\r\n    function rateCurveSlope() external view returns (uint256);\r\n    function rateCurveConstant() external view returns (uint256);\r\n    function compoundSupplyRateWeights() external view returns (uint256);\r\n    function compoundBorrowRateWeights() external view returns (uint256);\r\n    function deFinerCommunityFund() external view returns (address);\r\n    function deFinerRate() external view returns (uint256);\r\n    function liquidationThreshold() external view returns (uint256);\r\n    function liquidationDiscountRatio() external view returns (uint256);\r\n}\r\n\r\ninterface ITokenRegistry {\r\n    function getTokenDecimals(address) external view returns (uint8);\r\n    function getCToken(address) external view returns (address);\r\n    function depositeMiningSpeeds(address) external view returns (uint);\r\n    function borrowMiningSpeeds(address) external view returns (uint);\r\n    function isSupportedOnCompound(address) external view returns (bool);\r\n    function getTokenInfoFromIndex(uint) external view returns (address, uint, uint, uint);\r\n    function getTokenInfoFromAddress(address) external view returns (uint8 ,uint ,uint ,uint);\r\n    function getTokenIndex(address) external view returns (uint8);\r\n    function getCoinLength() external view returns (uint);\r\n    function priceFromAddress(address) external view returns(uint);\r\n    function getBorrowLTV(address) external view returns (uint);\r\n    function addressFromIndex(uint) external view returns (address);\r\n}\r\n\r\ninterface IAccount {\r\n    function deposit(address, address, uint256) external;\r\n    function borrow(address, address, uint256) external;\r\n    function getBorrowPrincipal(address, address) external view returns (uint256);\r\n    function withdraw(address, address, uint256) external returns (uint256);\r\n    function repay(address, address, uint256) external returns (uint256);\r\n}\r\n\r\ninterface ISavingAccount {\r\n    function toCompound(address, uint256) external;\r\n    function fromCompound(address, uint256) external;\r\n}\r\n\r\ninterface IBank {\r\n    function depositRateIndex(address, uint) external view returns (uint);\r\n    function borrowRateIndex(address, uint) external view returns (uint);\r\n\r\n    function depositRateIndexNow(address) external view returns (uint);\r\n    function borrowRateIndexNow(address) external view returns (uint);\r\n\r\n    function newRateIndexCheckpoint(address) external;\r\n    function updateMining(address) external;\r\n\r\n    function updateDepositFINIndex(address) external;\r\n    function updateBorrowFINIndex(address) external;\r\n\r\n    function getDepositAccruedRate(address, uint) external view returns (uint);\r\n    function getBorrowAccruedRate(address, uint) external view returns (uint);\r\n\r\n    function depositFINRateIndex(address, uint) external view returns (uint);\r\n    function borrowFINRateIndex(address, uint) external view returns (uint);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ACCURACY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BLOCKS_PER_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"FINAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INT_UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"depositBitmap\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"borrowBitmap\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accountAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accountAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_accountAddr\",\"type\":\"address\"}],\"name\":\"getBorrowBalanceCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accountAddr\",\"type\":\"address\"}],\"name\":\"getBorrowETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowETH\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accountAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getBorrowInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getBorrowPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accountAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getBorrowPrincipal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_accountAddr\",\"type\":\"address\"}],\"name\":\"getDepositBalanceCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accountAddr\",\"type\":\"address\"}],\"name\":\"getDepositETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositETH\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getDepositInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accountAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getDepositPrincipal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accountAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getLastBorrowBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accountAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getLastDepositBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IGlobalConfig\",\"name\":\"_globalConfig\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"isAccountLiquidatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isUserHasAnyDeposits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"isUserHasBorrows\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"isUserHasDeposits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrowedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accountAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accountAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Accounts","CompilerVersion":"v0.5.14+commit.01f1aaa4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"AccountTokenLib:0d6cce05975967002e20354778c398a89ebea9b4","LicenseType":"GNU LGPLv2.1","Proxy":"0","Implementation":"","SwarmSource":"bzzr://eef44ef0f3f850677d988e37dd928b713d9135add76fcb152627c6319579792e"}]}