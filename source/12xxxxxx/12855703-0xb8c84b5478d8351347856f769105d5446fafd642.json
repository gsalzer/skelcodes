{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface RegistryInterface {\r\n  function signer(address) external view returns (bool);\r\n  function isConnector(address[] calldata) external view returns (bool);\r\n}\r\n\r\ncontract Flusher {\r\n  event LogCast(address indexed sender, uint value);\r\n\r\n  RegistryInterface public constant registry = RegistryInterface(address(0)); // TODO - Change while deploying.\r\n\r\n  function spell(address _target, bytes memory _data) internal {\r\n    require(_target != address(0), \"target-invalid\");\r\n    assembly {\r\n      let succeeded := delegatecall(gas(), _target, add(_data, 0x20), mload(_data), 0, 0)\r\n      switch iszero(succeeded)\r\n        case 1 {\r\n            let size := returndatasize()\r\n            returndatacopy(0x00, 0x00, size)\r\n            revert(0x00, size)\r\n        }\r\n    }\r\n  }\r\n\r\n  function cast(address[] calldata _targets, bytes[] calldata _datas) external payable {\r\n    require(registry.signer(msg.sender), \"not-signer\");\r\n    require(_targets.length == _datas.length , \"invalid-array-length\");\r\n    require(registry.isConnector(_targets), \"not-connector\");\r\n    for (uint i = 0; i < _targets.length; i++) {\r\n        spell(_targets[i], _datas[i]);\r\n    }\r\n    emit LogCast(msg.sender, msg.value);\r\n  }\r\n\r\n  receive() external payable {}\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogCast\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_datas\",\"type\":\"bytes[]\"}],\"name\":\"cast\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract RegistryInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Flusher","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b5469e3106bf889817afae65f027e0d06bc424290644fa3a9f1dd78e406eeaed"}]}