{"status":"1","message":"OK","result":[{"SourceCode":"{\"Include.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\n/**\\r\\n * @title Initializable\\r\\n *\\r\\n * @dev Helper contract to support initializer functions. To use it, replace\\r\\n * the constructor with a function that has the `initializer` modifier.\\r\\n * WARNING: Unlike constructors, initializer functions must be manually\\r\\n * invoked. This applies both to deploying an Initializable contract, as well\\r\\n * as extending an Initializable contract via inheritance.\\r\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\r\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\r\\n * because this is not dealt with automatically as with constructors.\\r\\n */\\r\\ncontract Initializable {\\r\\n\\r\\n  /**\\r\\n   * @dev Indicates that the contract has been initialized.\\r\\n   */\\r\\n  bool private initialized;\\r\\n\\r\\n  /**\\r\\n   * @dev Indicates that the contract is in the process of being initialized.\\r\\n   */\\r\\n  bool private initializing;\\r\\n\\r\\n  /**\\r\\n   * @dev Modifier to use in the initializer function of a contract.\\r\\n   */\\r\\n  modifier initializer() {\\r\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\r\\n\\r\\n    bool isTopLevelCall = !initializing;\\r\\n    if (isTopLevelCall) {\\r\\n      initializing = true;\\r\\n      initialized = true;\\r\\n    }\\r\\n\\r\\n    _;\\r\\n\\r\\n    if (isTopLevelCall) {\\r\\n      initializing = false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Returns true if and only if the function is running in the constructor\\r\\n  function isConstructor() private view returns (bool) {\\r\\n    // extcodesize checks the size of the code stored in an address, and\\r\\n    // address returns the current address. Since the code is still not\\r\\n    // deployed when running a constructor, any checks on its code size will\\r\\n    // yield zero, making it an effective way to detect if a contract is\\r\\n    // under construction or not.\\r\\n    address self = address(this);\\r\\n    uint256 cs;\\r\\n    assembly { cs := extcodesize(self) }\\r\\n    return cs == 0;\\r\\n  }\\r\\n\\r\\n  // Reserved storage space to allow for layout changes in the future.\\r\\n  uint256[50] private ______gap;\\r\\n}\\r\\n\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\ncontract ContextUpgradeSafe is Initializable {\\r\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\r\\n    // an instance of this contract, which should be used via inheritance.\\r\\n\\r\\n    function __Context_init() internal initializer {\\r\\n        __Context_init_unchained();\\r\\n    }\\r\\n\\r\\n    function __Context_init_unchained() internal initializer {\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n\\r\\n    uint256[50] private __gap;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Standard math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary Math {\\r\\n    /**\\r\\n     * @dev Returns the largest of two numbers.\\r\\n     */\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a \\u003e= b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two numbers.\\r\\n     */\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a \\u003c b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two numbers. The result is rounded towards\\r\\n     * zero.\\r\\n     */\\r\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b) / 2 can overflow, so we distribute\\r\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub0(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a \\u003e b ? a - b : 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { codehash := extcodehash(account) }\\r\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20MinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\r\\n * of returning `false` on failure. This behavior is nonetheless conventional\\r\\n * and does not conflict with the expectations of ERC20 applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn\\u0027t required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20UpgradeSafe is Initializable, ContextUpgradeSafe, IERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\r\\n     * a default value of 18.\\r\\n     *\\r\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\r\\n     *\\r\\n     * All three of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n\\r\\n    function __ERC20_init(string memory name, string memory symbol) internal initializer {\\r\\n        __Context_init_unchained();\\r\\n        __ERC20_init_unchained(name, symbol);\\r\\n    }\\r\\n\\r\\n    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\\r\\n\\r\\n\\r\\n        _name = name;\\r\\n        _symbol = symbol;\\r\\n        _decimals = 18;\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\r\\n     * called.\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20};\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\r\\n     *\\r\\n     * This is internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\r\\n     *\\r\\n     * WARNING: This function should only be called from the constructor. Most\\r\\n     * applications that interact with token contracts will not expect\\r\\n     * {decimals} to ever change, and may work incorrectly if it does.\\r\\n     */\\r\\n    function _setupDecimals(uint8 decimals_) internal {\\r\\n        _decimals = decimals_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\r\\n     * will be to transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\r\\n\\r\\n    uint256[44] private __gap;\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\r\\n        // we\\u0027re implementing it ourselves.\\r\\n\\r\\n        // A Solidity high level call has three parts:\\r\\n        //  1. The target address is checked to verify it contains contract code\\r\\n        //  2. The call itself is made, and success asserted\\r\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = address(token).call(data);\\r\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\r\\n\\r\\n        if (returndata.length \\u003e 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\ncontract Governable is Initializable {\\r\\n    address public governor;\\r\\n\\r\\n    event GovernorshipTransferred(address indexed previousGovernor, address indexed newGovernor);\\r\\n\\r\\n    /**\\r\\n     * @dev Contract initializer.\\r\\n     * called once by the factory at time of deployment\\r\\n     */\\r\\n    function __Governable_init_unchained(address governor_) virtual public initializer {\\r\\n        governor = governor_;\\r\\n        emit GovernorshipTransferred(address(0), governor);\\r\\n    }\\r\\n\\r\\n    modifier governance() {\\r\\n        require(msg.sender == governor);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the current governor to relinquish control of the contract.\\r\\n     * @notice Renouncing to governorship will leave the contract without an governor.\\r\\n     * It will not be possible to call the functions with the `governance`\\r\\n     * modifier anymore.\\r\\n     */\\r\\n    function renounceGovernorship() public governance {\\r\\n        emit GovernorshipTransferred(governor, address(0));\\r\\n        governor = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the current governor to transfer control of the contract to a newGovernor.\\r\\n     * @param newGovernor The address to transfer governorship to.\\r\\n     */\\r\\n    function transferGovernorship(address newGovernor) public governance {\\r\\n        _transferGovernorship(newGovernor);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers control of the contract to a newGovernor.\\r\\n     * @param newGovernor The address to transfer governorship to.\\r\\n     */\\r\\n    function _transferGovernorship(address newGovernor) internal {\\r\\n        require(newGovernor != address(0));\\r\\n        emit GovernorshipTransferred(governor, newGovernor);\\r\\n        governor = newGovernor;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\ncontract Configurable is Governable {\\r\\n\\r\\n    mapping (bytes32 =\\u003e uint) internal config;\\r\\n    \\r\\n    function getConfig(bytes32 key) public view returns (uint) {\\r\\n        return config[key];\\r\\n    }\\r\\n    function getConfig(bytes32 key, uint index) public view returns (uint) {\\r\\n        return config[bytes32(uint(key) ^ index)];\\r\\n    }\\r\\n    function getConfig(bytes32 key, address addr) public view returns (uint) {\\r\\n        return config[bytes32(uint(key) ^ uint(addr))];\\r\\n    }\\r\\n\\r\\n    function _setConfig(bytes32 key, uint value) internal {\\r\\n        if(config[key] != value)\\r\\n            config[key] = value;\\r\\n    }\\r\\n    function _setConfig(bytes32 key, uint index, uint value) internal {\\r\\n        _setConfig(bytes32(uint(key) ^ index), value);\\r\\n    }\\r\\n    function _setConfig(bytes32 key, address addr, uint value) internal {\\r\\n        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\\r\\n    }\\r\\n    \\r\\n    function setConfig(bytes32 key, uint value) external governance {\\r\\n        _setConfig(key, value);\\r\\n    }\\r\\n    function setConfig(bytes32 key, uint index, uint value) external governance {\\r\\n        _setConfig(bytes32(uint(key) ^ index), value);\\r\\n    }\\r\\n    function setConfig(bytes32 key, address addr, uint value) public governance {\\r\\n        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\\r\\n    }\\r\\n}\\r\\n\"},\"ONE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport \\\"./Include.sol\\\";\\r\\n\\r\\ncontract ApprovedERC20 is ERC20UpgradeSafe, Configurable {\\r\\n    address public operator;\\r\\n\\r\\n\\tfunction __ApprovedERC20_init_unchained(address operator_) public governance {\\r\\n\\t\\toperator = operator_;\\r\\n\\t}\\r\\n\\t\\r\\n\\tmodifier onlyOperator {\\r\\n\\t    require(msg.sender == operator, \\u0027called only by operator\\u0027);\\r\\n\\t    _;\\r\\n\\t}\\r\\n\\r\\n    function transferFrom_(address sender, address recipient, uint256 amount) external onlyOperator returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract MintableERC20 is ApprovedERC20 {\\r\\n\\tfunction mint_(address acct, uint amt) external onlyOperator {\\r\\n\\t    _mint(acct, amt);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction burn_(address acct, uint amt) external onlyOperator {\\r\\n\\t    _burn(acct, amt);\\r\\n\\t}\\r\\n}\\r\\n\\r\\ncontract ONE is MintableERC20 {\\r\\n\\tfunction __ONE_init(address governor_, address vault_, address oneMine) external initializer {\\r\\n        __Context_init_unchained();\\r\\n\\t\\t__ERC20_init_unchained(\\\"One Eth\\\", \\\"ONE\\\");\\r\\n\\t\\t__Governable_init_unchained(governor_);\\r\\n\\t\\t__ApprovedERC20_init_unchained(vault_);\\r\\n\\t\\t__ONE_init_unchained(oneMine);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction __ONE_init_unchained(address oneMine) public governance {\\r\\n\\t\\t_mint(oneMine, 100 * 10 ** uint256(decimals()));\\r\\n\\t}\\r\\n\\t\\r\\n}\\r\\n\\r\\ncontract ONS is ApprovedERC20 {\\r\\n\\tfunction __ONS_init(address governor_, address oneMinter_, address onsMine, address offering, address timelock) external initializer {\\r\\n        __Context_init_unchained();\\r\\n\\t\\t__ERC20_init(\\\"One Share\\\", \\\"ONS\\\");\\r\\n\\t\\t__Governable_init_unchained(governor_);\\r\\n\\t\\t__ApprovedERC20_init_unchained(oneMinter_);\\r\\n\\t\\t__ONS_init_unchained(onsMine, offering, timelock);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction __ONS_init_unchained(address onsMine, address offering, address timelock) public governance {\\r\\n\\t\\t_mint(onsMine, 90000 * 10 ** uint256(decimals()));\\t\\t// 90%\\r\\n\\t\\t_mint(offering, 5000 * 10 ** uint256(decimals()));\\t\\t//  5%\\r\\n\\t\\t_mint(timelock, 5000 * 10 ** uint256(decimals()));\\t\\t//  5%\\r\\n\\t}\\r\\n\\r\\n}\\r\\n\\r\\ncontract ONB is MintableERC20 {\\r\\n\\tfunction __ONB_init(address governor_, address vault_) virtual external initializer {\\r\\n        __Context_init_unchained();\\r\\n\\t\\t__ERC20_init(\\\"One Bond\\\", \\\"ONB\\\");\\r\\n\\t\\t__Governable_init_unchained(governor_);\\r\\n\\t\\t__ApprovedERC20_init_unchained(vault_);\\r\\n\\t}\\r\\n\\r\\n    function _beforeTokenTransfer(address from, address to, uint256) internal virtual override {\\r\\n        require(from == address(0) || to == address(0), \\u0027ONB is untransferable\\u0027);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Offering is Configurable {\\r\\n\\tusing SafeMath for uint;\\r\\n\\tusing SafeERC20 for IERC20;\\r\\n\\t\\r\\n\\tbytes32 internal constant _quota_      = \\u0027quota\\u0027;\\r\\n\\tbytes32 internal _quota_0              = \\u0027\\u0027;            // placeholder\\r\\n\\t\\r\\n\\tIERC20 public token;\\r\\n\\tIERC20 public currency;\\r\\n\\tuint public price;\\r\\n\\taddress public vault;\\r\\n\\tuint public begin;\\r\\n\\tuint public span;\\r\\n\\tmapping (address =\\u003e uint) public offeredOf;\\r\\n\\t\\r\\n\\tfunction __Offering_init(address governor_, address _token, address _currency, uint _price, uint _quota, address _vault, uint _begin, uint _span) external initializer {\\r\\n\\t\\t__Governable_init_unchained(governor_);\\r\\n\\t\\t__Offering_init_unchained(_token, _currency, _price, _quota, _vault, _begin, _span);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction __Offering_init_unchained(address _token, address _currency, uint _price, uint _quota, address _vault, uint _begin, uint _span) public governance {\\r\\n\\t\\ttoken = IERC20(_token);\\r\\n\\t\\tcurrency = IERC20(_currency);\\r\\n\\t\\tprice = _price;\\r\\n\\t\\tvault = _vault;\\r\\n\\t\\tbegin = _begin;\\r\\n\\t\\tspan = _span;\\r\\n\\t\\tconfig[_quota_] = _quota;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction offer(uint vol) external {\\r\\n\\t\\trequire(now \\u003e= begin, \\u0027Not begin\\u0027);\\r\\n\\t\\tif(now \\u003e begin.add(span))\\r\\n\\t\\t\\tif(token.balanceOf(address(this)) \\u003e 0)\\r\\n\\t\\t\\t\\ttoken.safeTransfer(vault, token.balanceOf(address(this)));\\r\\n\\t\\t\\telse\\r\\n\\t\\t\\t\\trevert(\\u0027offer over\\u0027);\\r\\n\\t\\trequire(offeredOf[msg.sender] \\u003c config[_quota_], \\u0027out of quota\\u0027);\\r\\n\\t\\tvol = Math.min(Math.min(vol, config[_quota_].sub(offeredOf[msg.sender])), token.balanceOf(address(this)));\\r\\n\\t\\tofferedOf[msg.sender] = offeredOf[msg.sender].add(vol);\\r\\n\\t\\tuint amt = vol.mul(price).div(1e18);\\r\\n\\t\\tcurrency.safeTransferFrom(msg.sender, address(this), amt);\\r\\n\\t\\tcurrency.approve(vault, amt);\\r\\n\\t\\tIVault(vault).receiveAEthFrom(address(this), amt);\\r\\n\\t\\ttoken.safeTransfer(msg.sender, vol);\\r\\n\\t}\\r\\n}\\r\\n\\r\\ninterface IVault {\\r\\n    function receiveAEthFrom(address from, uint vol) external;\\r\\n}\\r\\n\\r\\ncontract Timelock is Configurable {\\r\\n\\tusing SafeMath for uint;\\r\\n\\tusing SafeERC20 for IERC20;\\r\\n\\t\\r\\n\\tIERC20 public token;\\r\\n\\taddress public recipient;\\r\\n\\tuint public begin;\\r\\n\\tuint public span;\\r\\n\\tuint public times;\\r\\n\\tuint public total;\\r\\n\\t\\r\\n\\tfunction start(address _token, address _recipient, uint _begin, uint _span, uint _times) external governance {\\r\\n\\t\\trequire(address(token) == address(0), \\u0027already start\\u0027);\\r\\n\\t\\ttoken = IERC20(_token);\\r\\n\\t\\trecipient = _recipient;\\r\\n\\t\\tbegin = _begin;\\r\\n\\t\\tspan = _span;\\r\\n\\t\\ttimes = _times;\\r\\n\\t\\ttotal = token.balanceOf(address(this));\\r\\n\\t}\\r\\n\\r\\n    function unlockCapacity() public view returns (uint) {\\r\\n       if(begin == 0 || now \\u003c begin)\\r\\n            return 0;\\r\\n            \\r\\n        for(uint i=1; i\\u003c=times; i++)\\r\\n            if(now \\u003c span.mul(i).div(times).add(begin))\\r\\n                return token.balanceOf(address(this)).sub(total.mul(times.sub(i)).div(times));\\r\\n                \\r\\n        return token.balanceOf(address(this));\\r\\n    }\\r\\n    \\r\\n    function unlock() public {\\r\\n        token.safeTransfer(recipient, unlockCapacity());\\r\\n    }\\r\\n    \\r\\n    fallback() external {\\r\\n        unlock();\\r\\n    }\\r\\n}\\r\\n\"},\"SwapLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity \\u003e=0.5.0;\\r\\n\\r\\nimport \\\"./Include.sol\\\";\\r\\n\\r\\n//import \\u0027@uniswap/lib/contracts/libraries/FixedPoint.sol\\u0027;\\r\\n//import \\u0027./FullMath.sol\\u0027;\\r\\n\\r\\n// taken from https://medium.com/coinmonks/math-in-solidity-part-3-percents-and-proportions-4db014e080b1\\r\\n// license is CC-BY-4.0\\r\\nlibrary FullMath {\\r\\n    function fullMul(uint256 x, uint256 y) internal pure returns (uint256 l, uint256 h) {\\r\\n        uint256 mm = mulmod(x, y, uint256(-1));\\r\\n        l = x * y;\\r\\n        h = mm - l;\\r\\n        if (mm \\u003c l) h -= 1;\\r\\n    }\\r\\n\\r\\n    function fullDiv(\\r\\n        uint256 l,\\r\\n        uint256 h,\\r\\n        uint256 d\\r\\n    ) private pure returns (uint256) {\\r\\n        uint256 pow2 = d \\u0026 -d;\\r\\n        d /= pow2;\\r\\n        l /= pow2;\\r\\n        l += h * ((-pow2) / pow2 + 1);\\r\\n        uint256 r = 1;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        return l * r;\\r\\n    }\\r\\n\\r\\n    function mulDiv(\\r\\n        uint256 x,\\r\\n        uint256 y,\\r\\n        uint256 d\\r\\n    ) internal pure returns (uint256) {\\r\\n        (uint256 l, uint256 h) = fullMul(x, y);\\r\\n\\r\\n        uint256 mm = mulmod(x, y, d);\\r\\n        if (mm \\u003e l) h -= 1;\\r\\n        l -= mm;\\r\\n\\r\\n        if (h == 0) return l / d;\\r\\n\\r\\n        require(h \\u003c d, \\u0027FullMath: FULLDIV_OVERFLOW\\u0027);\\r\\n        return fullDiv(l, h, d);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n//import \\u0027./Babylonian.sol\\u0027;\\r\\n// computes square roots using the babylonian method\\r\\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\\r\\nlibrary Babylonian {\\r\\n    // credit for this implementation goes to\\r\\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\r\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\r\\n        if (x == 0) return 0;\\r\\n        // this block is equivalent to r = uint256(1) \\u003c\\u003c (BitMath.mostSignificantBit(x) / 2);\\r\\n        // however that code costs significantly more gas\\r\\n        uint256 xx = x;\\r\\n        uint256 r = 1;\\r\\n        if (xx \\u003e= 0x100000000000000000000000000000000) {\\r\\n            xx \\u003e\\u003e= 128;\\r\\n            r \\u003c\\u003c= 64;\\r\\n        }\\r\\n        if (xx \\u003e= 0x10000000000000000) {\\r\\n            xx \\u003e\\u003e= 64;\\r\\n            r \\u003c\\u003c= 32;\\r\\n        }\\r\\n        if (xx \\u003e= 0x100000000) {\\r\\n            xx \\u003e\\u003e= 32;\\r\\n            r \\u003c\\u003c= 16;\\r\\n        }\\r\\n        if (xx \\u003e= 0x10000) {\\r\\n            xx \\u003e\\u003e= 16;\\r\\n            r \\u003c\\u003c= 8;\\r\\n        }\\r\\n        if (xx \\u003e= 0x100) {\\r\\n            xx \\u003e\\u003e= 8;\\r\\n            r \\u003c\\u003c= 4;\\r\\n        }\\r\\n        if (xx \\u003e= 0x10) {\\r\\n            xx \\u003e\\u003e= 4;\\r\\n            r \\u003c\\u003c= 2;\\r\\n        }\\r\\n        if (xx \\u003e= 0x8) {\\r\\n            r \\u003c\\u003c= 1;\\r\\n        }\\r\\n        r = (r + x / r) \\u003e\\u003e 1;\\r\\n        r = (r + x / r) \\u003e\\u003e 1;\\r\\n        r = (r + x / r) \\u003e\\u003e 1;\\r\\n        r = (r + x / r) \\u003e\\u003e 1;\\r\\n        r = (r + x / r) \\u003e\\u003e 1;\\r\\n        r = (r + x / r) \\u003e\\u003e 1;\\r\\n        r = (r + x / r) \\u003e\\u003e 1; // Seven iterations should be enough\\r\\n        uint256 r1 = x / r;\\r\\n        return (r \\u003c r1 ? r : r1);\\r\\n    }\\r\\n}\\r\\n\\r\\n//import \\u0027./BitMath.sol\\u0027;\\r\\nlibrary BitMath {\\r\\n    // returns the 0 indexed position of the most significant bit of the input x\\r\\n    // s.t. x \\u003e= 2**msb and x \\u003c 2**(msb+1)\\r\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\r\\n        require(x \\u003e 0, \\u0027BitMath::mostSignificantBit: zero\\u0027);\\r\\n\\r\\n        if (x \\u003e= 0x100000000000000000000000000000000) {\\r\\n            x \\u003e\\u003e= 128;\\r\\n            r += 128;\\r\\n        }\\r\\n        if (x \\u003e= 0x10000000000000000) {\\r\\n            x \\u003e\\u003e= 64;\\r\\n            r += 64;\\r\\n        }\\r\\n        if (x \\u003e= 0x100000000) {\\r\\n            x \\u003e\\u003e= 32;\\r\\n            r += 32;\\r\\n        }\\r\\n        if (x \\u003e= 0x10000) {\\r\\n            x \\u003e\\u003e= 16;\\r\\n            r += 16;\\r\\n        }\\r\\n        if (x \\u003e= 0x100) {\\r\\n            x \\u003e\\u003e= 8;\\r\\n            r += 8;\\r\\n        }\\r\\n        if (x \\u003e= 0x10) {\\r\\n            x \\u003e\\u003e= 4;\\r\\n            r += 4;\\r\\n        }\\r\\n        if (x \\u003e= 0x4) {\\r\\n            x \\u003e\\u003e= 2;\\r\\n            r += 2;\\r\\n        }\\r\\n        if (x \\u003e= 0x2) r += 1;\\r\\n    }\\r\\n\\r\\n    // returns the 0 indexed position of the least significant bit of the input x\\r\\n    // s.t. (x \\u0026 2**lsb) != 0 and (x \\u0026 (2**(lsb) - 1)) == 0)\\r\\n    // i.e. the bit at the index is set and the mask of all lower bits is 0\\r\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\r\\n        require(x \\u003e 0, \\u0027BitMath::leastSignificantBit: zero\\u0027);\\r\\n\\r\\n        r = 255;\\r\\n        if (x \\u0026 uint128(-1) \\u003e 0) {\\r\\n            r -= 128;\\r\\n        } else {\\r\\n            x \\u003e\\u003e= 128;\\r\\n        }\\r\\n        if (x \\u0026 uint64(-1) \\u003e 0) {\\r\\n            r -= 64;\\r\\n        } else {\\r\\n            x \\u003e\\u003e= 64;\\r\\n        }\\r\\n        if (x \\u0026 uint32(-1) \\u003e 0) {\\r\\n            r -= 32;\\r\\n        } else {\\r\\n            x \\u003e\\u003e= 32;\\r\\n        }\\r\\n        if (x \\u0026 uint16(-1) \\u003e 0) {\\r\\n            r -= 16;\\r\\n        } else {\\r\\n            x \\u003e\\u003e= 16;\\r\\n        }\\r\\n        if (x \\u0026 uint8(-1) \\u003e 0) {\\r\\n            r -= 8;\\r\\n        } else {\\r\\n            x \\u003e\\u003e= 8;\\r\\n        }\\r\\n        if (x \\u0026 0xf \\u003e 0) {\\r\\n            r -= 4;\\r\\n        } else {\\r\\n            x \\u003e\\u003e= 4;\\r\\n        }\\r\\n        if (x \\u0026 0x3 \\u003e 0) {\\r\\n            r -= 2;\\r\\n        } else {\\r\\n            x \\u003e\\u003e= 2;\\r\\n        }\\r\\n        if (x \\u0026 0x1 \\u003e 0) r -= 1;\\r\\n    }\\r\\n}\\r\\n\\r\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\r\\nlibrary FixedPoint {\\r\\n    // range: [0, 2**112 - 1]\\r\\n    // resolution: 1 / 2**112\\r\\n    struct uq112x112 {\\r\\n        uint224 _x;\\r\\n    }\\r\\n\\r\\n    // range: [0, 2**144 - 1]\\r\\n    // resolution: 1 / 2**112\\r\\n    struct uq144x112 {\\r\\n        uint256 _x;\\r\\n    }\\r\\n\\r\\n    uint8 public constant RESOLUTION = 112;\\r\\n    uint256 public constant Q112 = 0x10000000000000000000000000000; // 2**112\\r\\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000; // 2**224\\r\\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\r\\n\\r\\n    // encode a uint112 as a UQ112x112\\r\\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\\r\\n        return uq112x112(uint224(x) \\u003c\\u003c RESOLUTION);\\r\\n    }\\r\\n\\r\\n    // encodes a uint144 as a UQ144x112\\r\\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\\r\\n        return uq144x112(uint256(x) \\u003c\\u003c RESOLUTION);\\r\\n    }\\r\\n\\r\\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\\r\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\r\\n        return uint112(self._x \\u003e\\u003e RESOLUTION);\\r\\n    }\\r\\n\\r\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\r\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\r\\n        return uint144(self._x \\u003e\\u003e RESOLUTION);\\r\\n    }\\r\\n\\r\\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\\r\\n    // reverts on overflow\\r\\n    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\\r\\n        uint256 z = 0;\\r\\n        require(y == 0 || (z = self._x * y) / y == self._x, \\u0027FixedPoint::mul: overflow\\u0027);\\r\\n        return uq144x112(z);\\r\\n    }\\r\\n\\r\\n    // multiply a UQ112x112 by an int and decode, returning an int\\r\\n    // reverts on overflow\\r\\n    function muli(uq112x112 memory self, int256 y) internal pure returns (int256) {\\r\\n        uint256 z = FullMath.mulDiv(self._x, uint256(y \\u003c 0 ? -y : y), Q112);\\r\\n        require(z \\u003c 2**255, \\u0027FixedPoint::muli: overflow\\u0027);\\r\\n        return y \\u003c 0 ? -int256(z) : int256(z);\\r\\n    }\\r\\n\\r\\n    // multiply a UQ112x112 by a UQ112x112, returning a UQ112x112\\r\\n    // lossy\\r\\n    function muluq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\\r\\n        if (self._x == 0 || other._x == 0) {\\r\\n            return uq112x112(0);\\r\\n        }\\r\\n        uint112 upper_self = uint112(self._x \\u003e\\u003e RESOLUTION); // * 2^0\\r\\n        uint112 lower_self = uint112(self._x \\u0026 LOWER_MASK); // * 2^-112\\r\\n        uint112 upper_other = uint112(other._x \\u003e\\u003e RESOLUTION); // * 2^0\\r\\n        uint112 lower_other = uint112(other._x \\u0026 LOWER_MASK); // * 2^-112\\r\\n\\r\\n        // partial products\\r\\n        uint224 upper = uint224(upper_self) * upper_other; // * 2^0\\r\\n        uint224 lower = uint224(lower_self) * lower_other; // * 2^-224\\r\\n        uint224 uppers_lowero = uint224(upper_self) * lower_other; // * 2^-112\\r\\n        uint224 uppero_lowers = uint224(upper_other) * lower_self; // * 2^-112\\r\\n\\r\\n        // so the bit shift does not overflow\\r\\n        require(upper \\u003c= uint112(-1), \\u0027FixedPoint::muluq: upper overflow\\u0027);\\r\\n\\r\\n        // this cannot exceed 256 bits, all values are 224 bits\\r\\n        uint256 sum = uint256(upper \\u003c\\u003c RESOLUTION) + uppers_lowero + uppero_lowers + (lower \\u003e\\u003e RESOLUTION);\\r\\n\\r\\n        // so the cast does not overflow\\r\\n        require(sum \\u003c= uint224(-1), \\u0027FixedPoint::muluq: sum overflow\\u0027);\\r\\n\\r\\n        return uq112x112(uint224(sum));\\r\\n    }\\r\\n\\r\\n    // divide a UQ112x112 by a UQ112x112, returning a UQ112x112\\r\\n    function divuq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\\r\\n        require(other._x \\u003e 0, \\u0027FixedPoint::divuq: division by zero\\u0027);\\r\\n        if (self._x == other._x) {\\r\\n            return uq112x112(uint224(Q112));\\r\\n        }\\r\\n        if (self._x \\u003c= uint144(-1)) {\\r\\n            uint256 value = (uint256(self._x) \\u003c\\u003c RESOLUTION) / other._x;\\r\\n            require(value \\u003c= uint224(-1), \\u0027FixedPoint::divuq: overflow\\u0027);\\r\\n            return uq112x112(uint224(value));\\r\\n        }\\r\\n\\r\\n        uint256 result = FullMath.mulDiv(Q112, self._x, other._x);\\r\\n        require(result \\u003c= uint224(-1), \\u0027FixedPoint::divuq: overflow\\u0027);\\r\\n        return uq112x112(uint224(result));\\r\\n    }\\r\\n\\r\\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\r\\n    // can be lossy\\r\\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\\r\\n        require(denominator \\u003e 0, \\u0027FixedPoint::fraction: division by zero\\u0027);\\r\\n        if (numerator == 0) return FixedPoint.uq112x112(0);\\r\\n\\r\\n        if (numerator \\u003c= uint144(-1)) {\\r\\n            uint256 result = (numerator \\u003c\\u003c RESOLUTION) / denominator;\\r\\n            require(result \\u003c= uint224(-1), \\u0027FixedPoint::fraction: overflow\\u0027);\\r\\n            return uq112x112(uint224(result));\\r\\n        } else {\\r\\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\r\\n            require(result \\u003c= uint224(-1), \\u0027FixedPoint::fraction: overflow\\u0027);\\r\\n            return uq112x112(uint224(result));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // take the reciprocal of a UQ112x112\\r\\n    // reverts on overflow\\r\\n    // lossy\\r\\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\r\\n        require(self._x != 0, \\u0027FixedPoint::reciprocal: reciprocal of zero\\u0027);\\r\\n        require(self._x != 1, \\u0027FixedPoint::reciprocal: overflow\\u0027);\\r\\n        return uq112x112(uint224(Q224 / self._x));\\r\\n    }\\r\\n\\r\\n    // square root of a UQ112x112\\r\\n    // lossy between 0/1 and 40 bits\\r\\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\r\\n        if (self._x \\u003c= uint144(-1)) {\\r\\n            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) \\u003c\\u003c 112)));\\r\\n        }\\r\\n\\r\\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\\r\\n        safeShiftBits -= safeShiftBits % 2;\\r\\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) \\u003c\\u003c safeShiftBits) \\u003c\\u003c ((112 - safeShiftBits) / 2)));\\r\\n    }\\r\\n}\\r\\n\\r\\n//import \\u0027@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\u0027;\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\n//import \\u0027@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\u0027;\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\\r\\n//import \\u0027../libraries/UniswapV2Library.sol\\u0027;\\r\\nlibrary UniswapV2Library {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\r\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\r\\n        require(tokenA != tokenB, \\u0027UniswapV2Library: IDENTICAL_ADDRESSES\\u0027);\\r\\n        (token0, token1) = tokenA \\u003c tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        require(token0 != address(0), \\u0027UniswapV2Library: ZERO_ADDRESS\\u0027);\\r\\n    }\\r\\n\\r\\n    // calculates the CREATE2 address for a pair without making any external calls\\r\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\r\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\r\\n        pair = address(uint(keccak256(abi.encodePacked(\\r\\n                hex\\u0027ff\\u0027,\\r\\n                factory,\\r\\n                keccak256(abi.encodePacked(token0, token1)),\\r\\n                hex\\u002796e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\u0027 // init code hash\\r\\n            ))));\\r\\n    }\\r\\n\\r\\n    // fetches and sorts the reserves for a pair\\r\\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\\r\\n        (address token0,) = sortTokens(tokenA, tokenB);\\r\\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\r\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\r\\n    }\\r\\n\\r\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\\r\\n        require(amountA \\u003e 0, \\u0027UniswapV2Library: INSUFFICIENT_AMOUNT\\u0027);\\r\\n        require(reserveA \\u003e 0 \\u0026\\u0026 reserveB \\u003e 0, \\u0027UniswapV2Library: INSUFFICIENT_LIQUIDITY\\u0027);\\r\\n        amountB = amountA.mul(reserveB) / reserveA;\\r\\n    }\\r\\n\\r\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\r\\n        require(amountIn \\u003e 0, \\u0027UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\u0027);\\r\\n        require(reserveIn \\u003e 0 \\u0026\\u0026 reserveOut \\u003e 0, \\u0027UniswapV2Library: INSUFFICIENT_LIQUIDITY\\u0027);\\r\\n        uint amountInWithFee = amountIn.mul(997);\\r\\n        uint numerator = amountInWithFee.mul(reserveOut);\\r\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\r\\n        amountOut = numerator / denominator;\\r\\n    }\\r\\n\\r\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\\r\\n        require(amountOut \\u003e 0, \\u0027UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\u0027);\\r\\n        require(reserveIn \\u003e 0 \\u0026\\u0026 reserveOut \\u003e 0, \\u0027UniswapV2Library: INSUFFICIENT_LIQUIDITY\\u0027);\\r\\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\\r\\n        uint denominator = reserveOut.sub(amountOut).mul(997);\\r\\n        amountIn = (numerator / denominator).add(1);\\r\\n    }\\r\\n\\r\\n    // performs chained getAmountOut calculations on any number of pairs\\r\\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\\r\\n        require(path.length \\u003e= 2, \\u0027UniswapV2Library: INVALID_PATH\\u0027);\\r\\n        amounts = new uint[](path.length);\\r\\n        amounts[0] = amountIn;\\r\\n        for (uint i; i \\u003c path.length - 1; i++) {\\r\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\\r\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // performs chained getAmountIn calculations on any number of pairs\\r\\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\\r\\n        require(path.length \\u003e= 2, \\u0027UniswapV2Library: INVALID_PATH\\u0027);\\r\\n        amounts = new uint[](path.length);\\r\\n        amounts[amounts.length - 1] = amountOut;\\r\\n        for (uint i = path.length - 1; i \\u003e 0; i--) {\\r\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\\r\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// library with helper methods for oracles that are concerned with computing average prices\\r\\nlibrary UniswapV2OracleLibrary {\\r\\n    using FixedPoint for *;\\r\\n\\r\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\r\\n    function currentBlockTimestamp() internal view returns (uint32) {\\r\\n        return uint32(block.timestamp % 2 ** 32);\\r\\n    }\\r\\n\\r\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\r\\n    function currentCumulativePrices(\\r\\n        address pair\\r\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\r\\n        blockTimestamp = currentBlockTimestamp();\\r\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\r\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\r\\n\\r\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\r\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\r\\n        if (blockTimestampLast != blockTimestamp) {\\r\\n            // subtraction overflow is desired\\r\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\r\\n            // addition overflow is desired\\r\\n            // counterfactual\\r\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\r\\n            // counterfactual\\r\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary EmaOracle {\\r\\n    using FixedPoint for *;\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    struct Observation {\\r\\n        uint timestamp;\\r\\n        uint price0Cumulative;\\r\\n        uint price1Cumulative;\\r\\n        uint emaPrice0;\\r\\n        uint emaPrice1;\\r\\n    }\\r\\n    \\r\\n    struct Observations {\\r\\n        address factory;\\r\\n        mapping(uint =\\u003e mapping(address =\\u003e Observation)) ppos;\\r\\n    }\\r\\n    \\r\\n    function initialize(Observations storage os, address factory, uint period, address tokenA, address tokenB) internal {\\r\\n        os.factory = factory;\\r\\n        address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\\r\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\r\\n        Observation storage o = os.ppos[period][pair];\\r\\n        o.timestamp = blockTimestampLast;\\r\\n        o.price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\r\\n        o.price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\r\\n        o.emaPrice0 = FixedPoint.fraction(reserve1, reserve0)._x;\\r\\n        o.emaPrice1 = FixedPoint.fraction(reserve0, reserve1)._x;\\r\\n    }\\r\\n    \\r\\n    function calcEmaPrice(uint period, uint timestampStart, uint priceCumulativeStart, uint emaPriceStart, uint timestampEnd, uint priceCumulativeEnd) internal pure returns (uint) {\\r\\n        uint timeElapsed = timestampEnd.sub(timestampStart);\\r\\n        if(timeElapsed == 0)\\r\\n            return emaPriceStart;\\r\\n        uint priceAverage = priceCumulativeEnd.sub(priceCumulativeStart).div(timeElapsed);\\r\\n        if(timeElapsed \\u003e= period)\\r\\n            return priceAverage;\\r\\n        else\\r\\n            return period.sub(timeElapsed).mul(emaPriceStart).add(timeElapsed.mul(priceAverage)) / period;\\r\\n    }\\r\\n    \\r\\n    function update(Observations storage os, uint period, address tokenA, address tokenB) internal {\\r\\n        address pair = UniswapV2Library.pairFor(os.factory, tokenA, tokenB);\\r\\n        Observation storage o = os.ppos[period][pair];\\r\\n        uint timeElapsed = block.timestamp.sub(o.timestamp);\\r\\n        if (timeElapsed \\u003e period) {\\r\\n            (uint price0Cumulative, uint price1Cumulative, ) = UniswapV2OracleLibrary.currentCumulativePrices(pair);\\r\\n            o.emaPrice0    = calcEmaPrice(period, o.timestamp, o.price0Cumulative, o.emaPrice0, block.timestamp, price0Cumulative);\\r\\n            o.emaPrice1    = calcEmaPrice(period, o.timestamp, o.price1Cumulative, o.emaPrice1, block.timestamp, price1Cumulative);\\r\\n            o.timestamp = block.timestamp;\\r\\n            o.price0Cumulative = price0Cumulative;\\r\\n            o.price1Cumulative = price1Cumulative;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function consultEma(Observations storage os, uint period, address tokenIn, uint amountIn, address tokenOut) internal view returns (uint amountOut) {\\r\\n        address pair = UniswapV2Library.pairFor(os.factory, tokenIn, tokenOut);\\r\\n        Observation storage o = os.ppos[period][pair];\\r\\n        (address token0, ) = UniswapV2Library.sortTokens(tokenIn, tokenOut);\\r\\n        if (token0 == tokenIn)\\r\\n            amountOut = FixedPoint.uq112x112(uint224(o.emaPrice0)).mul(amountIn).decode144();\\r\\n        else\\r\\n            amountOut = FixedPoint.uq112x112(uint224(o.emaPrice1)).mul(amountIn).decode144();\\r\\n    }\\r\\n\\r\\n    function consultNow(Observations storage os, address tokenIn, uint amountIn, address tokenOut) internal view returns (uint amountOut) {\\r\\n        address pair = UniswapV2Library.pairFor(os.factory, tokenIn, tokenOut);\\r\\n        (uint112 reserve0, uint112 reserve1, ) = IUniswapV2Pair(pair).getReserves();\\r\\n        (address token0, ) = UniswapV2Library.sortTokens(tokenIn, tokenOut);\\r\\n        if (token0 == tokenIn)\\r\\n            amountOut = FixedPoint.fraction(reserve1, reserve0).mul(amountIn).decode144();\\r\\n        else\\r\\n            amountOut = FixedPoint.fraction(reserve0, reserve1).mul(amountIn).decode144();\\r\\n    }\\r\\n\\r\\n    function consultHi(Observations storage os, uint period, address tokenIn, uint amountIn, address tokenOut) internal view returns (uint amountOut) {\\r\\n        uint amountOutEma = consultEma(os, period, tokenIn, amountIn, tokenOut);\\r\\n        uint amountOutNow = consultNow(os, tokenIn, amountIn, tokenOut);\\r\\n        amountOut = Math.max(amountOutEma, amountOutNow);\\r\\n    }\\r\\n\\r\\n    function consultLo(Observations storage os, uint period, address tokenIn, uint amountIn, address tokenOut) internal view returns (uint amountOut) {\\r\\n        uint amountOutEma = consultEma(os, period, tokenIn, amountIn, tokenOut);\\r\\n        uint amountOutNow = consultNow(os, tokenIn, amountIn, tokenOut);\\r\\n        amountOut = Math.min(amountOutEma, amountOutNow);\\r\\n    }\\r\\n}\\r\\n\\r\\n// fixed window oracle that recomputes the average price for the entire period once every period\\r\\n// note that the price average is only guaranteed to be over at least 1 period, but may be over a longer period\\r\\ncontract ExampleOracleSimple {\\r\\n    using FixedPoint for *;\\r\\n\\r\\n    uint public constant PERIOD = 24 hours;\\r\\n\\r\\n    IUniswapV2Pair immutable pair;\\r\\n    address public immutable token0;\\r\\n    address public immutable token1;\\r\\n\\r\\n    uint    public price0CumulativeLast;\\r\\n    uint    public price1CumulativeLast;\\r\\n    uint32  public blockTimestampLast;\\r\\n    FixedPoint.uq112x112 public price0Average;\\r\\n    FixedPoint.uq112x112 public price1Average;\\r\\n\\r\\n    constructor(address factory, address tokenA, address tokenB) public {\\r\\n        IUniswapV2Pair _pair = IUniswapV2Pair(UniswapV2Library.pairFor(factory, tokenA, tokenB));\\r\\n        //IUniswapV2Pair _pair = IUniswapV2Pair(IUniswapV2Factory(factory).getPair(tokenA, tokenB));\\r\\n        //require(address(_pair) != address(0), \\u0027Not exist pair\\u0027);\\r\\n        pair = _pair;\\r\\n        token0 = _pair.token0();\\r\\n        token1 = _pair.token1();\\r\\n        price0CumulativeLast = _pair.price0CumulativeLast(); // fetch the current accumulated price value (1 / 0)\\r\\n        price1CumulativeLast = _pair.price1CumulativeLast(); // fetch the current accumulated price value (0 / 1)\\r\\n        uint112 reserve0;\\r\\n        uint112 reserve1;\\r\\n        (reserve0, reserve1, blockTimestampLast) = _pair.getReserves();\\r\\n        require(reserve0 != 0 \\u0026\\u0026 reserve1 != 0, \\u0027ExampleOracleSimple: NO_RESERVES\\u0027); // ensure that there\\u0027s liquidity in the pair\\r\\n    }\\r\\n\\r\\n    function update() external {\\r\\n        (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) =\\r\\n            UniswapV2OracleLibrary.currentCumulativePrices(address(pair));\\r\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\r\\n\\r\\n        // ensure that at least one full period has passed since the last update\\r\\n        require(timeElapsed \\u003e= PERIOD, \\u0027ExampleOracleSimple: PERIOD_NOT_ELAPSED\\u0027);\\r\\n\\r\\n        // overflow is desired, casting never truncates\\r\\n        // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\\r\\n        price0Average = FixedPoint.uq112x112(uint224((price0Cumulative - price0CumulativeLast) / timeElapsed));\\r\\n        price1Average = FixedPoint.uq112x112(uint224((price1Cumulative - price1CumulativeLast) / timeElapsed));\\r\\n\\r\\n        price0CumulativeLast = price0Cumulative;\\r\\n        price1CumulativeLast = price1Cumulative;\\r\\n        blockTimestampLast = blockTimestamp;\\r\\n    }\\r\\n\\r\\n    // note this will always return 0 before update has been called successfully for the first time.\\r\\n    function consult(address token, uint amountIn) external view returns (uint amountOut) {\\r\\n        if (token == token0) {\\r\\n            amountOut = price0Average.mul(amountIn).decode144();\\r\\n        } else {\\r\\n            require(token == token1, \\u0027ExampleOracleSimple: INVALID_TOKEN\\u0027);\\r\\n            amountOut = price1Average.mul(amountIn).decode144();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// sliding window oracle that uses observations collected over a window to provide moving price averages in the past\\r\\n// `windowSize` with a precision of `windowSize / granularity`\\r\\n// note this is a singleton oracle and only needs to be deployed once per desired parameters, which\\r\\n// differs from the simple oracle which must be deployed once per pair.\\r\\ncontract ExampleSlidingWindowOracle {\\r\\n    using FixedPoint for *;\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    struct Observation {\\r\\n        uint timestamp;\\r\\n        uint price0Cumulative;\\r\\n        uint price1Cumulative;\\r\\n    }\\r\\n\\r\\n    address public immutable factory;\\r\\n    // the desired amount of time over which the moving average should be computed, e.g. 24 hours\\r\\n    uint public immutable windowSize;\\r\\n    // the number of observations stored for each pair, i.e. how many price observations are stored for the window.\\r\\n    // as granularity increases from 1, more frequent updates are needed, but moving averages become more precise.\\r\\n    // averages are computed over intervals with sizes in the range:\\r\\n    //   [windowSize - (windowSize / granularity) * 2, windowSize]\\r\\n    // e.g. if the window size is 24 hours, and the granularity is 24, the oracle will return the average price for\\r\\n    //   the period:\\r\\n    //   [now - [22 hours, 24 hours], now]\\r\\n    uint8 public immutable granularity;\\r\\n    // this is redundant with granularity and windowSize, but stored for gas savings \\u0026 informational purposes.\\r\\n    uint public immutable periodSize;\\r\\n\\r\\n    // mapping from pair address to a list of price observations of that pair\\r\\n    mapping(address =\\u003e Observation[]) public pairObservations;\\r\\n\\r\\n    constructor(address factory_, uint windowSize_, uint8 granularity_) public {\\r\\n        require(granularity_ \\u003e 1, \\u0027SlidingWindowOracle: GRANULARITY\\u0027);\\r\\n        require(\\r\\n            (periodSize = windowSize_ / granularity_) * granularity_ == windowSize_,\\r\\n            \\u0027SlidingWindowOracle: WINDOW_NOT_EVENLY_DIVISIBLE\\u0027\\r\\n        );\\r\\n        factory = factory_;\\r\\n        windowSize = windowSize_;\\r\\n        granularity = granularity_;\\r\\n    }\\r\\n\\r\\n    // returns the index of the observation corresponding to the given timestamp\\r\\n    function observationIndexOf(uint timestamp) public view returns (uint8 index) {\\r\\n        uint epochPeriod = timestamp / periodSize;\\r\\n        return uint8(epochPeriod % granularity);\\r\\n    }\\r\\n\\r\\n    // returns the observation from the oldest epoch (at the beginning of the window) relative to the current time\\r\\n    function getFirstObservationInWindow(address pair) private view returns (Observation storage firstObservation) {\\r\\n        uint8 observationIndex = observationIndexOf(block.timestamp);\\r\\n        // no overflow issue. if observationIndex + 1 overflows, result is still zero.\\r\\n        uint8 firstObservationIndex = (observationIndex + 1) % granularity;\\r\\n        firstObservation = pairObservations[pair][firstObservationIndex];\\r\\n    }\\r\\n\\r\\n    // update the cumulative price for the observation at the current timestamp. each observation is updated at most\\r\\n    // once per epoch period.\\r\\n    function update(address tokenA, address tokenB) external {\\r\\n        address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\\r\\n\\r\\n        // populate the array with empty observations (first call only)\\r\\n        for (uint i = pairObservations[pair].length; i \\u003c granularity; i++) {\\r\\n            pairObservations[pair].push();\\r\\n        }\\r\\n\\r\\n        // get the observation for the current period\\r\\n        uint8 observationIndex = observationIndexOf(block.timestamp);\\r\\n        Observation storage observation = pairObservations[pair][observationIndex];\\r\\n\\r\\n        // we only want to commit updates once per period (i.e. windowSize / granularity)\\r\\n        uint timeElapsed = block.timestamp - observation.timestamp;\\r\\n        if (timeElapsed \\u003e periodSize) {\\r\\n            (uint price0Cumulative, uint price1Cumulative,) = UniswapV2OracleLibrary.currentCumulativePrices(pair);\\r\\n            observation.timestamp = block.timestamp;\\r\\n            observation.price0Cumulative = price0Cumulative;\\r\\n            observation.price1Cumulative = price1Cumulative;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // given the cumulative prices of the start and end of a period, and the length of the period, compute the average\\r\\n    // price in terms of how much amount out is received for the amount in\\r\\n    function computeAmountOut(\\r\\n        uint priceCumulativeStart, uint priceCumulativeEnd,\\r\\n        uint timeElapsed, uint amountIn\\r\\n    ) private pure returns (uint amountOut) {\\r\\n        // overflow is desired.\\r\\n        FixedPoint.uq112x112 memory priceAverage = FixedPoint.uq112x112(\\r\\n            uint224((priceCumulativeEnd - priceCumulativeStart) / timeElapsed)\\r\\n        );\\r\\n        amountOut = priceAverage.mul(amountIn).decode144();\\r\\n    }\\r\\n\\r\\n    // returns the amount out corresponding to the amount in for a given token using the moving average over the time\\r\\n    // range [now - [windowSize, windowSize - periodSize * 2], now]\\r\\n    // update must have been called for the bucket corresponding to timestamp `now - windowSize`\\r\\n    function consult(address tokenIn, uint amountIn, address tokenOut) external view returns (uint amountOut) {\\r\\n        address pair = UniswapV2Library.pairFor(factory, tokenIn, tokenOut);\\r\\n        Observation storage firstObservation = getFirstObservationInWindow(pair);\\r\\n\\r\\n        uint timeElapsed = block.timestamp - firstObservation.timestamp;\\r\\n        require(timeElapsed \\u003c= windowSize, \\u0027SlidingWindowOracle: MISSING_HISTORICAL_OBSERVATION\\u0027);\\r\\n        // should never happen.\\r\\n        require(timeElapsed \\u003e= windowSize - periodSize * 2, \\u0027SlidingWindowOracle: UNEXPECTED_TIME_ELAPSED\\u0027);\\r\\n\\r\\n        (uint price0Cumulative, uint price1Cumulative,) = UniswapV2OracleLibrary.currentCumulativePrices(pair);\\r\\n        (address token0,) = UniswapV2Library.sortTokens(tokenIn, tokenOut);\\r\\n\\r\\n        if (token0 == tokenIn) {\\r\\n            return computeAmountOut(firstObservation.price0Cumulative, price0Cumulative, timeElapsed, amountIn);\\r\\n        } else {\\r\\n            return computeAmountOut(firstObservation.price1Cumulative, price1Cumulative, timeElapsed, amountIn);\\r\\n        }\\r\\n    }\\r\\n}\"},\"Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n//pragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./ONE.sol\\\";\\r\\nimport \\\"./SwapLib.sol\\\";\\r\\n\\r\\ninterface IAETH is IERC20 {\\r\\n    function ratio() external view returns (uint256);\\r\\n}\\r\\n\\r\\ncontract Constant {\\r\\n    bytes32 internal constant _ratioAEthWhenMint_       = \\u0027ratioAEthWhenMint\\u0027;\\r\\n}\\r\\n\\r\\ncontract Vault is Constant, Configurable {\\r\\n    using SafeMath for uint;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using EmaOracle for EmaOracle.Observations;\\r\\n    \\r\\n    bytes32 internal constant _periodTwapOne_           = \\u0027periodTwapOne\\u0027;\\r\\n    bytes32 internal constant _periodTwapOns_           = \\u0027periodTwapOns\\u0027;\\r\\n    bytes32 internal constant _periodTwapAEth_          = \\u0027periodTwapAEth\\u0027;\\r\\n    //bytes32 internal constant _thresholdReserve_        = \\u0027thresholdReserve\\u0027;\\r\\n    bytes32 internal constant _initialMintQuota_        = \\u0027initialMintQuota\\u0027;\\r\\n    bytes32 internal constant _rebaseInterval_          = \\u0027rebaseInterval\\u0027;\\r\\n    bytes32 internal constant _rebaseThreshold_         = \\u0027rebaseThreshold\\u0027;\\r\\n    bytes32 internal constant _rebaseCap_               = \\u0027rebaseCap\\u0027;\\r\\n    bytes32 internal constant _burnOneThreshold_        = \\u0027burnOneThreshold\\u0027;\\r\\n    \\r\\n    address public oneMinter;\\r\\n    ONE public one;\\r\\n    ONS public ons;\\r\\n    address public onb;\\r\\n    IAETH public aEth;\\r\\n    address public WETH;\\r\\n    uint public begin;\\r\\n    uint public span;\\r\\n    EmaOracle.Observations public twapOne;\\r\\n    EmaOracle.Observations public twapOns;\\r\\n    EmaOracle.Observations public twapAEth;\\r\\n    uint public totalEthValue;\\r\\n    uint public rebaseTime;\\r\\n    \\r\\n\\tfunction __Vault_init(address governor_, address _oneMinter, ONE _one, ONS _ons, address _onb, IAETH _aEth, address _WETH, uint _begin, uint _span) external initializer {\\r\\n\\t\\t__Governable_init_unchained(governor_);\\r\\n\\t\\t__Vault_init_unchained(_oneMinter, _one, _ons, _onb, _aEth, _WETH, _begin, _span);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction __Vault_init_unchained(address _oneMinter, ONE _one, ONS _ons, address _onb, IAETH _aEth, address _WETH, uint _begin, uint _span) public governance {\\r\\n\\t\\toneMinter = _oneMinter;\\r\\n\\t\\tone = _one;\\r\\n\\t\\tons = _ons;\\r\\n\\t\\tonb = _onb;\\r\\n\\t\\taEth = _aEth;\\r\\n\\t\\tWETH = _WETH;\\r\\n\\t\\tbegin = _begin;\\r\\n\\t\\tspan = _span;\\r\\n\\t\\t//config[_thresholdReserve_]  = 0.8 ether;\\r\\n\\t\\tconfig[_ratioAEthWhenMint_] = 0.9 ether;\\r\\n\\t\\tconfig[_periodTwapOne_]     =  8 hours;\\r\\n\\t\\tconfig[_periodTwapOns_]     = 15 minutes;\\r\\n\\t\\tconfig[_periodTwapAEth_]    = 15 minutes;\\r\\n\\t\\tconfig[_initialMintQuota_]  = 10000 ether;\\r\\n\\t\\tconfig[_rebaseInterval_]    = 8 hours;\\r\\n\\t\\tconfig[_rebaseThreshold_]   = 1.05 ether;\\r\\n\\t\\tconfig[_rebaseCap_]         = 0.05 ether;   // 5%\\r\\n\\t\\trebaseTime = now;\\r\\n\\t\\tconfig[_burnOneThreshold_]  = 1.0 ether;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction twapInit(address swapFactory) external governance {\\r\\n\\t\\ttwapOne.initialize(swapFactory, config[_periodTwapOne_], address(one), address(aEth));\\r\\n\\t\\ttwapOns.initialize(swapFactory, config[_periodTwapOns_], address(ons), address(aEth));\\r\\n\\t\\ttwapAEth.initialize(swapFactory, config[_periodTwapAEth_], address(aEth), WETH);\\r\\n\\t}\\r\\n\\t\\t\\r\\n    modifier updateTwap {\\r\\n        twapOne.update(config[_periodTwapOne_], address(one), address(aEth));\\r\\n        twapOns.update(config[_periodTwapOns_], address(ons), address(aEth));\\r\\n        twapAEth.update(config[_periodTwapAEth_], address(aEth), WETH);\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    //function updateTWAP() external updateTwap {\\r\\n    //    \\r\\n    //}\\r\\n    \\r\\n    //function mintONE(uint amt) external updateTwap {\\r\\n    //    if(now \\u003c begin || now \\u003e begin.add(span)) {\\r\\n    //        uint quota = IERC20(one).totalSupply().sub0(IERC20(aEth).balanceOf(address(this)).mul(1e18).div(config[_thresholdReserve_]));\\r\\n    //        require(quota \\u003e 0 , \\u0027mintONE only when aEth.balanceOf(this)/one.totalSupply() \\u003c 80%\\u0027);\\r\\n    //        amt = Math.min(amt, quota);\\r\\n    //    }\\r\\n    //    \\r\\n    //    IERC20(aEth).safeTransferFrom(msg.sender, address(this), amt.mul(config[_ratioAEthWhenMint_]).div(1e18));\\r\\n    //    \\r\\n    //    uint vol = amt.mul(uint(1e18).sub(config[_ratioAEthWhenMint_])).div(1e18);\\r\\n    //    vol = twapOns.consultHi(config[_periodTwapOns_], address(aEth), vol, address(ons));\\r\\n    //    ons.transferFrom_(msg.sender, address(this), vol);\\r\\n    //    \\r\\n    //    one.mint_(msg.sender, amt);\\r\\n    //}\\r\\n    \\r\\n    function E2B(uint vol) external {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    function B2E(uint vol) external {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    function burnableONE(uint amt) public view returns (uint) {\\r\\n        require(onePriceHi() \\u003c config[_burnOneThreshold_], \\u0027ONE price is not low enough to burn\\u0027);\\r\\n        return amt.mul(aEth.balanceOf(address(this))).div(one.totalSupply());\\r\\n    }\\r\\n    \\r\\n    function burnONE(uint amt) external {\\r\\n        one.burn_(msg.sender, amt);\\r\\n        aEth.transfer(msg.sender, burnableONE(amt));\\r\\n    }\\r\\n    \\r\\n    function burnONB(uint vol) external {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    function onePriceNow() public view returns (uint price) {\\r\\n        price = twapOne.consultNow( address(one), 1 ether, address(aEth));\\r\\n        price = twapAEth.consultNow(address(aEth), price,  address(WETH));\\r\\n    }\\r\\n    function onePriceEma() public view returns (uint price) {\\r\\n        price = twapOne.consultEma( config[_periodTwapOne_],  address(one), 1 ether, address(aEth));\\r\\n        price = twapAEth.consultEma(config[_periodTwapAEth_], address(aEth), price,  address(WETH));\\r\\n    }\\r\\n    function onePriceHi() public view returns (uint) {\\r\\n        return Math.max(onePriceNow(), onePriceEma());\\r\\n    }\\r\\n    function onePriceLo() public view returns (uint) {\\r\\n        return Math.min(onePriceNow(), onePriceEma());\\r\\n    }\\r\\n    \\r\\n    function onsPriceNow() public view returns (uint price) {\\r\\n        price = twapOns.consultNow( address(ons), 1 ether, address(aEth));\\r\\n        price = twapAEth.consultNow(address(aEth), price,  address(WETH));\\r\\n    }\\r\\n    function onsPriceEma() public view returns (uint price) {\\r\\n        price = twapOns.consultEma( config[_periodTwapOns_],  address(ons), 1 ether, address(aEth));\\r\\n        price = twapAEth.consultEma(config[_periodTwapAEth_], address(aEth), price,  address(WETH));\\r\\n    }\\r\\n    function onsPriceHi() public view returns (uint) {\\r\\n        return Math.max(onsPriceNow(), onsPriceEma());\\r\\n    }\\r\\n    function onsPriceLo() public view returns (uint) {\\r\\n        return Math.min(onsPriceNow(), onsPriceEma());\\r\\n    }\\r\\n    \\r\\n    function rebaseable() public view returns (uint aEthVol, uint aEthRatio, uint onsVol, uint onsRatio, uint oneVol) {\\r\\n        uint aEthPrice = 1e36 / aEth.ratio();\\r\\n        uint onsPrice  = onsPriceLo();\\r\\n        uint aEthBalance = aEth.balanceOf(oneMinter);\\r\\n        uint onsBalance  = ons.balanceOf(oneMinter);\\r\\n        uint oneVolAEth = aEthBalance.mul(aEthPrice).div(config[_ratioAEthWhenMint_]);\\r\\n        uint oneVolOns  = onsBalance.mul(onsPrice).div(uint(1e18).sub(config[_ratioAEthWhenMint_]));\\r\\n        oneVol = one.totalSupply().mul(config[_rebaseCap_]).div(1e18);\\r\\n        oneVol = Math.min(Math.min(oneVol, oneVolAEth), oneVolOns);\\r\\n        if(oneVol == 0)\\r\\n            return (0, 0, 0, 0, 0);\\r\\n        //aEthVol = oneVol.mul(config[_ratioAEthWhenMint_]).div(aEthPrice);\\r\\n        //onsVol  = oneVol.mul(uint(1e18).sub(config[_ratioAEthWhenMint_])).div(onsPrice);\\r\\n        aEthRatio = oneVol.mul(1e18).div(oneVolAEth);\\r\\n        onsRatio  = oneVol.mul(1e18).div(oneVolOns);\\r\\n        aEthVol = aEthBalance.mul(aEthRatio).div(1e18);\\r\\n        onsVol  = onsBalance.mul(onsRatio).div(1e18);\\r\\n    }\\r\\n    \\r\\n    function rebase() public updateTwap returns (uint aEthVol, uint aEthRatio, uint onsVol, uint onsRatio, uint oneVol) {\\r\\n        if(now \\u003c begin)\\r\\n            return (0, 0, 0, 0, 0);\\r\\n        else if (now \\u003e begin.add(span) || one.totalSupply() \\u003e= config[_initialMintQuota_]) {\\r\\n            uint interval = config[_rebaseInterval_];\\r\\n            if(now / interval \\u003c= rebaseTime / interval)\\r\\n                return (0, 0, 0, 0, 0);\\r\\n            uint price = onePriceLo();\\r\\n            if(price \\u003c config[_rebaseThreshold_])\\r\\n                return (0, 0, 0, 0, 0);\\r\\n        }        \\r\\n        (aEthVol, aEthRatio, onsVol, onsRatio, oneVol) = rebaseable();\\r\\n        if(oneVol == 0)\\r\\n            return (0, 0, 0, 0, 0);\\r\\n            \\r\\n        receiveAEthFrom(address(oneMinter), aEthVol);\\r\\n        ons.transferFrom(address(oneMinter), address(this), onsVol);\\r\\n        one.mint_(address(oneMinter), oneVol);\\r\\n        rebaseTime = now;\\r\\n        emit Rebase(aEthVol, aEthRatio, onsVol, onsRatio, oneVol);\\r\\n    }\\r\\n    event Rebase(uint aEthVol, uint aEthRatio, uint onsVol, uint onsRatio, uint oneVol);\\r\\n    \\r\\n    function receiveAEthFrom(address from, uint vol) public {\\r\\n        aEth.transferFrom(from, address(this), vol);\\r\\n        totalEthValue = totalEthValue.add(vol.mul(1e18).div(aEth.ratio()));\\r\\n    }\\r\\n    \\r\\n    function _sendAEthTo(address to, uint vol) internal {\\r\\n        totalEthValue = totalEthValue.sub(vol.mul(1e18).div(aEth.ratio()));\\r\\n        aEth.transfer(to, vol);\\r\\n    }\\r\\n    \\r\\n    function interests() public view returns (uint) {\\r\\n        return aEth.balanceOf(address(this)).mul(1e18).div(aEth.ratio()).sub(totalEthValue);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract OneMinter is Constant, Configurable {\\r\\n    using SafeMath for uint;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint internal constant INITIAL_INPUT = 1e27;\\r\\n\\r\\n    Vault public vault;\\r\\n    ONE public one;\\r\\n    ONS public ons;\\r\\n    IAETH public aEth;\\r\\n    \\r\\n    mapping (address =\\u003e uint) internal _aEthBalances;\\r\\n    mapping (address =\\u003e uint) internal _onsBalances;\\r\\n    mapping (address =\\u003e uint) internal _aEthRIOs;\\r\\n    mapping (address =\\u003e uint) internal _onsRIOs;\\r\\n    mapping (uint =\\u003e uint) internal _aEthRioIn;\\r\\n    mapping (uint =\\u003e uint) internal _onsRioIn;\\r\\n    uint internal _aEthRound;\\r\\n    uint internal _onsRound;\\r\\n\\r\\n    function __OneMinter_init(address governor_, address vault_) external initializer {\\r\\n        __Governable_init_unchained(governor_);\\r\\n        __OneMinter_init_unchained(vault_);\\r\\n    }\\r\\n    \\r\\n\\tfunction __OneMinter_init_unchained(address vault_) public governance {\\r\\n\\t\\tvault = Vault(vault_);\\r\\n\\t\\tone = ONE(vault.one());\\r\\n\\t\\tons = ONS(vault.ons());\\r\\n\\t\\taEth = IAETH(vault.aEth());\\r\\n\\t\\taEth.approve(address(vault), uint(-1));\\r\\n\\t\\tons.approve(address(vault), uint(-1));\\r\\n        _aEthRound = _onsRound = 1;\\r\\n        _aEthRioIn[1] = packRIO(1, INITIAL_INPUT, 0);\\r\\n        _onsRioIn [1] = packRIO(1, INITIAL_INPUT, 0);\\r\\n\\t}\\r\\n\\t\\r\\n    //struct RIO {\\r\\n    //    uint32  round;\\r\\n    //    uint112 input;\\r\\n    //    uint112 output;\\r\\n    //}\\r\\n\\r\\n    function packRIO(uint256 round, uint256 input, uint256 output) internal pure virtual returns (uint256) {\\r\\n        require(round \\u003c= uint32(-1) \\u0026\\u0026 input \\u003c= uint112(-1) \\u0026\\u0026 output \\u003c= uint112(-1), \\u0027RIO OVERFLOW\\u0027);\\r\\n        return round \\u003c\\u003c 224 | input \\u003c\\u003c 112 | output;\\r\\n    }\\r\\n    \\r\\n    function unpackRIO(uint256 rio) internal pure virtual returns (uint256 round, uint256 input, uint256 output) {\\r\\n        round  = rio \\u003e\\u003e 224;\\r\\n        input  = uint112(rio \\u003e\\u003e 112);\\r\\n        output = uint112(rio);\\r\\n    }\\r\\n    \\r\\n    function totalSupply() external view returns (uint aEthSupply, uint onsSupply) {\\r\\n        aEthSupply = aEth.balanceOf(address(this));\\r\\n        onsSupply  =  ons.balanceOf(address(this));\\r\\n    }\\r\\n    \\r\\n    function balanceOf_(address acct) public returns (uint aEthBal, uint onsBal) {\\r\\n        _rebase();\\r\\n        return balanceOf(acct);\\r\\n    }\\r\\n    \\r\\n    function balanceOf(address acct) public view returns (uint aEthBal, uint onsBal) {\\r\\n        uint rio = _aEthRIOs[acct];\\r\\n        (uint r, uint i, ) = unpackRIO(rio);\\r\\n        uint RIO = _aEthRioIn[r];\\r\\n        if(RIO != rio) {\\r\\n            (, uint I, ) = unpackRIO(RIO);\\r\\n            aEthBal = _aEthBalances[acct].mul(I).div(i);\\r\\n        } else\\r\\n            aEthBal = _aEthBalances[acct];\\r\\n\\r\\n        rio = _onsRIOs[acct];\\r\\n        (r, i, ) = unpackRIO(rio);\\r\\n        RIO = _onsRioIn[r];\\r\\n        if(RIO != rio) {\\r\\n            (, uint I, ) = unpackRIO(RIO);\\r\\n            onsBal = _onsBalances[acct].mul(I).div(i);\\r\\n        } else\\r\\n            onsBal = _onsBalances[acct];\\r\\n    }\\r\\n    \\r\\n    function mintInitial(uint aEthVol, uint onsVol) external {\\r\\n        purchase(aEthVol, onsVol);\\r\\n        //mint();\\r\\n        cancel(uint(-1), uint(-1));\\r\\n    }\\r\\n    \\r\\n    function purchase(uint aEthVol, uint onsVol) public {\\r\\n        mint();\\r\\n        \\r\\n        aEth.transferFrom(msg.sender, address(this), aEthVol);\\r\\n        ons.transferFrom_(msg.sender, address(this), onsVol);\\r\\n        _aEthBalances[msg.sender] = _aEthBalances[msg.sender].add(aEthVol);\\r\\n        _onsBalances [msg.sender] = _onsBalances [msg.sender].add(onsVol);\\r\\n        \\r\\n        emit Purchase(msg.sender, aEthVol, onsVol);\\r\\n    }\\r\\n    event Purchase(address acct, uint aEthVol, uint onsVol);\\r\\n    \\r\\n    function cancel(uint aEthVol, uint onsVol) public {\\r\\n        mint();\\r\\n        \\r\\n        if(aEthVol == uint(-1))\\r\\n            aEthVol = _aEthBalances[msg.sender];\\r\\n        if(onsVol == uint(-1))\\r\\n            onsVol = _onsBalances[msg.sender];\\r\\n        _aEthBalances[msg.sender] = _aEthBalances[msg.sender].sub(aEthVol);\\r\\n        _onsBalances [msg.sender] = _onsBalances [msg.sender].sub(onsVol);\\r\\n        aEth.transfer(msg.sender, aEthVol);\\r\\n        ons.transfer (msg.sender, onsVol);\\r\\n        \\r\\n        emit Cancel(msg.sender, aEthVol, onsVol);\\r\\n    }\\r\\n    event Cancel(address acct, uint aEthVol, uint onsVol);\\r\\n    \\r\\n    function mintable_(address acct) public returns (uint) {\\r\\n        _rebase();\\r\\n        return mintable(acct);\\r\\n    }\\r\\n    \\r\\n    function mintable(address acct) public view returns (uint vol) {\\r\\n        uint rio = _aEthRIOs[acct];\\r\\n        (uint r, uint i, uint o) = unpackRIO(rio);\\r\\n        uint RIO = _aEthRioIn[r];\\r\\n        if(rio == RIO)\\r\\n            return 0;\\r\\n        \\r\\n        uint bal = _aEthBalances[acct];\\r\\n        (, , uint O) = unpackRIO(RIO);\\r\\n        vol = O.sub(o).mul(bal).div(i);\\r\\n\\r\\n        rio = _onsRIOs[acct];\\r\\n        (r, i, o) = unpackRIO(rio);\\r\\n        RIO = _onsRioIn[r];\\r\\n        (, , O) = unpackRIO(RIO);\\r\\n        vol = O.sub(o).mul(bal).div(i).add(vol);\\r\\n    }\\r\\n    \\r\\n    function mint() public {\\r\\n        _rebase();\\r\\n        \\r\\n        (uint aEthBal, uint onsBal) = balanceOf(msg.sender);\\r\\n        uint oneVol = mintable(msg.sender);\\r\\n        \\r\\n        uint RIO = _aEthRioIn[_aEthRound];\\r\\n        uint rio = _aEthRIOs[msg.sender];\\r\\n        if(rio != RIO) {\\r\\n            _aEthRIOs[msg.sender] = RIO;\\r\\n            _onsRIOs [msg.sender] = _onsRioIn[_onsRound];\\r\\n        }\\r\\n            \\r\\n        _aEthBalances[msg.sender] = aEthBal;\\r\\n        _onsBalances [msg.sender] = onsBal;\\r\\n        one.transfer(msg.sender, oneVol);\\r\\n        emit Mint(msg.sender, oneVol);\\r\\n    }\\r\\n    event Mint(address acct, uint oneVol);\\r\\n    \\r\\n    function _rebase() internal {\\r\\n        (uint aEthVol, uint aEthRatio, uint onsVol, uint onsRatio, uint oneVol) = vault.rebase();\\r\\n        if(oneVol == 0)\\r\\n            return;\\r\\n            \\r\\n        uint ratioAEthWhenMint = vault.getConfig(_ratioAEthWhenMint_);\\r\\n        (uint round, uint input, uint output) = unpackRIO(_aEthRioIn[_aEthRound]);\\r\\n        output = oneVol.mul(ratioAEthWhenMint).div(aEthVol).mul(input.mul(aEthRatio).div(1e18)).div(1e18).add(output);\\r\\n        input = uint(1e18).sub(aEthRatio).mul(input).div(1e18);\\r\\n        _aEthRioIn[round] = packRIO(round, input, output);\\r\\n        if(input == 0)\\r\\n            _aEthRioIn[++_aEthRound] = packRIO(++round, INITIAL_INPUT, 0);\\r\\n            \\r\\n        (round, input, output) = unpackRIO(_onsRioIn[_onsRound]);\\r\\n        output = oneVol.mul(uint(1e18).sub(ratioAEthWhenMint)).div(onsVol).mul(input.mul(onsRatio).div(1e18)).div(1e18).add(output);\\r\\n        input = uint(1e18).sub(onsRatio).mul(input).div(1e18);\\r\\n        _onsRioIn[round] = packRIO(round, input, output);\\r\\n        if(input == 0)\\r\\n            _onsRioIn[++_onsRound] = packRIO(++round, INITIAL_INPUT, 0);\\r\\n            \\r\\n        emit Rebase(aEthVol, aEthRatio, onsVol, onsRatio, oneVol);\\r\\n    }\\r\\n    event Rebase(uint aEthVol, uint aEthRatio, uint onsVol, uint onsRatio, uint oneVol);\\r\\n}\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aEthVol\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aEthRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"onsVol\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"onsRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oneVol\",\"type\":\"uint256\"}],\"name\":\"Rebase\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vol\",\"type\":\"uint256\"}],\"name\":\"B2E\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vol\",\"type\":\"uint256\"}],\"name\":\"E2B\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor_\",\"type\":\"address\"}],\"name\":\"__Governable_init_unchained\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oneMinter\",\"type\":\"address\"},{\"internalType\":\"contract ONE\",\"name\":\"_one\",\"type\":\"address\"},{\"internalType\":\"contract ONS\",\"name\":\"_ons\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_onb\",\"type\":\"address\"},{\"internalType\":\"contract IAETH\",\"name\":\"_aEth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_begin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_span\",\"type\":\"uint256\"}],\"name\":\"__Vault_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oneMinter\",\"type\":\"address\"},{\"internalType\":\"contract ONE\",\"name\":\"_one\",\"type\":\"address\"},{\"internalType\":\"contract ONS\",\"name\":\"_ons\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_onb\",\"type\":\"address\"},{\"internalType\":\"contract IAETH\",\"name\":\"_aEth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_begin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_span\",\"type\":\"uint256\"}],\"name\":\"__Vault_init_unchained\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aEth\",\"outputs\":[{\"internalType\":\"contract IAETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"begin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vol\",\"type\":\"uint256\"}],\"name\":\"burnONB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"burnONE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"burnableONE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"one\",\"outputs\":[{\"internalType\":\"contract ONE\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onePriceEma\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onePriceHi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onePriceLo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onePriceNow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ons\",\"outputs\":[{\"internalType\":\"contract ONS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onsPriceEma\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onsPriceHi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onsPriceLo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onsPriceNow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"aEthVol\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aEthRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onsVol\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onsRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oneVol\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"aEthVol\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aEthRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onsVol\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onsRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oneVol\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vol\",\"type\":\"uint256\"}],\"name\":\"receiveAEthFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"span\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEthValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"twapAEth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapFactory\",\"type\":\"address\"}],\"name\":\"twapInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"twapOne\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"twapOns\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Vault","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a1146b7f20e0d3f46b21e1a9cb7b113f36fbb4ac7a3a4af71d9554e7be857a85"}]}