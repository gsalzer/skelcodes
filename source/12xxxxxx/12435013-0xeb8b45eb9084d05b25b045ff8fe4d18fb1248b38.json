{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n// @title Meowshi....🐈_🍣_🍱\r\n// @author Gatoshi Nyakamoto\r\n\r\npragma solidity 0.8.4;\r\n\r\n// File @boringcrypto/boring-solidity/contracts/Domain.sol@v1.2.0\r\n// License-Identifier: MIT\r\n\r\n/// @dev Adapted for Meowshi.\r\ncontract Domain {\r\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH = keccak256(\"EIP712Domain(uint256 chainId,address verifyingContract)\");\r\n    /// @dev See https://eips.ethereum.org/EIPS/eip-191.\r\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \"\\x19\\x01\";\r\n\r\n    bytes32 private immutable _DOMAIN_SEPARATOR;\r\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;\r\n\r\n    /// @dev Calculate the DOMAIN_SEPARATOR.\r\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\r\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_SIGNATURE_HASH, chainId, address(this)));\r\n    }\r\n\r\n    constructor() {\r\n        uint256 chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\r\n    }\r\n\r\n    /// @dev Return the DOMAIN_SEPARATOR.\r\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\r\n        uint256 chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\r\n    }\r\n\r\n    function _getDigest(bytes32 dataHash) internal view returns (bytes32 digest) {\r\n        digest = keccak256(abi.encodePacked(EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA, DOMAIN_SEPARATOR(), dataHash));\r\n    }\r\n}\r\n\r\n// File @boringcrypto/boring-solidity/contracts/ERC20.sol@v1.2.0\r\n// License-Identifier: MIT\r\n\r\n/// @dev Adapted for Meowshi.\r\ncontract ERC20 is Domain {\r\n    /// @notice owner > balance mapping.\r\n    mapping(address => uint256) public balanceOf;\r\n    /// @notice owner > spender > allowance mapping.\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    /// @notice owner > nonce mapping (used in {permit}).\r\n    mapping(address => uint256) public nonces;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n    /// @notice Transfers `amount` tokens from `msg.sender` to `to`.\r\n    /// @param to The address to move tokens `to`.\r\n    /// @param amount The token `amount` to move.\r\n    /// @return (bool) Returns True if succeeded.\r\n    function transfer(address to, uint256 amount) external returns (bool) {\r\n        balanceOf[msg.sender] -= amount; \r\n        balanceOf[to] += amount;\r\n        emit Transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Transfers `amount` tokens from `from` to `to`. Caller needs approval from `from`.\r\n    /// @param from Address to draw tokens `from`.\r\n    /// @param to The address to move tokens `to`.\r\n    /// @param amount The token `amount` to move.\r\n    /// @return (bool) Returns True if succeeded.\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool) {\r\n        // @dev If allowance is infinite, don't decrease it to save on gas (breaks with ERC-20).\r\n        if (allowance[from][msg.sender] != type(uint256).max) {\r\n            allowance[from][msg.sender] -= amount;\r\n        }\r\n        balanceOf[from] -= amount;\r\n        balanceOf[to] += amount; \r\n        emit Transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Approves `amount` from msg.sender to be spent by `spender`.\r\n    /// @param spender Address of the party that can draw tokens from msg.sender's account.\r\n    /// @param amount The maximum collective `amount` that `spender` can draw.\r\n    /// @return (bool) Returns True if approved.\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\").\r\n    bytes32 private constant PERMIT_SIGNATURE_HASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n\r\n    /// @notice Approves `amount` from `owner` to be spent by `spender` using EIP-2612 method.\r\n    /// @param owner Address of the `owner`.\r\n    /// @param spender The address of the `spender` that gets approved to draw from `owner`.\r\n    /// @param amount The maximum collective `amount` that `spender` can draw.\r\n    /// @param deadline This permit must be redeemed before this deadline (UTC timestamp in seconds).\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external {\r\n        require(owner != address(0), \"ERC20: Owner cannot be 0\");\r\n        require(block.timestamp < deadline, \"ERC20: Expired\");\r\n        require(\r\n            ecrecover(_getDigest(keccak256(abi.encode(PERMIT_SIGNATURE_HASH, owner, spender, amount, nonces[owner]++, deadline))), v, r, s) ==\r\n                owner,\r\n            \"ERC20: Invalid Signature\"\r\n        );\r\n        allowance[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}\r\n\r\n// File @boringcrypto/boring-solidity/contracts/BoringBatchable.sol@v1.2.0\r\n// License-Identifier: MIT\r\n\r\n/// @dev Adapted for Meowshi.\r\ncontract BaseBoringBatchable {\r\n    /// @dev Helper function to extract a useful revert message from a failed call.\r\n    /// If the returned data is malformed or not correctly abi-encoded, this call can fail itself.\r\n    function _getRevertMsg(bytes memory _returnData) private pure returns (string memory) {\r\n        // @dev If the length is less than 68, the transaction failed silently (without a revert message).\r\n        if (_returnData.length < 68) return \"Transaction reverted silently\";\r\n        assembly {\r\n            // @dev Slice the sighash.\r\n            _returnData := add(_returnData, 0x04)\r\n        }\r\n        // @dev All that remains is the revert string.\r\n        return abi.decode(_returnData, (string));\r\n    }\r\n\r\n    /// @notice Allows batched call to self (this contract).\r\n    /// @param calls An array of inputs for each call.\r\n    /// @param revertOnFail If True, reverts after a failed call and stops further calls.\r\n    function batch(bytes[] calldata calls, bool revertOnFail) external {\r\n        for (uint256 i = 0; i < calls.length; i++) {\r\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\r\n            if (!success && revertOnFail) {\r\n                revert(_getRevertMsg(result));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/// @notice Interface for depositing into and withdrawing from BentoBox vault.\r\ninterface IERC20{} interface IBentoBoxBasic {\r\n    function deposit( \r\n        IERC20 token_,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 share\r\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\r\n\r\n    function withdraw(\r\n        IERC20 token_,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 share\r\n    ) external returns (uint256 amountOut, uint256 shareOut);\r\n}\r\n\r\n/// @notice Interface for depositing into and withdrawing from SushiBar.\r\ninterface ISushiBar { \r\n    function balanceOf(address account) external view returns (uint256);\r\n    function enter(uint256 amount) external;\r\n    function leave(uint256 share) external;\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\n/// @notice Meowshi takes SUSHI / xSUSHI to mint NYAN tokens that can be burned to claim SUSHI / xSUSHI from BENTO with yields.\r\n//  ៱˳_˳៱   ∫\r\ncontract Meowshi is ERC20, BaseBoringBatchable {\r\n    IBentoBoxBasic private constant bentoBox = IBentoBoxBasic(0xF5BCE5077908a1b7370B9ae04AdC565EBd643966); // BENTO vault contract\r\n    ISushiBar private constant sushiToken = ISushiBar(0x6B3595068778DD592e39A122f4f5a5cF09C90fE2); // SUSHI token contract\r\n    address private constant sushiBar = 0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272; // xSUSHI token contract for staking SUSHI\r\n\r\n    string public constant name = \"Meowshi\";\r\n    string public constant symbol = \"NYAN\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 private constant multiplier = 10000; // 1 xSUSHI BENTO share = 10000 NYAN\r\n    uint256 public totalSupply;\r\n    \r\n    constructor() {\r\n        sushiToken.approve(sushiBar, type(uint256).max); // max approve xSUSHI to draw SUSHI from this contract\r\n        ISushiBar(sushiBar).approve(address(bentoBox), type(uint256).max); // max approve BENTO to draw xSUSHI from this contract\r\n    }\r\n    \r\n    // **** xSUSHI\r\n    /// @notice Enter Meowshi. Deposit xSUSHI `amount`. Mint NYAN for `to`.\r\n    function nyan(address to, uint256 amount) external returns (uint256 shares) {\r\n        ISushiBar(sushiBar).transferFrom(msg.sender, address(this), amount);\r\n        (, shares) = bentoBox.deposit(IERC20(sushiBar), address(this), address(this), amount, 0);\r\n        nyanMint(to, shares * multiplier);\r\n    }\r\n\r\n    /// @notice Leave Meowshi. Burn NYAN `amount`. Claim xSUSHI for `to`.\r\n    function unNyan(address to, uint256 amount) external returns (uint256 amountOut) {\r\n        nyanBurn(amount);\r\n        (amountOut, ) = bentoBox.withdraw(IERC20(sushiBar), address(this), to, 0, amount / multiplier);\r\n    }\r\n    \r\n    // **** SUSHI\r\n    /// @notice Enter Meowshi. Deposit SUSHI `amount`. Mint NYAN for `to`.\r\n    function nyanSushi(address to, uint256 amount) external returns (uint256 shares) {\r\n        sushiToken.transferFrom(msg.sender, address(this), amount);\r\n        ISushiBar(sushiBar).enter(amount);\r\n        (, shares) = bentoBox.deposit(IERC20(sushiBar), address(this), address(this), ISushiBar(sushiBar).balanceOf(address(this)), 0);\r\n        nyanMint(to, shares * multiplier);\r\n    }\r\n\r\n    /// @notice Leave Meowshi. Burn NYAN `amount`. Claim SUSHI for `to`.\r\n    function unNyanSushi(address to, uint256 amount) external returns (uint256 amountOut) {\r\n        nyanBurn(amount);\r\n        (amountOut, ) = bentoBox.withdraw(IERC20(sushiBar), address(this), address(this), 0, amount / multiplier);\r\n        ISushiBar(sushiBar).leave(amountOut);\r\n        sushiToken.transfer(to, sushiToken.balanceOf(address(this))); \r\n    }\r\n\r\n    // **** SUPPLY\r\n    /// @notice Internal mint function for *nyan*.\r\n    function nyanMint(address to, uint256 amount) private {\r\n        balanceOf[to] += amount;\r\n        totalSupply += amount;\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n    \r\n    /// @notice Internal burn function for *unNyan*.\r\n    function nyanBurn(uint256 amount) private {\r\n        balanceOf[msg.sender] -= amount;\r\n        totalSupply -= amount;\r\n        emit Transfer(msg.sender, address(0), amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"calls\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"revertOnFail\",\"type\":\"bool\"}],\"name\":\"batch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"nyan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"nyanSushi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unNyan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unNyanSushi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Meowshi","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c7bbcf145d937e6a64d56e6d6dd113bfd56eacaa61b7c3bdf507875990319d5e"}]}