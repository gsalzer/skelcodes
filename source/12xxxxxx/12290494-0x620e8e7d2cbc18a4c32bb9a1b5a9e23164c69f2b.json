{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Auction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\ncontract DutchAuction{\\r\\n\\r\\n    IERC20 public token;\\r\\n    mapping (address => uint) public reserve;\\r\\n    mapping (address => uint) public committed;\\r\\n    mapping (address => bool) public whitelisted;\\r\\n    uint256 public startPrice;\\r\\n    uint256 public tokensLeft;\\r\\n    uint256 public minPrice;\\r\\n    address payable public owner;\\r\\n    uint256 public bought;\\r\\n    uint256 public price;\\r\\n    uint256 public tokensStart;\\r\\n    uint256 public finish;\\r\\n    uint256 public start;\\r\\n    bool public whitelistOnly;\\r\\n    bool public hasClaimed;\\r\\n    uint256 public open; // 0 = closed, 1 = open, 2 = ended;\\r\\n    address factory;\\r\\n\\r\\n    constructor() {\\r\\n        // Don't allow implementation to be initialized.\\r\\n        token = IERC20(address(1));\\r\\n    }\\r\\n\\r\\n    function initialize(IERC20 _token, address payable _owner, address factory_) external {\\r\\n        require(address(token) == address(0), \\\"already initialized\\\");\\r\\n        require(address(_token) != address(0), \\\"token can not be null\\\");\\r\\n\\r\\n        owner = _owner;\\r\\n        token = _token;\\r\\n        factory = factory_;\\r\\n    }\\r\\n\\r\\n    function changeOwner(address payable newOwner) external {\\r\\n        require(msg.sender == owner, \\\"Not owner\\\");\\r\\n        owner = newOwner;\\r\\n    }\\r\\n\\r\\n    function startAuction(\\r\\n        uint256 min,\\r\\n        uint256 _startPrice,\\r\\n        uint256 _start,\\r\\n        uint256 _finish,\\r\\n        address[] memory whitelistd,\\r\\n        bool whitelist\\r\\n    )\\r\\n    public\\r\\n    {\\r\\n        require(msg.sender == owner, \\\"Not owner\\\");\\r\\n        require(open == 0, \\\"Auction has started\\\");\\r\\n        require(_start < _finish, \\\"Start time below finish time\\\");\\r\\n        require(_finish > block.timestamp, \\\"Finish time must be in the future\\\");\\r\\n        require(_start >= block.timestamp, \\\"Start time must be in the future\\\");\\r\\n\\r\\n        finish = _finish;\\r\\n        start = _start;\\r\\n        startPrice = _startPrice;\\r\\n        minPrice = min;\\r\\n        tokensLeft = token.balanceOf(address(this));\\r\\n        tokensStart = token.balanceOf(address(this));\\r\\n        open = 1;\\r\\n        whitelistOnly = whitelist;\\r\\n\\r\\n        if (whitelist) {\\r\\n            for (uint i=0; i < whitelistd.length; i++) {\\r\\n                whitelisted[whitelistd[i]] = true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        updateCurrentPrice();\\r\\n    }\\r\\n\\r\\n    function getCurrentPrice() public view returns (uint256) {\\r\\n        uint256 returnPrice = startPrice;\\r\\n\\r\\n        if (open == 1 && block.timestamp >= start) {\\r\\n            returnPrice = startPrice*(finish - block.timestamp) / (finish - start);\\r\\n            if (returnPrice < minPrice){\\r\\n                returnPrice = minPrice;\\r\\n            }\\r\\n        }\\r\\n        if (open == 2) {\\r\\n            returnPrice = price;\\r\\n        }\\r\\n\\r\\n        return returnPrice;\\r\\n    }\\r\\n\\r\\n    function updateCurrentPrice() public returns (uint256) {\\r\\n        require (open != 0, \\\"Auction has not started\\\");\\r\\n\\r\\n        if (open == 1) {\\r\\n            if (finish <= block.timestamp){\\r\\n                open = 2;\\r\\n            }\\r\\n            if (block.timestamp >= start) {\\r\\n                price = startPrice*(finish - block.timestamp) / (finish - start);\\r\\n                if (price < minPrice){\\r\\n                    price = minPrice;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return price;\\r\\n    }\\r\\n\\r\\n    function closeAuction() public {\\r\\n        require (open == 1, \\\"Not active\\\");\\r\\n        require ((msg.sender == owner && bought == 0) || (block.timestamp > finish),\\r\\n            \\\"Either not owner and no current bid or auction finish time not reached\\\");\\r\\n\\r\\n        open = 2;\\r\\n    }\\r\\n\\r\\n    function updateWhitelist(address[] memory whitelistd) public{\\r\\n        require (msg.sender == owner, \\\"Not owner\\\");\\r\\n\\r\\n        for (uint256 i=0; i < whitelistd.length; i++) {\\r\\n            whitelisted[whitelistd[i]] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function bid(uint256 amount) public payable {\\r\\n        require (open == 1 && block.timestamp >= start, \\\"Not active auction or start time not reached\\\");\\r\\n        require (msg.value >= updateCurrentPrice() * amount / 10 ** 18, \\\"Not enough payment\\\");\\r\\n        require (msg.value > 0, \\\"Cant bid with 0\\\");\\r\\n\\r\\n        if (whitelistOnly){\\r\\n            require(whitelisted[msg.sender]);\\r\\n        }\\r\\n\\r\\n        if (tokensLeft < amount){\\r\\n            amount = tokensLeft;\\r\\n        }\\r\\n\\r\\n        tokensLeft = tokensLeft - amount;\\r\\n        reserve[msg.sender] += amount;\\r\\n        committed[msg.sender] += msg.value;\\r\\n        bought += amount;\\r\\n\\r\\n        if (tokensLeft == 0){\\r\\n            open = 2;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claim() public {\\r\\n        require(open == 2, \\\"Not closed\\\");\\r\\n        uint256 refund;\\r\\n        uint256 tokens;\\r\\n        tokens = reserve[msg.sender];\\r\\n        committed[msg.sender] -= reserve[msg.sender] * price / 10 ** 18;\\r\\n        reserve[msg.sender] = 0;\\r\\n        refund = committed[msg.sender];\\r\\n        committed[msg.sender] = 0;\\r\\n        token.transfer(msg.sender, tokens);\\r\\n        payable(msg.sender).transfer(refund);\\r\\n    }\\r\\n\\r\\n    fallback () external payable {\\r\\n        if (open == 1 && block.timestamp >= start){\\r\\n            bid(msg.value * 10 ** 18 / updateCurrentPrice());\\r\\n        }\\r\\n        else if (open == 2){\\r\\n            require(msg.value == 0);\\r\\n            claim();\\r\\n            if (msg.sender == owner){\\r\\n                withdraw();\\r\\n            }\\r\\n        }\\r\\n        else{\\r\\n            revert();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdraw() public {\\r\\n        require(hasClaimed == false, \\\"Has been claimed\\\");\\r\\n        require(open == 2, \\\"Not closed\\\");\\r\\n\\r\\n        hasClaimed = true;\\r\\n        uint256 withdrawAmount = price * bought / 10**18;\\r\\n        uint256 withdrawFee = withdrawAmount / 200;\\r\\n\\r\\n        address payable alchemyRouter = IDutchAuctionFactory(factory).getRouter();\\r\\n\\r\\n        // send a 0.5% fee to the router\\r\\n        IAlchemyRouter(alchemyRouter).deposit{value: withdrawFee}();\\r\\n\\r\\n        owner.transfer(withdrawAmount - withdrawFee);\\r\\n        token.transfer(owner, tokensLeft);\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IDutchAuctionFactory {\\r\\n    function getRouter() external view returns (address payable);\\r\\n}\\r\\n\\r\\n\\r\\ninterface IAlchemyRouter {\\r\\n    function deposit() external payable;\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"committed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_finish\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"whitelistd\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"whitelist\",\"type\":\"bool\"}],\"name\":\"startAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"whitelistd\",\"type\":\"address[]\"}],\"name\":\"updateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistOnly\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DutchAuction","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}