{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n// by William Hilton (https://github.com/wmhilton)\r\n// written using remix.ethereum.org\r\npragma solidity >=0.8.3 <0.9.0;\r\n\r\n/**\r\n * @dev ERC-721 interface for accepting safe transfers.\r\n * See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md.\r\n */\r\ninterface ERC721TokenReceiver {\r\n  function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns(bytes4);\r\n}\r\n\r\n/**\r\n * @title NFT\r\n * @dev A simple 1 of 1 NFT implementation\r\n */\r\ncontract ERC721Token {\r\n    /**\r\n     * @dev Emits when ownership of any NFT changes by any mechanism. This event emits when NFTs are\r\n     * created (`from` == 0) and destroyed (`to` == 0). Exception: during contract creation, any\r\n     * number of NFTs may be created and assigned without emitting Transfer. At the time of any\r\n     * transfer, the approved address for that NFT (if any) is reset to none.\r\n     */\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n  \r\n    /**\r\n     * @dev This emits when the approved address for an NFT is changed or reaffirmed. The zero\r\n     * address indicates there is no approved address. When a Transfer event emits, this also\r\n     * indicates that the approved address for that NFT (if any) is reset to none.\r\n     */\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n\r\n    /**\r\n     * @dev This emits when an operator is enabled or disabled for an owner. The operator can manage\r\n     * all NFTs of the owner.\r\n     */\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    uint256 internal count = 0;\r\n    uint256 internal burned = 0;\r\n    mapping (uint256 => address) internal owners;\r\n    mapping (uint256 => string) internal tokenURIs;\r\n    mapping (uint256 => address) internal approveds;\r\n    mapping (address => mapping (address => bool)) internal operators;\r\n    \r\n    // This is pretty useless but necessary to be spec compliant\r\n    mapping (address => uint256) internal balances;\r\n    \r\n    // This keeps users from accidentally uploading the same NFT twice\r\n    mapping (string => bool) internal usedTokenURIs;\r\n    \r\n    /**\r\n     * @dev Set contract deployer as owner\r\n     */\r\n    constructor() {}\r\n    \r\n    function mint(string calldata _tokenURI) public returns (uint256) {\r\n        uint256 oldCount = count;\r\n        count++;\r\n        require(count > oldCount && bytes(_tokenURI).length > 0 && usedTokenURIs[_tokenURI] != true);\r\n\r\n        owners[count] = msg.sender;\r\n        balances[msg.sender]++;\r\n        tokenURIs[count] = _tokenURI;\r\n        usedTokenURIs[_tokenURI] = true;\r\n        emit Transfer(address(0), msg.sender, count);\r\n        return count;\r\n    }\r\n    \r\n    function burn(uint256 _tokenId) public {\r\n        address _owner = owners[_tokenId];\r\n        require(\r\n            _owner != address(0) && \r\n            (msg.sender == _owner || operators[_owner][msg.sender] || msg.sender == approveds[_tokenId])\r\n        );\r\n        owners[_tokenId] = address(0);\r\n        balances[_owner]--;\r\n        approveds[_tokenId] = address(0);\r\n        burned++;\r\n        emit Transfer(_owner, address(0), _tokenId);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return \"NFTs 4 All\";\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return \"\";\r\n    }\r\n    \r\n    function decimals() public pure returns (uint8) {\r\n        return 0;\r\n    }\r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n        return count - burned;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a distinct Uniform Resource Identifier (URI) for a given asset. It Throws if\r\n     * `_tokenId` is not a valid NFT. URIs are defined in RFC3986. The URI may point to a JSON file\r\n     * that conforms to the \"ERC721 Metadata JSON Schema\".\r\n     * @return URI of _tokenId.\r\n     */\r\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\r\n        string memory _tokenURI = tokenURIs[_tokenId];\r\n        require(bytes(_tokenURI).length != 0);\r\n        return _tokenURI;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are\r\n     * considered invalid, and this function throws for queries about the zero address.\r\n     * @param _owner Address for whom to query the balance.\r\n     * @return Balance of _owner.\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        require(_owner != address(0));\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the owner of the NFT. NFTs assigned to the zero address are\r\n     * considered invalid, and queries about them do throw.\r\n     * @param _tokenId The identifier for an NFT.\r\n     * @return Address of _tokenId owner.\r\n     */\r\n    function ownerOf(uint256 _tokenId) public view returns (address) {\r\n        address _owner = owners[_tokenId];\r\n        require(_owner != address(0));\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Set or reaffirm the approved address for an NFT.\r\n     * @notice The zero address indicates there is no approved address. Throws unless `msg.sender` is\r\n     * the current NFT owner, or an authorized operator of the current owner.\r\n     * @param _approved The new approved NFT controller.\r\n     * @param _tokenId The NFT to approve.\r\n     */\r\n    function approve(address _approved, uint256 _tokenId) public {\r\n        address _owner = owners[_tokenId];\r\n        require(_owner != address(0) && (msg.sender == _owner || operators[_owner][msg.sender]));\r\n        approveds[_tokenId] = _approved;\r\n        emit Approval(_owner, _approved, _tokenId);\r\n    }\r\n    \r\n    /**\r\n     * @dev Get the approved address for a single NFT.\r\n     * @notice Throws if `_tokenId` is not a valid NFT.\r\n     * @param _tokenId The NFT to find the approved address for.\r\n     * @return Address that _tokenId is approved for.\r\n     */\r\n    function getApproved(uint256 _tokenId) public view returns (address) {\r\n        address _owner = owners[_tokenId];\r\n        require(_owner != address(0));\r\n        address _approved = approveds[_tokenId];\r\n        return _approved;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\r\n     * address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero\r\n     * address. Throws if `_tokenId` is not a valid NFT.\r\n     * @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\r\n     * they may be permanently lost.\r\n     * @param _from The current owner of the NFT.\r\n     * @param _to The new owner.\r\n     * @param _tokenId The NFT to transfer.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public {\r\n        address _owner = owners[_tokenId];\r\n        require(\r\n            _owner != address(0) && \r\n            (msg.sender == _owner || operators[_owner][msg.sender] || msg.sender == approveds[_tokenId]) &&\r\n            _from == _owner && \r\n            _to != address(0)\r\n        );\r\n        owners[_tokenId] = _to;\r\n        balances[_from]--;\r\n        balances[_to]++;\r\n        approveds[_tokenId] = address(0);\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers the ownership of an NFT from one address to another address.\r\n     * @notice Throws unless `msg.sender` is the current owner, an authorized operator, or the\r\n     * approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is\r\n     * the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this\r\n     * function checks if `_to` is a smart contract (code size > 0). If so, it calls\r\n     * `onERC721Received` on `_to` and throws if the return value is not\r\n     * `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`.\r\n     * @param _from The current owner of the NFT.\r\n     * @param _to The new owner.\r\n     * @param _tokenId The NFT to transfer.\r\n     * @param _data Additional data with no specified format, sent in call to `_to`.\r\n     */\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) public {\r\n        _safeTransferFrom(_from, _to, _tokenId, _data);\r\n    }\r\n    \r\n    /**\r\n    * @dev Transfers the ownership of an NFT from one address to another address.\r\n    * @notice This works identically to the other function with an extra data parameter, except this\r\n    * function just sets data to \"\"\r\n    * @param _from The current owner of the NFT.\r\n    * @param _to The new owner.\r\n    * @param _tokenId The NFT to transfer.\r\n    */\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public {\r\n        _safeTransferFrom(_from, _to, _tokenId, \"\");\r\n    }\r\n\r\n    function _safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory _data) private {\r\n        transferFrom(_from, _to, _tokenId);\r\n        \r\n        if (isContract(_to)) {\r\n            bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\r\n            // Return value of a smart contract that can receive NFT.\r\n            // Equal to: bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\")).\r\n            require(retval == 0x150b7a02);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Enables or disables approval for a third party (\"operator\") to manage all of\r\n     * `msg.sender`'s assets. It also emits the ApprovalForAll event.\r\n     * @notice The contract MUST allow multiple operators per owner.\r\n     * @param _operator Address to add to the set of authorized operators.\r\n     * @param _approved True if the operators is approved, false to revoke approval.\r\n     */\r\n    function setApprovalForAll(address _operator, bool _approved) public {\r\n        operators[msg.sender][_operator] = _approved;\r\n        emit ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns true if `_operator` is an approved operator for `_owner`, false otherwise.\r\n     * @param _owner The address that owns the NFTs.\r\n     * @param _operator The address that acts on behalf of the owner.\r\n     * @return True if approved for all, false otherwise.\r\n     */\r\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\r\n        return operators[_owner][_operator];\r\n    }\r\n    \r\n    /**\r\n     * @dev Function to check which interfaces are suported by this contract.\r\n     * @param _interfaceID Id of the interface.\r\n     * @return True if _interfaceID is supported, false otherwise.\r\n     */\r\n    function supportsInterface(bytes4 _interfaceID) public pure returns (bool) {\r\n        // 0x80ac58cd is ERC721 (the Non-Fungible Token Standard)\r\n        // 0x01ffc9a7 is ERC165 (the Standard Interface Detection)\r\n        return _interfaceID == 0x80ac58cd || _interfaceID == 0x01ffc9a7;\r\n    }\r\n    \r\n    /**\r\n    * @dev Returns whether the target address is a contract.\r\n    * @param _addr Address to check.\r\n    * @return addressCheck True if _addr is a contract, false if not.\r\n    */\r\n    function isContract(address _addr) private view returns (bool addressCheck) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n        \r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly { codehash := extcodehash(_addr) } // solhint-disable-line\r\n        addressCheck = (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n}\r\n\r\n//transaction cost 1098930\r\n//execution cost 784430","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ERC721Token","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a764e137749306e15fd098b7343e196f10443d589d5b59a0a839cb2261389b95"}]}