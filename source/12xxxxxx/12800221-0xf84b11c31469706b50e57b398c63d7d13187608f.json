{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.4.3 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IApi3Pool.sol\r\n\r\npragma solidity 0.8.6;\r\n\r\ninterface IApi3Pool {\r\n    struct Reward {\r\n        uint32 atBlock;\r\n        uint224 amount;\r\n        uint256 totalSharesThen;\r\n        uint256 totalStakeThen;\r\n    }\r\n\r\n    function EPOCH_LENGTH() external view returns (uint256);\r\n\r\n    function REWARD_VESTING_PERIOD() external view returns (uint256);\r\n\r\n    function genesisEpoch() external view returns (uint256);\r\n\r\n    function epochIndexToReward(uint256) external view returns (Reward memory);\r\n}\r\n\r\n\r\n// File contracts/interfaces/ITimelockManager.sol\r\n\r\npragma solidity 0.8.6;\r\n\r\ninterface ITimelockManager {\r\n    struct Timelock {\r\n        uint256 totalAmount;\r\n        uint256 remainingAmount;\r\n        uint256 releaseStart;\r\n        uint256 releaseEnd;\r\n    }\r\n\r\n    function timelocks(address) external view returns (Timelock memory);\r\n}\r\n\r\n\r\n// File contracts/LockedApi3.sol\r\n\r\npragma solidity 0.8.6;\r\n\r\n\r\n\r\n\r\ncontract LockedApi3 is Ownable {\r\n    event SetVestingAddresses(address[] vestingAddresses);\r\n\r\n    address public constant API3_TOKEN =\r\n        0x0b38210ea11411557c13457D4dA7dC6ea731B88a;\r\n    address public constant API3_POOL =\r\n        0x6dd655f10d4b9E242aE186D9050B68F725c76d76;\r\n    address public constant TIMELOCK_MANAGER =\r\n        0xFaef86994a37F1c8b2A5c73648F07dd4eFF02baA;\r\n    address public constant V1_TREASURY =\r\n        0xe7aF7c5982e073aC6525a34821fe1B3e8E432099;\r\n    address public constant PRIMARY_TREASURY =\r\n        0xD9F80Bdb37E6Bad114D747E60cE6d2aaF26704Ae;\r\n    address public constant SECONDARY_TREASURY =\r\n        0x556ECbb0311D350491Ba0EC7E019c354D7723CE0;\r\n\r\n    IERC20 public immutable api3Token;\r\n    IApi3Pool public immutable api3Pool;\r\n    ITimelockManager public immutable timelockManager;\r\n    address[] public vestingAddresses;\r\n\r\n    constructor() {\r\n        api3Token = IERC20(API3_TOKEN);\r\n        api3Pool = IApi3Pool(API3_POOL);\r\n        timelockManager = ITimelockManager(TIMELOCK_MANAGER);\r\n    }\r\n\r\n    function setVestingAddresses(address[] memory _vestingAddresses)\r\n        external\r\n        onlyOwner()\r\n    {\r\n        vestingAddresses = _vestingAddresses;\r\n        emit SetVestingAddresses(_vestingAddresses);\r\n    }\r\n\r\n    function getTotalLocked() external view returns (uint256 totalLocked) {\r\n        totalLocked = getTimelocked() + getLockedByGovernance();\r\n    }\r\n\r\n    function getTimelocked() public view returns (uint256 timelocked) {\r\n        timelocked = getLockedRewards() + getLockedVestings();\r\n    }\r\n\r\n    function getLockedByGovernance()\r\n        public\r\n        view\r\n        returns (uint256 lockedByGoverance)\r\n    {\r\n        lockedByGoverance =\r\n            api3Token.balanceOf(V1_TREASURY) +\r\n            api3Token.balanceOf(PRIMARY_TREASURY) +\r\n            api3Token.balanceOf(SECONDARY_TREASURY);\r\n    }\r\n\r\n    function getLockedRewards()\r\n        public\r\n        view\r\n        returns (uint256 totalLockedRewards)\r\n    {\r\n        uint256 currentEpoch = block.timestamp / api3Pool.EPOCH_LENGTH();\r\n        uint256 oldestLockedEpoch = currentEpoch -\r\n            api3Pool.REWARD_VESTING_PERIOD() +\r\n            1;\r\n        if (oldestLockedEpoch < api3Pool.genesisEpoch() + 1) {\r\n            oldestLockedEpoch = api3Pool.genesisEpoch() + 1;\r\n        }\r\n        for (\r\n            uint256 indEpoch = currentEpoch;\r\n            indEpoch >= oldestLockedEpoch;\r\n            indEpoch--\r\n        ) {\r\n            IApi3Pool.Reward memory lockedReward = api3Pool.epochIndexToReward(\r\n                indEpoch\r\n            );\r\n            if (lockedReward.atBlock != 0) {\r\n                totalLockedRewards += lockedReward.amount;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getLockedVestings()\r\n        public\r\n        view\r\n        returns (uint256 totalLockedVestings)\r\n    {\r\n        for (\r\n            uint256 indVesting = 0;\r\n            indVesting < vestingAddresses.length;\r\n            indVesting++\r\n        ) {\r\n            ITimelockManager.Timelock memory timelock = timelockManager\r\n            .timelocks(vestingAddresses[indVesting]);\r\n            if (block.timestamp <= timelock.releaseStart) {\r\n                totalLockedVestings += timelock.totalAmount;\r\n            } else if (block.timestamp >= timelock.releaseEnd) {\r\n                continue;\r\n            } else {\r\n                uint256 totalTime = timelock.releaseEnd - timelock.releaseStart;\r\n                uint256 passedTime = block.timestamp - timelock.releaseStart;\r\n                uint256 unlocked = (timelock.totalAmount * passedTime) /\r\n                    totalTime;\r\n                totalLockedVestings += timelock.totalAmount - unlocked;\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"vestingAddresses\",\"type\":\"address[]\"}],\"name\":\"SetVestingAddresses\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"API3_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"API3_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRIMARY_TREASURY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDARY_TREASURY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIMELOCK_MANAGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"V1_TREASURY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"api3Pool\",\"outputs\":[{\"internalType\":\"contract IApi3Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"api3Token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockedByGovernance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedByGoverance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLockedRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockedVestings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLockedVestings\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimelocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timelocked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLocked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_vestingAddresses\",\"type\":\"address[]\"}],\"name\":\"setVestingAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockManager\",\"outputs\":[{\"internalType\":\"contract ITimelockManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestingAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LockedApi3","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e67721091b82ffd87410978e189e1e9797a11cefa556a876b961ca2dbae5bb11"}]}