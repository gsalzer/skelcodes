{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.4.25 <0.7.0;\\r\\n\\r\\nimport '@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol';\\r\\n\\r\\nimport './interfaces/IToken.sol';\\r\\nimport './interfaces/IAuction.sol';\\r\\nimport './interfaces/IStaking.sol';\\r\\nimport './interfaces/ISubBalances.sol';\\r\\nimport './interfaces/IStakingV1.sol';\\r\\n\\r\\ncontract Staking is IStaking, Initializable, AccessControlUpgradeable {\\r\\n    using SafeMathUpgradeable for uint256;\\r\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\r\\n\\r\\n    /** Events */\\r\\n    event Stake(\\r\\n        address indexed account,\\r\\n        uint256 indexed sessionId,\\r\\n        uint256 amount,\\r\\n        uint256 start,\\r\\n        uint256 end,\\r\\n        uint256 shares\\r\\n    );\\r\\n\\r\\n    event MaxShareUpgrade(\\r\\n        address indexed account,\\r\\n        uint256 indexed sessionId,\\r\\n        uint256 amount,\\r\\n        uint256 newAmount,\\r\\n        uint256 shares,\\r\\n        uint256 newShares,\\r\\n        uint256 start,\\r\\n        uint256 end\\r\\n    );\\r\\n\\r\\n    event Unstake(\\r\\n        address indexed account,\\r\\n        uint256 indexed sessionId,\\r\\n        uint256 amount,\\r\\n        uint256 start,\\r\\n        uint256 end,\\r\\n        uint256 shares\\r\\n    );\\r\\n\\r\\n    event MakePayout(\\r\\n        uint256 indexed value,\\r\\n        uint256 indexed sharesTotalSupply,\\r\\n        uint256 indexed time\\r\\n    );\\r\\n\\r\\n    event AccountRegistered(\\r\\n        address indexed account,\\r\\n        uint256 indexed totalShares\\r\\n    );\\r\\n\\r\\n    event WithdrawLiquidDiv(\\r\\n        address indexed account,\\r\\n        address indexed tokenAddress,\\r\\n        uint256 indexed interest\\r\\n    );\\r\\n\\r\\n    /** Structs */\\r\\n    struct Payout {\\r\\n        uint256 payout;\\r\\n        uint256 sharesTotalSupply;\\r\\n    }\\r\\n\\r\\n    struct Session {\\r\\n        uint256 amount;\\r\\n        uint256 start;\\r\\n        uint256 end;\\r\\n        uint256 shares;\\r\\n        uint256 firstPayout;\\r\\n        uint256 lastPayout;\\r\\n        bool withdrawn;\\r\\n        uint256 payout;\\r\\n    }\\r\\n\\r\\n    struct Addresses {\\r\\n        address mainToken;\\r\\n        address auction;\\r\\n        address subBalances;\\r\\n    }\\r\\n\\r\\n    Addresses public addresses;\\r\\n    IStakingV1 public stakingV1;\\r\\n\\r\\n    /** Roles */\\r\\n    bytes32 public constant MIGRATOR_ROLE = keccak256('MIGRATOR_ROLE');\\r\\n    bytes32 public constant EXTERNAL_STAKER_ROLE =\\r\\n        keccak256('EXTERNAL_STAKER_ROLE');\\r\\n    bytes32 public constant MANAGER_ROLE = keccak256('MANAGER_ROLE');\\r\\n\\r\\n    /** Public Variables */\\r\\n    uint256 public shareRate; //shareRate used to calculate the number of shares\\r\\n    uint256 public sharesTotalSupply; //total shares supply\\r\\n    uint256 public nextPayoutCall; //used to calculate when the daily makePayout() should run\\r\\n    uint256 public stepTimestamp; // 24h * 60 * 60\\r\\n    uint256 public startContract; //time the contract started\\r\\n    uint256 public globalPayout;\\r\\n    uint256 public globalPayin;\\r\\n    uint256 public lastSessionId; //the ID of the last stake\\r\\n    uint256 public lastSessionIdV1; //the ID of the last stake from layer 1 staking contract\\r\\n\\r\\n    /** Mappings / Arrays */\\r\\n    // individual staking sessions\\r\\n    mapping(address => mapping(uint256 => Session)) public sessionDataOf;\\r\\n    //array with staking sessions of an address\\r\\n    mapping(address => uint256[]) public sessionsOf;\\r\\n    //array with daily payouts\\r\\n    Payout[] public payouts;\\r\\n\\r\\n    /** Booleans */\\r\\n    bool public init_;\\r\\n\\r\\n    uint256 public basePeriod; //350 days, time of the first BPD\\r\\n    uint256 public totalStakedAmount; //total amount of staked AXN\\r\\n\\r\\n    bool private maxShareEventActive; //true if maxShare upgrade is enabled\\r\\n\\r\\n    uint16 private maxShareMaxDays; //maximum number of days a stake length can be in order to qualify for maxShare upgrade\\r\\n    uint256 private shareRateScalingFactor; //scaling factor, default 1 to be used on the shareRate calculation\\r\\n\\r\\n    uint256 internal totalVcaRegisteredShares; //total number of shares from accounts that registered for the VCA\\r\\n\\r\\n    mapping(address => uint256) internal tokenPricePerShare; //price per share for every token that is going to be offered as divident through the VCA\\r\\n    EnumerableSetUpgradeable.AddressSet internal divTokens; //list of dividends tokens\\r\\n\\r\\n    //keep track if an address registered for VCA\\r\\n    mapping(address => bool) internal isVcaRegistered;\\r\\n    //total shares of active stakes for an address\\r\\n    mapping(address => uint256) internal totalSharesOf;\\r\\n    //mapping address-> VCA token used for VCA divs calculation. The way the system works is that deductBalances is starting as totalSharesOf x price of the respective token. So when the token price appreciates, the interest earned is the difference between totalSharesOf x new price - deductBalance [respective token]\\r\\n    mapping(address => mapping(address => uint256)) internal deductBalances;\\r\\n\\r\\n    bool internal paused;\\r\\n\\r\\n    /* New variables must go below here. */\\r\\n\\r\\n    modifier onlyManager() {\\r\\n        require(hasRole(MANAGER_ROLE, _msgSender()), 'Caller is not a manager');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyMigrator() {\\r\\n        require(\\r\\n            hasRole(MIGRATOR_ROLE, _msgSender()),\\r\\n            'Caller is not a migrator'\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyExternalStaker() {\\r\\n        require(\\r\\n            hasRole(EXTERNAL_STAKER_ROLE, _msgSender()),\\r\\n            'Caller is not a external staker'\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAuction() {\\r\\n        require(msg.sender == addresses.auction, 'Caller is not the auction');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier pausable() {\\r\\n        require(\\r\\n            paused == false || hasRole(MIGRATOR_ROLE, _msgSender()),\\r\\n            'Contract is paused'\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function initialize(address _manager, address _migrator)\\r\\n        public\\r\\n        initializer\\r\\n    {\\r\\n        _setupRole(MANAGER_ROLE, _manager);\\r\\n        _setupRole(MIGRATOR_ROLE, _migrator);\\r\\n        init_ = false;\\r\\n    }\\r\\n\\r\\n    // @param account {address} - address of account\\r\\n    function sessionsOf_(address account)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        return sessionsOf[account];\\r\\n    }\\r\\n\\r\\n    //staking function which receives AXN and creates the stake - takes as param the amount of AXN and the number of days to be staked\\r\\n    //staking days need to be >0 and lower than max days which is 5555\\r\\n    // @param amount {uint256} - AXN amount to be staked\\r\\n    // @param stakingDays {uint256} - number of days to be staked\\r\\n    function stake(uint256 amount, uint256 stakingDays) external pausable {\\r\\n        require(stakingDays != 0, 'Staking: Staking days < 1');\\r\\n        require(stakingDays <= 5555, 'Staking: Staking days > 5555');\\r\\n\\r\\n        //call stake internal method\\r\\n        stakeInternal(amount, stakingDays, msg.sender);\\r\\n        //on stake axion gets burned\\r\\n        IToken(addresses.mainToken).burn(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    //external stake creates a stake for a different account than the caller. It takes an extra param the staker address\\r\\n    // @param amount {uint256} - AXN amount to be staked\\r\\n    // @param stakingDays {uint256} - number of days to be staked\\r\\n    // @param staker {address} - account address to create the stake for\\r\\n    function externalStake(\\r\\n        uint256 amount,\\r\\n        uint256 stakingDays,\\r\\n        address staker\\r\\n    ) external override onlyExternalStaker pausable {\\r\\n        require(stakingDays != 0, 'Staking: Staking days < 1');\\r\\n        require(stakingDays <= 5555, 'Staking: Staking days > 5555');\\r\\n\\r\\n        stakeInternal(amount, stakingDays, staker);\\r\\n    }\\r\\n\\r\\n    // @param amount {uint256} - AXN amount to be staked\\r\\n    // @param stakingDays {uint256} - number of days to be staked\\r\\n    // @param staker {address} - account address to create the stake for\\r\\n    function stakeInternal(\\r\\n        uint256 amount,\\r\\n        uint256 stakingDays,\\r\\n        address staker\\r\\n    ) internal {\\r\\n        //once a day we need to call makePayout which takes the interest earned for the last day and adds it into the payout array\\r\\n        if (now >= nextPayoutCall) makePayout();\\r\\n\\r\\n        //ensure the user is registered for VCA if not call it\\r\\n        if (isVcaRegistered[staker] == false)\\r\\n            setTotalSharesOfAccountInternal(staker);\\r\\n\\r\\n        //time of staking start is now\\r\\n        uint256 start = now;\\r\\n        //time of stake end is now + number of days * stepTimestamp which is 24 hours\\r\\n        uint256 end = now.add(stakingDays.mul(stepTimestamp));\\r\\n\\r\\n        //increase the last stake ID\\r\\n        lastSessionId = lastSessionId.add(1);\\r\\n\\r\\n        stakeInternalCommon(\\r\\n            lastSessionId,\\r\\n            amount,\\r\\n            start,\\r\\n            end,\\r\\n            stakingDays,\\r\\n            payouts.length,\\r\\n            staker\\r\\n        );\\r\\n    }\\r\\n\\r\\n    //payment function uses param address and amount to be paid. Amount is minted to address\\r\\n    // @param to {address} - account address to send the payment to\\r\\n    // @param amount {uint256} - AXN amount to be paid\\r\\n    function _initPayout(address to, uint256 amount) internal {\\r\\n        IToken(addresses.mainToken).mint(to, amount);\\r\\n        globalPayout = globalPayout.add(amount);\\r\\n    }\\r\\n\\r\\n    //staking interest calculation goes through the payout array and calculates the interest based on the number of shares the user has and the payout for every day\\r\\n    // @param firstPayout {uint256} - id of the first day of payout for the stake\\r\\n    // @param lastPayout {uint256} - id of the last day of payout for the stake\\r\\n    // @param shares {uint256} - number of shares of the stake\\r\\n    function calculateStakingInterest(\\r\\n        uint256 firstPayout,\\r\\n        uint256 lastPayout,\\r\\n        uint256 shares\\r\\n    ) public view returns (uint256) {\\r\\n        uint256 stakingInterest;\\r\\n        //calculate lastIndex as minimum of lastPayout from stake session and current day (payouts.length).\\r\\n        uint256 lastIndex = MathUpgradeable.min(payouts.length, lastPayout);\\r\\n\\r\\n        for (uint256 i = firstPayout; i < lastIndex; i++) {\\r\\n            uint256 payout =\\r\\n                payouts[i].payout.mul(shares).div(payouts[i].sharesTotalSupply);\\r\\n\\r\\n            stakingInterest = stakingInterest.add(payout);\\r\\n        }\\r\\n\\r\\n        return stakingInterest;\\r\\n    }\\r\\n\\r\\n    //unstake function\\r\\n    // @param sessionID {uint256} - id of the stake\\r\\n    function unstake(uint256 sessionId) external pausable {\\r\\n        Session storage session = sessionDataOf[msg.sender][sessionId];\\r\\n\\r\\n        //ensure the stake hasn't been withdrawn before\\r\\n        require(\\r\\n            session.shares != 0 && session.withdrawn == false,\\r\\n            'Staking: Stake withdrawn or not set'\\r\\n        );\\r\\n\\r\\n        uint256 actualEnd = now;\\r\\n        //calculate the amount the stake earned; to be paid\\r\\n        uint256 amountOut = unstakeInternal(session, sessionId, actualEnd);\\r\\n\\r\\n        // To account\\r\\n        _initPayout(msg.sender, amountOut);\\r\\n    }\\r\\n\\r\\n    //unstake function for layer1 stakes\\r\\n    // @param sessionID {uint256} - id of the layer 1 stake\\r\\n    function unstakeV1(uint256 sessionId) external pausable {\\r\\n        //lastSessionIdv1 is the last stake ID from v1 layer\\r\\n        require(sessionId <= lastSessionIdV1, 'Staking: Invalid sessionId');\\r\\n\\r\\n        Session storage session = sessionDataOf[msg.sender][sessionId];\\r\\n\\r\\n        // Unstaked already\\r\\n        require(\\r\\n            session.shares == 0 && session.withdrawn == false,\\r\\n            'Staking: Stake withdrawn'\\r\\n        );\\r\\n\\r\\n        (\\r\\n            uint256 amount,\\r\\n            uint256 start,\\r\\n            uint256 end,\\r\\n            uint256 shares,\\r\\n            uint256 firstPayout\\r\\n        ) = stakingV1.sessionDataOf(msg.sender, sessionId);\\r\\n\\r\\n        // Unstaked in v1 / doesn't exist\\r\\n        require(shares != 0, 'Staking: Stake withdrawn or not set');\\r\\n\\r\\n        uint256 stakingDays = (end - start) / stepTimestamp;\\r\\n        uint256 lastPayout = stakingDays + firstPayout;\\r\\n\\r\\n        uint256 actualEnd = now;\\r\\n        //calculate amount to be paid\\r\\n        uint256 amountOut =\\r\\n            unstakeV1Internal(\\r\\n                sessionId,\\r\\n                amount,\\r\\n                start,\\r\\n                end,\\r\\n                actualEnd,\\r\\n                shares,\\r\\n                firstPayout,\\r\\n                lastPayout,\\r\\n                stakingDays\\r\\n            );\\r\\n\\r\\n        // To account\\r\\n        _initPayout(msg.sender, amountOut);\\r\\n    }\\r\\n\\r\\n    //calculate the amount the stake earned and any penalty because of early/late unstake\\r\\n    // @param amount {uint256} - amount of AXN staked\\r\\n    // @param start {uint256} - start date of the stake\\r\\n    // @param end {uint256} - end date of the stake\\r\\n    // @param stakingInterest {uint256} - interest earned of the stake\\r\\n    function getAmountOutAndPenalty(\\r\\n        uint256 amount,\\r\\n        uint256 start,\\r\\n        uint256 end,\\r\\n        uint256 stakingInterest\\r\\n    ) public view returns (uint256, uint256) {\\r\\n        uint256 stakingSeconds = end.sub(start);\\r\\n        uint256 stakingDays = stakingSeconds.div(stepTimestamp);\\r\\n        uint256 secondsStaked = now.sub(start);\\r\\n        uint256 daysStaked = secondsStaked.div(stepTimestamp);\\r\\n        uint256 amountAndInterest = amount.add(stakingInterest);\\r\\n\\r\\n        // Early\\r\\n        if (stakingDays > daysStaked) {\\r\\n            uint256 payOutAmount =\\r\\n                amountAndInterest.mul(secondsStaked).div(stakingSeconds);\\r\\n\\r\\n            uint256 earlyUnstakePenalty = amountAndInterest.sub(payOutAmount);\\r\\n\\r\\n            return (payOutAmount, earlyUnstakePenalty);\\r\\n            // In time\\r\\n        } else if (daysStaked < stakingDays.add(14)) {\\r\\n            return (amountAndInterest, 0);\\r\\n            // Late\\r\\n        } else if (daysStaked < stakingDays.add(714)) {\\r\\n            return (amountAndInterest, 0);\\r\\n            /** Remove late penalties for now */\\r\\n            // uint256 daysAfterStaking = daysStaked - stakingDays;\\r\\n\\r\\n            // uint256 payOutAmount =\\r\\n            //     amountAndInterest.mul(uint256(714).sub(daysAfterStaking)).div(\\r\\n            //         700\\r\\n            //     );\\r\\n\\r\\n            // uint256 lateUnstakePenalty = amountAndInterest.sub(payOutAmount);\\r\\n\\r\\n            // return (payOutAmount, lateUnstakePenalty);\\r\\n\\r\\n            // Nothing\\r\\n        } else {\\r\\n            return (0, amountAndInterest);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //makePayout function runs once per day and takes all the AXN earned as interest and puts it into payout array for the day\\r\\n    function makePayout() public {\\r\\n        require(now >= nextPayoutCall, 'Staking: Wrong payout time');\\r\\n\\r\\n        uint256 payout = _getPayout();\\r\\n\\r\\n        payouts.push(\\r\\n            Payout({payout: payout, sharesTotalSupply: sharesTotalSupply})\\r\\n        );\\r\\n\\r\\n        nextPayoutCall = nextPayoutCall.add(stepTimestamp);\\r\\n\\r\\n        //call updateShareRate once a day as sharerate increases based on the daily Payout amount\\r\\n        updateShareRate(payout);\\r\\n\\r\\n        emit MakePayout(payout, sharesTotalSupply, now);\\r\\n    }\\r\\n\\r\\n    function readPayout() external view returns (uint256) {\\r\\n        uint256 amountTokenInDay =\\r\\n            IERC20Upgradeable(addresses.mainToken).balanceOf(address(this));\\r\\n\\r\\n        uint256 currentTokenTotalSupply =\\r\\n            (IERC20Upgradeable(addresses.mainToken).totalSupply()).add(\\r\\n                globalPayin\\r\\n            );\\r\\n\\r\\n        uint256 inflation =\\r\\n            uint256(8).mul(currentTokenTotalSupply.add(totalStakedAmount)).div(\\r\\n                36500\\r\\n            );\\r\\n\\r\\n        return amountTokenInDay.add(inflation);\\r\\n    }\\r\\n\\r\\n    function _getPayout() internal returns (uint256) {\\r\\n        //amountTokenInDay - AXN from auction buybacks goes into the staking contract\\r\\n        uint256 amountTokenInDay =\\r\\n            IERC20Upgradeable(addresses.mainToken).balanceOf(address(this));\\r\\n\\r\\n        globalPayin = globalPayin.add(amountTokenInDay);\\r\\n\\r\\n        if (globalPayin > globalPayout) {\\r\\n            globalPayin = globalPayin.sub(globalPayout);\\r\\n            globalPayout = 0;\\r\\n        } else {\\r\\n            globalPayin = 0;\\r\\n            globalPayout = 0;\\r\\n        }\\r\\n\\r\\n        uint256 currentTokenTotalSupply =\\r\\n            (IERC20Upgradeable(addresses.mainToken).totalSupply()).add(\\r\\n                globalPayin\\r\\n            );\\r\\n\\r\\n        IToken(addresses.mainToken).burn(address(this), amountTokenInDay);\\r\\n        //we add 8% inflation\\r\\n        uint256 inflation =\\r\\n            uint256(8).mul(currentTokenTotalSupply.add(totalStakedAmount)).div(\\r\\n                36500\\r\\n            );\\r\\n\\r\\n        globalPayin = globalPayin.add(inflation);\\r\\n\\r\\n        return amountTokenInDay.add(inflation);\\r\\n    }\\r\\n\\r\\n    // formula for shares calculation given a number of AXN and a start and end date\\r\\n    // @param amount {uint256} - amount of AXN\\r\\n    // @param start {uint256} - start date of the stake\\r\\n    // @param end {uint256} - end date of the stake\\r\\n    function _getStakersSharesAmount(\\r\\n        uint256 amount,\\r\\n        uint256 start,\\r\\n        uint256 end\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 stakingDays = (end.sub(start)).div(stepTimestamp);\\r\\n        uint256 numerator = amount.mul(uint256(1819).add(stakingDays));\\r\\n        uint256 denominator = uint256(1820).mul(shareRate);\\r\\n\\r\\n        return (numerator).mul(1e18).div(denominator);\\r\\n    }\\r\\n\\r\\n    // @param amount {uint256} - amount of AXN\\r\\n    // @param shares {uint256} - number of shares\\r\\n    // @param start {uint256} - start date of the stake\\r\\n    // @param end {uint256} - end date of the stake\\r\\n    // @param stakingInterest {uint256} - interest earned by the stake\\r\\n    function _getShareRate(\\r\\n        uint256 amount,\\r\\n        uint256 shares,\\r\\n        uint256 start,\\r\\n        uint256 end,\\r\\n        uint256 stakingInterest\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 stakingDays = (end.sub(start)).div(stepTimestamp);\\r\\n\\r\\n        uint256 numerator =\\r\\n            (amount.add(stakingInterest)).mul(uint256(1819).add(stakingDays));\\r\\n\\r\\n        uint256 denominator = uint256(1820).mul(shares);\\r\\n\\r\\n        return (numerator).mul(1e18).div(denominator);\\r\\n    }\\r\\n\\r\\n    //takes a matures stake and allows restake instead of having to withdraw the axn and stake it back into another stake\\r\\n    //restake will take the principal + interest earned + allow a topup\\r\\n    // @param sessionID {uint256} - id of the stake\\r\\n    // @param stakingDays {uint256} - number of days to be staked\\r\\n    // @param topup {uint256} - amount of AXN to be added as topup to the stake\\r\\n    function restake(\\r\\n        uint256 sessionId,\\r\\n        uint256 stakingDays,\\r\\n        uint256 topup\\r\\n    ) external pausable {\\r\\n        require(stakingDays != 0, 'Staking: Staking days < 1');\\r\\n        require(stakingDays <= 5555, 'Staking: Staking days > 5555');\\r\\n\\r\\n        Session storage session = sessionDataOf[msg.sender][sessionId];\\r\\n\\r\\n        require(\\r\\n            session.shares != 0 && session.withdrawn == false,\\r\\n            'Staking: Stake withdrawn/invalid'\\r\\n        );\\r\\n\\r\\n        uint256 actualEnd = now;\\r\\n\\r\\n        require(session.end <= actualEnd, 'Staking: Stake not mature');\\r\\n\\r\\n        uint256 amountOut = unstakeInternal(session, sessionId, actualEnd);\\r\\n\\r\\n        if (topup != 0) {\\r\\n            IToken(addresses.mainToken).burn(msg.sender, topup);\\r\\n            amountOut = amountOut.add(topup);\\r\\n        }\\r\\n\\r\\n        stakeInternal(amountOut, stakingDays, msg.sender);\\r\\n    }\\r\\n\\r\\n    //same as restake but for layer 1 stakes\\r\\n    // @param sessionID {uint256} - id of the stake\\r\\n    // @param stakingDays {uint256} - number of days to be staked\\r\\n    // @param topup {uint256} - amount of AXN to be added as topup to the stake\\r\\n    function restakeV1(\\r\\n        uint256 sessionId,\\r\\n        uint256 stakingDays,\\r\\n        uint256 topup\\r\\n    ) external pausable {\\r\\n        require(sessionId <= lastSessionIdV1, 'Staking: Invalid sessionId');\\r\\n        require(stakingDays != 0, 'Staking: Staking days < 1');\\r\\n        require(stakingDays <= 5555, 'Staking: Staking days > 5555');\\r\\n\\r\\n        Session storage session = sessionDataOf[msg.sender][sessionId];\\r\\n\\r\\n        require(\\r\\n            session.shares == 0 && session.withdrawn == false,\\r\\n            'Staking: Stake withdrawn'\\r\\n        );\\r\\n\\r\\n        (\\r\\n            uint256 amount,\\r\\n            uint256 start,\\r\\n            uint256 end,\\r\\n            uint256 shares,\\r\\n            uint256 firstPayout\\r\\n        ) = stakingV1.sessionDataOf(msg.sender, sessionId);\\r\\n\\r\\n        // Unstaked in v1 / doesn't exist\\r\\n        require(shares != 0, 'Staking: Stake withdrawn');\\r\\n\\r\\n        uint256 actualEnd = now;\\r\\n\\r\\n        require(end <= actualEnd, 'Staking: Stake not mature');\\r\\n\\r\\n        uint256 sessionStakingDays = (end - start) / stepTimestamp;\\r\\n        uint256 lastPayout = sessionStakingDays + firstPayout;\\r\\n\\r\\n        uint256 amountOut =\\r\\n            unstakeV1Internal(\\r\\n                sessionId,\\r\\n                amount,\\r\\n                start,\\r\\n                end,\\r\\n                actualEnd,\\r\\n                shares,\\r\\n                firstPayout,\\r\\n                lastPayout,\\r\\n                sessionStakingDays\\r\\n            );\\r\\n\\r\\n        if (topup != 0) {\\r\\n            IToken(addresses.mainToken).burn(msg.sender, topup);\\r\\n            amountOut = amountOut.add(topup);\\r\\n        }\\r\\n\\r\\n        stakeInternal(amountOut, stakingDays, msg.sender);\\r\\n    }\\r\\n\\r\\n    // @param session {Session} - session of the stake\\r\\n    // @param sessionId {uint256} - id of the stake\\r\\n    // @param actualEnd {uint256} - the date when the stake was actually been unstaked\\r\\n    function unstakeInternal(\\r\\n        Session storage session,\\r\\n        uint256 sessionId,\\r\\n        uint256 actualEnd\\r\\n    ) internal returns (uint256) {\\r\\n        uint256 amountOut =\\r\\n            unstakeInternalCommon(\\r\\n                sessionId,\\r\\n                session.amount,\\r\\n                session.start,\\r\\n                session.end,\\r\\n                actualEnd,\\r\\n                session.shares,\\r\\n                session.firstPayout,\\r\\n                session.lastPayout\\r\\n            );\\r\\n\\r\\n        uint256 stakingDays = (session.end - session.start) / stepTimestamp;\\r\\n\\r\\n        if (stakingDays >= basePeriod) {\\r\\n            ISubBalances(addresses.subBalances).callOutcomeStakerTrigger(\\r\\n                sessionId,\\r\\n                session.start,\\r\\n                session.end,\\r\\n                actualEnd,\\r\\n                session.shares\\r\\n            );\\r\\n        }\\r\\n\\r\\n        session.end = actualEnd;\\r\\n        session.withdrawn = true;\\r\\n        session.payout = amountOut;\\r\\n\\r\\n        return amountOut;\\r\\n    }\\r\\n\\r\\n    // @param sessionID {uint256} - id of the stake\\r\\n    // @param amount {uint256} - amount of AXN\\r\\n    // @param start {uint256} - start date of the stake\\r\\n    // @param end {uint256} - end date of the stake\\r\\n    // @param actualEnd {uint256} - actual end date of the stake\\r\\n    // @param shares {uint256} - number of stares of the stake\\r\\n    // @param firstPayout {uint256} - id of the first payout for the stake\\r\\n    // @param lastPayout {uint256} - if of the last payout for the stake\\r\\n    // @param stakingDays {uint256} - number of staking days\\r\\n    function unstakeV1Internal(\\r\\n        uint256 sessionId,\\r\\n        uint256 amount,\\r\\n        uint256 start,\\r\\n        uint256 end,\\r\\n        uint256 actualEnd,\\r\\n        uint256 shares,\\r\\n        uint256 firstPayout,\\r\\n        uint256 lastPayout,\\r\\n        uint256 stakingDays\\r\\n    ) internal returns (uint256) {\\r\\n        uint256 amountOut =\\r\\n            unstakeInternalCommon(\\r\\n                sessionId,\\r\\n                amount,\\r\\n                start,\\r\\n                end,\\r\\n                actualEnd,\\r\\n                shares,\\r\\n                firstPayout,\\r\\n                lastPayout\\r\\n            );\\r\\n\\r\\n        if (stakingDays >= basePeriod) {\\r\\n            ISubBalances(addresses.subBalances).callOutcomeStakerTriggerV1(\\r\\n                msg.sender,\\r\\n                sessionId,\\r\\n                start,\\r\\n                end,\\r\\n                actualEnd,\\r\\n                shares\\r\\n            );\\r\\n        }\\r\\n\\r\\n        sessionDataOf[msg.sender][sessionId] = Session({\\r\\n            amount: amount,\\r\\n            start: start,\\r\\n            end: actualEnd,\\r\\n            shares: shares,\\r\\n            firstPayout: firstPayout,\\r\\n            lastPayout: lastPayout,\\r\\n            withdrawn: true,\\r\\n            payout: amountOut\\r\\n        });\\r\\n\\r\\n        sessionsOf[msg.sender].push(sessionId);\\r\\n\\r\\n        return amountOut;\\r\\n    }\\r\\n\\r\\n    // @param sessionID {uint256} - id of the stake\\r\\n    // @param amount {uint256} - amount of AXN\\r\\n    // @param start {uint256} - start date of the stake\\r\\n    // @param end {uint256} - end date of the stake\\r\\n    // @param actualEnd {uint256} - actual end date of the stake\\r\\n    // @param shares {uint256} - number of stares of the stake\\r\\n    // @param firstPayout {uint256} - id of the first payout for the stake\\r\\n    // @param lastPayout {uint256} - if of the last payout for the stake\\r\\n    function unstakeInternalCommon(\\r\\n        uint256 sessionId,\\r\\n        uint256 amount,\\r\\n        uint256 start,\\r\\n        uint256 end,\\r\\n        uint256 actualEnd,\\r\\n        uint256 shares,\\r\\n        uint256 firstPayout,\\r\\n        uint256 lastPayout\\r\\n    ) internal returns (uint256) {\\r\\n        if (now >= nextPayoutCall) makePayout();\\r\\n        if (isVcaRegistered[msg.sender] == false)\\r\\n            setTotalSharesOfAccountInternal(msg.sender);\\r\\n\\r\\n        uint256 stakingInterest =\\r\\n            calculateStakingInterest(firstPayout, lastPayout, shares);\\r\\n\\r\\n        sharesTotalSupply = sharesTotalSupply.sub(shares);\\r\\n        totalStakedAmount = totalStakedAmount.sub(amount);\\r\\n        totalVcaRegisteredShares = totalVcaRegisteredShares.sub(shares);\\r\\n\\r\\n        uint256 oldTotalSharesOf = totalSharesOf[msg.sender];\\r\\n        totalSharesOf[msg.sender] = totalSharesOf[msg.sender].sub(shares);\\r\\n\\r\\n        rebalance(msg.sender, oldTotalSharesOf);\\r\\n\\r\\n        (uint256 amountOut, uint256 penalty) =\\r\\n            getAmountOutAndPenalty(amount, start, end, stakingInterest);\\r\\n\\r\\n        // To auction\\r\\n        if (penalty != 0) {\\r\\n            _initPayout(addresses.auction, penalty);\\r\\n            IAuction(addresses.auction).callIncomeDailyTokensTrigger(penalty);\\r\\n        }\\r\\n\\r\\n        emit Unstake(\\r\\n            msg.sender,\\r\\n            sessionId,\\r\\n            amountOut,\\r\\n            start,\\r\\n            actualEnd,\\r\\n            shares\\r\\n        );\\r\\n\\r\\n        return amountOut;\\r\\n    }\\r\\n\\r\\n    // @param sessionID {uint256} - id of the stake\\r\\n    // @param amount {uint256} - amount of AXN\\r\\n    // @param start {uint256} - start date of the stake\\r\\n    // @param end {uint256} - end date of the stake\\r\\n    // @param stakingDays {uint256} - number of staking days\\r\\n    // @param firstPayout {uint256} - id of the first payout for the stake\\r\\n    // @param lastPayout {uint256} - if of the last payout for the stake\\r\\n    // @param staker {address} - address of the staker account\\r\\n    function stakeInternalCommon(\\r\\n        uint256 sessionId,\\r\\n        uint256 amount,\\r\\n        uint256 start,\\r\\n        uint256 end,\\r\\n        uint256 stakingDays,\\r\\n        uint256 firstPayout,\\r\\n        address staker\\r\\n    ) internal {\\r\\n        uint256 shares = _getStakersSharesAmount(amount, start, end);\\r\\n\\r\\n        sharesTotalSupply = sharesTotalSupply.add(shares);\\r\\n        totalStakedAmount = totalStakedAmount.add(amount);\\r\\n        totalVcaRegisteredShares = totalVcaRegisteredShares.add(shares);\\r\\n\\r\\n        uint256 oldTotalSharesOf = totalSharesOf[staker];\\r\\n        totalSharesOf[staker] = totalSharesOf[staker].add(shares);\\r\\n\\r\\n        rebalance(staker, oldTotalSharesOf);\\r\\n\\r\\n        sessionDataOf[staker][sessionId] = Session({\\r\\n            amount: amount,\\r\\n            start: start,\\r\\n            end: end,\\r\\n            shares: shares,\\r\\n            firstPayout: firstPayout,\\r\\n            lastPayout: firstPayout + stakingDays,\\r\\n            withdrawn: false,\\r\\n            payout: 0\\r\\n        });\\r\\n\\r\\n        sessionsOf[staker].push(sessionId);\\r\\n\\r\\n        if (stakingDays >= basePeriod) {\\r\\n            ISubBalances(addresses.subBalances).callIncomeStakerTrigger(\\r\\n                staker,\\r\\n                sessionId,\\r\\n                start,\\r\\n                end,\\r\\n                shares\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit Stake(staker, sessionId, amount, start, end, shares);\\r\\n    }\\r\\n\\r\\n    //function to withdraw the dividends earned for a specific token\\r\\n    // @param tokenAddress {address} - address of the dividend token\\r\\n    function withdrawDivToken(address tokenAddress) external {\\r\\n        withdrawDivTokenInternal(tokenAddress, totalSharesOf[msg.sender]);\\r\\n    }\\r\\n\\r\\n    function withdrawDivTokenInternal(address tokenAddress, uint _totalSharesOf) internal {\\r\\n        uint256 tokenInterestEarned =\\r\\n            getTokenInterestEarnedInternal(msg.sender, tokenAddress, _totalSharesOf);\\r\\n\\r\\n        // after dividents are paid we need to set the deductBalance of that token to current token price * total shares of the account\\r\\n        deductBalances[msg.sender][tokenAddress] = totalSharesOf[msg.sender]\\r\\n            .mul(tokenPricePerShare[tokenAddress]);\\r\\n\\r\\n        /** 0xFF... is our ethereum placeholder address */\\r\\n        if (\\r\\n            tokenAddress != address(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF)\\r\\n        ) {\\r\\n            IERC20Upgradeable(tokenAddress).transfer(\\r\\n                msg.sender,\\r\\n                tokenInterestEarned\\r\\n            );\\r\\n        } else {\\r\\n            msg.sender.transfer(tokenInterestEarned);\\r\\n        }\\r\\n\\r\\n        emit WithdrawLiquidDiv(msg.sender, tokenAddress, tokenInterestEarned);\\r\\n    }\\r\\n\\r\\n    //calculate the interest earned by an address for a specific dividend token\\r\\n    // @param accountAddress {address} - address of account\\r\\n    // @param tokenAddress {address} - address of the dividend token\\r\\n    function getTokenInterestEarned(\\r\\n        address accountAddress,\\r\\n        address tokenAddress\\r\\n    ) external view returns (uint256) {\\r\\n        return getTokenInterestEarnedInternal(accountAddress, tokenAddress, totalSharesOf[accountAddress]);\\r\\n    }\\r\\n\\r\\n    // @param accountAddress {address} - address of account\\r\\n    // @param tokenAddress {address} - address of the dividend token\\r\\n    function getTokenInterestEarnedInternal(\\r\\n        address accountAddress,\\r\\n        address tokenAddress,\\r\\n        uint _totalSharesOf\\r\\n    ) internal view returns (uint256) {\\r\\n        return\\r\\n            _totalSharesOf\\r\\n                .mul(tokenPricePerShare[tokenAddress])\\r\\n                .sub(deductBalances[accountAddress][tokenAddress])\\r\\n                .div(10**36); //we divide since we multiplied the price by 10**36 for precision\\r\\n    }\\r\\n\\r\\n    //the rebalance function recalculates the deductBalances of an user after the total number of shares changes as a result of a stake/unstake\\r\\n    // @param staker {address} - address of account\\r\\n    // @param oldTotalSharesOf {uint256} - previous number of shares for the account\\r\\n    function rebalance(address staker, uint256 oldTotalSharesOf) internal {\\r\\n        for (uint8 i = 0; i < divTokens.length(); i++) {\\r\\n            uint256 tokenInterestEarned =\\r\\n                oldTotalSharesOf.mul(tokenPricePerShare[divTokens.at(i)]).sub(\\r\\n                    deductBalances[staker][divTokens.at(i)]\\r\\n                );\\r\\n\\r\\n            if (\\r\\n                totalSharesOf[staker].mul(tokenPricePerShare[divTokens.at(i)]) <\\r\\n                tokenInterestEarned\\r\\n            ) {\\r\\n                withdrawDivTokenInternal(divTokens.at(i), oldTotalSharesOf);\\r\\n            } else {\\r\\n                deductBalances[staker][divTokens.at(i)] = totalSharesOf[staker]\\r\\n                    .mul(tokenPricePerShare[divTokens.at(i)])\\r\\n                    .sub(tokenInterestEarned);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //registration function that sets the total number of shares for an account and inits the deductBalances\\r\\n    // @param account {address} - address of account\\r\\n    function setTotalSharesOfAccountInternal(address account)\\r\\n        internal\\r\\n        pausable\\r\\n    {\\r\\n        require(\\r\\n            isVcaRegistered[account] == false ||\\r\\n                hasRole(MIGRATOR_ROLE, msg.sender),\\r\\n            'STAKING: Account already registered.'\\r\\n        );\\r\\n\\r\\n        uint256 totalShares;\\r\\n        //pull the layer 2 staking sessions for the account\\r\\n        uint256[] storage sessionsOfAccount = sessionsOf[account];\\r\\n\\r\\n        for (uint256 i = 0; i < sessionsOfAccount.length; i++) {\\r\\n            if (sessionDataOf[account][sessionsOfAccount[i]].withdrawn)\\r\\n                //make sure the stake is active; not withdrawn\\r\\n                continue;\\r\\n\\r\\n            totalShares = totalShares.add( //sum total shares\\r\\n                sessionDataOf[account][sessionsOfAccount[i]].shares\\r\\n            );\\r\\n        }\\r\\n\\r\\n        //pull stakes from layer 1\\r\\n        uint256[] memory v1SessionsOfAccount = stakingV1.sessionsOf_(account);\\r\\n\\r\\n        for (uint256 i = 0; i < v1SessionsOfAccount.length; i++) {\\r\\n            if (sessionDataOf[account][v1SessionsOfAccount[i]].shares != 0)\\r\\n                //make sure the stake was not withdran.\\r\\n                continue;\\r\\n\\r\\n            if (v1SessionsOfAccount[i] > lastSessionIdV1) continue; //make sure we only take layer 1 stakes in consideration\\r\\n\\r\\n            (\\r\\n                uint256 amount,\\r\\n                uint256 start,\\r\\n                uint256 end,\\r\\n                uint256 shares,\\r\\n                uint256 firstPayout\\r\\n            ) = stakingV1.sessionDataOf(account, v1SessionsOfAccount[i]);\\r\\n\\r\\n            (amount);\\r\\n            (start);\\r\\n            (end);\\r\\n            (firstPayout);\\r\\n\\r\\n            if (shares == 0) continue;\\r\\n\\r\\n            totalShares = totalShares.add(shares); //calclate total shares\\r\\n        }\\r\\n\\r\\n        isVcaRegistered[account] = true; //confirm the registration was completed\\r\\n\\r\\n        if (totalShares != 0) {\\r\\n            totalSharesOf[account] = totalShares;\\r\\n            totalVcaRegisteredShares = totalVcaRegisteredShares.add( //update the global total number of VCA registered shares\\r\\n                totalShares\\r\\n            );\\r\\n\\r\\n            //init deductBalances with the present values\\r\\n            for (uint256 i = 0; i < divTokens.length(); i++) {\\r\\n                deductBalances[account][divTokens.at(i)] = totalShares.mul(\\r\\n                    tokenPricePerShare[divTokens.at(i)]\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit AccountRegistered(account, totalShares);\\r\\n    }\\r\\n\\r\\n    //function to allow anyone to call the registration of another address\\r\\n    // @param _address {address} - address of account\\r\\n    function setTotalSharesOfAccount(address _address) external {\\r\\n        setTotalSharesOfAccountInternal(_address);\\r\\n    }\\r\\n\\r\\n    //function that will update the price per share for a dividend token. it is called from within the auction contract as a result of a venture auction bid\\r\\n    // @param bidderAddress {address} - the address of the bidder\\r\\n    // @param originAddress {address} - the address of origin/dev fee\\r\\n    // @param tokenAddress {address} - the divident token address\\r\\n    // @param amountBought {uint256} - the amount in ETH that was bid in the auction\\r\\n    function updateTokenPricePerShare(\\r\\n        address payable bidderAddress,\\r\\n        address payable originAddress,\\r\\n        address tokenAddress,\\r\\n        uint256 amountBought\\r\\n    ) external payable override onlyAuction {\\r\\n        // uint256 amountForBidder = amountBought.mul(10526315789473685).div(1e17);\\r\\n        uint256 amountForOrigin = amountBought.mul(5).div(100); //5% fee goes to dev\\r\\n        uint256 amountForBidder = amountBought.mul(10).div(100); //10% is being returned to bidder\\r\\n        uint256 amountForDivs =\\r\\n            amountBought.sub(amountForOrigin).sub(amountForBidder); //remaining is the actual amount that was used to buy the token\\r\\n\\r\\n        if (\\r\\n            tokenAddress != address(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF)\\r\\n        ) {\\r\\n            IERC20Upgradeable(tokenAddress).transfer(\\r\\n                bidderAddress, //pay the bidder the 10%\\r\\n                amountForBidder\\r\\n            );\\r\\n\\r\\n            IERC20Upgradeable(tokenAddress).transfer(\\r\\n                originAddress, //pay the dev fee the 5%\\r\\n                amountForOrigin\\r\\n            );\\r\\n        } else {\\r\\n            //if token is ETH we use the transfer function\\r\\n            bidderAddress.transfer(amountForBidder);\\r\\n            originAddress.transfer(amountForOrigin);\\r\\n        }\\r\\n\\r\\n        tokenPricePerShare[tokenAddress] = tokenPricePerShare[tokenAddress].add( //increase the token price per share with the amount bought divided by the total Vca registered shares\\r\\n            amountForDivs.mul(10**36).div(totalVcaRegisteredShares)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    //add a new dividend token\\r\\n    // @param tokenAddress {address} - dividend token address\\r\\n    function addDivToken(address tokenAddress) external override onlyAuction {\\r\\n        if (!divTokens.contains(tokenAddress)) {\\r\\n            //make sure the token is not already added\\r\\n            divTokens.add(tokenAddress);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //function to increase the share rate price\\r\\n    //the update happens daily and used the amount of AXN sold through regular auction to calculate the amount to increase the share rate with\\r\\n    // @param _payout {uint256} - amount of AXN that was bought back through the regular auction\\r\\n    function updateShareRate(uint256 _payout) internal {\\r\\n        uint256 currentTokenTotalSupply =\\r\\n            IERC20Upgradeable(addresses.mainToken).totalSupply();\\r\\n\\r\\n        uint256 growthFactor =\\r\\n            _payout.mul(1e18).div(\\r\\n                currentTokenTotalSupply + totalStakedAmount + 1 //we calculate the total AXN supply as circulating + staked\\r\\n            );\\r\\n\\r\\n        if (shareRateScalingFactor == 0) {\\r\\n            //use a shareRateScalingFactor which can be set in order to tune the speed of shareRate increase\\r\\n            shareRateScalingFactor = 1;\\r\\n        }\\r\\n\\r\\n        shareRate = shareRate\\r\\n            .mul(1e18 + shareRateScalingFactor.mul(growthFactor)) //1e18 used for precision.\\r\\n            .div(1e18);\\r\\n    }\\r\\n\\r\\n    //function to set the shareRateScalingFactor\\r\\n    // @param _scalingFactor {uint256} - scaling factor number\\r\\n    function setShareRateScalingFactor(uint256 _scalingFactor)\\r\\n        external\\r\\n        onlyManager\\r\\n    {\\r\\n        shareRateScalingFactor = _scalingFactor;\\r\\n    }\\r\\n\\r\\n    //function that allows a stake to be upgraded to a stake with a length of 5555 days without incuring any penalties\\r\\n    //the function takes the current earned interest and uses the principal + interest to create a new stake\\r\\n    //for v2 stakes it's only updating the current existing stake info, it's not creating a new stake\\r\\n    // @param sessionId {uint256} - id of the staking session\\r\\n    function maxShare(uint256 sessionId) external pausable {\\r\\n        Session storage session = sessionDataOf[msg.sender][sessionId];\\r\\n\\r\\n        require(\\r\\n            session.shares != 0 && session.withdrawn == false,\\r\\n            'STAKING: Stake withdrawn or not set'\\r\\n        );\\r\\n\\r\\n        (\\r\\n            uint256 newStart,\\r\\n            uint256 newEnd,\\r\\n            uint256 newAmount,\\r\\n            uint256 newShares\\r\\n        ) =\\r\\n            maxShareUpgrade(\\r\\n                session.firstPayout,\\r\\n                session.lastPayout,\\r\\n                session.shares,\\r\\n                session.amount\\r\\n            );\\r\\n\\r\\n        uint256 stakingDays = (session.end - session.start) / stepTimestamp;\\r\\n        if (stakingDays >= basePeriod) {\\r\\n            ISubBalances(addresses.subBalances).createMaxShareSession(\\r\\n                sessionId,\\r\\n                newStart,\\r\\n                newEnd,\\r\\n                newShares,\\r\\n                session.shares\\r\\n            );\\r\\n        } else {\\r\\n            ISubBalances(addresses.subBalances).callIncomeStakerTrigger(\\r\\n                msg.sender,\\r\\n                sessionId,\\r\\n                newStart,\\r\\n                newEnd,\\r\\n                newShares\\r\\n            );\\r\\n        }\\r\\n\\r\\n        maxShareInternal(\\r\\n            sessionId,\\r\\n            session.shares,\\r\\n            newShares,\\r\\n            session.amount,\\r\\n            newAmount,\\r\\n            newStart,\\r\\n            newEnd\\r\\n        );\\r\\n\\r\\n        sessionDataOf[msg.sender][sessionId].amount = newAmount;\\r\\n        sessionDataOf[msg.sender][sessionId].end = newEnd;\\r\\n        sessionDataOf[msg.sender][sessionId].start = newStart;\\r\\n        sessionDataOf[msg.sender][sessionId].shares = newShares;\\r\\n        sessionDataOf[msg.sender][sessionId].firstPayout = payouts.length;\\r\\n        sessionDataOf[msg.sender][sessionId].lastPayout = payouts.length + 5555;\\r\\n    }\\r\\n\\r\\n    //similar to the maxShare function, but for layer 1 stakes only\\r\\n    // @param sessionId {uint256} - id of the staking session\\r\\n    function maxShareV1(uint256 sessionId) external pausable {\\r\\n        require(sessionId <= lastSessionIdV1, 'STAKING: Invalid sessionId');\\r\\n\\r\\n        Session storage session = sessionDataOf[msg.sender][sessionId];\\r\\n\\r\\n        require(\\r\\n            session.shares == 0 && session.withdrawn == false,\\r\\n            'STAKING: Stake withdrawn'\\r\\n        );\\r\\n\\r\\n        (\\r\\n            uint256 amount,\\r\\n            uint256 start,\\r\\n            uint256 end,\\r\\n            uint256 shares,\\r\\n            uint256 firstPayout\\r\\n        ) = stakingV1.sessionDataOf(msg.sender, sessionId);\\r\\n        uint256 stakingDays = (end - start) / stepTimestamp;\\r\\n        uint256 lastPayout = stakingDays + firstPayout;\\r\\n\\r\\n        (\\r\\n            uint256 newStart,\\r\\n            uint256 newEnd,\\r\\n            uint256 newAmount,\\r\\n            uint256 newShares\\r\\n        ) = maxShareUpgrade(firstPayout, lastPayout, shares, amount);\\r\\n\\r\\n        if (stakingDays >= basePeriod) {\\r\\n            ISubBalances(addresses.subBalances).createMaxShareSessionV1(\\r\\n                msg.sender,\\r\\n                sessionId,\\r\\n                newStart,\\r\\n                newEnd,\\r\\n                newShares, // new shares\\r\\n                shares // old shares\\r\\n            );\\r\\n        } else {\\r\\n            ISubBalances(addresses.subBalances).callIncomeStakerTrigger(\\r\\n                msg.sender,\\r\\n                sessionId,\\r\\n                newStart,\\r\\n                newEnd,\\r\\n                newShares\\r\\n            );\\r\\n        }\\r\\n\\r\\n        maxShareInternal(\\r\\n            sessionId,\\r\\n            shares,\\r\\n            newShares,\\r\\n            amount,\\r\\n            newAmount,\\r\\n            newStart,\\r\\n            newEnd\\r\\n        );\\r\\n\\r\\n        sessionDataOf[msg.sender][sessionId] = Session({\\r\\n            amount: newAmount,\\r\\n            start: newStart,\\r\\n            end: newEnd,\\r\\n            shares: newShares,\\r\\n            firstPayout: payouts.length,\\r\\n            lastPayout: payouts.length + 5555,\\r\\n            withdrawn: false,\\r\\n            payout: 0\\r\\n        });\\r\\n\\r\\n        sessionsOf[msg.sender].push(sessionId);\\r\\n    }\\r\\n\\r\\n    //function to calculate the new start, end, new amount and new shares for a max share upgrade\\r\\n    // @param firstPayout {uint256} - id of the first Payout\\r\\n    // @param lasttPayout {uint256} - id of the last Payout\\r\\n    // @param shares {uint256} - number of shares\\r\\n    // @param amount {uint256} - amount of AXN\\r\\n    function maxShareUpgrade(\\r\\n        uint256 firstPayout,\\r\\n        uint256 lastPayout,\\r\\n        uint256 shares,\\r\\n        uint256 amount\\r\\n    )\\r\\n        internal\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        require(\\r\\n            maxShareEventActive == true,\\r\\n            'STAKING: Max Share event is not active'\\r\\n        );\\r\\n        require(\\r\\n            lastPayout - firstPayout <= maxShareMaxDays,\\r\\n            'STAKING: Max Share Upgrade - Stake must be less then max share max days'\\r\\n        );\\r\\n\\r\\n        uint256 stakingInterest =\\r\\n            calculateStakingInterest(firstPayout, lastPayout, shares);\\r\\n\\r\\n        uint256 newStart = now;\\r\\n        uint256 newEnd = newStart + (stepTimestamp * 5555);\\r\\n        uint256 newAmount = stakingInterest + amount;\\r\\n        uint256 newShares =\\r\\n            _getStakersSharesAmount(newAmount, newStart, newEnd);\\r\\n\\r\\n        require(\\r\\n            newShares > shares,\\r\\n            'STAKING: New shares are not greater then previous shares'\\r\\n        );\\r\\n\\r\\n        return (newStart, newEnd, newAmount, newShares);\\r\\n    }\\r\\n\\r\\n    // @param sessionId {uint256} - id of the staking session\\r\\n    // @param oldShares {uint256} - previous number of shares\\r\\n    // @param newShares {uint256} - new number of shares\\r\\n    // @param oldAmount {uint256} - old amount of AXN\\r\\n    // @param newAmount {uint256} - new amount of AXN\\r\\n    // @param newStart {uint256} - new start date for the stake\\r\\n    // @param newEnd {uint256} - new end date for the stake\\r\\n    function maxShareInternal(\\r\\n        uint256 sessionId,\\r\\n        uint256 oldShares,\\r\\n        uint256 newShares,\\r\\n        uint256 oldAmount,\\r\\n        uint256 newAmount,\\r\\n        uint256 newStart,\\r\\n        uint256 newEnd\\r\\n    ) internal {\\r\\n        if (now >= nextPayoutCall) makePayout();\\r\\n        if (isVcaRegistered[msg.sender] == false)\\r\\n            setTotalSharesOfAccountInternal(msg.sender);\\r\\n\\r\\n        sharesTotalSupply = sharesTotalSupply.add(newShares - oldShares);\\r\\n        totalStakedAmount = totalStakedAmount.add(newAmount - oldAmount);\\r\\n        totalVcaRegisteredShares = totalVcaRegisteredShares.add(\\r\\n            newShares - oldShares\\r\\n        );\\r\\n\\r\\n        uint256 oldTotalSharesOf = totalSharesOf[msg.sender];\\r\\n        totalSharesOf[msg.sender] = totalSharesOf[msg.sender].add(\\r\\n            newShares - oldShares\\r\\n        );\\r\\n\\r\\n        rebalance(msg.sender, oldTotalSharesOf);\\r\\n\\r\\n        emit MaxShareUpgrade(\\r\\n            msg.sender,\\r\\n            sessionId,\\r\\n            oldAmount,\\r\\n            newAmount,\\r\\n            oldShares,\\r\\n            newShares,\\r\\n            newStart,\\r\\n            newEnd\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // stepTimestamp\\r\\n    // startContract\\r\\n    function calculateStepsFromStart() public view returns (uint256) {\\r\\n        return now.sub(startContract).div(stepTimestamp);\\r\\n    }\\r\\n\\r\\n    /** Set Max Shares */\\r\\n    function setMaxShareEventActive(bool _active) external onlyManager {\\r\\n        maxShareEventActive = _active;\\r\\n    }\\r\\n\\r\\n    function getMaxShareEventActive() external view returns (bool) {\\r\\n        return maxShareEventActive;\\r\\n    }\\r\\n\\r\\n    function setMaxShareMaxDays(uint16 _maxShareMaxDays) external onlyManager {\\r\\n        maxShareMaxDays = _maxShareMaxDays;\\r\\n    }\\r\\n\\r\\n    function setTotalVcaRegisteredShares(uint256 _shares)\\r\\n        external\\r\\n        onlyMigrator\\r\\n    {\\r\\n        totalVcaRegisteredShares = _shares;\\r\\n    }\\r\\n\\r\\n    function setPaused(bool _paused) external {\\r\\n        require(\\r\\n            hasRole(MIGRATOR_ROLE, msg.sender) ||\\r\\n                hasRole(MANAGER_ROLE, msg.sender),\\r\\n            'STAKING: User must be manager or migrator'\\r\\n        );\\r\\n        paused = _paused;\\r\\n    }\\r\\n\\r\\n    function getPaused() external view returns (bool) {\\r\\n        return paused;\\r\\n    }\\r\\n\\r\\n    function getMaxShareMaxDays() external view returns (uint16) {\\r\\n        return maxShareMaxDays;\\r\\n    }\\r\\n\\r\\n    /** Roles management - only for multi sig address */\\r\\n    function setupRole(bytes32 role, address account) external onlyManager {\\r\\n        _setupRole(role, account);\\r\\n    }\\r\\n\\r\\n    function getDivTokens() external view returns (address[] memory) {\\r\\n        address[] memory divTokenAddresses = new address[](divTokens.length());\\r\\n\\r\\n        for (uint8 i = 0; i < divTokens.length(); i++) {\\r\\n            divTokenAddresses[i] = divTokens.at(i);\\r\\n        }\\r\\n\\r\\n        return divTokenAddresses;\\r\\n    }\\r\\n\\r\\n    function getTotalSharesOf(address account) external view returns (uint256) {\\r\\n        return totalSharesOf[account];\\r\\n    }\\r\\n\\r\\n    function getTotalVcaRegisteredShares() external view returns (uint256) {\\r\\n        return totalVcaRegisteredShares;\\r\\n    }\\r\\n\\r\\n    function getIsVCARegistered(address staker) external view returns (bool) {\\r\\n        return isVcaRegistered[staker];\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../GSN/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n    using AddressUpgradeable for address;\\n\\n    struct RoleData {\\n        EnumerableSetUpgradeable.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\ninterface IToken {\\r\\n    function mint(address to, uint256 amount) external;\\r\\n\\r\\n    function burn(address from, uint256 amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\ninterface IAuction {\\r\\n    function callIncomeDailyTokensTrigger(uint256 amount) external;\\r\\n\\r\\n    function callIncomeWeeklyTokensTrigger(uint256 amount) external;\\r\\n\\r\\n    function addReservesToAuction(uint256 daysInFuture, uint256 amount) external returns(uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\ninterface IStaking {\\r\\n    function externalStake(\\r\\n        uint256 amount,\\r\\n        uint256 stakingDays,\\r\\n        address staker\\r\\n    ) external;\\r\\n\\r\\n    function updateTokenPricePerShare(\\r\\n        address payable bidderAddress,\\r\\n        address payable originAddress,\\r\\n        address tokenAddress,\\r\\n        uint256 amountBought\\r\\n    ) external payable;\\r\\n\\r\\n    function addDivToken(address tokenAddress) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ISubBalances.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\ninterface ISubBalances {\\r\\n    function callIncomeStakerTrigger(\\r\\n        address staker,\\r\\n        uint256 sessionId,\\r\\n        uint256 start,\\r\\n        uint256 end,\\r\\n        uint256 shares\\r\\n    ) external;\\r\\n\\r\\n    function callOutcomeStakerTrigger(\\r\\n        uint256 sessionId,\\r\\n        uint256 start,\\r\\n        uint256 end,\\r\\n        uint256 actualEnd,\\r\\n        uint256 shares\\r\\n    ) external;\\r\\n\\r\\n    function callOutcomeStakerTriggerV1(\\r\\n        address staker,\\r\\n        uint256 sessionId,\\r\\n        uint256 start,\\r\\n        uint256 end,\\r\\n        uint256 actualEnd,\\r\\n        uint256 shares\\r\\n    ) external;\\r\\n\\r\\n    function createMaxShareSession(\\r\\n        uint256 sessionId,\\r\\n        uint256 start,\\r\\n        uint256 end,\\r\\n        uint256 newShares,\\r\\n        uint256 oldShares\\r\\n    ) external;\\r\\n\\r\\n    function createMaxShareSessionV1(\\r\\n        address staker,\\r\\n        uint256 sessionId,\\r\\n        uint256 start,\\r\\n        uint256 end,\\r\\n        uint256 newShares,\\r\\n        uint256 oldShares\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakingV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\ninterface IStakingV1 {\\r\\n    function sessionDataOf(address, uint256)\\r\\n        external view returns (uint256, uint256, uint256, uint256, uint256);\\r\\n\\r\\n    function sessionsOf_(address)\\r\\n        external view returns (uint256[] memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 0\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"name\":\"AccountRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sharesTotalSupply\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"MakePayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"MaxShareUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"name\":\"WithdrawLiquidDiv\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXTERNAL_STAKER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIGRATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"addDivToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"mainToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"auction\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"subBalances\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"firstPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"calculateStakingInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateStepsFromStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingDays\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"externalStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingInterest\",\"type\":\"uint256\"}],\"name\":\"getAmountOutAndPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDivTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getIsVCARegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxShareEventActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxShareMaxDays\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenInterestEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTotalSharesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalVcaRegisteredShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalPayin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init_\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSessionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSessionIdV1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makePayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"}],\"name\":\"maxShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"}],\"name\":\"maxShareV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPayoutCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payouts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesTotalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"topup\",\"type\":\"uint256\"}],\"name\":\"restake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"topup\",\"type\":\"uint256\"}],\"name\":\"restakeV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sessionDataOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPayout\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sessionsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"sessionsOf_\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setMaxShareEventActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_maxShareMaxDays\",\"type\":\"uint16\"}],\"name\":\"setMaxShareMaxDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_scalingFactor\",\"type\":\"uint256\"}],\"name\":\"setShareRateScalingFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setTotalSharesOfAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"setTotalVcaRegisteredShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setupRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharesTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingDays\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingV1\",\"outputs\":[{\"internalType\":\"contract IStakingV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stepTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"}],\"name\":\"unstakeV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"bidderAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"originAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountBought\",\"type\":\"uint256\"}],\"name\":\"updateTokenPricePerShare\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawDivToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Staking","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"0","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}