{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n *  Grey Token's primary goal is to gather original Paranormal/UFO/Inter dimensional\r\n *  Video Evidence, and put it on the Blockchain. Grey Team aims to achieve this through Incentive based \r\n *  community interactions. Including voting, deflationary events/Deflationary events, Grey burn vaults, \r\n *  and a new way for communities to interact with, and generate value for NFT's, and the underlying asset(Grey).\r\n\r\n *  https://t.me/greytokendiscussion\r\n\r\n * ****USING FTPAntiBot**** \r\n * Visit antibot.FairTokenProject.com to learn how to use AntiBot with your project\r\n */ \r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private m_Owner;\r\n    address private m_AdminOne;\r\n    address private m_AdminTwo;\r\n    address private m_AdminThree;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        m_Owner = msgSender;\r\n        m_AdminOne = 0x79Dfb1e8B22912096707621DbEA8524CFa8d2F87;\r\n        m_AdminTwo = 0x5Bd8327B58A665C026Fe69A65f73E1577A1c6da6;\r\n        m_AdminThree = 0xb5A02cC3C29e08EB3249CF1B59eAe350f97dC329;   \r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return m_Owner;\r\n    }\r\n    \r\n    function adminOne() public view returns (address) {\r\n        return m_AdminOne;\r\n    }\r\n    \r\n    function adminTwo() public view returns (address) {\r\n        return m_AdminTwo;\r\n    }\r\n\r\n    function adminThree() public view returns (address) {\r\n        return m_AdminThree;\r\n    }\r\n    \r\n    function transferOwnership(address _address) public virtual onlyOwner {\r\n        m_Owner = _address;\r\n        emit OwnershipTransferred(_msgSender(), _address);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_msgSender() == m_Owner ||\r\n        _msgSender() == m_AdminOne ||\r\n        _msgSender() == m_AdminTwo ||\r\n        _msgSender() == m_AdminThree, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }                                                                                          \r\n}                                                                                               \r\n                                                                                               \r\ninterface IUniswapV2Factory {                                                                  \r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface FTPAntiBot {                                                                          // Here we create the interface to interact with AntiBot\r\n    function scanAddress(address _address, address _safeAddress, address _origin) external returns (bool);\r\n    function registerBlock(address _recipient, address _sender, address _origin) external;\r\n}\r\n\r\ninterface ExtWETH {\r\n    function balanceOf(address _address) external view returns (uint256);\r\n}\r\n\r\ncontract GreyToken is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    uint256 private constant TOTAL_SUPPLY = 10000000000000 * 10**9;\r\n    string private m_Name = \"Grey Token\";\r\n    string private m_Symbol = \"GREY\";\r\n    uint8 private m_Decimals = 9;\r\n    \r\n    uint256 private m_BanCount = 0;\r\n    uint256 private m_MultiSig = 0;\r\n    uint256 private m_TxLimit  = 10000000000000 * 10**9;\r\n    uint256 private m_SafeTxLimit  = m_TxLimit;\r\n    uint256 private m_WalletLimit = m_SafeTxLimit;\r\n    uint256 private m_LiqLimit = 200000000000000000000;\r\n    uint256 private m_MinTokenBalance = m_TxLimit.div(5);\r\n    uint256 private m_PreviousTokenBalance;\r\n    \r\n    uint8 private m_DevFee = 5;\r\n    \r\n    address payable private m_ProjectAddress;\r\n    address payable private m_DevAddress;\r\n    address private m_DevelopmentWallet = 0x79Dfb1e8B22912096707621DbEA8524CFa8d2F87;\r\n    address private m_MarketingWallet = 0x10b041392Dde6907854528BCb2681E1ee409C162;\r\n    address private m_TeamWallet = 0xEE65B59BdE2066E032041184F82110DF19B1bdfa;\r\n    address private m_EventWallet = 0xc9a141d3fFd090154fa3dD8adcef9E963815ce64;\r\n    address private m_PresaleAllocWallet = 0x78033340d9adA6B2F2E17e966336a616E31B575B;\r\n    address private immutable m_DeadAddress = 0x000000000000000000000000000000000000dEaD;\r\n    address private m_UniswapV2Pair;\r\n    \r\n    bool private m_TradingOpened = false;\r\n    bool private m_IsSwap = false;\r\n    bool private m_SwapEnabled = false;\r\n    bool private m_AntiBot = true;\r\n    bool private m_Initialized = false;\r\n    bool private m_AddLiq = true;\r\n    bool private m_OpenTrading =  false;\r\n    \r\n    mapping (address => bool) private m_Signers;\r\n    mapping (address => bool) private m_Banned;\r\n    mapping (address => bool) private m_ExcludedAddresses;\r\n    mapping (address => uint256) private m_Balances;\r\n    mapping (address => mapping (address => uint256)) private m_Allowances;\r\n    \r\n    FTPAntiBot private AntiBot;\r\n    IUniswapV2Router02 private m_UniswapV2Router;\r\n    ExtWETH private WETH;\r\n\r\n    event MaxOutTxLimit(uint MaxTransaction);\r\n    event BanAddress(address Address, address Origin);\r\n    \r\n    modifier lockTheSwap {\r\n        m_IsSwap = true;\r\n        _;\r\n        m_IsSwap = false;\r\n    }\r\n    modifier onlyDev {\r\n        require(_msgSender() == 0xC69857409822c90Bd249e55B397f63a79a878A55);\r\n        _;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    constructor () {\r\n        AntiBot = FTPAntiBot(0xCD5312d086f078D1554e8813C27Cf6C9D1C3D9b3); //AntiBotV2\r\n        WETH = ExtWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);        \r\n        \r\n        m_Balances[address(this)] = TOTAL_SUPPLY.div(10).add(TOTAL_SUPPLY.div(40));\r\n        m_Balances[m_DevelopmentWallet] = TOTAL_SUPPLY.div(10000).mul(1500);\r\n        m_Balances[m_MarketingWallet] = TOTAL_SUPPLY.div(40);\r\n        m_Balances[m_TeamWallet] = TOTAL_SUPPLY.div(20);\r\n        m_Balances[m_EventWallet] = TOTAL_SUPPLY.div(2);\r\n        m_Balances[m_PresaleAllocWallet] = TOTAL_SUPPLY.div(10000).mul(1500);\r\n\r\n        m_ExcludedAddresses[owner()] = true;\r\n        m_ExcludedAddresses[address(this)] = true;\r\n        m_ExcludedAddresses[m_DevelopmentWallet] = true;\r\n        m_ExcludedAddresses[m_MarketingWallet] = true;\r\n        m_ExcludedAddresses[m_TeamWallet] = true;\r\n        m_ExcludedAddresses[m_EventWallet] = true;\r\n        m_ExcludedAddresses[m_PresaleAllocWallet] = true;\r\n        \r\n        emit Transfer(address(0), address(this), TOTAL_SUPPLY.div(10).add(TOTAL_SUPPLY.div(40)));\r\n        emit Transfer(address(0), m_DevelopmentWallet, TOTAL_SUPPLY.div(10000).mul(1500));\r\n        emit Transfer(address(0), m_MarketingWallet, TOTAL_SUPPLY.div(40));\r\n        emit Transfer(address(0), m_TeamWallet, TOTAL_SUPPLY.div(20));\r\n        emit Transfer(address(0), m_EventWallet, TOTAL_SUPPLY.div(2));\r\n        emit Transfer(address(0), m_PresaleAllocWallet, TOTAL_SUPPLY.div(10000).mul(1500));\r\n    }\r\n\r\n// ####################\r\n// ##### DEFAULTS #####\r\n// ####################\r\n\r\n    function name() public view returns (string memory) {\r\n        return m_Name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return m_Symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return m_Decimals;\r\n    }\r\n\r\n// #####################\r\n// ##### OVERRIDES #####\r\n// #####################\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return TOTAL_SUPPLY;\r\n    }\r\n\r\n    function balanceOf(address _account) public view override returns (uint256) {\r\n        return m_Balances[_account];\r\n    }\r\n\r\n    function transfer(address _recipient, uint256 _amount) public override returns (bool) {\r\n        _transfer(_msgSender(), _recipient, _amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view override returns (uint256) {\r\n        return m_Allowances[_owner][_spender];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _amount) public override returns (bool) {\r\n        _approve(_msgSender(), _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _sender, address _recipient, uint256 _amount) public override returns (bool) {\r\n        _transfer(_sender, _recipient, _amount);\r\n        _approve(_sender, _msgSender(), m_Allowances[_sender][_msgSender()].sub(_amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n// ####################\r\n// ##### PRIVATES #####\r\n// ####################\r\n\r\n    function _readyToTax(address _sender) private view returns(bool) {\r\n        return !m_IsSwap && _sender != m_UniswapV2Pair && m_SwapEnabled && balanceOf(address(this)) > m_MinTokenBalance;\r\n    }\r\n\r\n    function _pleb(address _sender, address _recipient) private view returns(bool) {\r\n        bool _localBool = true;\r\n        if(m_ExcludedAddresses[_sender] || m_ExcludedAddresses[_recipient])\r\n            _localBool = false;\r\n        return _localBool;\r\n    }\r\n\r\n    function _senderNotUni(address _sender) private view returns(bool) {\r\n        return _sender != m_UniswapV2Pair;\r\n    }\r\n\r\n    function _txRestricted(address _sender, address _recipient) private view returns(bool) {\r\n        return _sender == m_UniswapV2Pair && _recipient != address(m_UniswapV2Router) && !m_ExcludedAddresses[_recipient];\r\n    }\r\n\r\n    function _walletCapped(address _recipient) private view returns(bool) {\r\n        return _recipient != m_UniswapV2Pair && _recipient != address(m_UniswapV2Router);\r\n    }\r\n\r\n    function _approve(address _owner, address _spender, uint256 _amount) private {\r\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(_spender != address(0), \"ERC20: approve to the zero address\");\r\n        m_Allowances[_owner][_spender] = _amount;\r\n        emit Approval(_owner, _spender, _amount);\r\n    }\r\n\r\n    function _transfer(address _sender, address _recipient, uint256 _amount) private {\r\n        require(_sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(_recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(_amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(m_Initialized, \"All parties must consent\");\r\n        require(!m_Banned[_sender] && !m_Banned[_recipient] && !m_Banned[tx.origin]);\r\n        \r\n        \r\n        uint8 _fee = _setFee(_sender, _recipient);\r\n        uint256 _feeAmount = _amount.div(100).mul(_fee);\r\n        uint256 _newAmount = _amount.sub(_feeAmount);\r\n        \r\n        if(m_AntiBot) {\r\n            if((_recipient == m_UniswapV2Pair || _sender == m_UniswapV2Pair) && m_TradingOpened){\r\n                require(!AntiBot.scanAddress(_recipient, m_UniswapV2Pair, tx.origin), \"Beep beep boop! You're a piece of poop.\");\r\n                require(!AntiBot.scanAddress(_sender, m_UniswapV2Pair, tx.origin), \"Beep beep boop! You're a piece of poop.\");\r\n            }\r\n        }\r\n            \r\n        if(_walletCapped(_recipient))\r\n            require(balanceOf(_recipient) < m_WalletLimit);                                     // Check balance of recipient and if < max amount, fails\r\n            \r\n        if (_pleb(_sender, _recipient)) {\r\n            require(m_OpenTrading);\r\n            if (_txRestricted(_sender, _recipient)) \r\n                require(_amount <= m_TxLimit);\r\n            _tax(_sender);                                                                      \r\n        }\r\n        \r\n        m_Balances[_sender] = m_Balances[_sender].sub(_amount);\r\n        m_Balances[_recipient] = m_Balances[_recipient].add(_newAmount);\r\n        m_Balances[address(this)] = m_Balances[address(this)].add(_feeAmount);\r\n        \r\n        emit Transfer(_sender, _recipient, _newAmount);\r\n        \r\n        if(m_AntiBot)                                                                           // Check if AntiBot is enabled\r\n            AntiBot.registerBlock(_sender, _recipient, tx.origin);                                         // Tells AntiBot to start watching\r\n\t}\r\n    \r\n\tfunction _setFee(address _sender, address _recipient) private returns(uint8){\r\n        bool _takeFee = !(m_ExcludedAddresses[_sender] || m_ExcludedAddresses[_recipient]);\r\n        if(!_takeFee)\r\n            m_DevFee = 0;\r\n        if(_takeFee)\r\n            m_DevFee = 5;\r\n        return m_DevFee;\r\n    }\r\n\r\n    function _tax(address _sender) private {\r\n        uint256 _tokenBalance = balanceOf(address(this));\r\n        if (_readyToTax(_sender)) {\r\n            _swapTokensForETH(_tokenBalance);\r\n            _disperseEth();\r\n        }\r\n    }\r\n\r\n    function _swapTokensForETH(uint256 _amount) private lockTheSwap {\r\n        m_AddLiq = true;\r\n        uint256 _uniBalance = WETH.balanceOf(m_UniswapV2Pair);\r\n        \r\n        if(_uniBalance >= m_LiqLimit)\r\n            m_AddLiq = false;\r\n        \r\n        uint256 _tokensToEth = _amount.div(4).mul(3);\r\n        \r\n        if(!m_AddLiq)\r\n            _tokensToEth = _amount;\r\n       \r\n        address[] memory _path = new address[](2);                                              \r\n        _path[0] = address(this);                                                              \r\n        _path[1] = address(WETH);                                                    \r\n        _approve(address(this), address(m_UniswapV2Router), _tokensToEth);                           \r\n        m_UniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            _tokensToEth,\r\n            0,\r\n            _path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n    function _disperseEth() private {\r\n            \r\n        uint256 _ethBalance = address(this).balance;\r\n        uint256 _devAmount = _ethBalance.add(_ethBalance.div(3)).div(10);\r\n        uint256 _projectAmount;\r\n        \r\n        if(m_AddLiq)\r\n            _projectAmount = _ethBalance.add(_ethBalance.div(3)).div(2).sub(_devAmount).sub(_ethBalance.div(165));\r\n        else\r\n            _projectAmount = _ethBalance.sub(_devAmount);\r\n            \r\n        m_DevAddress.transfer(_devAmount);\r\n        m_ProjectAddress.transfer(_projectAmount);\r\n        \r\n        if(m_AddLiq){\r\n            _approve(address(this), address(m_UniswapV2Router), balanceOf(address(this)));\r\n            m_UniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,m_DeadAddress,block.timestamp);\r\n        }\r\n    }      \r\n    \r\n    function _multiSig(address _address) private returns (bool) {\r\n        require(m_Signers[_address] == false, \"Already Signed\");\r\n        bool _bool = false;\r\n        \r\n        m_Signers[_address] = true;\r\n        m_MultiSig += 1;\r\n        \r\n        if(m_MultiSig >= 2){\r\n            _bool = true;\r\n            m_MultiSig = 0;\r\n            m_Signers[owner()] = false;\r\n            m_Signers[adminOne()] = false;\r\n            m_Signers[adminTwo()] = false;\r\n            m_Signers[adminThree()] = false;\r\n        }\r\n        return _bool;\r\n    }\r\n    \r\n// ####################\r\n// ##### EXTERNAL #####\r\n// ####################\r\n    \r\n    function checkIfBanned(address _address) external view returns (bool) { \r\n        bool _banBool = false;\r\n        if(m_Banned[_address])\r\n            _banBool = true;\r\n        return _banBool;\r\n    }\r\n\r\n// ######################\r\n// ##### ONLY OWNER #####\r\n// ######################\r\n\r\n    function addLiquidity() external onlyOwner() {\r\n        require(!m_TradingOpened,\"trading is already open\");\r\n        m_UniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(m_UniswapV2Router), TOTAL_SUPPLY);\r\n        m_UniswapV2Pair = IUniswapV2Factory(m_UniswapV2Router.factory()).createPair(address(this), address(WETH));\r\n        m_UniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        m_SwapEnabled = true;\r\n        m_TradingOpened = true;\r\n        IERC20(m_UniswapV2Pair).approve(address(m_UniswapV2Router), type(uint).max);\r\n    }\r\n\r\n    function launch() external onlyOwner() {\r\n        m_OpenTrading = true;\r\n    }\r\n    \r\n    function manualBan(address _a) external onlyOwner() {\r\n        bool _sigBool = _multiSig(_msgSender());\r\n        if(_sigBool){\r\n            m_Banned[_a] = true;\r\n        }\r\n    }\r\n    \r\n    function removeBan(address _a) external onlyOwner() {\r\n        bool _sigBool = _multiSig(_msgSender());\r\n        if(_sigBool){\r\n            m_Banned[_a] = false;\r\n        }\r\n    }\r\n    \r\n    function setTxLimitMax(uint256 _amount) external onlyOwner() { \r\n        bool _sigBool = _multiSig(_msgSender());\r\n        if(_sigBool){\r\n            m_TxLimit = _amount.mul(10**9);\r\n            m_SafeTxLimit = _amount.mul(10**9);\r\n            emit MaxOutTxLimit(m_TxLimit);\r\n        }\r\n    }\r\n\r\n    function addTaxWhiteList(address _address) external onlyOwner() {\r\n        bool _sigBool = _multiSig(_msgSender());\r\n        if(_sigBool){\r\n            m_ExcludedAddresses[_address] = true;\r\n        }\r\n    }\r\n    \r\n    function setProjectAddress(address payable _address) external onlyOwner() {\r\n        bool _sigBool = _multiSig(_msgSender());\r\n        if(_sigBool){\r\n            m_ProjectAddress = _address;    \r\n            m_ExcludedAddresses[_address] = true;\r\n        }\r\n    }\r\n    \r\n    function setDevAddress(address payable _address) external onlyDev {\r\n        m_DevAddress = _address;\r\n        m_Initialized = true;\r\n    }\r\n    \r\n    function assignAntiBot(address _address) external onlyOwner() {               \r\n        bool _sigBool = _multiSig(_msgSender());\r\n        \r\n        if(_sigBool)\r\n            AntiBot = FTPAntiBot(_address);\r\n    }\r\n    \r\n    function toggleAntiBot() external onlyOwner() returns (bool){ \r\n        bool _sigBool = _multiSig(_msgSender());\r\n        \r\n        if(_sigBool){\r\n            bool _localBool;\r\n            if(m_AntiBot){\r\n                m_AntiBot = false;\r\n                _localBool = false;\r\n            }\r\n            else{\r\n                m_AntiBot = true;\r\n                _localBool = true;\r\n            }\r\n            return _localBool;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Origin\",\"type\":\"address\"}],\"name\":\"BanAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"MaxTransaction\",\"type\":\"uint256\"}],\"name\":\"MaxOutTxLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addTaxWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminOne\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminThree\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminTwo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"assignAntiBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkIfBanned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"manualBan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"removeBan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setProjectAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTxLimitMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleAntiBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"GreyToken","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7b0053ef5a6d5f0a54aa253dfc83c16ed5caeae2ea75483f24b7f70f8711da61"}]}