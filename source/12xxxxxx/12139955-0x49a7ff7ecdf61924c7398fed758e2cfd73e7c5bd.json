{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/access/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/access/Ownable.sol\r\n\r\n\r\n//pragma solidity ^0.6.0;\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/ExternalStub.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title Stub for BSC connection\r\n * @dev Can be accessed by an authorized bridge/ValueHolder\r\n */\r\n\r\ncontract ExternalStub is Ownable {\r\n    bool private initialized;\r\n\r\n    address public ValueHolder;\r\n\r\n    address public enterToken; //= DAI_ADDRESS;\r\n    uint256 private PoolValue;\r\n\r\n    event LogValueHolderUpdated(address Manager);\r\n\r\n    /**\r\n     * @dev main init function\r\n     */\r\n\r\n    function init(address _enterToken) external {\r\n        require(!initialized, \"Initialized\");\r\n        initialized = true;\r\n        Ownable.initialize(); // Do not forget this call!\r\n        _init(_enterToken);\r\n    }\r\n\r\n    /**\r\n     * @dev internal variable initialization\r\n     */\r\n    function _init(address _enterToken) internal {\r\n        enterToken = _enterToken;\r\n        ValueHolder = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev re-initializer might be helpful for the cases where proxy's storage is corrupted by an old contact, but we cannot run init as we have the owner address already.\r\n     * This method might help fixing the storage state.\r\n     */\r\n    function reInit(address _enterToken) external onlyOwner {\r\n        _init(_enterToken);\r\n    }\r\n\r\n    /**\r\n     * @dev this modifier is only for methods that should be called by ValueHolder contract\r\n     */\r\n    modifier onlyValueHolder() {\r\n        require(msg.sender == ValueHolder, \"Not Value Holder\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets new ValueHolder address\r\n     */\r\n    function setValueHolder(address _ValueHolder) external onlyOwner {\r\n        ValueHolder = _ValueHolder;\r\n        emit LogValueHolderUpdated(_ValueHolder);\r\n    }\r\n\r\n    /**\r\n     * @dev Main function to enter Compound supply/borrow position using the available [DAI] token balance\r\n     */\r\n    function addPosition() external pure {\r\n        revert(\"Stub\");\r\n    }\r\n\r\n    /**\r\n     * @dev Main function to exit position - partially or completely\r\n     */\r\n    function exitPosition(uint256) external pure {\r\n        revert(\"Stub\");\r\n    }\r\n\r\n    /**\r\n     * @dev Get the total amount of enterToken value of the pool\r\n     */\r\n    function getTokenStaked() external view returns (uint256) {\r\n        return (PoolValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the total value the Pool in [denominateTo] tokens [DAI?]\r\n     */\r\n\r\n    function getPoolValue(address) external view returns (uint256 totalValue) {\r\n        return (PoolValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the total value the Pool in [denominateTo] tokens [DAI?]\r\n     */\r\n\r\n    function setPoolValue(uint256 _PoolValue) external onlyValueHolder {\r\n        PoolValue = _PoolValue;\r\n    }\r\n\r\n    /**\r\n     * @dev Claim all available CRV from compound and convert to DAI as needed\r\n     */\r\n    function claimValue() external pure {\r\n        revert(\"Stub\");\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Manager\",\"type\":\"address\"}],\"name\":\"LogValueHolderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ValueHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addPosition\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimValue\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exitPosition\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPoolValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_enterToken\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_enterToken\",\"type\":\"address\"}],\"name\":\"reInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_PoolValue\",\"type\":\"uint256\"}],\"name\":\"setPoolValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ValueHolder\",\"type\":\"address\"}],\"name\":\"setValueHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ExternalStub","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c58f9561ac0f59994121fb307b966c948ddafacdc95a5639bb33dd84b04d1e5f"}]}