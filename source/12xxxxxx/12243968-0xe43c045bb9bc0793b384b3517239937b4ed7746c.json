{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.2;\n\n\n\n// Part: IERC1155\n\ninterface IERC1155 {\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) external;\n\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) external;\n}\n\n// Part: IERC20\n\ninterface IERC20 {\n    function approve(address spender, uint256 amount) external returns (bool);\n}\n\n// Part: IVendingMachine\n\ninterface IVendingMachine {\n    /**\n     * @dev Function for buying one or more of the same NFT id in a sale\n     * @param saleId nft sale id\n     * @param amount amount of tokenId to buy in saleId \n     */\n    function buyNFT(uint256 saleId, uint256 amount) external payable;\n\n    function sales(uint256 saleId) external view returns (\n        address creator,\n        address nft,\n        uint256 tokenId,\n        uint256 amountLeft,\n        address tokenWant,\n        uint256 pricePerUnit\n    );\n}\n\n// File: DefiVilleMarket.sol\n\nlibrary DefiVilleMarket {\n    address public constant VENDING_MACHINE = 0xA0Fd0f02797a9f38DF55Fe6ba0cF870e57D1A0e5;\n\n    function buyAssetsForErc20(bytes memory data, address recipient) public {\n        uint256[] memory saleIds;\n        uint256[] memory amounts;\n\n        (saleIds, amounts) = abi.decode(\n            data,\n            (uint256[],uint256[])\n        );\n        \n        for (uint256 i = 0; i < saleIds.length; i++) {\n            (, address nftAddr, uint256 tokenId, , address tokenWant, uint256 pricePerUnit) = IVendingMachine(VENDING_MACHINE).sales(saleIds[i]);\n\n            tokenWant == address(0)\n            ? _buyAssetForEth(saleIds[i], amounts[i], pricePerUnit*amounts[i], tokenId, nftAddr, recipient)\n            : _buyAssetForErc20(saleIds[i], amounts[i], pricePerUnit*amounts[i], tokenId, nftAddr, tokenWant, recipient);\n        }\n    }\n\n    function estimateBatchAssetPriceInErc20(bytes memory data) external view returns(address[] memory erc20Addrs, uint256[] memory erc20Amounts) {\n        uint256[] memory saleIds;\n        uint256[] memory amounts;\n\n        (saleIds, amounts) = abi.decode(\n            data,\n            (uint256[],uint256[])\n        );\n        \n        erc20Addrs = new address[](saleIds.length);\n        erc20Amounts = new uint256[](amounts.length);\n\n        for (uint256 i = 0; i < saleIds.length; i++) {\n            (, , , uint256 amountLeft, address tokenWant, uint256 pricePerUnit) = IVendingMachine(VENDING_MACHINE).sales(saleIds[i]);\n            \n            if (amountLeft >= amounts[i]) {\n                erc20Addrs[i] = tokenWant == address(0)\n                ? 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\n                : tokenWant;\n                \n                erc20Amounts[i] = pricePerUnit*amounts[i];\n            }\n        }\n    }\n\n    function _buyAssetForEth(uint256 _saleId, uint256 _amount, uint256 _tokenWantAmount, uint256 _tokenId, address _nftAddr, address _recipient) internal {\n        bytes memory _data = abi.encodeWithSelector(IVendingMachine(VENDING_MACHINE).buyNFT.selector, _saleId, _amount);\n\n        (bool success, ) = VENDING_MACHINE.call{value:_tokenWantAmount}(_data);\n        require(success, \"_buyAssetForEth: defiville buy failed.\");\n        \n        IERC1155(_nftAddr).safeTransferFrom(address(this), _recipient, _tokenId, _amount, \"\");\n    }\n\n    function _buyAssetForErc20(uint256 _saleId, uint256 _amount, uint256 _tokenWantAmount, uint256 _tokenId, address _nftAddr, address _tokenWant, address _recipient) internal {\n        IERC20(_tokenWant).approve(VENDING_MACHINE, _tokenWantAmount);\n        IVendingMachine(VENDING_MACHINE).buyNFT(_saleId, _amount);\n        IERC1155(_nftAddr).safeTransferFrom(address(this), _recipient, _tokenId, _amount, \"\");\n    }\n}\n","ABI":"[{\"inputs\":[],\"name\":\"VENDING_MACHINE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"estimateBatchAssetPriceInErc20\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"erc20Addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc20Amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DefiVilleMarket","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}