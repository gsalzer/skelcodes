{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/contexts2/access-control/roles/RolesLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { AccessControlStorageLib, AccessControlStorage } from \\\"../storage.sol\\\";\\n\\nlibrary RolesLib {\\n    function s() private pure returns (AccessControlStorage storage) {\\n        return AccessControlStorageLib.store();\\n    }\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     */\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     */\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @notice Checks if an account has a specific role.\\n     */\\n    function hasRole(bytes32 role, address account)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return s().roles[role][account];\\n    }\\n\\n    /**\\n     * @dev Gives an account a new role.\\n     * @dev Should only use when circumventing admin checking.\\n     * @dev If account already has the role, no event is emitted.\\n     * @param role Encoding of the role to give.\\n     * @param account Address to give the {role} to.\\n     */\\n    function grantRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) return;\\n        s().roles[role][account] = true;\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Removes a role from an account.\\n     * @dev Should only use when circumventing admin checking.\\n     * @dev If account does not already have the role, no event is emitted.\\n     * @param role Encoding of the role to remove.\\n     * @param account Address to remove the {role} from.\\n     */\\n    function revokeRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) return;\\n        s().roles[role][account] = false;\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/contexts2/access-control/roles/RolesMods.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { RolesLib } from \\\"./RolesLib.sol\\\";\\n\\nabstract contract RolesMods {\\n    /**\\n     * @notice Requires that the {account} has {role}\\n     * @param role Encoding of the role to check.\\n     * @param account Address to check the {role} for.\\n     */\\n    modifier authorized(bytes32 role, address account) {\\n        require(\\n            RolesLib.hasRole(role, account),\\n            \\\"AccessControl: not authorized\\\"\\n        );\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/contexts2/access-control/storage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct AccessControlStorage {\\n    mapping(bytes32 => mapping(address => bool)) roles;\\n    mapping(address => address) owners;\\n    mapping(bytes32 => bool) entered;\\n}\\n\\nbytes32 constant ACCESS_CONTROL_POS = keccak256(\\n    \\\"teller.access_control.storage\\\"\\n);\\n\\nlibrary AccessControlStorageLib {\\n    function store() internal pure returns (AccessControlStorage storage s) {\\n        bytes32 pos = ACCESS_CONTROL_POS;\\n        assembly {\\n            s.slot := pos\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/price-aggregator/chainlink/ChainlinkAggFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport { RolesMods } from \\\"../../contexts2/access-control/roles/RolesMods.sol\\\";\\nimport { ADMIN } from \\\"../../shared/roles.sol\\\";\\n\\n// Libraries\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {\\n    EnumerableSet\\n} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport { ChainlinkLib } from \\\"./ChainlinkLib.sol\\\";\\n\\n// Storage\\nimport {\\n    PriceAggStorageLib,\\n    PriceAggStorage\\n} from \\\"../../storage/price-aggregator.sol\\\";\\n\\ncontract ChainlinkAggFacet is RolesMods {\\n    /**\\n     * @notice It grabs the Chainlink Aggregator contract address for the token pair if it is supported.\\n     * @param src Source token address.\\n     * @param dst Destination token address.\\n     * @return agg The Chainlink Aggregator address.\\n     * @return found whether or not the ChainlinkAggregator exists.\\n     * @return inverse whether or not the values from the Aggregator should be considered inverted.\\n     */\\n    function getChainlinkAggregatorFor(address src, address dst)\\n        external\\n        view\\n        returns (\\n            address agg,\\n            bool found,\\n            bool inverse\\n        )\\n    {\\n        (agg, found, inverse) = ChainlinkLib.aggregatorFor(src, dst);\\n    }\\n\\n    /**\\n     * @dev Checks if a token address is supported by Chainlink (has a pair aggregator).\\n     * @param token Token address to check if is supported.\\n     * @return isSupported_ true if there is at least 1 pair aggregator for {token}\\n     */\\n    function isChainlinkTokenSupported(address token)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return ChainlinkLib.isTokenSupported(token);\\n    }\\n\\n    /**\\n     * @notice It allows for additional Chainlink Aggregators to be supported.\\n     * @param src Source token address.\\n     * @param dst Destination token address.\\n     * @param aggregator Price aggregator address.\\n     */\\n    function addChainlinkAggregator(\\n        address src,\\n        address dst,\\n        address aggregator\\n    ) external authorized(ADMIN, msg.sender) {\\n        (, bool found, ) = ChainlinkLib.aggregatorFor(src, dst);\\n        require(!found, \\\"Teller: chainlink aggregator already exists\\\");\\n        require(Address.isContract(src), \\\"Teller: source token not contract\\\");\\n        require(\\n            Address.isContract(dst),\\n            \\\"Teller: destination token not contract\\\"\\n        );\\n        require(\\n            Address.isContract(aggregator),\\n            \\\"Teller: chainlink aggregator not contract\\\"\\n        );\\n\\n        // Store now aggregator\\n        ChainlinkLib.s().aggregators[src][dst] = aggregator;\\n        // Make sure token addresses are known to be supported\\n        EnumerableSet.add(ChainlinkLib.s().supportedTokens, src);\\n        EnumerableSet.add(ChainlinkLib.s().supportedTokens, dst);\\n        // Increment token pair counts\\n        ChainlinkLib.s().pairCount[src]++;\\n        ChainlinkLib.s().pairCount[dst]++;\\n    }\\n\\n    /**\\n     * @notice It removes support for a Chainlink Aggregator pair.\\n     * @param src Source token address.\\n     * @param dst Destination token address.\\n     */\\n    function removeChainlinkAggregator(address src, address dst)\\n        external\\n        authorized(ADMIN, msg.sender)\\n    {\\n        (, bool found, ) = ChainlinkLib.aggregatorFor(src, dst);\\n        if (!found) {\\n            return;\\n        }\\n\\n        // Delete aggregator storage\\n        delete ChainlinkLib.s().aggregators[src][dst];\\n        // Decrement token pair counts\\n        ChainlinkLib.s().pairCount[src]--;\\n        ChainlinkLib.s().pairCount[dst]--;\\n        // Remove token support if token pair length is 0\\n        if (ChainlinkLib.s().pairCount[src] == 0) {\\n            EnumerableSet.remove(ChainlinkLib.s().supportedTokens, src);\\n        }\\n        if (ChainlinkLib.s().pairCount[dst] == 0) {\\n            EnumerableSet.remove(ChainlinkLib.s().supportedTokens, dst);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/price-aggregator/chainlink/ChainlinkLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Libraries\\nimport {\\n    EnumerableSet\\n} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n// Storage\\nimport {\\n    PriceAggStorageLib,\\n    ChainlinkAggStorage\\n} from \\\"../../storage/price-aggregator.sol\\\";\\n\\nlibrary ChainlinkLib {\\n    function s() internal view returns (ChainlinkAggStorage storage) {\\n        return PriceAggStorageLib.store().chainlink;\\n    }\\n\\n    /**\\n     * @notice It grabs the Chainlink Aggregator contract address for the token pair if it is supported.\\n     * @param src Source token address.\\n     * @param dst Destination token address.\\n     * @return aggregator The Chainlink Aggregator address.\\n     * @return found whether or not the ChainlinkAggregator exists.\\n     * @return inverse whether or not the values from the Aggregator should be considered inverted.\\n     */\\n    function aggregatorFor(address src, address dst)\\n        internal\\n        view\\n        returns (\\n            address aggregator,\\n            bool found,\\n            bool inverse\\n        )\\n    {\\n        aggregator = s().aggregators[src][dst];\\n        if (aggregator != address(0)) {\\n            found = true;\\n        } else {\\n            aggregator = s().aggregators[dst][src];\\n            if (aggregator != address(0)) {\\n                found = true;\\n                inverse = true;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks if a token address is supported by Chainlink (has a pair aggregator).\\n     * @param token Token address to check if is supported.\\n     * @return isSupported_ true if there is at least 1 pair aggregator for {token}\\n     */\\n    function isTokenSupported(address token)\\n        internal\\n        view\\n        returns (bool isSupported_)\\n    {\\n        isSupported_ = EnumerableSet.contains(s().supportedTokens, token);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/shared/roles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nbytes32 constant ADMIN = keccak256(\\\"ADMIN\\\");\\nbytes32 constant PAUSER = keccak256(\\\"PAUSER\\\");\\nbytes32 constant AUTHORIZED = keccak256(\\\"AUTHORIZED\\\");\\n\"\r\n    },\r\n    \"contracts/storage/price-aggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {\\n    EnumerableSet\\n} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct ChainlinkAggStorage {\\n    // Maps source token => destination token => Chainlink Aggregator\\n    mapping(address => mapping(address => address)) aggregators;\\n    // Maps token address to number of supported Chainlink pairs\\n    mapping(address => uint256) pairCount;\\n    // Stores set of token addresses supported by Chainlink\\n    EnumerableSet.AddressSet supportedTokens;\\n}\\n\\nstruct PriceAggStorage {\\n    ChainlinkAggStorage chainlink;\\n}\\n\\nbytes32 constant PRICE_AGG_STORAGE_POS = keccak256(\\n    \\\"teller.price.aggregator.storage\\\"\\n);\\n\\nlibrary PriceAggStorageLib {\\n    function store() internal pure returns (PriceAggStorage storage s) {\\n        bytes32 pos = PRICE_AGG_STORAGE_POS;\\n        assembly {\\n            s.slot := pos\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"addChainlinkAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"getChainlinkAggregatorFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"agg\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"found\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"inverse\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isChainlinkTokenSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"removeChainlinkAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ChainlinkAggFacet","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}