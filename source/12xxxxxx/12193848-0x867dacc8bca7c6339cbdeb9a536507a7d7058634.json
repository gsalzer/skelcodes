{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/v076/Token/Handlers/post_first_rebasing/OVLBalanceHandler.sol\": {\r\n      \"content\": \"// DELTA-BUG-BOUNTY\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\n\\nimport \\\"../../../../common/OVLTokenTypes.sol\\\";\\nimport \\\"../../Common/OVLVestingCalculator.sol\\\";\\nimport \\\"../../../../interfaces/IOVLBalanceHandler.sol\\\";\\nimport \\\"../../../../interfaces/IOVLTransferHandler.sol\\\";\\nimport \\\"../../../../interfaces/IRebasingLiquidityToken.sol\\\";\\nimport \\\"../../../../interfaces/IDeltaToken.sol\\\";\\n\\ncontract OVLBalanceHandler is OVLVestingCalculator, IOVLBalanceHandler {\\n    using SafeMath for uint256;\\n\\n    IDeltaToken public constant DELTA_TOKEN = IDeltaToken(0x9EA3b5b4EC044b70375236A281986106457b20EF);\\n    IERC20 public constant SUSHI_DELTA_X_WETH_PAIR = IERC20(0x1498bd576454159Bb81B5Ce532692a8752D163e8);\\n    IOVLTransferHandler public immutable TRANSFER_HANDLER;\\n    address public constant SUSHI_ROUTER = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\\n\\n\\n    constructor(IOVLTransferHandler transactionHandler, IERC20) {\\n        TRANSFER_HANDLER = transactionHandler;\\n    }\\n\\n    function handleBalanceCalculations(address account, address sender) external view override returns (uint256) {\\n        UserInformation memory ui = DELTA_TOKEN.userInformation(account);\\n        // LP Removal protection\\n        if(sender == address(SUSHI_DELTA_X_WETH_PAIR) && !DELTA_TOKEN.liquidityRebasingPermitted()) { // This guaranteed liquidity rebasing is not permitted and the sender whos calling is uniswap.\\n            // If the sender is uniswap and is querying balanceOf, this only happens first inside the burn function\\n            // This means if the balance of LP tokens here went up\\n            // We should revert\\n            // LP tokens supply can raise but it can never get lower with this method, if we detect a raise here we should revert\\n            // Rest of this code is inside the _transfer function\\n            require(SUSHI_DELTA_X_WETH_PAIR.balanceOf(address(SUSHI_DELTA_X_WETH_PAIR)) == DELTA_TOKEN.lpTokensInPair(), \\\"DELTAToken: Liquidity removal is forbidden\\\");\\n            return ui.maxBalance;\\n        }\\n        // We trick the uniswap router path revert by returning the whole balance\\n        // As well as saving gas in noVesting callers like uniswap\\n        if(ui.noVestingWhitelisted || sender == SUSHI_ROUTER) {\\n            return ui.maxBalance;\\n        } \\n        // potentially do i + 1 % epochs\\n        while (true) {\\n            uint256 mature = getMatureBalance(DELTA_TOKEN.vestingTransactions(account, ui.mostMatureTxIndex), block.timestamp); \\n            ui.maturedBalance = ui.maturedBalance.add(mature);\\n    \\n            // We go until we encounter a empty above most mature tx\\n            if(ui.mostMatureTxIndex == ui.lastInTxIndex) { \\n                break;\\n            }\\n            ui.mostMatureTxIndex++;\\n            if(ui.mostMatureTxIndex == QTY_EPOCHS) { ui.mostMatureTxIndex = 0; }\\n        }\\n\\n        return ui.maturedBalance;\\n    }\\n}\"\r\n    },\r\n    \"contracts/common/OVLTokenTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// DELTA-BUG-BOUNTY\\n\\npragma solidity ^0.7.6;\\n\\nstruct VestingTransaction {\\n    uint256 amount;\\n    uint256 fullVestingTimestamp;\\n}\\n\\nstruct WalletTotals {\\n    uint256 mature;\\n    uint256 immature;\\n    uint256 total;\\n}\\n\\nstruct UserInformation {\\n    // This is going to be read from only [0]\\n    uint256 mostMatureTxIndex;\\n    uint256 lastInTxIndex;\\n    uint256 maturedBalance;\\n    uint256 maxBalance;\\n    bool fullSenderWhitelisted;\\n    // Note that recieving immature balances doesnt mean they recieve them fully vested just that senders can do it\\n    bool immatureReceiverWhitelisted;\\n    bool noVestingWhitelisted;\\n}\\n\\nstruct UserInformationLite {\\n    uint256 maturedBalance;\\n    uint256 maxBalance;\\n    uint256 mostMatureTxIndex;\\n    uint256 lastInTxIndex;\\n}\\n\\nstruct VestingTransactionDetailed {\\n    uint256 amount;\\n    uint256 fullVestingTimestamp;\\n    // uint256 percentVestedE4;\\n    uint256 mature;\\n    uint256 immature;\\n}\\n\\n\\nuint256 constant QTY_EPOCHS = 7;\\n\\nuint256 constant SECONDS_PER_EPOCH = 172800; // About 2days\\n\\nuint256 constant FULL_EPOCH_TIME = SECONDS_PER_EPOCH * QTY_EPOCHS;\\n\\n// Precision Multiplier -- this many zeros (23) seems to get all the precision needed for all 18 decimals to be only off by a max of 1 unit\\nuint256 constant PM = 1e23;\\n\"\r\n    },\r\n    \"contracts/v076/Token/Common/OVLVestingCalculator.sol\": {\r\n      \"content\": \"// DELTA-BUG-BOUNTY\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./../../../common/OVLTokenTypes.sol\\\";\\nimport \\\"../../../interfaces/IOVLVestingCalculator.sol\\\";\\nimport \\\"../../libs/SafeMath.sol\\\";\\n\\ncontract OVLVestingCalculator is IOVLVestingCalculator {\\n    using SafeMath for uint256;\\n\\n    function getTransactionDetails(VestingTransaction memory _tx) public view override returns (VestingTransactionDetailed memory dtx) {\\n        return getTransactionDetails(_tx, block.timestamp);\\n    }\\n\\n    function getTransactionDetails(VestingTransaction memory _tx, uint256 _blockTimestamp) public pure override returns (VestingTransactionDetailed memory dtx) {\\n        if(_tx.fullVestingTimestamp == 0) {\\n            return dtx;\\n        }\\n\\n        dtx.amount = _tx.amount;\\n        dtx.fullVestingTimestamp = _tx.fullVestingTimestamp;\\n\\n        // at precision E4, 1000 is 10%\\n        uint256 timeRemaining;\\n        if(_blockTimestamp >= dtx.fullVestingTimestamp) {\\n            // Fully vested\\n            dtx.mature = _tx.amount;\\n            return dtx;\\n        } else {\\n            timeRemaining = dtx.fullVestingTimestamp - _blockTimestamp;\\n        }\\n\\n        uint256 percentWaitingToVestE4 = timeRemaining.mul(1e4) / FULL_EPOCH_TIME;\\n        uint256 percentWaitingToVestE4Scaled = percentWaitingToVestE4.mul(90) / 100;\\n\\n        dtx.immature = _tx.amount.mul(percentWaitingToVestE4Scaled) / 1e4;\\n        dtx.mature = _tx.amount.sub(dtx.immature);\\n    }\\n\\n    function getMatureBalance(VestingTransaction memory _tx, uint256 _blockTimestamp) public pure override returns (uint256 mature) {\\n        if(_tx.fullVestingTimestamp == 0) {\\n            return 0;\\n        }\\n        \\n        uint256 timeRemaining;\\n        if(_blockTimestamp >= _tx.fullVestingTimestamp) {\\n            // Fully vested\\n            return _tx.amount;\\n        } else {\\n            timeRemaining = _tx.fullVestingTimestamp - _blockTimestamp;\\n        }\\n\\n        uint256 percentWaitingToVestE4 = timeRemaining.mul(1e4) / FULL_EPOCH_TIME;\\n        uint256 percentWaitingToVestE4Scaled = percentWaitingToVestE4.mul(90) / 100;\\n\\n        mature = _tx.amount.mul(percentWaitingToVestE4Scaled) / 1e4;\\n        mature = _tx.amount.sub(mature); // the subtracted value represents the immature balance at this point\\n    }\\n\\n    function calculateTransactionDebit(VestingTransactionDetailed memory dtx, uint256 matureAmountNeeded, uint256 currentTimestamp) public pure override returns (uint256 outputDebit) {\\n        if(dtx.fullVestingTimestamp > currentTimestamp) {\\n            // This will be between 0 and 100*pm representing how much of the mature pool is needed\\n            uint256 percentageOfMatureCoinsConsumed = matureAmountNeeded.mul(PM).div(dtx.mature);\\n            require(percentageOfMatureCoinsConsumed <= PM, \\\"OVLTransferHandler: Insufficient funds\\\");\\n\\n            // Calculate the number of immature coins that need to be debited based on this ratio\\n            outputDebit = dtx.immature.mul(percentageOfMatureCoinsConsumed) / PM;\\n        }\\n\\n        // shouldnt this use outputDebit\\n        require(dtx.amount <= dtx.mature.add(dtx.immature), \\\"DELTAToken: Balance maximum problem\\\"); // Just in case\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOVLBalanceHandler.sol\": {\r\n      \"content\": \"pragma experimental ABIEncoderV2;\\npragma solidity ^0.7.6;\\n\\ninterface IOVLBalanceHandler {\\n    function handleBalanceCalculations(address, address) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IOVLTransferHandler.sol\": {\r\n      \"content\": \"pragma experimental ABIEncoderV2;\\npragma solidity ^0.7.6;\\n\\ninterface IOVLTransferHandler {\\n    function handleTransfer(address sender, address recipient, uint256 amount) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IRebasingLiquidityToken.sol\": {\r\n      \"content\": \"pragma experimental ABIEncoderV2;\\npragma solidity ^0.7.6;\\nimport \\\"./IERC20Upgradeable.sol\\\";\\ninterface IRebasingLiquidityToken is IERC20Upgradeable {\\n    function tokenCaller() external;\\n    function reserveCaller(uint256,uint256) external;\\n    function wrapWithReturn() external returns (uint256);\\n    function wrap() external;\\n    function rlpPerLP() external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IDeltaToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.7.6;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\"; \\n\\nimport \\\"../common/OVLTokenTypes.sol\\\";\\n\\ninterface IDeltaToken is IERC20 {\\n    function vestingTransactions(address, uint256) external view returns (VestingTransaction memory);\\n    function getUserInfo(address) external view returns (UserInformationLite memory);\\n    function getMatureBalance(address, uint256) external view returns (uint256);\\n    function liquidityRebasingPermitted() external view returns (bool);\\n    function lpTokensInPair() external view returns (uint256);\\n    function governance() external view returns (address);\\n    function performLiquidityRebasing() external;\\n    function distributor() external view returns (address);\\n    function totalsForWallet(address ) external view returns (WalletTotals memory totals);\\n    function adjustBalanceOfNoVestingAccount(address, uint256,bool) external;\\n    function userInformation(address user) external view returns (UserInformation memory);\\n    // Added with Sushi update\\n    function setTokenTransferHandler(address) external;\\n    function setBalanceCalculator(address) external;\\n    function setPendingGovernance(address) external;\\n    function acceptGovernance() external;\\n}\\n\\n\"\r\n    },\r\n    \"contracts/interfaces/IOVLVestingCalculator.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../common/OVLTokenTypes.sol\\\";\\n\\ninterface IOVLVestingCalculator {\\n    function getTransactionDetails(VestingTransaction memory _tx) external view returns (VestingTransactionDetailed memory dtx);\\n\\n    function getTransactionDetails(VestingTransaction memory _tx, uint256 _blockTimestamp) external pure returns (VestingTransactionDetailed memory dtx);\\n\\n    function getMatureBalance(VestingTransaction memory _tx, uint256 _blockTimestamp) external pure returns (uint256 mature);\\n\\n    function calculateTransactionDebit(VestingTransactionDetailed memory dtx, uint256 matureAmountNeeded, uint256 currentTimestamp) external pure returns (uint256 outputDebit);\\n}\\n\"\r\n    },\r\n    \"contracts/v076/libs/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IOVLTransferHandler\",\"name\":\"transactionHandler\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DELTA_TOKEN\",\"outputs\":[{\"internalType\":\"contract IDeltaToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUSHI_DELTA_X_WETH_PAIR\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUSHI_ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_HANDLER\",\"outputs\":[{\"internalType\":\"contract IOVLTransferHandler\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fullVestingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mature\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"immature\",\"type\":\"uint256\"}],\"internalType\":\"struct VestingTransactionDetailed\",\"name\":\"dtx\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"matureAmountNeeded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTimestamp\",\"type\":\"uint256\"}],\"name\":\"calculateTransactionDebit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputDebit\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fullVestingTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct VestingTransaction\",\"name\":\"_tx\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"getMatureBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mature\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fullVestingTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct VestingTransaction\",\"name\":\"_tx\",\"type\":\"tuple\"}],\"name\":\"getTransactionDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fullVestingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mature\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"immature\",\"type\":\"uint256\"}],\"internalType\":\"struct VestingTransactionDetailed\",\"name\":\"dtx\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fullVestingTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct VestingTransaction\",\"name\":\"_tx\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"getTransactionDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fullVestingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mature\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"immature\",\"type\":\"uint256\"}],\"internalType\":\"struct VestingTransactionDetailed\",\"name\":\"dtx\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"handleBalanceCalculations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"OVLBalanceHandler","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a0bb29c7b5af808bdbf020766113d864f9262a6100000000000000000000000000000000000000000000000000000000deadbeef","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}