{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.23;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n\ncontract DistributionContractETHandERC20 {\n\n\tfunction distributeERC20(address _tokenAddress, address[] _walletsToDistributeTo, uint[] _amountsToDistribute) public returns (bool success) {\n\t\tERC20 tokenContract = ERC20(_tokenAddress);\n\n\t\trequire(_walletsToDistributeTo.length <= 200, \"Too large array\");\n\t\trequire(_walletsToDistributeTo.length == _amountsToDistribute.length, \"the two arrays are not equal\");\n\n\t\tfor (uint i = 0; i < _walletsToDistributeTo.length; i++) {\n\t\t\trequire(\n\t\t\t\ttokenContract.transferFrom(msg.sender, _walletsToDistributeTo[i], _amountsToDistribute[i]),\n\t\t\t\t\t\"transaction failed\");\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction distributeETH(address[] _walletsToDistributeTo, uint[] _amountsToDistribute) public payable returns (bool success) {\n\t\trequire(_walletsToDistributeTo.length <= 200, \"Too large array\");\n\t\trequire(_walletsToDistributeTo.length == _amountsToDistribute.length, \"the two arrays are not equal\");\n\n\t\tuint256 distributedETH = 0;\n\t\tfor (uint i = 0; i < _walletsToDistributeTo.length; i++) {\n\t\t\tdistributedETH += _amountsToDistribute[i];\n\n\t\t\t_walletsToDistributeTo[i].transfer(_amountsToDistribute[i]);\n\t\t}\n\n\t\t// Refund if something is left\n\t\tif (msg.value > distributedETH) {\n\t\t\tmsg.sender.transfer(msg.value - distributedETH);\n\t\t}\n\n\t\treturn true;\n\t}\n}\n\n","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_walletsToDistributeTo\",\"type\":\"address[]\"},{\"name\":\"_amountsToDistribute\",\"type\":\"uint256[]\"}],\"name\":\"distributeERC20\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_walletsToDistributeTo\",\"type\":\"address[]\"},{\"name\":\"_amountsToDistribute\",\"type\":\"uint256[]\"}],\"name\":\"distributeETH\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"DistributionContractETHandERC20","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}