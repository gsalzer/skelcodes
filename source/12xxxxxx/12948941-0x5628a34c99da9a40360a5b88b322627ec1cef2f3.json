{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.5;\r\n\r\n// EXPERIMENTAL: DO NOT USE!!!!\r\n// EXPERIMENTAL: DO NOT USE!!!!\r\n// EXPERIMENTAL: DO NOT USE!!!!\r\n// EXPERIMENTAL: DO NOT USE!!!!\r\n// EXPERIMENTAL: DO NOT USE!!!!\r\n// EXPERIMENTAL: DO NOT USE!!!!\r\n\r\ninterface IFoliaMarket {\r\n    function minBid() external view returns(uint256);\r\n    function nftAddress() external view returns(address);\r\n    function auctions(uint256 tokenId) external view returns(Auction memory);\r\n\r\n    struct Auction {\r\n        bool exists;\r\n        bool paused;\r\n        uint256 amount;\r\n        uint256 tokenId;\r\n        uint256 duration;\r\n        uint256 firstBidTime;\r\n        uint256 reservePrice;\r\n        uint256 adminSplit; // percentage of 100\r\n        address creator;\r\n        address payable proceedsRecipient;\r\n        address payable bidder;\r\n    }\r\n    function createBid(uint256 tokenId) external payable;\r\n    function endAuction(uint256 tokenId) external;\r\n}\r\n\r\ninterface IMarketWrapper {\r\n    function auctionExists(uint256 auctionId) external view returns (bool);\r\n    function auctionIdMatchesToken(\r\n        uint256 auctionId,\r\n        address nftContract,\r\n        uint256 tokenId\r\n    ) external view returns (bool);\r\n    function getMinimumBid(uint256 auctionId) external view returns (uint256);\r\n    function getCurrentHighestBidder(uint256 auctionId)\r\n        external\r\n        view\r\n        returns (address);\r\n    function bid(uint256 auctionId, uint256 bidAmount) external;\r\n    function isFinalized(uint256 auctionId) external view returns (bool);\r\n    function finalize(uint256 auctionId) external;\r\n}\r\n\r\ninterface IERC721 {\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n}\r\n\r\n\r\n/**\r\n * @title FoliaMarketWrapper\r\n * @author Billy Rennekamp\r\n * @notice MarketWrapper contract implementing IMarketWrapper interface\r\n * according to the logic of Folia's NFT Market\r\n * Original Folia NFT Market code: https://etherscan.io/address/0xe708fffbe607def8a2be9d35a876f0ebe431dee7#code\r\n */\r\ncontract ExodusMarketWrapperBeta is IMarketWrapper {\r\n    // ============ Internal Immutables ============\r\n\r\n    IFoliaMarket internal immutable market;\r\n    address payable public owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"must be owner\");\r\n        _;\r\n    }\r\n\r\n    // ======== Constructor =========\r\n\r\n    constructor(address _foliaMarket) {\r\n        market = IFoliaMarket(_foliaMarket);\r\n        owner = payable(msg.sender);\r\n    }\r\n\r\n\r\n    // ======== External Functions =========\r\n    function emergencyExecute(\r\n        address targetAddress,\r\n        bytes calldata targetCallData\r\n    ) public onlyOwner returns (bool) {\r\n        (bool success, ) = targetAddress.call(targetCallData);\r\n        return success;\r\n    }\r\n    \r\n    function emergencyWithdrawEth() public onlyOwner {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n    \r\n\r\n    /**\r\n     * @notice Determine whether there is an existing auction\r\n     * for this token on the market\r\n     * @return TRUE if the auction exists\r\n     */\r\n    function auctionExists(uint256 auctionId)\r\n        public\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        // line 23 of ReserveAuction, implicit getter for public mapping of auctions\r\n        IFoliaMarket.Auction memory _auction =\r\n            market.auctions(auctionId);\r\n        return _auction.exists;\r\n    }\r\n\r\n    /**\r\n     * @notice Determine whether the given auctionId is\r\n     * an auction for the tokenId + nftContract\r\n     * @return TRUE if the auctionId matches the tokenId + nftContract\r\n     */\r\n    function auctionIdMatchesToken(\r\n        uint256 auctionId,\r\n        address nftContract,\r\n        uint256 tokenId\r\n    ) public view override returns (bool) {\r\n        // The auction contract can only be used with one NFT contract\r\n        // the token ID is used as the auction ID.\r\n        return auctionId == tokenId && IERC721(nftContract).ownerOf(tokenId) == address(market);\r\n    }\r\n\r\n    /**\r\n     * @notice Query the current highest bidder for this auction\r\n     * @return highest bidder\r\n     */\r\n    function getCurrentHighestBidder(uint256 auctionId)\r\n        external\r\n        view\r\n        override\r\n        returns (address)\r\n    {\r\n        // line 23 of ReserveAuction, implicit getter for public mapping of auctions\r\n        IFoliaMarket.Auction memory _auction =\r\n            market.auctions(auctionId);\r\n        return _auction.bidder;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate the minimum next bid for this auction\r\n     * @return minimum bid amount\r\n     */\r\n    function getMinimumBid(uint256 auctionId)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        // line 23 of ReserveAuction, implicit getter for public mapping of auctions\r\n        IFoliaMarket.Auction memory _auction =\r\n            market.auctions(auctionId);\r\n\r\n        if (_auction.amount == 0) {\r\n            return _auction.reservePrice;\r\n        } else {\r\n            uint256 _minBid = market.minBid();\r\n            return _auction.amount + _minBid;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Submit bid to Market contract\r\n     */\r\n    function bid(uint256 auctionId, uint256 bidAmount) external override {\r\n        // line 136 of ReserveAuction, createBid() function\r\n        (bool success, bytes memory returnData) =\r\n            address(market).call{value: bidAmount}(\r\n                abi.encodeWithSignature(\"createBid(uint256)\", auctionId)\r\n            );\r\n        require(success, string(returnData));\r\n    }\r\n\r\n    /**\r\n     * @notice Determine whether the auction has been finalized\r\n     * @return TRUE if the auction has been finalized\r\n     */\r\n    function isFinalized(uint256 auctionId)\r\n        external\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        \r\n        // line 23 of ReserveAuction, implicit getter for public mapping of auctions\r\n        // the auction is deleted at the end of the endAuction() function\r\n        // since we checked that the auction DID exist when we deployed the partyBid,\r\n        // if it no longer exists that means the auction has been finalized.\r\n        IFoliaMarket.Auction memory _auction =\r\n            market.auctions(auctionId);\r\n        return !_auction.exists;\r\n    }\r\n\r\n    /**\r\n     * @notice Finalize the results of the auction\r\n     */\r\n    function finalize(uint256 auctionId) external override {\r\n        // line 214 of ReserveAuction, endAuction() function\r\n        // will revert if auction has not started or still in progress\r\n        market.endAuction(auctionId);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_foliaMarket\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"auctionExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"auctionIdMatchesToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"targetCallData\",\"type\":\"bytes\"}],\"name\":\"emergencyExecute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getCurrentHighestBidder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getMinimumBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"isFinalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ExodusMarketWrapperBeta","CompilerVersion":"v0.8.5+commit.a4f2e591","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e708fffbe607def8a2be9d35a876f0ebe431dee7","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a43ecaaad6ab513a6966957e1e0587b5aa67d2a17ad21187033557c3f2250a82"}]}