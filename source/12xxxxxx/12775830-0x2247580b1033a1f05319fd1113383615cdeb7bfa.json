{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/GetVotes.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    function balanceOf(address tokenOwner)\\n        external\\n        view\\n        returns (uint256 balance);\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\\ninterface IMasterChef {\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n    }\\n\\n    function userInfo(uint256 _poolId, address _user)\\n        external\\n        view\\n        returns (IMasterChef.UserInfo memory);\\n}\\n\\ninterface IMuseStaker {\\n    function userInfo(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 balance,\\n            uint256 museValue,\\n            uint256 timelock,\\n            bool isClaimable,\\n            uint256 globalShares,\\n            uint256 globalBalance\\n        );\\n}\\n\\n/*\\n    This governance voting strategy enables to check the sum of Muse tokens an address has in LP providing and wallet\\n*/\\ncontract GetVotes {\\n    IERC20 public muse = IERC20(0xB6Ca7399B4F9CA56FC27cBfF44F4d2e4Eef1fc81);\\n    IERC20 public uniLp = IERC20(0x20d2C17d1928EF4290BF17F922a10eAa2770BF43);\\n    IMasterChef public masterChef =\\n        IMasterChef(0x193b775aF4BF9E11656cA48724A710359446BF52);\\n    IMuseStaker public museStaker =\\n        IMuseStaker(0x9Cfc1d1A45F79246e8E074Cfdfc3f4AacddE8d9a);\\n\\n    function getVotes(address _user) public view returns (uint256) {\\n        uint256 userMuseBalance = muse.balanceOf(_user);\\n        // lp tokens from user on masterchef\\n        uint256 userLpTokens = masterChef.userInfo(0, _user).amount;\\n        //total supply of of muse in lp\\n        uint256 museInLpPool = muse.balanceOf(address(uniLp));\\n        //total supply of lp tokens\\n        uint256 lpTokensTotalSupply = uniLp.totalSupply();\\n        // do calc for uniswap\\n        uint256 museFromStake = (museInLpPool / lpTokensTotalSupply) *\\n            userLpTokens;\\n\\n        //calc muse from single stake\\n        uint256 museValue;\\n\\n        (, museValue, , , , ) = museStaker.userInfo(_user);\\n\\n        return (userMuseBalance + museFromStake + museValue) / 1 ether;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterChef\",\"outputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"muse\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"museStaker\",\"outputs\":[{\"internalType\":\"contract IMuseStaker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniLp\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"GetVotes","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}