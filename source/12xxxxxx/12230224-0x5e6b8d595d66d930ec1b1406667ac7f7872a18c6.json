{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.0;\r\n\r\ncontract Lock {\r\n\r\n    address public immutable token;\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => uint256) public lockStart;\r\n    mapping(address => uint256) public lockEnd;\r\n\r\n    constructor(address _token) {\r\n        require(_token != address(0), \"token address is zero\");\r\n        token = _token;\r\n    }\r\n\r\n    function totalLocked() public view returns (uint256) {\r\n        (bool _success, bytes memory data) = token.staticcall(abi.encodeWithSelector(0x70a08231, address(this)));\r\n        (uint amount) = abi.decode(data, (uint));\r\n        return amount;\r\n    }\r\n\r\n    // transfer ERC from msg.sender to contract with locked:\r\n    function lock(address _lockTo, uint256 _amount, uint32 _startAfterDays, uint32 _lockDays) public returns (bool) {\r\n        require(_lockTo != address(0), \"address is zero\");\r\n        require(_amount > 0, \"amount <= 0\");\r\n        require(_startAfterDays >= 0 && _startAfterDays <= 365, \"start lock days < 0 or > 1y\");\r\n        require(_lockDays >= 1 && _lockDays <= 3650, \"lock days < 1d or > 10y\");\r\n\r\n        require(lockStart[_lockTo] == 0, \"cannot re-lock\");\r\n        require(lockEnd[_lockTo] == 0, \"cannot re-lock\");\r\n        require(balances[_lockTo] == 0, \"cannot re-lock\");\r\n\r\n        uint256 start = block.timestamp + 3600 * 24 * _startAfterDays;\r\n        uint256 end = start + 3600 * 24 * _lockDays;\r\n        lockStart[_lockTo] = start;\r\n        lockEnd[_lockTo] = end;\r\n        balances[_lockTo] = _amount;\r\n        safeTransferFrom(msg.sender, address(this), _amount);\r\n        return true;\r\n    }\r\n\r\n    function unlockable(address _address) public view returns (uint256) {\r\n        uint256 total = balances[_address];\r\n        if (total == 0) {\r\n            return 0;\r\n        }\r\n        uint256 start = lockStart[_address];\r\n        if (block.timestamp <= start) {\r\n            return 0;\r\n        }\r\n        uint256 end = lockEnd[_address];\r\n        if (block.timestamp < end) {\r\n            return total * (block.timestamp - start) / (end - start);\r\n        } else {\r\n            return total;\r\n        }\r\n    }\r\n\r\n    // transfer locked ERC to msg.sender if unlock ok:\r\n    function unlock() public returns (bool) {\r\n        uint256 start = lockStart[msg.sender];\r\n        require(start > 0, \"lock not found\");\r\n        require(start < block.timestamp, \"still in lock\");\r\n\r\n        uint256 total = balances[msg.sender];\r\n        uint256 canWithdraw = unlockable(msg.sender);\r\n        if (canWithdraw == 0) {\r\n            return false;\r\n        }\r\n        safeTransfer(msg.sender, canWithdraw);\r\n        balances[msg.sender] = total - canWithdraw;\r\n\r\n        if (total == canWithdraw) {\r\n            lockStart[msg.sender] = 0;\r\n            lockEnd[msg.sender] = 0;\r\n        } else {\r\n            lockStart[msg.sender] = block.timestamp;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function safeTransfer(\r\n        address _to,\r\n        uint256 _value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(0xa9059cbb, _to, _value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper: TRANSFER_FAILED'\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(0x23b872dd, _from, _to, _value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper: TRANSFER_FROM_FAILED'\r\n        );\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_startAfterDays\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_lockDays\",\"type\":\"uint32\"}],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"unlockable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Lock","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c6d194e7fb72c7b1b7b1d5199468fa7be1e1ca1c","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ce6902d2a72295e4600a30f62f9d7e9a0a2e6adce6e4946c72f99c44a0b01d36"}]}