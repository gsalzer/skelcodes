{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/lib/InitializableOwnable.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n    SPDX-License-Identifier: Apache-2.0\r\n\r\n*/\r\n\r\npragma solidity 0.6.9;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @title Ownable\r\n * @author DODO Breeder\r\n *\r\n * @notice Ownership related functions\r\n */\r\ncontract InitializableOwnable {\r\n    address public _OWNER_;\r\n    address public _NEW_OWNER_;\r\n    bool internal _INITIALIZED_;\r\n\r\n    // ============ Events ============\r\n\r\n    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier notInitialized() {\r\n        require(!_INITIALIZED_, \"DODO_INITIALIZED\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _OWNER_, \"NOT_OWNER\");\r\n        _;\r\n    }\r\n\r\n    // ============ Functions ============\r\n\r\n    function initOwner(address newOwner) public notInitialized {\r\n        _INITIALIZED_ = true;\r\n        _OWNER_ = newOwner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        emit OwnershipTransferPrepared(_OWNER_, newOwner);\r\n        _NEW_OWNER_ = newOwner;\r\n    }\r\n\r\n    function claimOwnership() public {\r\n        require(msg.sender == _NEW_OWNER_, \"INVALID_CLAIM\");\r\n        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\r\n        _OWNER_ = _NEW_OWNER_;\r\n        _NEW_OWNER_ = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/lib/CloneFactory.sol\r\n\r\n\r\ninterface ICloneFactory {\r\n    function clone(address prototype) external returns (address proxy);\r\n}\r\n\r\n// introduction of proxy mode design: https://docs.openzeppelin.com/upgrades/2.8/\r\n// minimum implementation of transparent proxy: https://eips.ethereum.org/EIPS/eip-1167\r\n\r\ncontract CloneFactory is ICloneFactory {\r\n    function clone(address prototype) external override returns (address proxy) {\r\n        bytes20 targetBytes = bytes20(prototype);\r\n        assembly {\r\n            let clone := mload(0x40)\r\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(clone, 0x14), targetBytes)\r\n            mstore(\r\n                add(clone, 0x28),\r\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\r\n            )\r\n            proxy := create(0, clone, 0x37)\r\n        }\r\n        return proxy;\r\n    }\r\n}\r\n\r\n// File: contracts/DODOStablePool/intf/IDSP.sol\r\n\r\n\r\ninterface IDSP {\r\n    function init(\r\n        address maintainer,\r\n        address baseTokenAddress,\r\n        address quoteTokenAddress,\r\n        uint256 lpFeeRate,\r\n        address mtFeeRateModel,\r\n        uint256 i,\r\n        uint256 k,\r\n        bool isOpenTWAP\r\n    ) external;\r\n\r\n    function _BASE_TOKEN_() external view returns (address);\r\n\r\n    function _QUOTE_TOKEN_() external view returns (address);\r\n\r\n    function _I_() external view returns (uint256);\r\n\r\n    function _MT_FEE_RATE_MODEL_() external view returns (address);\r\n\r\n    function getVaultReserve() external view returns (uint256 baseReserve, uint256 quoteReserve);\r\n\r\n    function sellBase(address to) external returns (uint256);\r\n\r\n    function sellQuote(address to) external returns (uint256);\r\n\r\n    function buyShares(address to) external returns (uint256,uint256,uint256);\r\n}\r\n\r\n// File: contracts/Factory/DSPFactory.sol\r\n\r\n\r\n\r\ninterface IDSPFactory {\r\n    function createDODOStablePool(\r\n        address baseToken,\r\n        address quoteToken,\r\n        uint256 lpFeeRate,\r\n        uint256 i,\r\n        uint256 k,\r\n        bool isOpenTWAP\r\n    ) external returns (address newStablePool);\r\n}\r\n\r\n/**\r\n * @title DODO StablePool Factory\r\n * @author DODO Breeder\r\n *\r\n * @notice Create And Register DSP Pools\r\n */\r\ncontract DSPFactory is InitializableOwnable {\r\n    // ============ Templates ============\r\n\r\n    address public immutable _CLONE_FACTORY_;\r\n    address public immutable _DEFAULT_MAINTAINER_;\r\n    address public immutable _DEFAULT_MT_FEE_RATE_MODEL_;\r\n    address public _DSP_TEMPLATE_;\r\n\r\n    // ============ Registry ============\r\n\r\n    // base -> quote -> DSP address list\r\n    mapping(address => mapping(address => address[])) public _REGISTRY_;\r\n    // creator -> DSP address list\r\n    mapping(address => address[]) public _USER_REGISTRY_;\r\n\r\n    // ============ Events ============\r\n\r\n    event NewDSP(address baseToken, address quoteToken, address creator, address DSP);\r\n\r\n    event RemoveDSP(address DSP);\r\n\r\n    // ============ Functions ============\r\n\r\n    constructor(\r\n        address cloneFactory,\r\n        address DSPTemplate,\r\n        address defaultMaintainer,\r\n        address defaultMtFeeRateModel\r\n    ) public {\r\n        _CLONE_FACTORY_ = cloneFactory;\r\n        _DSP_TEMPLATE_ = DSPTemplate;\r\n        _DEFAULT_MAINTAINER_ = defaultMaintainer;\r\n        _DEFAULT_MT_FEE_RATE_MODEL_ = defaultMtFeeRateModel;\r\n    }\r\n\r\n    function createDODOStablePool(\r\n        address baseToken,\r\n        address quoteToken,\r\n        uint256 lpFeeRate,\r\n        uint256 i,\r\n        uint256 k,\r\n        bool isOpenTWAP\r\n    ) external returns (address newStablePool) {\r\n        newStablePool = ICloneFactory(_CLONE_FACTORY_).clone(_DSP_TEMPLATE_);\r\n        {\r\n            IDSP(newStablePool).init(\r\n                _DEFAULT_MAINTAINER_,\r\n                baseToken,\r\n                quoteToken,\r\n                lpFeeRate,\r\n                _DEFAULT_MT_FEE_RATE_MODEL_,\r\n                i,\r\n                k,\r\n                isOpenTWAP\r\n            );\r\n        }\r\n        _REGISTRY_[baseToken][quoteToken].push(newStablePool);\r\n        _USER_REGISTRY_[tx.origin].push(newStablePool);\r\n        emit NewDSP(baseToken, quoteToken, tx.origin, newStablePool);\r\n    }\r\n\r\n    // ============ Admin Operation Functions ============\r\n\r\n    function updateDSPTemplate(address _newDSPTemplate) external onlyOwner {\r\n        _DSP_TEMPLATE_ = _newDSPTemplate;\r\n    }\r\n\r\n    function addPoolByAdmin(\r\n        address creator,\r\n        address baseToken,\r\n        address quoteToken,\r\n        address pool\r\n    ) external onlyOwner {\r\n        _REGISTRY_[baseToken][quoteToken].push(pool);\r\n        _USER_REGISTRY_[creator].push(pool);\r\n        emit NewDSP(baseToken, quoteToken, creator, pool);\r\n    }\r\n\r\n    function removePoolByAdmin(\r\n        address creator,\r\n        address baseToken,\r\n        address quoteToken,\r\n        address pool\r\n    ) external onlyOwner {\r\n        address[] memory registryList = _REGISTRY_[baseToken][quoteToken];\r\n        for (uint256 i = 0; i < registryList.length; i++) {\r\n            if (registryList[i] == pool) {\r\n                registryList[i] = registryList[registryList.length - 1];\r\n                break;\r\n            }\r\n        }\r\n        _REGISTRY_[baseToken][quoteToken] = registryList;\r\n        _REGISTRY_[baseToken][quoteToken].pop();\r\n        address[] memory userRegistryList = _USER_REGISTRY_[creator];\r\n        for (uint256 i = 0; i < userRegistryList.length; i++) {\r\n            if (userRegistryList[i] == pool) {\r\n                userRegistryList[i] = userRegistryList[userRegistryList.length - 1];\r\n                break;\r\n            }\r\n        }\r\n        _USER_REGISTRY_[creator] = userRegistryList;\r\n        _USER_REGISTRY_[creator].pop();\r\n        emit RemoveDSP(pool);\r\n    }\r\n\r\n    // ============ View Functions ============\r\n\r\n    function getDODOPool(address baseToken, address quoteToken)\r\n        external\r\n        view\r\n        returns (address[] memory machines)\r\n    {\r\n        return _REGISTRY_[baseToken][quoteToken];\r\n    }\r\n\r\n    function getDODOPoolBidirection(address token0, address token1)\r\n        external\r\n        view\r\n        returns (address[] memory baseToken0Machines, address[] memory baseToken1Machines)\r\n    {\r\n        return (_REGISTRY_[token0][token1], _REGISTRY_[token1][token0]);\r\n    }\r\n\r\n    function getDODOPoolByUser(address user) external view returns (address[] memory machines) {\r\n        return _USER_REGISTRY_[user];\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cloneFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"DSPTemplate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultMaintainer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultMtFeeRateModel\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"DSP\",\"type\":\"address\"}],\"name\":\"NewDSP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferPrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"DSP\",\"type\":\"address\"}],\"name\":\"RemoveDSP\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_CLONE_FACTORY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DEFAULT_MAINTAINER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DEFAULT_MT_FEE_RATE_MODEL_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DSP_TEMPLATE_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_NEW_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_REGISTRY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_USER_REGISTRY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"addPoolByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"k\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOpenTWAP\",\"type\":\"bool\"}],\"name\":\"createDODOStablePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newStablePool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"}],\"name\":\"getDODOPool\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"machines\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"getDODOPoolBidirection\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"baseToken0Machines\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"baseToken1Machines\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getDODOPoolByUser\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"machines\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"initOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"removePoolByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDSPTemplate\",\"type\":\"address\"}],\"name\":\"updateDSPTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DSPFactory","CompilerVersion":"v0.6.9+commit.3e3065ac","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005e5a7b76462e4bdf83aa98795644281bdba80b880000000000000000000000008735aad3beae15487a017ee32cb11d8fd593e03600000000000000000000000095c4f5b83aa70810d4f142d58e5f7242bd891cb00000000000000000000000005e84190a270333ace5b9202a3f4cebf11b81bb01","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://182669abb01b0a140f8b21157c621a941518ae00cfd10716a289247c989120aa"}]}