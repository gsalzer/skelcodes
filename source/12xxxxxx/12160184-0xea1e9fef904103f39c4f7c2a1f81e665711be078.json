{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interface/TokenBarInterfaces.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract TokenBarAdminStorage {\r\n    /**\r\n     * @notice Administrator for this contract\r\n     */\r\n    address public admin;\r\n    /**\r\n     * @notice Governance for this contract which has the right to adjust the parameters of TokenBar\r\n     */\r\n    address public governance;\r\n\r\n    /**\r\n     * @notice Active brains of TokenBar\r\n     */\r\n    address public implementation;\r\n}\r\n\r\ncontract xSHDStorage {\r\n    string public name = \"ShardingBar\";\r\n    string public symbol = \"xSHD\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 public totalSupply;\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n}\r\n\r\ncontract ITokenBarStorge is TokenBarAdminStorage {\r\n    //lock period :60*60*24*7\r\n    uint256 public lockPeriod = 604800;\r\n    address public SHDToken;\r\n    mapping(address => mapping(address => address)) public routerMap;\r\n    address public marketRegulator;\r\n    address public weth;\r\n    mapping(address => uint256) public lockDeadline;\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/xSHDToken.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\ncontract xSHDToken is xSHDStorage {\r\n    using SafeMath for uint256;\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function _mint(address to, uint256 value) internal {\r\n        totalSupply = totalSupply.add(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    function _burn(address from, uint256 value) internal {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        emit Transfer(from, address(0), value);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 value\r\n    ) private {\r\n        allowance[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) private {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) external returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) external returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool) {\r\n        if (allowance[from][msg.sender] != uint256(-1)) {\r\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(\r\n                value\r\n            );\r\n        }\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IUniswapV2Router01.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\n// File: contracts/interface/IUniswapV2Router02.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {}\r\n\r\n// File: contracts/interface/IMarketRegulator.sol\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IMarketRegulator {\r\n    function IsInWhiteList(address wantToken)\r\n        external\r\n        view\r\n        returns (bool inTheList);\r\n\r\n    function IsInBlackList(uint256 _shardPoolId)\r\n        external\r\n        view\r\n        returns (bool inTheList);\r\n\r\n    function getWantTokenWhiteList()\r\n        external\r\n        view\r\n        returns (whiteListToken[] memory _wantTokenWhiteList);\r\n\r\n    struct whiteListToken {\r\n        address token;\r\n        string symbol;\r\n    }\r\n}\r\n\r\n// File: contracts/TokenBarDelegate.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract TokenBarDelegate is ITokenBarStorge, xSHDToken {\r\n    using SafeMath for uint256;\r\n\r\n    event Deposit(address user, uint256 SHDAmountIn, uint256 xSHDAmountOut);\r\n\r\n    event Withdraw(\r\n        address user,\r\n        uint256 xSHDAmountIn,\r\n        uint256 SHDAmountOut,\r\n        bool isUpdateSHDInBar\r\n    );\r\n\r\n    constructor() public {}\r\n\r\n    function initialize(\r\n        address _SHDToken,\r\n        address _marketRegulator,\r\n        address _weth\r\n    ) public {\r\n        require(weth == address(0), \"already initialize\");\r\n        require(msg.sender == admin, \"unauthorized\");\r\n        SHDToken = _SHDToken;\r\n        marketRegulator = _marketRegulator;\r\n        weth = _weth;\r\n    }\r\n\r\n    //user operation\r\n    //enter the bar. Get the xSHDToken\r\n    function deposit(uint256 _SHDAmountIn) public {\r\n        require(_SHDAmountIn > 0, \"Insufficient SHDToken\");\r\n\r\n        uint256 totalSHD = IERC20(SHDToken).balanceOf(address(this));\r\n        uint256 totalShares = totalSupply;\r\n\r\n        lockDeadline[msg.sender] = now.add(lockPeriod);\r\n\r\n        uint256 xSHDAmountOut;\r\n        if (totalShares == 0 || totalSHD == 0) {\r\n            xSHDAmountOut = _SHDAmountIn;\r\n            _mint(msg.sender, _SHDAmountIn);\r\n        } else {\r\n            xSHDAmountOut = _SHDAmountIn.mul(totalShares).div(totalSHD);\r\n            _mint(msg.sender, xSHDAmountOut);\r\n        }\r\n        IERC20(SHDToken).transferFrom(msg.sender, address(this), _SHDAmountIn);\r\n        emit Deposit(msg.sender, _SHDAmountIn, xSHDAmountOut);\r\n    }\r\n\r\n    // Leave the bar. Claim back your SHDTokens.\r\n    function withdraw(uint256 _xSHDAmountIn, bool _isUpdateSHDInBar) public {\r\n        require(_xSHDAmountIn > 0, \"Insufficient xSHDToken\");\r\n        if (_isUpdateSHDInBar) {\r\n            swapAllForSHD();\r\n        }\r\n        uint256 timeForWithdraw = lockDeadline[msg.sender];\r\n        require(now > timeForWithdraw, \"still locked\");\r\n        uint256 totalShares = totalSupply;\r\n        uint256 SHDBalance = IERC20(SHDToken).balanceOf(address(this));\r\n        uint256 SHDAmountOut = _xSHDAmountIn.mul(SHDBalance).div(totalShares);\r\n        _burn(msg.sender, _xSHDAmountIn);\r\n        IERC20(SHDToken).transfer(msg.sender, SHDAmountOut);\r\n        emit Withdraw(\r\n            msg.sender,\r\n            _xSHDAmountIn,\r\n            SHDAmountOut,\r\n            _isUpdateSHDInBar\r\n        );\r\n    }\r\n\r\n    function swapAllForSHD() public {\r\n        IMarketRegulator.whiteListToken[] memory wantTokenWhiteList =\r\n            IMarketRegulator(marketRegulator).getWantTokenWhiteList();\r\n        for (uint256 i = 0; i < wantTokenWhiteList.length; i++) {\r\n            address wantToken = wantTokenWhiteList[i].token;\r\n            if (wantToken != weth) {\r\n                swap(wantToken, weth);\r\n            }\r\n        }\r\n        swap(weth, SHDToken);\r\n    }\r\n\r\n    function swapExactTokenForSHD(address wantToken) public {\r\n        if (wantToken != weth) {\r\n            swap(wantToken, weth);\r\n        }\r\n        swap(weth, SHDToken);\r\n    }\r\n\r\n    function swap(address from, address to) internal {\r\n        uint256 balance = IERC20(from).balanceOf(address(this));\r\n        if (balance > 0) {\r\n            address router = routerMap[from][to];\r\n            require(router != address(0), \"router hasn't been set\");\r\n            address[] memory path = new address[](2);\r\n            path[0] = from;\r\n            path[1] = to;\r\n            IERC20(from).approve(router, balance);\r\n            IUniswapV2Router02(router).swapExactTokensForTokens(\r\n                balance,\r\n                0,\r\n                path,\r\n                address(this),\r\n                now.add(60)\r\n            );\r\n        }\r\n    }\r\n\r\n    //admin operation\r\n    function setRouter(\r\n        address fromToken,\r\n        address ToToken,\r\n        address router\r\n    ) public {\r\n        require(msg.sender == admin, \"unauthorized\");\r\n        routerMap[fromToken][ToToken] = router;\r\n    }\r\n\r\n    function setMarketRegulator(address _marketRegulator) public {\r\n        require(msg.sender == admin, \"unauthorized\");\r\n        marketRegulator = _marketRegulator;\r\n    }\r\n\r\n    //goverance operation\r\n    function setLockPeriod(uint256 _lockPeriod) public {\r\n        require(msg.sender == governance, \"unauthorized\");\r\n        lockPeriod = _lockPeriod;\r\n    }\r\n\r\n    //view function\r\n    function getxSHDAmountOut(uint256 SHDAmountIn)\r\n        public\r\n        view\r\n        returns (uint256 xSHDAmountOut)\r\n    {\r\n        uint256 totalSHD = IERC20(SHDToken).balanceOf(address(this));\r\n        uint256 totalShares = totalSupply;\r\n        if (totalShares == 0 || totalSHD == 0) {\r\n            xSHDAmountOut = SHDAmountIn;\r\n        } else {\r\n            xSHDAmountOut = SHDAmountIn.mul(totalShares).div(totalSHD);\r\n        }\r\n    }\r\n\r\n    function getSHDAmountOut(uint256 xSHDAmountIn)\r\n        public\r\n        view\r\n        returns (uint256 SHDAmountOut)\r\n    {\r\n        uint256 totalShares = totalSupply;\r\n        uint256 SHDBalance = IERC20(SHDToken).balanceOf(address(this));\r\n        SHDAmountOut = xSHDAmountIn.mul(SHDBalance).div(totalShares);\r\n    }\r\n\r\n    function getSHDAmountOutAfterSwap(uint256 xSHDAmountIn)\r\n        public\r\n        view\r\n        returns (uint256 SHDAmountOut)\r\n    {\r\n        IMarketRegulator.whiteListToken[] memory wantTokenWhiteList =\r\n            IMarketRegulator(marketRegulator).getWantTokenWhiteList();\r\n\r\n        uint256 balanceOfWeth = IERC20(weth).balanceOf(address(this));\r\n\r\n        for (uint256 i = 0; i < wantTokenWhiteList.length; i++) {\r\n            address wantToken = wantTokenWhiteList[i].token;\r\n            if (wantToken != weth) {\r\n                uint256 balance = IERC20(wantToken).balanceOf(address(this));\r\n                uint256 wethAmountOut = getSwapAmount(wantToken, weth, balance);\r\n                balanceOfWeth = balanceOfWeth.add(wethAmountOut);\r\n            }\r\n        }\r\n\r\n        uint256 SHDBalance = IERC20(SHDToken).balanceOf(address(this));\r\n        uint256 SHDTokenAmountOut =\r\n            getSwapAmount(weth, SHDToken, balanceOfWeth);\r\n        SHDBalance = SHDBalance.add(SHDTokenAmountOut);\r\n\r\n        uint256 totalShares = totalSupply;\r\n        SHDAmountOut = xSHDAmountIn.mul(SHDBalance).div(totalShares);\r\n    }\r\n\r\n    function getSwapAmount(\r\n        address from,\r\n        address to,\r\n        uint256 fromAmountIn\r\n    ) internal view returns (uint256 amountOut) {\r\n        if (fromAmountIn > 0) {\r\n            address router = routerMap[from][to];\r\n            require(router != address(0), \"router hasn't been set\");\r\n            address[] memory path = new address[](2);\r\n            path[0] = from;\r\n            path[1] = to;\r\n            uint256[] memory amounts =\r\n                IUniswapV2Router02(router).getAmountsOut(fromAmountIn, path);\r\n            amountOut = amounts[1];\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"SHDAmountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"xSHDAmountOut\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"xSHDAmountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"SHDAmountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isUpdateSHDInBar\",\"type\":\"bool\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SHDToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_SHDAmountIn\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"xSHDAmountIn\",\"type\":\"uint256\"}],\"name\":\"getSHDAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"SHDAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"xSHDAmountIn\",\"type\":\"uint256\"}],\"name\":\"getSHDAmountOutAfterSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"SHDAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"SHDAmountIn\",\"type\":\"uint256\"}],\"name\":\"getxSHDAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"xSHDAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_SHDToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketRegulator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketRegulator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"routerMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockPeriod\",\"type\":\"uint256\"}],\"name\":\"setLockPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketRegulator\",\"type\":\"address\"}],\"name\":\"setMarketRegulator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ToToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAllForSHD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wantToken\",\"type\":\"address\"}],\"name\":\"swapExactTokenForSHD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_xSHDAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isUpdateSHDInBar\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenBarDelegate","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://90752a60e65801aefe79b1406feec3f712e41c0e9d0388b248242276cedb8da2"}]}