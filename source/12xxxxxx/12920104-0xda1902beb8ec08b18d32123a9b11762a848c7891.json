{"status":"1","message":"OK","result":[{"SourceCode":"// File: localhost/base/InitializableOwnable.sol\r\n\r\n//SPDX-License-Identifier: SimPL-2.0\r\npragma solidity ^0.6.0;\r\n\r\ncontract InitializableOwnable {\r\n    address public _OWNER_;\r\n    address public _NEW_OWNER_;\r\n    bool internal _INITIALIZED_;\r\n\r\n    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    modifier notInitialized() {\r\n        require(!_INITIALIZED_, \"INITIALIZED\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _OWNER_, \"NOT_OWNER\");\r\n        _;\r\n    }\r\n\r\n    function initOwner(address newOwner) public notInitialized {\r\n        _INITIALIZED_ = true;\r\n        _OWNER_ = newOwner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        emit OwnershipTransferPrepared(_OWNER_, newOwner);\r\n        _NEW_OWNER_ = newOwner;\r\n    }\r\n\r\n    function claimOwnership() public {\r\n        require(msg.sender == _NEW_OWNER_, \"INVALID_CLAIM\");\r\n        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\r\n        _OWNER_ = _NEW_OWNER_;\r\n        _NEW_OWNER_ = address(0);\r\n    }\r\n}\r\n\r\n// File: localhost/base/Governance.sol\r\n\r\n//SPDX-License-Identifier: SimPL-2.0\r\npragma solidity ^0.6.0;\r\n\r\ncontract Governance {\r\n    address internal _governance;\r\n\r\n    event GovernanceTransferred(address indexed previousGovernance, address indexed newGovernance);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial governance.\r\n     */\r\n    constructor () internal {\r\n        _governance = msg.sender;\r\n        emit GovernanceTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current governance.\r\n     */\r\n    function governance() public view returns (address) {\r\n        return _governance;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the governance.\r\n     */\r\n    modifier onlyGovernance() {\r\n        require(_governance == msg.sender, \"NOT_Governance\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newGovernance`).\r\n     * Can only be called by the current governance.\r\n     */\r\n    function transferGovernance(address newGovernance) public onlyGovernance {\r\n        require(newGovernance != address(0), \"ZERO_ADDRESS\");\r\n        emit GovernanceTransferred(_governance, newGovernance);\r\n        _governance = newGovernance;\r\n    }\r\n}\r\n\r\n// File: localhost/base/Operation.sol\r\n\r\n//SPDX-License-Identifier: SimPL-2.0\r\npragma solidity ^0.6.0;\r\n\r\n\r\ncontract Operation is Governance{\r\n    mapping(address => uint8) private _operators;\r\n\r\n    modifier isOperator{\r\n        require(_operators[msg.sender] == 1,\"NOT_AN_OPERATOR\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        _operators[msg.sender] = 1;\r\n    }\r\n\r\n    function addOperator(address account) external onlyGovernance {\r\n        _operators[account] = 1;\r\n    }\r\n\r\n    function removeOperator(address account) external onlyGovernance {\r\n        _operators[account] = 0;\r\n    }\r\n\r\n    function canOperate(address account) external view returns (bool) {\r\n        return _operators[account] == 1;\r\n    }\r\n}\r\n\r\n// File: localhost/lib/Counters.sol\r\n\r\n//SPDX-License-Identifier: SimPL-2.0\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\r\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\r\n * directly accessed.\r\n */\r\nlibrary Counters {\r\n    using SafeMath for uint256;\r\n\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\r\n        counter._value += 1;\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        counter._value = counter._value.sub(1);\r\n    }\r\n\r\n    function moveTo(Counter storage counter,uint256 target) internal {\r\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\r\n        counter._value = target;\r\n    }\r\n}\r\n// File: localhost/lib/SafeERC20.sol\r\n\r\n//SPDX-License-Identifier: SimPL-2.0\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n// File: localhost/interface/IYouSwapFactory.sol\r\n\r\n//SPDX-License-Identifier: SimPL-2.0\r\npragma solidity ^0.6.0;\r\n\r\ninterface IYouSwapFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n\r\n    function setFeeToRate(uint256) external;\r\n\r\n    function feeToRate() external view returns (uint256);\r\n}\r\n// File: localhost/token/createToken/MoonProxyTemplate.sol\r\n\r\n//SPDX-License-Identifier: SimPL-2.0\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract MoonProxyTemplate is InitializableOwnable {\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 public TOKENMOON;\r\n    IERC20 public TOKENB;\r\n    bool private _pairCreated;\r\n    IYouSwapRouter public youSwapRouter;\r\n    address private _youSwapPair;\r\n\r\n    bool inSwapAndLiquify;\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    event SwapAndLiquify(\r\n        uint256 moonTokensSwapped,\r\n        uint256 tokenBReceived,\r\n        uint256 moonTokensIntoLiqudity\r\n    );\r\n\r\n    event LiquifySkipped(\r\n        uint256 tokenMoonAmount,\r\n        uint256 tokenBAmount\r\n    );\r\n\r\n    function youSwapPair() external view returns (address){\r\n        return _youSwapPair;\r\n    }\r\n\r\n    modifier onlyMoon() {\r\n        require(msg.sender == address(TOKENMOON), \"ONLY_CALLABLE_FOR_MOON_CONTRACT\");\r\n        _;\r\n    }\r\n\r\n    function createPairs(address creator, address router, address tokenMoon, address tokenB) external returns (address, address){\r\n        require(!_pairCreated, \"PAIR_CREATED\");\r\n        require(msg.sender == tokenMoon, \"ONLY_CALLABLE_FOR_MOON_CONTRACT\");\r\n\r\n        TOKENMOON = IERC20(tokenMoon);\r\n        TOKENB = IERC20(tokenB);\r\n        initOwner(creator);\r\n\r\n        youSwapRouter = IYouSwapRouter(router);\r\n        IYouSwapFactory factory = IYouSwapFactory(youSwapRouter.factory());\r\n        // Create YouSwap pairs for this new token\r\n        _youSwapPair = factory.createPair(tokenMoon, tokenB);\r\n        address ethPair = factory.createPair(tokenMoon, youSwapRouter.WETH());\r\n\r\n        _pairCreated = true;\r\n        return (_youSwapPair, ethPair);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) onlyMoon lockTheSwap external returns (bool)  {\r\n        // split the contract balance into halves\r\n        uint256 half = contractTokenBalance.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n\r\n        // capture the contract's current TOKENB balance.\r\n        // this is so that we can capture exactly the amount of TOKENB that the\r\n        // swap creates, and not make the liquidity event include any TOKENB that\r\n        // has been manually sent to the contract\r\n        uint256 initialBalance = TOKENB.balanceOf(address(this));\r\n\r\n        // swap tokens for TOKENB\r\n        _swapTokensForTOKENB(half);\r\n\r\n        // how much TOKENB did we just swap into?\r\n        uint256 newBalance = TOKENB.balanceOf(address(this)).sub(initialBalance);\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n        if (otherHalf == 0 || newBalance == 0) {\r\n            LiquifySkipped(otherHalf, newBalance);\r\n        }\r\n        else {\r\n            // add liquidity to YouSwap\r\n            _addLiquidity(otherHalf, newBalance);\r\n        }\r\n    }\r\n\r\n    function _swapTokensForTOKENB(uint256 tokenMoonAmount) private {\r\n        // generate the YouSwap pair path of TOKENMOON -> TOKENB\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(TOKENMOON);\r\n        path[1] = address(TOKENB);\r\n\r\n        TOKENMOON.approve(address(youSwapRouter), tokenMoonAmount);\r\n\r\n        // make the swap\r\n        youSwapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenMoonAmount,\r\n            0, // accept any amount of TOKENB\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _addLiquidity(uint256 tokenMoonAmount, uint256 tokenBAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        TOKENMOON.approve(address(youSwapRouter), tokenMoonAmount);\r\n        TOKENB.approve(address(youSwapRouter), tokenBAmount);\r\n\r\n        // add the liquidity\r\n        youSwapRouter.addLiquidity(\r\n            address(TOKENMOON),\r\n            address(TOKENB),\r\n            tokenMoonAmount,\r\n            tokenBAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            _OWNER_,\r\n            block.timestamp\r\n        );\r\n    }\r\n}\r\n// File: localhost/token/createToken/templates/MoonERC20Template.sol\r\n\r\n//SPDX-License-Identifier: SimPL-2.0\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract MoonERC20Template is InitializableOwnable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n\r\n    mapping(address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal;\r\n    uint256 private _rTotal;\r\n    uint256 private _tFeeTotal;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    uint8 public _taxFee;\r\n    uint8 private _previousTaxFee = _taxFee;\r\n\r\n    uint8 public _liquidityFee;\r\n    uint8 private _previousLiquidityFee = _liquidityFee;\r\n\r\n    bool public swapAndLiquifyEnabled;\r\n\r\n    uint256 public _maxTxAmount;\r\n    uint256 private _numTokensSellToAddToLiquidity;\r\n\r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event Transfer(address indexed sender, address indexed recipient, uint256 amount);\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n    event Mint(address indexed account, uint256 amount);\r\n    event Burn(address indexed account, uint256 amount);\r\n\r\n    bool public initialized;\r\n    MoonProxyTemplate public moonProxy;\r\n    IERC20 public YOU;\r\n\r\n    bool inSwapAndLiquify;\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    function init(\r\n        address creator,\r\n        address tokenYou,\r\n        address router,\r\n        uint256 initSupply,\r\n        string memory name,\r\n        string memory symbol,\r\n        uint8 decimals,\r\n        uint8 taxFee,\r\n        uint8 liquidityFee,\r\n        address cloneFactory,\r\n        address moonProxyTemplate\r\n    ) public {\r\n        require(!initialized, \"TOKEN_INITIALIZED\");\r\n        require((taxFee + liquidityFee) < 100, \"INVALID_FEE_RATE\");\r\n\r\n        initOwner(creator);\r\n        YOU = IERC20(tokenYou);\r\n\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n        _taxFee = taxFee;\r\n        _liquidityFee = liquidityFee;\r\n\r\n        _tTotal = initSupply * 10 ** uint256(decimals);\r\n        _rTotal = (MAX - (MAX % _tTotal));\r\n\r\n        _maxTxAmount = _tTotal.div(200);\r\n        _numTokensSellToAddToLiquidity = _maxTxAmount.div(10);\r\n\r\n        _rOwned[creator] = _rTotal;\r\n        emit Transfer(address(0), creator, _tTotal);\r\n\r\n        moonProxy = MoonProxyTemplate(ICloneFactory(cloneFactory).clone(moonProxyTemplate));\r\n        (address youPair,address ethPair) = moonProxy.createPairs(creator, router, address(this), address(YOU));\r\n        _isExcludedFromFee[youPair] = true;\r\n        _isExcludedFromFee[ethPair] = true;\r\n\r\n        //exclude owner and the proxy contract from fee\r\n        _isExcludedFromFee[creator] = true;\r\n        _isExcludedFromFee[address(moonProxy)] = true;\r\n        swapAndLiquifyEnabled = true;\r\n        initialized = true;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function deliver(uint256 tAmount) public {\r\n        address sender = msg.sender;\r\n        require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\r\n        (uint256 rAmount,,,,,) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rTotal = _rTotal.sub(rAmount);\r\n        _tFeeTotal = _tFeeTotal.add(tAmount);\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns (uint256) {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount,,,,,) = _getValues(tAmount);\r\n            return rAmount;\r\n        } else {\r\n            (,uint256 rTransferAmount,,,,) = _getValues(tAmount);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns (uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function excludeFromReward(address account) public onlyOwner() {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if (_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner() {\r\n        require(_isExcluded[account], \"Account is already excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function setTaxFeePercent(uint8 taxFee) external onlyOwner {\r\n        require((_liquidityFee + taxFee) < 100, \"INVALID_FEE_RATE\");\r\n        _taxFee = taxFee;\r\n    }\r\n\r\n    function setNumTokensSellToAddToLiquidity(uint256 numTokensSellToAddToLiquidity) external onlyOwner {\r\n        _numTokensSellToAddToLiquidity = numTokensSellToAddToLiquidity;\r\n    }\r\n\r\n    function getNumTokensSellToAddToLiquidity() external view returns (uint256) {\r\n        return _numTokensSellToAddToLiquidity;\r\n    }\r\n\r\n    function setLiquidityFeePercent(uint8 liquidityFee) external onlyOwner() {\r\n        require((_taxFee + liquidityFee) < 100, \"INVALID_FEE_RATE\");\r\n        _liquidityFee = liquidityFee;\r\n    }\r\n\r\n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\r\n        _maxTxAmount = _tTotal.mul(maxTxPercent).div(\r\n            10 ** 2\r\n        );\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {\r\n        uint256 tFee = calculateTaxFee(tAmount);\r\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\r\n        return (tTransferAmount, tFee, tLiquidity);\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _takeLiquidity(uint256 tLiquidity) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        _rOwned[address(moonProxy)] = _rOwned[address(moonProxy)].add(rLiquidity);\r\n        if (_isExcluded[address(moonProxy)])\r\n            _tOwned[address(moonProxy)] = _tOwned[address(moonProxy)].add(tLiquidity);\r\n    }\r\n\r\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_taxFee).div(\r\n            10 ** 2\r\n        );\r\n    }\r\n\r\n    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_liquidityFee).div(\r\n            10 ** 2\r\n        );\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        if (_taxFee == 0 && _liquidityFee == 0) return;\r\n\r\n        _previousTaxFee = _taxFee;\r\n        _previousLiquidityFee = _liquidityFee;\r\n\r\n        _taxFee = 0;\r\n        _liquidityFee = 0;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        _taxFee = _previousTaxFee;\r\n        _liquidityFee = _previousLiquidityFee;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        if (from != _OWNER_ && to != _OWNER_)\r\n            require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n\r\n        // is the token balance of this contract address over the min number of\r\n        // tokens that we need to initiate a swap + liquidity lock?\r\n        // also, don't get caught in a circular liquidity event.\r\n        // also, don't swap & liquify if sender is YouSwap pair.\r\n        uint256 contractTokenBalance = balanceOf(address(moonProxy));\r\n\r\n        if (contractTokenBalance >= _maxTxAmount) {\r\n            contractTokenBalance = _maxTxAmount;\r\n        }\r\n\r\n        bool overMinTokenBalance = contractTokenBalance >= _numTokensSellToAddToLiquidity;\r\n        if (\r\n            overMinTokenBalance &&\r\n            !inSwapAndLiquify &&\r\n            from != moonProxy.youSwapPair() &&\r\n            swapAndLiquifyEnabled\r\n        ) {\r\n            contractTokenBalance = _numTokensSellToAddToLiquidity;\r\n            //add liquidity\r\n            swapAndLiquify(contractTokenBalance);\r\n        }\r\n\r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n\r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        moonProxy.swapAndLiquify(contractTokenBalance);\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\r\n        if (!takeFee)\r\n            removeAllFee();\r\n\r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n\r\n        if (!takeFee)\r\n            restoreAllFee();\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n}\r\n// File: localhost/lib/Address.sol\r\n\r\n//SPDX-License-Identifier: SimPL-2.0\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n\r\n    function isNotZero(address account) internal pure returns (bool) {\r\n        return account != address(0);\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {size := extcodesize(account)}\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success,) = recipient.call{value : amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value : weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: localhost/token/createToken/templates/MintableERC20Template.sol\r\n\r\n//SPDX-License-Identifier: SimPL-2.0\r\npragma solidity ^0.6.0;\r\n\r\ncontract MintableERC20Template is InitializableOwnable {\r\n    using SafeMath for uint256;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 private _totalSupply;\r\n    mapping(address => uint256) private _balanceOf;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    mapping(address => uint8) private _minters;\r\n\r\n    event Transfer(address indexed sender, address indexed recipient, uint256 amount);\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n    bool public initialized;\r\n\r\n    function init(\r\n        address creator,\r\n        uint256 initSupply,\r\n        string memory name,\r\n        string memory symbol,\r\n        uint8 decimals\r\n    ) public {\r\n        require(!initialized, \"TOKEN_INITIALIZED\");\r\n        initialized = true;\r\n\r\n        initOwner(creator);\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n        _totalSupply = initSupply * 10 ** uint256(decimals);\r\n        _balanceOf[creator] = _totalSupply;\r\n        _minters[creator] = 1;\r\n        emit Transfer(address(0), creator, _totalSupply);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balanceOf[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"TRANSFER_AMOUNT_EXCEEDS_ALLOWANCE\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"DECREASED_ALLOWANCE_BELOW_ZERO\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"TRANSFER_FROM_THE_ZERO_ADDRESS\");\r\n        require(recipient != address(0), \"TRANSFER_TO_THE_ZERO_ADDRESS\");\r\n        require(amount > 0, \"TRANSFER_ZERO_AMOUNT\");\r\n\r\n        _balanceOf[sender] = _balanceOf[sender].sub(amount, \"TRANSFER_AMOUNT_EXCEEDS_BALANCE\");\r\n        _balanceOf[recipient] = _balanceOf[recipient].add(amount);\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"BURN_FROM_THE_ZERO_ADDRESS\");\r\n        require(_balanceOf[account] > 0, \"INSUFFICIENT_FUNDS\");\r\n\r\n        _balanceOf[account] = _balanceOf[account].sub(amount, \"BURN_AMOUNT_EXCEEDS_BALANCE\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"APPROVE_FROM_THE_ZERO_ADDRESS\");\r\n        require(spender != address(0), \"APPROVE_TO_THE_ZERO_ADDRESS\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function burn(uint256 amount) external {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    function burnFrom(address account, uint256 amount) external {\r\n        uint256 newAllowance = allowance(account, msg.sender).sub(amount, \"BURN_AMOUNT_EXCEEDS_ALLOWANCE\");\r\n\r\n        _approve(account, msg.sender, newAllowance);\r\n        _burn(account, amount);\r\n    }\r\n\r\n    modifier isMinter() {\r\n        require(_minters[msg.sender] == 1, \"IS_NOT_A_MINTER\");\r\n        _;\r\n    }\r\n\r\n    function mint(address recipient, uint256 amount) external isMinter {\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balanceOf[recipient] = _balanceOf[recipient].add(amount);\r\n\r\n        emit Transfer(address(0), recipient, amount);\r\n    }\r\n\r\n    function addMinter(address account) external onlyOwner {\r\n        require(Address.isNotZero(account), \"ZERO_ADDRESS\");\r\n        _minters[account] = 1;\r\n    }\r\n\r\n    function removeMinter(address account) external onlyOwner {\r\n        _minters[account] = 0;\r\n    }\r\n}\r\n// File: localhost/lib/SafeMath.sol\r\n\r\n//SPDX-License-Identifier: SimPL-2.0\r\npragma solidity ^0.6.0;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\r\n        uint256 z = x / 2 + 1;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n// File: localhost/token/createToken/templates/ERC20Template.sol\r\n\r\n//SPDX-License-Identifier: SimPL-2.0\r\npragma solidity ^0.6.0;\r\n\r\n\r\ncontract ERC20Template {\r\n    using SafeMath for uint256;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 private _totalSupply;\r\n    mapping(address => uint256) private _balanceOf;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    event Transfer(address indexed sender, address indexed recipient, uint256 amount);\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n    bool public initialized;\r\n\r\n    function init(\r\n        address creator,\r\n        uint256 initSupply,\r\n        string calldata name,\r\n        string calldata symbol,\r\n        uint8 decimals\r\n    ) external {\r\n        require(!initialized, \"TOKEN_INITIALIZED\");\r\n\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n        _totalSupply = initSupply * 10 ** uint256(decimals);\r\n        _balanceOf[creator] = _totalSupply;\r\n        initialized = true;\r\n\r\n        emit Transfer(address(0), creator, _totalSupply);\r\n    }\r\n\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return _balanceOf[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"TRANSFER_AMOUNT_EXCEEDS_ALLOWANCE\"));\r\n        _transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"DECREASED_ALLOWANCE_BELOW_ZERO\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"TRANSFER_FROM_THE_ZERO_ADDRESS\");\r\n        require(recipient != address(0), \"TRANSFER_TO_THE_ZERO_ADDRESS\");\r\n        require(amount > 0, \"TRANSFER_ZERO_AMOUNT\");\r\n\r\n        _balanceOf[sender] = _balanceOf[sender].sub(amount, \"TRANSFER_AMOUNT_EXCEEDS_BALANCE\");\r\n        _balanceOf[recipient] = _balanceOf[recipient].add(amount);\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"APPROVE_FROM_THE_ZERO_ADDRESS\");\r\n        require(spender != address(0), \"APPROVE_TO_THE_ZERO_ADDRESS\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}\r\n// File: localhost/interface/ICloneFactory.sol\r\n\r\n//SPDX-License-Identifier: SimPL-2.0\r\npragma solidity ^0.6.0;\r\n\r\ninterface ICloneFactory {\r\n    function clone(address prototype) external returns (address proxy);\r\n}\r\n// File: localhost/interface/IERC20.sol\r\n\r\n//SPDX-License-Identifier: SimPL-2.0\r\npragma solidity ^0.6.0;\r\n\r\ninterface IERC20 {\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `amount` tokens are moved from one account (`sender`) to\r\n     * another (`recipient`).\r\n     *\r\n     * Note that `amount` may be zero.\r\n     */\r\n    event Transfer(address indexed sender, address indexed recipient, uint256 amount);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `amount` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n}\r\n// File: localhost/interface/IYouSwapRouter.sol\r\n\r\n//SPDX-License-Identifier: SimPL-2.0\r\npragma solidity ^0.6.0;\r\n\r\ninterface IYouSwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapMining() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n// File: localhost/token/createToken/ERC20FactoryV3.sol\r\n\r\n//SPDX-License-Identifier: SimPL-2.0\r\npragma solidity ^0.6.0;\r\n\r\nabstract contract ERC20FactoryV2 {\r\n    function getTokenByUser(address user) virtual external view returns (address[] memory tokens, uint8[] memory tokenTypes);\r\n}\r\n\r\ncontract ERC20FactoryV3 is Operation {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Counters for Counters.Counter;\r\n\r\n    address public _CLONE_FACTORY_;\r\n    address public _ERC20_TEMPLATE_;\r\n    address public _MINTABLE_ERC20_TEMPLATE_;\r\n    address public _MOON_ERC20_TEMPLATE_;\r\n    address public _MOON_PROXY_TEMPLATE_;\r\n\r\n    uint256 public usdtFeeForStd;\r\n    uint256 public youFeeForStd;\r\n\r\n    uint256 public usdtFeeForMintable;\r\n    uint256 public youFeeForMintable;\r\n\r\n    uint256 public usdtFeeForMoon;\r\n    uint256 public youFeeForMoon;\r\n\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    Counters.Counter private _issues;\r\n\r\n    event NewERC20(address tokenAddress, address creator, bool isMintable, uint8 tokenType);\r\n    event Refund(address recipient, uint256 amount);\r\n\r\n    IYouSwapRouter public youSwapRouter;\r\n\r\n    IERC20 public YOU;\r\n    IERC20 public USDT;\r\n\r\n    // ============ Registry ============\r\n    // creator -> token address list\r\n    mapping(address => address[]) public _USER_REGISTRY_;\r\n    // creator -> token type list\r\n    mapping(address => uint8[]) public _USER_REGISTRY_TYPE_;\r\n\r\n    // creator -> amount of YOU used to be refund\r\n    mapping(address => uint256) public _REFUNDS_;\r\n    uint256 private _refundRate = 50;\r\n\r\n    ERC20FactoryV2 public factoryV2;\r\n    constructor(\r\n        address cloneFactory,\r\n        address erc20Template,\r\n        address mintableErc20Template,\r\n        address moonErc20Template,\r\n        address moonProxyTemplate\r\n    ) public {\r\n        _CLONE_FACTORY_ = cloneFactory;\r\n        _ERC20_TEMPLATE_ = erc20Template;\r\n        _MINTABLE_ERC20_TEMPLATE_ = mintableErc20Template;\r\n        _MOON_ERC20_TEMPLATE_ = moonErc20Template;\r\n        _MOON_PROXY_TEMPLATE_ = moonProxyTemplate;\r\n\r\n        youSwapRouter = IYouSwapRouter(0xf80Ddd58E040dF41C0761566295a8c1b75B30770);\r\n        YOU = IERC20(0x1d32916CFA6534D261AD53E2498AB95505bd2510);\r\n        USDT = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n\r\n        factoryV2 = ERC20FactoryV2(0x0Ac0ABE38c8E72A58Ea530276843d547C8303173);\r\n        \r\n        //100USDT as default\r\n        usdtFeeForStd = 100 * 10 ** uint256(USDT.decimals());\r\n        //100YOU as default\r\n        youFeeForStd = 100 * 10 ** uint256(YOU.decimals());\r\n\r\n        //400USDT as default\r\n        usdtFeeForMintable = 400 * 10 ** uint256(USDT.decimals());\r\n        //400YOU as default\r\n        youFeeForMintable = 400 * 10 ** uint256(YOU.decimals());\r\n\r\n        //1000USDT as default\r\n        usdtFeeForMoon = 1000 * 10 ** uint256(USDT.decimals());\r\n        //1000YOU as default\r\n        youFeeForMoon = 1000 * 10 ** uint256(YOU.decimals());\r\n\r\n        //include issues from V1 and V2\r\n        _issues.moveTo(15);\r\n    }\r\n\r\n    function createStdERC20(\r\n        uint256 totalSupply,\r\n        string calldata name,\r\n        string calldata symbol,\r\n        uint8 decimals,\r\n        uint8 feeTokenType //YOU:1 USDT:2\r\n    ) external returns (address newERC20) {\r\n        _takeFeeForStd(feeTokenType);\r\n        newERC20 = ICloneFactory(_CLONE_FACTORY_).clone(_ERC20_TEMPLATE_);\r\n        ERC20Template(newERC20).init(msg.sender, totalSupply, name, symbol, decimals);\r\n        _USER_REGISTRY_[msg.sender].push(newERC20);\r\n        _USER_REGISTRY_TYPE_[msg.sender].push(1);\r\n        _issues.increment();\r\n        emit NewERC20(newERC20, msg.sender, false, 1);\r\n    }\r\n\r\n    function createMintableERC20(\r\n        uint256 initSupply,\r\n        string calldata name,\r\n        string calldata symbol,\r\n        uint8 decimals,\r\n        uint8 feeTokenType //YOU:1 USDT:2\r\n    ) external returns (address newMintableERC20) {\r\n        _takeFeeForMintable(feeTokenType);\r\n        newMintableERC20 = ICloneFactory(_CLONE_FACTORY_).clone(_MINTABLE_ERC20_TEMPLATE_);\r\n        MintableERC20Template(newMintableERC20).init(\r\n            msg.sender,\r\n            initSupply,\r\n            name,\r\n            symbol,\r\n            decimals\r\n        );\r\n        _USER_REGISTRY_[msg.sender].push(newMintableERC20);\r\n        _USER_REGISTRY_TYPE_[msg.sender].push(2);\r\n        _issues.increment();\r\n        emit NewERC20(newMintableERC20, msg.sender, true, 2);\r\n    }\r\n\r\n    function createMoonERC20(\r\n        uint256 initSupply,\r\n        string calldata name,\r\n        string calldata symbol,\r\n        uint8 decimals,\r\n        uint8 taxFee,\r\n        uint8 liquidityFee,\r\n        uint8 feeTokenType //YOU:1 USDT:2\r\n    ) external returns (address newMoonERC20) {\r\n        _takeFeeForMoon(feeTokenType);\r\n        newMoonERC20 = ICloneFactory(_CLONE_FACTORY_).clone(_MOON_ERC20_TEMPLATE_);\r\n        MoonERC20Template(newMoonERC20).init(\r\n            msg.sender,\r\n            address(YOU),\r\n            address(youSwapRouter),\r\n            initSupply,\r\n            name,\r\n            symbol,\r\n            decimals,\r\n            taxFee,\r\n            liquidityFee,\r\n            _CLONE_FACTORY_,\r\n            _MOON_PROXY_TEMPLATE_\r\n        );\r\n        _USER_REGISTRY_[msg.sender].push(newMoonERC20);\r\n        _USER_REGISTRY_TYPE_[msg.sender].push(3);\r\n        _issues.increment();\r\n        emit NewERC20(newMoonERC20, msg.sender, false, 3);\r\n    }\r\n\r\n    function getTokenByUser(address user) external view returns (address[] memory tokens, uint8[] memory tokenTypes){\r\n        (address[] memory tokensV2,uint8[] memory tokenTypesV2) = factoryV2.getTokenByUser(user);\r\n        if (tokensV2.length > 0 && tokensV2.length == tokenTypesV2.length) {\r\n            uint256 lenV2 = tokensV2.length;\r\n            uint256 lenV3 = _USER_REGISTRY_[user].length;\r\n\r\n            uint256 len = lenV2 + lenV3;\r\n\r\n            address[] memory tokensAll = new address[](len);\r\n            uint8[] memory tokenTypesAll = new uint8[](len);\r\n\r\n            for (uint256 i = 0; i < lenV2; i++) {\r\n                tokensAll[i] = tokensV2[i];\r\n                tokenTypesAll[i] = tokenTypesV2[i];\r\n            }\r\n\r\n            for (uint256 j = 0; j < lenV3; j++) {\r\n                tokensAll[lenV2 + j] = _USER_REGISTRY_[user][j];\r\n                tokenTypesAll[lenV2 + j] = _USER_REGISTRY_TYPE_[user][j];\r\n            }\r\n\r\n            return (tokensAll, tokenTypesAll);\r\n        }\r\n        else {\r\n            return (_USER_REGISTRY_[user], _USER_REGISTRY_TYPE_[user]);\r\n        }\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyGovernance {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public isOperator {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function _takeFeeForStd(uint8 feeTokenType) private {\r\n        if (_isExcludedFromFee[msg.sender]) return;\r\n\r\n        if (feeTokenType == 1) {//YOU\r\n            YOU.safeTransferFrom(msg.sender, address(this), youFeeForStd);\r\n        }\r\n        else {//USDT\r\n            _takeUsdtFee(usdtFeeForStd);\r\n        }\r\n\r\n        _REFUNDS_[msg.sender] = _calculateRefund(youFeeForStd);\r\n    }\r\n\r\n    function _takeFeeForMintable(uint8 feeTokenType) private {\r\n        if (_isExcludedFromFee[msg.sender]) return;\r\n\r\n        if (feeTokenType == 1) {//YOU\r\n            YOU.safeTransferFrom(msg.sender, address(this), youFeeForMintable);\r\n        }\r\n        else {//USDT\r\n            _takeUsdtFee(usdtFeeForMintable);\r\n        }\r\n\r\n        _REFUNDS_[msg.sender] = _calculateRefund(youFeeForMintable);\r\n    }\r\n\r\n    function _takeFeeForMoon(uint8 feeTokenType) private {\r\n        if (_isExcludedFromFee[msg.sender]) return;\r\n\r\n        if (feeTokenType == 1) {//YOU\r\n            YOU.safeTransferFrom(msg.sender, address(this), youFeeForMoon);\r\n        }\r\n        else {//USDT\r\n            _takeUsdtFee(usdtFeeForMoon);\r\n        }\r\n\r\n        _REFUNDS_[msg.sender] = _calculateRefund(youFeeForMoon);\r\n    }\r\n\r\n    function _calculateRefund(uint256 amount) private view returns (uint256) {\r\n        if (_isExcludedFromFee[msg.sender]) return 0;\r\n        return amount.mul(_refundRate).div(\r\n            10 ** 2\r\n        );\r\n    }\r\n\r\n    function _takeUsdtFee(uint256 feeAmount) private {\r\n        USDT.safeTransferFrom(msg.sender, address(this), feeAmount);\r\n        uint256 balanceOfU = USDT.balanceOf(address(this));\r\n        if (balanceOfU >= feeAmount) {\r\n            _swapUSDTForYOU(balanceOfU);\r\n        }\r\n    }\r\n\r\n    function _swapUSDTForYOU(uint256 usdtAmount) private {\r\n        // generate the youswap pair path of USDT -> YOU\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(USDT);\r\n        path[1] = address(YOU);\r\n\r\n        USDT.safeApprove(address(youSwapRouter), usdtAmount);\r\n\r\n        youSwapRouter.swapExactTokensForTokens(\r\n            usdtAmount,\r\n            0, // accept any amount of YOU\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function setUsdtFeeForStd(uint256 newFee) external isOperator {\r\n        usdtFeeForStd = newFee;\r\n    }\r\n\r\n    function setYouFeeForStd(uint256 newFee) external isOperator {\r\n        youFeeForStd = newFee;\r\n    }\r\n\r\n    function setUsdtFeeForMintable(uint256 newFee) external isOperator {\r\n        usdtFeeForMintable = newFee;\r\n    }\r\n\r\n    function setYouFeeForMintable(uint256 newFee) external isOperator {\r\n        youFeeForMintable = newFee;\r\n    }\r\n\r\n    function setUsdtFeeForMoon(uint256 newFee) external isOperator {\r\n        usdtFeeForMoon = newFee;\r\n    }\r\n\r\n    function setYouFeeForMoon(uint256 newFee) external isOperator {\r\n        youFeeForMoon = newFee;\r\n    }\r\n\r\n    function setRefundRate(uint256 newRate) external isOperator {\r\n        require(newRate <= 100, \"INVALID_RATE\");\r\n        _refundRate = newRate;\r\n    }\r\n\r\n    function refundRate() external view returns (uint256) {\r\n        return _refundRate;\r\n    }\r\n\r\n    function refund(address user) external isOperator {\r\n        require(_REFUNDS_[user] > 0, \"INSUFFICIENT_BALANCE\");\r\n\r\n        YOU.safeTransfer(user, _REFUNDS_[user]);\r\n        emit Refund(user, _REFUNDS_[user]);\r\n        _REFUNDS_[user] = 0;\r\n    }\r\n\r\n    function totalIssues() external view returns (uint256) {\r\n        return _issues.current();\r\n    }\r\n\r\n    function withdraw(address token, address recipient, uint256 amount) onlyGovernance external {\r\n        IERC20(token).safeTransfer(recipient, amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cloneFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20Template\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mintableErc20Template\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"moonErc20Template\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"moonProxyTemplate\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernance\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"GovernanceTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isMintable\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tokenType\",\"type\":\"uint8\"}],\"name\":\"NewERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"YOU\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_CLONE_FACTORY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ERC20_TEMPLATE_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_MINTABLE_ERC20_TEMPLATE_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_MOON_ERC20_TEMPLATE_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_MOON_PROXY_TEMPLATE_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_REFUNDS_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_USER_REGISTRY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_USER_REGISTRY_TYPE_\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canOperate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeTokenType\",\"type\":\"uint8\"}],\"name\":\"createMintableERC20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newMintableERC20\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"taxFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"liquidityFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeTokenType\",\"type\":\"uint8\"}],\"name\":\"createMoonERC20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newMoonERC20\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeTokenType\",\"type\":\"uint8\"}],\"name\":\"createStdERC20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newERC20\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryV2\",\"outputs\":[{\"internalType\":\"contract ERC20FactoryV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTokenByUser\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"tokenTypes\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setRefundRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setUsdtFeeForMintable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setUsdtFeeForMoon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setUsdtFeeForStd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setYouFeeForMintable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setYouFeeForMoon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setYouFeeForStd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalIssues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtFeeForMintable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtFeeForMoon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtFeeForStd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"youFeeForMintable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"youFeeForMoon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"youFeeForStd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"youSwapRouter\",\"outputs\":[{\"internalType\":\"contract IYouSwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ERC20FactoryV3","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000045470be3faa49d0d21c20a6933faaa308605c55000000000000000000000000a13a434123306a97cabb93540aead1499cfcd0740000000000000000000000009e725d9fcc341e7e3109b45fd16becb1b540b65a0000000000000000000000009879f7d1ab76f809e16bf29c1531def13666abe300000000000000000000000030954e591c0973ead1da23da0f849279b82e9efc","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://70526e534842d3d2d7c9071272f360e769a72117ce99c3218f16e8028101cdff"}]}