{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/stake/Stake1Logic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nimport \\\"../interfaces/IStake1Logic.sol\\\";\\nimport {IProxy} from \\\"../interfaces/IProxy.sol\\\";\\nimport {IStakeFactory} from \\\"../interfaces/IStakeFactory.sol\\\";\\nimport {IStakeRegistry} from \\\"../interfaces/IStakeRegistry.sol\\\";\\nimport {IStake1Vault} from \\\"../interfaces/IStake1Vault.sol\\\";\\nimport {IStakeTONTokamak} from \\\"../interfaces/IStakeTONTokamak.sol\\\";\\nimport {IStakeUniswapV3} from \\\"../interfaces/IStakeUniswapV3.sol\\\";\\n\\nimport \\\"../common/AccessibleCommon.sol\\\";\\n\\nimport \\\"./StakeProxyStorage.sol\\\";\\n\\n/// @title The logic of TOS Plaform\\n/// @notice Admin can createVault, createStakeContract.\\n/// User can excute the tokamak staking function of each contract through this logic.\\ncontract Stake1Logic is StakeProxyStorage, AccessibleCommon, IStake1Logic {\\n    modifier nonZeroAddress(address _addr) {\\n        require(_addr != address(0), \\\"Stake1Logic:zero address\\\");\\n        _;\\n    }\\n\\n    /*\\n    /// @dev event on create vault\\n    /// @param vault the vault address created\\n    /// @param paytoken the token used for staking by user\\n    /// @param cap  allocated reward amount\\n    event CreatedVault(address indexed vault, address paytoken, uint256 cap);\\n\\n    /// @dev event on create stake contract in vault\\n    /// @param vault the vault address\\n    /// @param stakeContract the stake contract address created\\n    /// @param phase the phase of TOS platform\\n    event CreatedStakeContract(\\n        address indexed vault,\\n        address indexed stakeContract,\\n        uint256 phase\\n    );\\n\\n    /// @dev event on sale-closed\\n    /// @param vault the vault address\\n    event ClosedSale(address indexed vault);\\n\\n    /// @dev event on setting stake registry\\n    /// @param stakeRegistry the stakeRegistry address\\n    event SetStakeRegistry(address stakeRegistry);\\n*/\\n\\n    constructor() {}\\n\\n    /// @dev upgrade to the logic of _stakeProxy\\n    /// @param _stakeProxy the StakeProxy address, it is stakeContract address in vault.\\n    /// @param _implementation new logic address\\n    function upgradeStakeTo(address _stakeProxy, address _implementation)\\n        external\\n        onlyOwner\\n    {\\n        IProxy(_stakeProxy).upgradeTo(_implementation);\\n    }\\n\\n    /// @dev grant the role to account in target\\n    /// @param target target address\\n    /// @param role  byte32 of role\\n    /// @param account account address\\n    function grantRole(\\n        address target,\\n        bytes32 role,\\n        address account\\n    ) external onlyOwner {\\n        AccessControl(target).grantRole(role, account);\\n    }\\n\\n    /// @dev revoke the role to account in target\\n    /// @param target target address\\n    /// @param role  byte32 of role\\n    /// @param account account address\\n    function revokeRole(\\n        address target,\\n        bytes32 role,\\n        address account\\n    ) external onlyOwner {\\n        AccessControl(target).revokeRole(role, account);\\n    }\\n\\n    /// @dev Sets TOS address\\n    /// @param _tos new TOS address\\n    function setTOS(address _tos) public onlyOwner nonZeroAddress(_tos) {\\n        tos = _tos;\\n    }\\n\\n    /// @dev Sets Stake Registry address\\n    /// @param _stakeRegistry new StakeRegistry address\\n    function setStakeRegistry(address _stakeRegistry)\\n        public\\n        onlyOwner\\n        nonZeroAddress(_stakeRegistry)\\n    {\\n        stakeRegistry = IStakeRegistry(_stakeRegistry);\\n        emit SetStakeRegistry(_stakeRegistry);\\n    }\\n\\n    /// @dev Sets StakeFactory address\\n    /// @param _stakeFactory new StakeFactory address\\n    function setStakeFactory(address _stakeFactory)\\n        public\\n        onlyOwner\\n        nonZeroAddress(_stakeFactory)\\n    {\\n        stakeFactory = IStakeFactory(_stakeFactory);\\n    }\\n\\n    /// @dev Set factory address by StakeType\\n    /// @param _stakeType the stake type , 0:TON, 1: Simple, 2: UniswapV3LP\\n    /// @param _factory the factory address\\n    function setFactoryByStakeType(uint256 _stakeType, address _factory)\\n        external\\n        override\\n        onlyOwner\\n        nonZeroAddress(address(stakeFactory))\\n    {\\n        stakeFactory.setFactoryByStakeType(_stakeType, _factory);\\n    }\\n\\n    /// @dev Sets StakeVaultFactory address\\n    /// @param _stakeVaultFactory new StakeVaultFactory address\\n    function setStakeVaultFactory(address _stakeVaultFactory)\\n        external\\n        onlyOwner\\n        nonZeroAddress(_stakeVaultFactory)\\n    {\\n        stakeVaultFactory = IStakeVaultFactory(_stakeVaultFactory);\\n    }\\n\\n    /// Set initial variables\\n    /// @param _tos  TOS token address\\n    /// @param _stakeRegistry the registry address\\n    /// @param _stakeFactory the StakeFactory address\\n    /// @param _stakeVaultFactory the StakeVaultFactory address\\n    /// @param _ton  TON address in Tokamak\\n    /// @param _wton WTON address in Tokamak\\n    /// @param _depositManager DepositManager address in Tokamak\\n    /// @param _seigManager SeigManager address in Tokamak\\n    function setStore(\\n        address _tos,\\n        address _stakeRegistry,\\n        address _stakeFactory,\\n        address _stakeVaultFactory,\\n        address _ton,\\n        address _wton,\\n        address _depositManager,\\n        address _seigManager\\n    )\\n        external\\n        override\\n        onlyOwner\\n        nonZeroAddress(_stakeVaultFactory)\\n        nonZeroAddress(_ton)\\n        nonZeroAddress(_wton)\\n        nonZeroAddress(_depositManager)\\n    {\\n        setTOS(_tos);\\n        setStakeRegistry(_stakeRegistry);\\n        setStakeFactory(_stakeFactory);\\n        stakeVaultFactory = IStakeVaultFactory(_stakeVaultFactory);\\n\\n        ton = _ton;\\n        wton = _wton;\\n        depositManager = _depositManager;\\n        seigManager = _seigManager;\\n    }\\n\\n    /// @dev create vault\\n    /// @param _paytoken the token used for staking by user\\n    /// @param _cap  allocated reward amount\\n    /// @param _saleStartBlock  the start block that can stake by user\\n    /// @param _stakeStartBlock the start block that end staking by user and start that can claim reward by user\\n    /// @param _phase  phase of TOS platform\\n    /// @param _vaultName  vault's name's hash\\n    /// @param _stakeType  stakeContract's type, if 0, StakeTON, else if 1 , StakeSimple , else if 2, StakeDefi\\n    /// @param _defiAddr  extra defi address , default is zero address\\n    function createVault(\\n        address _paytoken,\\n        uint256 _cap,\\n        uint256 _saleStartBlock,\\n        uint256 _stakeStartBlock,\\n        uint256 _phase,\\n        bytes32 _vaultName,\\n        uint256 _stakeType,\\n        address _defiAddr\\n    ) external override onlyOwner nonZeroAddress(address(stakeVaultFactory)) {\\n        address vault =\\n            stakeVaultFactory.create(\\n                _phase,\\n                [tos, _paytoken, address(stakeFactory), _defiAddr],\\n                [_stakeType, _cap, _saleStartBlock, _stakeStartBlock],\\n                address(this)\\n            );\\n        require(vault != address(0), \\\"Stake1Logic: vault is zero\\\");\\n        stakeRegistry.addVault(vault, _phase, _vaultName);\\n\\n        emit CreatedVault(vault, _paytoken, _cap);\\n    }\\n\\n    /// @dev create stake contract in vault\\n    /// @param _phase the phase of TOS platform\\n    /// @param _vault  vault's address\\n    /// @param token  the reward token's address\\n    /// @param paytoken  the token used for staking by user\\n    /// @param periodBlock  the period that generate reward\\n    /// @param _name  the stake contract's name\\n    function createStakeContract(\\n        uint256 _phase,\\n        address _vault,\\n        address token,\\n        address paytoken,\\n        uint256 periodBlock,\\n        string memory _name\\n    ) external override onlyOwner {\\n        require(\\n            stakeRegistry.validVault(_phase, _vault),\\n            \\\"Stake1Logic: unvalidVault\\\"\\n        );\\n\\n        IStake1Vault vault = IStake1Vault(_vault);\\n\\n        (\\n            address[2] memory addrInfos,\\n            ,\\n            uint256 stakeType,\\n            uint256[3] memory iniInfo,\\n            ,\\n\\n        ) = vault.infos();\\n\\n        require(paytoken == addrInfos[0], \\\"Stake1Logic: differrent paytoken\\\");\\n        uint256 phase = _phase;\\n        address[4] memory _addr = [token, addrInfos[0], _vault, addrInfos[1]];\\n\\n        // solhint-disable-next-line max-line-length\\n        address _contract =\\n            stakeFactory.create(\\n                stakeType,\\n                _addr,\\n                address(stakeRegistry),\\n                [iniInfo[0], iniInfo[1], periodBlock]\\n            );\\n        require(_contract != address(0), \\\"Stake1Logic: deploy fail\\\");\\n\\n        IStake1Vault(_vault).addSubVaultOfStake(_name, _contract, periodBlock);\\n        stakeRegistry.addStakeContract(address(vault), _contract);\\n\\n        emit CreatedStakeContract(address(vault), _contract, phase);\\n    }\\n\\n    /// @dev create stake contract in vault\\n    /// @param _phase phase of TOS platform\\n    /// @param _vaultName vault's name's hash\\n    /// @param _vault vault's address\\n    function addVault(\\n        uint256 _phase,\\n        bytes32 _vaultName,\\n        address _vault\\n    ) external override onlyOwner {\\n        stakeRegistry.addVault(_vault, _phase, _vaultName);\\n    }\\n\\n    /// @dev end to staking by user\\n    /// @param _vault vault's address\\n    function closeSale(address _vault) external override {\\n        IStake1Vault(_vault).closeSale();\\n\\n        emit ClosedSale(_vault);\\n    }\\n\\n    /// @dev list of stakeContracts in vault\\n    /// @param _vault vault's address\\n    function stakeContractsOfVault(address _vault)\\n        external\\n        view\\n        override\\n        nonZeroAddress(_vault)\\n        returns (address[] memory)\\n    {\\n        return IStake1Vault(_vault).stakeAddressesAll();\\n    }\\n\\n    /// @dev list of vaults in _phase\\n    /// @param _phase the _phase number\\n    function vaultsOfPhase(uint256 _phase)\\n        external\\n        view\\n        override\\n        returns (address[] memory)\\n    {\\n        return stakeRegistry.phasesAll(_phase);\\n    }\\n\\n    /// @dev stake in tokamak's layer2\\n    /// @param _stakeContract the stakeContract's address\\n    /// @param _layer2 the layer2 address in Tokamak\\n    /// @param stakeAmount the amount that stake to layer2\\n    function tokamakStaking(\\n        address _stakeContract,\\n        address _layer2,\\n        uint256 stakeAmount\\n    ) external override {\\n        IStakeTONTokamak(_stakeContract).tokamakStaking(_layer2, stakeAmount);\\n    }\\n\\n    /// @dev Requests unstaking the amount WTON in tokamak's layer2\\n    /// @param _stakeContract the stakeContract's address\\n    /// @param _layer2 the layer2 address in Tokamak\\n    /// @param amount the amount of unstaking\\n    function tokamakRequestUnStaking(\\n        address _stakeContract,\\n        address _layer2,\\n        uint256 amount\\n    ) external override {\\n        IStakeTONTokamak(_stakeContract).tokamakRequestUnStaking(\\n            _layer2,\\n            amount\\n        );\\n    }\\n\\n    /// @dev Requests unstaking the amount of all  in tokamak's layer2\\n    /// @param _stakeContract the stakeContract's address\\n    /// @param _layer2 the layer2 address in Tokamak\\n    function tokamakRequestUnStakingAll(address _stakeContract, address _layer2)\\n        external\\n        override\\n    {\\n        IStakeTONTokamak(_stakeContract).tokamakRequestUnStakingAll(_layer2);\\n    }\\n\\n    /// @dev Processes unstaking the requested unstaking amount in tokamak's layer2\\n    /// @param _stakeContract the stakeContract's address\\n    /// @param _layer2 the layer2 address in Tokamak\\n    function tokamakProcessUnStaking(address _stakeContract, address _layer2)\\n        external\\n        override\\n    {\\n        IStakeTONTokamak(_stakeContract).tokamakProcessUnStaking(_layer2);\\n    }\\n\\n    /// @dev Swap TON to TOS using uniswap v3\\n    /// @dev this function used in StakeTON ( stakeType=0 )\\n    /// @param _stakeContract the stakeContract's address\\n    /// @param amountIn the input amount\\n    /// @param amountOutMinimum the minimun output amount\\n    /// @param deadline deadline\\n    /// @param sqrtPriceLimitX96 sqrtPriceLimitX96\\n    /// @param _type the function type, if 0, use exactInputSingle function, else if, use exactInput function\\n    function exchangeWTONtoTOS(\\n        address _stakeContract,\\n        uint256 amountIn,\\n        uint256 amountOutMinimum,\\n        uint256 deadline,\\n        uint160 sqrtPriceLimitX96,\\n        uint256 _type\\n    ) external override returns (uint256 amountOut) {\\n        return\\n            IStakeTONTokamak(_stakeContract).exchangeWTONtoTOS(\\n                amountIn,\\n                amountOutMinimum,\\n                deadline,\\n                sqrtPriceLimitX96,\\n                _type\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStake1Logic.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.6;\\n\\ninterface IStake1Logic {\\n    /// @dev event on create vault\\n    /// @param vault the vault address created\\n    /// @param paytoken the token used for staking by user\\n    /// @param cap  allocated reward amount\\n    event CreatedVault(address indexed vault, address paytoken, uint256 cap);\\n\\n    /// @dev event on create stake contract in vault\\n    /// @param vault the vault address\\n    /// @param stakeContract the stake contract address created\\n    /// @param phase the phase of TOS platform\\n    event CreatedStakeContract(\\n        address indexed vault,\\n        address indexed stakeContract,\\n        uint256 phase\\n    );\\n\\n    /// @dev event on sale-closed\\n    /// @param vault the vault address\\n    event ClosedSale(address indexed vault);\\n\\n    /// @dev event on setting stake registry\\n    /// @param stakeRegistry the stakeRegistry address\\n    event SetStakeRegistry(address stakeRegistry);\\n\\n    /// Set initial variables\\n    /// @param _tos  TOS token address\\n    /// @param _stakeRegistry the registry address\\n    /// @param _stakeFactory the StakeFactory address\\n    /// @param _stakeVaultFactory the StakeVaultFactory address\\n    /// @param _ton  TON address in Tokamak\\n    /// @param _wton WTON address in Tokamak\\n    /// @param _depositManager DepositManager address in Tokamak\\n    /// @param _seigManager SeigManager address in Tokamak\\n    function setStore(\\n        address _tos,\\n        address _stakeRegistry,\\n        address _stakeFactory,\\n        address _stakeVaultFactory,\\n        address _ton,\\n        address _wton,\\n        address _depositManager,\\n        address _seigManager\\n    ) external;\\n\\n    /// @dev Set factory address by StakeType\\n\\n    /// @param _stakeType the stake type , 0:TON, 1: Simple, 2: UniswapV3LP\\n    /// @param _factory the factory address\\n    function setFactoryByStakeType(uint256 _stakeType, address _factory)\\n        external;\\n\\n    /// @dev create vault\\n    /// @param _paytoken the token used for staking by user\\n    /// @param _cap  allocated reward amount\\n    /// @param _saleStartBlock  the start block that can stake by user\\n    /// @param _stakeStartBlock the start block that end staking by user and start that can claim reward by user\\n    /// @param _phase  phase of TOS platform\\n    /// @param _vaultName  vault's name's hash\\n    /// @param _stakeType  stakeContract's type, if 0, StakeTON, else if 1 , StakeSimple , else if 2, StakeDefi\\n    /// @param _defiAddr  extra defi address , default is zero address\\n    function createVault(\\n        address _paytoken,\\n        uint256 _cap,\\n        uint256 _saleStartBlock,\\n        uint256 _stakeStartBlock,\\n        uint256 _phase,\\n        bytes32 _vaultName,\\n        uint256 _stakeType,\\n        address _defiAddr\\n    ) external;\\n\\n    /// @dev create stake contract in vault\\n    /// @param _phase the phase of TOS platform\\n    /// @param _vault  vault's address\\n    /// @param token  the reward token's address\\n    /// @param paytoken  the token used for staking by user\\n    /// @param periodBlock  the period that generate reward\\n    /// @param _name  the stake contract's name\\n    function createStakeContract(\\n        uint256 _phase,\\n        address _vault,\\n        address token,\\n        address paytoken,\\n        uint256 periodBlock,\\n        string memory _name\\n    ) external;\\n\\n    /// @dev create stake contract in vault\\n    /// @param _phase phase of TOS platform\\n    /// @param _vaultName vault's name's hash\\n    /// @param _vault vault's address\\n    function addVault(\\n        uint256 _phase,\\n        bytes32 _vaultName,\\n        address _vault\\n    ) external;\\n\\n    /// @dev end to staking by user\\n    /// @param _vault vault's address\\n    function closeSale(address _vault) external;\\n\\n    /// @dev list of stakeContracts in vault\\n    /// @param _vault vault's address\\n    function stakeContractsOfVault(address _vault)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    /// @dev list of vaults in _phase\\n    /// @param _phase the phase number\\n    function vaultsOfPhase(uint256 _phase)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    /// @dev stake in tokamak's layer2\\n    /// @param _stakeContract the stakeContract's address\\n    /// @param _layer2 the layer2 address in Tokamak\\n    /// @param stakeAmount the amount that stake to layer2\\n    function tokamakStaking(\\n        address _stakeContract,\\n        address _layer2,\\n        uint256 stakeAmount\\n    ) external;\\n\\n    /// @dev Requests unstaking in tokamak's layer2\\n    /// @param _stakeContract the stakeContract's address\\n    /// @param _layer2 the layer2 address in Tokamak\\n    /// @param amount the amount of unstaking\\n    function tokamakRequestUnStaking(\\n        address _stakeContract,\\n        address _layer2,\\n        uint256 amount\\n    ) external;\\n\\n    /// @dev Requests unstaking the amount of all  in tokamak's layer2\\n    /// @param _stakeContract the stakeContract's address\\n    /// @param _layer2 the layer2 address in Tokamak\\n    function tokamakRequestUnStakingAll(address _stakeContract, address _layer2)\\n        external;\\n\\n    /// @dev Processes unstaking the requested unstaking amount in tokamak's layer2\\n    /// @param _stakeContract the stakeContract's address\\n    /// @param _layer2 the layer2 address in Tokamak\\n    function tokamakProcessUnStaking(address _stakeContract, address _layer2)\\n        external;\\n\\n    /// @dev Swap TON to TOS using uniswap v3\\n    /// @dev this function used in StakeTON ( stakeType=0 )\\n    /// @param _stakeContract the stakeContract's address\\n    /// @param amountIn the input amount\\n    /// @param amountOutMinimum the minimun output amount\\n    /// @param deadline deadline\\n    /// @param sqrtPriceLimitX96 sqrtPriceLimitX96\\n    /// @param _type the function type, if 0, use exactInputSingle function, else if, use exactInput function\\n    function exchangeWTONtoTOS(\\n        address _stakeContract,\\n        uint256 amountIn,\\n        uint256 amountOutMinimum,\\n        uint256 deadline,\\n        uint160 sqrtPriceLimitX96,\\n        uint256 _type\\n    ) external returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface IProxy {\\n    function upgradeTo(address impl) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakeFactory.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.6;\\n\\ninterface IStakeFactory {\\n    /// @dev Create a stake contract that calls the desired stake factory according to stakeType\\n    /// @param stakeType if 0, stakeTONFactory, else if 1 , stakeSimpleFactory , else if 2, stakeUniswapV3Factory\\n    /// @param _addr array of [token, paytoken, vault, _defiAddr]\\n    /// @param registry  registry address\\n    /// @param _intdata array of [saleStartBlock, startBlock, periodBlocks]\\n    /// @return contract address\\n    function create(\\n        uint256 stakeType,\\n        address[4] calldata _addr,\\n        address registry,\\n        uint256[3] calldata _intdata\\n    ) external returns (address);\\n\\n    /// @dev Set factory address by StakeType\\n    /// @param _stakeType the stake type , 0:TON, 1: Simple, 2: UniswapV3LP\\n    /// @param _factory the factory address\\n    function setFactoryByStakeType(uint256 _stakeType, address _factory)\\n        external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakeRegistry.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.6;\\n\\ninterface IStakeRegistry {\\n    /// @dev Set addresses for Tokamak integration\\n    /// @param _ton TON address\\n    /// @param _wton WTON address\\n    /// @param _depositManager DepositManager address\\n    /// @param _seigManager SeigManager address\\n    /// @param _swapProxy Proxy address that can swap TON and WTON\\n    function setTokamak(\\n        address _ton,\\n        address _wton,\\n        address _depositManager,\\n        address _seigManager,\\n        address _swapProxy\\n    ) external;\\n\\n    /// @dev Add information related to Defi\\n    /// @param _name name . ex) UNISWAP_V3\\n    /// @param _router entry point of defi\\n    /// @param _ex1  additional variable . ex) positionManagerAddress in Uniswap V3\\n    /// @param _ex2  additional variable . ex) WETH Address in Uniswap V3\\n    /// @param _fee  fee\\n    /// @param _routerV2 In case of uniswap, router address of uniswapV2\\n    function addDefiInfo(\\n        string calldata _name,\\n        address _router,\\n        address _ex1,\\n        address _ex2,\\n        uint256 _fee,\\n        address _routerV2\\n    ) external;\\n\\n    /// @dev Add Vault\\n    /// @dev It is excuted by proxy\\n    /// @param _vault vault address\\n    /// @param _phase phase ex) 1,2,3\\n    /// @param _vaultName  hash of vault's name\\n    function addVault(\\n        address _vault,\\n        uint256 _phase,\\n        bytes32 _vaultName\\n    ) external;\\n\\n    /// @dev Add StakeContract in vault\\n    /// @dev It is excuted by proxy\\n    /// @param _vault vault address\\n    /// @param _stakeContract  StakeContract address\\n    function addStakeContract(address _vault, address _stakeContract) external;\\n\\n    /// @dev Get addresses for Tokamak interface\\n    /// @return (ton, wton, depositManager, seigManager)\\n    function getTokamak()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            address\\n        );\\n\\n    /// @dev Get indos for UNISWAP_V3 interface\\n    /// @return (uniswapRouter, npm, wethAddress, fee)\\n    function getUniswap()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            uint256,\\n            address\\n        );\\n\\n    /// @dev Checks if a vault is withing the given phase\\n    /// @param _phase the phase number\\n    /// @param _vault the vault's address\\n    /// @return valid true or false\\n    function validVault(uint256 _phase, address _vault)\\n        external\\n        view\\n        returns (bool valid);\\n\\n    function phasesAll(uint256 _index) external view returns (address[] memory);\\n\\n    function stakeContractsOfVaultAll(address _vault)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    /// @dev view defi info\\n    /// @param _name  hash name : keccak256(abi.encodePacked(_name));\\n    /// @return name  _name ex) UNISWAP_V3, UNISWAP_V3_token0_token1\\n    /// @return router entry point of defi\\n    /// @return ext1  additional variable . ex) positionManagerAddress in Uniswap V3\\n    /// @return ext2  additional variable . ex) WETH Address in Uniswap V3\\n    /// @return fee  fee\\n    /// @return routerV2 In case of uniswap, router address of uniswapV2\\n\\n    function defiInfo(bytes32 _name)\\n        external\\n        returns (\\n            string calldata name,\\n            address router,\\n            address ext1,\\n            address ext2,\\n            uint256 fee,\\n            address routerV2\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStake1Vault.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\nimport \\\"../libraries/LibTokenStake1.sol\\\";\\n\\ninterface IStake1Vault {\\n    /// @dev Sets TOS address\\n    /// @param _tos  TOS address\\n    function setTOS(address _tos) external;\\n\\n    /// @dev Change cap of the vault\\n    /// @param _cap  allocated reward amount\\n    function changeCap(uint256 _cap) external;\\n\\n    /// @dev Set Defi Address\\n    /// @param _defiAddr DeFi related address\\n    function setDefiAddr(address _defiAddr) external;\\n\\n    /// @dev If the vault has more money than the reward to give, the owner can withdraw the remaining amount.\\n    /// @param _amount the amount of withdrawal\\n    function withdrawReward(uint256 _amount) external;\\n\\n    /// @dev  Add stake contract\\n    /// @param _name stakeContract's name\\n    /// @param stakeContract stakeContract's address\\n    /// @param periodBlocks the period that give rewards of stakeContract\\n    function addSubVaultOfStake(\\n        string memory _name,\\n        address stakeContract,\\n        uint256 periodBlocks\\n    ) external;\\n\\n    /// @dev  Close the sale that can stake by user\\n    function closeSale() external;\\n\\n    /// @dev claim function.\\n    /// @dev sender is a staking contract.\\n    /// @dev A function that pays the amount(_amount) to _to by the staking contract.\\n    /// @dev A function that _to claim the amount(_amount) from the staking contract and gets the TOS in the vault.\\n    /// @param _to a user that received reward\\n    /// @param _amount the receiving amount\\n    /// @return true\\n    function claim(address _to, uint256 _amount) external returns (bool);\\n\\n    /// @dev Whether user(to) can receive a reward amount(_amount)\\n    /// @param _to  a staking contract.\\n    /// @param _amount the total reward amount of stakeContract\\n    /// @return true\\n    function canClaim(address _to, uint256 _amount)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev Give the infomation of this vault\\n    /// @return paytoken, cap, saleStartBlock, stakeStartBlock, stakeEndBlock, blockTotalReward, saleClosed\\n    function infos()\\n        external\\n        view\\n        returns (\\n            address[2] memory,\\n            uint256,\\n            uint256,\\n            uint256[3] memory,\\n            uint256,\\n            bool\\n        );\\n\\n    /// @dev Returns Give the TOS balance stored in the vault\\n    /// @return the balance of TOS in this vault.\\n    function balanceTOSAvailableAmount() external view returns (uint256);\\n\\n    /// @dev Give Total reward amount of stakeContract(_account)\\n    /// @return Total reward amount of stakeContract(_account)\\n    function totalRewardAmount(address _account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @dev Give all stakeContracts's addresses in this vault\\n    /// @return all stakeContracts's addresses\\n    function stakeAddressesAll() external view returns (address[] memory);\\n\\n    /// @dev Give the ordered end blocks of stakeContracts in this vault\\n    /// @return the ordered end blocks\\n    function orderedEndBlocksAll() external view returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakeTONTokamak.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.6;\\n\\ninterface IStakeTONTokamak {\\n    /// @dev  staking the staked TON in layer2 in tokamak\\n    /// @param _layer2 the layer2 address in tokamak\\n    /// @param stakeAmount the amount that stake to layer2\\n    function tokamakStaking(address _layer2, uint256 stakeAmount) external;\\n\\n    /// @dev  request unstaking the wtonAmount in layer2 in tokamak\\n    /// @param _layer2 the layer2 address in tokamak\\n    /// @param wtonAmount the amount requested to unstaking\\n    function tokamakRequestUnStaking(address _layer2, uint256 wtonAmount)\\n        external;\\n\\n    /// @dev Requests unstaking the amount of all  in tokamak's layer2\\n    /// @param _layer2 the layer2 address in Tokamak\\n    function tokamakRequestUnStakingAll(address _layer2) external;\\n\\n    /// @dev process unstaking in layer2 in tokamak\\n    /// @param _layer2 the layer2 address in tokamak\\n    function tokamakProcessUnStaking(address _layer2) external;\\n\\n    /// @dev exchange holded WTON to TOS using uniswap\\n    /// @param _amountIn the input amount\\n    /// @param _amountOutMinimum the minimun output amount\\n    /// @param _deadline deadline\\n    /// @param sqrtPriceLimitX96 sqrtPriceLimitX96\\n    /// @param _kind the function type, if 0, use exactInputSingle function, else if, use exactInput function\\n    /// @return amountOut the amount of exchanged out token\\n    function exchangeWTONtoTOS(\\n        uint256 _amountIn,\\n        uint256 _amountOutMinimum,\\n        uint256 _deadline,\\n        uint160 sqrtPriceLimitX96,\\n        uint256 _kind\\n    ) external returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakeUniswapV3.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.6;\\n\\ninterface IStakeUniswapV3 {\\n    /// @dev Stake amount\\n    /// @param tokenId  uniswapV3 LP Token\\n    /// @param deadline  the deadline that valid the owner's signature\\n    /// @param v the owner's signature - v\\n    /// @param r the owner's signature - r\\n    /// @param s the owner's signature - s\\n    function stake(\\n        uint256 tokenId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function getClaimLiquidity(uint256 tokenId)\\n        external\\n        returns (\\n            uint256 realReward,\\n            uint256 unableClaimReward,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint256 balanceCoinageOfUser,\\n            uint256 _coinageReward\\n        );\\n\\n    /// @dev withdraw\\n    function withdraw(uint256 tokenId) external;\\n\\n    /// @dev Claim for reward\\n    function claim(uint256 tokenId) external;\\n\\n    // function setPool(\\n    //     address token0,\\n    //     address token1,\\n    //     string calldata defiInfoName\\n    // ) external;\\n\\n    /// @dev\\n    function getUserStakedTokenIds(address user)\\n        external\\n        view\\n        returns (uint256[] memory ids);\\n\\n    /// @dev tokenId's deposited information\\n    /// @param tokenId   tokenId\\n    /// @return poolAddress   poolAddress\\n    /// @return tick tick,\\n    /// @return liquidity liquidity,\\n    /// @return args liquidity,  startTime, endTime, claimedTime, startBlock, claimedBlock, claimedAmount\\n    /// @return secondsPL secondsPerLiquidityInsideInitialX128, secondsPerLiquidityInsideX128Las\\n    function getDepositToken(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            address poolAddress,\\n            int24[2] memory tick,\\n            uint128 liquidity,\\n            uint256[6] memory args,\\n            uint160[2] memory secondsPL\\n        );\\n\\n    function getUserStakedTotal(address user)\\n        external\\n        view\\n        returns (\\n            uint256 totalDepositAmount,\\n            uint256 totalClaimedAmount,\\n            uint256 totalUnableClaimAmount\\n        );\\n\\n    /// @dev Give the infomation of this stakeContracts\\n    /// @return return1  [token, vault, stakeRegistry, coinage]\\n    /// @return return2  [poolToken0, poolToken1, nonfungiblePositionManager, uniswapV3FactoryAddress]\\n    /// @return return3  [totalStakers, totalStakedAmount, rewardClaimedTotal,rewardNonLiquidityClaimTotal]\\n    function infos()\\n        external\\n        view\\n        returns (\\n            address[4] memory,\\n            address[4] memory,\\n            uint256[4] memory\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/common/AccessibleCommon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./AccessRoleCommon.sol\\\";\\n\\ncontract AccessibleCommon is AccessRoleCommon, AccessControl {\\n    modifier onlyOwner() {\\n        require(isAdmin(msg.sender), \\\"Accessible: Caller is not an admin\\\");\\n        _;\\n    }\\n\\n    /// @dev add admin\\n    /// @param account  address to add\\n    function addAdmin(address account) public virtual onlyOwner {\\n        grantRole(ADMIN_ROLE, account);\\n    }\\n\\n    /// @dev remove admin\\n    /// @param account  address to remove\\n    function removeAdmin(address account) public virtual onlyOwner {\\n        renounceRole(ADMIN_ROLE, account);\\n    }\\n\\n    /// @dev transfer admin\\n    /// @param newAdmin new admin address\\n    function transferAdmin(address newAdmin) external virtual onlyOwner {\\n        require(newAdmin != address(0), \\\"Accessible: zero address\\\");\\n        require(msg.sender != newAdmin, \\\"Accessible: same admin\\\");\\n\\n        grantRole(ADMIN_ROLE, newAdmin);\\n        renounceRole(ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /// @dev whether admin\\n    /// @param account  address to check\\n    function isAdmin(address account) public view virtual returns (bool) {\\n        return hasRole(ADMIN_ROLE, account);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/stake/StakeProxyStorage.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.6;\\n\\n//import \\\"../interfaces/IStakeProxyStorage.sol\\\";\\nimport {IStakeFactory} from \\\"../interfaces/IStakeFactory.sol\\\";\\nimport {IStakeRegistry} from \\\"../interfaces/IStakeRegistry.sol\\\";\\nimport {IStakeVaultFactory} from \\\"../interfaces/IStakeVaultFactory.sol\\\";\\n\\n/// @title The storage of StakeProxy\\ncontract StakeProxyStorage {\\n    /// @dev stakeRegistry\\n    IStakeRegistry public stakeRegistry;\\n\\n    /// @dev stakeFactory\\n    IStakeFactory public stakeFactory;\\n\\n    /// @dev stakeVaultFactory\\n    IStakeVaultFactory public stakeVaultFactory;\\n\\n    /// @dev TOS address\\n    address public tos;\\n\\n    /// @dev TON address in Tokamak\\n    address public ton;\\n\\n    /// @dev WTON address in Tokamak\\n    address public wton;\\n\\n    /// @dev Depositmanager address in Tokamak\\n    address public depositManager;\\n\\n    /// @dev SeigManager address in Tokamak\\n    address public seigManager;\\n\\n    /// @dev flag for pause proxy\\n    bool public pauseProxy;\\n\\n    /// @dev implementation of proxy index\\n    mapping(uint256 => address) public proxyImplementation;\\n\\n    mapping(address => bool) public aliveImplementation;\\n\\n    mapping(bytes4 => address) public selectorImplementation;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibTokenStake1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.6;\\n\\nlibrary LibTokenStake1 {\\n    enum DefiStatus {\\n        NONE,\\n        APPROVE,\\n        DEPOSITED,\\n        REQUESTWITHDRAW,\\n        REQUESTWITHDRAWALL,\\n        WITHDRAW,\\n        END\\n    }\\n    struct DefiInfo {\\n        string name;\\n        address router;\\n        address ext1;\\n        address ext2;\\n        uint256 fee;\\n        address routerV2;\\n    }\\n    struct StakeInfo {\\n        string name;\\n        uint256 startBlock;\\n        uint256 endBlock;\\n        uint256 balance;\\n        uint256 totalRewardAmount;\\n        uint256 claimRewardAmount;\\n    }\\n\\n    struct StakedAmount {\\n        uint256 amount;\\n        uint256 claimedBlock;\\n        uint256 claimedAmount;\\n        uint256 releasedBlock;\\n        uint256 releasedAmount;\\n        uint256 releasedTOSAmount;\\n        bool released;\\n    }\\n\\n    struct StakedAmountForSTOS {\\n        uint256 amount;\\n        uint256 startBlock;\\n        uint256 periodBlock;\\n        uint256 rewardPerBlock;\\n        uint256 claimedBlock;\\n        uint256 claimedAmount;\\n        uint256 releasedBlock;\\n        uint256 releasedAmount;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/AccessRoleCommon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ncontract AccessRoleCommon {\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN\\\");\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER\\\");\\n    bytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER\\\");\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakeVaultFactory.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.6;\\n\\ninterface IStakeVaultFactory {\\n    /// @dev Create a vault that hold reward, _cap is allocated reward amount.\\n    /// @param _phase phase number\\n    /// @param _addr the array of [token, paytoken, vault, defiAddr]\\n    /// @param _intInfo array of [_stakeType, _cap, _saleStartBlock, _stakeStartBlock]\\n    /// @param owner the owner adderess\\n    /// @return a vault address\\n    function create(\\n        uint256 _phase,\\n        address[4] calldata _addr,\\n        uint256[4] calldata _intInfo,\\n        address owner\\n    ) external returns (address);\\n\\n    /// @dev Create a vault that hold reward, _cap is allocated reward amount.\\n    /// @param _phase phase number\\n    /// @param _addr the array of [tos, _stakefactory]\\n    /// @param _intInfo array of [_stakeType, _cap, _rewardPerBlock ]\\n    /// @param _name the name of stake contract\\n    /// @param owner the owner adderess\\n    /// @return a vault address\\n    function create2(\\n        uint256 _phase,\\n        address[2] calldata _addr,\\n        uint256[3] calldata _intInfo,\\n        string memory _name,\\n        address owner\\n    ) external returns (address);\\n\\n    /// @dev Set stakeVaultLogic address by _phase\\n    /// @param _phase the stake type\\n    /// @param _logic the vault logic address\\n    function setVaultLogicByPhase(uint256 _phase, address _logic) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"ClosedSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phase\",\"type\":\"uint256\"}],\"name\":\"CreatedStakeContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paytoken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"CreatedVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakeRegistry\",\"type\":\"address\"}],\"name\":\"SetStakeRegistry\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_phase\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_vaultName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"addVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aliveImplementation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"closeSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_phase\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paytoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"periodBlock\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"createStakeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paytoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_saleStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_phase\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_vaultName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_stakeType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_defiAddr\",\"type\":\"address\"}],\"name\":\"createVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"exchangeWTONtoTOS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seigManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"selectorImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"setFactoryByStakeType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeFactory\",\"type\":\"address\"}],\"name\":\"setStakeFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeRegistry\",\"type\":\"address\"}],\"name\":\"setStakeRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeVaultFactory\",\"type\":\"address\"}],\"name\":\"setStakeVaultFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tos\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakeRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakeFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakeVaultFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ton\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wton\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_seigManager\",\"type\":\"address\"}],\"name\":\"setStore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tos\",\"type\":\"address\"}],\"name\":\"setTOS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"stakeContractsOfVault\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeFactory\",\"outputs\":[{\"internalType\":\"contract IStakeFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeRegistry\",\"outputs\":[{\"internalType\":\"contract IStakeRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeVaultFactory\",\"outputs\":[{\"internalType\":\"contract IStakeVaultFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_layer2\",\"type\":\"address\"}],\"name\":\"tokamakProcessUnStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_layer2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokamakRequestUnStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_layer2\",\"type\":\"address\"}],\"name\":\"tokamakRequestUnStakingAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_layer2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"tokamakStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ton\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"upgradeStakeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_phase\",\"type\":\"uint256\"}],\"name\":\"vaultsOfPhase\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wton\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Stake1Logic","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"100","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}