{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.6;\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20MinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: contracts/oracle/LatestPriceOracleInterface.sol\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the price oracle.\r\n */\r\ninterface LatestPriceOracleInterface {\r\n    /**\r\n     * @dev Returns `true`if oracle is working.\r\n     */\r\n    function isWorking() external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the last updated price. Decimals is 8.\r\n     **/\r\n    function latestPrice() external returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the timestamp of the last updated price.\r\n     */\r\n    function latestTimestamp() external returns (uint256);\r\n}\r\n\r\n// File: contracts/oracle/PriceOracleInterface.sol\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the price oracle.\r\n */\r\ninterface PriceOracleInterface is LatestPriceOracleInterface {\r\n    /**\r\n     * @dev Returns the latest id. The id start from 1 and increments by 1.\r\n     */\r\n    function latestId() external returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the historical price specified by `id`. Decimals is 8.\r\n     */\r\n    function getPrice(uint256 id) external returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the timestamp of historical price specified by `id`.\r\n     */\r\n    function getTimestamp(uint256 id) external returns (uint256);\r\n}\r\n\r\n// File: contracts/oracle/OracleInterface.sol\r\n\r\n\r\n\r\n\r\n// Oracle referenced by OracleProxy must implement this interface.\r\ninterface OracleInterface is PriceOracleInterface {\r\n    function getVolatility() external returns (uint256);\r\n\r\n    function lastCalculatedVolatility() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/oracle/VolatilityOracleInterface.sol\r\n\r\n\r\n\r\ninterface VolatilityOracleInterface {\r\n    function getVolatility(uint64 untilMaturity) external view returns (uint64 volatilityE8);\r\n}\r\n\r\n// File: contracts/util/TransferETHInterface.sol\r\n\r\n\r\n\r\n\r\ninterface TransferETHInterface {\r\n    receive() external payable;\r\n\r\n    event LogTransferETH(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/bondToken/BondTokenInterface.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface BondTokenInterface is IERC20 {\r\n    event LogExpire(uint128 rateNumerator, uint128 rateDenominator, bool firstTime);\r\n\r\n    function mint(address account, uint256 amount) external returns (bool success);\r\n\r\n    function expire(uint128 rateNumerator, uint128 rateDenominator)\r\n        external\r\n        returns (bool firstTime);\r\n\r\n    function simpleBurn(address account, uint256 amount) external returns (bool success);\r\n\r\n    function burn(uint256 amount) external returns (bool success);\r\n\r\n    function burnAll() external returns (uint256 amount);\r\n\r\n    function getRate() external view returns (uint128 rateNumerator, uint128 rateDenominator);\r\n}\r\n\r\n// File: contracts/bondMaker/BondMakerInterface.sol\r\n\r\n\r\n\r\n\r\n\r\ninterface BondMakerInterface {\r\n    event LogNewBond(\r\n        bytes32 indexed bondID,\r\n        address indexed bondTokenAddress,\r\n        uint256 indexed maturity,\r\n        bytes32 fnMapID\r\n    );\r\n\r\n    event LogNewBondGroup(\r\n        uint256 indexed bondGroupID,\r\n        uint256 indexed maturity,\r\n        uint64 indexed sbtStrikePrice,\r\n        bytes32[] bondIDs\r\n    );\r\n\r\n    event LogIssueNewBonds(uint256 indexed bondGroupID, address indexed issuer, uint256 amount);\r\n\r\n    event LogReverseBondGroupToCollateral(\r\n        uint256 indexed bondGroupID,\r\n        address indexed owner,\r\n        uint256 amount\r\n    );\r\n\r\n    event LogExchangeEquivalentBonds(\r\n        address indexed owner,\r\n        uint256 indexed inputBondGroupID,\r\n        uint256 indexed outputBondGroupID,\r\n        uint256 amount\r\n    );\r\n\r\n    event LogLiquidateBond(bytes32 indexed bondID, uint128 rateNumerator, uint128 rateDenominator);\r\n\r\n    function registerNewBond(uint256 maturity, bytes calldata fnMap)\r\n        external\r\n        returns (\r\n            bytes32 bondID,\r\n            address bondTokenAddress,\r\n            bytes32 fnMapID\r\n        );\r\n\r\n    function registerNewBondGroup(bytes32[] calldata bondIDList, uint256 maturity)\r\n        external\r\n        returns (uint256 bondGroupID);\r\n\r\n    function reverseBondGroupToCollateral(uint256 bondGroupID, uint256 amount)\r\n        external\r\n        returns (bool success);\r\n\r\n    function exchangeEquivalentBonds(\r\n        uint256 inputBondGroupID,\r\n        uint256 outputBondGroupID,\r\n        uint256 amount,\r\n        bytes32[] calldata exceptionBonds\r\n    ) external returns (bool);\r\n\r\n    function liquidateBond(uint256 bondGroupID, uint256 oracleHintID)\r\n        external\r\n        returns (uint256 totalPayment);\r\n\r\n    function collateralAddress() external view returns (address);\r\n\r\n    function oracleAddress() external view returns (PriceOracleInterface);\r\n\r\n    function feeTaker() external view returns (address);\r\n\r\n    function decimalsOfBond() external view returns (uint8);\r\n\r\n    function decimalsOfOraclePrice() external view returns (uint8);\r\n\r\n    function maturityScale() external view returns (uint256);\r\n\r\n    function nextBondGroupID() external view returns (uint256);\r\n\r\n    function getBond(bytes32 bondID)\r\n        external\r\n        view\r\n        returns (\r\n            address bondAddress,\r\n            uint256 maturity,\r\n            uint64 solidStrikePrice,\r\n            bytes32 fnMapID\r\n        );\r\n\r\n    function getFnMap(bytes32 fnMapID) external view returns (bytes memory fnMap);\r\n\r\n    function getBondGroup(uint256 bondGroupID)\r\n        external\r\n        view\r\n        returns (bytes32[] memory bondIDs, uint256 maturity);\r\n\r\n    function generateFnMapID(bytes calldata fnMap) external view returns (bytes32 fnMapID);\r\n\r\n    function generateBondID(uint256 maturity, bytes calldata fnMap)\r\n        external\r\n        view\r\n        returns (bytes32 bondID);\r\n}\r\n\r\n// File: contracts/bondPricer/Enums.sol\r\n\r\n\r\n\r\n/**\r\n    Pure SBT:\r\n        ___________\r\n       /\r\n      /\r\n     /\r\n    /\r\n\r\n    LBT Shape:\r\n              /\r\n             /\r\n            /\r\n           /\r\n    ______/\r\n\r\n    SBT Shape:\r\n              ______\r\n             /\r\n            /\r\n    _______/\r\n\r\n    Triangle:\r\n              /\\\r\n             /  \\\r\n            /    \\\r\n    _______/      \\________\r\n */\r\nenum BondType {NONE, PURE_SBT, SBT_SHAPE, LBT_SHAPE, TRIANGLE}\r\n\r\n// File: contracts/bondPricer/BondPricerInterface.sol\r\n\r\n\r\n\r\n\r\ninterface BondPricerInterface {\r\n    /**\r\n     * @notice Calculate bond price and leverage by black-scholes formula.\r\n     * @param bondType type of target bond.\r\n     * @param points coodinates of polyline which is needed for price calculation\r\n     * @param spotPrice is a oracle price.\r\n     * @param volatilityE8 is a oracle volatility.\r\n     * @param untilMaturity Remaining period of target bond in second\r\n     **/\r\n    function calcPriceAndLeverage(\r\n        BondType bondType,\r\n        uint256[] calldata points,\r\n        int256 spotPrice,\r\n        int256 volatilityE8,\r\n        int256 untilMaturity\r\n    ) external view returns (uint256 price, uint256 leverageE8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SignedSafeMath.sol\r\n\r\n\r\n\r\n/**\r\n * @title SignedSafeMath\r\n * @dev Signed math operations with safety checks that revert on error.\r\n */\r\nlibrary SignedSafeMath {\r\n    int256 constant private _INT256_MIN = -2**255;\r\n\r\n    /**\r\n     * @dev Multiplies two signed integers, reverts on overflow.\r\n     */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        require(!(a == -1 && b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\r\n\r\n        int256 c = a * b;\r\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != 0, \"SignedSafeMath: division by zero\");\r\n        require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\r\n\r\n        int256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two signed integers, reverts on overflow.\r\n     */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two signed integers, reverts on overflow.\r\n     */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/SafeCast.sol\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's uintXX casting operators with added overflow\r\n * checks.\r\n *\r\n * Downcasting from uint256 in Solidity does not revert on overflow. This can\r\n * easily result in undesired exploitation or bugs, since developers usually\r\n * assume that overflows raise errors. `SafeCast` restores this intuition by\r\n * reverting the transaction when such an operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n *\r\n * Can be combined with {SafeMath} to extend it to smaller types, by performing\r\n * all math on `uint256` and then downcasting.\r\n */\r\nlibrary SafeCast {\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint128 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint128).\r\n     *\r\n     * Counterpart to Solidity's `uint128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     */\r\n    function toUint128(uint256 value) internal pure returns (uint128) {\r\n        require(value < 2**128, \"SafeCast: value doesn\\'t fit in 128 bits\");\r\n        return uint128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint64 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint64).\r\n     *\r\n     * Counterpart to Solidity's `uint64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     */\r\n    function toUint64(uint256 value) internal pure returns (uint64) {\r\n        require(value < 2**64, \"SafeCast: value doesn\\'t fit in 64 bits\");\r\n        return uint64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint32 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint32).\r\n     *\r\n     * Counterpart to Solidity's `uint32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     */\r\n    function toUint32(uint256 value) internal pure returns (uint32) {\r\n        require(value < 2**32, \"SafeCast: value doesn\\'t fit in 32 bits\");\r\n        return uint32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint16 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint16).\r\n     *\r\n     * Counterpart to Solidity's `uint16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     */\r\n    function toUint16(uint256 value) internal pure returns (uint16) {\r\n        require(value < 2**16, \"SafeCast: value doesn\\'t fit in 16 bits\");\r\n        return uint16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint8 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint8).\r\n     *\r\n     * Counterpart to Solidity's `uint8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     */\r\n    function toUint8(uint256 value) internal pure returns (uint8) {\r\n        require(value < 2**8, \"SafeCast: value doesn\\'t fit in 8 bits\");\r\n        return uint8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a signed int256 into an unsigned uint256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be greater than or equal to 0.\r\n     */\r\n    function toUint256(int256 value) internal pure returns (uint256) {\r\n        require(value >= 0, \"SafeCast: value must be positive\");\r\n        return uint256(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an unsigned uint256 into a signed int256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be less than or equal to maxInt256.\r\n     */\r\n    function toInt256(uint256 value) internal pure returns (int256) {\r\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\r\n        return int256(value);\r\n    }\r\n}\r\n\r\n// File: contracts/math/UseSafeMath.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice ((a - 1) / b) + 1 = (a + b -1) / b\r\n * for example a.add(10**18 -1).div(10**18) = a.sub(1).div(10**18) + 1\r\n */\r\n\r\nlibrary SafeMathDivRoundUp {\r\n    using SafeMath for uint256;\r\n\r\n    function divRoundUp(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        require(b > 0, errorMessage);\r\n        return ((a - 1) / b) + 1;\r\n    }\r\n\r\n    function divRoundUp(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return divRoundUp(a, b, \"SafeMathDivRoundUp: modulo by zero\");\r\n    }\r\n}\r\n\r\n/**\r\n * @title UseSafeMath\r\n * @dev One can use SafeMath for not only uint256 but also uin64 or uint16,\r\n * and also can use SafeCast for uint256.\r\n * For example:\r\n *   uint64 a = 1;\r\n *   uint64 b = 2;\r\n *   a = a.add(b).toUint64() // `a` become 3 as uint64\r\n * In addition, one can use SignedSafeMath and SafeCast.toUint256(int256) for int256.\r\n * In the case of the operation to the uint64 value, one needs to cast the value into int256 in\r\n * advance to use `sub` as SignedSafeMath.sub not SafeMath.sub.\r\n * For example:\r\n *   int256 a = 1;\r\n *   uint64 b = 2;\r\n *   int256 c = 3;\r\n *   a = a.add(int256(b).sub(c)); // `a` becomes 0 as int256\r\n *   b = a.toUint256().toUint64(); // `b` becomes 0 as uint64\r\n */\r\nabstract contract UseSafeMath {\r\n    using SafeMath for uint256;\r\n    using SafeMathDivRoundUp for uint256;\r\n    using SafeMath for uint64;\r\n    using SafeMathDivRoundUp for uint64;\r\n    using SafeMath for uint16;\r\n    using SignedSafeMath for int256;\r\n    using SafeCast for uint256;\r\n    using SafeCast for int256;\r\n}\r\n\r\n// File: contracts/util/Polyline.sol\r\n\r\n\r\n\r\n\r\ncontract Polyline is UseSafeMath {\r\n    struct Point {\r\n        uint64 x; // Value of the x-axis of the x-y plane\r\n        uint64 y; // Value of the y-axis of the x-y plane\r\n    }\r\n\r\n    struct LineSegment {\r\n        Point left; // The left end of the line definition range\r\n        Point right; // The right end of the line definition range\r\n    }\r\n\r\n    /**\r\n     * @notice Return the value of y corresponding to x on the given line. line in the form of\r\n     * a rational number (numerator / denominator).\r\n     * If you treat a line as a line segment instead of a line, you should run\r\n     * includesDomain(line, x) to check whether x is included in the line's domain or not.\r\n     * @dev To guarantee accuracy, the bit length of the denominator must be greater than or equal\r\n     * to the bit length of x, and the bit length of the numerator must be greater than or equal\r\n     * to the sum of the bit lengths of x and y.\r\n     */\r\n    function _mapXtoY(LineSegment memory line, uint64 x)\r\n        internal\r\n        pure\r\n        returns (uint128 numerator, uint64 denominator)\r\n    {\r\n        int256 x1 = int256(line.left.x);\r\n        int256 y1 = int256(line.left.y);\r\n        int256 x2 = int256(line.right.x);\r\n        int256 y2 = int256(line.right.y);\r\n\r\n        require(x2 > x1, \"must be left.x < right.x\");\r\n\r\n        denominator = uint64(x2 - x1);\r\n\r\n        // Calculate y = ((x2 - x) * y1 + (x - x1) * y2) / (x2 - x1)\r\n        // in the form of a fraction (numerator / denominator).\r\n        int256 n = (x - x1) * y2 + (x2 - x) * y1;\r\n\r\n        require(n >= 0, \"underflow n\");\r\n        require(n < 2**128, \"system error: overflow n\");\r\n        numerator = uint128(n);\r\n    }\r\n\r\n    /**\r\n     * @notice Checking that a line segment is a valid format.\r\n     */\r\n    function assertLineSegment(LineSegment memory segment) internal pure {\r\n        uint64 x1 = segment.left.x;\r\n        uint64 x2 = segment.right.x;\r\n        require(x1 < x2, \"must be left.x < right.x\");\r\n    }\r\n\r\n    /**\r\n     * @notice Checking that a polyline is a valid format.\r\n     */\r\n    function assertPolyline(LineSegment[] memory polyline) internal pure {\r\n        uint256 numOfSegment = polyline.length;\r\n        require(numOfSegment != 0, \"polyline must not be empty array\");\r\n\r\n        LineSegment memory leftSegment = polyline[0]; // mutable\r\n        int256 gradientNumerator = int256(leftSegment.right.y) - int256(leftSegment.left.y); // mutable\r\n        int256 gradientDenominator = int256(leftSegment.right.x) - int256(leftSegment.left.x); // mutable\r\n\r\n        // The beginning of the first line segment's domain is 0.\r\n        require(\r\n            leftSegment.left.x == uint64(0),\r\n            \"the x coordinate of left end of the first segment must be 0\"\r\n        );\r\n        // The value of y when x is 0 is 0.\r\n        require(\r\n            leftSegment.left.y == uint64(0),\r\n            \"the y coordinate of left end of the first segment must be 0\"\r\n        );\r\n\r\n        // Making sure that the first line segment is a correct format.\r\n        assertLineSegment(leftSegment);\r\n\r\n        // The end of the domain of a segment and the beginning of the domain of the adjacent\r\n        // segment must coincide.\r\n        LineSegment memory rightSegment; // mutable\r\n        for (uint256 i = 1; i < numOfSegment; i++) {\r\n            rightSegment = polyline[i];\r\n\r\n            // Make sure that the i-th line segment is a correct format.\r\n            assertLineSegment(rightSegment);\r\n\r\n            // Checking that the x-coordinates are same.\r\n            require(\r\n                leftSegment.right.x == rightSegment.left.x,\r\n                \"given polyline has an undefined domain.\"\r\n            );\r\n\r\n            // Checking that the y-coordinates are same.\r\n            require(\r\n                leftSegment.right.y == rightSegment.left.y,\r\n                \"given polyline is not a continuous function\"\r\n            );\r\n\r\n            int256 nextGradientNumerator = int256(rightSegment.right.y) -\r\n                int256(rightSegment.left.y);\r\n            int256 nextGradientDenominator = int256(rightSegment.right.x) -\r\n                int256(rightSegment.left.x);\r\n            require(\r\n                nextGradientNumerator * gradientDenominator !=\r\n                    nextGradientDenominator * gradientNumerator,\r\n                \"the sequential segments must not have the same gradient\"\r\n            );\r\n\r\n            leftSegment = rightSegment;\r\n            gradientNumerator = nextGradientNumerator;\r\n            gradientDenominator = nextGradientDenominator;\r\n        }\r\n\r\n        // rightSegment is lastSegment\r\n\r\n        // About the last line segment.\r\n        require(\r\n            gradientNumerator >= 0 && gradientNumerator <= gradientDenominator,\r\n            \"the gradient of last line segment must be non-negative, and equal to or less than 1\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice zip a LineSegment structure to uint256\r\n     * @return zip uint256( 0 ... 0 | x1 | y1 | x2 | y2 )\r\n     */\r\n    function zipLineSegment(LineSegment memory segment) internal pure returns (uint256 zip) {\r\n        uint256 x1U256 = uint256(segment.left.x) << (64 + 64 + 64); // uint64\r\n        uint256 y1U256 = uint256(segment.left.y) << (64 + 64); // uint64\r\n        uint256 x2U256 = uint256(segment.right.x) << 64; // uint64\r\n        uint256 y2U256 = uint256(segment.right.y); // uint64\r\n        zip = x1U256 | y1U256 | x2U256 | y2U256;\r\n    }\r\n\r\n    /**\r\n     * @notice unzip uint256 to a LineSegment structure\r\n     */\r\n    function unzipLineSegment(uint256 zip) internal pure returns (LineSegment memory) {\r\n        uint64 x1 = uint64(zip >> (64 + 64 + 64));\r\n        uint64 y1 = uint64(zip >> (64 + 64));\r\n        uint64 x2 = uint64(zip >> 64);\r\n        uint64 y2 = uint64(zip);\r\n        return LineSegment({left: Point({x: x1, y: y1}), right: Point({x: x2, y: y2})});\r\n    }\r\n\r\n    /**\r\n     * @notice unzip the fnMap to uint256[].\r\n     */\r\n    function decodePolyline(bytes memory fnMap) internal pure returns (uint256[] memory) {\r\n        return abi.decode(fnMap, (uint256[]));\r\n    }\r\n}\r\n\r\n// File: contracts/bondPricer/DetectBondShape.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract DetectBondShape is Polyline {\r\n    /**\r\n     * @notice Detect bond type by polyline of bond.\r\n     * @param bondID bondID of target bond token\r\n     * @param submittedType if this parameter is BondType.NONE, this function checks up all bond types. Otherwise this function checks up only one bond type.\r\n     * @param success whether bond detection succeeded or notice\r\n     * @param points coodinates of polyline which is needed for price calculation\r\n     **/\r\n    function getBondTypeByID(\r\n        BondMakerInterface bondMaker,\r\n        bytes32 bondID,\r\n        BondType submittedType\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            bool success,\r\n            BondType,\r\n            uint256[] memory points\r\n        )\r\n    {\r\n        (, , , bytes32 fnMapID) = bondMaker.getBond(bondID);\r\n        bytes memory fnMap = bondMaker.getFnMap(fnMapID);\r\n        return _getBondType(fnMap, submittedType);\r\n    }\r\n\r\n    /**\r\n     * @notice Detect bond type by polyline of bond.\r\n     * @param fnMap Function mapping of target bond token\r\n     * @param submittedType If this parameter is BondType.NONE, this function checks up all bond types. Otherwise this function checks up only one bond type.\r\n     * @param success Whether bond detection succeeded or not\r\n     * @param points Coodinates of polyline which are needed for price calculation\r\n     **/\r\n    function getBondType(bytes calldata fnMap, BondType submittedType)\r\n        external\r\n        pure\r\n        returns (\r\n            bool success,\r\n            BondType,\r\n            uint256[] memory points\r\n        )\r\n    {\r\n        uint256[] memory polyline = decodePolyline(fnMap);\r\n        LineSegment[] memory segments = new LineSegment[](polyline.length);\r\n        for (uint256 i = 0; i < polyline.length; i++) {\r\n            segments[i] = unzipLineSegment(polyline[i]);\r\n        }\r\n        assertPolyline(segments);\r\n\r\n        return _getBondType(fnMap, submittedType);\r\n    }\r\n\r\n    function _getBondType(bytes memory fnMap, BondType submittedType)\r\n        internal\r\n        pure\r\n        returns (\r\n            bool success,\r\n            BondType,\r\n            uint256[] memory points\r\n        )\r\n    {\r\n        if (submittedType == BondType.NONE) {\r\n            (success, points) = _isSBT(fnMap);\r\n            if (success) {\r\n                return (success, BondType.PURE_SBT, points);\r\n            }\r\n\r\n            (success, points) = _isSBTShape(fnMap);\r\n            if (success) {\r\n                return (success, BondType.SBT_SHAPE, points);\r\n            }\r\n\r\n            (success, points) = _isLBTShape(fnMap);\r\n            if (success) {\r\n                return (success, BondType.LBT_SHAPE, points);\r\n            }\r\n\r\n            (success, points) = _isTriangle(fnMap);\r\n            if (success) {\r\n                return (success, BondType.TRIANGLE, points);\r\n            }\r\n\r\n            return (false, BondType.NONE, points);\r\n        } else if (submittedType == BondType.PURE_SBT) {\r\n            (success, points) = _isSBT(fnMap);\r\n            if (success) {\r\n                return (success, BondType.PURE_SBT, points);\r\n            }\r\n        } else if (submittedType == BondType.SBT_SHAPE) {\r\n            (success, points) = _isSBTShape(fnMap);\r\n            if (success) {\r\n                return (success, BondType.SBT_SHAPE, points);\r\n            }\r\n        } else if (submittedType == BondType.LBT_SHAPE) {\r\n            (success, points) = _isLBTShape(fnMap);\r\n            if (success) {\r\n                return (success, BondType.LBT_SHAPE, points);\r\n            }\r\n        } else if (submittedType == BondType.TRIANGLE) {\r\n            (success, points) = _isTriangle(fnMap);\r\n            if (success) {\r\n                return (success, BondType.TRIANGLE, points);\r\n            }\r\n        }\r\n\r\n        return (false, BondType.NONE, points);\r\n    }\r\n\r\n    function _isLBTShape(bytes memory fnMap)\r\n        internal\r\n        pure\r\n        returns (bool isOk, uint256[] memory points)\r\n    {\r\n        uint256[] memory zippedLines = decodePolyline(fnMap);\r\n        if (zippedLines.length != 2) {\r\n            return (false, points);\r\n        }\r\n        LineSegment memory secondLine = unzipLineSegment(zippedLines[1]);\r\n        if (\r\n            secondLine.left.x != 0 &&\r\n            secondLine.left.y == 0 &&\r\n            secondLine.right.x > secondLine.left.x &&\r\n            secondLine.right.y != 0\r\n        ) {\r\n            uint256[] memory _lines = new uint256[](3);\r\n            _lines[0] = secondLine.left.x;\r\n            _lines[1] = secondLine.right.x;\r\n            _lines[2] = secondLine.right.y;\r\n            return (true, _lines);\r\n        }\r\n        return (false, points);\r\n    }\r\n\r\n    function _isTriangle(bytes memory fnMap)\r\n        internal\r\n        pure\r\n        returns (bool isOk, uint256[] memory points)\r\n    {\r\n        uint256[] memory zippedLines = decodePolyline(fnMap);\r\n        if (zippedLines.length != 4) {\r\n            return (false, points);\r\n        }\r\n        LineSegment memory secondLine = unzipLineSegment(zippedLines[1]);\r\n        LineSegment memory thirdLine = unzipLineSegment(zippedLines[2]);\r\n        LineSegment memory forthLine = unzipLineSegment(zippedLines[3]);\r\n        if (\r\n            secondLine.left.x != 0 &&\r\n            secondLine.left.y == 0 &&\r\n            secondLine.right.x > secondLine.left.x &&\r\n            secondLine.right.y != 0 &&\r\n            thirdLine.right.x > secondLine.right.x &&\r\n            thirdLine.right.y == 0 &&\r\n            forthLine.right.x > thirdLine.right.x &&\r\n            forthLine.right.y == 0\r\n        ) {\r\n            uint256[] memory _lines = new uint256[](4);\r\n            _lines[0] = secondLine.left.x;\r\n            _lines[1] = secondLine.right.x;\r\n            _lines[2] = secondLine.right.y;\r\n            _lines[3] = thirdLine.right.x;\r\n            return (true, _lines);\r\n        }\r\n        return (false, points);\r\n    }\r\n\r\n    function _isSBTShape(bytes memory fnMap)\r\n        internal\r\n        pure\r\n        returns (bool isOk, uint256[] memory points)\r\n    {\r\n        uint256[] memory zippedLines = decodePolyline(fnMap);\r\n        if (zippedLines.length != 3) {\r\n            return (false, points);\r\n        }\r\n        LineSegment memory secondLine = unzipLineSegment(zippedLines[1]);\r\n        LineSegment memory thirdLine = unzipLineSegment(zippedLines[2]);\r\n        if (\r\n            secondLine.left.x != 0 &&\r\n            secondLine.left.y == 0 &&\r\n            secondLine.right.x > secondLine.left.x &&\r\n            secondLine.right.y != 0 &&\r\n            thirdLine.right.x > secondLine.right.x &&\r\n            thirdLine.right.y == secondLine.right.y\r\n        ) {\r\n            uint256[] memory _lines = new uint256[](3);\r\n            _lines[0] = secondLine.left.x;\r\n            _lines[1] = secondLine.right.x;\r\n            _lines[2] = secondLine.right.y;\r\n            return (true, _lines);\r\n        }\r\n        return (false, points);\r\n    }\r\n\r\n    function _isSBT(bytes memory fnMap) internal pure returns (bool isOk, uint256[] memory points) {\r\n        uint256[] memory zippedLines = decodePolyline(fnMap);\r\n        if (zippedLines.length != 2) {\r\n            return (false, points);\r\n        }\r\n        LineSegment memory secondLine = unzipLineSegment(zippedLines[1]);\r\n\r\n        if (\r\n            secondLine.left.x != 0 &&\r\n            secondLine.left.y == secondLine.left.x &&\r\n            secondLine.right.x > secondLine.left.x &&\r\n            secondLine.right.y == secondLine.left.y\r\n        ) {\r\n            uint256[] memory _lines = new uint256[](1);\r\n            _lines[0] = secondLine.left.x;\r\n            return (true, _lines);\r\n        }\r\n\r\n        return (false, points);\r\n    }\r\n}\r\n\r\n// File: contracts/util/Time.sol\r\n\r\n\r\n\r\nabstract contract Time {\r\n    function _getBlockTimestampSec() internal view returns (uint256 unixtimesec) {\r\n        unixtimesec = block.timestamp; // solhint-disable-line not-rely-on-time\r\n    }\r\n}\r\n\r\n// File: contracts/generalizedDotc/BondExchange.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract BondExchange is UseSafeMath, Time {\r\n    uint256 internal constant MIN_EXCHANGE_RATE_E8 = 0.000001 * 10**8;\r\n    uint256 internal constant MAX_EXCHANGE_RATE_E8 = 1000000 * 10**8;\r\n\r\n    int256 internal constant MAX_SPREAD_E8 = 10**8; // 100%\r\n\r\n    /**\r\n     * @dev the sum of decimalsOfBond of the bondMaker.\r\n     * This value is constant by the restriction of `_assertBondMakerDecimals`.\r\n     */\r\n    uint8 internal constant DECIMALS_OF_BOND = 8;\r\n\r\n    /**\r\n     * @dev the sum of decimalsOfOraclePrice of the bondMaker.\r\n     * This value is constant by the restriction of `_assertBondMakerDecimals`.\r\n     */\r\n    uint8 internal constant DECIMALS_OF_ORACLE_PRICE = 8;\r\n\r\n    BondMakerInterface internal immutable _bondMakerContract;\r\n    PriceOracleInterface internal immutable _priceOracleContract;\r\n    VolatilityOracleInterface internal immutable _volatilityOracleContract;\r\n    LatestPriceOracleInterface internal immutable _volumeCalculator;\r\n    DetectBondShape internal immutable _bondShapeDetector;\r\n\r\n    /**\r\n     * @param bondMakerAddress is a bond maker contract.\r\n     * @param volumeCalculatorAddress is a contract to convert the unit of a strike price to USD.\r\n     */\r\n    constructor(\r\n        BondMakerInterface bondMakerAddress,\r\n        VolatilityOracleInterface volatilityOracleAddress,\r\n        LatestPriceOracleInterface volumeCalculatorAddress,\r\n        DetectBondShape bondShapeDetector\r\n    ) public {\r\n        _assertBondMakerDecimals(bondMakerAddress);\r\n        _bondMakerContract = bondMakerAddress;\r\n        _priceOracleContract = bondMakerAddress.oracleAddress();\r\n        _volatilityOracleContract = VolatilityOracleInterface(volatilityOracleAddress);\r\n        _volumeCalculator = volumeCalculatorAddress;\r\n        _bondShapeDetector = bondShapeDetector;\r\n    }\r\n\r\n    function bondMakerAddress() external view returns (BondMakerInterface) {\r\n        return _bondMakerContract;\r\n    }\r\n\r\n    function volumeCalculatorAddress() external view returns (LatestPriceOracleInterface) {\r\n        return _volumeCalculator;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the latest price (USD) and historical volatility using oracle.\r\n     * If the oracle is not working, `latestPrice` reverts.\r\n     * @return priceE8 (10^-8 USD)\r\n     */\r\n    function _getLatestPrice(LatestPriceOracleInterface oracle) internal returns (uint256 priceE8) {\r\n        return oracle.latestPrice();\r\n    }\r\n\r\n    /**\r\n     * @dev Get the implied volatility using oracle.\r\n     * @return volatilityE8 (10^-8)\r\n     */\r\n    function _getVolatility(VolatilityOracleInterface oracle, uint64 untilMaturity)\r\n        internal\r\n        view\r\n        returns (uint256 volatilityE8)\r\n    {\r\n        return oracle.getVolatility(untilMaturity);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns bond tokenaddress, maturity,\r\n     */\r\n    function _getBond(BondMakerInterface bondMaker, bytes32 bondID)\r\n        internal\r\n        view\r\n        returns (\r\n            ERC20 bondToken,\r\n            uint256 maturity,\r\n            uint256 sbtStrikePrice,\r\n            bytes32 fnMapID\r\n        )\r\n    {\r\n        address bondTokenAddress;\r\n        (bondTokenAddress, maturity, sbtStrikePrice, fnMapID) = bondMaker.getBond(bondID);\r\n\r\n        // Revert if `bondTokenAddress` is zero.\r\n        bondToken = ERC20(bondTokenAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a decimal gap from the first argument.\r\n     */\r\n    function _applyDecimalGap(\r\n        uint256 baseAmount,\r\n        uint8 decimalsOfBase,\r\n        uint8 decimalsOfQuote\r\n    ) internal pure returns (uint256 quoteAmount) {\r\n        uint256 n;\r\n        uint256 d;\r\n\r\n        if (decimalsOfBase > decimalsOfQuote) {\r\n            d = decimalsOfBase - decimalsOfQuote;\r\n        } else if (decimalsOfBase < decimalsOfQuote) {\r\n            n = decimalsOfQuote - decimalsOfBase;\r\n        }\r\n\r\n        // The consequent multiplication would overflow under extreme and non-blocking circumstances.\r\n        require(n < 19 && d < 19, \"decimal gap needs to be lower than 19\");\r\n        return baseAmount.mul(10**n).div(10**d);\r\n    }\r\n\r\n    function _calcBondPriceAndSpread(\r\n        BondPricerInterface bondPricer,\r\n        bytes32 bondID,\r\n        int16 feeBaseE4\r\n    ) internal returns (uint256 bondPriceE8, int256 spreadE8) {\r\n        (, uint256 maturity, , ) = _getBond(_bondMakerContract, bondID);\r\n        (bool isKnownBondType, BondType bondType, uint256[] memory points) = _bondShapeDetector\r\n            .getBondTypeByID(_bondMakerContract, bondID, BondType.NONE);\r\n        require(isKnownBondType, \"cannot calculate the price of this bond\");\r\n\r\n        uint256 untilMaturity = maturity.sub(\r\n            _getBlockTimestampSec(),\r\n            \"the bond should not have expired\"\r\n        );\r\n        uint256 oraclePriceE8 = _getLatestPrice(_priceOracleContract);\r\n        uint256 oracleVolatilityE8 = _getVolatility(\r\n            _volatilityOracleContract,\r\n            untilMaturity.toUint64()\r\n        );\r\n\r\n        uint256 leverageE8;\r\n        (bondPriceE8, leverageE8) = bondPricer.calcPriceAndLeverage(\r\n            bondType,\r\n            points,\r\n            oraclePriceE8.toInt256(),\r\n            oracleVolatilityE8.toInt256(),\r\n            untilMaturity.toInt256()\r\n        );\r\n        spreadE8 = _calcSpread(oracleVolatilityE8, leverageE8, feeBaseE4);\r\n    }\r\n\r\n    function _calcSpread(\r\n        uint256 oracleVolatilityE8,\r\n        uint256 leverageE8,\r\n        int16 feeBaseE4\r\n    ) internal pure returns (int256 spreadE8) {\r\n        uint256 volE8 = oracleVolatilityE8 < 10**8 ? 10**8 : oracleVolatilityE8 > 2 * 10**8\r\n            ? 2 * 10**8\r\n            : oracleVolatilityE8;\r\n        uint256 volTimesLevE16 = volE8 * leverageE8;\r\n        // assert(volTimesLevE16 < 200 * 10**16);\r\n        spreadE8 =\r\n            (feeBaseE4 *\r\n                (feeBaseE4 < 0 || volTimesLevE16 < 10**16 ? 10**16 : volTimesLevE16).toInt256()) /\r\n            10**12;\r\n        spreadE8 = spreadE8 > MAX_SPREAD_E8 ? MAX_SPREAD_E8 : spreadE8;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate the exchange volume on the USD basis.\r\n     */\r\n    function _calcUsdPrice(uint256 amount) internal returns (uint256) {\r\n        return amount.mul(_getLatestPrice(_volumeCalculator)) / 10**8;\r\n    }\r\n\r\n    /**\r\n     * @dev Restirct the bond maker.\r\n     */\r\n    function _assertBondMakerDecimals(BondMakerInterface bondMaker) internal view {\r\n        require(\r\n            bondMaker.decimalsOfOraclePrice() == DECIMALS_OF_ORACLE_PRICE,\r\n            \"the decimals of oracle price must be 8\"\r\n        );\r\n        require(\r\n            bondMaker.decimalsOfBond() == DECIMALS_OF_BOND,\r\n            \"the decimals of bond token must be 8\"\r\n        );\r\n    }\r\n\r\n    function _assertExpectedPriceRange(\r\n        uint256 actualAmount,\r\n        uint256 expectedAmount,\r\n        uint256 range\r\n    ) internal pure {\r\n        if (expectedAmount != 0) {\r\n            require(\r\n                actualAmount.mul(1000 + range).div(1000) >= expectedAmount,\r\n                \"out of expected price range\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/generalizedDotc/BondVsErc20Exchange.sol\r\n\r\n\r\n\r\n\r\n\r\nabstract contract BondVsErc20Exchange is BondExchange {\r\n    using SafeERC20 for ERC20;\r\n\r\n    struct VsErc20Pool {\r\n        address seller;\r\n        ERC20 swapPairToken;\r\n        LatestPriceOracleInterface swapPairOracle;\r\n        BondPricerInterface bondPricer;\r\n        int16 feeBaseE4;\r\n        bool isBondSale;\r\n    }\r\n    mapping(bytes32 => VsErc20Pool) internal _vsErc20Pool;\r\n\r\n    event LogCreateErc20ToBondPool(\r\n        bytes32 indexed poolID,\r\n        address indexed seller,\r\n        address indexed swapPairAddress\r\n    );\r\n\r\n    event LogCreateBondToErc20Pool(\r\n        bytes32 indexed poolID,\r\n        address indexed seller,\r\n        address indexed swapPairAddress\r\n    );\r\n\r\n    event LogUpdateVsErc20Pool(\r\n        bytes32 indexed poolID,\r\n        address swapPairOracleAddress,\r\n        address bondPricerAddress,\r\n        int16 feeBase // decimal: 4\r\n    );\r\n\r\n    event LogDeleteVsErc20Pool(bytes32 indexed poolID);\r\n\r\n    event LogExchangeErc20ToBond(\r\n        address indexed buyer,\r\n        bytes32 indexed bondID,\r\n        bytes32 indexed poolID,\r\n        uint256 bondAmount, // decimal: 8\r\n        uint256 swapPairAmount, // decimal: ERC20.decimals()\r\n        uint256 volume // USD, decimal: 8\r\n    );\r\n\r\n    event LogExchangeBondToErc20(\r\n        address indexed buyer,\r\n        bytes32 indexed bondID,\r\n        bytes32 indexed poolID,\r\n        uint256 bondAmount, // decimal: 8\r\n        uint256 swapPairAmount, // decimal: ERC20.decimals()\r\n        uint256 volume // USD, decimal: 8\r\n    );\r\n\r\n    /**\r\n     * @dev Reverts when the pool ID does not exist.\r\n     */\r\n    modifier isExsistentVsErc20Pool(bytes32 poolID) {\r\n        require(_vsErc20Pool[poolID].seller != address(0), \"the exchange pair does not exist\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Exchange buyer's ERC20 token to the seller's bond.\r\n     * @dev Ensure the seller has approved sufficient bonds and\r\n     * you approve ERC20 token to pay before executing this function.\r\n     * @param bondID is the target bond ID.\r\n     * @param poolID is the target pool ID.\r\n     * @param swapPairAmount is the exchange pair token amount to pay.\r\n     * @param expectedAmount is the bond amount to receive.\r\n     * @param range (decimal: 3)\r\n     */\r\n    function exchangeErc20ToBond(\r\n        bytes32 bondID,\r\n        bytes32 poolID,\r\n        uint256 swapPairAmount,\r\n        uint256 expectedAmount,\r\n        uint256 range\r\n    ) external returns (uint256 bondAmount) {\r\n        bondAmount = _exchangeErc20ToBond(msg.sender, bondID, poolID, swapPairAmount);\r\n        // assert(bondAmount != 0);\r\n        _assertExpectedPriceRange(bondAmount, expectedAmount, range);\r\n    }\r\n\r\n    /**\r\n     * @notice Exchange buyer's bond to the seller's ERC20 token.\r\n     * @dev Ensure the seller has approved sufficient ERC20 token and\r\n     * you approve bonds to pay before executing this function.\r\n     * @param bondID is the target bond ID.\r\n     * @param poolID is the target pool ID.\r\n     * @param bondAmount is the bond amount to pay.\r\n     * @param expectedAmount is the exchange pair token amount to receive.\r\n     * @param range (decimal: 3)\r\n     */\r\n    function exchangeBondToErc20(\r\n        bytes32 bondID,\r\n        bytes32 poolID,\r\n        uint256 bondAmount,\r\n        uint256 expectedAmount,\r\n        uint256 range\r\n    ) external returns (uint256 swapPairAmount) {\r\n        swapPairAmount = _exchangeBondToErc20(msg.sender, bondID, poolID, bondAmount);\r\n        // assert(swapPairAmount != 0);\r\n        _assertExpectedPriceRange(swapPairAmount, expectedAmount, range);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the exchange rate including spread.\r\n     */\r\n    function calcRateBondToErc20(bytes32 bondID, bytes32 poolID) external returns (uint256 rateE8) {\r\n        (rateE8, , , ) = _calcRateBondToErc20(bondID, poolID);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns pool ID generated by the immutable pool settings.\r\n     */\r\n    function generateVsErc20PoolID(\r\n        address seller,\r\n        address swapPairAddress,\r\n        bool isBondSale\r\n    ) external view returns (bytes32 poolID) {\r\n        return _generateVsErc20PoolID(seller, swapPairAddress, isBondSale);\r\n    }\r\n\r\n    /**\r\n     * @notice Register a new vsErc20Pool.\r\n     */\r\n    function createVsErc20Pool(\r\n        ERC20 swapPairAddress,\r\n        LatestPriceOracleInterface swapPairOracleAddress,\r\n        BondPricerInterface bondPricerAddress,\r\n        int16 feeBaseE4,\r\n        bool isBondSale\r\n    ) external returns (bytes32 poolID) {\r\n        return\r\n            _createVsErc20Pool(\r\n                msg.sender,\r\n                swapPairAddress,\r\n                swapPairOracleAddress,\r\n                bondPricerAddress,\r\n                feeBaseE4,\r\n                isBondSale\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Update the mutable pool settings.\r\n     */\r\n    function updateVsErc20Pool(\r\n        bytes32 poolID,\r\n        LatestPriceOracleInterface swapPairOracleAddress,\r\n        BondPricerInterface bondPricerAddress,\r\n        int16 feeBaseE4\r\n    ) external {\r\n        require(_vsErc20Pool[poolID].seller == msg.sender, \"not the owner of the pool ID\");\r\n\r\n        _updateVsErc20Pool(poolID, swapPairOracleAddress, bondPricerAddress, feeBaseE4);\r\n    }\r\n\r\n    /**\r\n     * @notice Delete the pool settings.\r\n     */\r\n    function deleteVsErc20Pool(bytes32 poolID) external {\r\n        require(_vsErc20Pool[poolID].seller == msg.sender, \"not the owner of the pool ID\");\r\n\r\n        _deleteVsErc20Pool(poolID);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the pool settings.\r\n     */\r\n    function getVsErc20Pool(bytes32 poolID)\r\n        external\r\n        view\r\n        returns (\r\n            address seller,\r\n            ERC20 swapPairAddress,\r\n            LatestPriceOracleInterface swapPairOracleAddress,\r\n            BondPricerInterface bondPricerAddress,\r\n            int16 feeBaseE4,\r\n            bool isBondSale\r\n        )\r\n    {\r\n        return _getVsErc20Pool(poolID);\r\n    }\r\n\r\n    /**\r\n     * @dev Exchange buyer's ERC20 token to the seller's bond.\r\n     * Ensure the seller has approved sufficient bonds and\r\n     * buyer approve ERC20 token to pay before executing this function.\r\n     * @param buyer is the buyer address.\r\n     * @param bondID is the target bond ID.\r\n     * @param poolID is the target pool ID.\r\n     * @param swapPairAmount is the exchange pair token amount to pay.\r\n     * @return bondAmount is the received bond amount.\r\n     */\r\n    function _exchangeErc20ToBond(\r\n        address buyer,\r\n        bytes32 bondID,\r\n        bytes32 poolID,\r\n        uint256 swapPairAmount\r\n    ) internal returns (uint256 bondAmount) {\r\n        (address seller, ERC20 swapPairToken, , , , bool isBondSale) = _getVsErc20Pool(poolID);\r\n        require(isBondSale, \"This pool is for buying bond\");\r\n\r\n        (ERC20 bondToken, , , ) = _getBond(_bondMakerContract, bondID);\r\n        require(address(bondToken) != address(0), \"the bond is not registered\");\r\n\r\n        uint256 volumeE8;\r\n        {\r\n            (uint256 rateE8, , uint256 swapPairPriceE8, ) = _calcRateBondToErc20(bondID, poolID);\r\n            require(rateE8 > MIN_EXCHANGE_RATE_E8, \"exchange rate is too small\");\r\n            require(rateE8 < MAX_EXCHANGE_RATE_E8, \"exchange rate is too large\");\r\n            uint8 decimalsOfSwapPair = swapPairToken.decimals();\r\n            bondAmount =\r\n                _applyDecimalGap(swapPairAmount, decimalsOfSwapPair, DECIMALS_OF_BOND + 8) /\r\n                rateE8;\r\n            require(bondAmount != 0, \"must transfer non-zero bond amount\");\r\n            volumeE8 = swapPairPriceE8.mul(swapPairAmount).div(10**uint256(decimalsOfSwapPair));\r\n        }\r\n\r\n        require(bondToken.transferFrom(seller, buyer, bondAmount), \"fail to transfer bonds\");\r\n        swapPairToken.safeTransferFrom(buyer, seller, swapPairAmount);\r\n\r\n        emit LogExchangeErc20ToBond(buyer, bondID, poolID, bondAmount, swapPairAmount, volumeE8);\r\n    }\r\n\r\n    /**\r\n     * @dev Exchange buyer's bond to the seller's ERC20 token.\r\n     * Ensure the seller has approved sufficient ERC20 token and\r\n     * buyer approve bonds to pay before executing this function.\r\n     * @param buyer is the buyer address.\r\n     * @param bondID is the target bond ID.\r\n     * @param poolID is the target pool ID.\r\n     * @param bondAmount is the bond amount to pay.\r\n     * @return swapPairAmount is the received swap pair token amount.\r\n     */\r\n    function _exchangeBondToErc20(\r\n        address buyer,\r\n        bytes32 bondID,\r\n        bytes32 poolID,\r\n        uint256 bondAmount\r\n    ) internal returns (uint256 swapPairAmount) {\r\n        (address seller, ERC20 swapPairToken, , , , bool isBondSale) = _getVsErc20Pool(poolID);\r\n        require(!isBondSale, \"This pool is not for buying bond\");\r\n\r\n        (ERC20 bondToken, , , ) = _getBond(_bondMakerContract, bondID);\r\n        require(address(bondToken) != address(0), \"the bond is not registered\");\r\n\r\n        uint256 volumeE8;\r\n        {\r\n            (uint256 rateE8, uint256 bondPriceE8, , ) = _calcRateBondToErc20(bondID, poolID);\r\n            require(rateE8 > MIN_EXCHANGE_RATE_E8, \"exchange rate is too small\");\r\n            require(rateE8 < MAX_EXCHANGE_RATE_E8, \"exchange rate is too large\");\r\n            uint8 decimalsOfSwapPair = swapPairToken.decimals();\r\n            swapPairAmount = _applyDecimalGap(\r\n                bondAmount.mul(rateE8),\r\n                DECIMALS_OF_BOND + 8,\r\n                decimalsOfSwapPair\r\n            );\r\n            require(swapPairAmount != 0, \"must transfer non-zero token amount\");\r\n            volumeE8 = bondPriceE8.mul(bondAmount).div(10**uint256(DECIMALS_OF_BOND));\r\n        }\r\n\r\n        require(bondToken.transferFrom(buyer, seller, bondAmount), \"fail to transfer bonds\");\r\n        swapPairToken.safeTransferFrom(seller, buyer, swapPairAmount);\r\n\r\n        emit LogExchangeBondToErc20(buyer, bondID, poolID, bondAmount, swapPairAmount, volumeE8);\r\n    }\r\n\r\n    function _calcRateBondToErc20(bytes32 bondID, bytes32 poolID)\r\n        internal\r\n        returns (\r\n            uint256 rateE8,\r\n            uint256 bondPriceE8,\r\n            uint256 swapPairPriceE8,\r\n            int256 spreadE8\r\n        )\r\n    {\r\n        (\r\n            ,\r\n            ,\r\n            LatestPriceOracleInterface erc20Oracle,\r\n            BondPricerInterface bondPricer,\r\n            int16 feeBaseE4,\r\n            bool isBondSale\r\n        ) = _getVsErc20Pool(poolID);\r\n        swapPairPriceE8 = _getLatestPrice(erc20Oracle);\r\n        (bondPriceE8, spreadE8) = _calcBondPriceAndSpread(bondPricer, bondID, feeBaseE4);\r\n        bondPriceE8 = _calcUsdPrice(bondPriceE8);\r\n        rateE8 = bondPriceE8.mul(10**8).div(swapPairPriceE8, \"ERC20 oracle price must be non-zero\");\r\n\r\n        // `spreadE8` is less than 0.15 * 10**8.\r\n        if (isBondSale) {\r\n            rateE8 = rateE8.mul(uint256(10**8 + spreadE8)) / 10**8;\r\n        } else {\r\n            rateE8 = rateE8.mul(10**8) / uint256(10**8 + spreadE8);\r\n        }\r\n    }\r\n\r\n    function _generateVsErc20PoolID(\r\n        address seller,\r\n        address swapPairAddress,\r\n        bool isBondSale\r\n    ) internal view returns (bytes32 poolID) {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    \"Bond vs ERC20 exchange\",\r\n                    address(this),\r\n                    seller,\r\n                    swapPairAddress,\r\n                    isBondSale\r\n                )\r\n            );\r\n    }\r\n\r\n    function _setVsErc20Pool(\r\n        bytes32 poolID,\r\n        address seller,\r\n        ERC20 swapPairToken,\r\n        LatestPriceOracleInterface swapPairOracle,\r\n        BondPricerInterface bondPricer,\r\n        int16 feeBaseE4,\r\n        bool isBondSale\r\n    ) internal {\r\n        require(seller != address(0), \"the pool ID already exists\");\r\n        require(address(swapPairToken) != address(0), \"swapPairToken should be non-zero address\");\r\n        require(address(swapPairOracle) != address(0), \"swapPairOracle should be non-zero address\");\r\n        require(address(bondPricer) != address(0), \"bondPricer should be non-zero address\");\r\n        _vsErc20Pool[poolID] = VsErc20Pool({\r\n            seller: seller,\r\n            swapPairToken: swapPairToken,\r\n            swapPairOracle: swapPairOracle,\r\n            bondPricer: bondPricer,\r\n            feeBaseE4: feeBaseE4,\r\n            isBondSale: isBondSale\r\n        });\r\n    }\r\n\r\n    function _createVsErc20Pool(\r\n        address seller,\r\n        ERC20 swapPairToken,\r\n        LatestPriceOracleInterface swapPairOracle,\r\n        BondPricerInterface bondPricer,\r\n        int16 feeBaseE4,\r\n        bool isBondSale\r\n    ) internal returns (bytes32 poolID) {\r\n        poolID = _generateVsErc20PoolID(seller, address(swapPairToken), isBondSale);\r\n        require(_vsErc20Pool[poolID].seller == address(0), \"the pool ID already exists\");\r\n\r\n        {\r\n            uint256 price = _getLatestPrice(swapPairOracle);\r\n            require(\r\n                price != 0,\r\n                \"swapPairOracle has latestPrice() function which returns non-zero value\"\r\n            );\r\n        }\r\n\r\n        _setVsErc20Pool(\r\n            poolID,\r\n            seller,\r\n            swapPairToken,\r\n            swapPairOracle,\r\n            bondPricer,\r\n            feeBaseE4,\r\n            isBondSale\r\n        );\r\n\r\n        if (isBondSale) {\r\n            emit LogCreateErc20ToBondPool(poolID, seller, address(swapPairToken));\r\n        } else {\r\n            emit LogCreateBondToErc20Pool(poolID, seller, address(swapPairToken));\r\n        }\r\n\r\n        emit LogUpdateVsErc20Pool(poolID, address(swapPairOracle), address(bondPricer), feeBaseE4);\r\n    }\r\n\r\n    function _updateVsErc20Pool(\r\n        bytes32 poolID,\r\n        LatestPriceOracleInterface swapPairOracle,\r\n        BondPricerInterface bondPricer,\r\n        int16 feeBaseE4\r\n    ) internal isExsistentVsErc20Pool(poolID) {\r\n        (address seller, ERC20 swapPairToken, , , , bool isBondSale) = _getVsErc20Pool(poolID);\r\n        _setVsErc20Pool(\r\n            poolID,\r\n            seller,\r\n            swapPairToken,\r\n            swapPairOracle,\r\n            bondPricer,\r\n            feeBaseE4,\r\n            isBondSale\r\n        );\r\n\r\n        emit LogUpdateVsErc20Pool(poolID, address(swapPairOracle), address(bondPricer), feeBaseE4);\r\n    }\r\n\r\n    function _deleteVsErc20Pool(bytes32 poolID) internal isExsistentVsErc20Pool(poolID) {\r\n        delete _vsErc20Pool[poolID];\r\n\r\n        emit LogDeleteVsErc20Pool(poolID);\r\n    }\r\n\r\n    function _getVsErc20Pool(bytes32 poolID)\r\n        internal\r\n        view\r\n        isExsistentVsErc20Pool(poolID)\r\n        returns (\r\n            address seller,\r\n            ERC20 swapPairToken,\r\n            LatestPriceOracleInterface swapPairOracle,\r\n            BondPricerInterface bondPricer,\r\n            int16 feeBaseE4,\r\n            bool isBondSale\r\n        )\r\n    {\r\n        VsErc20Pool memory exchangePair = _vsErc20Pool[poolID];\r\n        seller = exchangePair.seller;\r\n        swapPairToken = exchangePair.swapPairToken;\r\n        swapPairOracle = exchangePair.swapPairOracle;\r\n        bondPricer = exchangePair.bondPricer;\r\n        feeBaseE4 = exchangePair.feeBaseE4;\r\n        isBondSale = exchangePair.isBondSale;\r\n    }\r\n}\r\n\r\n// File: contracts/util/TransferETH.sol\r\n\r\n\r\n\r\n\r\nabstract contract TransferETH is TransferETHInterface {\r\n    receive() external payable override {\r\n        emit LogTransferETH(msg.sender, address(this), msg.value);\r\n    }\r\n\r\n    function _hasSufficientBalance(uint256 amount) internal view returns (bool ok) {\r\n        address thisContract = address(this);\r\n        return amount <= thisContract.balance;\r\n    }\r\n\r\n    /**\r\n     * @notice transfer `amount` ETH to the `recipient` account with emitting log\r\n     */\r\n    function _transferETH(\r\n        address payable recipient,\r\n        uint256 amount,\r\n        string memory errorMessage\r\n    ) internal {\r\n        require(_hasSufficientBalance(amount), errorMessage);\r\n        (bool success, ) = recipient.call{value: amount}(\"\"); // solhint-disable-line avoid-low-level-calls\r\n        require(success, \"transferring Ether failed\");\r\n        emit LogTransferETH(address(this), recipient, amount);\r\n    }\r\n\r\n    function _transferETH(address payable recipient, uint256 amount) internal {\r\n        _transferETH(recipient, amount, \"TransferETH: transfer amount exceeds balance\");\r\n    }\r\n}\r\n\r\n// File: contracts/generalizedDotc/BondVsEthExchange.sol\r\n\r\n\r\n\r\n\r\n\r\nabstract contract BondVsEthExchange is BondExchange, TransferETH {\r\n    uint8 internal constant DECIMALS_OF_ETH = 18;\r\n\r\n    struct VsEthPool {\r\n        address seller;\r\n        LatestPriceOracleInterface ethOracle;\r\n        BondPricerInterface bondPricer;\r\n        int16 feeBaseE4;\r\n        bool isBondSale;\r\n    }\r\n    mapping(bytes32 => VsEthPool) internal _vsEthPool;\r\n\r\n    mapping(address => uint256) internal _depositedEth;\r\n\r\n    event LogCreateEthToBondPool(bytes32 indexed poolID, address indexed seller);\r\n\r\n    event LogCreateBondToEthPool(bytes32 indexed poolID, address indexed seller);\r\n\r\n    event LogUpdateVsEthPool(\r\n        bytes32 indexed poolID,\r\n        address ethOracleAddress,\r\n        address bondPricerAddress,\r\n        int16 feeBase // decimal: 4\r\n    );\r\n\r\n    event LogDeleteVsEthPool(bytes32 indexed poolID);\r\n\r\n    event LogExchangeEthToBond(\r\n        address indexed buyer,\r\n        bytes32 indexed bondID,\r\n        bytes32 indexed poolID,\r\n        uint256 bondAmount, // decimal: 8\r\n        uint256 swapPairAmount, // decimal: 18\r\n        uint256 volume // USD, decimal: 8\r\n    );\r\n\r\n    event LogExchangeBondToEth(\r\n        address indexed buyer,\r\n        bytes32 indexed bondID,\r\n        bytes32 indexed poolID,\r\n        uint256 bondAmount, // decimal: 8\r\n        uint256 swapPairAmount, // decimal: 18\r\n        uint256 volume // USD, decimal: 8\r\n    );\r\n\r\n    /**\r\n     * @dev Reverts when the pool ID does not exist.\r\n     */\r\n    modifier isExsistentVsEthPool(bytes32 poolID) {\r\n        require(_vsEthPool[poolID].seller != address(0), \"the exchange pair does not exist\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Exchange buyer's ETH to the seller's bond.\r\n     * @dev Ensure the seller has approved sufficient bonds and\r\n     * you deposit ETH to pay before executing this function.\r\n     * @param bondID is the target bond ID.\r\n     * @param poolID is the target pool ID.\r\n     * @param ethAmount is the exchange pair token amount to pay.\r\n     * @param expectedAmount is the bond amount to receive.\r\n     * @param range (decimal: 3)\r\n     */\r\n    function exchangeEthToBond(\r\n        bytes32 bondID,\r\n        bytes32 poolID,\r\n        uint256 ethAmount,\r\n        uint256 expectedAmount,\r\n        uint256 range\r\n    ) external returns (uint256 bondAmount) {\r\n        bondAmount = _exchangeEthToBond(msg.sender, bondID, poolID, ethAmount);\r\n        // assert(bondAmount != 0);\r\n        _assertExpectedPriceRange(bondAmount, expectedAmount, range);\r\n    }\r\n\r\n    /**\r\n     * @notice Exchange buyer's bond to the seller's ETH.\r\n     * @dev Ensure the seller has deposited sufficient ETH and\r\n     * you approve bonds to pay before executing this function.\r\n     * @param bondID is the target bond ID.\r\n     * @param poolID is the target pool ID.\r\n     * @param bondAmount is the bond amount to pay.\r\n     * @param expectedAmount is the ETH amount to receive.\r\n     * @param range (decimal: 3)\r\n     */\r\n    function exchangeBondToEth(\r\n        bytes32 bondID,\r\n        bytes32 poolID,\r\n        uint256 bondAmount,\r\n        uint256 expectedAmount,\r\n        uint256 range\r\n    ) external returns (uint256 ethAmount) {\r\n        ethAmount = _exchangeBondToEth(msg.sender, bondID, poolID, bondAmount);\r\n        // assert(ethAmount != 0);\r\n        _assertExpectedPriceRange(ethAmount, expectedAmount, range);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the exchange rate including spread.\r\n     */\r\n    function calcRateBondToEth(bytes32 bondID, bytes32 poolID) external returns (uint256 rateE8) {\r\n        (rateE8, , , ) = _calcRateBondToEth(bondID, poolID);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns pool ID generated by the immutable pool settings.\r\n     */\r\n    function generateVsEthPoolID(address seller, bool isBondSale)\r\n        external\r\n        view\r\n        returns (bytes32 poolID)\r\n    {\r\n        return _generateVsEthPoolID(seller, isBondSale);\r\n    }\r\n\r\n    /**\r\n     * @notice Register a new vsEthPool.\r\n     */\r\n    function createVsEthPool(\r\n        LatestPriceOracleInterface ethOracleAddress,\r\n        BondPricerInterface bondPricerAddress,\r\n        int16 feeBaseE4,\r\n        bool isBondSale\r\n    ) external returns (bytes32 poolID) {\r\n        return\r\n            _createVsEthPool(\r\n                msg.sender,\r\n                ethOracleAddress,\r\n                bondPricerAddress,\r\n                feeBaseE4,\r\n                isBondSale\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Update the mutable pool settings.\r\n     */\r\n    function updateVsEthPool(\r\n        bytes32 poolID,\r\n        LatestPriceOracleInterface ethOracleAddress,\r\n        BondPricerInterface bondPricerAddress,\r\n        int16 feeBaseE4\r\n    ) external {\r\n        require(_vsEthPool[poolID].seller == msg.sender, \"not the owner of the pool ID\");\r\n\r\n        _updateVsEthPool(poolID, ethOracleAddress, bondPricerAddress, feeBaseE4);\r\n    }\r\n\r\n    /**\r\n     * @notice Delete the pool settings.\r\n     */\r\n    function deleteVsEthPool(bytes32 poolID) external {\r\n        require(_vsEthPool[poolID].seller == msg.sender, \"not the owner of the pool ID\");\r\n\r\n        _deleteVsEthPool(poolID);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the pool settings.\r\n     */\r\n    function getVsEthPool(bytes32 poolID)\r\n        external\r\n        view\r\n        returns (\r\n            address seller,\r\n            LatestPriceOracleInterface ethOracleAddress,\r\n            BondPricerInterface bondPricerAddress,\r\n            int16 feeBaseE4,\r\n            bool isBondSale\r\n        )\r\n    {\r\n        return _getVsEthPool(poolID);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer ETH to this contract and allow this contract to pay ETH when exchanging.\r\n     */\r\n    function depositEth() external payable {\r\n        _addEthAllowance(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw all deposited ETH.\r\n     */\r\n    function withdrawEth() external returns (uint256 amount) {\r\n        amount = _depositedEth[msg.sender];\r\n        _transferEthFrom(msg.sender, msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns deposited ETH amount.\r\n     */\r\n    function ethAllowance(address owner) external view returns (uint256 amount) {\r\n        amount = _depositedEth[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Exchange buyer's ETH to the seller's bond.\r\n     * Ensure the seller has approved sufficient bonds and\r\n     * buyer deposit ETH to pay before executing this function.\r\n     * @param buyer is the buyer address.\r\n     * @param bondID is the target bond ID.\r\n     * @param poolID is the target pool ID.\r\n     * @param swapPairAmount is the exchange pair token amount to pay.\r\n     * @return bondAmount is the received bond amount.\r\n     */\r\n    function _exchangeEthToBond(\r\n        address buyer,\r\n        bytes32 bondID,\r\n        bytes32 poolID,\r\n        uint256 swapPairAmount\r\n    ) internal returns (uint256 bondAmount) {\r\n        (address seller, , , , bool isBondSale) = _getVsEthPool(poolID);\r\n        require(isBondSale, \"This pool is for buying bond\");\r\n\r\n        (ERC20 bondToken, , , ) = _getBond(_bondMakerContract, bondID);\r\n        require(address(bondToken) != address(0), \"the bond is not registered\");\r\n\r\n        uint256 volumeE8;\r\n        {\r\n            (uint256 rateE8, , uint256 swapPairPriceE8, ) = _calcRateBondToEth(bondID, poolID);\r\n            require(rateE8 > MIN_EXCHANGE_RATE_E8, \"exchange rate is too small\");\r\n            require(rateE8 < MAX_EXCHANGE_RATE_E8, \"exchange rate is too large\");\r\n            bondAmount =\r\n                _applyDecimalGap(swapPairAmount, DECIMALS_OF_ETH, DECIMALS_OF_BOND + 8) /\r\n                rateE8;\r\n            require(bondAmount != 0, \"must transfer non-zero bond amount\");\r\n            volumeE8 = swapPairPriceE8.mul(swapPairAmount).div(10**uint256(DECIMALS_OF_ETH));\r\n        }\r\n\r\n        require(bondToken.transferFrom(seller, buyer, bondAmount), \"fail to transfer bonds\");\r\n        _transferEthFrom(buyer, seller, swapPairAmount);\r\n\r\n        emit LogExchangeEthToBond(buyer, bondID, poolID, bondAmount, swapPairAmount, volumeE8);\r\n    }\r\n\r\n    /**\r\n     * @dev Exchange buyer's bond to the seller's ETH.\r\n     * Ensure the seller has deposited sufficient ETH and\r\n     * buyer approve bonds to pay before executing this function.\r\n     * @param buyer is the buyer address.\r\n     * @param bondID is the target bond ID.\r\n     * @param poolID is the target pool ID.\r\n     * @param bondAmount is the bond amount to pay.\r\n     * @return swapPairAmount is the received ETH amount.\r\n     */\r\n    function _exchangeBondToEth(\r\n        address buyer,\r\n        bytes32 bondID,\r\n        bytes32 poolID,\r\n        uint256 bondAmount\r\n    ) internal returns (uint256 swapPairAmount) {\r\n        (address seller, , , , bool isBondSale) = _getVsEthPool(poolID);\r\n        require(!isBondSale, \"This pool is not for buying bond\");\r\n\r\n        (ERC20 bondToken, , , ) = _getBond(_bondMakerContract, bondID);\r\n        require(address(bondToken) != address(0), \"the bond is not registered\");\r\n\r\n        uint256 volumeE8;\r\n        {\r\n            (uint256 rateE8, uint256 bondPriceE8, , ) = _calcRateBondToEth(bondID, poolID);\r\n            require(rateE8 > MIN_EXCHANGE_RATE_E8, \"exchange rate is too small\");\r\n            require(rateE8 < MAX_EXCHANGE_RATE_E8, \"exchange rate is too large\");\r\n            swapPairAmount = _applyDecimalGap(\r\n                bondAmount.mul(rateE8),\r\n                DECIMALS_OF_BOND + 8,\r\n                DECIMALS_OF_ETH\r\n            );\r\n            require(swapPairAmount != 0, \"must transfer non-zero token amount\");\r\n            volumeE8 = bondPriceE8.mul(bondAmount).div(10**uint256(DECIMALS_OF_BOND));\r\n        }\r\n\r\n        require(bondToken.transferFrom(buyer, seller, bondAmount), \"fail to transfer bonds\");\r\n        _transferEthFrom(seller, buyer, swapPairAmount);\r\n\r\n        emit LogExchangeBondToEth(buyer, bondID, poolID, bondAmount, swapPairAmount, volumeE8);\r\n    }\r\n\r\n    function _calcRateBondToEth(bytes32 bondID, bytes32 poolID)\r\n        internal\r\n        returns (\r\n            uint256 rateE8,\r\n            uint256 bondPriceE8,\r\n            uint256 swapPairPriceE8,\r\n            int256 spreadE8\r\n        )\r\n    {\r\n        (\r\n            ,\r\n            LatestPriceOracleInterface ethOracle,\r\n            BondPricerInterface bondPricer,\r\n            int16 feeBaseE4,\r\n            bool isBondSale\r\n        ) = _getVsEthPool(poolID);\r\n        swapPairPriceE8 = _getLatestPrice(ethOracle);\r\n        (bondPriceE8, spreadE8) = _calcBondPriceAndSpread(bondPricer, bondID, feeBaseE4);\r\n        bondPriceE8 = _calcUsdPrice(bondPriceE8);\r\n        rateE8 = bondPriceE8.mul(10**8).div(swapPairPriceE8, \"ERC20 oracle price must be non-zero\");\r\n\r\n        // `spreadE8` is less than 0.15 * 10**8.\r\n        if (isBondSale) {\r\n            rateE8 = rateE8.mul(uint256(10**8 + spreadE8)) / 10**8;\r\n        } else {\r\n            rateE8 = rateE8.mul(uint256(10**8 - spreadE8)) / 10**8;\r\n        }\r\n    }\r\n\r\n    function _generateVsEthPoolID(address seller, bool isBondSale)\r\n        internal\r\n        view\r\n        returns (bytes32 poolID)\r\n    {\r\n        return keccak256(abi.encode(\"Bond vs ETH exchange\", address(this), seller, isBondSale));\r\n    }\r\n\r\n    function _setVsEthPool(\r\n        bytes32 poolID,\r\n        address seller,\r\n        LatestPriceOracleInterface ethOracle,\r\n        BondPricerInterface bondPricer,\r\n        int16 feeBaseE4,\r\n        bool isBondSale\r\n    ) internal {\r\n        require(seller != address(0), \"the pool ID already exists\");\r\n        require(address(ethOracle) != address(0), \"ethOracle should be non-zero address\");\r\n        require(address(bondPricer) != address(0), \"bondPricer should be non-zero address\");\r\n        _vsEthPool[poolID] = VsEthPool({\r\n            seller: seller,\r\n            ethOracle: ethOracle,\r\n            bondPricer: bondPricer,\r\n            feeBaseE4: feeBaseE4,\r\n            isBondSale: isBondSale\r\n        });\r\n    }\r\n\r\n    function _createVsEthPool(\r\n        address seller,\r\n        LatestPriceOracleInterface ethOracle,\r\n        BondPricerInterface bondPricer,\r\n        int16 feeBaseE4,\r\n        bool isBondSale\r\n    ) internal returns (bytes32 poolID) {\r\n        poolID = _generateVsEthPoolID(seller, isBondSale);\r\n        require(_vsEthPool[poolID].seller == address(0), \"the pool ID already exists\");\r\n\r\n        {\r\n            uint256 price = ethOracle.latestPrice();\r\n            require(\r\n                price != 0,\r\n                \"ethOracle has latestPrice() function which returns non-zero value\"\r\n            );\r\n        }\r\n\r\n        _setVsEthPool(poolID, seller, ethOracle, bondPricer, feeBaseE4, isBondSale);\r\n\r\n        if (isBondSale) {\r\n            emit LogCreateEthToBondPool(poolID, seller);\r\n        } else {\r\n            emit LogCreateBondToEthPool(poolID, seller);\r\n        }\r\n\r\n        emit LogUpdateVsEthPool(poolID, address(ethOracle), address(bondPricer), feeBaseE4);\r\n    }\r\n\r\n    function _updateVsEthPool(\r\n        bytes32 poolID,\r\n        LatestPriceOracleInterface ethOracle,\r\n        BondPricerInterface bondPricer,\r\n        int16 feeBaseE4\r\n    ) internal isExsistentVsEthPool(poolID) {\r\n        (address seller, , , , bool isBondSale) = _getVsEthPool(poolID);\r\n        _setVsEthPool(poolID, seller, ethOracle, bondPricer, feeBaseE4, isBondSale);\r\n\r\n        emit LogUpdateVsEthPool(poolID, address(ethOracle), address(bondPricer), feeBaseE4);\r\n    }\r\n\r\n    function _deleteVsEthPool(bytes32 poolID) internal isExsistentVsEthPool(poolID) {\r\n        delete _vsEthPool[poolID];\r\n\r\n        emit LogDeleteVsEthPool(poolID);\r\n    }\r\n\r\n    function _getVsEthPool(bytes32 poolID)\r\n        internal\r\n        view\r\n        isExsistentVsEthPool(poolID)\r\n        returns (\r\n            address seller,\r\n            LatestPriceOracleInterface ethOracle,\r\n            BondPricerInterface bondPricer,\r\n            int16 feeBaseE4,\r\n            bool isBondSale\r\n        )\r\n    {\r\n        VsEthPool memory exchangePair = _vsEthPool[poolID];\r\n        seller = exchangePair.seller;\r\n        ethOracle = exchangePair.ethOracle;\r\n        bondPricer = exchangePair.bondPricer;\r\n        feeBaseE4 = exchangePair.feeBaseE4;\r\n        isBondSale = exchangePair.isBondSale;\r\n    }\r\n\r\n    function _transferEthFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        _subEthAllowance(sender, amount);\r\n        _transferETH(payable(recipient), amount);\r\n    }\r\n\r\n    function _addEthAllowance(address sender, uint256 amount) internal {\r\n        _depositedEth[sender] += amount;\r\n        require(_depositedEth[sender] >= amount, \"overflow allowance\");\r\n    }\r\n\r\n    function _subEthAllowance(address owner, uint256 amount) internal {\r\n        require(_depositedEth[owner] >= amount, \"insufficient allowance\");\r\n        _depositedEth[owner] -= amount;\r\n    }\r\n}\r\n\r\n// File: contracts/generalizedDotc/BondVsBondExchange.sol\r\n\r\n\r\n\r\n\r\nabstract contract BondVsBondExchange is BondExchange {\r\n    /**\r\n     * @dev the sum of decimalsOfBond and decimalsOfOraclePrice of the bondMaker.\r\n     * This value is constant by the restriction of `_assertBondMakerDecimals`.\r\n     */\r\n    uint8 internal constant DECIMALS_OF_BOND_VALUE = DECIMALS_OF_BOND + DECIMALS_OF_ORACLE_PRICE;\r\n\r\n    struct VsBondPool {\r\n        address seller;\r\n        BondMakerInterface bondMakerForUser;\r\n        VolatilityOracleInterface volatilityOracle;\r\n        BondPricerInterface bondPricerForUser;\r\n        BondPricerInterface bondPricer;\r\n        int16 feeBaseE4;\r\n    }\r\n    mapping(bytes32 => VsBondPool) internal _vsBondPool;\r\n\r\n    event LogCreateBondToBondPool(\r\n        bytes32 indexed poolID,\r\n        address indexed seller,\r\n        address indexed bondMakerForUser\r\n    );\r\n\r\n    event LogUpdateVsBondPool(\r\n        bytes32 indexed poolID,\r\n        address bondPricerForUser,\r\n        address bondPricer,\r\n        int16 feeBase // decimal: 4\r\n    );\r\n\r\n    event LogDeleteVsBondPool(bytes32 indexed poolID);\r\n\r\n    event LogExchangeBondToBond(\r\n        address indexed buyer,\r\n        bytes32 indexed bondID,\r\n        bytes32 indexed poolID,\r\n        uint256 bondAmount, // decimal: 8\r\n        uint256 swapPairAmount, // USD, decimal: 8\r\n        uint256 volume // USD, decimal: 8\r\n    );\r\n\r\n    /**\r\n     * @dev Reverts when the pool ID does not exist.\r\n     */\r\n    modifier isExsistentVsBondPool(bytes32 poolID) {\r\n        require(_vsBondPool[poolID].seller != address(0), \"the exchange pair does not exist\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Exchange the seller's bond to buyer's multiple bonds.\r\n     * @dev Ensure the seller has approved sufficient bonds and\r\n     * Approve bonds to pay before executing this function.\r\n     * @param bondID is the target bond ID.\r\n     * @param poolID is the target pool ID.\r\n     * @param amountInDollarsE8 is the exchange pair token amount to pay. (decimals: 8)\r\n     * @param expectedAmount is the bond amount to receive. (decimals: 8)\r\n     * @param range (decimal: 3)\r\n     */\r\n    function exchangeBondToBond(\r\n        bytes32 bondID,\r\n        bytes32 poolID,\r\n        bytes32[] calldata bondIDs,\r\n        uint256 amountInDollarsE8,\r\n        uint256 expectedAmount,\r\n        uint256 range\r\n    ) external returns (uint256 bondAmount) {\r\n        uint256 amountInDollars = _applyDecimalGap(amountInDollarsE8, 8, DECIMALS_OF_BOND_VALUE);\r\n        bondAmount = _exchangeBondToBond(msg.sender, bondID, poolID, bondIDs, amountInDollars);\r\n        _assertExpectedPriceRange(bondAmount, expectedAmount, range);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the exchange rate including spread.\r\n     */\r\n    function calcRateBondToUsd(bytes32 bondID, bytes32 poolID) external returns (uint256 rateE8) {\r\n        (rateE8, , , ) = _calcRateBondToUsd(bondID, poolID);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns pool ID generated by the immutable pool settings.\r\n     */\r\n    function generateVsBondPoolID(address seller, address bondMakerForUser)\r\n        external\r\n        view\r\n        returns (bytes32 poolID)\r\n    {\r\n        return _generateVsBondPoolID(seller, bondMakerForUser);\r\n    }\r\n\r\n    /**\r\n     * @notice Register a new vsBondPool.\r\n     */\r\n    function createVsBondPool(\r\n        BondMakerInterface bondMakerForUserAddress,\r\n        VolatilityOracleInterface volatilityOracleAddress,\r\n        BondPricerInterface bondPricerForUserAddress,\r\n        BondPricerInterface bondPricerAddress,\r\n        int16 feeBaseE4\r\n    ) external returns (bytes32 poolID) {\r\n        return\r\n            _createVsBondPool(\r\n                msg.sender,\r\n                bondMakerForUserAddress,\r\n                volatilityOracleAddress,\r\n                bondPricerForUserAddress,\r\n                bondPricerAddress,\r\n                feeBaseE4\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Update the mutable pool settings.\r\n     */\r\n    function updateVsBondPool(\r\n        bytes32 poolID,\r\n        VolatilityOracleInterface volatilityOracleAddress,\r\n        BondPricerInterface bondPricerForUserAddress,\r\n        BondPricerInterface bondPricerAddress,\r\n        int16 feeBaseE4\r\n    ) external {\r\n        require(_vsBondPool[poolID].seller == msg.sender, \"not the owner of the pool ID\");\r\n\r\n        _updateVsBondPool(\r\n            poolID,\r\n            volatilityOracleAddress,\r\n            bondPricerForUserAddress,\r\n            bondPricerAddress,\r\n            feeBaseE4\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Delete the pool settings.\r\n     */\r\n    function deleteVsBondPool(bytes32 poolID) external {\r\n        require(_vsBondPool[poolID].seller == msg.sender, \"not the owner of the pool ID\");\r\n\r\n        _deleteVsBondPool(poolID);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the pool settings.\r\n     */\r\n    function getVsBondPool(bytes32 poolID)\r\n        external\r\n        view\r\n        returns (\r\n            address seller,\r\n            BondMakerInterface bondMakerForUserAddress,\r\n            VolatilityOracleInterface volatilityOracle,\r\n            BondPricerInterface bondPricerForUserAddress,\r\n            BondPricerInterface bondPricerAddress,\r\n            int16 feeBaseE4,\r\n            bool isBondSale\r\n        )\r\n    {\r\n        return _getVsBondPool(poolID);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the total approved bond amount in U.S. dollars.\r\n     * Unnecessary bond must not be included in bondIDs.\r\n     */\r\n    function totalBondAllowance(\r\n        bytes32 poolID,\r\n        bytes32[] calldata bondIDs,\r\n        uint256 maturityBorder,\r\n        address owner\r\n    ) external returns (uint256 allowanceInDollarsE8) {\r\n        (\r\n            ,\r\n            BondMakerInterface bondMakerForUser,\r\n            VolatilityOracleInterface volatilityOracle,\r\n            BondPricerInterface bondPricerForUser,\r\n            ,\r\n            ,\r\n\r\n        ) = _getVsBondPool(poolID);\r\n        uint256 allowanceInDollars = _totalBondAllowance(\r\n            bondMakerForUser,\r\n            volatilityOracle,\r\n            bondPricerForUser,\r\n            bondIDs,\r\n            maturityBorder,\r\n            owner\r\n        );\r\n        allowanceInDollarsE8 = _applyDecimalGap(allowanceInDollars, DECIMALS_OF_BOND_VALUE, 8);\r\n    }\r\n\r\n    /**\r\n     * @dev Exchange the seller's bond to buyer's multiple bonds.\r\n     * Ensure the seller has approved sufficient bonds and\r\n     * buyer approve bonds to pay before executing this function.\r\n     * @param buyer is the buyer address.\r\n     * @param bondID is the target bond ID.\r\n     * @param poolID is the target pool ID.\r\n     * @param amountInDollars is the exchange pair token amount to pay. (decimals: 16)\r\n     * @return bondAmount is the received bond amount.\r\n     */\r\n    function _exchangeBondToBond(\r\n        address buyer,\r\n        bytes32 bondID,\r\n        bytes32 poolID,\r\n        bytes32[] memory bondIDs,\r\n        uint256 amountInDollars\r\n    ) internal returns (uint256 bondAmount) {\r\n        require(bondIDs.length != 0, \"must input bonds for payment\");\r\n\r\n        BondMakerInterface bondMakerForUser;\r\n        {\r\n            bool isBondSale;\r\n            (, bondMakerForUser, , , , , isBondSale) = _getVsBondPool(poolID);\r\n            require(isBondSale, \"This pool is for buying bond\");\r\n        }\r\n\r\n        (ERC20 bondToken, uint256 maturity, , ) = _getBond(_bondMakerContract, bondID);\r\n        require(address(bondToken) != address(0), \"the bond is not registered\");\r\n\r\n        {\r\n            (uint256 rateE8, , , ) = _calcRateBondToUsd(bondID, poolID);\r\n            require(rateE8 > MIN_EXCHANGE_RATE_E8, \"exchange rate is too small\");\r\n            require(rateE8 < MAX_EXCHANGE_RATE_E8, \"exchange rate is too large\");\r\n            bondAmount =\r\n                _applyDecimalGap(\r\n                    amountInDollars,\r\n                    DECIMALS_OF_BOND_VALUE,\r\n                    bondToken.decimals() + 8\r\n                ) /\r\n                rateE8;\r\n            require(bondAmount != 0, \"must transfer non-zero bond amount\");\r\n        }\r\n\r\n        {\r\n            (\r\n                address seller,\r\n                ,\r\n                VolatilityOracleInterface volatilityOracle,\r\n                BondPricerInterface bondPricerForUser,\r\n                ,\r\n                ,\r\n\r\n            ) = _getVsBondPool(poolID);\r\n            require(bondToken.transferFrom(seller, buyer, bondAmount), \"fail to transfer bonds\");\r\n\r\n            address buyerTmp = buyer; // avoid `stack too deep` error\r\n            uint256 amountInDollarsTmp = amountInDollars; // avoid `stack too deep` error\r\n            require(\r\n                _batchTransferBondFrom(\r\n                    bondMakerForUser,\r\n                    volatilityOracle,\r\n                    bondPricerForUser,\r\n                    bondIDs,\r\n                    maturity,\r\n                    buyerTmp,\r\n                    seller,\r\n                    amountInDollarsTmp\r\n                ),\r\n                \"fail to transfer ERC20 token\"\r\n            );\r\n        }\r\n\r\n        uint256 volumeE8 = _applyDecimalGap(amountInDollars, DECIMALS_OF_BOND_VALUE, 8);\r\n        emit LogExchangeBondToBond(buyer, bondID, poolID, bondAmount, amountInDollars, volumeE8);\r\n    }\r\n\r\n    function _calcRateBondToUsd(bytes32 bondID, bytes32 poolID)\r\n        internal\r\n        returns (\r\n            uint256 rateE8,\r\n            uint256 bondPriceE8,\r\n            uint256 swapPairPriceE8,\r\n            int256 spreadE8\r\n        )\r\n    {\r\n        (, , , , BondPricerInterface bondPricer, int16 feeBaseE4, ) = _getVsBondPool(poolID);\r\n        (bondPriceE8, spreadE8) = _calcBondPriceAndSpread(bondPricer, bondID, feeBaseE4);\r\n        bondPriceE8 = _calcUsdPrice(bondPriceE8);\r\n        swapPairPriceE8 = 10**8;\r\n        rateE8 = bondPriceE8.mul(uint256(10**8 + spreadE8)) / 10**8;\r\n    }\r\n\r\n    function _generateVsBondPoolID(address seller, address bondMakerForUser)\r\n        internal\r\n        view\r\n        returns (bytes32 poolID)\r\n    {\r\n        return\r\n            keccak256(abi.encode(\"Bond vs SBT exchange\", address(this), seller, bondMakerForUser));\r\n    }\r\n\r\n    function _setVsBondPool(\r\n        bytes32 poolID,\r\n        address seller,\r\n        BondMakerInterface bondMakerForUser,\r\n        VolatilityOracleInterface volatilityOracle,\r\n        BondPricerInterface bondPricerForUser,\r\n        BondPricerInterface bondPricer,\r\n        int16 feeBaseE4\r\n    ) internal {\r\n        require(seller != address(0), \"the pool ID already exists\");\r\n        require(\r\n            address(bondMakerForUser) != address(0),\r\n            \"bondMakerForUser should be non-zero address\"\r\n        );\r\n        require(\r\n            address(bondPricerForUser) != address(0),\r\n            \"bondPricerForUser should be non-zero address\"\r\n        );\r\n        require(address(bondPricer) != address(0), \"bondPricer should be non-zero address\");\r\n        _assertBondMakerDecimals(bondMakerForUser);\r\n        _vsBondPool[poolID] = VsBondPool({\r\n            seller: seller,\r\n            bondMakerForUser: bondMakerForUser,\r\n            volatilityOracle: volatilityOracle,\r\n            bondPricerForUser: bondPricerForUser,\r\n            bondPricer: bondPricer,\r\n            feeBaseE4: feeBaseE4\r\n        });\r\n    }\r\n\r\n    function _createVsBondPool(\r\n        address seller,\r\n        BondMakerInterface bondMakerForUser,\r\n        VolatilityOracleInterface volatilityOracle,\r\n        BondPricerInterface bondPricerForUser,\r\n        BondPricerInterface bondPricer,\r\n        int16 feeBaseE4\r\n    ) internal returns (bytes32 poolID) {\r\n        poolID = _generateVsBondPoolID(seller, address(bondMakerForUser));\r\n        require(_vsBondPool[poolID].seller == address(0), \"the pool ID already exists\");\r\n\r\n        _assertBondMakerDecimals(bondMakerForUser);\r\n        _setVsBondPool(\r\n            poolID,\r\n            seller,\r\n            bondMakerForUser,\r\n            volatilityOracle,\r\n            bondPricerForUser,\r\n            bondPricer,\r\n            feeBaseE4\r\n        );\r\n\r\n        emit LogCreateBondToBondPool(poolID, seller, address(bondMakerForUser));\r\n        emit LogUpdateVsBondPool(\r\n            poolID,\r\n            address(bondPricerForUser),\r\n            address(bondPricer),\r\n            feeBaseE4\r\n        );\r\n    }\r\n\r\n    function _updateVsBondPool(\r\n        bytes32 poolID,\r\n        VolatilityOracleInterface volatilityOracle,\r\n        BondPricerInterface bondPricerForUser,\r\n        BondPricerInterface bondPricer,\r\n        int16 feeBaseE4\r\n    ) internal isExsistentVsBondPool(poolID) {\r\n        (address seller, BondMakerInterface bondMakerForUser, , , , , ) = _getVsBondPool(poolID);\r\n        _setVsBondPool(\r\n            poolID,\r\n            seller,\r\n            bondMakerForUser,\r\n            volatilityOracle,\r\n            bondPricerForUser,\r\n            bondPricer,\r\n            feeBaseE4\r\n        );\r\n\r\n        emit LogUpdateVsBondPool(\r\n            poolID,\r\n            address(bondPricerForUser),\r\n            address(bondPricer),\r\n            feeBaseE4\r\n        );\r\n    }\r\n\r\n    function _deleteVsBondPool(bytes32 poolID) internal isExsistentVsBondPool(poolID) {\r\n        delete _vsBondPool[poolID];\r\n\r\n        emit LogDeleteVsBondPool(poolID);\r\n    }\r\n\r\n    function _getVsBondPool(bytes32 poolID)\r\n        internal\r\n        view\r\n        isExsistentVsBondPool(poolID)\r\n        returns (\r\n            address seller,\r\n            BondMakerInterface bondMakerForUser,\r\n            VolatilityOracleInterface volatilityOracle,\r\n            BondPricerInterface bondPricerForUser,\r\n            BondPricerInterface bondPricer,\r\n            int16 feeBaseE4,\r\n            bool isBondSale\r\n        )\r\n    {\r\n        VsBondPool memory exchangePair = _vsBondPool[poolID];\r\n        seller = exchangePair.seller;\r\n        bondMakerForUser = exchangePair.bondMakerForUser;\r\n        volatilityOracle = exchangePair.volatilityOracle;\r\n        bondPricerForUser = exchangePair.bondPricerForUser;\r\n        bondPricer = exchangePair.bondPricer;\r\n        feeBaseE4 = exchangePair.feeBaseE4;\r\n        isBondSale = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer multiple bonds in one method.\r\n     * Unnecessary bonds can be included in bondIDs.\r\n     */\r\n    function _batchTransferBondFrom(\r\n        BondMakerInterface bondMaker,\r\n        VolatilityOracleInterface volatilityOracle,\r\n        BondPricerInterface bondPricer,\r\n        bytes32[] memory bondIDs,\r\n        uint256 maturityBorder,\r\n        address sender,\r\n        address recipient,\r\n        uint256 amountInDollars\r\n    ) internal returns (bool ok) {\r\n        uint256 oraclePriceE8 = _getLatestPrice(bondMaker.oracleAddress());\r\n\r\n        uint256 rest = amountInDollars; // mutable\r\n        for (uint256 i = 0; i < bondIDs.length; i++) {\r\n            ERC20 bond;\r\n            uint256 oracleVolE8;\r\n            {\r\n                uint256 maturity;\r\n                (bond, maturity, , ) = _getBond(bondMaker, bondIDs[i]);\r\n                if (maturity > maturityBorder) continue; // skip transaction\r\n                uint256 untilMaturity = maturity.sub(\r\n                    _getBlockTimestampSec(),\r\n                    \"the bond should not have expired\"\r\n                );\r\n                oracleVolE8 = _getVolatility(volatilityOracle, untilMaturity.toUint64());\r\n            }\r\n\r\n            uint256 allowance = bond.allowance(sender, address(this));\r\n            if (allowance == 0) continue; // skip transaction\r\n\r\n            BondMakerInterface bondMakerTmp = bondMaker; // avoid `stack too deep` error\r\n            BondPricerInterface bondPricerTmp = bondPricer; // avoid `stack too deep` error\r\n            bytes32 bondIDTmp = bondIDs[i]; // avoid `stack too deep` error\r\n            uint256 bondPrice = _calcBondPrice(\r\n                bondMakerTmp,\r\n                bondPricerTmp,\r\n                bondIDTmp,\r\n                oraclePriceE8,\r\n                oracleVolE8\r\n            );\r\n            if (bondPrice == 0) continue; // skip transaction\r\n\r\n            if (rest <= allowance.mul(bondPrice)) {\r\n                // assert(ceil(rest / bondPrice) <= allowance);\r\n                return bond.transferFrom(sender, recipient, rest.divRoundUp(bondPrice));\r\n            }\r\n\r\n            require(bond.transferFrom(sender, recipient, allowance), \"fail to transfer bonds\");\r\n            rest -= allowance * bondPrice;\r\n        }\r\n\r\n        revert(\"insufficient bond allowance\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total approved bond amount in U.S. dollars.\r\n     * Unnecessary bond must not be included in bondIDs.\r\n     */\r\n    function _totalBondAllowance(\r\n        BondMakerInterface bondMaker,\r\n        VolatilityOracleInterface volatilityOracle,\r\n        BondPricerInterface bondPricer,\r\n        bytes32[] memory bondIDs,\r\n        uint256 maturityBorder,\r\n        address sender\r\n    ) internal returns (uint256 allowanceInDollars) {\r\n        uint256 oraclePriceE8 = _getLatestPrice(bondMaker.oracleAddress());\r\n\r\n        for (uint256 i = 0; i < bondIDs.length; i++) {\r\n            ERC20 bond;\r\n            uint256 oracleVolE8;\r\n            {\r\n                uint256 maturity;\r\n                (bond, maturity, , ) = _getBond(bondMaker, bondIDs[i]);\r\n                if (maturity > maturityBorder) continue; // skip\r\n                uint256 untilMaturity = maturity.sub(\r\n                    _getBlockTimestampSec(),\r\n                    \"the bond should not have expired\"\r\n                );\r\n                oracleVolE8 = _getVolatility(volatilityOracle, untilMaturity.toUint64());\r\n            }\r\n\r\n            uint256 balance = bond.balanceOf(sender);\r\n            require(balance != 0, \"includes no bond balance\");\r\n\r\n            uint256 allowance = bond.allowance(sender, address(this));\r\n            require(allowance != 0, \"includes no approved bond\");\r\n\r\n            uint256 bondPrice = _calcBondPrice(\r\n                bondMaker,\r\n                bondPricer,\r\n                bondIDs[i],\r\n                oraclePriceE8,\r\n                oracleVolE8\r\n            );\r\n            require(bondPrice != 0, \"includes worthless bond\");\r\n\r\n            allowanceInDollars = allowanceInDollars.add(allowance.mul(bondPrice));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate bond price by bond ID.\r\n     */\r\n    function _calcBondPrice(\r\n        BondMakerInterface bondMaker,\r\n        BondPricerInterface bondPricer,\r\n        bytes32 bondID,\r\n        uint256 oraclePriceE8,\r\n        uint256 oracleVolatilityE8\r\n    ) internal view returns (uint256) {\r\n        int256 untilMaturity;\r\n        {\r\n            (, uint256 maturity, , ) = _getBond(bondMaker, bondID);\r\n            untilMaturity = maturity\r\n                .sub(_getBlockTimestampSec(), \"the bond should not have expired\")\r\n                .toInt256();\r\n        }\r\n\r\n        BondType bondType;\r\n        uint256[] memory points;\r\n        {\r\n            bool isKnownBondType;\r\n            (isKnownBondType, bondType, points) = _bondShapeDetector.getBondTypeByID(\r\n                bondMaker,\r\n                bondID,\r\n                BondType.NONE\r\n            );\r\n            if (!isKnownBondType) {\r\n                revert(\"unknown bond type\");\r\n                // return 0;\r\n            }\r\n        }\r\n\r\n        try\r\n            bondPricer.calcPriceAndLeverage(\r\n                bondType,\r\n                points,\r\n                oraclePriceE8.toInt256(),\r\n                oracleVolatilityE8.toInt256(),\r\n                untilMaturity\r\n            )\r\n        returns (uint256 bondPriceE8, uint256) {\r\n            return bondPriceE8;\r\n        } catch {\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/generalizedDotc/GeneralizedDotc.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract GeneralizedDotc is BondVsBondExchange, BondVsErc20Exchange, BondVsEthExchange {\r\n    constructor(\r\n        BondMakerInterface bondMakerAddress,\r\n        VolatilityOracleInterface volatilityOracleAddress,\r\n        LatestPriceOracleInterface volumeCalculatorAddress,\r\n        DetectBondShape bondShapeDetector\r\n    )\r\n        public\r\n        BondExchange(\r\n            bondMakerAddress,\r\n            volatilityOracleAddress,\r\n            volumeCalculatorAddress,\r\n            bondShapeDetector\r\n        )\r\n    {}\r\n}\r\n\r\n// File: contracts/generalizedDotc/ModifiedGeneralizedDotc.sol\r\n\r\n\r\n\r\n\r\ncontract ModifiedGeneralizedDotc is GeneralizedDotc {\r\n    constructor(\r\n        BondMakerInterface bondMakerAddress,\r\n        VolatilityOracleInterface volatilityOracleAddress,\r\n        LatestPriceOracleInterface volumeCalculatorAddress,\r\n        DetectBondShape bondShapeDetector\r\n    )\r\n        public\r\n        GeneralizedDotc(\r\n            bondMakerAddress,\r\n            volatilityOracleAddress,\r\n            volumeCalculatorAddress,\r\n            bondShapeDetector\r\n        )\r\n    {}\r\n\r\n    /**\r\n     * @notice Exchange buyer's ETH to the seller's bond.\r\n     * @dev Ensure the seller has approved sufficient bonds before executing this function.\r\n     * @param bondID is the target bond ID.\r\n     * @param poolID is the target pool ID.¥\r\n     * @param expectedAmount is the bond amount to receive.\r\n     * @param range (decimal: 3)\r\n     */\r\n    function exchangeEthToBond(\r\n        bytes32 bondID,\r\n        bytes32 poolID,\r\n        uint256 expectedAmount,\r\n        uint256 range\r\n    ) external payable returns (uint256 bondAmount) {\r\n        uint256 ethAmount = msg.value;\r\n\r\n        _addEthAllowance(msg.sender, ethAmount);\r\n\r\n        bondAmount = _exchangeEthToBond(msg.sender, bondID, poolID, ethAmount);\r\n        // assert(bondAmount != 0);\r\n        _assertExpectedPriceRange(bondAmount, expectedAmount, range);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract BondMakerInterface\",\"name\":\"bondMakerAddress\",\"type\":\"address\"},{\"internalType\":\"contract VolatilityOracleInterface\",\"name\":\"volatilityOracleAddress\",\"type\":\"address\"},{\"internalType\":\"contract LatestPriceOracleInterface\",\"name\":\"volumeCalculatorAddress\",\"type\":\"address\"},{\"internalType\":\"contract DetectBondShape\",\"name\":\"bondShapeDetector\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bondMakerForUser\",\"type\":\"address\"}],\"name\":\"LogCreateBondToBondPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapPairAddress\",\"type\":\"address\"}],\"name\":\"LogCreateBondToErc20Pool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"LogCreateBondToEthPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapPairAddress\",\"type\":\"address\"}],\"name\":\"LogCreateErc20ToBondPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"LogCreateEthToBondPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"}],\"name\":\"LogDeleteVsBondPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"}],\"name\":\"LogDeleteVsErc20Pool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"}],\"name\":\"LogDeleteVsEthPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"bondID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapPairAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"volume\",\"type\":\"uint256\"}],\"name\":\"LogExchangeBondToBond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"bondID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapPairAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"volume\",\"type\":\"uint256\"}],\"name\":\"LogExchangeBondToErc20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"bondID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapPairAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"volume\",\"type\":\"uint256\"}],\"name\":\"LogExchangeBondToEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"bondID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapPairAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"volume\",\"type\":\"uint256\"}],\"name\":\"LogExchangeErc20ToBond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"bondID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapPairAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"volume\",\"type\":\"uint256\"}],\"name\":\"LogExchangeEthToBond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogTransferETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bondPricerForUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bondPricer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int16\",\"name\":\"feeBase\",\"type\":\"int16\"}],\"name\":\"LogUpdateVsBondPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapPairOracleAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bondPricerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int16\",\"name\":\"feeBase\",\"type\":\"int16\"}],\"name\":\"LogUpdateVsErc20Pool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ethOracleAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bondPricerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int16\",\"name\":\"feeBase\",\"type\":\"int16\"}],\"name\":\"LogUpdateVsEthPool\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bondMakerAddress\",\"outputs\":[{\"internalType\":\"contract BondMakerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"bondID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"}],\"name\":\"calcRateBondToErc20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rateE8\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"bondID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"}],\"name\":\"calcRateBondToEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rateE8\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"bondID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"}],\"name\":\"calcRateBondToUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rateE8\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract BondMakerInterface\",\"name\":\"bondMakerForUserAddress\",\"type\":\"address\"},{\"internalType\":\"contract VolatilityOracleInterface\",\"name\":\"volatilityOracleAddress\",\"type\":\"address\"},{\"internalType\":\"contract BondPricerInterface\",\"name\":\"bondPricerForUserAddress\",\"type\":\"address\"},{\"internalType\":\"contract BondPricerInterface\",\"name\":\"bondPricerAddress\",\"type\":\"address\"},{\"internalType\":\"int16\",\"name\":\"feeBaseE4\",\"type\":\"int16\"}],\"name\":\"createVsBondPool\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"swapPairAddress\",\"type\":\"address\"},{\"internalType\":\"contract LatestPriceOracleInterface\",\"name\":\"swapPairOracleAddress\",\"type\":\"address\"},{\"internalType\":\"contract BondPricerInterface\",\"name\":\"bondPricerAddress\",\"type\":\"address\"},{\"internalType\":\"int16\",\"name\":\"feeBaseE4\",\"type\":\"int16\"},{\"internalType\":\"bool\",\"name\":\"isBondSale\",\"type\":\"bool\"}],\"name\":\"createVsErc20Pool\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract LatestPriceOracleInterface\",\"name\":\"ethOracleAddress\",\"type\":\"address\"},{\"internalType\":\"contract BondPricerInterface\",\"name\":\"bondPricerAddress\",\"type\":\"address\"},{\"internalType\":\"int16\",\"name\":\"feeBaseE4\",\"type\":\"int16\"},{\"internalType\":\"bool\",\"name\":\"isBondSale\",\"type\":\"bool\"}],\"name\":\"createVsEthPool\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"}],\"name\":\"deleteVsBondPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"}],\"name\":\"deleteVsErc20Pool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"}],\"name\":\"deleteVsEthPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ethAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"bondID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"bondIDs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"amountInDollarsE8\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"range\",\"type\":\"uint256\"}],\"name\":\"exchangeBondToBond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"bondID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"range\",\"type\":\"uint256\"}],\"name\":\"exchangeBondToErc20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapPairAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"bondID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"range\",\"type\":\"uint256\"}],\"name\":\"exchangeBondToEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"bondID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"swapPairAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"range\",\"type\":\"uint256\"}],\"name\":\"exchangeErc20ToBond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"bondID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"range\",\"type\":\"uint256\"}],\"name\":\"exchangeEthToBond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"bondID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expectedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"range\",\"type\":\"uint256\"}],\"name\":\"exchangeEthToBond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bondMakerForUser\",\"type\":\"address\"}],\"name\":\"generateVsBondPoolID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapPairAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBondSale\",\"type\":\"bool\"}],\"name\":\"generateVsErc20PoolID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBondSale\",\"type\":\"bool\"}],\"name\":\"generateVsEthPoolID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"}],\"name\":\"getVsBondPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"contract BondMakerInterface\",\"name\":\"bondMakerForUserAddress\",\"type\":\"address\"},{\"internalType\":\"contract VolatilityOracleInterface\",\"name\":\"volatilityOracle\",\"type\":\"address\"},{\"internalType\":\"contract BondPricerInterface\",\"name\":\"bondPricerForUserAddress\",\"type\":\"address\"},{\"internalType\":\"contract BondPricerInterface\",\"name\":\"bondPricerAddress\",\"type\":\"address\"},{\"internalType\":\"int16\",\"name\":\"feeBaseE4\",\"type\":\"int16\"},{\"internalType\":\"bool\",\"name\":\"isBondSale\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"}],\"name\":\"getVsErc20Pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"swapPairAddress\",\"type\":\"address\"},{\"internalType\":\"contract LatestPriceOracleInterface\",\"name\":\"swapPairOracleAddress\",\"type\":\"address\"},{\"internalType\":\"contract BondPricerInterface\",\"name\":\"bondPricerAddress\",\"type\":\"address\"},{\"internalType\":\"int16\",\"name\":\"feeBaseE4\",\"type\":\"int16\"},{\"internalType\":\"bool\",\"name\":\"isBondSale\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"}],\"name\":\"getVsEthPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"contract LatestPriceOracleInterface\",\"name\":\"ethOracleAddress\",\"type\":\"address\"},{\"internalType\":\"contract BondPricerInterface\",\"name\":\"bondPricerAddress\",\"type\":\"address\"},{\"internalType\":\"int16\",\"name\":\"feeBaseE4\",\"type\":\"int16\"},{\"internalType\":\"bool\",\"name\":\"isBondSale\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"bondIDs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"maturityBorder\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"totalBondAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allowanceInDollarsE8\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"},{\"internalType\":\"contract VolatilityOracleInterface\",\"name\":\"volatilityOracleAddress\",\"type\":\"address\"},{\"internalType\":\"contract BondPricerInterface\",\"name\":\"bondPricerForUserAddress\",\"type\":\"address\"},{\"internalType\":\"contract BondPricerInterface\",\"name\":\"bondPricerAddress\",\"type\":\"address\"},{\"internalType\":\"int16\",\"name\":\"feeBaseE4\",\"type\":\"int16\"}],\"name\":\"updateVsBondPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"},{\"internalType\":\"contract LatestPriceOracleInterface\",\"name\":\"swapPairOracleAddress\",\"type\":\"address\"},{\"internalType\":\"contract BondPricerInterface\",\"name\":\"bondPricerAddress\",\"type\":\"address\"},{\"internalType\":\"int16\",\"name\":\"feeBaseE4\",\"type\":\"int16\"}],\"name\":\"updateVsErc20Pool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"},{\"internalType\":\"contract LatestPriceOracleInterface\",\"name\":\"ethOracleAddress\",\"type\":\"address\"},{\"internalType\":\"contract BondPricerInterface\",\"name\":\"bondPricerAddress\",\"type\":\"address\"},{\"internalType\":\"int16\",\"name\":\"feeBaseE4\",\"type\":\"int16\"}],\"name\":\"updateVsEthPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"volumeCalculatorAddress\",\"outputs\":[{\"internalType\":\"contract LatestPriceOracleInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ModifiedGeneralizedDotc","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"000000000000000000000000da6fc5625e617bb92f5359921d43321cebc6bef0000000000000000000000000c8bbb8d57cebf834dc429ec4d65dd23ed0d65a87000000000000000000000000ad491f460d8ee6df3335e8af48de33e0468cd8c9000000000000000000000000a0d773221ca923fb48a0cf1b8309496d198cbfa1","EVMVersion":"constantinople","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4963167d544dd72611668f96d9c0a073f671eb38bdc537e1fa9d2b4f39b2c7e8"}]}