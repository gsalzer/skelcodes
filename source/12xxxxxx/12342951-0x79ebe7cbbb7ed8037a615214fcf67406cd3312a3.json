{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0-or-later\r\n\r\n/// Drizzle.sol -- Drip all mcd collateral types\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface Chainlog {\r\n    function getAddress(bytes32) external returns (address);\r\n}\r\n\r\ninterface IlkRegistry {\r\n    function list() external view returns (bytes32[] memory);\r\n}\r\n\r\ninterface PotLike {\r\n    function drip() external;\r\n}\r\n\r\ninterface JugLike {\r\n    function drip(bytes32) external;\r\n}\r\n\r\ncontract Drizzle {\r\n\r\n    Chainlog    private constant  _chl = Chainlog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\r\n    IlkRegistry private immutable _reg;\r\n    PotLike     private immutable _pot;\r\n    JugLike     private immutable _jug;\r\n\r\n    constructor() public {\r\n        _reg = IlkRegistry(_chl.getAddress(\"ILK_REGISTRY\"));\r\n        _pot = PotLike(_chl.getAddress(\"MCD_POT\"));\r\n        _jug = JugLike(_chl.getAddress(\"MCD_JUG\"));\r\n    }\r\n\r\n    function drizzle(bytes32[] memory ilks) public {\r\n        _pot.drip();\r\n        for (uint256 i = 0; i < ilks.length; i++) {\r\n            _jug.drip(ilks[i]);\r\n        }\r\n    }\r\n\r\n    function drizzle() external {\r\n        bytes32[] memory ilks = _reg.list();\r\n        drizzle(ilks);\r\n    }\r\n\r\n    function registry() external view returns (address) {\r\n        return address(_reg);\r\n    }\r\n\r\n    function pot() external view returns (address) {\r\n        return address(_pot);\r\n    }\r\n\r\n    function jug() external view returns (address) {\r\n        return address(_jug);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"drizzle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"ilks\",\"type\":\"bytes32[]\"}],\"name\":\"drizzle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jug\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Drizzle","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://be18450e7d7a7a17bee4aaa74d5cd86bef62eeac3909297ddb6e5a0a7522f537"}]}