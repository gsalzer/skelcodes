{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/math/SafeMath.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Context.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Strings.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant alphabet = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = alphabet[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/AccessControl.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n    function grantRole(bytes32 role, address account) external;\r\n    function revokeRole(bytes32 role, address account) external;\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping (address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping (bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role, _msgSender());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view {\r\n        if(!hasRole(role, account)) {\r\n            revert(string(abi.encodePacked(\r\n                \"AccessControl: account \",\r\n                Strings.toHexString(uint160(account), 20),\r\n                \" is missing role \",\r\n                Strings.toHexString(uint256(role), 32)\r\n            )));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\r\n        _roles[role].adminRole = adminRole;\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/VestingMultiVault.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title VestingMultiVault\r\n * @dev A token vesting contract that will release tokens gradually like a\r\n * standard equity vesting schedule, with a cliff and vesting period but no\r\n * arbitrary restrictions on the frequency of claims. Optionally has an initial\r\n * tranche claimable immediately after the cliff expires (in addition to any\r\n * amounts that would have vested up to that point but didn't due to a cliff).\r\n */\r\ncontract VestingMultiVault is AccessControl {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    event Issued(\r\n        address indexed beneficiary,\r\n        uint256 indexed allocationId,\r\n        uint256 amount,\r\n        uint256 start,\r\n        uint256 cliff,\r\n        uint256 duration\r\n    );\r\n\r\n    event Released(\r\n        address indexed beneficiary,\r\n        uint256 indexed allocationId,\r\n        uint256 amount,\r\n        uint256 remaining\r\n    );\r\n    \r\n    event Revoked(\r\n        address indexed beneficiary,\r\n        uint256 indexed allocationId,\r\n        uint256 allocationAmount,\r\n        uint256 revokedAmount\r\n    );\r\n\r\n    struct Allocation {\r\n        uint256 start;\r\n        uint256 cliff;\r\n        uint256 duration;\r\n        uint256 total;\r\n        uint256 claimed;\r\n        uint256 initial;\r\n    }\r\n\r\n    // The token being vested.\r\n    IERC20 public immutable token;\r\n\r\n    // The amount unclaimed for an address, whether or not vested.\r\n    mapping(address => uint256) public pendingAmount;\r\n\r\n    // The allocations assigned to an address.\r\n    mapping(address => Allocation[]) public userAllocations;\r\n\r\n    // The precomputed hash of the \"ISSUER\" role.\r\n    bytes32 public constant ISSUER = keccak256(\"ISSUER\");\r\n\r\n    /**\r\n     * @dev Creates a vesting contract that releases allocations of a token\r\n     * over an arbitrary time period with support for tranches and cliffs.\r\n     * @param _token The ERC-20 token to be vested\r\n     */\r\n    constructor(IERC20 _token) {\r\n        token = _token;\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        _setupRole(ISSUER, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a new allocation for a beneficiary. Tokens are released\r\n     * linearly over time until a given number of seconds have passed since the\r\n     * start of the vesting schedule. Callable only by issuers.\r\n     * @param _beneficiary The address to which tokens will be released\r\n     * @param _amount The amount of the allocation (in wei)\r\n     * @param _startAt The unix timestamp at which the vesting may begin\r\n     * @param _cliff The number of seconds after _startAt before which no vesting occurs\r\n     * @param _duration The number of seconds after which the entire allocation is vested\r\n     * @param _initialPct The percentage of the allocation initially available (integer, 0-100)\r\n     */\r\n    function issue(\r\n        address _beneficiary,\r\n        uint256 _amount,\r\n        uint256 _startAt,\r\n        uint256 _cliff,\r\n        uint256 _duration,\r\n        uint256 _initialPct\r\n    ) public onlyRole(ISSUER) {\r\n        require(token.allowance(msg.sender, address(this)) >= _amount, \"Token allowance not sufficient\");\r\n        require(_beneficiary != address(0), \"Cannot grant tokens to the zero address\");\r\n        require(_cliff <= _duration, \"Cliff must not exceed duration\");\r\n        require(_initialPct <= 100, \"Initial release percentage must be an integer 0 to 100 (inclusive)\");\r\n\r\n        // Pull the number of tokens required for the allocation.\r\n        token.safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n        // Increase the total pending for the address.\r\n        pendingAmount[_beneficiary] = pendingAmount[_beneficiary].add(_amount);\r\n\r\n        // Push the new allocation into the stack.\r\n        userAllocations[_beneficiary].push(Allocation({\r\n            claimed:    0,\r\n            cliff:      _cliff,\r\n            duration:   _duration,\r\n            initial:    _amount.mul(_initialPct).div(100),\r\n            start:      _startAt,\r\n            total:      _amount\r\n        }));\r\n        \r\n        emit Issued(\r\n            _beneficiary,\r\n            userAllocations[_beneficiary].length - 1,\r\n            _amount,\r\n            _startAt,\r\n            _cliff,\r\n            _duration\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * @dev Revokes an existing allocation. Any unclaimed tokens are recalled\r\n     * and sent to the caller. Callable only be issuers.\r\n     * @param _beneficiary The address whose allocation is to be revoked\r\n     * @param _id The allocation ID to revoke\r\n     */\r\n    function revoke(\r\n        address _beneficiary,\r\n        uint256 _id\r\n    ) public onlyRole(ISSUER) {\r\n        Allocation storage allocation = userAllocations[_beneficiary][_id];\r\n        \r\n        // Calculate the remaining amount.\r\n        uint256 total = allocation.total;\r\n        uint256 remainder = total.sub(allocation.claimed);\r\n\r\n        // Update the total pending for the address.\r\n        pendingAmount[_beneficiary] = pendingAmount[_beneficiary].sub(remainder);\r\n\r\n        // Update the allocation to be claimed in full.\r\n        allocation.claimed = total;\r\n        \r\n        // Transfer the tokens vested \r\n        token.safeTransfer(msg.sender, remainder);\r\n        emit Revoked(\r\n            _beneficiary,\r\n            _id,\r\n            total,\r\n            remainder\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers vested tokens from an allocation to its beneficiary. Callable by anyone.\r\n     * @param _beneficiary The address that has vested tokens\r\n     * @param _id The vested allocation index\r\n     */\r\n    function release(\r\n        address _beneficiary,\r\n        uint256 _id\r\n    ) public {\r\n        Allocation storage allocation = userAllocations[_beneficiary][_id];\r\n\r\n        // Calculate the releasable amount.\r\n        uint256 amount = _releasableAmount(allocation);\r\n        require(amount > 0, \"Nothing to release\");\r\n        \r\n        // Add the amount to the allocation's total claimed.\r\n        allocation.claimed = allocation.claimed.add(amount);\r\n\r\n        // Subtract the amount from the beneficiary's total pending.\r\n        pendingAmount[_beneficiary] = pendingAmount[_beneficiary].sub(amount);\r\n\r\n        // Transfer the tokens to the beneficiary.\r\n        token.safeTransfer(_beneficiary, amount);\r\n\r\n        emit Released(\r\n            _beneficiary,\r\n            _id,\r\n            amount,\r\n            allocation.total.sub(allocation.claimed)\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * @dev Transfers vested tokens from any number of allocations to their beneficiary. Callable by anyone. May be gas-intensive.\r\n     * @param _beneficiary The address that has vested tokens\r\n     * @param _ids The vested allocation indexes\r\n     */\r\n    function releaseMultiple(\r\n        address _beneficiary,\r\n        uint256[] calldata _ids\r\n    ) external {\r\n        for (uint256 i = 0; i < _ids.length; i++) {\r\n            release(_beneficiary, _ids[i]);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Gets the number of allocations issued for a given address.\r\n     * @param _beneficiary The address to check for allocations\r\n     */\r\n    function allocationCount(\r\n        address _beneficiary\r\n    ) public view returns (uint256 count) {\r\n        return userAllocations[_beneficiary].length;\r\n    }\r\n    \r\n    /**\r\n     * @dev Calculates the amount that has already vested but has not yet been released for a given address.\r\n     * @param _beneficiary Address to check\r\n     * @param _id The allocation index\r\n     */\r\n    function releasableAmount(\r\n        address _beneficiary,\r\n        uint256 _id\r\n    ) public view returns (uint256 amount) {\r\n        Allocation storage allocation = userAllocations[_beneficiary][_id];\r\n        return _releasableAmount(allocation);\r\n    }\r\n    \r\n    /**\r\n     * @dev Gets the total releasable for a given address. Likely gas-intensive, not intended for contract use.\r\n     * @param _beneficiary Address to check\r\n     */\r\n    function totalReleasableAount(\r\n        address _beneficiary\r\n    ) public view returns (uint256 amount) {\r\n        for (uint256 i = 0; i < allocationCount(_beneficiary); i++) {\r\n            amount = amount.add(releasableAmount(_beneficiary, i));\r\n        }\r\n        return amount;\r\n    }\r\n    \r\n    /**\r\n     * @dev Calculates the amount that has vested to date.\r\n     * @param _beneficiary Address to check\r\n     * @param _id The allocation index\r\n     */\r\n    function vestedAmount(\r\n        address _beneficiary,\r\n        uint256 _id\r\n    ) public view returns (uint256) {\r\n        Allocation storage allocation = userAllocations[_beneficiary][_id];\r\n        return _vestedAmount(allocation);\r\n    }\r\n    \r\n    /**\r\n     * @dev Gets the total ever vested for a given address. Likely gas-intensive, not intended for contract use.\r\n     * @param _beneficiary Address to check\r\n     */\r\n    function totalVestedAount(\r\n        address _beneficiary\r\n    ) public view returns (uint256 amount) {\r\n        for (uint256 i = 0; i < allocationCount(_beneficiary); i++) {\r\n            amount = amount.add(vestedAmount(_beneficiary, i));\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount that has already vested but hasn't been released yet.\r\n     * @param allocation Allocation to calculate against\r\n     */\r\n    function _releasableAmount(\r\n        Allocation storage allocation\r\n    ) internal view returns (uint256) {\r\n        return _vestedAmount(allocation).sub(allocation.claimed);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount that has already vested.\r\n     * @param allocation Allocation to calculate against\r\n     */\r\n    function _vestedAmount(\r\n        Allocation storage allocation\r\n    ) internal view returns (uint256 amount) {\r\n        if (block.timestamp < allocation.start.add(allocation.cliff)) {\r\n            // Nothing is vested until after the start time + cliff length.\r\n            amount = 0;\r\n        } else if (block.timestamp >= allocation.start.add(allocation.duration)) {\r\n            // The entire amount has vested if the entire duration has elapsed.\r\n            amount = allocation.total;\r\n        } else {\r\n            // The initial tranche is available once the cliff expires, plus any portion of\r\n            // tokens which have otherwise become vested as of the current block's timestamp.\r\n            amount = allocation.initial.add(\r\n                allocation.total\r\n                    .sub(allocation.initial)\r\n                    .sub(amount)\r\n                    .mul(block.timestamp.sub(allocation.start))\r\n                    .div(allocation.duration)\r\n            );\r\n        }\r\n        \r\n        return amount;\r\n    }\r\n}\r\n\r\n// File: contracts/StakeRewarder.sol\r\n\r\npragma solidity ^0.8.5;\r\n\r\n/**\r\n * @title StakeRewarder\r\n * @dev This contract distributes rewards to depositors of supported tokens.\r\n * It's based on Sushi's MasterChef v1, but notably only serves what's already\r\n * available: no new tokens can be created. It's just a restaurant, not a farm.\r\n */\r\ncontract StakeRewarder is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    \r\n    struct UserInfo {\r\n        uint256 amount;     // Quantity of tokens the user has staked.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        // We do some fancy math here. Basically, any point in time, the\r\n        // amount of rewards entitled to a user but is pending to be distributed is:\r\n        //\r\n        //   pendingReward = (stakedAmount * pool.accPerShare) - user.rewardDebt\r\n        //\r\n        // Whenever a user deposits or withdraws tokens in a pool:\r\n        //   1. The pool's `accPerShare` (and `lastRewardBlock`) gets updated.\r\n        //   2. User's pending rewards are issued (greatly simplifies accounting).\r\n        //   3. User's `amount` gets updated.\r\n        //   4. User's `rewardDebt` gets updated.\r\n    }\r\n    \r\n    struct PoolInfo {\r\n        IERC20 token;            // Address of the token contract.\r\n        uint256 weight;          // Weight points assigned to this pool.\r\n        uint256 power;           // The multiplier for determining \"staking power\".\r\n        uint256 total;           // Total number of tokens staked.\r\n        uint256 accPerShare;     // Accumulated rewards per share (times 1e12).\r\n        uint256 lastRewardBlock; // Last block where rewards were calculated.\r\n    }\r\n    \r\n    // Distribution vault.\r\n    VestingMultiVault public immutable vault;\r\n    \r\n    // Reward configuration.\r\n    IERC20 public immutable rewardToken;\r\n    uint256 public rewardPerBlock;\r\n    uint256 public vestingCliff;\r\n    uint256 public vestingDuration;\r\n    \r\n    // Housekeeping for each pool.\r\n    PoolInfo[] public poolInfo;\r\n    \r\n    // Info of each user that stakes tokens.\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n    \r\n    // Underpaid rewards owed to a user.\r\n    mapping(address => uint256) public underpayment;\r\n    \r\n    // The sum of weights across all staking tokens.\r\n    uint256 public totalWeight = 0;\r\n    \r\n    // The block number when staking starts.\r\n    uint256 public startBlock;\r\n    \r\n    event TokenAdded(address indexed token, uint256 weight, uint256 totalWeight);\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Claim(address indexed user, uint256 amount);\r\n    event EmergencyReclaim(address indexed user, address token, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n\r\n    /**\r\n     * @dev Create a staking contract that rewards depositors using its own token balance\r\n     * and optionally vests rewards over time.\r\n     * @param _rewardToken The token to be distributed as rewards.\r\n     * @param _rewardPerBlock The quantity of reward tokens accrued per block.\r\n     * @param _startBlock The first block at which staking is allowed.\r\n     * @param _vestingCliff The number of seconds until issued rewards begin vesting.\r\n     * @param _vestingDuration The number of seconds after issuance until vesting is completed.\r\n     * @param _vault The VestingMultiVault that is ultimately responsible for reward distribution.\r\n     */\r\n    constructor(\r\n        IERC20 _rewardToken,\r\n        uint256 _rewardPerBlock,\r\n        uint256 _startBlock,\r\n        uint256 _vestingCliff,\r\n        uint256 _vestingDuration,\r\n        VestingMultiVault _vault\r\n    ) {\r\n        // Set the initial reward config\r\n        rewardPerBlock = _rewardPerBlock;\r\n        startBlock = _startBlock;\r\n        vestingCliff = _vestingCliff;\r\n        vestingDuration = _vestingDuration;\r\n        \r\n        // Set the vault and reward token (immutable after creation)\r\n        vault = _vault;\r\n        rewardToken = _rewardToken;\r\n        \r\n        // Approve the vault to pull reward tokens\r\n        _rewardToken.approve(address(_vault), 2**256 - 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a new staking pool to the stack. Can only be called by the owner.\r\n     * @param _token The token to be staked.\r\n     * @param _weight The weight of this pool (used to determine proportion of rewards relative to the total weight).\r\n     * @param _power The power factor of this pool (used as a multiple of tokens staked, e.g. for determining voting power).\r\n     * @param _shouldUpdate Whether to update all pools first.\r\n     */\r\n    function createPool(\r\n        IERC20 _token,\r\n        uint256 _weight,\r\n        uint256 _power,\r\n        bool _shouldUpdate\r\n    ) public onlyOwner {\r\n        if (_shouldUpdate) {\r\n            pokePools();\r\n        }\r\n\r\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\r\n        totalWeight = totalWeight.add(_weight);\r\n        poolInfo.push(\r\n            PoolInfo({\r\n                token: _token,\r\n                weight: _weight,\r\n                power: _power,\r\n                total: 0,\r\n                accPerShare: 0,\r\n                lastRewardBlock: lastRewardBlock\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Update the given staking pool's weight and power. Can only be called by the owner.\r\n     * @param _pid The pool identifier.\r\n     * @param _weight The weight of this pool (used to determine proportion of rewards relative to the total weight).\r\n     * @param _power The power of this pool's token (used as a multiplier of tokens staked, e.g. for voting).\r\n     * @param _shouldUpdate Whether to update all pools first.\r\n     */ \r\n    function updatePool(\r\n        uint256 _pid,\r\n        uint256 _weight,\r\n        uint256 _power,\r\n        bool _shouldUpdate\r\n    ) public onlyOwner {\r\n        if (_shouldUpdate) {\r\n            pokePools();\r\n        }\r\n        \r\n        totalWeight = totalWeight.sub(poolInfo[_pid].weight).add(\r\n            _weight\r\n        );\r\n\r\n        poolInfo[_pid].weight = _weight;\r\n        poolInfo[_pid].power = _power;\r\n    }\r\n    \r\n    /**\r\n     * @dev Update the reward per block. Can only be called by the owner.\r\n     * @param _rewardPerBlock The total quantity to distribute per block.\r\n     */\r\n    function setRewardPerBlock(\r\n        uint256 _rewardPerBlock\r\n    ) public onlyOwner {\r\n        rewardPerBlock = _rewardPerBlock;\r\n    }\r\n    \r\n    /**\r\n     * @dev Update the vesting rules for rewards. Can only be called by the owner.\r\n     * @param _duration the number of seconds over which vesting occurs (see VestingMultiVault)\r\n     * @param _cliff the number of seconds before any release occurs (see VestingMultiVault)\r\n     */\r\n    function setVestingRules(\r\n        uint256 _duration,\r\n        uint256 _cliff\r\n    ) public onlyOwner {\r\n        vestingDuration = _duration;\r\n        vestingCliff = _cliff;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate elapsed blocks between `_from` and `_to`.\r\n     * @param _from The starting block.\r\n     * @param _to The ending block.\r\n     */\r\n    function duration(\r\n        uint256 _from,\r\n        uint256 _to\r\n    ) public pure returns (uint256) {\r\n        return _to.sub(_from);\r\n    }\r\n    \r\n    function totalPendingRewards(\r\n        address _beneficiary\r\n    ) public view returns (uint256 total) {\r\n        for (uint256 pid = 0; pid < poolInfo.length; pid++) {\r\n            total = total.add(pendingRewards(pid, _beneficiary));\r\n        }\r\n\r\n        return total;\r\n    }\r\n\r\n    /**\r\n     * @dev View function to see pending rewards for an address. Likely gas intensive.\r\n     * @param _pid The pool identifier.\r\n     * @param _beneficiary The address to check.\r\n     */\r\n    function pendingRewards(\r\n        uint256 _pid,\r\n        address _beneficiary\r\n    ) public view returns (uint256 amount) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_beneficiary];\r\n        uint256 accPerShare = pool.accPerShare;\r\n        uint256 tokenSupply = pool.total;\r\n        \r\n        if (block.number > pool.lastRewardBlock && tokenSupply != 0) {\r\n            uint256 reward = duration(pool.lastRewardBlock, block.number)\r\n                .mul(rewardPerBlock)\r\n                .mul(pool.weight)\r\n                .div(totalWeight);\r\n\r\n            accPerShare = accPerShare.add(\r\n                reward.mul(1e12).div(tokenSupply)\r\n            );\r\n        }\r\n\r\n        return user.amount.mul(accPerShare).div(1e12).sub(user.rewardDebt);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the sum of power for every pool. Likely gas intensive.\r\n     * @param _beneficiary The address to check.\r\n     */\r\n    function totalPower(\r\n        address _beneficiary\r\n    ) public view returns (uint256 total) {\r\n        for (uint256 pid = 0; pid < poolInfo.length; pid++) {\r\n            total = total.add(power(pid, _beneficiary));\r\n        }\r\n\r\n        return total;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets power for a single pool.\r\n     * @param _pid The pool identifier.\r\n     * @param _beneficiary The address to check.\r\n     */\r\n    function power(\r\n        uint256 _pid,\r\n        address _beneficiary\r\n    ) public view returns (uint256 amount) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_beneficiary];\r\n        return pool.power.mul(user.amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Update all pools. Callable by anyone. Could be gas intensive.\r\n     */\r\n    function pokePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            pokePool(pid);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Update rewards of the given pool to be up-to-date. Callable by anyone.\r\n     * @param _pid The pool identifier.\r\n     */\r\n    function pokePool(\r\n        uint256 _pid\r\n    ) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n\r\n        if (block.number <= pool.lastRewardBlock) {\r\n            return;\r\n        }\r\n\r\n        uint256 tokenSupply = pool.total;\r\n        if (tokenSupply == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n\r\n        uint256 reward = duration(pool.lastRewardBlock, block.number)\r\n            .mul(rewardPerBlock)\r\n            .mul(pool.weight)\r\n            .div(totalWeight);\r\n\r\n        pool.accPerShare = pool.accPerShare.add(\r\n            reward.mul(1e12).div(tokenSupply)\r\n        );\r\n\r\n        pool.lastRewardBlock = block.number;\r\n    }\r\n\r\n    /**\r\n     * @dev Claim rewards not yet distributed for an address. Callable by anyone.\r\n     * @param _pid The pool identifier.\r\n     * @param _beneficiary The address to claim for.\r\n     */\r\n    function claim(\r\n        uint256 _pid,\r\n        address _beneficiary\r\n    ) public {\r\n        // make sure the pool is up-to-date\r\n        pokePool(_pid);\r\n\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_beneficiary];\r\n\r\n        _claim(pool, user, _beneficiary);\r\n    }\r\n    \r\n    /**\r\n     * @dev Claim rewards from multiple pools. Callable by anyone.\r\n     * @param _pids An array of pool identifiers.\r\n     * @param _beneficiary The address to claim for.\r\n     */\r\n    function claimMultiple(\r\n        uint256[] calldata _pids,\r\n        address _beneficiary\r\n    ) external {\r\n        for (uint256 i = 0; i < _pids.length; i++) {\r\n            claim(_pids[i], _beneficiary);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Stake tokens to earn a share of rewards.\r\n     * @param _pid The pool identifier.\r\n     * @param _amount The number of tokens to deposit.\r\n     */\r\n    function deposit(\r\n        uint256 _pid,\r\n        uint256 _amount\r\n    ) public {\r\n        require(_amount > 0, \"deposit: only non-zero amounts allowed\");\r\n        \r\n        // make sure the pool is up-to-date\r\n        pokePool(_pid);\r\n\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        \r\n        // deliver any pending rewards\r\n        _claim(pool, user, msg.sender);\r\n        \r\n        // pull in user's staked assets\r\n        pool.token.safeTransferFrom(\r\n            address(msg.sender),\r\n            address(this),\r\n            _amount\r\n        );\r\n\r\n        // update the pool's total deposit\r\n        pool.total = pool.total.add(_amount);\r\n        \r\n        // update user's deposit and reward info\r\n        user.amount = user.amount.add(_amount);\r\n        user.rewardDebt = user.amount.mul(pool.accPerShare).div(1e12);\r\n        \r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw staked tokens and any pending rewards.\r\n     */\r\n    function withdraw(\r\n        uint256 _pid,\r\n        uint256 _amount\r\n    ) public {\r\n        require(_amount > 0, \"withdraw: only non-zero amounts allowed\");\r\n\r\n        // make sure the pool is up-to-date\r\n        pokePool(_pid);\r\n        \r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        \r\n        require(user.amount >= _amount, \"withdraw: amount too large\");\r\n        \r\n        // deliver any pending rewards\r\n        _claim(pool, user, msg.sender);\r\n\r\n        // update the pool's total deposit\r\n        pool.total = pool.total.sub(_amount);\r\n        \r\n        // update the user's deposit and reward info\r\n        user.amount = user.amount.sub(_amount);\r\n        user.rewardDebt = user.amount.mul(pool.accPerShare).div(1e12);\r\n        \r\n        // send back the staked assets\r\n        pool.token.safeTransfer(address(msg.sender), _amount);\r\n        \r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw staked tokens and forego any unclaimed rewards. This is a fail-safe.\r\n     */\r\n    function emergencyWithdraw(\r\n        uint256 _pid\r\n    ) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        uint256 amount = user.amount;\r\n        \r\n        // reset everything to zero\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n        underpayment[msg.sender] = 0;\r\n\r\n        // update the pool's total deposit\r\n        pool.total = pool.total.sub(amount);\r\n        \r\n        // send back the staked assets\r\n        pool.token.safeTransfer(address(msg.sender), amount);\r\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Reclaim stuck tokens (e.g. unexpected external rewards). This is a fail-safe.\r\n     */\r\n    function emergencyReclaim(\r\n        IERC20 _token,\r\n        uint256 _amount\r\n    ) public onlyOwner {\r\n        if (_amount == 0) {\r\n            _amount = _token.balanceOf(address(this));\r\n        }\r\n        \r\n        _token.transfer(msg.sender, _amount);\r\n        emit EmergencyReclaim(msg.sender, address(_token), _amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Gets the length of the pools array.\r\n     */\r\n    function poolLength() external view returns (uint256 length) {\r\n        return poolInfo.length;\r\n    }\r\n    \r\n    /**\r\n     * @dev Claim rewards not yet distributed for an address.\r\n     * @param pool The staking pool issuing rewards.\r\n     * @param user The staker who earned them.\r\n     * @param to The address to pay. \r\n     */\r\n    function _claim(\r\n        PoolInfo storage pool,\r\n        UserInfo storage user,\r\n        address to\r\n    ) internal {\r\n        if (user.amount > 0) {\r\n            // calculate the pending reward\r\n            uint256 pending = user.amount\r\n                .mul(pool.accPerShare)\r\n                .div(1e12)\r\n                .sub(user.rewardDebt)\r\n                .add(underpayment[to]);\r\n            \r\n            // send the rewards out\r\n            uint256 payout = _safelyDistribute(to, pending);\r\n            if (payout < pending) {\r\n                underpayment[to] = pending.sub(payout);\r\n            } else {\r\n                underpayment[to] = 0;\r\n            }\r\n            \r\n            emit Claim(to, payout);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Safely distribute at most the amount of tokens in holding.\r\n     */\r\n    function _safelyDistribute(\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal returns (uint256 amount) {\r\n        uint256 available = rewardToken.balanceOf(address(this));\r\n        amount = _amount > available ? available : _amount;\r\n        \r\n        rewardToken.transfer(_to, amount);\r\n        vault.issue(\r\n            _to,                // address _beneficiary,\r\n            _amount,            // uint256 _amount,\r\n            block.timestamp,    // uint256 _startAt,\r\n            vestingCliff,       // uint256 _cliff,\r\n            vestingDuration,    // uint256 _duration,\r\n            0                   // uint256 _initialPct\r\n        );\r\n        \r\n        return amount;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingCliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"contract VestingMultiVault\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyReclaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalWeight\",\"type\":\"uint256\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"claimMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_power\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_shouldUpdate\",\"type\":\"bool\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyReclaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"pokePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pokePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"power\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"setRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliff\",\"type\":\"uint256\"}],\"name\":\"setVestingRules\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"totalPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"totalPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"underpayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_power\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_shouldUpdate\",\"type\":\"bool\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract VestingMultiVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingCliff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakeRewarder","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005166e09628b696285e3a151e84fb977736a835750000000000000000000000000000000000000000000000005b18ae9b8cecf0000000000000000000000000000000000000000000000000000000000000c225fe0000000000000000000000000000000000000000000000000000000000f142800000000000000000000000000000000000000000000000000000000000f14280000000000000000000000000b632373aab2d6fb1aeb628bea65a6f4b76a38fbb","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c104c5464a2032e7e532676697173373d0744dd16a913ec620958f7c718005f7"}]}