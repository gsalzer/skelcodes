{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract GasifyVault is Ownable {\r\n    IERC20 public GasifyVaultAddress;\r\n    uint256 public rewardsPool;\r\n    uint256 private totalLockedBalance;\r\n    uint8 private _isPaused;\r\n    \r\n    struct Lock {\r\n        address user;\r\n        uint256 amount;\r\n        uint256 unlockTime;\r\n    }\r\n    \r\n    mapping(address => Lock) public locks;\r\n    \r\n    event Locked(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 startTime,\r\n        uint256 unlockTime\r\n    );\r\n    \r\n    event Unlocked(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 unlockTime\r\n    );\r\n    \r\n    event RewardsSeeded(\r\n        address indexed admin,\r\n        uint256 indexed amount\r\n    );\r\n    \r\n    modifier whenNotPaused() {\r\n        require(_isPaused == 0, \"GasifyVault: lock is currently paused\");\r\n        _;\r\n    }\r\n\r\n    constructor(IERC20 _GasifyVaultAddress) {\r\n        GasifyVaultAddress = _GasifyVaultAddress;\r\n        totalLockedBalance = 0;\r\n        rewardsPool = 0;\r\n        _isPaused = 0;\r\n    }\r\n    \r\n    receive() external payable {\r\n        revert(\"You can not ETH token directly to the contract\");\r\n    }\r\n    \r\n    function lock(uint256 _amount) external whenNotPaused {\r\n        require(locks[_msgSender()].amount == 0, \"GasifyVault: Active lock found\");\r\n        uint256 _unlockTime = block.timestamp + 30 days;\r\n        \r\n        GasifyVaultAddress.transferFrom(_msgSender(), address(this), _amount);\r\n        totalLockedBalance += _amount;\r\n        \r\n        locks[_msgSender()] = Lock(\r\n            _msgSender(),\r\n            _amount,\r\n            _unlockTime\r\n        );\r\n        emit Locked(_msgSender(), _amount, block.timestamp, _unlockTime);\r\n    }\r\n    \r\n    function unlock() external {\r\n        require(locks[_msgSender()].unlockTime <= block.timestamp, \"GasifyVault: stakes is currently locked\");\r\n        require(locks[_msgSender()].amount > 0, \"GasifyVault: No active lock found\");\r\n        \r\n        uint256 _amount = locks[_msgSender()].amount;\r\n        \r\n        locks[_msgSender()].amount = 0;\r\n        totalLockedBalance -= _amount;\r\n        \r\n        uint256 _rewards = calculateRewards(_amount);\r\n        rewardsPool -= _rewards;\r\n        \r\n        uint256 _totalValue = _amount + _rewards;\r\n        GasifyVaultAddress.transfer(_msgSender(), _totalValue);\r\n        emit Unlocked(_msgSender(), _totalValue, block.timestamp);\r\n    }\r\n    \r\n    function calculateRewards(uint256 _amount) internal pure returns(uint256) {\r\n        uint256 _rewards = (_amount * 40) / 100;\r\n        return _rewards;\r\n    }\r\n    \r\n    function getLockedTokens(address _account) external view returns(uint256) {\r\n        return locks[_account].amount;\r\n    }\r\n    \r\n    function getTotalLockedBalance() external view returns(uint256) {\r\n        return totalLockedBalance;\r\n    }\r\n    \r\n    function seedRewards(uint256 _amount) external onlyOwner {\r\n        GasifyVaultAddress.transferFrom(_msgSender(), address(this), _amount);\r\n        rewardsPool += _amount;\r\n        emit RewardsSeeded(_msgSender(), _amount);\r\n    }\r\n    \r\n    \r\n    function pause() external onlyOwner {\r\n        require(_isPaused == 0, \"GasifyVault: lock is currently paused\");\r\n        _isPaused = 1;\r\n    }\r\n    \r\n    function unpause() external onlyOwner {\r\n        require(_isPaused == 1, \"GasifyVault: lock is currently active\");\r\n        _isPaused = 0;\r\n    }\r\n    \r\n    function lockStatus() external view returns(uint8) {\r\n        return _isPaused;\r\n    }\r\n    \r\n    \r\n    function withdrawLockedToken(address _tokenAddress) external onlyOwner {\r\n        uint256 _balance = IERC20(_tokenAddress).balanceOf(address(this));\r\n        IERC20(_tokenAddress).transfer(owner(), _balance);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_GasifyVaultAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsSeeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GasifyVaultAddress\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getLockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalLockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockStatus\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"locks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"seedRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawLockedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"GasifyVault","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000002f3a1819851d127bcd6f468253d7a498567eee0","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://38cd23d3b9f086c9ce11ebc05af770033a75809eb3363e98eb8dfbd49f99ad8a"}]}