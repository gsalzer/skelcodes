{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/QSettings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./interface/IQSettings.sol\\\";\\n\\n/**\\n * @author fantasy\\n * Super admin should be the DAO address who will manage Quiver Protocol\\n */\\ncontract QSettings is IQSettings, Initializable {\\n    // events\\n    event SetAdmin(address indexed admin);\\n    event SetManager(address indexed executor, address indexed manager);\\n    event SetFoundationWallet(address indexed foundationWallet);\\n    event SetFoundation(address indexed foundation);\\n\\n    // Quiver Manager\\n    address private admin; // should be the dao address who will set the manager address.\\n    address private manager; // manager address who will manage overall Quiver contracts.\\n\\n    // Quiver Foundation\\n    address private foundation; // foundation address who can change the foundationWallet address.\\n    address private foundationWallet; // foundation wallet to withdraw rewards to.\\n\\n    // QStk contract address\\n    address private qstk;\\n    address private qAirdrop;\\n    address private qNftSettings;\\n    address private qNftGov;\\n    address private qNft;\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"QSettings: caller is not the admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require(msg.sender == manager, \\\"QSettings: caller is not the manager\\\");\\n        _;\\n    }\\n\\n    modifier onlyFoundation() {\\n        require(\\n            msg.sender == foundation,\\n            \\\"QSettings: caller is not the foundation\\\"\\n        );\\n        _;\\n    }\\n\\n    function initialize(\\n        address _admin,\\n        address _manager,\\n        address _foundation,\\n        address _foundationWallet\\n    ) external initializer {\\n        admin = _admin;\\n        manager = _manager;\\n        foundation = _foundation;\\n        foundationWallet = _foundationWallet;\\n    }\\n\\n    function setAddresses(\\n        address _qstk,\\n        address _qAirdrop,\\n        address _qNftSettings,\\n        address _qNftGov,\\n        address _qNft\\n    ) external {\\n        qstk = _qstk;\\n        qAirdrop = _qAirdrop;\\n        qNftSettings = _qNftSettings;\\n        qNftGov = _qNftGov;\\n        qNft = _qNft;\\n    }\\n\\n    function setAdmin(address _admin) external onlyAdmin {\\n        admin = _admin;\\n\\n        emit SetAdmin(_admin);\\n    }\\n\\n    function getAdmin() external view returns (address) {\\n        return admin;\\n    }\\n\\n    function setManager(address _manager) external {\\n        require(\\n            msg.sender == admin || msg.sender == manager,\\n            \\\"QSettings: caller is not the admin nor manager\\\"\\n        );\\n\\n        manager = _manager;\\n\\n        emit SetManager(msg.sender, _manager);\\n    }\\n\\n    function getManager() external view override returns (address) {\\n        return manager;\\n    }\\n\\n    function setFoundation(address _foundation) external onlyFoundation {\\n        foundation = _foundation;\\n\\n        emit SetFoundation(_foundation);\\n    }\\n\\n    function getFoundation() external view returns (address) {\\n        return foundation;\\n    }\\n\\n    function setFoundationWallet(address _foundationWallet)\\n        external\\n        onlyFoundation\\n    {\\n        foundationWallet = _foundationWallet;\\n\\n        emit SetFoundationWallet(_foundationWallet);\\n    }\\n\\n    function getFoundationWallet() external view override returns (address) {\\n        return foundationWallet;\\n    }\\n\\n    function getQStk() external view override returns (address) {\\n        return qstk;\\n    }\\n\\n    function setQAirdrop(address _qAirdrop) external onlyManager {\\n        qAirdrop = _qAirdrop;\\n    }\\n\\n    function getQAirdrop() external view override returns (address) {\\n        return qAirdrop;\\n    }\\n\\n    function setQNftSettings(address _qNftSettings) external onlyManager {\\n        qNftSettings = _qNftSettings;\\n    }\\n\\n    function getQNftSettings() external view override returns (address) {\\n        return qNftSettings;\\n    }\\n\\n    function setQNftGov(address _qNftGov) external onlyManager {\\n        qNftGov = _qNftGov;\\n    }\\n\\n    function getQNftGov() external view override returns (address) {\\n        return qNftGov;\\n    }\\n\\n    function setQNft(address _qNft) external onlyManager {\\n        qNft = _qNft;\\n    }\\n\\n    function getQNft() external view override returns (address) {\\n        return qNft;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IQSettings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IQSettings {\\n    function getManager() external view returns (address);\\n\\n    function getFoundationWallet() external view returns (address);\\n\\n    function getQStk() external view returns (address);\\n\\n    function getQAirdrop() external view returns (address);\\n\\n    function getQNftSettings() external view returns (address);\\n\\n    function getQNftGov() external view returns (address);\\n\\n    function getQNft() external view returns (address);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"foundation\",\"type\":\"address\"}],\"name\":\"SetFoundation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"foundationWallet\",\"type\":\"address\"}],\"name\":\"SetFoundationWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"SetManager\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFoundation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFoundationWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQAirdrop\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQNft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQNftGov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQNftSettings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQStk\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_foundation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_foundationWallet\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_qstk\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_qAirdrop\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_qNftSettings\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_qNftGov\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_qNft\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_foundation\",\"type\":\"address\"}],\"name\":\"setFoundation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_foundationWallet\",\"type\":\"address\"}],\"name\":\"setFoundationWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_qAirdrop\",\"type\":\"address\"}],\"name\":\"setQAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_qNft\",\"type\":\"address\"}],\"name\":\"setQNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_qNftGov\",\"type\":\"address\"}],\"name\":\"setQNftGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_qNftSettings\",\"type\":\"address\"}],\"name\":\"setQNftSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"QSettings","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}