{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/IERC20CrossChain.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\ninterface IERC20CrossChain is IERC20 {\r\n    function mint(address account, uint256 amount) external;\r\n    function burn(uint256 amount) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/CrossChainAdminStorage.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\ncontract CrossChainAdminStorage is Ownable{\r\n\r\n    address public admin;\r\n\r\n    address public implementation;\r\n}\r\n\r\n// File: contracts/CrossChainStorage.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\ncontract CrossChainStorage is CrossChainAdminStorage{\r\n\r\n    enum Chain {\r\n        ETH, /// Ethereum\r\n        BSC, /// Binance Smart Chain\r\n        HECO /// Huobi ECO Chain\r\n    }\r\n\r\n    mapping (address => bool) public relayer;\r\n    mapping (address => bool) public acceptToken;\r\n    mapping (Chain => bool) public acceptChain;\r\n    mapping (bytes32 => address[]) public relayInfo;\r\n    uint256 public confirmRequireNum;\r\n    mapping (Chain => uint256) public fee;\r\n    mapping (address => uint256) public maxSendAmountPerDay;\r\n    mapping (address => uint256) public maxAmount;\r\n    mapping (address => uint256) public minAmount;\r\n    mapping (address => uint256) public sendTotalAmount;\r\n    mapping (address => uint256) public receiveTotalAmount;\r\n    uint256 public timestamp;\r\n    bool public paused;\r\n    mapping (address => uint256) public maxReceiveAmountPerDay;\r\n}\r\n\r\n// File: contracts/ICrossChain.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface ICrossChain {\r\n    function setAcceptToken(address token, bool isAccepted) external;\r\n    function setAcceptChain(uint8 chain, bool isAccepted) external;\r\n    function addRelayer(address relayerAddress) external;\r\n    function removeRelayer(address relayerAddress) external;\r\n    function setConfirmRequireNum(uint256 requireNum) external;\r\n    function setMaxAmountPerDay(address token, uint256 amount) external;\r\n    function setFee(uint8 chain, uint256 amount) external;\r\n    function crossChainTransfer(address token, uint256 amount, address to, uint8 chain) external payable;\r\n    function receiveToken(address token, uint256 amount, address receiveAddress, string memory info) external;\r\n    function transferToken(address token, uint256 amount, address to) external;\r\n    function transfer(uint256 amount, address payable to) external;\r\n    function pause() external;\r\n    function unpause() external;\r\n}\r\n\r\n// File: contracts/CrossChain.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\n\r\n\r\ncontract CrossChain is CrossChainStorage {\r\n    using SafeMath for uint256;\r\n\r\n    enum Error {\r\n        NO_ERROR,\r\n        ALREADY_RELAYED,\r\n        OVER_MAX_AMOUNT_PER_DAY\r\n    }\r\n\r\n    event Failure(uint256 error);\r\n\r\n    uint256 constant secondsPerDay = 86400;\r\n\r\n    event CrossChainTransfer(address indexed from, uint256 amount, address indexed token, address targetAddress, Chain chain, uint256 fee);\r\n    event ReceivingToken(address indexed receiveAddress, address indexed token, uint256 amount, string info);\r\n    event ReceiveTokenDone(address indexed receiveAddress, address indexed token, uint256 amount, string info);\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n    event AcceptToken(address token, bool isAccepted);\r\n    event AcceptChain(Chain chain, bool isAccepted);\r\n    event RelayerAdded(address relayer);\r\n    event RelayerRemoved(address relayer);\r\n    event ConfirmRequireNumChanged(uint256 oldNum,uint256 newNum);\r\n    event MaxAmountChanged(address token, uint256 oldAmount, uint256 newAmount);\r\n    event MinAmountChanged(address token, uint256 oldAmount, uint256 newAmount);\r\n    event MaxSendAmountPerDayChanged(address token, uint256 oldMaxAmount, uint256 newMaxAmount);\r\n    event MaxReceiveAmountPerDayChanged(address token, uint256 oldMaxAmount, uint256 newMaxAmount);  \r\n    event FeeChanged(Chain chain, uint256 oldFee, uint256 newFee);\r\n\r\n    modifier onlyRelayer() {\r\n        require(relayer[msg.sender], \"Caller is not the relayer\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(admin == msg.sender, \"Caller is not the admin\");\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    function initialize(\r\n        address _acceptToken,\r\n        uint256 _confirmRequireNum,\r\n        Chain[] memory _acceptChains,\r\n        uint256 _timestamp\r\n    ) external  {\r\n        require(admin == msg.sender, \"UNAUTHORIZED\");\r\n        require(timestamp == 0, \"ALREADY INITIALIZED\");\r\n        timestamp = _timestamp;\r\n        confirmRequireNum = _confirmRequireNum;\r\n        acceptToken[_acceptToken] = true;\r\n        for(uint8 i = 0; i < _acceptChains.length; i++){\r\n            acceptChain[_acceptChains[i]] = true;\r\n        }\r\n        paused = false;\r\n    }\r\n\r\n    function setAcceptToken(address token, bool isAccepted) external onlyOwner{\r\n        acceptToken[token] = isAccepted;\r\n        emit AcceptToken(token, isAccepted);\r\n    }\r\n\r\n    function setAcceptChain(Chain chain, bool isAccepted) external onlyOwner{\r\n        acceptChain[chain] = isAccepted;\r\n        emit AcceptChain(chain, isAccepted);\r\n    }\r\n\r\n    function addRelayer(address relayerAddress) external onlyAdmin{\r\n        relayer[relayerAddress] = true;\r\n        emit RelayerAdded(relayerAddress);\r\n    }\r\n\r\n    function removeRelayer(address relayerAddress) external onlyOwner{\r\n        relayer[relayerAddress] = false;\r\n        emit RelayerRemoved(relayerAddress);\r\n    }\r\n\r\n    function setConfirmRequireNum(uint256 requireNum) external onlyOwner{\r\n        uint256 oldNum = confirmRequireNum;\r\n        confirmRequireNum = requireNum;\r\n        emit ConfirmRequireNumChanged(oldNum, requireNum);\r\n    }\r\n\r\n    function setMaxAmount(address token, uint256 amount) external onlyOwner{\r\n        require(amount >= minAmount[token], \"Invalid amount\");\r\n        uint256 oldAmount = maxAmount[token];\r\n        maxAmount[token] = amount;\r\n        emit MaxAmountChanged(token, oldAmount, amount);\r\n    }\r\n\r\n    function setMinAmount(address token, uint256 amount) external onlyOwner{\r\n        require(amount <= maxAmount[token], \"Invalid amount\");\r\n        uint256 oldAmount = minAmount[token];\r\n        minAmount[token] = amount;\r\n        emit MinAmountChanged(token, oldAmount, amount);\r\n    }\r\n\r\n    function setMaxSendAmountPerDay(address token, uint256 amount) external onlyOwner{\r\n        uint256 oldMaxAmount = maxSendAmountPerDay[token];\r\n        maxSendAmountPerDay[token] = amount;\r\n        emit MaxSendAmountPerDayChanged(token, oldMaxAmount, amount);\r\n    }\r\n\r\n    function setMaxReceiveAmountPerDay(address token, uint256 amount) external onlyOwner{\r\n        uint256 oldMaxAmount = maxReceiveAmountPerDay[token];\r\n        maxReceiveAmountPerDay[token] = amount;\r\n        emit MaxReceiveAmountPerDayChanged(token, oldMaxAmount, amount);\r\n    }\r\n\r\n    function setFee(Chain chain, uint256 amount) external onlyOwner{\r\n        uint256 oldFee = fee[chain];\r\n        fee[chain] = amount;\r\n        emit FeeChanged(chain, oldFee, amount);\r\n    }\r\n    \r\n    function crossChainTransfer(address token, uint256 amount, address to, Chain chain) external payable whenNotPaused {\r\n        require(acceptToken[token],\"Invalid token\");\r\n        require(acceptChain[chain],\"Invalid chain\");\r\n        require(msg.value >= fee[chain], \"Fee is not enough\");\r\n        checkTransferAmount(token, amount);\r\n        (Error error,uint256 totalAmount)= addSendTotalAmount(token, sendTotalAmount[token], amount);\r\n        require(uint256(error) == 0, \"Total amount is greater than max amount per day\");\r\n        sendTotalAmount[token] = totalAmount;\r\n        IERC20CrossChain(token).transferFrom(msg.sender, address(this), amount);\r\n        emit CrossChainTransfer(msg.sender, amount, token, to, chain, msg.value);\r\n    }\r\n\r\n    function receiveToken(address token, uint256 amount, address receiveAddress, string memory info) external onlyRelayer whenNotPaused returns (uint256){\r\n        bytes32 relayInfoHash = keccak256((abi.encodePacked(token,receiveAddress,amount,info)));\r\n        if(hasRelay(relayInfoHash)) return fail(Error.ALREADY_RELAYED);\r\n        uint256 confirmNum = relayInfo[relayInfoHash].length;\r\n        if(confirmNum == 0){\r\n            (Error error, uint256 totalAmount) = addReceiveTotalAmount(token, receiveTotalAmount[token], amount);\r\n            if(uint256(error) != 0) return fail(error);\r\n            receiveTotalAmount[token] = totalAmount;\r\n        }\r\n        relayInfo[relayInfoHash].push(msg.sender);\r\n        confirmNum = confirmNum + 1;\r\n        if(confirmNum < confirmRequireNum){\r\n            emit ReceivingToken(receiveAddress, token, amount, info);\r\n        }else if(relayInfo[relayInfoHash].length == confirmRequireNum){\r\n            IERC20CrossChain(token).transfer(receiveAddress, amount);\r\n            emit ReceivingToken(receiveAddress, token, amount, info);\r\n            emit ReceiveTokenDone(receiveAddress, token, amount, info);\r\n        }\r\n        return uint256(Error.NO_ERROR);\r\n    }\r\n\r\n    function transferToken(address token, uint256 amount, address to) external onlyAdmin {\r\n        IERC20CrossChain(token).transfer(to, amount);\r\n    }\r\n\r\n    function transfer(uint256 amount, address payable to) external onlyOwner {\r\n        to.transfer(amount);\r\n    }\r\n\r\n    function pause() external whenNotPaused onlyOwner {\r\n         paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    function unpause() external whenPaused onlyOwner {\r\n        paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n\r\n    function checkTransferAmount(address token, uint256 amount) internal view returns (uint256){\r\n        require(amount <= maxAmount[token],\"Amount is greater than max amount\");\r\n        require(amount >= minAmount[token],\"Amount is less than min amount\");\r\n    }\r\n\r\n    function addSendTotalAmount(address token, uint256 totalAmount, uint256 amount) internal returns (Error,uint256){\r\n        if(block.timestamp > timestamp.add(secondsPerDay)){\r\n            uint256 offset = block.timestamp.sub(timestamp).div(secondsPerDay).mul(secondsPerDay);\r\n            timestamp = timestamp.add(offset);\r\n            totalAmount = 0;\r\n        }\r\n        totalAmount = totalAmount.add(amount);\r\n        if(totalAmount > maxSendAmountPerDay[token]) return (Error.OVER_MAX_AMOUNT_PER_DAY, totalAmount);\r\n        return (Error.NO_ERROR ,totalAmount);\r\n    }\r\n\r\n    function addReceiveTotalAmount(address token, uint256 totalAmount, uint256 amount) internal returns (Error,uint256){\r\n        if(block.timestamp > timestamp.add(secondsPerDay)){\r\n            uint256 offset = block.timestamp.sub(timestamp).div(secondsPerDay).mul(secondsPerDay);\r\n            timestamp = timestamp.add(offset);\r\n            totalAmount = 0;\r\n        }\r\n        totalAmount = totalAmount.add(amount);\r\n        if(totalAmount > maxReceiveAmountPerDay[token]) return (Error.OVER_MAX_AMOUNT_PER_DAY, totalAmount);\r\n        return (Error.NO_ERROR ,totalAmount);\r\n    }\r\n\r\n    function hasRelay(bytes32 relayInfoHash) internal view returns (bool){\r\n        address[] memory relayers = relayInfo[relayInfoHash];\r\n        for(uint256 i = 0; i < relayers.length; i++){\r\n            if(relayers[i] == msg.sender)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function fail(Error err) private returns (uint) {\r\n        emit Failure(uint256(err));\r\n        return uint256(err);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum CrossChainStorage.Chain\",\"name\":\"chain\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAccepted\",\"type\":\"bool\"}],\"name\":\"AcceptChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAccepted\",\"type\":\"bool\"}],\"name\":\"AcceptToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"ConfirmRequireNumChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum CrossChainStorage.Chain\",\"name\":\"chain\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"CrossChainTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"error\",\"type\":\"uint256\"}],\"name\":\"Failure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum CrossChainStorage.Chain\",\"name\":\"chain\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"MaxAmountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxReceiveAmountPerDayChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxSendAmountPerDayChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"MinAmountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiveAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"}],\"name\":\"ReceiveTokenDone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiveAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"}],\"name\":\"ReceivingToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum CrossChainStorage.Chain\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"acceptChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"acceptToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayerAddress\",\"type\":\"address\"}],\"name\":\"addRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmRequireNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"enum CrossChainStorage.Chain\",\"name\":\"chain\",\"type\":\"uint8\"}],\"name\":\"crossChainTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum CrossChainStorage.Chain\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_acceptToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_confirmRequireNum\",\"type\":\"uint256\"},{\"internalType\":\"enum CrossChainStorage.Chain[]\",\"name\":\"_acceptChains\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxReceiveAmountPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxSendAmountPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiveAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"}],\"name\":\"receiveToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiveTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"relayInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"relayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayerAddress\",\"type\":\"address\"}],\"name\":\"removeRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sendTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum CrossChainStorage.Chain\",\"name\":\"chain\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isAccepted\",\"type\":\"bool\"}],\"name\":\"setAcceptChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAccepted\",\"type\":\"bool\"}],\"name\":\"setAcceptToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requireNum\",\"type\":\"uint256\"}],\"name\":\"setConfirmRequireNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum CrossChainStorage.Chain\",\"name\":\"chain\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxReceiveAmountPerDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxSendAmountPerDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CrossChain","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6e62ff40e9621aa7de4926384cf55a5f766bdb2cae534769ab494b766534b01c"}]}