{"status":"1","message":"OK","result":[{"SourceCode":"// File: localhost/contracts/interfaces/IOracleEth.sol\r\n\r\n// SPDX-License-Identifier: bsl-1.1\r\n\r\ninterface IOracleEth {\r\n\r\n    // returns Q112-encoded value\r\n    // returned value 10**18 * 2**112 is 1 Ether\r\n    function assetToEth(address asset, uint amount) external view returns (uint);\r\n\r\n    // returns the value \"as is\"\r\n    function ethToUsd(uint amount) external view returns (uint);\r\n\r\n    // returns the value \"as is\"\r\n    function usdToEth(uint amount) external view returns (uint);\r\n}\r\n// File: localhost/contracts/interfaces/IOracleRegistry.sol\r\n\r\npragma abicoder v2;\r\n\r\n\r\ninterface IOracleRegistry {\r\n\r\n    struct Oracle {\r\n        uint oracleType;\r\n        address oracleAddress;\r\n    }\r\n\r\n    function WETH (  ) external view returns ( address );\r\n    function getKeydonixOracleTypes (  ) external view returns ( uint256[] memory );\r\n    function getOracles (  ) external view returns ( Oracle[] memory foundOracles );\r\n    function keydonixOracleTypes ( uint256 ) external view returns ( uint256 );\r\n    function maxOracleType (  ) external view returns ( uint256 );\r\n    function oracleByAsset ( address asset ) external view returns ( address );\r\n    function oracleByType ( uint256 ) external view returns ( address );\r\n    function oracleTypeByAsset ( address ) external view returns ( uint256 );\r\n    function oracleTypeByOracle ( address ) external view returns ( uint256 );\r\n    function setKeydonixOracleTypes ( uint256[] memory _keydonixOracleTypes ) external;\r\n    function setOracle ( uint256 oracleType, address oracle ) external;\r\n    function setOracleTypeForAsset ( address asset, uint256 oracleType ) external;\r\n    function setOracleTypeForAssets ( address[] memory assets, uint256 oracleType ) external;\r\n    function unsetOracle ( uint256 oracleType ) external;\r\n    function unsetOracleForAsset ( address asset ) external;\r\n    function unsetOracleForAssets ( address[] memory assets ) external;\r\n    function vaultParameters (  ) external view returns ( address );\r\n}\r\n\r\n// File: localhost/contracts/VaultParameters.sol\r\n\r\n/*\r\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\r\n*/\r\npragma solidity 0.7.6;\r\n\r\n\r\n\r\n/**\r\n * @title Auth\r\n * @dev Manages USDP's system access\r\n **/\r\ncontract Auth {\r\n\r\n    // address of the the contract with vault parameters\r\n    VaultParameters public vaultParameters;\r\n\r\n    constructor(address _parameters) {\r\n        vaultParameters = VaultParameters(_parameters);\r\n    }\r\n\r\n    // ensures tx's sender is a manager\r\n    modifier onlyManager() {\r\n        require(vaultParameters.isManager(msg.sender), \"Unit Protocol: AUTH_FAILED\");\r\n        _;\r\n    }\r\n\r\n    // ensures tx's sender is able to modify the Vault\r\n    modifier hasVaultAccess() {\r\n        require(vaultParameters.canModifyVault(msg.sender), \"Unit Protocol: AUTH_FAILED\");\r\n        _;\r\n    }\r\n\r\n    // ensures tx's sender is the Vault\r\n    modifier onlyVault() {\r\n        require(msg.sender == vaultParameters.vault(), \"Unit Protocol: AUTH_FAILED\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title VaultParameters\r\n **/\r\ncontract VaultParameters is Auth {\r\n\r\n    // map token to stability fee percentage; 3 decimals\r\n    mapping(address => uint) public stabilityFee;\r\n\r\n    // map token to liquidation fee percentage, 0 decimals\r\n    mapping(address => uint) public liquidationFee;\r\n\r\n    // map token to USDP mint limit\r\n    mapping(address => uint) public tokenDebtLimit;\r\n\r\n    // permissions to modify the Vault\r\n    mapping(address => bool) public canModifyVault;\r\n\r\n    // managers\r\n    mapping(address => bool) public isManager;\r\n\r\n    // enabled oracle types\r\n    mapping(uint => mapping (address => bool)) public isOracleTypeEnabled;\r\n\r\n    // address of the Vault\r\n    address payable public vault;\r\n\r\n    // The foundation address\r\n    address public foundation;\r\n\r\n    /**\r\n     * The address for an Ethereum contract is deterministically computed from the address of its creator (sender)\r\n     * and how many transactions the creator has sent (nonce). The sender and nonce are RLP encoded and then\r\n     * hashed with Keccak-256.\r\n     * Therefore, the Vault address can be pre-computed and passed as an argument before deployment.\r\n    **/\r\n    constructor(address payable _vault, address _foundation) Auth(address(this)) {\r\n        require(_vault != address(0), \"Unit Protocol: ZERO_ADDRESS\");\r\n        require(_foundation != address(0), \"Unit Protocol: ZERO_ADDRESS\");\r\n\r\n        isManager[msg.sender] = true;\r\n        vault = _vault;\r\n        foundation = _foundation;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Grants and revokes manager's status of any address\r\n     * @param who The target address\r\n     * @param permit The permission flag\r\n     **/\r\n    function setManager(address who, bool permit) external onlyManager {\r\n        isManager[who] = permit;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets the foundation address\r\n     * @param newFoundation The new foundation address\r\n     **/\r\n    function setFoundation(address newFoundation) external onlyManager {\r\n        require(newFoundation != address(0), \"Unit Protocol: ZERO_ADDRESS\");\r\n        foundation = newFoundation;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets ability to use token as the main collateral\r\n     * @param asset The address of the main collateral token\r\n     * @param stabilityFeeValue The percentage of the year stability fee (3 decimals)\r\n     * @param liquidationFeeValue The liquidation fee percentage (0 decimals)\r\n     * @param usdpLimit The USDP token issue limit\r\n     * @param oracles The enables oracle types\r\n     **/\r\n    function setCollateral(\r\n        address asset,\r\n        uint stabilityFeeValue,\r\n        uint liquidationFeeValue,\r\n        uint usdpLimit,\r\n        uint[] calldata oracles\r\n    ) external onlyManager {\r\n        setStabilityFee(asset, stabilityFeeValue);\r\n        setLiquidationFee(asset, liquidationFeeValue);\r\n        setTokenDebtLimit(asset, usdpLimit);\r\n        for (uint i=0; i < oracles.length; i++) {\r\n            setOracleType(oracles[i], asset, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets a permission for an address to modify the Vault\r\n     * @param who The target address\r\n     * @param permit The permission flag\r\n     **/\r\n    function setVaultAccess(address who, bool permit) external onlyManager {\r\n        canModifyVault[who] = permit;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets the percentage of the year stability fee for a particular collateral\r\n     * @param asset The address of the main collateral token\r\n     * @param newValue The stability fee percentage (3 decimals)\r\n     **/\r\n    function setStabilityFee(address asset, uint newValue) public onlyManager {\r\n        stabilityFee[asset] = newValue;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets the percentage of the liquidation fee for a particular collateral\r\n     * @param asset The address of the main collateral token\r\n     * @param newValue The liquidation fee percentage (0 decimals)\r\n     **/\r\n    function setLiquidationFee(address asset, uint newValue) public onlyManager {\r\n        require(newValue <= 100, \"Unit Protocol: VALUE_OUT_OF_RANGE\");\r\n        liquidationFee[asset] = newValue;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Enables/disables oracle types\r\n     * @param _type The type of the oracle\r\n     * @param asset The address of the main collateral token\r\n     * @param enabled The control flag\r\n     **/\r\n    function setOracleType(uint _type, address asset, bool enabled) public onlyManager {\r\n        isOracleTypeEnabled[_type][asset] = enabled;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets USDP limit for a specific collateral\r\n     * @param asset The address of the main collateral token\r\n     * @param limit The limit number\r\n     **/\r\n    function setTokenDebtLimit(address asset, uint limit) public onlyManager {\r\n        tokenDebtLimit[asset] = limit;\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/helpers/ERC20Like.sol\r\n\r\n/*\r\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\r\n*/\r\npragma solidity 0.7.6;\r\n\r\n\r\ninterface ERC20Like {\r\n    function balanceOf(address) external view returns (uint);\r\n    function decimals() external view returns (uint8);\r\n    function transfer(address, uint256) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\n// File: localhost/contracts/interfaces/IOracleUsd.sol\r\n\r\ninterface IOracleUsd {\r\n\r\n    // returns Q112-encoded value\r\n    // returned value 10**18 * 2**112 is $1\r\n    function assetToUsd(address asset, uint amount) external view returns (uint);\r\n}\r\n// File: localhost/contracts/oracles/BearingAssetOracle.sol\r\n\r\n/*\r\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\r\n*/\r\npragma solidity 0.7.6;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title BearingAssetOracle\r\n * @dev Wrapper to quote bearing assets like xSUSHI\r\n **/\r\ncontract BearingAssetOracle is IOracleUsd, Auth  {\r\n\r\n    IOracleRegistry public immutable oracleRegistry;\r\n\r\n    mapping (address => address) underlyings;\r\n\r\n    event NewUnderlying(address indexed bearing, address indexed underlying);\r\n\r\n    constructor(address _vaultParameters, address _oracleRegistry) Auth(_vaultParameters) {\r\n        require(_vaultParameters != address(0) && _oracleRegistry != address(0), \"Unit Protocol: ZERO_ADDRESS\");\r\n        oracleRegistry = IOracleRegistry(_oracleRegistry);\r\n    }\r\n\r\n    function setUnderlying(address bearing, address underlying) external onlyManager {\r\n        underlyings[bearing] = underlying;\r\n        emit NewUnderlying(bearing, underlying);\r\n    }\r\n\r\n    // returns Q112-encoded value\r\n    function assetToUsd(address bearing, uint amount) public override view returns (uint) {\r\n        if (amount == 0) return 0;\r\n        (address underlying, uint underlyingAmount) = bearingToUnderlying(bearing, amount);\r\n        IOracleUsd _oracleForUnderlying = IOracleUsd(oracleRegistry.oracleByAsset(underlying));\r\n        require(address(_oracleForUnderlying) != address(0), \"Unit Protocol: ORACLE_NOT_FOUND\");\r\n        return _oracleForUnderlying.assetToUsd(underlying, underlyingAmount);\r\n    }\r\n\r\n    function bearingToUnderlying(address bearing, uint amount) public view returns (address, uint) {\r\n        address _underlying = underlyings[bearing];\r\n        require(_underlying != address(0), \"Unit Protocol: UNDEFINED_UNDERLYING\");\r\n        uint _reserve = ERC20Like(_underlying).balanceOf(address(bearing));\r\n        uint _totalSupply = ERC20Like(bearing).totalSupply();\r\n        require(amount <= _totalSupply, \"Unit Protocol: AMOUNT_EXCEEDS_SUPPLY\");\r\n        return (_underlying, amount * _reserve / _totalSupply);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultParameters\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bearing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"NewUnderlying\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bearing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"assetToUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bearing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bearingToUnderlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRegistry\",\"outputs\":[{\"internalType\":\"contract IOracleRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bearing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"setUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultParameters\",\"outputs\":[{\"internalType\":\"contract VaultParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BearingAssetOracle","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b46f8cf42e504efe8bef895f848741daa55e9f1d00000000000000000000000075fbfe26b21fd3ea008af0c764949f8214150c8f","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c6b4aff945ffd385bfee23666b167f004fddb739156d0754a6f1f7defa912647"}]}