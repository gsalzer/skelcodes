{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\n/*******************************************************\r\n *                       Interfaces                    *\r\n *******************************************************/\r\ninterface IV2Vault {\r\n    function token() external view returns (address);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function pricePerShare() external view returns (uint256);\r\n\r\n    function totalAssets() external view returns (uint256);\r\n\r\n    function apiVersion() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function emergencyShutdown() external view returns (bool);\r\n\r\n    function depositLimit() external view returns (uint256);\r\n}\r\n\r\ninterface IV2Registry {\r\n    function numTokens() external view returns (uint256);\r\n\r\n    function numVaults(address token) external view returns (uint256);\r\n\r\n    function tokens(uint256 tokenIdx) external view returns (address);\r\n\r\n    function latestVault(address token) external view returns (address);\r\n\r\n    function vaults(address token, uint256 tokenIdx)\r\n        external\r\n        view\r\n        returns (address);\r\n}\r\n\r\ninterface IOracle {\r\n    function getNormalizedValueUsdc(address tokenAddress, uint256 amount)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function allowance(address spender, address owner)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\ninterface IHelper {\r\n    // Strategies helper\r\n    function assetStrategiesDelegatedBalance(address)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    // Allowances helper\r\n    struct Allowance {\r\n        address owner;\r\n        address spender;\r\n        uint256 amount;\r\n        address token;\r\n    }\r\n\r\n    function allowances(\r\n        address ownerAddress,\r\n        address[] memory tokensAddresses,\r\n        address[] memory spenderAddresses\r\n    ) external view returns (Allowance[] memory);\r\n}\r\n\r\ninterface ManagementList {\r\n    function isManager(address accountAddress) external returns (bool);\r\n}\r\n\r\n/*******************************************************\r\n *                     Management List                 *\r\n *******************************************************/\r\n\r\ncontract Manageable {\r\n    ManagementList public managementList;\r\n\r\n    constructor(address _managementListAddress) {\r\n        managementList = ManagementList(_managementListAddress);\r\n    }\r\n\r\n    modifier onlyManagers() {\r\n        bool isManager = managementList.isManager(msg.sender);\r\n        require(isManager, \"ManagementList: caller is not a manager\");\r\n        _;\r\n    }\r\n}\r\n\r\n/*******************************************************\r\n *                     Adapter Logic                   *\r\n *******************************************************/\r\ncontract RegisteryAdapterV2Vault is Manageable {\r\n    /*******************************************************\r\n     *           Common code shared by all adapters        *\r\n     *******************************************************/\r\n\r\n    IOracle public oracle; // The oracle is used to fetch USDC normalized pricing data\r\n    IV2Registry public registry; // The registry is used to fetch the list of vaults and migration data\r\n    IHelper public helper; // A helper utility is used for batch allowance fetching and address array merging\r\n    address[] public positionSpenderAddresses; // A settable list of spender addresses with which to fetch asset allowances\r\n    mapping(address => bool) public assetDeprecated; // Support for deprecating assets. If an asset is deprecated it will not appear is results\r\n    uint256 public numberOfDeprecatedAssets; // Used to keep track of the number of deprecated assets for an adapter\r\n\r\n    /**\r\n     * High level static information about an asset\r\n     */\r\n    struct AssetStatic {\r\n        address id; // Asset address\r\n        string typeId; // Asset typeId (for example \"VAULT_V2\" or \"IRON_BANK_MARKET\")\r\n        string name; // Asset Name\r\n        string version; // Asset version\r\n        Token token; // Static asset underlying token information\r\n    }\r\n\r\n    /**\r\n     * High level dynamic information about an asset\r\n     */\r\n    struct AssetDynamic {\r\n        address id; // Asset address\r\n        string typeId; // Asset typeId (for example \"VAULT_V2\" or \"IRON_BANK_MARKET\")\r\n        address tokenId; // Underlying token address;\r\n        TokenAmount underlyingTokenBalance; // Underlying token balances\r\n        TokenAmount delegatedBalance; // Delegated balances\r\n        AssetMetadata metadata; // Metadata specific to the asset type of this adapter\r\n    }\r\n\r\n    /**\r\n     * Static token data\r\n     */\r\n    struct Token {\r\n        address id; // token address\r\n        string name; // token name\r\n        string symbol; // token symbol\r\n        uint8 decimals; // token decimals\r\n    }\r\n\r\n    /**\r\n     * Information about a user's position relative to an asset\r\n     */\r\n    struct Position {\r\n        address assetId; // Asset address\r\n        address tokenId; // Underlying asset token address\r\n        string typeId; // Position typeId (for example \"DEPOSIT,\" \"BORROW,\" \"LEND\")\r\n        uint256 balance; // asset.balanceOf(account)\r\n        TokenAmount accountTokenBalance; // User account balance of underlying token (token.balanceOf(account))\r\n        TokenAmount underlyingTokenBalance; // Represents a user's asset position in underlying tokens\r\n        Allowance[] tokenAllowances; // Underlying token allowances\r\n        Allowance[] assetAllowances; // Asset allowances\r\n    }\r\n\r\n    /**\r\n     * Token amount representation\r\n     */\r\n    struct TokenAmount {\r\n        uint256 amount; // Amount in underlying token decimals\r\n        uint256 amountUsdc; // Amount in USDC (6 decimals)\r\n    }\r\n\r\n    /**\r\n     * Allowance information\r\n     */\r\n    struct Allowance {\r\n        address owner; // Allowance owner\r\n        address spender; // Allowance spender\r\n        uint256 amount; // Allowance amount (in underlying token)\r\n    }\r\n\r\n    /**\r\n     * Information about the adapter\r\n     */\r\n    struct AdapterInfo {\r\n        address id; // Adapter address\r\n        string typeId; // Adapter typeId (for example \"VAULT_V2\" or \"IRON_BANK_MARKET\")\r\n        string categoryId; // Adapter categoryId (for example \"VAULT\")\r\n    }\r\n\r\n    /**\r\n     * Fetch static information about an array of assets. This method can be used for off-chain pagination.\r\n     */\r\n    function assetsStatic(address[] memory _assetsAddresses)\r\n        public\r\n        view\r\n        returns (AssetStatic[] memory)\r\n    {\r\n        uint256 numberOfAssets = _assetsAddresses.length;\r\n        AssetStatic[] memory _assets = new AssetStatic[](numberOfAssets);\r\n        for (uint256 assetIdx = 0; assetIdx < numberOfAssets; assetIdx++) {\r\n            address assetAddress = _assetsAddresses[assetIdx];\r\n            AssetStatic memory _asset = assetStatic(assetAddress);\r\n            _assets[assetIdx] = _asset;\r\n        }\r\n        return _assets;\r\n    }\r\n\r\n    /**\r\n     * Fetch dynamic information about an array of assets. This method can be used for off-chain pagination.\r\n     */\r\n    function assetsDynamic(address[] memory _assetsAddresses)\r\n        public\r\n        view\r\n        returns (AssetDynamic[] memory)\r\n    {\r\n        uint256 numberOfAssets = _assetsAddresses.length;\r\n        AssetDynamic[] memory _assets = new AssetDynamic[](numberOfAssets);\r\n        for (uint256 assetIdx = 0; assetIdx < numberOfAssets; assetIdx++) {\r\n            address assetAddress = _assetsAddresses[assetIdx];\r\n            AssetDynamic memory _asset = assetDynamic(assetAddress);\r\n            _assets[assetIdx] = _asset;\r\n        }\r\n        return _assets;\r\n    }\r\n\r\n    /**\r\n     * Fetch static information for all assets\r\n     */\r\n    function assetsStatic() external view returns (AssetStatic[] memory) {\r\n        address[] memory _assetsAddresses = assetsAddresses();\r\n        return assetsStatic(_assetsAddresses);\r\n    }\r\n\r\n    /**\r\n     * Fetch dynamic information for all assets\r\n     */\r\n    function assetsDynamic() external view returns (AssetDynamic[] memory) {\r\n        address[] memory _assetsAddresses = assetsAddresses();\r\n        return assetsDynamic(_assetsAddresses);\r\n    }\r\n\r\n    /**\r\n     * Fetch underlying token allowances relative to an asset.\r\n     * This is useful for determining whether or not a user has token approvals\r\n     * to allow depositing into an asset\r\n     */\r\n    function tokenAllowances(\r\n        address accountAddress,\r\n        address tokenAddress,\r\n        address assetAddress\r\n    ) public view returns (Allowance[] memory) {\r\n        address[] memory tokenAddresses = new address[](1);\r\n        address[] memory assetAddresses = new address[](1);\r\n        tokenAddresses[0] = tokenAddress;\r\n        assetAddresses[0] = assetAddress;\r\n        bytes memory allowances =\r\n            abi.encode(\r\n                helper.allowances(\r\n                    accountAddress,\r\n                    tokenAddresses,\r\n                    assetAddresses\r\n                )\r\n            );\r\n        return abi.decode(allowances, (Allowance[]));\r\n    }\r\n\r\n    /**\r\n     * Fetch asset allowances based on positionSpenderAddresses (configurable).\r\n     * This is useful to determine if a particular zap contract is approved for the asset (zap out use case)\r\n     */\r\n    function assetAllowances(address accountAddress, address assetAddress)\r\n        public\r\n        view\r\n        returns (Allowance[] memory)\r\n    {\r\n        address[] memory assetAddresses = new address[](1);\r\n        assetAddresses[0] = assetAddress;\r\n        bytes memory allowances =\r\n            abi.encode(\r\n                helper.allowances(\r\n                    accountAddress,\r\n                    assetAddresses,\r\n                    positionSpenderAddresses\r\n                )\r\n            );\r\n        return abi.decode(allowances, (Allowance[]));\r\n    }\r\n\r\n    /**\r\n     * Fetch basic static token metadata\r\n     */\r\n    function tokenMetadata(address tokenAddress)\r\n        internal\r\n        view\r\n        returns (Token memory)\r\n    {\r\n        IERC20 _token = IERC20(tokenAddress);\r\n        return\r\n            Token({\r\n                id: tokenAddress,\r\n                name: _token.name(),\r\n                symbol: _token.symbol(),\r\n                decimals: _token.decimals()\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Deprecate or undeprecate an asset. Deprecated assets will not appear in any adapter method call response\r\n     */\r\n    function setAssetDeprecated(address assetAddress, bool newDeprecationStatus)\r\n        public\r\n        onlyManagers\r\n    {\r\n        bool currentDeprecationStatus = assetDeprecated[assetAddress];\r\n        if (currentDeprecationStatus == newDeprecationStatus) {\r\n            revert(\"Adapter: Unable to change asset deprecation status\");\r\n        }\r\n        if (newDeprecationStatus == true) {\r\n            numberOfDeprecatedAssets++;\r\n        } else {\r\n            numberOfDeprecatedAssets--;\r\n        }\r\n        assetDeprecated[assetAddress] = newDeprecationStatus;\r\n    }\r\n\r\n    /**\r\n     * Set position spender addresses. Used by `assetAllowances(address,address)`.\r\n     */\r\n    function setPositionSpenderAddresses(address[] memory addresses)\r\n        public\r\n        onlyManagers\r\n    {\r\n        positionSpenderAddresses = addresses;\r\n    }\r\n\r\n    /**\r\n     * Fetch TVL for adapter\r\n     */\r\n    function assetsTvl() external view returns (uint256) {\r\n        uint256 tvl;\r\n        address[] memory assetAddresses = assetsAddresses();\r\n        uint256 numberOfAssets = assetAddresses.length;\r\n        for (uint256 assetIdx = 0; assetIdx < numberOfAssets; assetIdx++) {\r\n            address assetAddress = assetAddresses[assetIdx];\r\n            uint256 _assetTvl = assetTvl(assetAddress);\r\n            tvl += _assetTvl;\r\n        }\r\n        return tvl;\r\n    }\r\n\r\n    /**\r\n     * Configure adapter\r\n     */\r\n    constructor(\r\n        address _registryAddress,\r\n        address _oracleAddress,\r\n        address _managementListAddress,\r\n        address _helperAddress\r\n    ) Manageable(_managementListAddress) {\r\n        require(\r\n            _managementListAddress != address(0),\r\n            \"Missing management list address\"\r\n        );\r\n        require(_registryAddress != address(0), \"Missing registry address\");\r\n        require(_oracleAddress != address(0), \"Missing oracle address\");\r\n        registry = IV2Registry(_registryAddress);\r\n        oracle = IOracle(_oracleAddress);\r\n        helper = IHelper(_helperAddress);\r\n    }\r\n\r\n    /*******************************************************\r\n     * Common code shared by v1 vaults, v2 vaults and earn *\r\n     *******************************************************/\r\n\r\n    /**\r\n     * Fetch asset positions of an account given an array of assets. This method can be used for off-chain pagination.\r\n     */\r\n    function positionsOf(\r\n        address accountAddress,\r\n        address[] memory _assetsAddresses\r\n    ) public view returns (Position[] memory) {\r\n        uint256 numberOfAssets = _assetsAddresses.length;\r\n        Position[] memory positions = new Position[](numberOfAssets);\r\n        for (uint256 assetIdx = 0; assetIdx < numberOfAssets; assetIdx++) {\r\n            address assetAddress = _assetsAddresses[assetIdx];\r\n            Position memory position = positionOf(accountAddress, assetAddress);\r\n            positions[assetIdx] = position;\r\n        }\r\n        return positions;\r\n    }\r\n\r\n    /**\r\n     * Fetch asset positins for an account for all assets\r\n     */\r\n    function positionsOf(address accountAddress)\r\n        external\r\n        view\r\n        returns (Position[] memory)\r\n    {\r\n        address[] memory _assetsAddresses = assetsAddresses();\r\n        return positionsOf(accountAddress, _assetsAddresses);\r\n    }\r\n\r\n    /*******************************************************\r\n     *                 V2 Adapter (unique logic)           *\r\n     *******************************************************/\r\n    /**\r\n     * Return information about the adapter\r\n     */\r\n    function adapterInfo() public view returns (AdapterInfo memory) {\r\n        return\r\n            AdapterInfo({\r\n                id: address(this),\r\n                typeId: \"VAULT_V2\",\r\n                categoryId: \"VAULT\"\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Metadata specific to this asset type\r\n     */\r\n    struct AssetMetadata {\r\n        string symbol; // Vault symbol\r\n        uint256 pricePerShare; // Vault pricePerShare\r\n        bool migrationAvailable; // True if a migration is available for this vault\r\n        address latestVaultAddress; // Latest vault migration address\r\n        uint256 depositLimit; // Deposit limit of asset\r\n        bool emergencyShutdown; // Vault is in emergency shutdown mode\r\n    }\r\n\r\n    /**\r\n     * Fetch the underlying token address of an asset\r\n     */\r\n    function underlyingTokenAddress(address assetAddress)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        IV2Vault vault = IV2Vault(assetAddress);\r\n        address tokenAddress = vault.token();\r\n        return tokenAddress;\r\n    }\r\n\r\n    /**\r\n     * Fetch the total number of assets for this adapter\r\n     */\r\n    function assetsLength() public view returns (uint256) {\r\n        uint256 numTokens = registry.numTokens();\r\n        uint256 numVaults;\r\n        for (uint256 tokenIdx = 0; tokenIdx < numTokens; tokenIdx++) {\r\n            address currentToken = registry.tokens(tokenIdx);\r\n            uint256 numVaultsForToken = registry.numVaults(currentToken);\r\n            numVaults += numVaultsForToken;\r\n        }\r\n        return numVaults - numberOfDeprecatedAssets;\r\n    }\r\n\r\n    /**\r\n     * Fetch all asset addresses for this adapter\r\n     */\r\n    function assetsAddresses() public view returns (address[] memory) {\r\n        uint256 numVaults = assetsLength();\r\n        address[] memory _assetsAddresses = new address[](numVaults);\r\n        uint256 numTokens = registry.numTokens();\r\n        uint256 currentVaultIdx;\r\n        for (uint256 tokenIdx = 0; tokenIdx < numTokens; tokenIdx++) {\r\n            address currentTokenAddress = registry.tokens(tokenIdx);\r\n            uint256 numVaultsForToken = registry.numVaults(currentTokenAddress);\r\n            for (\r\n                uint256 vaultTokenIdx = 0;\r\n                vaultTokenIdx < numVaultsForToken;\r\n                vaultTokenIdx++\r\n            ) {\r\n                address currentAssetAddress =\r\n                    registry.vaults(currentTokenAddress, vaultTokenIdx);\r\n                bool assetIsNotDeprecated =\r\n                    assetDeprecated[currentAssetAddress] == false;\r\n                if (assetIsNotDeprecated) {\r\n                    _assetsAddresses[currentVaultIdx] = currentAssetAddress;\r\n                    currentVaultIdx++;\r\n                }\r\n            }\r\n        }\r\n        return _assetsAddresses;\r\n    }\r\n\r\n    /**\r\n     * Fetch static information about an asset\r\n     */\r\n    function assetStatic(address assetAddress)\r\n        public\r\n        view\r\n        returns (AssetStatic memory)\r\n    {\r\n        IV2Vault vault = IV2Vault(assetAddress);\r\n        address tokenAddress = underlyingTokenAddress(assetAddress);\r\n        return\r\n            AssetStatic({\r\n                id: assetAddress,\r\n                typeId: adapterInfo().typeId,\r\n                name: vault.name(),\r\n                version: vault.apiVersion(),\r\n                token: tokenMetadata(tokenAddress)\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Fetch dynamic information about an asset\r\n     */\r\n    function assetDynamic(address assetAddress)\r\n        public\r\n        view\r\n        returns (AssetDynamic memory)\r\n    {\r\n        IV2Vault vault = IV2Vault(assetAddress);\r\n        address tokenAddress = underlyingTokenAddress(assetAddress);\r\n        uint256 totalSupply = vault.totalSupply();\r\n        uint256 pricePerShare = 0;\r\n        bool vaultHasShares = totalSupply != 0;\r\n        if (vaultHasShares) {\r\n            pricePerShare = vault.pricePerShare();\r\n        }\r\n\r\n        address latestVaultAddress = registry.latestVault(tokenAddress);\r\n        bool migrationAvailable = latestVaultAddress != assetAddress;\r\n\r\n        AssetMetadata memory metadata =\r\n            AssetMetadata({\r\n                symbol: vault.symbol(),\r\n                pricePerShare: pricePerShare,\r\n                migrationAvailable: migrationAvailable,\r\n                latestVaultAddress: latestVaultAddress,\r\n                depositLimit: vault.depositLimit(),\r\n                emergencyShutdown: vault.emergencyShutdown()\r\n            });\r\n\r\n        TokenAmount memory underlyingTokenBalance =\r\n            TokenAmount({\r\n                amount: assetBalance(assetAddress),\r\n                amountUsdc: assetTvl(assetAddress)\r\n            });\r\n\r\n        uint256 delegatedBalanceAmount =\r\n            helper.assetStrategiesDelegatedBalance(assetAddress);\r\n        TokenAmount memory delegatedBalance =\r\n            TokenAmount({\r\n                amount: delegatedBalanceAmount,\r\n                amountUsdc: oracle.getNormalizedValueUsdc(\r\n                    tokenAddress,\r\n                    delegatedBalanceAmount\r\n                )\r\n            });\r\n\r\n        return\r\n            AssetDynamic({\r\n                id: assetAddress,\r\n                typeId: adapterInfo().typeId,\r\n                tokenId: tokenAddress,\r\n                underlyingTokenBalance: underlyingTokenBalance,\r\n                delegatedBalance: delegatedBalance,\r\n                metadata: metadata\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Fetch asset position of an account given an asset address\r\n     */\r\n    function positionOf(address accountAddress, address assetAddress)\r\n        public\r\n        view\r\n        returns (Position memory)\r\n    {\r\n        IV2Vault _asset = IV2Vault(assetAddress);\r\n        uint8 assetDecimals = _asset.decimals();\r\n        address tokenAddress = underlyingTokenAddress(assetAddress);\r\n        IERC20 token = IERC20(tokenAddress);\r\n        uint256 balance = _asset.balanceOf(accountAddress);\r\n        uint256 _accountTokenBalance =\r\n            (balance * _asset.pricePerShare()) / 10**assetDecimals;\r\n        uint256 _underlyingTokenBalance = token.balanceOf(accountAddress);\r\n        return\r\n            Position({\r\n                assetId: assetAddress,\r\n                tokenId: tokenAddress,\r\n                typeId: \"deposit\",\r\n                balance: balance,\r\n                underlyingTokenBalance: TokenAmount({\r\n                    amount: _underlyingTokenBalance,\r\n                    amountUsdc: oracle.getNormalizedValueUsdc(\r\n                        tokenAddress,\r\n                        _underlyingTokenBalance\r\n                    )\r\n                }),\r\n                accountTokenBalance: TokenAmount({\r\n                    amount: _accountTokenBalance,\r\n                    amountUsdc: oracle.getNormalizedValueUsdc(\r\n                        tokenAddress,\r\n                        _accountTokenBalance\r\n                    )\r\n                }),\r\n                tokenAllowances: tokenAllowances(\r\n                    accountAddress,\r\n                    tokenAddress,\r\n                    assetAddress\r\n                ),\r\n                assetAllowances: assetAllowances(accountAddress, assetAddress)\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Fetch asset balance in underlying tokens\r\n     */\r\n    function assetBalance(address assetAddress) public view returns (uint256) {\r\n        IV2Vault vault = IV2Vault(assetAddress);\r\n        return vault.totalAssets();\r\n    }\r\n\r\n    /**\r\n     * Fetch TVL of an asset\r\n     */\r\n    function assetTvl(address assetAddress) public view returns (uint256) {\r\n        address tokenAddress = underlyingTokenAddress(assetAddress);\r\n        uint256 amount = assetBalance(assetAddress);\r\n        uint256 delegatedBalanceAmount =\r\n            helper.assetStrategiesDelegatedBalance(assetAddress);\r\n        amount -= delegatedBalanceAmount;\r\n        uint256 tvl = oracle.getNormalizedValueUsdc(tokenAddress, amount);\r\n        return tvl;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_managementListAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_helperAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"adapterInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"typeId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"categoryId\",\"type\":\"string\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.AdapterInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"assetAllowances\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.Allowance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"assetBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetDeprecated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"assetDynamic\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"typeId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenId\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUsdc\",\"type\":\"uint256\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.TokenAmount\",\"name\":\"underlyingTokenBalance\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUsdc\",\"type\":\"uint256\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.TokenAmount\",\"name\":\"delegatedBalance\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pricePerShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"migrationAvailable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"latestVaultAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"emergencyShutdown\",\"type\":\"bool\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.AssetMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.AssetDynamic\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"assetStatic\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"typeId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.Token\",\"name\":\"token\",\"type\":\"tuple\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.AssetStatic\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"assetTvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetsAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetsDynamic\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"typeId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenId\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUsdc\",\"type\":\"uint256\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.TokenAmount\",\"name\":\"underlyingTokenBalance\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUsdc\",\"type\":\"uint256\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.TokenAmount\",\"name\":\"delegatedBalance\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pricePerShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"migrationAvailable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"latestVaultAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"emergencyShutdown\",\"type\":\"bool\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.AssetMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.AssetDynamic[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assetsAddresses\",\"type\":\"address[]\"}],\"name\":\"assetsDynamic\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"typeId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenId\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUsdc\",\"type\":\"uint256\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.TokenAmount\",\"name\":\"underlyingTokenBalance\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUsdc\",\"type\":\"uint256\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.TokenAmount\",\"name\":\"delegatedBalance\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pricePerShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"migrationAvailable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"latestVaultAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"emergencyShutdown\",\"type\":\"bool\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.AssetMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.AssetDynamic[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetsStatic\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"typeId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.Token\",\"name\":\"token\",\"type\":\"tuple\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.AssetStatic[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assetsAddresses\",\"type\":\"address[]\"}],\"name\":\"assetsStatic\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"typeId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.Token\",\"name\":\"token\",\"type\":\"tuple\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.AssetStatic[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetsTvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"helper\",\"outputs\":[{\"internalType\":\"contract IHelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementList\",\"outputs\":[{\"internalType\":\"contract ManagementList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfDeprecatedAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"positionOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenId\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"typeId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUsdc\",\"type\":\"uint256\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.TokenAmount\",\"name\":\"accountTokenBalance\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUsdc\",\"type\":\"uint256\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.TokenAmount\",\"name\":\"underlyingTokenBalance\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.Allowance[]\",\"name\":\"tokenAllowances\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.Allowance[]\",\"name\":\"assetAllowances\",\"type\":\"tuple[]\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positionSpenderAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_assetsAddresses\",\"type\":\"address[]\"}],\"name\":\"positionsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenId\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"typeId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUsdc\",\"type\":\"uint256\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.TokenAmount\",\"name\":\"accountTokenBalance\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUsdc\",\"type\":\"uint256\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.TokenAmount\",\"name\":\"underlyingTokenBalance\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.Allowance[]\",\"name\":\"tokenAllowances\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.Allowance[]\",\"name\":\"assetAllowances\",\"type\":\"tuple[]\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.Position[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"}],\"name\":\"positionsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenId\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"typeId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUsdc\",\"type\":\"uint256\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.TokenAmount\",\"name\":\"accountTokenBalance\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUsdc\",\"type\":\"uint256\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.TokenAmount\",\"name\":\"underlyingTokenBalance\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.Allowance[]\",\"name\":\"tokenAllowances\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.Allowance[]\",\"name\":\"assetAllowances\",\"type\":\"tuple[]\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.Position[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IV2Registry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newDeprecationStatus\",\"type\":\"bool\"}],\"name\":\"setAssetDeprecated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"setPositionSpenderAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"tokenAllowances\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct RegisteryAdapterV2Vault.Allowance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"underlyingTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RegisteryAdapterV2Vault","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000050c1a2ea0a861a967d9d0ffe2ae4012c2e053804000000000000000000000000d3ca98d986be88b72ff95fc2ec976a5e6339150d000000000000000000000000f64e58ee8c7badc741a7ea98fb654880843856740000000000000000000000005aacd0d03096039ac4381cd814637e9fb7c34a6f","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://42a17bf54915001c7f498a9bc2591e7b2a8b8cf810808d5261db588e9bd05693"}]}