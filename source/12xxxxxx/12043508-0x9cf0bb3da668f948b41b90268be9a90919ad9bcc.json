{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\nlibrary Address {\r\n  function isContract(address account) internal view returns (bool) {\r\n    uint256 size;\r\n    assembly { size := extcodesize(account) }\r\n    return size > 0;\r\n  }\r\n\r\n  function sendValue(address payable recipient, uint256 amount) internal {\r\n    require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n    (bool success, ) = recipient.call{ value: amount }(\"\");\r\n    require(success, \"Address: unable to send value, recipient may have reverted\");\r\n  }\r\n\r\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n    return functionCall(target, data, \"Address: low-level call failed\");\r\n  }\r\n\r\n  function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n    return _functionCallWithValue(target, data, 0, errorMessage);\r\n  }\r\n\r\n  function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n    return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n  }\r\n\r\n  function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n    require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n    return _functionCallWithValue(target, data, value, errorMessage);\r\n  }\r\n\r\n  function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n    require(isContract(target), \"Address: call to non-contract\");\r\n    (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n    if (success) {\r\n      return returndata;\r\n    } else {\r\n      if (returndata.length > 0) {\r\n        assembly {\r\n          let returndata_size := mload(returndata)\r\n          revert(add(32, returndata), returndata_size)\r\n        }\r\n      } else {\r\n        revert(errorMessage);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n    return c;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n  using SafeMath for uint256;\r\n  using Address for address;\r\n\r\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n  }\r\n\r\n  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n  }\r\n\r\n  function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n    require((value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: approve from non-zero to non-zero allowance\");\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n  }\r\n\r\n  function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n    uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n  }\r\n\r\n  function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n    uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n  }\r\n\r\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n    bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n    if (returndata.length > 0) {\r\n      require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n  }\r\n}\r\n\r\nlibrary TransferHelper {\r\n  function safeApprove(address token, address to, uint value) internal {\r\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n    require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n  }\r\n\r\n  function safeTransfer(address token, address to, uint value) internal {\r\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n    require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n  }\r\n\r\n  function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n    require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n  }\r\n}\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IFarmFactory {\r\n  function userEnteredFarm(address _user) external;\r\n  function userLeftFarm(address _user) external;\r\n  function registerFarm(address _farmAddress) external;\r\n}\r\n\r\ncontract RewardHolder {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n\r\n  address public farmGenerator;\r\n  address public farm;\r\n  address public rewardToken;\r\n  uint256 public farmableSupply;\r\n\r\n  constructor(address _farmGenerator, address _farm) public {\r\n    farmGenerator = _farmGenerator;\r\n    farm = _farm;\r\n  }\r\n\r\n  function init(address _rewardToken, uint256 _amount) public {\r\n    address msgSender = msg.sender;\r\n    TransferHelper.safeTransferFrom(_rewardToken, msgSender, address(this), _amount);\r\n    TransferHelper.safeApprove(_rewardToken, farm, _amount);\r\n    rewardToken = _rewardToken;\r\n    farmableSupply = _amount;\r\n  }\r\n}\r\n\r\n\r\ncontract FarmStaking {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n\r\n  /// @notice information stuct on each user than stakes tokens.\r\n  struct UserInfo {\r\n    uint256 amount;     // How many tokens the user has provided.\r\n    uint256 rewardDebt; // Reward debt.\r\n  }\r\n\r\n  /// @notice all the settings for this farm in one struct\r\n  struct FarmInfo {\r\n    IERC20 token;\r\n    IERC20 rewardToken;\r\n    address rewardHolder;\r\n    uint256 startBlock;\r\n    uint256 blockReward;\r\n    uint256 bonusEndBlock;\r\n    uint256 bonus;\r\n    uint256 endBlock;\r\n    uint256 lastRewardBlock;   // Last block number that reward distribution occurs.\r\n    uint256 accRewardPerShare; // Accumulated Rewards per share, times 1e12\r\n    uint256 farmableSupply;    // set in init, total amount of tokens farmable\r\n    uint256 numFarmers;\r\n  }\r\n\r\n  /// @notice farm type id. Useful for back-end systems to know how to read the contract (ABI) as we plan to launch multiple farm types\r\n  uint256 public farmType = 2;\r\n\r\n  IFarmFactory public factory;\r\n  address public farmGenerator;\r\n\r\n  FarmInfo public farmInfo;\r\n\r\n  /// @notice information on each user than stakes tokens\r\n  mapping (address => UserInfo) public userInfo;\r\n\r\n  event Deposit(address indexed user, uint256 amount);\r\n  event Withdraw(address indexed user, uint256 amount);\r\n  event EmergencyWithdraw(address indexed user, uint256 amount);\r\n\r\n  constructor(address _factory, address _farmGenerator) public {\r\n    factory = IFarmFactory(_factory);\r\n    farmGenerator = _farmGenerator;\r\n  }\r\n\r\n  /**\r\n   * @notice initialize the farming contract. This is called only once upon farm creation and the FarmGenerator ensures the farm has the correct paramaters\r\n   */\r\n  function init(address _rewardHolder, IERC20 _rewardToken, uint256 _amount, IERC20 _token, uint256 _blockReward, uint256 _startBlock, uint256 _endBlock, uint256 _bonusEndBlock, uint256 _bonus) public {\r\n    address msgSender = _msgSender();\r\n    require(msgSender == address(farmGenerator), 'FORBIDDEN');\r\n\r\n    farmInfo.rewardToken = _rewardToken;\r\n    farmInfo.rewardHolder = _rewardHolder;\r\n\r\n    farmInfo.startBlock = _startBlock;\r\n    farmInfo.blockReward = _blockReward;\r\n    farmInfo.bonusEndBlock = _bonusEndBlock;\r\n    farmInfo.bonus = _bonus;\r\n\r\n    uint256 lastRewardBlock = block.number > _startBlock ? block.number : _startBlock;\r\n    farmInfo.token = _token;\r\n    farmInfo.lastRewardBlock = lastRewardBlock;\r\n    farmInfo.accRewardPerShare = 0;\r\n\r\n    farmInfo.endBlock = _endBlock;\r\n    farmInfo.farmableSupply = _amount;\r\n  }\r\n\r\n  /**\r\n   * @notice Gets the reward multiplier over the given _from_block until _to block\r\n   * @param _from_block the start of the period to measure rewards for\r\n   * @param _to the end of the period to measure rewards for\r\n   * @return The weighted multiplier for the given period\r\n   */\r\n  function getMultiplier(uint256 _from_block, uint256 _to) public view returns (uint256) {\r\n    uint256 _from = _from_block >= farmInfo.startBlock ? _from_block : farmInfo.startBlock;\r\n    uint256 to = farmInfo.endBlock > _to ? _to : farmInfo.endBlock;\r\n    if (to <= farmInfo.bonusEndBlock) {\r\n      return to.sub(_from).mul(farmInfo.bonus);\r\n    } else if (_from >= farmInfo.bonusEndBlock) {\r\n      return to.sub(_from);\r\n    } else {\r\n      return farmInfo.bonusEndBlock.sub(_from).mul(farmInfo.bonus).add(\r\n        to.sub(farmInfo.bonusEndBlock)\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice function to see accumulated balance of reward token for specified user\r\n   * @param _user the user for whom unclaimed tokens will be shown\r\n   * @return total amount of withdrawable reward tokens\r\n   */\r\n  function pendingReward(address _user) external view returns (uint256) {\r\n    UserInfo storage user = userInfo[_user];\r\n    uint256 accRewardPerShare = farmInfo.accRewardPerShare;\r\n    uint256 tokenSupply = farmInfo.token.balanceOf(address(this));\r\n    if (block.number > farmInfo.lastRewardBlock && tokenSupply != 0) {\r\n      uint256 multiplier = getMultiplier(farmInfo.lastRewardBlock, block.number);\r\n      uint256 tokenReward = multiplier.mul(farmInfo.blockReward);\r\n      accRewardPerShare = accRewardPerShare.add(tokenReward.mul(1e12).div(tokenSupply));\r\n    }\r\n    return user.amount.mul(accRewardPerShare).div(1e12).sub(user.rewardDebt);\r\n  }\r\n\r\n  /**\r\n   * @notice updates pool information to be up to date to the current block\r\n   */\r\n  function updatePool() public {\r\n    if (block.number <= farmInfo.lastRewardBlock) {\r\n      return;\r\n    }\r\n    uint256 tokenSupply = farmInfo.token.balanceOf(address(this));\r\n    if (tokenSupply == 0) {\r\n      farmInfo.lastRewardBlock = block.number < farmInfo.endBlock ? block.number : farmInfo.endBlock;\r\n      return;\r\n    }\r\n    uint256 multiplier = getMultiplier(farmInfo.lastRewardBlock, block.number);\r\n    uint256 tokenReward = multiplier.mul(farmInfo.blockReward);\r\n    farmInfo.accRewardPerShare = farmInfo.accRewardPerShare.add(tokenReward.mul(1e12).div(tokenSupply));\r\n    farmInfo.lastRewardBlock = block.number < farmInfo.endBlock ? block.number : farmInfo.endBlock;\r\n  }\r\n\r\n  /**\r\n   * @notice deposit token function for msgSender\r\n   * @param _amount the total deposit amount\r\n   */\r\n  function deposit(uint256 _amount) public {\r\n    address msgSender = _msgSender();\r\n    UserInfo storage user = userInfo[msgSender];\r\n    updatePool();\r\n    if (user.amount > 0) {\r\n      uint256 pending = user.amount.mul(farmInfo.accRewardPerShare).div(1e12).sub(user.rewardDebt);\r\n      safeRewardTransfer(msgSender, pending);\r\n    }\r\n    if (user.amount == 0 && _amount > 0) {\r\n      factory.userEnteredFarm(msgSender);\r\n      farmInfo.numFarmers = farmInfo.numFarmers.add(1);\r\n    }\r\n    farmInfo.token.safeTransferFrom(address(msgSender), address(this), _amount);\r\n    user.amount = user.amount.add(_amount);\r\n    user.rewardDebt = user.amount.mul(farmInfo.accRewardPerShare).div(1e12);\r\n    emit Deposit(msgSender, _amount);\r\n  }\r\n\r\n  /**\r\n   * @notice withdraw token function for msgSender\r\n   * @param _amount the total withdrawable amount\r\n   */\r\n  function withdraw(uint256 _amount) public {\r\n    address msgSender = _msgSender();\r\n    UserInfo storage user = userInfo[msgSender];\r\n    require(user.amount >= _amount, \"INSUFFICIENT\");\r\n    updatePool();\r\n    if (user.amount == _amount && _amount > 0) {\r\n      factory.userLeftFarm(msgSender);\r\n      farmInfo.numFarmers = farmInfo.numFarmers.sub(1);\r\n    }\r\n    uint256 pending = user.amount.mul(farmInfo.accRewardPerShare).div(1e12).sub(user.rewardDebt);\r\n    safeRewardTransfer(msgSender, pending);\r\n    user.amount = user.amount.sub(_amount);\r\n    user.rewardDebt = user.amount.mul(farmInfo.accRewardPerShare).div(1e12);\r\n    farmInfo.token.safeTransfer(address(msgSender), _amount);\r\n    emit Withdraw(msgSender, _amount);\r\n  }\r\n\r\n  /**\r\n   * @notice emergency functoin to withdraw tokens and forego harvest rewards. Important to protect users tokens\r\n   */\r\n  function emergencyWithdraw() public {\r\n    address msgSender = _msgSender();\r\n    UserInfo storage user = userInfo[msgSender];\r\n    farmInfo.token.safeTransfer(address(msgSender), user.amount);\r\n    emit EmergencyWithdraw(msgSender, user.amount);\r\n    if (user.amount > 0) {\r\n      factory.userLeftFarm(msgSender);\r\n      farmInfo.numFarmers = farmInfo.numFarmers.sub(1);\r\n    }\r\n    user.amount = 0;\r\n    user.rewardDebt = 0;\r\n  }\r\n\r\n  /**\r\n   * @notice Safe reward transfer function, just in case a rounding error causes pool to not have enough reward tokens\r\n   * @param _to the user address to transfer tokens to\r\n   * @param _amount the total amount of tokens to transfer\r\n   */\r\n  function safeRewardTransfer(address _to, uint256 _amount) internal {\r\n    uint256 rewardBal = farmInfo.rewardToken.balanceOf(farmInfo.rewardHolder);\r\n    if (_amount > rewardBal) {\r\n      farmInfo.rewardToken.transferFrom(farmInfo.rewardHolder, _to, rewardBal);\r\n    } else {\r\n      farmInfo.rewardToken.transferFrom(farmInfo.rewardHolder, _to, _amount);\r\n    }\r\n  }\r\n\r\n  function _msgSender() internal view virtual returns (address payable) {\r\n    return msg.sender;\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_farmGenerator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_farm\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"farm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmGenerator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmableSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RewardHolder","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"000000000000000000000000dd7629d821c096aed28aec33a4306cad016a360700000000000000000000000032efd246e61107a9430f14830e27b9c7798f9332","EVMVersion":"istanbul","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0f509e2550e01dfa92da2e879784f0085d1181ef4278571b24c480989763d4e5"}]}