{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/home/BMI/bridgemutual-core/contracts/ClaimVoting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./interfaces/IContractsRegistry.sol\\\";\\nimport \\\"./interfaces/helpers/IPriceFeed.sol\\\";\\nimport \\\"./interfaces/IClaimVoting.sol\\\";\\nimport \\\"./interfaces/IPolicyBookRegistry.sol\\\";\\nimport \\\"./interfaces/IReputationSystem.sol\\\";\\nimport \\\"./interfaces/IReinsurancePool.sol\\\";\\nimport \\\"./interfaces/IPolicyBook.sol\\\";\\n\\nimport \\\"./interfaces/tokens/IVBMI.sol\\\";\\n\\nimport \\\"./abstract/AbstractDependant.sol\\\";\\n\\nimport \\\"./Globals.sol\\\";\\n\\ncontract ClaimVoting is IClaimVoting, Initializable, AbstractDependant {\\n    using SafeMath for uint256;\\n    using Math for uint256;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    IPriceFeed public priceFeed;\\n\\n    IERC20 public bmiToken;\\n    IERC20 public daiToken;\\n    IReinsurancePool public reinsurancePool;\\n    IVBMI public vBMI;\\n    IClaimingRegistry public claimingRegistry;\\n    IPolicyBookRegistry public policyBookRegistry;\\n    IReputationSystem public reputationSystem;\\n\\n    uint256 public constant PERCENTAGE_50 = 50 * PRECISION;\\n\\n    uint256 public constant APPROVAL_PERCENTAGE = 66 * PRECISION;\\n    uint256 public constant PENALTY_THRESHOLD = 11 * PRECISION;\\n    uint256 public constant QUORUM = 10 * PRECISION;\\n    uint256 public constant CALCULATION_REWARD_PER_DAY = PRECISION;\\n\\n    // claim index -> info\\n    mapping(uint256 => VotingResult) internal _votings;\\n\\n    // voter -> claim indexes\\n    mapping(address => EnumerableSet.UintSet) internal _myNotCalculatedVotes;\\n\\n    // voter -> voting indexes\\n    mapping(address => EnumerableSet.UintSet) internal _myVotes;\\n\\n    // voter -> claim index -> vote index\\n    mapping(address => mapping(uint256 => uint256)) internal _allVotesToIndex;\\n\\n    // vote index -> voting instance\\n    mapping(uint256 => VotingInst) internal _allVotesByIndexInst;\\n\\n    EnumerableSet.UintSet internal _allVotesIndexes;\\n\\n    uint256 private _voteIndex;\\n\\n    event AnonymouslyVoted(uint256 claimIndex);\\n    event VoteExposed(uint256 claimIndex, address voter, uint256 suggestedClaimAmount);\\n    event VoteCalculated(uint256 claimIndex, address voter, VoteStatus status);\\n    event RewardsForVoteCalculationSent(address voter, uint256 bmiAmount);\\n    event RewardsForClaimCalculationSent(address calculator, uint256 bmiAmount);\\n    event ClaimCalculated(uint256 claimIndex, address calculator);\\n\\n    modifier onlyPolicyBook() {\\n        require(policyBookRegistry.isPolicyBook(msg.sender), \\\"CV: Not a PolicyBook\\\");\\n        _;\\n    }\\n\\n    function _isVoteAwaitingCalculation(uint256 index) internal view returns (bool) {\\n        uint256 claimIndex = _allVotesByIndexInst[index].claimIndex;\\n\\n        return (_allVotesByIndexInst[index].status == VoteStatus.EXPOSED_PENDING &&\\n            !claimingRegistry.isClaimPending(claimIndex));\\n    }\\n\\n    function _isVoteAwaitingExposure(uint256 index) internal view returns (bool) {\\n        uint256 claimIndex = _allVotesByIndexInst[index].claimIndex;\\n\\n        return (_allVotesByIndexInst[index].status == VoteStatus.ANONYMOUS_PENDING &&\\n            claimingRegistry.isClaimExposablyVotable(claimIndex));\\n    }\\n\\n    function _isVoteExpired(uint256 index) internal view returns (bool) {\\n        uint256 claimIndex = _allVotesByIndexInst[index].claimIndex;\\n\\n        return (_allVotesByIndexInst[index].status == VoteStatus.ANONYMOUS_PENDING &&\\n            !claimingRegistry.isClaimVotable(claimIndex));\\n    }\\n\\n    function __ClaimVoting_init() external initializer {\\n        _voteIndex = 1;\\n    }\\n\\n    function setDependencies(IContractsRegistry _contractsRegistry)\\n        external\\n        override\\n        onlyInjectorOrZero\\n    {\\n        priceFeed = IPriceFeed(_contractsRegistry.getPriceFeedContract());\\n        claimingRegistry = IClaimingRegistry(_contractsRegistry.getClaimingRegistryContract());\\n        policyBookRegistry = IPolicyBookRegistry(\\n            _contractsRegistry.getPolicyBookRegistryContract()\\n        );\\n        reputationSystem = IReputationSystem(_contractsRegistry.getReputationSystemContract());\\n        reinsurancePool = IReinsurancePool(_contractsRegistry.getReinsurancePoolContract());\\n        vBMI = IVBMI(_contractsRegistry.getVBMIContract());\\n        bmiToken = IERC20(_contractsRegistry.getBMIContract());\\n        daiToken = IERC20(_contractsRegistry.getDAIContract());\\n    }\\n\\n    /// @notice this function needs user's BMI approval of this address (check policybook)\\n    function initializeVoting(\\n        address claimer,\\n        address policyBookAddress,\\n        string calldata evidenceURI,\\n        uint256 coverTokens,\\n        uint256 reinsuranceTokensAmount,\\n        bool appeal\\n    ) external override onlyPolicyBook {\\n        require(coverTokens > 0, \\\"CV: Claimer has no coverage\\\");\\n\\n        // this checks claim duplicate && appeal logic\\n        uint256 claimIndex =\\n            claimingRegistry.submitClaim(\\n                claimer,\\n                policyBookAddress,\\n                evidenceURI,\\n                coverTokens,\\n                appeal\\n            );\\n\\n        uint256 onePercentInBMIToLock = priceFeed.howManyBMIsInDAI(coverTokens.div(100));\\n\\n        bmiToken.transferFrom(claimer, address(this), onePercentInBMIToLock); // needed approval\\n\\n        reinsuranceTokensAmount = Math.min(reinsuranceTokensAmount, coverTokens.div(100));\\n\\n        _votings[claimIndex].withdrawalAmount = coverTokens;\\n        _votings[claimIndex].lockedBMIAmount = onePercentInBMIToLock;\\n        _votings[claimIndex].reinsuranceTokensAmount = reinsuranceTokensAmount;\\n    }\\n\\n    /// @dev check in BMIStaking when withdrawing, if true -> can withdraw\\n    function canWithdraw(address user) external view override returns (bool) {\\n        return _myNotCalculatedVotes[user].length() == 0;\\n    }\\n\\n    /// @dev check when anonymously voting, if true -> can vote\\n    function canVote(address user) public view override returns (bool) {\\n        uint256 notCalculatedLength = _myNotCalculatedVotes[user].length();\\n\\n        for (uint256 i = 0; i < notCalculatedLength; i++) {\\n            if (\\n                _isVoteAwaitingCalculation(\\n                    _allVotesToIndex[user][_myNotCalculatedVotes[user].at(i)]\\n                )\\n            ) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function countVotes(address user) external view override returns (uint256) {\\n        return _myVotes[user].length();\\n    }\\n\\n    function voteStatus(uint256 index) public view override returns (VoteStatus) {\\n        require(_allVotesIndexes.contains(index), \\\"CV: Vote doesn't exist\\\");\\n\\n        if (_isVoteAwaitingCalculation(index)) {\\n            return VoteStatus.AWAITING_CALCULATION;\\n        } else if (_isVoteAwaitingExposure(index)) {\\n            return VoteStatus.AWAITING_EXPOSURE;\\n        } else if (_isVoteExpired(index)) {\\n            return VoteStatus.EXPIRED;\\n        }\\n\\n        return _allVotesByIndexInst[index].status;\\n    }\\n\\n    /// @dev use with claimingRegistry.countPendingClaims()\\n    function whatCanIVoteFor(uint256 offset, uint256 limit)\\n        external\\n        view\\n        override\\n        returns (uint256 _claimsCount, PublicClaimInfo[] memory _votablesInfo)\\n    {\\n        uint256 to = (offset.add(limit)).min(claimingRegistry.countPendingClaims()).max(offset);\\n        bool trustedVoter = reputationSystem.isTrustedVoter(msg.sender);\\n\\n        _claimsCount = 0;\\n\\n        _votablesInfo = new PublicClaimInfo[](to - offset);\\n\\n        for (uint256 i = offset; i < to; i++) {\\n            uint256 index = claimingRegistry.pendingClaimIndexAt(i);\\n\\n            if (\\n                _allVotesToIndex[msg.sender][index] == 0 &&\\n                claimingRegistry.claimOwner(index) != msg.sender &&\\n                claimingRegistry.isClaimAnonymouslyVotable(index) &&\\n                (!claimingRegistry.isClaimAppeal(index) || trustedVoter)\\n            ) {\\n                IClaimingRegistry.ClaimInfo memory claimInfo = claimingRegistry.claimInfo(index);\\n\\n                _votablesInfo[_claimsCount].claimIndex = index;\\n                _votablesInfo[_claimsCount].claimer = claimInfo.claimer;\\n                _votablesInfo[_claimsCount].policyBookAddress = claimInfo.policyBookAddress;\\n                _votablesInfo[_claimsCount].evidenceURI = claimInfo.evidenceURI;\\n                _votablesInfo[_claimsCount].appeal = claimInfo.appeal;\\n                _votablesInfo[_claimsCount].claimAmount = claimInfo.claimAmount;\\n                _votablesInfo[_claimsCount].time = claimInfo.dateSubmitted;\\n\\n                _votablesInfo[_claimsCount].time = _votablesInfo[_claimsCount]\\n                    .time\\n                    .add(claimingRegistry.anonymousVotingDuration(index))\\n                    .sub(block.timestamp);\\n\\n                _claimsCount++;\\n            }\\n        }\\n    }\\n\\n    /// @dev use with claimingRegistry.countClaims()\\n    function allClaims(uint256 offset, uint256 limit)\\n        external\\n        view\\n        override\\n        returns (AllClaimInfo[] memory _allClaimsInfo)\\n    {\\n        uint256 to = (offset.add(limit)).min(claimingRegistry.countClaims()).max(offset);\\n\\n        _allClaimsInfo = new AllClaimInfo[](to - offset);\\n\\n        for (uint256 i = offset; i < to; i++) {\\n            uint256 index = claimingRegistry.claimIndexAt(i);\\n\\n            IClaimingRegistry.ClaimInfo memory claimInfo = claimingRegistry.claimInfo(index);\\n\\n            _allClaimsInfo[i - offset].publicClaimInfo.claimIndex = index;\\n            _allClaimsInfo[i - offset].publicClaimInfo.claimer = claimInfo.claimer;\\n            _allClaimsInfo[i - offset].publicClaimInfo.policyBookAddress = claimInfo\\n                .policyBookAddress;\\n            _allClaimsInfo[i - offset].publicClaimInfo.evidenceURI = claimInfo.evidenceURI;\\n            _allClaimsInfo[i - offset].publicClaimInfo.appeal = claimInfo.appeal;\\n            _allClaimsInfo[i - offset].publicClaimInfo.claimAmount = claimInfo.claimAmount;\\n            _allClaimsInfo[i - offset].publicClaimInfo.time = claimInfo.dateSubmitted;\\n\\n            _allClaimsInfo[i - offset].finalVerdict = claimInfo.status;\\n\\n            if (\\n                _allClaimsInfo[i - offset].finalVerdict == IClaimingRegistry.ClaimStatus.ACCEPTED\\n            ) {\\n                _allClaimsInfo[i - offset].finalClaimAmount = _votings[index]\\n                    .votedAverageWithdrawalAmount;\\n            }\\n\\n            if (claimingRegistry.canClaimBeCalculatedByAnyone(index)) {\\n                _allClaimsInfo[i - offset].bmiCalculationReward = _getBMIRewardForCalculation(\\n                    index\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @dev use with claimingRegistry.countPolicyClaimerClaims()\\n    function myClaims(uint256 offset, uint256 limit)\\n        external\\n        view\\n        override\\n        returns (MyClaimInfo[] memory _myClaimsInfo)\\n    {\\n        uint256 to =\\n            (offset.add(limit)).min(claimingRegistry.countPolicyClaimerClaims(msg.sender)).max(\\n                offset\\n            );\\n\\n        _myClaimsInfo = new MyClaimInfo[](to - offset);\\n\\n        for (uint256 i = offset; i < to; i++) {\\n            uint256 index = claimingRegistry.claimOfOwnerIndexAt(msg.sender, i);\\n\\n            IClaimingRegistry.ClaimInfo memory claimInfo = claimingRegistry.claimInfo(index);\\n\\n            _myClaimsInfo[i - offset].index = index;\\n            _myClaimsInfo[i - offset].policyBookAddress = claimInfo.policyBookAddress;\\n            _myClaimsInfo[i - offset].evidenceURI = claimInfo.evidenceURI;\\n            _myClaimsInfo[i - offset].appeal = claimInfo.appeal;\\n            _myClaimsInfo[i - offset].claimAmount = claimInfo.claimAmount;\\n            _myClaimsInfo[i - offset].finalVerdict = claimInfo.status;\\n\\n            if (_myClaimsInfo[i - offset].finalVerdict == IClaimingRegistry.ClaimStatus.ACCEPTED) {\\n                _myClaimsInfo[i - offset].finalClaimAmount = _votings[index]\\n                    .votedAverageWithdrawalAmount;\\n            } else if (\\n                _myClaimsInfo[i - offset].finalVerdict ==\\n                IClaimingRegistry.ClaimStatus.AWAITING_CALCULATION\\n            ) {\\n                _myClaimsInfo[i - offset].bmiCalculationReward = _getBMIRewardForCalculation(\\n                    index\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @dev use with countVotes()\\n    function myVotes(uint256 offset, uint256 limit)\\n        external\\n        view\\n        override\\n        returns (MyVoteInfo[] memory _myVotesInfo)\\n    {\\n        uint256 to = (offset.add(limit)).min(_myVotes[msg.sender].length()).max(offset);\\n\\n        _myVotesInfo = new MyVoteInfo[](to - offset);\\n\\n        for (uint256 i = offset; i < to; i++) {\\n            VotingInst storage myVote = _allVotesByIndexInst[_myVotes[msg.sender].at(i)];\\n\\n            uint256 index = myVote.claimIndex;\\n\\n            IClaimingRegistry.ClaimInfo memory claimInfo = claimingRegistry.claimInfo(index);\\n\\n            _myVotesInfo[i - offset].allClaimInfo.publicClaimInfo.claimIndex = index;\\n            _myVotesInfo[i - offset].allClaimInfo.publicClaimInfo.claimer = claimInfo.claimer;\\n            _myVotesInfo[i - offset].allClaimInfo.publicClaimInfo.policyBookAddress = claimInfo\\n                .policyBookAddress;\\n            _myVotesInfo[i - offset].allClaimInfo.publicClaimInfo.evidenceURI = claimInfo\\n                .evidenceURI;\\n            _myVotesInfo[i - offset].allClaimInfo.publicClaimInfo.appeal = claimInfo.appeal;\\n            _myVotesInfo[i - offset].allClaimInfo.publicClaimInfo.claimAmount = claimInfo\\n                .claimAmount;\\n            _myVotesInfo[i - offset].allClaimInfo.publicClaimInfo.time = claimInfo.dateSubmitted;\\n\\n            _myVotesInfo[i - offset].allClaimInfo.finalVerdict = claimInfo.status;\\n\\n            if (\\n                _myVotesInfo[i - offset].allClaimInfo.finalVerdict ==\\n                IClaimingRegistry.ClaimStatus.ACCEPTED\\n            ) {\\n                _myVotesInfo[i - offset].allClaimInfo.finalClaimAmount = _votings[index]\\n                    .votedAverageWithdrawalAmount;\\n            }\\n\\n            _myVotesInfo[i - offset].suggestedAmount = myVote.suggestedAmount;\\n            _myVotesInfo[i - offset].status = voteStatus(_myVotes[msg.sender].at(i));\\n\\n            if (_myVotesInfo[i - offset].status == VoteStatus.ANONYMOUS_PENDING) {\\n                _myVotesInfo[i - offset].time = claimInfo\\n                    .dateSubmitted\\n                    .add(claimingRegistry.anonymousVotingDuration(index))\\n                    .sub(block.timestamp);\\n            } else if (_myVotesInfo[i - offset].status == VoteStatus.AWAITING_EXPOSURE) {\\n                _myVotesInfo[i - offset].encryptedVote = myVote.encryptedVote;\\n                _myVotesInfo[i - offset].time = claimInfo\\n                    .dateSubmitted\\n                    .add(claimingRegistry.votingDuration(index))\\n                    .sub(block.timestamp);\\n            }\\n        }\\n    }\\n\\n    /// @dev use with countVotes()\\n    function myVotesUpdates(uint256 offset, uint256 limit)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 _votesUpdatesCount,\\n            uint256[] memory _claimIndexes,\\n            VotesUpdatesInfo memory _myVotesUpdatesInfo\\n        )\\n    {\\n        uint256 to = (offset.add(limit)).min(_myVotes[msg.sender].length()).max(offset);\\n        _votesUpdatesCount = 0;\\n\\n        _claimIndexes = new uint256[](to - offset);\\n\\n        uint256 daiAmount;\\n        uint256 bmiAmount;\\n        uint256 bmiPenaltyAmount;\\n        uint256 newReputation;\\n\\n        for (uint256 i = offset; i < to; i++) {\\n            uint256 claimIndex = _allVotesByIndexInst[_myVotes[msg.sender].at(i)].claimIndex;\\n\\n            if (\\n                _myNotCalculatedVotes[msg.sender].contains(claimIndex) &&\\n                _isVoteAwaitingCalculation(_allVotesToIndex[msg.sender][claimIndex])\\n            ) {\\n                _claimIndexes[_votesUpdatesCount] = claimIndex;\\n                uint256 oldReputation = reputationSystem.reputation(msg.sender);\\n\\n                if (\\n                    _votings[claimIndex].votedYesPercentage >= PERCENTAGE_50 &&\\n                    _allVotesByIndexInst[_allVotesToIndex[msg.sender][claimIndex]]\\n                        .suggestedAmount >\\n                    0\\n                ) {\\n                    (daiAmount, bmiAmount, newReputation) = _calculateMajorityYesVote(\\n                        claimIndex,\\n                        msg.sender,\\n                        oldReputation\\n                    );\\n\\n                    _myVotesUpdatesInfo.reputationChange += int256(\\n                        newReputation.sub(oldReputation)\\n                    );\\n                } else if (\\n                    _votings[claimIndex].votedYesPercentage < PERCENTAGE_50 &&\\n                    _allVotesByIndexInst[_allVotesToIndex[msg.sender][claimIndex]]\\n                        .suggestedAmount ==\\n                    0\\n                ) {\\n                    (bmiAmount, newReputation) = _calculateMajorityNoVote(\\n                        claimIndex,\\n                        msg.sender,\\n                        oldReputation\\n                    );\\n\\n                    _myVotesUpdatesInfo.reputationChange += int256(\\n                        newReputation.sub(oldReputation)\\n                    );\\n                } else {\\n                    (bmiPenaltyAmount, newReputation) = _calculateMinorityVote(\\n                        claimIndex,\\n                        msg.sender,\\n                        oldReputation\\n                    );\\n\\n                    _myVotesUpdatesInfo.reputationChange -= int256(\\n                        oldReputation.sub(newReputation)\\n                    );\\n                    _myVotesUpdatesInfo.stakeChange -= int256(bmiPenaltyAmount);\\n                }\\n\\n                _myVotesUpdatesInfo.bmiReward = _myVotesUpdatesInfo.bmiReward.add(bmiAmount);\\n                _myVotesUpdatesInfo.daiReward = _myVotesUpdatesInfo.daiReward.add(daiAmount);\\n\\n                _votesUpdatesCount++;\\n            }\\n        }\\n    }\\n\\n    function _calculateAverages(\\n        uint256 claimIndex,\\n        uint256 stakedBMI,\\n        uint256 suggestedClaimAmount,\\n        uint256 reputationWithPrecision,\\n        bool votedFor\\n    ) internal {\\n        VotingResult storage info = _votings[claimIndex];\\n\\n        if (votedFor) {\\n            uint256 votedPower = info.votedYesStakedBMIAmountWithReputation;\\n            uint256 voterPower = stakedBMI.mul(reputationWithPrecision);\\n            uint256 totalPower = votedPower.add(voterPower);\\n\\n            uint256 votedSuggestedPrice = info.votedAverageWithdrawalAmount.mul(votedPower);\\n            uint256 voterSuggestedPrice = suggestedClaimAmount.mul(voterPower);\\n\\n            info.votedAverageWithdrawalAmount = votedSuggestedPrice.add(voterSuggestedPrice).div(\\n                totalPower\\n            );\\n            info.votedYesStakedBMIAmountWithReputation = totalPower;\\n        } else {\\n            info.votedNoStakedBMIAmountWithReputation = info\\n                .votedNoStakedBMIAmountWithReputation\\n                .add(stakedBMI.mul(reputationWithPrecision));\\n        }\\n\\n        info.allVotedStakedBMIAmount = info.allVotedStakedBMIAmount.add(stakedBMI);\\n    }\\n\\n    function _modifyExposedVote(\\n        address voter,\\n        uint256 claimIndex,\\n        uint256 suggestedClaimAmount,\\n        uint256 stakedBMI,\\n        bool accept\\n    ) internal {\\n        uint256 index = _allVotesToIndex[voter][claimIndex];\\n\\n        _myNotCalculatedVotes[voter].add(claimIndex);\\n\\n        _allVotesByIndexInst[index].finalHash = 0;\\n        delete _allVotesByIndexInst[index].encryptedVote;\\n\\n        _allVotesByIndexInst[index].suggestedAmount = suggestedClaimAmount;\\n        _allVotesByIndexInst[index].stakedBMIAmount = stakedBMI;\\n        _allVotesByIndexInst[index].accept = accept;\\n        _allVotesByIndexInst[index].status = VoteStatus.EXPOSED_PENDING;\\n    }\\n\\n    function _addAnonymousVote(\\n        address voter,\\n        uint256 claimIndex,\\n        bytes32 finalHash,\\n        string memory encryptedVote\\n    ) internal {\\n        _myVotes[voter].add(_voteIndex);\\n\\n        _allVotesByIndexInst[_voteIndex].claimIndex = claimIndex;\\n        _allVotesByIndexInst[_voteIndex].finalHash = finalHash;\\n        _allVotesByIndexInst[_voteIndex].encryptedVote = encryptedVote;\\n        _allVotesByIndexInst[_voteIndex].voter = voter;\\n        _allVotesByIndexInst[_voteIndex].voterReputation = reputationSystem.reputation(voter);\\n        // No need to set default ANONYMOUS_PENDING status\\n\\n        _allVotesToIndex[voter][claimIndex] = _voteIndex;\\n        _allVotesIndexes.add(_voteIndex);\\n\\n        _voteIndex++;\\n    }\\n\\n    function anonymouslyVoteBatch(\\n        uint256[] calldata claimIndexes,\\n        bytes32[] calldata finalHashes,\\n        string[] calldata encryptedVotes\\n    ) external override {\\n        require(canVote(msg.sender), \\\"CV: There are awaiting votes\\\");\\n        require(\\n            claimIndexes.length == finalHashes.length &&\\n                claimIndexes.length == encryptedVotes.length,\\n            \\\"CV: Length mismatches\\\"\\n        );\\n\\n        for (uint256 i = 0; i < claimIndexes.length; i++) {\\n            uint256 claimIndex = claimIndexes[i];\\n\\n            require(\\n                claimingRegistry.isClaimAnonymouslyVotable(claimIndex),\\n                \\\"CV: Anonymous voting is over\\\"\\n            );\\n            require(\\n                claimingRegistry.claimOwner(claimIndex) != msg.sender,\\n                \\\"CV: Voter is the claimer\\\"\\n            );\\n            require(\\n                !claimingRegistry.isClaimAppeal(claimIndex) ||\\n                    reputationSystem.isTrustedVoter(msg.sender),\\n                \\\"CV: Not a trusted voter\\\"\\n            );\\n            require(\\n                _allVotesToIndex[msg.sender][claimIndex] == 0,\\n                \\\"CV: Already voted for this claim\\\"\\n            );\\n\\n            _addAnonymousVote(msg.sender, claimIndex, finalHashes[i], encryptedVotes[i]);\\n\\n            emit AnonymouslyVoted(claimIndex);\\n        }\\n    }\\n\\n    function exposeVoteBatch(\\n        uint256[] calldata claimIndexes,\\n        uint256[] calldata suggestedClaimAmounts,\\n        bytes32[] calldata hashedSignaturesOfClaims\\n    ) external override {\\n        require(\\n            claimIndexes.length == suggestedClaimAmounts.length &&\\n                claimIndexes.length == hashedSignaturesOfClaims.length,\\n            \\\"CV: Length mismatches\\\"\\n        );\\n\\n        uint256 stakedBMI = vBMI.balanceOf(msg.sender); // use canWithdaw function in vBMI staking\\n\\n        require(stakedBMI > 0, \\\"CV: 0 staked BMI\\\");\\n\\n        for (uint256 i = 0; i < claimIndexes.length; i++) {\\n            uint256 claimIndex = claimIndexes[i];\\n            uint256 voteIndex = _allVotesToIndex[msg.sender][claimIndex];\\n\\n            require(_allVotesIndexes.contains(voteIndex), \\\"CV: Vote doesn't exist\\\");\\n            require(_isVoteAwaitingExposure(voteIndex), \\\"CV: Vote is not awaiting\\\");\\n\\n            bytes32 finalHash =\\n                keccak256(\\n                    abi.encodePacked(\\n                        hashedSignaturesOfClaims[i],\\n                        _allVotesByIndexInst[voteIndex].encryptedVote,\\n                        suggestedClaimAmounts[i]\\n                    )\\n                );\\n\\n            require(_allVotesByIndexInst[voteIndex].finalHash == finalHash, \\\"CV: Data mismatches\\\");\\n            require(\\n                _votings[claimIndex].withdrawalAmount >= suggestedClaimAmounts[i],\\n                \\\"CV: Amount succeds coverage\\\"\\n            );\\n\\n            bool voteFor = (suggestedClaimAmounts[i] > 0);\\n\\n            _calculateAverages(\\n                claimIndex,\\n                stakedBMI,\\n                suggestedClaimAmounts[i],\\n                _allVotesByIndexInst[voteIndex].voterReputation,\\n                voteFor\\n            );\\n\\n            _modifyExposedVote(\\n                msg.sender,\\n                claimIndex,\\n                suggestedClaimAmounts[i],\\n                stakedBMI,\\n                voteFor\\n            );\\n\\n            emit VoteExposed(claimIndex, msg.sender, suggestedClaimAmounts[i]);\\n        }\\n    }\\n\\n    function _getRewardRatio(\\n        uint256 claimIndex,\\n        address voter,\\n        uint256 votedStakedBMIAmountWithReputation\\n    ) internal view returns (uint256) {\\n        uint256 voteIndex = _allVotesToIndex[voter][claimIndex];\\n\\n        uint256 voterBMI = _allVotesByIndexInst[voteIndex].stakedBMIAmount;\\n        uint256 voterReputation = _allVotesByIndexInst[voteIndex].voterReputation;\\n\\n        return\\n            voterBMI.mul(voterReputation).mul(PERCENTAGE_100).div(\\n                votedStakedBMIAmountWithReputation\\n            );\\n    }\\n\\n    function _calculateMajorityYesVote(\\n        uint256 claimIndex,\\n        address voter,\\n        uint256 oldReputation\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 _daiAmount,\\n            uint256 _bmiAmount,\\n            uint256 _newReputation\\n        )\\n    {\\n        VotingResult storage info = _votings[claimIndex];\\n\\n        uint256 voterRatio =\\n            _getRewardRatio(claimIndex, voter, info.votedYesStakedBMIAmountWithReputation);\\n\\n        if (claimingRegistry.claimStatus(claimIndex) == IClaimingRegistry.ClaimStatus.ACCEPTED) {\\n            // calculate DAI reward tokens sent to the voter (from reinsurance)\\n            _daiAmount = info.reinsuranceTokensAmount.mul(voterRatio).div(PERCENTAGE_100);\\n        } else {\\n            // calculate BMI reward tokens sent to the voter (from 1% locked)\\n            _bmiAmount = info.lockedBMIAmount.mul(voterRatio).div(PERCENTAGE_100);\\n        }\\n\\n        _newReputation = reputationSystem.getNewReputation(oldReputation, info.votedYesPercentage);\\n    }\\n\\n    function _calculateMajorityNoVote(\\n        uint256 claimIndex,\\n        address voter,\\n        uint256 oldReputation\\n    ) internal view returns (uint256 _bmiAmount, uint256 _newReputation) {\\n        VotingResult storage info = _votings[claimIndex];\\n\\n        uint256 voterRatio =\\n            _getRewardRatio(claimIndex, voter, info.votedNoStakedBMIAmountWithReputation);\\n\\n        // calculate BMI reward tokens sent to the voter (from 1% locked)\\n        _bmiAmount = info.lockedBMIAmount.mul(voterRatio).div(PERCENTAGE_100);\\n\\n        _newReputation = reputationSystem.getNewReputation(\\n            oldReputation,\\n            PERCENTAGE_100.sub(info.votedYesPercentage)\\n        );\\n    }\\n\\n    function _calculateMinorityVote(\\n        uint256 claimIndex,\\n        address voter,\\n        uint256 oldReputation\\n    ) internal view returns (uint256 _bmiPenalty, uint256 _newReputation) {\\n        uint256 minorityPercentageWithPrecision =\\n            Math.min(\\n                _votings[claimIndex].votedYesPercentage,\\n                PERCENTAGE_100.sub(_votings[claimIndex].votedYesPercentage)\\n            );\\n\\n        if (minorityPercentageWithPrecision < PENALTY_THRESHOLD) {\\n            // calculate confiscated staked stkBMI tokens sent to reinsurance pool\\n            _bmiPenalty = Math.min(\\n                vBMI.balanceOf(voter),\\n                _allVotesByIndexInst[_allVotesToIndex[voter][claimIndex]]\\n                    .stakedBMIAmount\\n                    .mul(PENALTY_THRESHOLD.sub(minorityPercentageWithPrecision))\\n                    .div(PERCENTAGE_100)\\n            );\\n        }\\n\\n        _newReputation = reputationSystem.getNewReputation(\\n            oldReputation,\\n            minorityPercentageWithPrecision\\n        );\\n    }\\n\\n    function calculateVoterResultBatch(uint256[] calldata claimIndexes) external override {\\n        uint256 reputation = reputationSystem.reputation(msg.sender);\\n\\n        for (uint256 i = 0; i < claimIndexes.length; i++) {\\n            uint256 claimIndex = claimIndexes[i];\\n\\n            require(claimingRegistry.claimExists(claimIndex), \\\"CV: Claim doesn't exist\\\");\\n\\n            uint256 voteIndex = _allVotesToIndex[msg.sender][claimIndex];\\n\\n            require(_allVotesIndexes.contains(voteIndex), \\\"CV: Vote doesn't exist\\\");\\n            require(voteIndex != 0, \\\"CV: No vote on this claim\\\");\\n            require(_isVoteAwaitingCalculation(voteIndex), \\\"CV: Vote is not awaiting\\\");\\n\\n            uint256 daiAmount;\\n            uint256 bmiAmount;\\n            VoteStatus status;\\n\\n            if (\\n                _votings[claimIndex].votedYesPercentage >= PERCENTAGE_50 &&\\n                _allVotesByIndexInst[voteIndex].suggestedAmount > 0\\n            ) {\\n                (daiAmount, bmiAmount, reputation) = _calculateMajorityYesVote(\\n                    claimIndex,\\n                    msg.sender,\\n                    reputation\\n                );\\n\\n                reinsurancePool.withdrawDAITo(msg.sender, daiAmount);\\n                bmiToken.transfer(msg.sender, bmiAmount);\\n\\n                emit RewardsForVoteCalculationSent(msg.sender, bmiAmount);\\n\\n                status = VoteStatus.MAJORITY;\\n            } else if (\\n                _votings[claimIndex].votedYesPercentage < PERCENTAGE_50 &&\\n                _allVotesByIndexInst[voteIndex].suggestedAmount == 0\\n            ) {\\n                (bmiAmount, reputation) = _calculateMajorityNoVote(\\n                    claimIndex,\\n                    msg.sender,\\n                    reputation\\n                );\\n\\n                bmiToken.transfer(msg.sender, bmiAmount);\\n\\n                emit RewardsForVoteCalculationSent(msg.sender, bmiAmount);\\n\\n                status = VoteStatus.MAJORITY;\\n            } else {\\n                (bmiAmount, reputation) = _calculateMinorityVote(\\n                    claimIndex,\\n                    msg.sender,\\n                    reputation\\n                );\\n\\n                vBMI.slashUserTokens(msg.sender, bmiAmount);\\n\\n                status = VoteStatus.MINORITY;\\n            }\\n\\n            _allVotesByIndexInst[voteIndex].status = status;\\n            _myNotCalculatedVotes[msg.sender].remove(claimIndex);\\n\\n            emit VoteCalculated(claimIndex, msg.sender, status);\\n        }\\n\\n        reputationSystem.setNewReputation(msg.sender, reputation);\\n    }\\n\\n    function _getBMIRewardForCalculation(uint256 claimIndex) internal view returns (uint256) {\\n        uint256 lockedBMIs = _votings[claimIndex].lockedBMIAmount;\\n        uint256 timeElapsed =\\n            claimingRegistry.claimSubmittedTime(claimIndex).add(\\n                claimingRegistry.anyoneCanCalculateClaimResultAfter(claimIndex)\\n            );\\n\\n        if (claimingRegistry.canClaimBeCalculatedByAnyone(claimIndex)) {\\n            timeElapsed = block.timestamp.sub(timeElapsed);\\n        } else {\\n            timeElapsed = timeElapsed.sub(block.timestamp);\\n        }\\n\\n        return\\n            Math.min(\\n                lockedBMIs,\\n                lockedBMIs.mul(timeElapsed.mul(CALCULATION_REWARD_PER_DAY.div(1 days))).div(\\n                    PERCENTAGE_100\\n                )\\n            );\\n    }\\n\\n    function _sendRewardsForCalculationTo(uint256 claimIndex, address calculator) internal {\\n        uint256 reward = _getBMIRewardForCalculation(claimIndex);\\n\\n        _votings[claimIndex].lockedBMIAmount = _votings[claimIndex].lockedBMIAmount.sub(reward);\\n\\n        bmiToken.transfer(calculator, reward);\\n\\n        emit RewardsForClaimCalculationSent(calculator, reward);\\n    }\\n\\n    function calculateVotingResultBatch(uint256[] calldata claimIndexes) external override {\\n        uint256 totalSupplyVBMI = vBMI.totalSupply();\\n\\n        for (uint256 i = 0; i < claimIndexes.length; i++) {\\n            uint256 claimIndex = claimIndexes[i];\\n            address claimer = claimingRegistry.claimOwner(claimIndex);\\n\\n            // claim existence is checked in claimStatus function\\n            require(\\n                claimingRegistry.claimStatus(claimIndex) ==\\n                    IClaimingRegistry.ClaimStatus.AWAITING_CALCULATION,\\n                \\\"CV: Claim is not awaiting\\\"\\n            );\\n            require(\\n                claimingRegistry.canClaimBeCalculatedByAnyone(claimIndex) || claimer == msg.sender,\\n                \\\"CV: Not allowed to calculate\\\"\\n            );\\n\\n            _sendRewardsForCalculationTo(claimIndex, msg.sender);\\n\\n            emit ClaimCalculated(claimIndex, msg.sender);\\n\\n            uint256 allVotedVBMI = _votings[claimIndex].allVotedStakedBMIAmount;\\n\\n            // if no votes or not an appeal and voted < 10% supply of vBMI\\n            if (\\n                allVotedVBMI == 0 ||\\n                ((totalSupplyVBMI == 0 ||\\n                    totalSupplyVBMI.mul(QUORUM).div(PERCENTAGE_100) > allVotedVBMI) &&\\n                    !claimingRegistry.isClaimAppeal(claimIndex))\\n            ) {\\n                // reject & use locked BMI for rewards\\n                claimingRegistry.rejectClaim(claimIndex);\\n            } else {\\n                uint256 votedYesPower = _votings[claimIndex].votedYesStakedBMIAmountWithReputation;\\n                uint256 votedNoPower = _votings[claimIndex].votedNoStakedBMIAmountWithReputation;\\n                uint256 totalPower = votedYesPower.add(votedNoPower);\\n\\n                _votings[claimIndex].votedYesPercentage = votedYesPower.mul(PERCENTAGE_100).div(\\n                    totalPower\\n                );\\n\\n                if (_votings[claimIndex].votedYesPercentage >= APPROVAL_PERCENTAGE) {\\n                    // approve + send DAI & return locked BMI to the claimer\\n                    claimingRegistry.acceptClaim(claimIndex);\\n\\n                    bmiToken.transfer(claimer, _votings[claimIndex].lockedBMIAmount);\\n                } else {\\n                    // reject & use locked BMI for rewards\\n                    claimingRegistry.rejectClaim(claimIndex);\\n                }\\n            }\\n\\n            IPolicyBook(claimingRegistry.claimPolicyBook(claimIndex)).commitClaim(\\n                claimer,\\n                _votings[claimIndex].votedAverageWithdrawalAmount,\\n                block.timestamp,\\n                claimingRegistry.claimStatus(claimIndex) // ACCEPTED, REJECTED_CAN_APPEAL, REJECTED\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/home/BMI/bridgemutual-core/contracts/Globals.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nuint256 constant SECONDS_IN_THE_YEAR = 365 * 24 * 60 * 60; // 365 days * 24 hours * 60 minutes * 60 seconds\\nuint256 constant MAX_INT = type(uint256).max;\\n\\nuint256 constant DECIMALS = 10**18;\\n\\nuint256 constant PRECISION = 10**25;\\nuint256 constant PERCENTAGE_100 = 100 * PRECISION;\\n\\nuint256 constant BLOCKS_PER_DAY = 6450;\\nuint256 constant BLOCKS_PER_YEAR = BLOCKS_PER_DAY * 365;\\n\\nuint256 constant APY_TOKENS = DECIMALS;\\n\"\r\n    },\r\n    \"/Users/home/BMI/bridgemutual-core/contracts/abstract/AbstractDependant.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\nimport \\\"../interfaces/IContractsRegistry.sol\\\";\\n\\nabstract contract AbstractDependant {\\n    /// @dev keccak256(AbstractDependant.setInjector(address)) - 1\\n    bytes32 private constant _INJECTOR_SLOT =\\n        0xd6b8f2e074594ceb05d47c27386969754b6ad0c15e5eb8f691399cd0be980e76;\\n\\n    modifier onlyInjectorOrZero() {\\n        address _injector = injector();\\n\\n        require(_injector == address(0) || _injector == msg.sender, \\\"Dependant: Not an injector\\\");\\n        _;\\n    }\\n\\n    function setInjector(address _injector) external onlyInjectorOrZero {\\n        bytes32 slot = _INJECTOR_SLOT;\\n\\n        assembly {\\n            sstore(slot, _injector)\\n        }\\n    }\\n\\n    /// @dev has to apply onlyInjectorOrZero() modifier\\n    function setDependencies(IContractsRegistry) external virtual;\\n\\n    function injector() public view returns (address _injector) {\\n        bytes32 slot = _INJECTOR_SLOT;\\n\\n        assembly {\\n            _injector := sload(slot)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/home/BMI/bridgemutual-core/contracts/interfaces/IClaimVoting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IClaimingRegistry.sol\\\";\\n\\ninterface IClaimVoting {\\n    enum VoteStatus {\\n        ANONYMOUS_PENDING,\\n        AWAITING_EXPOSURE,\\n        EXPIRED,\\n        EXPOSED_PENDING,\\n        AWAITING_CALCULATION,\\n        MINORITY,\\n        MAJORITY\\n    }\\n\\n    struct VotingResult {\\n        uint256 withdrawalAmount;\\n        uint256 lockedBMIAmount;\\n        uint256 reinsuranceTokensAmount;\\n        uint256 votedAverageWithdrawalAmount;\\n        uint256 votedYesStakedBMIAmountWithReputation;\\n        uint256 votedNoStakedBMIAmountWithReputation;\\n        uint256 allVotedStakedBMIAmount;\\n        uint256 votedYesPercentage;\\n    }\\n\\n    struct VotingInst {\\n        uint256 claimIndex;\\n        bytes32 finalHash;\\n        string encryptedVote;\\n        address voter;\\n        uint256 voterReputation;\\n        uint256 suggestedAmount;\\n        uint256 stakedBMIAmount;\\n        bool accept;\\n        VoteStatus status;\\n    }\\n\\n    struct MyClaimInfo {\\n        uint256 index;\\n        address policyBookAddress;\\n        string evidenceURI;\\n        bool appeal;\\n        uint256 claimAmount;\\n        IClaimingRegistry.ClaimStatus finalVerdict;\\n        uint256 finalClaimAmount;\\n        uint256 bmiCalculationReward;\\n    }\\n\\n    struct PublicClaimInfo {\\n        uint256 claimIndex;\\n        address claimer;\\n        address policyBookAddress;\\n        string evidenceURI;\\n        bool appeal;\\n        uint256 claimAmount;\\n        uint256 time;\\n    }\\n\\n    struct AllClaimInfo {\\n        PublicClaimInfo publicClaimInfo;\\n        IClaimingRegistry.ClaimStatus finalVerdict;\\n        uint256 finalClaimAmount;\\n        uint256 bmiCalculationReward;\\n    }\\n\\n    struct MyVoteInfo {\\n        AllClaimInfo allClaimInfo;\\n        string encryptedVote;\\n        uint256 suggestedAmount;\\n        VoteStatus status;\\n        uint256 time;\\n    }\\n\\n    struct VotesUpdatesInfo {\\n        uint256 bmiReward;\\n        uint256 daiReward;\\n        int256 reputationChange;\\n        int256 stakeChange;\\n    }\\n\\n    /// @notice starts the voting process\\n    function initializeVoting(\\n        address claimer,\\n        address policyBookAddress,\\n        string calldata evidenceURI,\\n        uint256 coverTokens,\\n        uint256 reinsuranceTokensAmount,\\n        bool appeal\\n    ) external;\\n\\n    /// @notice returns true if the user has no PENDING votes\\n    function canWithdraw(address user) external view returns (bool);\\n\\n    /// @notice returns true if the user has no AWAITING_CALCULATION votes\\n    function canVote(address user) external view returns (bool);\\n\\n    /// @notice returns how many votes the user has\\n    function countVotes(address user) external view returns (uint256);\\n\\n    /// @notice returns status of the vote\\n    function voteStatus(uint256 index) external view returns (VoteStatus);\\n\\n    /// @notice returns a list of claims that are votable for msg.sender\\n    function whatCanIVoteFor(uint256 offset, uint256 limit)\\n        external\\n        returns (uint256 _claimsCount, PublicClaimInfo[] memory _votablesInfo);\\n\\n    /// @notice returns info list of ALL claims\\n    function allClaims(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (AllClaimInfo[] memory _allClaimsInfo);\\n\\n    /// @notice returns info list of claims of msg.sender\\n    function myClaims(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (MyClaimInfo[] memory _myClaimsInfo);\\n\\n    /// @notice returns info list of claims that are voted by msg.sender\\n    function myVotes(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (MyVoteInfo[] memory _myVotesInfo);\\n\\n    /// @notice returns an array of votes that can be calculated + update information\\n    function myVotesUpdates(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256 _votesUpdatesCount,\\n            uint256[] memory _claimIndexes,\\n            VotesUpdatesInfo memory _myVotesUpdatesInfo\\n        );\\n\\n    /// @notice anonymously votes (result used later in exposeVote())\\n    /// @notice the claims have to be PENDING, the voter can vote only once for a specific claim\\n    /// @param claimIndexes are the indexes of the claims the voter is voting on (each one is unique for each claim and appeal)\\n    /// @param finalHashes are the hashes produced by the encryption algorithm. They will be verified onchain in expose function\\n    /// @param encryptedVotes are the AES encrypted values that represent the actual vote\\n    function anonymouslyVoteBatch(\\n        uint256[] calldata claimIndexes,\\n        bytes32[] calldata finalHashes,\\n        string[] calldata encryptedVotes\\n    ) external;\\n\\n    /// @notice exposes votes of anonymous votings\\n    /// @notice the vote has to be voted anonymously prior\\n    /// @param claimIndexes are the indexes of the claims to expose votes for\\n    /// @param suggestedClaimAmounts are the actual vote values. They must match the decrypted values in anonymouslyVoteBatch function\\n    /// @param hashedSignaturesOfClaims are the validation data needed to construct proper finalHashes\\n    function exposeVoteBatch(\\n        uint256[] calldata claimIndexes,\\n        uint256[] calldata suggestedClaimAmounts,\\n        bytes32[] calldata hashedSignaturesOfClaims\\n    ) external;\\n\\n    /// @notice calculates results of votes\\n    function calculateVoterResultBatch(uint256[] calldata claimIndexes) external;\\n\\n    /// @notice calculates results of claims\\n    function calculateVotingResultBatch(uint256[] calldata claimIndexes) external;\\n}\\n\"\r\n    },\r\n    \"/Users/home/BMI/bridgemutual-core/contracts/interfaces/IClaimingRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IPolicyBookFabric.sol\\\";\\n\\ninterface IClaimingRegistry {\\n    enum ClaimStatus {\\n        CAN_CLAIM,\\n        UNCLAIMABLE,\\n        PENDING,\\n        AWAITING_CALCULATION,\\n        REJECTED_CAN_APPEAL,\\n        REJECTED,\\n        ACCEPTED\\n    }\\n\\n    struct ClaimInfo {\\n        address claimer;\\n        address policyBookAddress;\\n        string evidenceURI;\\n        uint256 dateSubmitted;\\n        uint256 dateEnded;\\n        bool appeal;\\n        ClaimStatus status;\\n        uint256 claimAmount;\\n    }\\n\\n    /// @notice returns anonymous voting duration\\n    function anonymousVotingDuration(uint256 index) external view returns (uint256);\\n\\n    /// @notice returns the whole voting duration\\n    function votingDuration(uint256 index) external view returns (uint256);\\n\\n    /// @notice returns how many time should pass before anyone could calculate a claim result\\n    function anyoneCanCalculateClaimResultAfter(uint256 index) external view returns (uint256);\\n\\n    /// @notice returns true if a user can buy new policy of specified PolicyBook\\n    function canBuyNewPolicy(address buyer, address policyBookAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @notice submits new PolicyBook claim for the user\\n    function submitClaim(\\n        address user,\\n        address policyBookAddress,\\n        string calldata evidenceURI,\\n        uint256 cover,\\n        bool appeal\\n    ) external returns (uint256);\\n\\n    /// @notice returns true if the claim with this index exists\\n    function claimExists(uint256 index) external view returns (bool);\\n\\n    /// @notice returns claim submition time\\n    function claimSubmittedTime(uint256 index) external view returns (uint256);\\n\\n    /// @notice returns claim end time or zero in case it is pending\\n    function claimEndTime(uint256 index) external view returns (uint256);\\n\\n    /// @notice returns true if the claim is anonymously votable\\n    function isClaimAnonymouslyVotable(uint256 index) external view returns (bool);\\n\\n    /// @notice returns true if the claim is exposably votable\\n    function isClaimExposablyVotable(uint256 index) external view returns (bool);\\n\\n    /// @notice returns true if claim is anonymously votable or exposably votable\\n    function isClaimVotable(uint256 index) external view returns (bool);\\n\\n    /// @notice returns true if a claim can be calculated by anyone\\n    function canClaimBeCalculatedByAnyone(uint256 index) external view returns (bool);\\n\\n    /// @notice returns true if this claim is pending or awaiting\\n    function isClaimPending(uint256 index) external view returns (bool);\\n\\n    /// @notice returns how many claims the holder has\\n    function countPolicyClaimerClaims(address user) external view returns (uint256);\\n\\n    /// @notice returns how many pending claims are there\\n    function countPendingClaims() external view returns (uint256);\\n\\n    /// @notice returns how many claims are there\\n    function countClaims() external view returns (uint256);\\n\\n    /// @notice returns a claim index of it's claimer and an ordinal number\\n    function claimOfOwnerIndexAt(address claimer, uint256 orderIndex)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice returns pending claim index by its ordinal index\\n    function pendingClaimIndexAt(uint256 orderIndex) external view returns (uint256);\\n\\n    /// @notice returns claim index by its ordinal index\\n    function claimIndexAt(uint256 orderIndex) external view returns (uint256);\\n\\n    /// @notice returns current active claim index by policybook and claimer\\n    function claimIndex(address claimer, address policyBookAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice returns true if the claim is appealed\\n    function isClaimAppeal(uint256 index) external view returns (bool);\\n\\n    /// @notice returns current status of a claim\\n    function policyStatus(address claimer, address policyBookAddress)\\n        external\\n        view\\n        returns (ClaimStatus);\\n\\n    /// @notice returns current status of a claim\\n    function claimStatus(uint256 index) external view returns (ClaimStatus);\\n\\n    /// @notice returns the claim owner (claimer)\\n    function claimOwner(uint256 index) external view returns (address);\\n\\n    /// @notice returns the claim PolicyBook\\n    function claimPolicyBook(uint256 index) external view returns (address);\\n\\n    /// @notice returns claim info by its index\\n    function claimInfo(uint256 index) external view returns (ClaimInfo memory _claimInfo);\\n\\n    /// @notice marks the user's claim as Accepted\\n    function acceptClaim(uint256 index) external;\\n\\n    /// @notice marks the user's claim as Rejected\\n    function rejectClaim(uint256 index) external;\\n}\\n\"\r\n    },\r\n    \"/Users/home/BMI/bridgemutual-core/contracts/interfaces/IContractsRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IContractsRegistry {\\n    function getUniswapRouterContract() external view returns (address);\\n\\n    function getUniswapBMIToETHPairContract() external view returns (address);\\n\\n    function getWETHContract() external view returns (address);\\n\\n    function getDAIContract() external view returns (address);\\n\\n    function getBMIContract() external view returns (address);\\n\\n    function getPriceFeedContract() external view returns (address);\\n\\n    function getPolicyBookRegistryContract() external view returns (address);\\n\\n    function getPolicyBookFabricContract() external view returns (address);\\n\\n    function getBMIDAIStakingContract() external view returns (address);\\n\\n    function getRewardsGeneratorContract() external view returns (address);\\n\\n    function getBMIUtilityNFTContract() external view returns (address);\\n\\n    function getLiquidityMiningContract() external view returns (address);\\n\\n    function getClaimingRegistryContract() external view returns (address);\\n\\n    function getPolicyRegistryContract() external view returns (address);\\n\\n    function getLiquidityRegistryContract() external view returns (address);\\n\\n    function getClaimVotingContract() external view returns (address);\\n\\n    function getReinsurancePoolContract() external view returns (address);\\n\\n    function getPolicyBookAdminContract() external view returns (address);\\n\\n    function getPolicyQuoteContract() external view returns (address);\\n\\n    function getLegacyBMIStakingContract() external view returns (address);\\n\\n    function getBMIStakingContract() external view returns (address);\\n\\n    function getSTKBMIContract() external view returns (address);\\n\\n    function getVBMIContract() external view returns (address);\\n\\n    function getLegacyLiquidityMiningStakingContract() external view returns (address);\\n\\n    function getLiquidityMiningStakingContract() external view returns (address);\\n\\n    function getReputationSystemContract() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"/Users/home/BMI/bridgemutual-core/contracts/interfaces/IPolicyBook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IPolicyBookFabric.sol\\\";\\nimport \\\"./IClaimingRegistry.sol\\\";\\n\\ninterface IPolicyBook {\\n    enum WithdrawalStatus {NONE, PENDING, READY, EXPIRED}\\n\\n    struct PolicyHolder {\\n        uint256 coverTokens;\\n        uint256 startEpochNumber;\\n        uint256 endEpochNumber;\\n        uint256 paid;\\n    }\\n\\n    struct WithdrawalInfo {\\n        uint256 withdrawalAmount;\\n        uint256 readyToWithdrawDate;\\n        bool withdrawalAllowed;\\n    }\\n\\n    function EPOCH_DURATION() external view returns (uint256);\\n\\n    function READY_TO_WITHDRAW_PERIOD() external view returns (uint256);\\n\\n    function whitelisted() external view returns (bool);\\n\\n    function epochStartTime() external view returns (uint256);\\n\\n    // @TODO: should we let DAO to change contract address?\\n    /// @notice Returns address of contract this PolicyBook covers, access: ANY\\n    /// @return _contract is address of covered contract\\n    function insuranceContractAddress() external view returns (address _contract);\\n\\n    /// @notice Returns type of contract this PolicyBook covers, access: ANY\\n    /// @return _type is type of contract\\n    function contractType() external view returns (IPolicyBookFabric.ContractType _type);\\n\\n    function totalLiquidity() external view returns (uint256);\\n\\n    function totalCoverTokens() external view returns (uint256);\\n\\n    function withdrawalsInfo(address _userAddr)\\n        external\\n        view\\n        returns (\\n            uint256 _withdrawalAmount,\\n            uint256 _readyToWithdrawDate,\\n            bool _withdrawalAllowed\\n        );\\n\\n    function __PolicyBook_init(\\n        address _insuranceContract,\\n        IPolicyBookFabric.ContractType _contractType,\\n        string calldata _description,\\n        string calldata _projectSymbol\\n    ) external;\\n\\n    function whitelist(bool _whitelisted) external;\\n\\n    function getEpoch(uint256 time) external view returns (uint256);\\n\\n    /// @notice get DAI equivalent\\n    function convertDAIXToDAI(uint256 _amount) external view returns (uint256);\\n\\n    /// @notice get DAIx equivalent\\n    function convertDAIToDAIX(uint256 _amount) external view returns (uint256);\\n\\n    /// @notice returns how many BMI tokens needs to approve in order to submit a claim\\n    function getClaimApprovalAmount(address user) external view returns (uint256);\\n\\n    /// @notice submits new claim of the policy book\\n    function submitClaimAndInitializeVoting(string calldata evidenceURI) external;\\n\\n    /// @notice submits new appeal claim of the policy book\\n    function submitAppealAndInitializeVoting(string calldata evidenceURI) external;\\n\\n    /// @notice updates info on claim acceptance\\n    function commitClaim(\\n        address claimer,\\n        uint256 claimAmount,\\n        uint256 claimEndTime,\\n        IClaimingRegistry.ClaimStatus status\\n    ) external;\\n\\n    /// @notice function to get precise current cover and liquidity\\n    function getNewCoverAndLiquidity()\\n        external\\n        view\\n        returns (uint256 newTotalCoverTokens, uint256 newTotalLiquidity);\\n\\n    /// @notice view function to get precise policy price\\n    function getPolicyPrice(uint256 _epochsNumber, uint256 _coverTokens)\\n        external\\n        view\\n        returns (uint256 totalSeconds, uint256 totalPrice);\\n\\n    function buyPolicyFor(\\n        address _buyer,\\n        uint256 _epochsNumber,\\n        uint256 _coverTokens\\n    ) external;\\n\\n    /// @notice Let user to buy policy by supplying DAI, access: ANY\\n    /// @param _durationSeconds is number of seconds to cover\\n    /// @param _coverTokens is number of tokens to cover\\n    function buyPolicy(uint256 _durationSeconds, uint256 _coverTokens) external;\\n\\n    function updateEpochsInfo() external;\\n\\n    function secondsToEndCurrentEpoch() external view returns (uint256);\\n\\n    /// @notice Let user to add liquidity by supplying DAI, access: ANY\\n    /// @param _liqudityAmount is amount of DAI tokens to secure\\n    function addLiquidity(uint256 _liqudityAmount) external;\\n\\n    /// @notice Let eligible contracts add liqiudity for another user by supplying DAI\\n    /// @param _liquidityHolderAddr is address of address to assign cover\\n    /// @param _liqudityAmount is amount of DAI tokens to secure\\n    function addLiquidityFor(address _liquidityHolderAddr, uint256 _liqudityAmount) external;\\n\\n    function addLiquidityAndStake(uint256 _liquidityAmount, uint256 _bmiDAIxAmount) external;\\n\\n    function getAvailableDAIXWithdrawableAmount(address _userAddr) external view returns (uint256);\\n\\n    function getWithdrawalStatus(address _userAddr) external view returns (WithdrawalStatus);\\n\\n    function requestWithdrawal(uint256 _tokensToWithdraw) external;\\n\\n    function requestWithdrawalWithPermit(\\n        uint256 _tokensToWithdraw,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    function unlockTokens() external;\\n\\n    /// @notice Let user to withdraw deposited liqiudity, access: ANY\\n    function withdrawLiquidity() external;\\n\\n    function getAPY() external view returns (uint256);\\n\\n    /// @notice Getting user stats, access: ANY\\n    function userStats(address _user) external view returns (PolicyHolder memory);\\n\\n    /// @notice Getting number stats, access: ANY\\n    /// @return _maxCapacities is a max token amount that a user can buy\\n    /// @return _totalDaiLiquidity is PolicyBook's liquidity\\n    /// @return _stakedDAI is how much DAI are staked on this PolicyBook\\n    /// @return _annualProfitYields is its APY\\n    /// @return _annualInsuranceCost is percentage of cover tokens that is required to be paid for 1 year of insurance\\n    function numberStats()\\n        external\\n        view\\n        returns (\\n            uint256 _maxCapacities,\\n            uint256 _totalDaiLiquidity,\\n            uint256 _stakedDAI,\\n            uint256 _annualProfitYields,\\n            uint256 _annualInsuranceCost,\\n            uint256 _bmiDaiRatio\\n        );\\n\\n    /// @notice Getting info, access: ANY\\n    /// @return _symbol is the symbol of PolicyBook (bmiDaiX)\\n    /// @return _insuredContract is an addres of insured contract\\n    /// @return _contractType is a type of insured contract\\n    /// @return _whitelisted is a state of whitelisting\\n    function info()\\n        external\\n        view\\n        returns (\\n            string memory _symbol,\\n            address _insuredContract,\\n            IPolicyBookFabric.ContractType _contractType,\\n            bool _whitelisted\\n        );\\n}\\n\"\r\n    },\r\n    \"/Users/home/BMI/bridgemutual-core/contracts/interfaces/IPolicyBookFabric.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\ninterface IPolicyBookFabric {\\n    enum ContractType {CONTRACT, STABLECOIN, SERVICE, EXCHANGE}\\n\\n    /// @notice Create new Policy Book contract, access: ANY\\n    /// @param _contract is Contract to create policy book for\\n    /// @param _contractType is Contract to create policy book for\\n    /// @param _description is bmiDAIx token desription for this policy book\\n    /// @param _projectSymbol replaces x in bmiDAIx token symbol\\n    /// @param _initialDeposit is an amount user deposits on creation (addLiquidity())\\n    /// @return _policyBook is address of created contract\\n    function create(\\n        address _contract,\\n        ContractType _contractType,\\n        string calldata _description,\\n        string calldata _projectSymbol,\\n        uint256 _initialDeposit\\n    ) external returns (address);\\n}\\n\"\r\n    },\r\n    \"/Users/home/BMI/bridgemutual-core/contracts/interfaces/IPolicyBookRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IPolicyBookFabric.sol\\\";\\n\\ninterface IPolicyBookRegistry {\\n    struct PolicyBookStats {\\n        string symbol;\\n        address insuredContract;\\n        IPolicyBookFabric.ContractType contractType;\\n        uint256 maxCapacity;\\n        uint256 totalDaiLiquidity;\\n        uint256 stakedDAI;\\n        uint256 APY;\\n        uint256 annualInsuranceCost;\\n        uint256 bmiDaiRatio;\\n        bool whitelisted;\\n    }\\n\\n    /// @notice Adds PolicyBook to registry, access: PolicyFabric\\n    function add(\\n        address insuredContract,\\n        IPolicyBookFabric.ContractType contractType,\\n        address policyBook\\n    ) external;\\n\\n    function whitelist(address policyBookAddress, bool whitelisted) external;\\n\\n    /// @notice returns required allowances for the policybooks\\n    function getPoliciesPrices(\\n        address[] calldata policyBooks,\\n        uint256[] calldata epochsNumbers,\\n        uint256[] calldata coversTokens\\n    ) external view returns (uint256[] memory _durations, uint256[] memory _allowances);\\n\\n    /// @notice Buys a batch of policies\\n    function buyPolicyBatch(\\n        address[] calldata policyBooks,\\n        uint256[] calldata epochsNumbers,\\n        uint256[] calldata coversTokens\\n    ) external;\\n\\n    /// @notice Checks if provided address is a PolicyBook\\n    function isPolicyBook(address policyBook) external view returns (bool);\\n\\n    /// @notice Returns number of registered PolicyBooks with certain contract type\\n    function countByType(IPolicyBookFabric.ContractType contractType)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Returns number of registered PolicyBooks, access: ANY\\n    function count() external view returns (uint256);\\n\\n    function countByTypeWhitelisted(IPolicyBookFabric.ContractType contractType)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function countWhitelisted() external view returns (uint256);\\n\\n    /// @notice Listing registered PolicyBooks with certain contract type, access: ANY\\n    /// @return _policyBooksArr is array of registered PolicyBook addresses with certain contract type\\n    function listByType(\\n        IPolicyBookFabric.ContractType contractType,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (address[] memory _policyBooksArr);\\n\\n    /// @notice Listing registered PolicyBooks, access: ANY\\n    /// @return _policyBooksArr is array of registered PolicyBook addresses\\n    function list(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (address[] memory _policyBooksArr);\\n\\n    function listByTypeWhitelisted(\\n        IPolicyBookFabric.ContractType contractType,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (address[] memory _policyBooksArr);\\n\\n    function listWhitelisted(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (address[] memory _policyBooksArr);\\n\\n    /// @notice Listing registered PolicyBooks with stats and certain contract type, access: ANY\\n    function listWithStatsByType(\\n        IPolicyBookFabric.ContractType contractType,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\n\\n    /// @notice Listing registered PolicyBooks with stats, access: ANY\\n    function listWithStats(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\n\\n    function listWithStatsByTypeWhitelisted(\\n        IPolicyBookFabric.ContractType contractType,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\n\\n    function listWithStatsWhitelisted(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\n\\n    /// @notice Getting stats from policy books, access: ANY\\n    /// @param policyBooks is list of PolicyBooks addresses\\n    function stats(address[] calldata policyBooks)\\n        external\\n        view\\n        returns (PolicyBookStats[] memory _stats);\\n\\n    /// @notice Return existing Policy Book contract, access: ANY\\n    /// @param insuredContract is contract address to lookup for created IPolicyBook\\n    function policyBookFor(address insuredContract) external view returns (address);\\n\\n    /// @notice Getting stats from policy books, access: ANY\\n    /// @param insuredContracts is list of insuredContracts in registry\\n    function statsByInsuredContracts(address[] calldata insuredContracts)\\n        external\\n        view\\n        returns (PolicyBookStats[] memory _stats);\\n}\\n\"\r\n    },\r\n    \"/Users/home/BMI/bridgemutual-core/contracts/interfaces/IReinsurancePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IReinsurancePool {\\n    function withdrawBMITo(address to, uint256 amount) external;\\n\\n    function withdrawDAITo(address to, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"/Users/home/BMI/bridgemutual-core/contracts/interfaces/IReputationSystem.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IReputationSystem {\\n    /// @notice sets new reputation for the voter\\n    function setNewReputation(address voter, uint256 newReputation) external;\\n\\n    /// @notice returns voter's new reputation\\n    function getNewReputation(address voter, uint256 percentageWithPrecision)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice alternative way of knowing new reputation\\n    function getNewReputation(uint256 voterReputation, uint256 percentageWithPrecision)\\n        external\\n        pure\\n        returns (uint256);\\n\\n    /// @notice returns true if the user voted at least once\\n    function hasVotedOnce(address user) external view returns (bool);\\n\\n    /// @notice returns true if user's reputation is grater than or equal to trusted voter threshold\\n    function isTrustedVoter(address user) external view returns (bool);\\n\\n    /// @notice this function returns reputation threshold multiplied by 10**25\\n    function getTrustedVoterReputationThreshold() external view returns (uint256);\\n\\n    /// @notice this function returns reputation multiplied by 10**25\\n    function reputation(address user) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/home/BMI/bridgemutual-core/contracts/interfaces/helpers/IPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\ninterface IPriceFeed {\\n    function howManyBMIsInDAI(uint256 daiAmount) external view returns (uint256);\\n\\n    function howManyDAIsInBMI(uint256 bmiAmount) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/home/BMI/bridgemutual-core/contracts/interfaces/tokens/IVBMI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IVBMI is IERC20Upgradeable {\\n    function lockStkBMI(uint256 amount) external;\\n\\n    function unlockStkBMI(uint256 amount) external;\\n\\n    function slashUserTokens(address user, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimIndex\",\"type\":\"uint256\"}],\"name\":\"AnonymouslyVoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"calculator\",\"type\":\"address\"}],\"name\":\"ClaimCalculated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"calculator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bmiAmount\",\"type\":\"uint256\"}],\"name\":\"RewardsForClaimCalculationSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bmiAmount\",\"type\":\"uint256\"}],\"name\":\"RewardsForVoteCalculationSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IClaimVoting.VoteStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"VoteCalculated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"suggestedClaimAmount\",\"type\":\"uint256\"}],\"name\":\"VoteExposed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"APPROVAL_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CALCULATION_REWARD_PER_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PENALTY_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_50\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QUORUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__ClaimVoting_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"allClaims\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"claimIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"policyBookAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"evidenceURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"appeal\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct IClaimVoting.PublicClaimInfo\",\"name\":\"publicClaimInfo\",\"type\":\"tuple\"},{\"internalType\":\"enum IClaimingRegistry.ClaimStatus\",\"name\":\"finalVerdict\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"finalClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bmiCalculationReward\",\"type\":\"uint256\"}],\"internalType\":\"struct IClaimVoting.AllClaimInfo[]\",\"name\":\"_allClaimsInfo\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"claimIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"finalHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"string[]\",\"name\":\"encryptedVotes\",\"type\":\"string[]\"}],\"name\":\"anonymouslyVoteBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bmiToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"claimIndexes\",\"type\":\"uint256[]\"}],\"name\":\"calculateVoterResultBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"claimIndexes\",\"type\":\"uint256[]\"}],\"name\":\"calculateVotingResultBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"canVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"canWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimingRegistry\",\"outputs\":[{\"internalType\":\"contract IClaimingRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"countVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"claimIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"suggestedClaimAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"hashedSignaturesOfClaims\",\"type\":\"bytes32[]\"}],\"name\":\"exposeVoteBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"policyBookAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"evidenceURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"coverTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinsuranceTokensAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"appeal\",\"type\":\"bool\"}],\"name\":\"initializeVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"injector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_injector\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"myClaims\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"policyBookAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"evidenceURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"appeal\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum IClaimingRegistry.ClaimStatus\",\"name\":\"finalVerdict\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"finalClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bmiCalculationReward\",\"type\":\"uint256\"}],\"internalType\":\"struct IClaimVoting.MyClaimInfo[]\",\"name\":\"_myClaimsInfo\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"myVotes\",\"outputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"claimIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"policyBookAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"evidenceURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"appeal\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct IClaimVoting.PublicClaimInfo\",\"name\":\"publicClaimInfo\",\"type\":\"tuple\"},{\"internalType\":\"enum IClaimingRegistry.ClaimStatus\",\"name\":\"finalVerdict\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"finalClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bmiCalculationReward\",\"type\":\"uint256\"}],\"internalType\":\"struct IClaimVoting.AllClaimInfo\",\"name\":\"allClaimInfo\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"encryptedVote\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"suggestedAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum IClaimVoting.VoteStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct IClaimVoting.MyVoteInfo[]\",\"name\":\"_myVotesInfo\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"myVotesUpdates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_votesUpdatesCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_claimIndexes\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"bmiReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daiReward\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"reputationChange\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"stakeChange\",\"type\":\"int256\"}],\"internalType\":\"struct IClaimVoting.VotesUpdatesInfo\",\"name\":\"_myVotesUpdatesInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyBookRegistry\",\"outputs\":[{\"internalType\":\"contract IPolicyBookRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinsurancePool\",\"outputs\":[{\"internalType\":\"contract IReinsurancePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reputationSystem\",\"outputs\":[{\"internalType\":\"contract IReputationSystem\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IContractsRegistry\",\"name\":\"_contractsRegistry\",\"type\":\"address\"}],\"name\":\"setDependencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_injector\",\"type\":\"address\"}],\"name\":\"setInjector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vBMI\",\"outputs\":[{\"internalType\":\"contract IVBMI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"voteStatus\",\"outputs\":[{\"internalType\":\"enum IClaimVoting.VoteStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"whatCanIVoteFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimsCount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"claimIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"policyBookAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"evidenceURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"appeal\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct IClaimVoting.PublicClaimInfo[]\",\"name\":\"_votablesInfo\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ClaimVoting","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}