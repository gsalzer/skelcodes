{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >= 0.4.22<0.6.0;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal pure  returns (uint) {\r\n\tuint c = a * b;\r\n\tassert(a == 0 || c / a == b);\r\n\treturn c;\r\n  }\r\n \r\n  function div(uint a, uint b) internal pure  returns (uint) {\r\n\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\tuint c = a / b;\r\n\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\treturn c;\r\n  }\r\n \r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n\tassert(b <= a);\r\n\treturn a - b;\r\n  }\r\n \r\n  function add(uint a, uint b) internal  pure   returns (uint) {\r\n\tuint c = a + b;\r\n\tassert(c >= a);\r\n\treturn c;\r\n  }\r\n}\r\ncontract HTZE {\r\n\tusing SafeMath for uint;\r\n\tuint private totalSupplyAmount;\r\n\taddress private owner;\r\n\tmapping(address => uint) private balances;\r\n\tmapping(address => mapping(address => uint)) private allowed;\r\n\tstring private tokenName;\r\n\tstring private tokenSymbol;\r\n\tuint8 private decimalPoints;\r\n\t\r\n\t /**\r\n  * @dev Fix for the ERC20 short address attack.\r\n   */\r\n  modifier onlyPayloadSize(uint size) {\r\n    require(msg.data.length >= size + 4) ;\r\n    _;\r\n  }\r\n\tconstructor(string name,string symbol,\r\n\tuint initialSupply,uint8 decimals) public payable {\r\n    \ttokenName=name;\r\n    \ttokenSymbol=symbol;\r\n    \tdecimalPoints=decimals;\r\n    \tuint supply=SafeMath.mul(initialSupply,10**uint(decimalPoints));\r\n    \ttotalSupplyAmount=supply;\r\n    \towner=msg.sender;\r\n    \tbalances[owner]=SafeMath.add(balances[owner],totalSupplyAmount);\r\n    \temit Transfer(address(0),owner,totalSupplyAmount);\r\n\t}\r\n    \r\n\tfunction name() public view returns(string memory){\r\n    \treturn tokenName;\r\n\t}\r\n    \r\n\tfunction symbol() public view returns(string memory){\r\n    \treturn tokenSymbol;\r\n\t}\r\n    \r\n\tfunction decimals() public view returns(uint){\r\n    \treturn decimalPoints;\r\n\t}\r\n \r\n\tfunction totalSupply() public view returns(uint){\r\n    \treturn totalSupplyAmount;\r\n\t}\r\n    \r\n\tfunction balanceOf(address findingBalanceAddress) public view returns(uint){\r\n    \treturn balances[findingBalanceAddress];\r\n\t}\r\n    \r\n\tfunction getTokenOwnerAddress() public view returns(address){\r\n    \treturn owner;\r\n\t}\r\n    \r\n\tfunction transfer(address to,uint tokenAmountInWEI) public payable  returns(bool){\r\n    \trequire(balances[msg.sender]>=tokenAmountInWEI);\r\n    \trequire(tokenAmountInWEI>0);\r\n    \trequire((SafeMath.add(balances[to],tokenAmountInWEI))>balances[to]);\r\n    \tbalances[msg.sender] = SafeMath.sub(balances[msg.sender],tokenAmountInWEI);\r\n    \tbalances[to] = SafeMath.add(balances[to],tokenAmountInWEI);\r\n    \treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address from,address to,uint tokenAmountInWEI) onlyPayloadSize(3 * 32) public returns(bool){\r\n \trequire(balances[from]>=tokenAmountInWEI);   \r\n \trequire(allowed[from] [msg.sender]>=tokenAmountInWEI);\r\n \trequire(tokenAmountInWEI>0);\r\n    \r\n \trequire((SafeMath.add(balances[to],tokenAmountInWEI))>balances[to]);\r\n \tbalances[to] = SafeMath.add(balances[to],tokenAmountInWEI);\r\n \tbalances[from] = SafeMath.sub(balances[from],tokenAmountInWEI);\r\n \tallowed[from][msg.sender] = SafeMath.sub(allowed[from][msg.sender],tokenAmountInWEI);\r\n \temit Transfer(from,to,tokenAmountInWEI);\r\n \treturn true;\r\n\t}\r\n    \r\n\tfunction approve(address spender,uint tokenAmountInWEI) public  returns(bool){\r\n    \tallowed[msg.sender][spender]=SafeMath.add(allowed[msg.sender][spender],tokenAmountInWEI);\r\n     \temit  Approval(msg.sender,spender,tokenAmountInWEI);\r\n    \treturn true;\r\n\t}\r\n    \r\n\tfunction allownce(address from,address spender) public view returns(uint){\r\n    \treturn allowed[from][spender];\r\n\t}\r\n\t\r\n\tfunction burn (address from,uint tokenAmountInWEI) public returns(bool){\r\n\t    require(from!=address(0)\r\n        &&balances[from]>=tokenAmountInWEI\r\n        &&totalSupplyAmount>=tokenAmountInWEI);\r\n        totalSupplyAmount=SafeMath.sub(totalSupplyAmount,tokenAmountInWEI);\r\n        balances[from]=SafeMath.sub(balances[from],tokenAmountInWEI);\r\n        emit Transfer(from,address(0),tokenAmountInWEI);\r\n        return true;\r\n\t}\r\n\t\r\n\tfunction burnFrom(address from,uint tokenAmountInWEI) public returns(bool){\r\n        require(allowed[from][msg.sender]>=tokenAmountInWEI);\r\n        allowed[from][msg.sender]=SafeMath.sub(allowed[from][msg.sender],tokenAmountInWEI);\r\n        burn(from,tokenAmountInWEI);\r\n        return true;\r\n\t}\r\n\t\r\n\tfunction mint(address to,uint tokenAmountInWEI) public returns(bool){\r\n\t    require(to!=address(0));\r\n        totalSupplyAmount=SafeMath.add(totalSupplyAmount,tokenAmountInWEI);\r\n        balances[to]=SafeMath.add(balances[to],tokenAmountInWEI);\r\n        emit Transfer(address(0),to,tokenAmountInWEI);\r\n        return true;\r\n\t}\r\n\r\n\tfunction _transfer(address from,address to,uint tokenAmountInWEI) public returns(bool){\r\n    \trequire(balances[from]>=tokenAmountInWEI);\r\n    \trequire(tokenAmountInWEI>0);\r\n    \trequire((SafeMath.add(balances[to],tokenAmountInWEI))>balances[to]);\r\n    \tbalances[from] = SafeMath.sub(balances[from],tokenAmountInWEI);\r\n    \tbalances[to] = SafeMath.add(balances[to],tokenAmountInWEI);\r\n    \treturn true;\r\n\t}\r\n\tevent Transfer(address from,address to,uint amount);\r\n\tevent Approval(address indexer,address spender,uint amount);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokenAmountInWEI\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenAmountInWEI\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenAmountInWEI\",\"type\":\"uint256\"}],\"name\":\"_transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenAmountInWEI\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"findingBalanceAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"tokenAmountInWEI\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"tokenAmountInWEI\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allownce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenAmountInWEI\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenOwnerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"decimals\",\"type\":\"uint8\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"indexer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"HTZE","CompilerVersion":"v0.4.22+commit.4cb486ee","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000005d21dba000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000d486572747a204e6574776f726b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000448545a4500000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://bf377fa199a7b5dc7b805b1088863cecfe7113991f2ca90e838fbc97d9b507cc"}]}