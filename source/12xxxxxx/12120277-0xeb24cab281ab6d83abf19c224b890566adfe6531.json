{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\ncontract Ownable is Initializable {\r\n    address payable public owner;\r\n    address payable internal newOwnerCandidate;\r\n\r\n\r\n    function checkAuth() private view {\r\n        require(msg.sender == owner, \"Permission denied\");\r\n    }\r\n    modifier onlyOwner {\r\n        checkAuth();\r\n        _;\r\n    }\r\n\r\n\r\n    // ** INITIALIZERS – Constructors for Upgradable contracts **\r\n    function initialize() public initializer {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function initialize(address payable newOwner) public initializer {\r\n        owner = newOwner;\r\n    }\r\n\r\n\r\n    function changeOwner(address payable newOwner) public onlyOwner {\r\n        newOwnerCandidate = newOwner;\r\n    }\r\n\r\n    function acceptOwner() public {\r\n        require(msg.sender == newOwnerCandidate);\r\n        owner = newOwnerCandidate;\r\n    }\r\n\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\ncontract Adminable is Initializable, Ownable {\r\n    mapping(address => bool) public admins;\r\n\r\n\r\n    function checkAuthAdmin() private view {\r\n        require(msg.sender == owner || admins[msg.sender], \"Permission denied\");\r\n    }\r\n    modifier onlyOwnerOrAdmin {\r\n        checkAuthAdmin();\r\n        _;\r\n    }\r\n\r\n\r\n    // Initializer – Constructor for Upgradable contracts\r\n    function initialize() public initializer {\r\n        Ownable.initialize();  // Initialize Parent Contract\r\n    }\r\n\r\n    function initialize(address payable newOwner) public initializer {\r\n        Ownable.initialize(newOwner);  // Initialize Parent Contract\r\n    }\r\n\r\n\r\n    function setAdminPermission(address _admin, bool _status) public onlyOwner {\r\n        admins[_admin] = _status;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\ninterface IToken {\r\n    function balanceOf(address account) external view returns (uint);\r\n    function totalSupply() view external returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external;\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function decimals() external view returns (uint);\r\n}\r\n\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint x, uint n) internal pure returns (uint z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract TokenDistributor is Initializable, Adminable, DSMath {\r\n    uint internal constant INITIAL_PRICE = 1e18; // 1 token for 1 USD\r\n    uint internal constant RATE = 1000000700000000000000000000; // next token price = current token price * 1.0000007\r\n\r\n    IToken public constant DAI = IToken(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    IToken public token;\r\n\r\n    uint public tokensWithdrawn; // without decimals: 1 token = 1\r\n\r\n    uint public teamRatio = 0.25 * 1e18; // initial\r\n    uint public buyBackRatio = 0.20 * 1e18;  // initial\r\n    uint public treasureRatio = 0.50 * 1e18; // initial\r\n    uint public charityRatio = 0.05 * 1e18; // initial\r\n\r\n    address public teamAddress;\r\n    address public buyBackAddress;\r\n    address public treasureAddress;\r\n    address public charityAddress;\r\n\r\n    // Full Initializer\r\n    function initialize(\r\n        address payable _newOwner,\r\n        IToken _token,\r\n        address _teamAddress,\r\n        address _buyBackAddress,\r\n        address _treasureAddress,\r\n        address _charityAddress\r\n    ) public initializer {\r\n        Adminable.initialize(_newOwner);  // Initialize Parent Contract\r\n\r\n        token = _token;\r\n\r\n        teamAddress = _teamAddress;\r\n        buyBackAddress = _buyBackAddress;\r\n        treasureAddress = _treasureAddress;\r\n        charityAddress = _charityAddress;\r\n    }\r\n\r\n    function currentTokenPrice() external view returns (uint) {\r\n        return calcPrice(1);\r\n    }\r\n\r\n    function calcPrice(uint _tokens) public view returns (uint) {\r\n        uint withdrawnAmount = tokensWithdrawn;\r\n        return sub(_calcSum(INITIAL_PRICE, RATE, add(withdrawnAmount, _tokens)), _calcSum(INITIAL_PRICE, RATE, withdrawnAmount));\r\n    }\r\n\r\n    // onlyOwnerOrAdmin check in the internal call\r\n    function claimTokens(uint _tokens) external returns (uint) {\r\n        claimTokens(_tokens, msg.sender);\r\n    }\r\n\r\n    function claimTokens(uint _tokens, address _account) public onlyOwnerOrAdmin returns (uint) {\r\n        uint daiAmountIn = calcPrice(_tokens);\r\n\r\n        // update withdrawn state\r\n        tokensWithdrawn = add(tokensWithdrawn, _tokens);\r\n\r\n        // transfer DAI from msg.sender\r\n        address sender = msg.sender;\r\n        DAI.transferFrom(sender, teamAddress, wmul(daiAmountIn, teamRatio));\r\n        DAI.transferFrom(sender, buyBackAddress, wmul(daiAmountIn, buyBackRatio));\r\n        DAI.transferFrom(sender, treasureAddress, wmul(daiAmountIn, treasureRatio));\r\n        DAI.transferFrom(sender, charityAddress, wmul(daiAmountIn, charityRatio));\r\n\r\n        // transfer tokens to msg.sender\r\n        uint tokenAmount = _tokens * 1e18; // with decimals\r\n        token.transfer(_account, tokenAmount);\r\n\r\n        return daiAmountIn;\r\n    }\r\n\r\n    function setTeamAddress(address _teamAddress) external onlyOwner {\r\n        teamAddress = _teamAddress;\r\n    }\r\n\r\n    function setBuyBackAddress(address _buyBackAddress) external onlyOwner {\r\n        buyBackAddress = _buyBackAddress;\r\n    }\r\n\r\n    function setTreasureAddress(address _treasureAddress) external onlyOwner {\r\n        treasureAddress = _treasureAddress;\r\n    }\r\n\r\n    function setCharityAddress(address _charityAddress) external onlyOwner {\r\n        charityAddress = _charityAddress;\r\n    }\r\n\r\n    function setRatio(\r\n        uint _teamRatio,\r\n        uint _buyBackRatio,\r\n        uint _treasureRatio,\r\n        uint _charityRatio\r\n    ) external onlyOwner {\r\n        require(\r\n            add(_teamRatio, add(_buyBackRatio, add(_treasureRatio, _charityRatio))) == WAD,\r\n            \"Sum of ratio must be 10^18\"\r\n        );\r\n\r\n        teamRatio = _teamRatio;\r\n        buyBackRatio = _buyBackRatio;\r\n        treasureRatio = _treasureRatio;\r\n        charityRatio = _charityRatio;\r\n    }\r\n\r\n    // Geometric Progression Sum\r\n    // Sn = b1*(q^n - 1)/(q - 1)\r\n    function _calcSum(uint _principal, uint _rate, uint _num) internal pure returns (uint) {\r\n        return rdiv(rmul(_principal, sub(rpow(_rate, _num), RAY)), sub(_rate, RAY));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"contract IToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyBackAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyBackRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"calcPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"charityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"charityRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"claimTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"},{\"internalType\":\"contract IToken\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buyBackAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasureAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_charityAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAdminPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyBackAddress\",\"type\":\"address\"}],\"name\":\"setBuyBackAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_charityAddress\",\"type\":\"address\"}],\"name\":\"setCharityAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_teamRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBackRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasureRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_charityRatio\",\"type\":\"uint256\"}],\"name\":\"setRatio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"}],\"name\":\"setTeamAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasureAddress\",\"type\":\"address\"}],\"name\":\"setTreasureAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasureAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasureRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TokenDistributor","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://beb7964290b04dfd054deecdd02b6e50702e90a778aa3e23e6ca40ddfe6b56a5"}]}