{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.7.0;\r\n\r\ninterface I{function transfer(address to, uint value) external returns(bool);}\r\n\r\n// a child or a separate contract will have support for stable coin based grants\r\n// i am thinking of moving all beneficiary logic out of treasury in next implementation\r\ncontract Treasury {\r\n\taddress private _governance;\r\n\tuint8 private _governanceSet;\r\n\tbool private _init;\r\n\taddress private _jobMarket;\r\n\taddress private _oracleMain;// oracle registry contract\r\n\r\n\tstruct Beneficiary {bool solid; uint88 amount; uint32 lastClaim; uint16 emission;}\r\n\tmapping (address => Beneficiary) public bens;\r\n\tfunction init() public {\r\n\t\trequire(_init == false && msg.sender == 0x2D9F853F1a71D0635E64FcC4779269A05BccE2E2);\r\n\t\t_init=true;\r\n\t\t_governance = msg.sender;\r\n\t\tsetBeneficiary(0x2D9F853F1a71D0635E64FcC4779269A05BccE2E2,true,32857142857e12,1264e4,1e4);\r\n\t\tsetBeneficiary(0x174F4EbE08a7193833e985d4ef0Ad6ce50F7cBc4,true,28857142857e12,1264e4,1e4);\r\n\t\tsetBeneficiary(0xFA9675E41a9457E8278B2701C504cf4d132Fe2c2,true,19285714286e12,1264e4,1e4);\r\n\t}\r\n// so we assume that not only beneficiaries but also the governance is malicious\r\n// the function can overwrite some existing beneficiaries parameters\r\n// or we do it differently: a boolean that makes a grant editable/removable/irremovable, so that governance can express trust,\r\n// because if a malicious beneficiary scams governance, governance can ruin that beneficiary' reputation,\r\n// however if malicious governance scams a beneficiary, beneficiary can't do anything\r\n// best solution is yet to be found, design could change\r\n\tfunction setBeneficiary(address a, bool solid, uint amount, uint lastClaim, uint emission) public {\r\n\t\trequire(msg.sender == _governance && bens[a].solid == false && amount<=4e22 && lastClaim < block.number+1e6 && lastClaim >= 1264e4 && emission >= 1e2 && emission <=1e4);\r\n\t\tif(lastClaim < block.number) {lastClaim = block.number;}\r\n\t\tif (solid == true) {bens[a].solid = true;}\r\n\t\tuint lc = bens[a].lastClaim;\r\n\t\tif (lc == 0) {bens[a].lastClaim = uint32(lastClaim);} //lastClaim can be set to a future block and used as a start block for grant activation\r\n\t\tif (bens[a].amount == 0 && lc != 0) {bens[a].lastClaim = uint32(lastClaim);}\r\n\t\tbens[a].amount = uint88(amount);\r\n\t\tbens[a].emission = uint16(emission);\r\n\t}\r\n\r\n\tfunction getBeneficiaryRewards() external {\r\n\t\tuint lastClaim = bens[msg.sender].lastClaim;\r\n\t\tuint amount = bens[msg.sender].amount;\r\n\t\tuint rate = _getRate();\r\n\t\tuint toClaim = (block.number - lastClaim)*bens[msg.sender].emission*rate;\r\n\t\trequire(amount > 0 && block.number > lastClaim);\r\n\t\tif(toClaim > amount) {toClaim = amount;}\r\n\t\tbens[msg.sender].lastClaim = uint32(block.number);\r\n\t\tbens[msg.sender].amount = uint88(amount) - uint88(toClaim);\r\n\t\tI(0x95A28A02Ffb969e48B78554777f223445661fB9f).transfer(msg.sender, toClaim);\r\n\t}\r\n\r\n\tfunction getRewards(address a,uint amount) external returns(bool res){ //for posters, providers and oracles\r\n\t\trequire(msg.sender == 0xB0b3E52e432b80D3A37e15AB6BBF4673225e160f && msg.sender == _jobMarket && msg.sender == _oracleMain);//hardcoded addresses\r\n\t\tI(0x95A28A02Ffb969e48B78554777f223445661fB9f).transfer(a, amount); return true;\r\n\t}\r\n\r\n\tfunction _getRate() internal view returns(uint){uint rate = 1e11; uint halver = block.number/1e7;if (halver>1) {for (uint i=1;i<halver;i++) {rate=rate*3/4;}}return rate;}\r\n\r\n\tfunction setGovernance(address a) public {require(_governanceSet < 3 && msg.sender == _governance);_governanceSet += 1;_governance = a;}\r\n\tfunction setContracts(address j, address om) public {require(msg.sender == _governance); _jobMarket = j; _oracleMain = om;}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"solid\",\"type\":\"bool\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"},{\"internalType\":\"uint32\",\"name\":\"lastClaim\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"emission\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeneficiaryRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"res\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"solid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emission\",\"type\":\"uint256\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"j\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"om\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Treasury","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://00286ef42ddc0cbc74f7bcd442bbea30c389f149f4e5f9cfb41e8c64527617ca"}]}