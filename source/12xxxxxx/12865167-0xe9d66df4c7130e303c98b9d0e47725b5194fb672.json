{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0.\r\n */\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\ninterface IWeth {\r\n    function deposit() external payable;\r\n    function withdraw(uint256 wad) external;\r\n}\r\n\r\ncontract IERC20 {\r\n    string public name;\r\n    uint8 public decimals;\r\n    string public symbol;\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _who) public view returns (uint256);\r\n    function allowance(address _owner, address _spender) public view returns (uint256);\r\n    function approve(address _spender, uint256 _value) public returns (bool);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract IWethERC20 is IWeth, IERC20 {}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b != 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract Constants {\r\n\r\n    uint256 internal constant WEI_PRECISION = 10**18;\r\n    uint256 internal constant WEI_PERCENT_PRECISION = 10**20;\r\n\r\n    uint256 internal constant DAYS_IN_A_YEAR = 365;\r\n    uint256 internal constant ONE_MONTH = 2628000; // approx. seconds in a month\r\n\r\n    string internal constant UserRewardsID = \"UserRewards\";\r\n    string internal constant LoanDepositValueID = \"LoanDepositValue\";\r\n\r\n    IWethERC20 public constant wethToken = IWethERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    address public constant bzrxTokenAddress = 0x56d811088235F11C8920698a204A5010a788f4b3;\r\n    address public constant vbzrxTokenAddress = 0xB72B31907C1C95F3650b64b2469e08EdACeE5e8F;\r\n}\r\n\r\n/**\r\n * @dev Library for managing loan sets\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * Include with `using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set;`.\r\n *\r\n */\r\nlibrary EnumerableBytes32Set {\r\n\r\n    struct Bytes32Set {\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) index;\r\n        bytes32[] values;\r\n    }\r\n\r\n    /**\r\n     * @dev Add an address value to a set. O(1).\r\n     * Returns false if the value was already in the set.\r\n     */\r\n    function addAddress(Bytes32Set storage set, address addrvalue)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        bytes32 value;\r\n        assembly {\r\n            value := addrvalue\r\n        }\r\n        return addBytes32(set, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     * Returns false if the value was already in the set.\r\n     */\r\n    function addBytes32(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        if (!contains(set, value)){\r\n            set.index[value] = set.values.push(value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes an address value from a set. O(1).\r\n     * Returns false if the value was not present in the set.\r\n     */\r\n    function removeAddress(Bytes32Set storage set, address addrvalue)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        bytes32 value;\r\n        assembly {\r\n            value := addrvalue\r\n        }\r\n        return removeBytes32(set, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     * Returns false if the value was not present in the set.\r\n     */\r\n    function removeBytes32(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        if (contains(set, value)){\r\n            uint256 toDeleteIndex = set.index[value] - 1;\r\n            uint256 lastIndex = set.values.length - 1;\r\n\r\n            // If the element we're deleting is the last one, we can just remove it without doing a swap\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set.values[lastIndex];\r\n\r\n                // Move the last value to the index where the deleted value is\r\n                set.values[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set.index[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\r\n            }\r\n\r\n            // Delete the index entry for the deleted value\r\n            delete set.index[value];\r\n\r\n            // Delete the old entry for the moved value\r\n            set.values.pop();\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return set.index[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function containsAddress(Bytes32Set storage set, address addrvalue)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        bytes32 value;\r\n        assembly {\r\n            value := addrvalue\r\n        }\r\n        return set.index[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an array with all values in the set. O(N).\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n\r\n     * WARNING: This function may run out of gas on large sets: use {length} and\r\n     * {get} instead in these cases.\r\n     */\r\n    function enumerate(Bytes32Set storage set, uint256 start, uint256 count)\r\n        internal\r\n        view\r\n        returns (bytes32[] memory output)\r\n    {\r\n        uint256 end = start + count;\r\n        require(end >= start, \"addition overflow\");\r\n        end = set.values.length < end ? set.values.length : end;\r\n        if (end == 0 || start >= end) {\r\n            return output;\r\n        }\r\n\r\n        output = new bytes32[](end-start);\r\n        for (uint256 i = start; i < end; i++) {\r\n            output[i-start] = set.values[i];\r\n        }\r\n        return output;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of elements on the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return set.values.length;\r\n    }\r\n\r\n   /** @dev Returns the element stored at position `index` in the set. O(1).\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function get(Bytes32Set storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return set.values[index];\r\n    }\r\n\r\n   /** @dev Returns the element stored at position `index` in the set. O(1).\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function getAddress(Bytes32Set storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        bytes32 value = set.values[index];\r\n        address addrvalue;\r\n        assembly {\r\n            addrvalue := value\r\n        }\r\n        return addrvalue;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Helps contracts guard against reentrancy attacks.\r\n * @author Remco Bloemen <remco@2π.com>, Eenae <alexey@mixbytes.io>\r\n * @dev If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n\r\n    /// @dev Constant for unlocked guard state - non-zero to prevent extra gas costs.\r\n    /// See: https://github.com/OpenZeppelin/openzeppelin-solidity/issues/1056\r\n    uint256 internal constant REENTRANCY_GUARD_FREE = 1;\r\n\r\n    /// @dev Constant for locked guard state\r\n    uint256 internal constant REENTRANCY_GUARD_LOCKED = 2;\r\n\r\n    /**\r\n    * @dev We use a single lock for the whole contract.\r\n    */\r\n    uint256 internal reentrancyLock = REENTRANCY_GUARD_FREE;\r\n\r\n    /**\r\n    * @dev Prevents a contract from calling itself, directly or indirectly.\r\n    * If you mark a function `nonReentrant`, you should also\r\n    * mark it `external`. Calling one `nonReentrant` function from\r\n    * another is not supported. Instead, you can implement a\r\n    * `private` function doing the actual work, and an `external`\r\n    * wrapper marked as `nonReentrant`.\r\n    */\r\n    modifier nonReentrant() {\r\n        require(reentrancyLock == REENTRANCY_GUARD_FREE, \"nonReentrant\");\r\n        reentrancyLock = REENTRANCY_GUARD_LOCKED;\r\n        _;\r\n        reentrancyLock = REENTRANCY_GUARD_FREE;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"unauthorized\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract LoanStruct {\r\n    struct Loan {\r\n        bytes32 id;                 // id of the loan\r\n        bytes32 loanParamsId;       // the linked loan params id\r\n        bytes32 pendingTradesId;    // the linked pending trades id\r\n        uint256 principal;          // total borrowed amount outstanding\r\n        uint256 collateral;         // total collateral escrowed for the loan\r\n        uint256 startTimestamp;     // loan start time\r\n        uint256 endTimestamp;       // for active loans, this is the expected loan end time, for in-active loans, is the actual (past) end time\r\n        uint256 startMargin;        // initial margin when the loan opened\r\n        uint256 startRate;          // reference rate when the loan opened for converting collateralToken to loanToken\r\n        address borrower;           // borrower of this loan\r\n        address lender;             // lender of this loan\r\n        bool active;                // if false, the loan has been fully closed\r\n    }\r\n}\r\n\r\ncontract LoanParamsStruct {\r\n    struct LoanParams {\r\n        bytes32 id;                 // id of loan params object\r\n        bool active;                // if false, this object has been disabled by the owner and can't be used for future loans\r\n        address owner;              // owner of this object\r\n        address loanToken;          // the token being loaned\r\n        address collateralToken;    // the required collateral token\r\n        uint256 minInitialMargin;   // the minimum allowed initial margin\r\n        uint256 maintenanceMargin;  // an unhealthy loan when current margin is at or below this value\r\n        uint256 maxLoanTerm;        // the maximum term for new loans (0 means there's no max term)\r\n    }\r\n}\r\n\r\ncontract OrderStruct {\r\n    struct Order {\r\n        uint256 lockedAmount;           // escrowed amount waiting for a counterparty\r\n        uint256 interestRate;           // interest rate defined by the creator of this order\r\n        uint256 minLoanTerm;            // minimum loan term allowed\r\n        uint256 maxLoanTerm;            // maximum loan term allowed\r\n        uint256 createdTimestamp;       // timestamp when this order was created\r\n        uint256 expirationTimestamp;    // timestamp when this order expires\r\n    }\r\n}\r\n\r\ncontract LenderInterestStruct {\r\n    struct LenderInterest {\r\n        uint256 principalTotal;     // total borrowed amount outstanding of asset\r\n        uint256 owedPerDay;         // interest owed per day for all loans of asset\r\n        uint256 owedTotal;          // total interest owed for all loans of asset (assuming they go to full term)\r\n        uint256 paidTotal;          // total interest paid so far for asset\r\n        uint256 updatedTimestamp;   // last update\r\n    }\r\n}\r\n\r\ncontract LoanInterestStruct {\r\n    struct LoanInterest {\r\n        uint256 owedPerDay;         // interest owed per day for loan\r\n        uint256 depositTotal;       // total escrowed interest for loan\r\n        uint256 updatedTimestamp;   // last update\r\n    }\r\n}\r\n\r\ncontract Objects is\r\n    LoanStruct,\r\n    LoanParamsStruct,\r\n    OrderStruct,\r\n    LenderInterestStruct,\r\n    LoanInterestStruct\r\n{}\r\n\r\ncontract State is Constants, Objects, ReentrancyGuard, Ownable {\r\n    using SafeMath for uint256;\r\n    using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set;\r\n\r\n    address public priceFeeds;                                                              // handles asset reference price lookups\r\n    address public swapsImpl;                                                               // handles asset swaps using dex liquidity\r\n\r\n    mapping (bytes4 => address) public logicTargets;                                        // implementations of protocol functions\r\n\r\n    mapping (bytes32 => Loan) public loans;                                                 // loanId => Loan\r\n    mapping (bytes32 => LoanParams) public loanParams;                                      // loanParamsId => LoanParams\r\n\r\n    mapping (address => mapping (bytes32 => Order)) public lenderOrders;                    // lender => orderParamsId => Order\r\n    mapping (address => mapping (bytes32 => Order)) public borrowerOrders;                  // borrower => orderParamsId => Order\r\n\r\n    mapping (bytes32 => mapping (address => bool)) public delegatedManagers;                // loanId => delegated => approved\r\n\r\n    // Interest\r\n    mapping (address => mapping (address => LenderInterest)) public lenderInterest;         // lender => loanToken => LenderInterest object\r\n    mapping (bytes32 => LoanInterest) public loanInterest;                                  // loanId => LoanInterest object\r\n\r\n    // Internals\r\n    EnumerableBytes32Set.Bytes32Set internal logicTargetsSet;                               // implementations set\r\n    EnumerableBytes32Set.Bytes32Set internal activeLoansSet;                                // active loans set\r\n\r\n    mapping (address => EnumerableBytes32Set.Bytes32Set) internal lenderLoanSets;           // lender loans set\r\n    mapping (address => EnumerableBytes32Set.Bytes32Set) internal borrowerLoanSets;         // borrow loans set\r\n    mapping (address => EnumerableBytes32Set.Bytes32Set) internal userLoanParamSets;        // user loan params set\r\n\r\n    address public feesController;                                                          // address controlling fee withdrawals\r\n\r\n    uint256 public lendingFeePercent = 10 ether; // 10% fee                                 // fee taken from lender interest payments\r\n    mapping (address => uint256) public lendingFeeTokensHeld;                               // total interest fees received and not withdrawn per asset\r\n    mapping (address => uint256) public lendingFeeTokensPaid;                               // total interest fees withdraw per asset (lifetime fees = lendingFeeTokensHeld + lendingFeeTokensPaid)\r\n\r\n    uint256 public tradingFeePercent = 0.15 ether; // 0.15% fee                             // fee paid for each trade\r\n    mapping (address => uint256) public tradingFeeTokensHeld;                               // total trading fees received and not withdrawn per asset\r\n    mapping (address => uint256) public tradingFeeTokensPaid;                               // total trading fees withdraw per asset (lifetime fees = tradingFeeTokensHeld + tradingFeeTokensPaid)\r\n\r\n    uint256 public borrowingFeePercent = 0.09 ether; // 0.09% fee                           // origination fee paid for each loan\r\n    mapping (address => uint256) public borrowingFeeTokensHeld;                             // total borrowing fees received and not withdrawn per asset\r\n    mapping (address => uint256) public borrowingFeeTokensPaid;                             // total borrowing fees withdraw per asset (lifetime fees = borrowingFeeTokensHeld + borrowingFeeTokensPaid)\r\n\r\n    uint256 public protocolTokenHeld;                                                       // current protocol token deposit balance\r\n    uint256 public protocolTokenPaid;                                                       // lifetime total payout of protocol token\r\n\r\n    uint256 public affiliateFeePercent = 30 ether; // 30% fee share                         // fee share for affiliate program\r\n\r\n    mapping (address => mapping (address => uint256)) public liquidationIncentivePercent;   // percent discount on collateral for liquidators per loanToken and collateralToken\r\n\r\n    mapping (address => address) public loanPoolToUnderlying;                               // loanPool => underlying\r\n    mapping (address => address) public underlyingToLoanPool;                               // underlying => loanPool\r\n    EnumerableBytes32Set.Bytes32Set internal loanPoolsSet;                                  // loan pools set\r\n\r\n    mapping (address => bool) public supportedTokens;                                       // supported tokens for swaps\r\n\r\n    uint256 public maxDisagreement = 5 ether;                                               // % disagreement between swap rate and reference rate\r\n\r\n    uint256 public sourceBufferPercent = 5 ether;                                           // used to estimate kyber swap source amount\r\n\r\n    uint256 public maxSwapSize = 1500 ether;                                                // maximum supported swap size in ETH\r\n\r\n\r\n    function _setTarget(\r\n        bytes4 sig,\r\n        address target)\r\n        internal\r\n    {\r\n        logicTargets[sig] = target;\r\n\r\n        if (target != address(0)) {\r\n            logicTargetsSet.addBytes32(bytes32(sig));\r\n        } else {\r\n            logicTargetsSet.removeBytes32(bytes32(sig));\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    // 0x38ed1739\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline)\r\n        external\r\n        returns (uint256[] memory amounts);\r\n\r\n    // 0x8803dbee\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline)\r\n        external\r\n        returns (uint256[] memory amounts);\r\n\r\n    // 0x1f00ca74\r\n    function getAmountsIn(\r\n        uint256 amountOut,\r\n        address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    // 0xd06ca61f\r\n    function getAmountsOut(\r\n        uint256 amountIn,\r\n        address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface ISwapsImpl {\r\n    function dexSwap(\r\n        address sourceTokenAddress,\r\n        address destTokenAddress,\r\n        address receiverAddress,\r\n        address returnToSenderAddress,\r\n        uint256 minSourceTokenAmount,\r\n        uint256 maxSourceTokenAmount,\r\n        uint256 requiredDestTokenAmount)\r\n        external\r\n        returns (uint256 destTokenAmountReceived, uint256 sourceTokenAmountUsed);\r\n\r\n    function dexExpectedRate(\r\n        address sourceTokenAddress,\r\n        address destTokenAddress,\r\n        uint256 sourceTokenAmount)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function dexAmountOut(\r\n        address sourceTokenAddress,\r\n        address destTokenAddress,\r\n        uint256 amountIn)\r\n        external\r\n        view\r\n        returns (uint256 amountOut, address midToken);\r\n\r\n    function dexAmountIn(\r\n        address sourceTokenAddress,\r\n        address destTokenAddress,\r\n        uint256 amountOut)\r\n        external\r\n        view\r\n        returns (uint256 amountIn, address midToken);\r\n\r\n    function setSwapApprovals(\r\n        address[] calldata tokens)\r\n        external;\r\n}\r\n\r\ncontract SwapsImplUniswapV2_ETH is State, ISwapsImpl {\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public constant uniswapRouter = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;     // sushiswap\r\n    address public constant dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    address public constant usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    address public constant usdt = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n\r\n\r\n    function dexSwap(\r\n        address sourceTokenAddress,\r\n        address destTokenAddress,\r\n        address receiverAddress,\r\n        address returnToSenderAddress,\r\n        uint256 minSourceTokenAmount,\r\n        uint256 maxSourceTokenAmount,\r\n        uint256 requiredDestTokenAmount)\r\n        public\r\n        returns (uint256 destTokenAmountReceived, uint256 sourceTokenAmountUsed)\r\n    {\r\n        require(sourceTokenAddress != destTokenAddress, \"source == dest\");\r\n        require(supportedTokens[sourceTokenAddress] && supportedTokens[destTokenAddress], \"invalid tokens\");\r\n\r\n        IERC20 sourceToken = IERC20(sourceTokenAddress);\r\n        address _thisAddress = address(this);\r\n\r\n        (sourceTokenAmountUsed, destTokenAmountReceived) = _swapWithUni(\r\n            sourceTokenAddress,\r\n            destTokenAddress,\r\n            receiverAddress,\r\n            minSourceTokenAmount,\r\n            maxSourceTokenAmount,\r\n            requiredDestTokenAmount\r\n        );\r\n\r\n        if (returnToSenderAddress != _thisAddress && sourceTokenAmountUsed < maxSourceTokenAmount) {\r\n            // send unused source token back\r\n            sourceToken.safeTransfer(\r\n                returnToSenderAddress,\r\n                maxSourceTokenAmount-sourceTokenAmountUsed\r\n            );\r\n        }\r\n    }\r\n\r\n    function dexExpectedRate(\r\n        address sourceTokenAddress,\r\n        address destTokenAddress,\r\n        uint256 sourceTokenAmount)\r\n        public\r\n        view\r\n        returns (uint256 expectedRate)\r\n    {\r\n        revert(\"unsupported\");\r\n    }\r\n\r\n    function dexAmountOut(\r\n        address sourceTokenAddress,\r\n        address destTokenAddress,\r\n        uint256 amountIn)\r\n        public\r\n        view\r\n        returns (uint256 amountOut, address midToken)\r\n    {\r\n        if (sourceTokenAddress == destTokenAddress) {\r\n            amountOut = amountIn;\r\n        } else if (amountIn != 0) {\r\n            uint256 tmpValue;\r\n\r\n            address[] memory path = new address[](2);\r\n            path[0] = sourceTokenAddress;\r\n            path[1] = destTokenAddress;\r\n            amountOut = _getAmountOut(amountIn, path);\r\n\r\n            path = new address[](3);\r\n            path[0] = sourceTokenAddress;\r\n            path[2] = destTokenAddress;\r\n            \r\n            if (sourceTokenAddress != address(wethToken) && destTokenAddress != address(wethToken)) {\r\n                path[1] = address(wethToken);\r\n                tmpValue = _getAmountOut(amountIn, path);\r\n                if (tmpValue > amountOut) {\r\n                    amountOut = tmpValue;\r\n                    midToken = address(wethToken);\r\n                }\r\n            }\r\n\r\n            if (sourceTokenAddress != dai && destTokenAddress != dai) {\r\n                path[1] = dai;\r\n                tmpValue = _getAmountOut(amountIn, path);\r\n                if (tmpValue > amountOut) {\r\n                    amountOut = tmpValue;\r\n                    midToken = dai;\r\n                }\r\n            }\r\n\r\n            if (sourceTokenAddress != usdc && destTokenAddress != usdc) {\r\n                path[1] = usdc;\r\n                tmpValue = _getAmountOut(amountIn, path);\r\n                if (tmpValue > amountOut) {\r\n                    amountOut = tmpValue;\r\n                    midToken = usdc;\r\n                }\r\n            }\r\n\r\n            if (sourceTokenAddress != usdt && destTokenAddress != usdt) {\r\n                path[1] = usdt;\r\n                tmpValue = _getAmountOut(amountIn, path);\r\n                if (tmpValue > amountOut) {\r\n                    amountOut = tmpValue;\r\n                    midToken = usdt;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function dexAmountIn(\r\n        address sourceTokenAddress,\r\n        address destTokenAddress,\r\n        uint256 amountOut)\r\n        public\r\n        view\r\n        returns (uint256 amountIn, address midToken)\r\n    {\r\n        if (sourceTokenAddress == destTokenAddress) {\r\n            amountIn = amountOut;\r\n        } else if (amountOut != 0) {\r\n            uint256 tmpValue;\r\n\r\n            address[] memory path = new address[](2);\r\n            path[0] = sourceTokenAddress;\r\n            path[1] = destTokenAddress;\r\n            amountIn = _getAmountIn(amountOut, path);\r\n\r\n            path = new address[](3);\r\n            path[0] = sourceTokenAddress;\r\n            path[2] = destTokenAddress;\r\n            \r\n            if (sourceTokenAddress != address(wethToken) && destTokenAddress != address(wethToken)) {\r\n                path[1] = address(wethToken);\r\n                tmpValue = _getAmountIn(amountOut, path);\r\n                if (tmpValue < amountIn) {\r\n                    amountIn = tmpValue;\r\n                    midToken = address(wethToken);\r\n                }\r\n            }\r\n\r\n            if (sourceTokenAddress != dai && destTokenAddress != dai) {\r\n                path[1] = dai;\r\n                tmpValue = _getAmountIn(amountOut, path);\r\n                if (tmpValue < amountIn) {\r\n                    amountIn = tmpValue;\r\n                    midToken = dai;\r\n                }\r\n            }\r\n\r\n            if (sourceTokenAddress != usdc && destTokenAddress != usdc) {\r\n                path[1] = usdc;\r\n                tmpValue = _getAmountIn(amountOut, path);\r\n                if (tmpValue < amountIn) {\r\n                    amountIn = tmpValue;\r\n                    midToken = usdc;\r\n                }\r\n            }\r\n\r\n            if (sourceTokenAddress != usdt && destTokenAddress != usdt) {\r\n                path[1] = usdt;\r\n                tmpValue = _getAmountIn(amountOut, path);\r\n                if (tmpValue < amountIn) {\r\n                    amountIn = tmpValue;\r\n                    midToken = usdt;\r\n                }\r\n            }\r\n\r\n            if (amountIn == uint256(-1)) {\r\n                amountIn = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _getAmountOut(\r\n        uint256 amountIn,\r\n        address[] memory path)\r\n        public\r\n        view\r\n        returns (uint256 amountOut)\r\n    {\r\n        (bool success, bytes memory data) = uniswapRouter.staticcall(\r\n            abi.encodeWithSelector(\r\n                0xd06ca61f, // keccak(\"getAmountsOut(uint256,address[])\")\r\n                amountIn,\r\n                path\r\n            )\r\n        );\r\n        if (success) {\r\n            uint256 len = data.length;\r\n            assembly {\r\n                amountOut := mload(add(data, len)) // last amount value array\r\n            }\r\n        }\r\n    }\r\n\r\n    function _getAmountIn(\r\n        uint256 amountOut,\r\n        address[] memory path)\r\n        public\r\n        view\r\n        returns (uint256 amountIn)\r\n    {\r\n        (bool success, bytes memory data) = uniswapRouter.staticcall(\r\n            abi.encodeWithSelector(\r\n                0x1f00ca74, // keccak(\"getAmountsIn(uint256,address[])\")\r\n                amountOut,\r\n                path\r\n            )\r\n        );\r\n        if (success) {\r\n            uint256 len = data.length;\r\n            assembly {\r\n                amountIn := mload(add(data, 96)) // first amount value in array\r\n            }\r\n        }\r\n        if (amountIn == 0) {\r\n            amountIn = uint256(-1);\r\n        }\r\n    }\r\n\r\n    function setSwapApprovals(\r\n        address[] memory tokens)\r\n        public\r\n    {\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            IERC20(tokens[i]).safeApprove(uniswapRouter, 0);\r\n            IERC20(tokens[i]).safeApprove(uniswapRouter, uint256(-1));\r\n        }\r\n    }\r\n\r\n    function _swapWithUni(\r\n        address sourceTokenAddress,\r\n        address destTokenAddress,\r\n        address receiverAddress,\r\n        uint256 minSourceTokenAmount,\r\n        uint256 maxSourceTokenAmount,\r\n        uint256 requiredDestTokenAmount)\r\n        internal\r\n        returns (uint256 sourceTokenAmountUsed, uint256 destTokenAmountReceived)\r\n    {\r\n        address midToken;\r\n        if (requiredDestTokenAmount != 0) {\r\n            (sourceTokenAmountUsed, midToken) = dexAmountIn(\r\n                sourceTokenAddress,\r\n                destTokenAddress,\r\n                requiredDestTokenAmount\r\n            );\r\n            if (sourceTokenAmountUsed == 0) {\r\n                return (0, 0);\r\n            }\r\n            require(sourceTokenAmountUsed <= maxSourceTokenAmount, \"source amount too high\");\r\n        } else {\r\n            sourceTokenAmountUsed = minSourceTokenAmount;\r\n            (destTokenAmountReceived, midToken) = dexAmountOut(\r\n                sourceTokenAddress,\r\n                destTokenAddress,\r\n                sourceTokenAmountUsed\r\n            );\r\n            if (destTokenAmountReceived == 0) {\r\n                return (0, 0);\r\n            }\r\n        }\r\n\r\n        address[] memory path;\r\n        if (midToken != address(0)) {\r\n            path = new address[](3);\r\n            path[0] = sourceTokenAddress;\r\n            path[1] = midToken;\r\n            path[2] = destTokenAddress;\r\n        } else {\r\n            path = new address[](2);\r\n            path[0] = sourceTokenAddress;\r\n            path[1] = destTokenAddress;\r\n        }\r\n\r\n        uint256[] memory amounts = IUniswapV2Router(uniswapRouter).swapExactTokensForTokens(\r\n            sourceTokenAmountUsed,\r\n            1, // amountOutMin\r\n            path,\r\n            receiverAddress,\r\n            block.timestamp\r\n        );\r\n\r\n        destTokenAmountReceived = amounts[amounts.length - 1];\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"_getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"_getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"affiliateFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"borrowerOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLoanTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLoanTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowingFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowingFeeTokensHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowingFeeTokensPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bzrxTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegatedManagers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"dexAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"midToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"dexAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"midToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sourceTokenAmount\",\"type\":\"uint256\"}],\"name\":\"dexExpectedRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expectedRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"returnToSenderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minSourceTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSourceTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredDestTokenAmount\",\"type\":\"uint256\"}],\"name\":\"dexSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"destTokenAmountReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceTokenAmountUsed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feesController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lenderInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"principalTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"lenderOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLoanTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLoanTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lendingFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lendingFeeTokensHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lendingFeeTokensPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidationIncentivePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"loanInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"owedPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"loanParams\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minInitialMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maintenanceMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLoanTerm\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"loanPoolToUnderlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"loans\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"loanParamsId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"pendingTradesId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"logicTargets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxDisagreement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSwapSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceFeeds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protocolTokenHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protocolTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"setSwapApprovals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sourceBufferPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"swapsImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradingFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingFeeTokensHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingFeeTokensPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"underlyingToLoanPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vbzrxTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wethToken\",\"outputs\":[{\"internalType\":\"contract IWethERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SwapsImplUniswapV2_ETH","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://de1007b2ece1a9f2bc0bb59bb32f57f06782e242236bfc59d588375ffe701d42"}]}