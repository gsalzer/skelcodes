{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.8.6;\r\n\r\ncontract AddressesProvider {\r\n    struct AddressMetadata {\r\n        address addr;\r\n        string addressId;\r\n    }\r\n    \r\n    address public ownerAddress;\r\n    mapping(uint256 => AddressMetadata) public addressMetadataById;\r\n    mapping(string => bool) internal addressIdExists;\r\n    mapping(string => uint256) public addressIdPosition;\r\n    uint256 addressesMetadataLength;\r\n\r\n    constructor() {\r\n        ownerAddress = msg.sender;\r\n    }\r\n    \r\n    function setAddressMetadata(AddressMetadata memory addressMetadata) public {\r\n        require(msg.sender == ownerAddress, \"Caller is not owner\");\r\n        address addr = addressMetadata.addr;\r\n        string memory addressId = addressMetadata.addressId;\r\n\r\n        uint256 upsertPosition = addressesMetadataLength;\r\n        if (addressIdExists[addressId]) {\r\n            upsertPosition = addressIdPosition[addressId];\r\n        } else {\r\n            addressIdExists[addressId] = true;\r\n            addressIdPosition[addressId] = addressesMetadataLength;\r\n            addressesMetadataLength++;\r\n        }\r\n        addressMetadataById[upsertPosition] = AddressMetadata({\r\n           addr: addr,\r\n           addressId: addressId\r\n        });\r\n        if (addressIdExists[addressId] == false) {\r\n            addressesMetadataLength++;\r\n        }\r\n    }\r\n    \r\n    function setAddressesMetadata(AddressMetadata[] memory _addressesMetadata) external {\r\n        require(msg.sender == ownerAddress, \"Caller is not owner\");\r\n        for (uint256 addressMetadataIdx; addressMetadataIdx < _addressesMetadata.length; addressMetadataIdx++) {\r\n            AddressMetadata memory addressMetadataParams = _addressesMetadata[addressMetadataIdx];\r\n            setAddressMetadata(addressMetadataParams);\r\n        }\r\n    }\r\n    \r\n    function addressesMetadata() external view returns (AddressMetadata[] memory) {\r\n        AddressMetadata[] memory _addressesMetadata = new AddressMetadata[](addressesMetadataLength);\r\n        for (uint256 addressMetadataIdx; addressMetadataIdx < addressesMetadataLength; addressMetadataIdx++) {\r\n            AddressMetadata memory addressMetadata = addressMetadataById[addressMetadataIdx];\r\n            _addressesMetadata[addressMetadataIdx] = addressMetadata;\r\n        }\r\n        return _addressesMetadata;\r\n    }\r\n    \r\n    function addressMetadataId(string memory addressId) external view returns (AddressMetadata memory) {\r\n        for (uint256 addressMetadataIdx; addressMetadataIdx < addressesMetadataLength; addressMetadataIdx++) {\r\n            AddressMetadata memory addressMetadata = addressMetadataById[addressMetadataIdx];\r\n            if (stringsEqual(addressId, addressMetadata.addressId)) {\r\n                return addressMetadata;\r\n            }\r\n        }\r\n        return AddressMetadata({\r\n            addr: address(0),\r\n            addressId: \"\"\r\n        });\r\n    }\r\n\r\n    function addresses() external view returns (address[] memory) {\r\n        address[] memory _addresses = new address[](addressesMetadataLength);\r\n        for (uint256 addressMetadataIdx; addressMetadataIdx < addressesMetadataLength; addressMetadataIdx++) {\r\n            AddressMetadata memory addressMetadata = addressMetadataById[addressMetadataIdx];\r\n            _addresses[addressMetadataIdx] = addressMetadata.addr;\r\n        }\r\n        return _addresses;\r\n    }\r\n    \r\n    function addressById(string memory addressId) external view returns (address) {\r\n        for (uint256 addressMetadataIdx; addressMetadataIdx < addressesMetadataLength; addressMetadataIdx++) {\r\n            AddressMetadata memory addressMetadata = addressMetadataById[addressMetadataIdx];\r\n            if (stringsEqual(addressId, addressMetadata.addressId)) {\r\n                return addressMetadata.addr;\r\n            }\r\n        }\r\n        return address(0);\r\n    }\r\n    \r\n    function addressesWhereIdStartsWith(string memory addressIdSubstring) external view returns (address[] memory) {\r\n        address[] memory _addresses = new address[](addressesMetadataLength);\r\n        uint256 addressesIdsLength;\r\n        for (uint256 addressMetadataIdx; addressMetadataIdx < addressesMetadataLength; addressMetadataIdx++) {\r\n            AddressMetadata memory addressMetadata = addressMetadataById[addressMetadataIdx];\r\n            bool foundMatch = startsWith(addressMetadata.addressId, addressIdSubstring);\r\n            if (foundMatch) {\r\n                _addresses[addressesIdsLength] = addressMetadata.addr;\r\n                addressesIdsLength++;\r\n            }\r\n        }\r\n        bytes memory encodedAddresses = abi.encode(_addresses);\r\n        assembly {\r\n            mstore(add(encodedAddresses, 0x40), addressesIdsLength)\r\n        }\r\n        address[] memory filteredAddresses =\r\n            abi.decode(encodedAddresses, (address[]));\r\n        \r\n        return filteredAddresses;\r\n    }\r\n    \r\n    function addressesIds() external view returns (string[] memory) {\r\n        string[] memory _addressesIds = new string[](addressesMetadataLength);\r\n        for (uint256 addressMetadataIdx; addressMetadataIdx < addressesMetadataLength; addressMetadataIdx++) {\r\n            AddressMetadata memory addressMetadata = addressMetadataById[addressMetadataIdx];\r\n            _addressesIds[addressMetadataIdx] = addressMetadata.addressId;\r\n        }\r\n        return _addressesIds;\r\n    }\r\n    \r\n    /**\r\n     * Search for a needle in a haystack\r\n     */\r\n    function startsWith(string memory haystack, string memory needle) internal pure returns (bool) {\r\n        return indexOf(needle, haystack) == 0;\r\n    }\r\n\r\n    /**\r\n     * Case insensitive string search\r\n     *\r\n     * @param needle The string to search for\r\n     * @param haystack The string to search in\r\n     * @return Returns -1 if no match is found, otherwise returns the index of the match \r\n     */\r\n    function indexOf(string memory needle, string memory haystack) internal pure returns (int256) {\r\n        bytes memory _needle = bytes(needle);\r\n        bytes memory _haystack = bytes(haystack);\r\n        if (_haystack.length < _needle.length) {\r\n            return -1;\r\n        }\r\n        bool _match;\r\n        for (uint256 haystackIdx; haystackIdx < _haystack.length; haystackIdx++) {\r\n            for (uint256 needleIdx; needleIdx < _needle.length; needleIdx++) {\r\n                uint8 needleChar = uint8(_needle[needleIdx]);\r\n                if (haystackIdx + needleIdx >= _haystack.length) {\r\n                    return -1;\r\n                }\r\n                uint8 haystackChar = uint8(_haystack[haystackIdx + needleIdx]);\r\n                if (needleChar == haystackChar) {\r\n                    _match = true;\r\n                    if (needleIdx == _needle.length - 1) {\r\n                        return int(haystackIdx);\r\n                    }\r\n                } else {\r\n                    _match = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n    \r\n    /**\r\n     * Check to see if two strings are exactly equal\r\n     * @dev Only valid for strings up to 32 characters\r\n     */    \r\n    function stringsEqual(string memory input1, string memory input2) internal pure returns (bool) {\r\n        bytes32 input1Bytes32;\r\n        bytes32 input2Bytes32;\r\n        assembly {\r\n            input1Bytes32 := mload(add(input1, 32))\r\n            input2Bytes32 := mload(add(input2, 32))\r\n        }\r\n        return input1Bytes32 == input2Bytes32;\r\n    }\r\n\r\n    /**\r\n     * Allow storage slots to be manually updated\r\n     */\r\n    function updateSlot(bytes32 slot, bytes32 value) external {\r\n        require(msg.sender == ownerAddress);\r\n        assembly {\r\n            sstore(slot, value)\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"addressId\",\"type\":\"string\"}],\"name\":\"addressById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"addressIdPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressMetadataById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"addressId\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"addressId\",\"type\":\"string\"}],\"name\":\"addressMetadataId\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"addressId\",\"type\":\"string\"}],\"internalType\":\"struct AddressesProvider.AddressMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressesIds\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressesMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"addressId\",\"type\":\"string\"}],\"internalType\":\"struct AddressesProvider.AddressMetadata[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"addressIdSubstring\",\"type\":\"string\"}],\"name\":\"addressesWhereIdStartsWith\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"addressId\",\"type\":\"string\"}],\"internalType\":\"struct AddressesProvider.AddressMetadata\",\"name\":\"addressMetadata\",\"type\":\"tuple\"}],\"name\":\"setAddressMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"addressId\",\"type\":\"string\"}],\"internalType\":\"struct AddressesProvider.AddressMetadata[]\",\"name\":\"_addressesMetadata\",\"type\":\"tuple[]\"}],\"name\":\"setAddressesMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"updateSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AddressesProvider","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://bf0423316745e89a1945f2bf49d99eadfae6989e3ecd207f582406205f6fb00b"}]}