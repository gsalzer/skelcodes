{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity =0.8.4;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name}, {symbol} and {desimals}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n    \r\n    function validate(IERC20 token) internal view {\r\n        require(address(token).isContract(), \"SafeERC20: not a contract\");\r\n    }\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nstruct User {\r\n    uint256 totalOriginalTaken;\r\n    uint256 lastUpdateTick;\r\n    uint256 goldenBalance;\r\n    uint256 cooldownAmount;\r\n    uint256 cooldownTick;\r\n}\r\n\r\nlibrary UserLib {\r\n    function addCooldownAmount(User storage _user, uint256 _currentTick, uint256 _amount) internal {\r\n        if(_user.cooldownTick == _currentTick) {\r\n            _user.cooldownAmount += _amount;\r\n        } else {\r\n           _user.cooldownTick = _currentTick;\r\n           _user.cooldownAmount = _amount;\r\n        }\r\n    }\r\n}\r\n\r\nstruct Vesting {\r\n    uint256 totalAmount;\r\n    uint256 startBlock;\r\n    uint256 endBlock;\r\n}\r\n\r\nlibrary VestingLib {\r\n    function validate(Vesting storage _vesting) internal view {\r\n        require(_vesting.totalAmount > 0, \"zero total vesting amount\");\r\n        require(_vesting.startBlock < _vesting.endBlock, \"invalid vesting blocks\");\r\n    }\r\n    \r\n    function isInitialized(Vesting storage _vesting) internal view returns (bool) {\r\n        return _vesting.endBlock > 0;\r\n    }\r\n    \r\n    function currentTick(Vesting storage _vesting) internal view returns (uint256) {\r\n        if(_vesting.endBlock == 0) return 0; // vesting is not yet initialized\r\n        \r\n        if(block.number < _vesting.startBlock) return 0;\r\n            \r\n        if(block.number > _vesting.endBlock) {\r\n            return _vesting.endBlock - _vesting.startBlock + 1;\r\n        }\r\n\r\n        return block.number - _vesting.startBlock + 1;\r\n    }\r\n    \r\n    function lastTick(Vesting storage _vesting) internal view returns (uint256) {\r\n        return _vesting.endBlock - _vesting.startBlock;\r\n    }\r\n    \r\n    function unlockAtATickAmount(Vesting storage _vesting) internal view returns (uint256) {\r\n        return _vesting.totalAmount / (_vesting.endBlock - _vesting.startBlock);\r\n    }\r\n}\r\n\r\nstruct Price {\r\n    address asset;\r\n    uint256 value;\r\n}\r\n\r\ncontract DeferredVestingPool is ERC20 {\r\n    using SafeERC20 for IERC20;\r\n    using SafeERC20 for IERC20Metadata;\r\n    using UserLib for User;\r\n    using VestingLib for Vesting;\r\n\r\n    bool public isSalePaused_;\r\n    address public admin_;\r\n    address public revenueOwner_;\r\n    IERC20Metadata public originalToken_;\r\n    address public originalTokenOwner_;\r\n    uint256 public precisionDecimals_;\r\n    mapping(address => User) public users_;\r\n    mapping(address => uint256) public assets_;\r\n    Vesting public vesting_;\r\n    \r\n    string private constant ERR_AUTH_FAILED = \"auth failed\";\r\n    \r\n    event WithdrawCoin(address indexed msgSender, bool isMsgSenderAdmin, address indexed to, uint256 amount);\r\n    event WithdrawOriginalToken(address indexed msgSender, bool isMsgSenderAdmin, address indexed to, uint256 amount);\r\n    event SetPrice(address indexed asset, uint256 price);\r\n    event PauseCollateralizedSale(bool on);\r\n    event SetRevenueOwner(address indexed msgSender, address indexed newRevenueOwner);\r\n    event SetOriginalTokenOwner(address indexed msgSender, address indexed newOriginalTokenOwner);\r\n    event SwapToCollateralized(address indexed msgSender, address indexed fromAsset, uint256 fromAmount, uint256 toAmount, uint32 indexed refCode);\r\n    event SwapCollateralizedToOriginal(address indexed msgSender, uint256 amount);\r\n    \r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        address _admin,\r\n        address _revenueOwner,\r\n        IERC20Metadata _originalToken,\r\n        address _originalTokenOwner,\r\n        uint256 _precisionDecimals,\r\n        Price[] memory _prices) ERC20(_name, _symbol, _originalToken.decimals()) {\r\n            \r\n        _originalToken.validate();\r\n        \r\n        admin_ = _admin;\r\n        revenueOwner_ = _revenueOwner;\r\n        originalToken_ = _originalToken;\r\n        originalTokenOwner_ = _originalTokenOwner;\r\n        precisionDecimals_ = _precisionDecimals;\r\n        \r\n        emit SetRevenueOwner(_msgSender(), _revenueOwner);\r\n        emit SetOriginalTokenOwner(_msgSender(), _originalTokenOwner);\r\n        \r\n         for(uint32 i = 0; i < _prices.length; ++i) {\r\n            assets_[_prices[i].asset] = _prices[i].value;\r\n            emit SetPrice(_prices[i].asset, _prices[i].value);\r\n        }\r\n        \r\n        emit PauseCollateralizedSale(false);\r\n    }\r\n    \r\n    function totalOriginalBalance() external view returns (uint256) {\r\n        return originalToken_.balanceOf(address(this));\r\n    }\r\n    \r\n    function availableForSellCollateralizedAmount() public view returns (uint256) {\r\n        if(isSalePaused_) return 0;\r\n        \r\n        if(vesting_.isInitialized()) return 0;\r\n        \r\n        return originalToken_.balanceOf(address(this)) - totalSupply();\r\n    }\r\n    \r\n    function unusedCollateralAmount() public view returns (uint256) {\r\n        return originalToken_.balanceOf(address(this)) - totalSupply();\r\n    }\r\n    \r\n    modifier onlyAdmin() {\r\n        require(admin_ == _msgSender(), ERR_AUTH_FAILED);\r\n        _;\r\n    }\r\n    \r\n    function initializeVesting(uint256 _startBlock, uint256 _endBlock) external onlyAdmin {\r\n        require(!vesting_.isInitialized(), \"already initialized\");\r\n        \r\n        vesting_.totalAmount = totalSupply();\r\n        vesting_.startBlock = _startBlock;\r\n        vesting_.endBlock = _endBlock;\r\n\r\n        vesting_.validate();\r\n    }\r\n    \r\n    function withdrawCoin(uint256 _amount) external onlyAdmin {\r\n        _withdrawCoin(payable(revenueOwner_), _amount);\r\n    }\r\n    \r\n    function withdrawOriginalToken(uint256 _amount) external onlyAdmin {\r\n        _withdrawOriginalToken(originalTokenOwner_, _amount);\r\n    }\r\n    \r\n    function setPrices(Price[] calldata _prices) external onlyAdmin {\r\n        for(uint32 i = 0; i < _prices.length; ++i) {\r\n            assets_[_prices[i].asset] = _prices[i].value;\r\n            emit SetPrice(_prices[i].asset, _prices[i].value);\r\n        }\r\n    }\r\n    \r\n    function pauseCollateralizedSale(bool _on) external onlyAdmin {\r\n        require(isSalePaused_ != _on);\r\n        isSalePaused_ = _on;\r\n        emit PauseCollateralizedSale(_on);\r\n    }\r\n    \r\n    modifier onlyRevenueOwner() {\r\n        require(revenueOwner_ == _msgSender(), ERR_AUTH_FAILED);\r\n        _;\r\n    }\r\n    \r\n    function setRevenueOwner(address _newRevenueOwner) external onlyRevenueOwner {\r\n        revenueOwner_ = _newRevenueOwner;\r\n        \r\n        emit SetRevenueOwner(_msgSender(), _newRevenueOwner);\r\n    }\r\n    \r\n    function withdrawCoin(address payable _to, uint256 _amount) external onlyRevenueOwner {\r\n        _withdrawCoin(_to, _amount);\r\n    }\r\n    \r\n    modifier onlyOriginalTokenOwner() {\r\n        require(originalTokenOwner_ == _msgSender(), ERR_AUTH_FAILED);\r\n        _;\r\n    }\r\n    \r\n    function setOriginalTokenOwner(address _newOriginalTokenOwner) external onlyOriginalTokenOwner {\r\n        originalTokenOwner_ = _newOriginalTokenOwner;\r\n        \r\n        emit SetOriginalTokenOwner(_msgSender(), _newOriginalTokenOwner);\r\n    }\r\n    \r\n    function withdrawOriginalToken(address _to, uint256 _amount) external onlyOriginalTokenOwner {\r\n        _withdrawOriginalToken(_to, _amount);\r\n    }\r\n    \r\n    function _withdrawCoin(address payable _to, uint256 _amount) private {\r\n        if(_amount == 0) {\r\n            _amount = address(this).balance;\r\n        }\r\n        \r\n        _to.transfer(_amount);\r\n        \r\n        emit WithdrawCoin(_msgSender(), _msgSender() == admin_, _to, _amount);\r\n    }\r\n    \r\n    function _withdrawOriginalToken(address _to, uint256 _amount) private {\r\n        uint256 maxWithdrawAmount = unusedCollateralAmount();\r\n        \r\n        if(_amount == 0) {\r\n            _amount = maxWithdrawAmount;\r\n        }\r\n        \r\n        require(_amount > 0, \"zero withdraw amount\");\r\n        require(_amount <= maxWithdrawAmount, \"invalid withdraw amount\");\r\n        \r\n        originalToken_.safeTransfer(_to, _amount);\r\n        \r\n        emit WithdrawOriginalToken(_msgSender(), _msgSender() == admin_, _to, _amount);\r\n    }\r\n    \r\n    function calcCollateralizedPrice(address _fromAsset, uint256 _fromAmount) public view\r\n        returns (uint256 toActualAmount_, uint256 fromActualAmount_) {\r\n\r\n        require(_fromAmount > 0, \"zero payment\");\r\n        \r\n        uint256 fromAssetPrice = assets_[_fromAsset];\r\n        require(fromAssetPrice > 0, \"asset not supported\");\r\n        \r\n        if(isSalePaused_) return (0, 0);\r\n        \r\n        uint256 toAvailableForSell = availableForSellCollateralizedAmount();\r\n        uint256 oneOriginalToken = 10 ** originalToken_.decimals();\r\n        \r\n        fromActualAmount_ = _fromAmount;\r\n        toActualAmount_ = (_fromAmount * oneOriginalToken) / fromAssetPrice;\r\n        \r\n        if(toActualAmount_ > toAvailableForSell) {\r\n            toActualAmount_ = toAvailableForSell;\r\n            fromActualAmount_ = (toAvailableForSell * fromAssetPrice) / oneOriginalToken;\r\n        }\r\n    }\r\n    \r\n    function swapCoinToCollateralized(uint256 _toExpectedAmount, uint32 _refCode) external payable {\r\n        _swapToCollateralized(address(0), msg.value, _toExpectedAmount, _refCode);\r\n    }\r\n    \r\n    function swapTokenToCollateralized(IERC20 _fromAsset, uint256 _fromAmount, uint256 _toExpectedAmount, uint32 _refCode) external {\r\n        require(address(_fromAsset) != address(0), \"wrong swap function\");\r\n        \r\n        uint256 fromAmount = _fromAmount == 0 ? _fromAsset.allowance(_msgSender(), address(this)) : _fromAmount;\r\n        _fromAsset.safeTransferFrom(_msgSender(), revenueOwner_, fromAmount);\r\n        \r\n        _swapToCollateralized(address(_fromAsset), fromAmount, _toExpectedAmount, _refCode);\r\n    }\r\n    \r\n    function _swapToCollateralized(address _fromAsset, uint256 _fromAmount, uint256 _toExpectedAmount, uint32 _refCode) private {\r\n        require(!isSalePaused_, \"swap paused\");\r\n        require(!vesting_.isInitialized(), \"can't do this after vesting init\");\r\n        require(_toExpectedAmount > 0, \"zero expected amount\");\r\n        \r\n        (uint256 toActualAmount, uint256 fromActualAmount) = calcCollateralizedPrice(_fromAsset, _fromAmount);\r\n        \r\n        toActualAmount = _fixAmount(toActualAmount, _toExpectedAmount);\r\n            \r\n        require(_fromAmount >= fromActualAmount, \"wrong payment amount\");\r\n        \r\n        _mint(_msgSender(), toActualAmount);\r\n     \r\n        emit SwapToCollateralized(_msgSender(), _fromAsset, _fromAmount, toActualAmount, _refCode);\r\n    }\r\n    \r\n    function _fixAmount(uint256 _actual, uint256 _expected) private view returns (uint256) {\r\n        if(_expected < _actual) return _expected;\r\n        \r\n        require(_expected - _actual <= 10 ** precisionDecimals_, \"expected amount mismatch\");\r\n        \r\n        return _actual;\r\n    }\r\n    \r\n    function collateralizedBalance(address _userAddr) external view\r\n        returns (\r\n            uint256 blockNumber,\r\n            uint256 totalOriginalTakenAmount,\r\n            uint256 totalCollateralizedAmount,\r\n            uint256 goldenAmount,\r\n            uint256 grayAmount,\r\n            uint256 cooldownAmount) {\r\n\r\n        uint256 currentTick = vesting_.currentTick();\r\n\r\n        blockNumber = block.number;\r\n        totalOriginalTakenAmount = users_[_userAddr].totalOriginalTaken;\r\n        totalCollateralizedAmount = balanceOf(_userAddr);\r\n        goldenAmount = users_[_userAddr].goldenBalance + _calcNewGoldenAmount(_userAddr, currentTick);\r\n        grayAmount = totalCollateralizedAmount - goldenAmount;\r\n        cooldownAmount = _getCooldownAmount(users_[_userAddr], currentTick);\r\n    }\r\n\r\n    function swapCollateralizedToOriginal(uint256 _amount) external {\r\n        address msgSender = _msgSender();\r\n\r\n        _updateUserGoldenBalance(msgSender, vesting_.currentTick());\r\n\r\n        User storage user = users_[msgSender];\r\n\r\n        if(_amount == 0) _amount = user.goldenBalance;\r\n\r\n        require(_amount > 0, \"zero swap amount\");\r\n        require(_amount <= user.goldenBalance, \"invalid amount\");\r\n\r\n        user.totalOriginalTaken += _amount;\r\n        user.goldenBalance -= _amount;\r\n\r\n        _burn(msgSender, _amount);\r\n        originalToken_.safeTransfer(msgSender, _amount);\r\n        \r\n        emit SwapCollateralizedToOriginal(msgSender, _amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(address _from, address _to, uint256 _amount) internal virtual override {\r\n        // mint or burn\r\n        if(_from == address(0) || _to == address(0)) return;\r\n\r\n        uint256 currentTick = vesting_.currentTick();\r\n\r\n        _updateUserGoldenBalance(_from, currentTick);\r\n        _updateUserGoldenBalance(_to, currentTick);\r\n\r\n        User storage userTo = users_[_to];\r\n        User storage userFrom = users_[_from];\r\n\r\n        uint256 fromGoldenAmount = userFrom.goldenBalance;\r\n        uint256 fromGrayAmount = balanceOf(_from) - fromGoldenAmount;\r\n\r\n        // change cooldown amount of sender\r\n        if(fromGrayAmount > 0\r\n            && userFrom.cooldownTick == currentTick\r\n            && userFrom.cooldownAmount > 0) {\r\n\r\n            if(_getCooldownAmount(userFrom, currentTick) > _amount) {\r\n                userFrom.cooldownAmount -= _amount;\r\n            } else {\r\n                userFrom.cooldownAmount = 0;\r\n            }\r\n        }\r\n\r\n        if(_amount > fromGrayAmount) { // golden amount is also transfered\r\n            uint256 transferGoldenAmount = _amount - fromGrayAmount;\r\n            //require(transferGoldenAmount <= fromGoldenAmount, \"math error\");\r\n            \r\n            userTo.addCooldownAmount(currentTick, fromGrayAmount);\r\n            \r\n            userFrom.goldenBalance -= transferGoldenAmount;\r\n            userTo.goldenBalance += transferGoldenAmount;\r\n        } else { // only gray amount is transfered\r\n            userTo.addCooldownAmount(currentTick, _amount);\r\n        }\r\n    }\r\n\r\n    function _updateUserGoldenBalance(address _userAddr, uint256 _currentTick) private {\r\n        if(_currentTick == 0) return;\r\n        \r\n        User storage user = users_[_userAddr];\r\n        \r\n        if(user.lastUpdateTick == vesting_.lastTick()) return;\r\n\r\n        user.goldenBalance += _calcNewGoldenAmount(_userAddr, _currentTick);\r\n        user.lastUpdateTick = _currentTick;\r\n    }\r\n\r\n    function _calcNewGoldenAmount(address _userAddr, uint256 _currentTick) private view returns (uint256) {\r\n        if(_currentTick == 0) return 0;\r\n        \r\n        User storage user = users_[_userAddr];\r\n\r\n        if(user.goldenBalance == balanceOf(_userAddr)) return 0;\r\n\r\n        if(_currentTick >= vesting_.lastTick()) {\r\n            return balanceOf(_userAddr) - user.goldenBalance;\r\n        }\r\n\r\n        uint256 result = balanceOf(_userAddr) - _getCooldownAmount(user, _currentTick) + user.totalOriginalTaken;\r\n        result *= _currentTick - user.lastUpdateTick;\r\n        result *= vesting_.unlockAtATickAmount();\r\n        result /= vesting_.totalAmount;\r\n        result = _min(result, balanceOf(_userAddr) - user.goldenBalance);\r\n\r\n        return result;\r\n    }\r\n\r\n    function _getCooldownAmount(User storage _user, uint256 _currentTick) private view returns (uint256) {\r\n        if(_currentTick >= vesting_.lastTick()) return 0;\r\n\r\n        return _currentTick == _user.cooldownTick ? _user.cooldownAmount : 0;\r\n    }\r\n\r\n    function _min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a <= b ? a : b;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_revenueOwner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"_originalToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_originalTokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_precisionDecimals\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Price[]\",\"name\":\"_prices\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"on\",\"type\":\"bool\"}],\"name\":\"PauseCollateralizedSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOriginalTokenOwner\",\"type\":\"address\"}],\"name\":\"SetOriginalTokenOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SetPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRevenueOwner\",\"type\":\"address\"}],\"name\":\"SetRevenueOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SwapCollateralizedToOriginal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"refCode\",\"type\":\"uint32\"}],\"name\":\"SwapToCollateralized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isMsgSenderAdmin\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawCoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isMsgSenderAdmin\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawOriginalToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assets_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableForSellCollateralizedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromAmount\",\"type\":\"uint256\"}],\"name\":\"calcCollateralizedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"toActualAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromActualAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"collateralizedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalOriginalTakenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateralizedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goldenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"grayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cooldownAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"name\":\"initializeVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSalePaused_\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"originalTokenOwner_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"originalToken_\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_on\",\"type\":\"bool\"}],\"name\":\"pauseCollateralizedSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precisionDecimals_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueOwner_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOriginalTokenOwner\",\"type\":\"address\"}],\"name\":\"setOriginalTokenOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Price[]\",\"name\":\"_prices\",\"type\":\"tuple[]\"}],\"name\":\"setPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRevenueOwner\",\"type\":\"address\"}],\"name\":\"setRevenueOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_toExpectedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_refCode\",\"type\":\"uint32\"}],\"name\":\"swapCoinToCollateralized\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"swapCollateralizedToOriginal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_fromAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toExpectedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_refCode\",\"type\":\"uint32\"}],\"name\":\"swapTokenToCollateralized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOriginalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unusedCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalOriginalTaken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTick\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goldenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cooldownAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cooldownTick\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vesting_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawOriginalToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawOriginalToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DeferredVestingPool","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000c1354b2554306e53446fdd86f328750b819bdb8100000000000000000000000022c07257cd2bc68ea119f8214412f7bbecd3b23d000000000000000000000000dc03fca6db7bf491bea8725d2b1034a19aeb2c4f000000000000000000000000c1354b2554306e53446fdd86f328750b819bdb81000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000469544e4d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000469544e4d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021af5b6fa5ed000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec700000000000000000000000000000000000000000000000000000000000186a0000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000000186a00000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000004fabb145d64652a948d72533023f6e7a623c7c53000000000000000000000000000000000000000000000000016345785d8a0000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://298bc7e01eaec0e77471549de7d7a5e6140b0c8e764448ca36c5b6bcf4a35fe1"}]}