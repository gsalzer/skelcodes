{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.11;\r\n\r\ncontract ERC20Interface {\r\n\tuint256 public totalSupply;\r\n\tfunction balanceOf(address _owner) public constant returns (uint balance); // Get the account balance of another account with address _owner\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool success); // Send _value amount of tokens to address _to\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success); // Send _value amount of tokens from address _from to address _to\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool success);\r\n\tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining); // Returns the amount which _spender is still allowed to withdraw from _owner\r\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value); // Triggered when tokens are transferred.\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value); // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\tfunction mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\tuint256 c = a * b;\r\n\t\tassert(a == 0 || c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n}\r\ncontract ERC20Token is ERC20Interface {\r\n\tusing SafeMath for uint256;\r\n\r\n\tmapping (address => uint) balances;\r\n\tmapping (address => mapping (address => uint256)) allowed;\r\n\r\n\tmodifier onlyPayloadSize(uint size) {\r\n\t\trequire(msg.data.length >= (size + 4));\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction () public{\r\n\t\trevert();\r\n\t}\r\n\r\n\tfunction balanceOf(address _owner) public constant returns (uint balance) {\r\n\t\treturn balances[_owner];\r\n\t}\r\n\tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n\r\n\tfunction transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) returns (bool success) {\r\n\t\t_transferFrom(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3 * 32) returns (bool) {\r\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\t\t_transferFrom(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\tfunction _transferFrom(address _from, address _to, uint256 _value) internal {\r\n\t\trequire(_value > 0);\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tTransfer(_from, _to, _value);\r\n\t}\r\n\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool) {\r\n\t\trequire((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\tApproval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\ncontract owned {\r\n\taddress public owner;\r\n\r\n\tfunction owned() public {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\tmodifier onlyOwner {\r\n\t\tif (msg.sender != owner) revert();\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction transferOwnership(address newOwner) public onlyOwner {\r\n\t\towner = newOwner;\r\n\t}\r\n}\r\n\r\n\r\ncontract ACAcoin is ERC20Token, owned{\r\n\tusing SafeMath for uint256;\r\n\r\n\tstring public name = 'ACAcoin';\r\n\tstring public symbol = 'ACA';\r\n\tuint8 public decimals = 18;\r\n\tuint256 public totalSupply = 150000000000000000000000000;\r\n\r\n\tfunction ACAcoin() public {\r\n\t\tbalances[this] = totalSupply;\r\n\t}\r\n\r\n\tfunction setTokens(address target, uint256 _value) public onlyOwner {\r\n\t\tbalances[this] = balances[this].sub(_value);\r\n\t\tbalances[target] = balances[target].add(_value);\r\n\t\tTransfer(this, target, _value);\r\n\t}\r\n\r\n\tfunction burnBalance(address target, uint256 _value) public onlyOwner {\r\n\t\ttotalSupply = totalSupply.sub(_value);\r\n\t\tbalances[target] = balances[target].sub(_value);\r\n\t\tTransfer(this, address(0), _value);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnBalance\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ACAcoin","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://91c3e3fe25d889aa531647696cd2cfaa87f93db9a30dfecb85d1fa6406ea629e"}]}