{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./contracts/UniqClaimingByAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract UniqClaimingByAdmin is Ownable {\\n    /// ----- VARIABLES ----- ///\\n\\n    /// Settings\\n\\n    /// @dev Claiming Price\\n    uint256 internal _standardClaimingPrice;\\n\\n    /// @dev Owner Changing price\\n    uint256 internal _standardOwnerChangingPrice;\\n\\n    /// @dev Verification price\\n    uint256 internal _standardPriceForVerification;\\n\\n    /// @dev address of ERC20 token\\n    address internal _ERC20tokenAddress;\\n\\n    /// NFT Contracts\\n\\n    /// @dev Contract Addresses Accepted By Uniqly\\n    mapping(address => bool) internal _acceptedContracts;\\n\\n    /// @dev Price for claiming in Native ERC20 token\\n    mapping(address => uint256) internal _pricesForClaiming;\\n\\n    /// @dev Change Onwer\\n    mapping(address => uint256) internal _pricesForOwnerChanging;\\n\\n    /// @dev isBurable\\n    mapping(address => bool) internal _isBurnable;\\n\\n    /// Token\\n\\n    /// @dev Returns true if token was claimed\\n    mapping(address => mapping(uint256 => bool)) internal _isTokenClaimed;\\n\\n    /// @dev Claimed ids of contract\\n    mapping(address => uint256[]) internal _claimedIds;\\n\\n    /// @dev Owners addresses Array\\n    mapping(address => mapping(uint256 => mapping(uint256 => address)))\\n        internal _ownersAddresses;\\n\\n    /// @dev Owners array count\\n    mapping(address => mapping(uint256 => uint256)) internal _ownersCount;\\n\\n    /// Name verification\\n\\n    /// @dev Nonce for verification\\n    mapping(uint256 => bool) internal _isNonceRedeemed;\\n\\n    /// @dev Addresses owners\\n    mapping(address => string) internal _addressesOwners;\\n\\n    /// @dev Is onwer verified\\n    mapping(address => bool) internal _isAddressesOwnerVerified;\\n\\n    /// ----- EVENTS ----- ///\\n\\n    event Claim(\\n        address indexed _contractAddress,\\n        address indexed _claimer,\\n        uint256 indexed _tokenId,\\n        string _claimersName\\n    );\\n\\n    event ChangeOwner(\\n        address indexed _contractAddress,\\n        uint256 indexed _id,\\n        address _newOwner,\\n        address indexed _prevOwner,\\n        string _newOwnersName\\n    );\\n\\n    event PayedForClaim(\\n        address indexed _claimer,\\n        address indexed _contractAddress,\\n        uint256 indexed _tokenId\\n    );\\n\\n    event RequestedVerification(address indexed _requester, string _name);\\n\\n    /// ----- VIEWS ----- ///\\n\\n    /// @notice Returns true if token was claimed\\n    function isTokenClaimed(address _address, uint256 _tokenId)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return _isTokenClaimed[_address][_tokenId];\\n    }\\n\\n    /// @notice Returns true for authorized contract addresses\\n    function isContractAuthorized(address _address)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return _acceptedContracts[_address];\\n    }\\n\\n    /// @notice Returns last owners address, name and verification status\\n    function getLastOwnerOf(address _address, uint256 _id)\\n        external\\n        view\\n        returns (\\n            address,\\n            string memory,\\n            bool\\n        )\\n    {\\n        uint256 len = _ownersCount[_address][_id] - 1;\\n        address ownerAddress = _ownersAddresses[_address][_id][len];\\n        return (\\n            ownerAddress,\\n            _addressesOwners[ownerAddress],\\n            _isAddressesOwnerVerified[ownerAddress]\\n        );\\n    }\\n\\n    /// @notice Returns true when nonce was redeemed\\n    function isNonceRedeemed(uint256 _nonce) external view returns (bool) {\\n        return _isNonceRedeemed[_nonce];\\n    }\\n\\n    /// @notice Returns owners count of token\\n    function getOwnersCountOfToken(address _address, uint256 _id)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return (_ownersCount[_address][_id]);\\n    }\\n\\n    /// @notice Returns owners name and verification status\\n    function getAddressOwnerInfo(address _address)\\n        external\\n        view\\n        returns (string memory, bool)\\n    {\\n        bytes memory bts = bytes(_addressesOwners[_address]);\\n        require(bts.length != 0, \\\"Address not used yet\\\");\\n        return (\\n            _addressesOwners[_address],\\n            _isAddressesOwnerVerified[_address]\\n        );\\n    }\\n\\n    /// @notice Returns address and name of token owner by position in array\\n    function getOwnerOfTokenByPosition(\\n        address _address,\\n        uint256 _id,\\n        uint256 _position\\n    ) external view returns (address, string memory) {\\n        address ownerAddress = _ownersAddresses[_address][_id][_position];\\n        return (ownerAddress, _addressesOwners[ownerAddress]);\\n    }\\n\\n    /// @notice Returns all token holders names\\n    function getAllTokenHoldersNamesHistory(address _address, uint256 _id)\\n        external\\n        view\\n        returns (string[] memory)\\n    {\\n        uint256 len = _ownersCount[_address][_id];\\n        if (len == 0) {\\n            return new string[](0);\\n        }\\n        string[] memory res = new string[](len);\\n        uint256 index;\\n        for (index = 0; index < len; index++) {\\n            res[index] = _addressesOwners[\\n                _ownersAddresses[_address][_id][index]\\n            ];\\n        }\\n        return res;\\n    }\\n\\n    /// @notice Returns all token holders addresses\\n    function getAllTokenHoldersAddressesHistory(address _address, uint256 _id)\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        uint256 len = _ownersCount[_address][_id];\\n        if (len == 0) {\\n            return new address[](0);\\n        }\\n        address[] memory res = new address[](len);\\n        uint256 index;\\n        for (index = 0; index < len; index++) {\\n            res[index] = _ownersAddresses[_address][_id][index];\\n        }\\n        return res;\\n    }\\n\\n    /// @notice Returns all claimed ids of selected collection\\n    function getClaimedIdsOfCollection(address _address)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256 len = _claimedIds[_address].length;\\n        if (len == 0) {\\n            return new uint256[](0);\\n        }\\n        uint256[] memory res = new uint256[](len);\\n        uint256 index;\\n        for (index = 0; index < len; index++) {\\n            res[index] = _claimedIds[_address][index];\\n        }\\n        return res;\\n    }\\n\\n    /// @notice Returns how many items of collection was claimed\\n    function getClaimedCountOf(address _address)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _claimedIds[_address].length;\\n    }\\n\\n    /// @notice Returns Claiming Standard price\\n    function getStandardClaimingPrice() external view returns (uint256) {\\n        return _standardClaimingPrice;\\n    }\\n\\n    /// @notice Returns Claiming Price For selected contract\\n    function getClaimingPriceForContract(address _address)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            _getCorrectPrice(\\n                _pricesForClaiming[_address],\\n                _standardClaimingPrice\\n            );\\n    }\\n\\n    /// @notice Returns Holders Change Rate For selected contract\\n    function getChangeOwnerPriceForContract(address _address)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            _getCorrectPrice(\\n                _pricesForOwnerChanging[_address],\\n                _standardOwnerChangingPrice\\n            );\\n    }\\n\\n    /// @notice Returns Standard Price For Verification\\n    function getPriceForVerification() external view returns (uint256) {\\n        return _standardPriceForVerification;\\n    }\\n\\n    /// @notice Returns true for burnable tokens in contract\\n    function isBurnable(address _address) external view returns (bool) {\\n        return _isBurnable[_address];\\n    }\\n\\n    /// @notice Returns sum of prices for verificagtion and claim\\n    function getPriceForMintAndVerify(address _contractAddress)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 claimingPrice = _getCorrectPrice(\\n            _pricesForClaiming[_contractAddress],\\n            _standardClaimingPrice\\n        );\\n        uint256 sumPrice = claimingPrice + _standardPriceForVerification;\\n        return sumPrice;\\n    }\\n\\n    /// ----- PUBLIC METHODS ----- ///\\n\\n    /// @notice Used for verification\\n    function getMessageHashForOwnerChange(\\n        address _address,\\n        string memory _claimersName,\\n        uint256 _nonce\\n    ) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_address, _claimersName, _nonce));\\n    }\\n\\n    /// @notice Pays For Claim\\n    function payForClaim(address _contractAddress, uint256 _tokenId) external {\\n        require(\\n            _acceptedContracts[_contractAddress],\\n            \\\"Contract address is not authorized\\\"\\n        );\\n        uint256 claimingPrice = _getCorrectPrice(\\n            _pricesForClaiming[_contractAddress],\\n            _standardClaimingPrice\\n        );\\n        if (claimingPrice != 0) {\\n            IERC20 nativeToken = IERC20(_ERC20tokenAddress);\\n            require(\\n                nativeToken.transferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    claimingPrice\\n                )\\n            );\\n        }\\n        emit PayedForClaim(msg.sender, _contractAddress, _tokenId);\\n    }\\n\\n    /// @notice Claim Function\\n    function claimByAdmin(\\n        address _contractAddress,\\n        uint256 _tokenId,\\n        string memory _claimersName,\\n        address _claimer,\\n        bool _isVerified\\n    ) external onlyOwner {\\n        require(\\n            _acceptedContracts[_contractAddress],\\n            \\\"Contract address is not authorized\\\"\\n        );\\n        require(\\n            !_isTokenClaimed[_contractAddress][_tokenId],\\n            \\\"Can't be claimed again\\\"\\n        );\\n        IERC721 token = IERC721(_contractAddress);\\n        require(\\n            token.ownerOf(_tokenId) == _claimer,\\n            \\\"Claimer needs to own this token\\\"\\n        );\\n\\n        if (_isBurnable[_contractAddress]) {\\n            IERC721Burnable(_contractAddress).burn(_tokenId);\\n        } else {\\n            token.transferFrom(_claimer, address(this), _tokenId);\\n        }\\n\\n        _isTokenClaimed[_contractAddress][_tokenId] = true;\\n        _claimedIds[_contractAddress].push(_tokenId);\\n        _ownersAddresses[_contractAddress][_tokenId][0] = _claimer;\\n\\n        if (!_isAddressesOwnerVerified[_claimer]) {\\n            _addressesOwners[_claimer] = _claimersName;\\n        }\\n\\n        _isAddressesOwnerVerified[_claimer] = _isVerified;\\n\\n        _ownersCount[_contractAddress][_tokenId]++;\\n        emit Claim(_contractAddress, _claimer, _tokenId, _claimersName);\\n    }\\n\\n    /// @notice Change Onwer\\n    function changeOwner(\\n        address _contractAddress,\\n        uint256 _tokenId,\\n        string memory _newOwnersName,\\n        address _newOwnerAddress\\n    ) external {\\n        require(_isTokenClaimed[_contractAddress][_tokenId], \\\"Not claimed yet\\\");\\n\\n        uint256 len = _ownersCount[_contractAddress][_tokenId];\\n        address ownerAddress = _ownersAddresses[_contractAddress][_tokenId][\\n            len - 1\\n        ];\\n\\n        require(ownerAddress == msg.sender, \\\"Not owner\\\");\\n\\n        uint256 changingPrice = _getCorrectPrice(\\n            _pricesForOwnerChanging[_contractAddress],\\n            _standardOwnerChangingPrice\\n        );\\n        if (changingPrice != 0) {\\n            IERC20 nativeToken = IERC20(_ERC20tokenAddress);\\n            require(\\n                nativeToken.transferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    changingPrice\\n                )\\n            );\\n        }\\n        _ownersAddresses[_contractAddress][_tokenId][len] = _newOwnerAddress;\\n\\n        if (!_isAddressesOwnerVerified[_newOwnerAddress]) {\\n            _addressesOwners[_newOwnerAddress] = _newOwnersName;\\n        }\\n\\n        _ownersCount[_contractAddress][_tokenId]++;\\n        emit ChangeOwner(\\n            _contractAddress,\\n            _tokenId,\\n            _newOwnerAddress,\\n            msg.sender,\\n            _newOwnersName\\n        );\\n    }\\n\\n    /// @notice Verify Owner\\n    function verifyOwner(\\n        string memory _claimersName,\\n        uint256 _nonce,\\n        bytes memory _signature\\n    ) external {\\n        require(\\n            verifySignForAuthOwner(\\n                msg.sender,\\n                _claimersName,\\n                _nonce,\\n                _signature\\n            ),\\n            \\\"Signature is not valid\\\"\\n        );\\n        // require(!_isAddressesOwnerVerified[msg.sender], \\\"Already verified\\\");\\n        require(!_isNonceRedeemed[_nonce], \\\"Nonce redeemed\\\");\\n        _addressesOwners[msg.sender] = _claimersName;\\n        _isAddressesOwnerVerified[msg.sender] = true;\\n        _isNonceRedeemed[_nonce] = true;\\n    }\\n\\n    /// @notice Takes a fee for verification\\n    function requestVerification(string memory _nameToVerify) external {\\n        IERC20 nativeToken = IERC20(_ERC20tokenAddress);\\n        require(\\n            nativeToken.transferFrom(\\n                msg.sender,\\n                address(this),\\n                _standardPriceForVerification\\n            )\\n        );\\n        require(\\n            !_isAddressesOwnerVerified[msg.sender],\\n            \\\"Address is already verified\\\"\\n        );\\n        _addressesOwners[msg.sender] = _nameToVerify;\\n        emit RequestedVerification(msg.sender, _nameToVerify);\\n    }\\n\\n    /// @notice Takes a fee for verification and pays for claim\\n    function payForClaimAndVerification(\\n        string memory _nameToVerify,\\n        address _contractAddress,\\n        uint256 _tokenId\\n    ) external {\\n        require(\\n            !_isAddressesOwnerVerified[msg.sender],\\n            \\\"Address is already verified\\\"\\n        );\\n        require(\\n            _acceptedContracts[_contractAddress],\\n            \\\"Contract address is not authorized\\\"\\n        );\\n        IERC20 nativeToken = IERC20(_ERC20tokenAddress);\\n\\n        uint256 claimingPrice = _getCorrectPrice(\\n            _pricesForClaiming[_contractAddress],\\n            _standardClaimingPrice\\n        );\\n        uint256 sumPrice = claimingPrice + _standardPriceForVerification;\\n\\n        if (sumPrice > 0) {\\n            require(\\n                nativeToken.transferFrom(msg.sender, address(this), sumPrice)\\n            );\\n        }\\n\\n        _addressesOwners[msg.sender] = _nameToVerify;\\n\\n        emit PayedForClaim(msg.sender, _contractAddress, _tokenId);\\n        emit RequestedVerification(msg.sender, _nameToVerify);\\n    }\\n\\n    /// ----- OWNER METHODS ----- ///\\n    constructor(\\n        uint256 _standardPriceForClaiming,\\n        uint256 _standardVerificationPrice,\\n        uint256 _standardPriceForOwnerChanging,\\n        address _nativeTokenAddress\\n    ) {\\n        _standardClaimingPrice = _standardPriceForClaiming;\\n        _standardPriceForVerification = _standardVerificationPrice;\\n        _standardOwnerChangingPrice = _standardPriceForOwnerChanging;\\n        _ERC20tokenAddress = _nativeTokenAddress;\\n    }\\n\\n    /// @notice Change verification price\\n    function setVerificationPrice(uint256 _newPrice) external onlyOwner {\\n        _standardPriceForVerification = _newPrice;\\n    }\\n\\n    /// @notice Verify owner by admin\\n    function verifyByAdmin(\\n        address _userAddress,\\n        string memory _newName,\\n        bool _isVerifyed\\n    ) external onlyOwner {\\n        _addressesOwners[_userAddress] = _newName;\\n        _isAddressesOwnerVerified[_userAddress] = _isVerifyed;\\n    }\\n\\n    /// @notice Change erc20 token using for payments\\n    function setErc20Token(address _contractAddress) external onlyOwner {\\n        _ERC20tokenAddress = _contractAddress;\\n    }\\n\\n    /// @notice Contract settings\\n    /// @param _claimingPrice Set to 1 if you want to use Standard Claiming Price\\n    /// @param _changeOwnerPrice Set to 1 if you want to use Stanrad Owner Changing Price\\n    function setContractAtributes(\\n        address _address,\\n        bool _enable,\\n        uint256 _claimingPrice,\\n        uint256 _changeOwnerPrice,\\n        bool _isBurnble\\n    ) external onlyOwner {\\n        _acceptedContracts[_address] = _enable;\\n        _pricesForClaiming[_address] = _claimingPrice;\\n        _pricesForOwnerChanging[_address] = _changeOwnerPrice;\\n        _isBurnable[_address] = _isBurnble;\\n    }\\n\\n    /// @notice Edit standard price for claiming\\n    function editStandardClaimingPrice(uint256 _price) external onlyOwner {\\n        _standardClaimingPrice = _price;\\n    }\\n\\n    /// @notice Edit standard price for claiming\\n    function editStandardChangeOwnerPrice(uint256 _price) external onlyOwner {\\n        _standardOwnerChangingPrice = _price;\\n    }\\n\\n    /// @notice Withdraw/rescue erc20 tokens to owners address\\n    function withdrawERC20(address _address) external onlyOwner {\\n        uint256 val = IERC20(_address).balanceOf(address(this));\\n        Ierc20(_address).transfer(msg.sender, val);\\n    }\\n\\n    /// @notice Owner change by admin\\n    function changeOwnerByAdmin(\\n        address _address,\\n        uint256 _id,\\n        address _newOwnerAddress,\\n        string memory _newOwnersName,\\n        bool _verificationStatus\\n    ) external onlyOwner {\\n        require(_isTokenClaimed[_address][_id], \\\"Not claimed yet\\\");\\n        uint256 len = _ownersCount[_address][_id];\\n        _ownersAddresses[_address][_id][len] = _newOwnerAddress;\\n        _addressesOwners[_newOwnerAddress] = _newOwnersName;\\n        _isAddressesOwnerVerified[_newOwnerAddress] = _verificationStatus;\\n        emit ChangeOwner(\\n            _address,\\n            _id,\\n            _newOwnerAddress,\\n            address(0),\\n            _newOwnersName\\n        );\\n    }\\n\\n    /// ----- PRIVATE METHODS ----- ///\\n\\n    /// @dev Return second argument when first equals 1\\n    function _getCorrectPrice(uint256 _priceForContract, uint256 _standardPrice)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (_priceForContract == 1) {\\n            return _standardPrice;\\n        } else return _priceForContract;\\n    }\\n\\n    function getEthSignedMessageHash(bytes32 _messageHash)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    _messageHash\\n                )\\n            );\\n    }\\n\\n    function verifySignForAuthOwner(\\n        address _address,\\n        string memory _claimersName,\\n        uint256 _nonce,\\n        bytes memory _signature\\n    ) internal view returns (bool) {\\n        bytes32 messageHash = getMessageHashForOwnerChange(\\n            _address,\\n            _claimersName,\\n            _nonce\\n        );\\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\\n        return recoverSigner(ethSignedMessageHash, _signature) == owner();\\n    }\\n\\n    function recoverSigner(\\n        bytes32 _ethSignedMessageHash,\\n        bytes memory _signature\\n    ) internal pure returns (address) {\\n        require(_signature.length == 65, \\\"invalid signature length\\\");\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            r := mload(add(_signature, 32))\\n            s := mload(add(_signature, 64))\\n            v := byte(0, mload(add(_signature, 96)))\\n        }\\n        return ecrecover(_ethSignedMessageHash, v, r, s);\\n    }\\n}\\n\\ninterface Ierc20 {\\n    function transfer(address, uint256) external;\\n}\\n\\ninterface IERC721Burnable {\\n    function burn(uint256) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_standardPriceForClaiming\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_standardVerificationPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_standardPriceForOwnerChanging\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nativeTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_newOwnersName\",\"type\":\"string\"}],\"name\":\"ChangeOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_claimersName\",\"type\":\"string\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"PayedForClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"RequestedVerification\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_newOwnersName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_newOwnerAddress\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newOwnerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_newOwnersName\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_verificationStatus\",\"type\":\"bool\"}],\"name\":\"changeOwnerByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_claimersName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isVerified\",\"type\":\"bool\"}],\"name\":\"claimByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"editStandardChangeOwnerPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"editStandardClaimingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getAddressOwnerInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getAllTokenHoldersAddressesHistory\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getAllTokenHoldersNamesHistory\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getChangeOwnerPriceForContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getClaimedCountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getClaimedIdsOfCollection\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getClaimingPriceForContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getLastOwnerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_claimersName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"getMessageHashForOwnerChange\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_position\",\"type\":\"uint256\"}],\"name\":\"getOwnerOfTokenByPosition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getOwnersCountOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"getPriceForMintAndVerify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceForVerification\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStandardClaimingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isBurnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isContractAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"isNonceRedeemed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isTokenClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"payForClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_nameToVerify\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"payForClaimAndVerification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_nameToVerify\",\"type\":\"string\"}],\"name\":\"requestVerification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_claimingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_changeOwnerPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isBurnble\",\"type\":\"bool\"}],\"name\":\"setContractAtributes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setErc20Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setVerificationPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_newName\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isVerifyed\",\"type\":\"bool\"}],\"name\":\"verifyByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_claimersName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"verifyOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UniqClaimingByAdmin","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000002b5e3af16b1880000000000000000000000000000000000000000000000000003cb71f51fc558000000000000000000000000000000000000000000000000021e19e0c9bab24000000000000000000000000000003758e00b100876c854636ef8db61988931bb8025","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c2bd0ef0e51cd01a57ba2b46c78ac0d8674a586685d14cb4307930422f32ce3c"}]}