{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/mainnet/DepositBoxes/DepositBoxERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/**\\n *   DepositBoxERC721.sol - SKALE Interchain Messaging Agent\\n *   Copyright (C) 2021-Present SKALE Labs\\n *   @author Artem Payvin\\n *\\n *   SKALE IMA is free software: you can redistribute it and/or modify\\n *   it under the terms of the GNU Affero General Public License as published\\n *   by the Free Software Foundation, either version 3 of the License, or\\n *   (at your option) any later version.\\n *\\n *   SKALE IMA is distributed in the hope that it will be useful,\\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *   GNU Affero General Public License for more details.\\n *\\n *   You should have received a copy of the GNU Affero General Public License\\n *   along with SKALE IMA.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\nimport \\\"../DepositBox.sol\\\";\\nimport \\\"../../Messages.sol\\\";\\n\\n\\n// This contract runs on the main net and accepts deposits\\ncontract DepositBoxERC721 is DepositBox {\\n    using AddressUpgradeable for address;\\n\\n    // schainHash => address of ERC on Mainnet\\n    mapping(bytes32 => mapping(address => bool)) public schainToERC721;\\n    mapping(address => mapping(uint256 => bytes32)) public transferredAmount;\\n\\n    /**\\n     * @dev Emitted when token is mapped in LockAndDataForMainnetERC721.\\n     */\\n    event ERC721TokenAdded(string schainName, address indexed contractOnMainnet);\\n    event ERC721TokenReady(address indexed contractOnMainnet, uint256 tokenId);\\n\\n    function depositERC721(\\n        string calldata schainName,\\n        address erc721OnMainnet,\\n        address to,\\n        uint256 tokenId\\n    )\\n        external\\n        rightTransaction(schainName, to)\\n        whenNotKilled(keccak256(abi.encodePacked(schainName)))\\n    {\\n        bytes32 schainHash = keccak256(abi.encodePacked(schainName));\\n        address contractReceiver = schainLinks[schainHash];\\n        require(contractReceiver != address(0), \\\"Unconnected chain\\\");\\n        require(\\n            IERC721Upgradeable(erc721OnMainnet).getApproved(tokenId) == address(this),\\n            \\\"DepositBox was not approved for ERC721 token\\\"\\n        );\\n        bytes memory data = _receiveERC721(\\n            schainName,\\n            erc721OnMainnet,\\n            to,\\n            tokenId\\n        );\\n        if (!linker.interchainConnections(schainHash))\\n            _saveTransferredAmount(schainHash, erc721OnMainnet, tokenId);\\n        IERC721Upgradeable(erc721OnMainnet).transferFrom(msg.sender, address(this), tokenId);\\n        messageProxy.postOutgoingMessage(\\n            schainHash,\\n            contractReceiver,\\n            data\\n        );\\n    }\\n\\n    function postMessage(\\n        bytes32 schainHash,\\n        address sender,\\n        bytes calldata data\\n    )\\n        external\\n        override\\n        onlyMessageProxy\\n        whenNotKilled(schainHash)\\n        checkReceiverChain(schainHash, sender)\\n        returns (address)\\n    {\\n        Messages.TransferErc721Message memory message = Messages.decodeTransferErc721Message(data);\\n        require(message.token.isContract(), \\\"Given address is not a contract\\\");\\n        require(IERC721Upgradeable(message.token).ownerOf(message.tokenId) == address(this), \\\"Incorrect tokenId\\\");\\n        if (!linker.interchainConnections(schainHash))\\n            _removeTransferredAmount(message.token, message.tokenId);\\n        IERC721Upgradeable(message.token).transferFrom(address(this), message.receiver, message.tokenId);\\n        return message.receiver;\\n    }\\n\\n    /**\\n     * @dev Allows Schain owner to add an ERC721 token to LockAndDataForMainnetERC20.\\n     */\\n    function addERC721TokenByOwner(string calldata schainName, address erc721OnMainnet)\\n        external\\n        onlySchainOwner(schainName)\\n        whenNotKilled(keccak256(abi.encodePacked(schainName)))\\n    {\\n        _addERC721ForSchain(schainName, erc721OnMainnet);\\n    }\\n\\n    function getFunds(string calldata schainName, address erc721OnMainnet, address receiver, uint tokenId)\\n        external\\n        onlySchainOwner(schainName)\\n        whenKilled(keccak256(abi.encodePacked(schainName)))\\n    {\\n        bytes32 schainHash = keccak256(abi.encodePacked(schainName));\\n        require(transferredAmount[erc721OnMainnet][tokenId] == schainHash, \\\"Incorrect tokenId\\\");\\n        _removeTransferredAmount(erc721OnMainnet, tokenId);\\n        IERC721Upgradeable(erc721OnMainnet).transferFrom(address(this), receiver, tokenId);\\n    }\\n\\n    /**\\n     * @dev Should return true if token in whitelist.\\n     */\\n    function getSchainToERC721(string calldata schainName, address erc721OnMainnet) external view returns (bool) {\\n        return schainToERC721[keccak256(abi.encodePacked(schainName))][erc721OnMainnet];\\n    }\\n\\n    /// Create a new deposit box\\n    function initialize(\\n        IContractManager contractManagerOfSkaleManagerValue,        \\n        Linker linkerValue,\\n        MessageProxyForMainnet messageProxyValue\\n    )\\n        public\\n        override\\n        initializer\\n    {\\n        DepositBox.initialize(contractManagerOfSkaleManagerValue, linkerValue, messageProxyValue);\\n    }\\n\\n    function _saveTransferredAmount(bytes32 schainHash, address erc721Token, uint256 tokenId) private {\\n        transferredAmount[erc721Token][tokenId] = schainHash;\\n    }\\n\\n    function _removeTransferredAmount(address erc721Token, uint256 tokenId) private {\\n        transferredAmount[erc721Token][tokenId] = bytes32(0);\\n    }\\n\\n    /**\\n     * @dev Allows DepositBox to receive ERC721 tokens.\\n     * \\n     * Emits an {ERC721TokenAdded} event.  \\n     */\\n    function _receiveERC721(\\n        string calldata schainName,\\n        address erc721OnMainnet,\\n        address to,\\n        uint256 tokenId\\n    )\\n        private\\n        returns (bytes memory data)\\n    {\\n        bytes32 schainHash = keccak256(abi.encodePacked(schainName));\\n        bool isERC721AddedToSchain = schainToERC721[schainHash][erc721OnMainnet];\\n        if (!isERC721AddedToSchain) {\\n            require(!isWhitelisted(schainName), \\\"Whitelist is enabled\\\");\\n            _addERC721ForSchain(schainName, erc721OnMainnet);\\n            data = Messages.encodeTransferErc721AndTokenInfoMessage(\\n                erc721OnMainnet,\\n                to,\\n                tokenId,\\n                _getTokenInfo(IERC721MetadataUpgradeable(erc721OnMainnet))\\n            );\\n        } else {\\n            data = Messages.encodeTransferErc721Message(erc721OnMainnet, to, tokenId);\\n        }\\n        emit ERC721TokenReady(erc721OnMainnet, tokenId);\\n    }\\n\\n    /**\\n     * @dev Allows ERC721ModuleForMainnet to add an ERC721 token to\\n     * LockAndDataForMainnetERC721.\\n     */\\n    function _addERC721ForSchain(string calldata schainName, address erc721OnMainnet) private {\\n        bytes32 schainHash = keccak256(abi.encodePacked(schainName));\\n        require(erc721OnMainnet.isContract(), \\\"Given address is not a contract\\\");\\n        schainToERC721[schainHash][erc721OnMainnet] = true;\\n        emit ERC721TokenAdded(schainName, erc721OnMainnet);\\n    }\\n\\n    function _getTokenInfo(IERC721MetadataUpgradeable erc721) private view returns (Messages.Erc721TokenInfo memory) {\\n        return Messages.Erc721TokenInfo({\\n            name: erc721.name(),\\n            symbol: erc721.symbol()\\n        });\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/DepositBox.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/**\\n *   DepositBox.sol - SKALE Interchain Messaging Agent\\n *   Copyright (C) 2021-Present SKALE Labs\\n *   @author Artem Payvin\\n *   @author Dmytro Stebaiev\\n *\\n *   SKALE IMA is free software: you can redistribute it and/or modify\\n *   it under the terms of the GNU Affero General Public License as published\\n *   by the Free Software Foundation, either version 3 of the License, or\\n *   (at your option) any later version.\\n *\\n *   SKALE IMA is distributed in the hope that it will be useful,\\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *   GNU Affero General Public License for more details.\\n *\\n *   You should have received a copy of the GNU Affero General Public License\\n *   along with SKALE IMA.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"./Linker.sol\\\";\\nimport \\\"./MessageProxyForMainnet.sol\\\";\\n\\n\\n/**\\n * @title ProxyConnectorMainnet - connected module for Upgradeable approach, knows ContractManager\\n * @author Artem Payvin\\n */\\nabstract contract DepositBox is IMessageReceiver, Twin {\\n\\n    Linker public linker;\\n\\n    mapping(bytes32 => bool) private _automaticDeploy;\\n\\n    bytes32 public constant DEPOSIT_BOX_MANAGER_ROLE = keccak256(\\\"DEPOSIT_BOX_MANAGER_ROLE\\\");\\n\\n    modifier whenNotKilled(bytes32 schainHash) {\\n        require(linker.isNotKilled(schainHash), \\\"Schain is killed\\\");\\n        _;\\n    }\\n\\n    modifier whenKilled(bytes32 schainHash) {\\n        require(!linker.isNotKilled(schainHash), \\\"Schain is not killed\\\");\\n        _;\\n    }\\n\\n    modifier rightTransaction(string memory schainName, address to) {\\n        require(\\n            keccak256(abi.encodePacked(schainName)) != keccak256(abi.encodePacked(\\\"Mainnet\\\")),\\n            \\\"SKALE chain name cannot be Mainnet\\\"\\n        );\\n        require(to != address(0), \\\"Receiver address cannot be null\\\");\\n        _;\\n    }\\n\\n    modifier checkReceiverChain(bytes32 schainHash, address sender) {\\n        require(\\n            schainHash != keccak256(abi.encodePacked(\\\"Mainnet\\\")) &&\\n            sender == schainLinks[schainHash],\\n            \\\"Receiver chain is incorrect\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows Schain owner turn on whitelist of tokens.\\n     */\\n    function enableWhitelist(string memory schainName) external onlySchainOwner(schainName) {\\n        _automaticDeploy[keccak256(abi.encodePacked(schainName))] = false;\\n    }\\n\\n    /**\\n     * @dev Allows Schain owner turn off whitelist of tokens.\\n     */\\n    function disableWhitelist(string memory schainName) external onlySchainOwner(schainName) {\\n        _automaticDeploy[keccak256(abi.encodePacked(schainName))] = true;\\n    }\\n\\n    function initialize(\\n        IContractManager contractManagerOfSkaleManagerValue,\\n        Linker newLinker,\\n        MessageProxyForMainnet messageProxyValue\\n    )\\n        public\\n        virtual\\n        initializer\\n    {\\n        Twin.initialize(contractManagerOfSkaleManagerValue, messageProxyValue);\\n        _setupRole(LINKER_ROLE, address(newLinker));\\n        linker = newLinker;\\n    }\\n\\n    /**\\n     * @dev Returns is whitelist enabled on schain\\n     */\\n    function isWhitelisted(string memory schainName) public view returns (bool) {\\n        return !_automaticDeploy[keccak256(abi.encodePacked(schainName))];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Messages.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/**\\n *   Messages.sol - SKALE Interchain Messaging Agent\\n *   Copyright (C) 2021-Present SKALE Labs\\n *   @author Dmytro Stebaeiv\\n *\\n *   SKALE IMA is free software: you can redistribute it and/or modify\\n *   it under the terms of the GNU Affero General Public License as published\\n *   by the Free Software Foundation, either version 3 of the License, or\\n *   (at your option) any later version.\\n *\\n *   SKALE IMA is distributed in the hope that it will be useful,\\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *   GNU Affero General Public License for more details.\\n *\\n *   You should have received a copy of the GNU Affero General Public License\\n *   along with SKALE IMA.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.6;\\n\\n\\nlibrary Messages {\\n    enum MessageType {\\n        EMPTY,\\n        TRANSFER_ETH,\\n        TRANSFER_ERC20,\\n        TRANSFER_ERC20_AND_TOTAL_SUPPLY,\\n        TRANSFER_ERC20_AND_TOKEN_INFO,\\n        TRANSFER_ERC721,\\n        TRANSFER_ERC721_AND_TOKEN_INFO,\\n        USER_STATUS,\\n        INTERCHAIN_CONNECTION,\\n        TRANSFER_ERC1155,\\n        TRANSFER_ERC1155_AND_TOKEN_INFO,\\n        TRANSFER_ERC1155_BATCH,\\n        TRANSFER_ERC1155_BATCH_AND_TOKEN_INFO\\n    }\\n\\n    struct BaseMessage {\\n        MessageType messageType;\\n    }\\n\\n    struct TransferEthMessage {\\n        BaseMessage message;\\n        address receiver;\\n        uint256 amount;\\n    }\\n\\n    struct UserStatusMessage {\\n        BaseMessage message;\\n        address receiver;\\n        bool isActive;\\n    }\\n\\n    struct TransferErc20Message {\\n        BaseMessage message;\\n        address token;\\n        address receiver;\\n        uint256 amount;\\n    }\\n\\n    struct Erc20TokenInfo {\\n        string name;\\n        uint8 decimals;\\n        string symbol;\\n    }\\n\\n    struct TransferErc20AndTotalSupplyMessage {\\n        TransferErc20Message baseErc20transfer;\\n        uint256 totalSupply;\\n    }\\n\\n    struct TransferErc20AndTokenInfoMessage {\\n        TransferErc20Message baseErc20transfer;\\n        uint256 totalSupply;\\n        Erc20TokenInfo tokenInfo;\\n    }\\n\\n    struct TransferErc721Message {\\n        BaseMessage message;\\n        address token;\\n        address receiver;\\n        uint256 tokenId;\\n    }\\n\\n    struct Erc721TokenInfo {\\n        string name;\\n        string symbol;\\n    }\\n\\n    struct TransferErc721AndTokenInfoMessage {\\n        TransferErc721Message baseErc721transfer;\\n        Erc721TokenInfo tokenInfo;\\n    }\\n\\n    struct InterchainConnectionMessage {\\n        BaseMessage message;\\n        bool isAllowed;\\n    }\\n\\n    struct TransferErc1155Message {\\n        BaseMessage message;\\n        address token;\\n        address receiver;\\n        uint256 id;\\n        uint256 amount;\\n    }\\n\\n    struct TransferErc1155BatchMessage {\\n        BaseMessage message;\\n        address token;\\n        address receiver;\\n        uint256[] ids;\\n        uint256[] amounts;\\n    }\\n\\n    struct Erc1155TokenInfo {\\n        string uri;\\n    }\\n\\n    struct TransferErc1155AndTokenInfoMessage {\\n        TransferErc1155Message baseErc1155transfer;\\n        Erc1155TokenInfo tokenInfo;\\n    }\\n\\n    struct TransferErc1155BatchAndTokenInfoMessage {\\n        TransferErc1155BatchMessage baseErc1155Batchtransfer;\\n        Erc1155TokenInfo tokenInfo;\\n    }\\n\\n    function getMessageType(bytes calldata data) internal pure returns (MessageType) {\\n        uint256 firstWord = abi.decode(data, (uint256));\\n        if (firstWord % 32 == 0) {\\n            return getMessageType(data[firstWord:]);\\n        } else {\\n            return abi.decode(data, (Messages.MessageType));\\n        }\\n    }\\n\\n    function encodeTransferEthMessage(address receiver, uint256 amount) internal pure returns (bytes memory) {\\n        TransferEthMessage memory message = TransferEthMessage(\\n            BaseMessage(MessageType.TRANSFER_ETH),\\n            receiver,\\n            amount\\n        );\\n        return abi.encode(message);\\n    }\\n\\n    function decodeTransferEthMessage(\\n        bytes calldata data\\n    ) internal pure returns (TransferEthMessage memory) {\\n        require(getMessageType(data) == MessageType.TRANSFER_ETH, \\\"Message type is not ETH transfer\\\");\\n        return abi.decode(data, (TransferEthMessage));\\n    }\\n\\n    function encodeTransferErc20Message(\\n        address token,\\n        address receiver,\\n        uint256 amount\\n    ) internal pure returns (bytes memory) {\\n        TransferErc20Message memory message = TransferErc20Message(\\n            BaseMessage(MessageType.TRANSFER_ERC20),\\n            token,\\n            receiver,\\n            amount\\n        );\\n        return abi.encode(message);\\n    }\\n\\n    function encodeTransferErc20AndTotalSupplyMessage(\\n        address token,\\n        address receiver,\\n        uint256 amount,\\n        uint256 totalSupply\\n    ) internal pure returns (bytes memory) {\\n        TransferErc20AndTotalSupplyMessage memory message = TransferErc20AndTotalSupplyMessage(\\n            TransferErc20Message(\\n                BaseMessage(MessageType.TRANSFER_ERC20_AND_TOTAL_SUPPLY),\\n                token,\\n                receiver,\\n                amount\\n            ),\\n            totalSupply\\n        );\\n        return abi.encode(message);\\n    }\\n\\n    function decodeTransferErc20Message(\\n        bytes calldata data\\n    ) internal pure returns (TransferErc20Message memory) {\\n        require(getMessageType(data) == MessageType.TRANSFER_ERC20, \\\"Message type is not ERC20 transfer\\\");\\n        return abi.decode(data, (TransferErc20Message));\\n    }\\n\\n    function decodeTransferErc20AndTotalSupplyMessage(\\n        bytes calldata data\\n    ) internal pure returns (TransferErc20AndTotalSupplyMessage memory) {\\n        require(\\n            getMessageType(data) == MessageType.TRANSFER_ERC20_AND_TOTAL_SUPPLY,\\n            \\\"Message type is not ERC20 transfer and total supply\\\"\\n        );\\n        return abi.decode(data, (TransferErc20AndTotalSupplyMessage));\\n    }\\n\\n    function encodeTransferErc20AndTokenInfoMessage(\\n        address token,\\n        address receiver,\\n        uint256 amount,\\n        uint256 totalSupply,\\n        Erc20TokenInfo memory tokenInfo\\n    ) internal pure returns (bytes memory) {\\n        TransferErc20AndTokenInfoMessage memory message = TransferErc20AndTokenInfoMessage(\\n            TransferErc20Message(\\n                BaseMessage(MessageType.TRANSFER_ERC20_AND_TOKEN_INFO),\\n                token,\\n                receiver,\\n                amount\\n            ),\\n            totalSupply,\\n            tokenInfo\\n        );\\n        return abi.encode(message);\\n    }\\n\\n    function decodeTransferErc20AndTokenInfoMessage(\\n        bytes calldata data\\n    ) internal pure returns (TransferErc20AndTokenInfoMessage memory) {\\n        require(\\n            getMessageType(data) == MessageType.TRANSFER_ERC20_AND_TOKEN_INFO,\\n            \\\"Message type is not ERC20 transfer with token info\\\"\\n        );\\n        return abi.decode(data, (TransferErc20AndTokenInfoMessage));\\n    }\\n\\n    function encodeTransferErc721Message(\\n        address token,\\n        address receiver,\\n        uint256 tokenId\\n    ) internal pure returns (bytes memory) {\\n        TransferErc721Message memory message = TransferErc721Message(\\n            BaseMessage(MessageType.TRANSFER_ERC721),\\n            token,\\n            receiver,\\n            tokenId\\n        );\\n        return abi.encode(message);\\n    }\\n\\n    function decodeTransferErc721Message(\\n        bytes calldata data\\n    ) internal pure returns (TransferErc721Message memory) {\\n        require(getMessageType(data) == MessageType.TRANSFER_ERC721, \\\"Message type is not ERC721 transfer\\\");\\n        return abi.decode(data, (TransferErc721Message));\\n    }\\n\\n    function encodeTransferErc721AndTokenInfoMessage(\\n        address token,\\n        address receiver,\\n        uint256 tokenId,\\n        Erc721TokenInfo memory tokenInfo\\n    ) internal pure returns (bytes memory) {\\n        TransferErc721AndTokenInfoMessage memory message = TransferErc721AndTokenInfoMessage(\\n            TransferErc721Message(\\n                BaseMessage(MessageType.TRANSFER_ERC721_AND_TOKEN_INFO),\\n                token,\\n                receiver,\\n                tokenId\\n            ),\\n            tokenInfo\\n        );\\n        return abi.encode(message);\\n    }\\n\\n    function decodeTransferErc721AndTokenInfoMessage(\\n        bytes calldata data\\n    ) internal pure returns (TransferErc721AndTokenInfoMessage memory) {\\n        require(\\n            getMessageType(data) == MessageType.TRANSFER_ERC721_AND_TOKEN_INFO,\\n            \\\"Message type is not ERC721 transfer with token info\\\"\\n        );\\n        return abi.decode(data, (TransferErc721AndTokenInfoMessage));\\n    }\\n\\n    function encodeActivateUserMessage(address receiver) internal pure returns (bytes memory){\\n        return _encodeUserStatusMessage(receiver, true);\\n    }\\n\\n    function encodeLockUserMessage(address receiver) internal pure returns (bytes memory){\\n        return _encodeUserStatusMessage(receiver, false);\\n    }\\n\\n    function decodeUserStatusMessage(bytes calldata data) internal pure returns (UserStatusMessage memory) {\\n        require(getMessageType(data) == MessageType.USER_STATUS, \\\"Message type is not User Status\\\");\\n        return abi.decode(data, (UserStatusMessage));\\n    }\\n\\n    function encodeInterchainConnectionMessage(bool isAllowed) internal pure returns (bytes memory) {\\n        InterchainConnectionMessage memory message = InterchainConnectionMessage(\\n            BaseMessage(MessageType.INTERCHAIN_CONNECTION),\\n            isAllowed\\n        );\\n        return abi.encode(message);\\n    }\\n\\n    function decodeInterchainConnectionMessage(bytes calldata data)\\n        internal\\n        pure\\n        returns (InterchainConnectionMessage memory)\\n    {\\n        require(getMessageType(data) == MessageType.INTERCHAIN_CONNECTION, \\\"Message type is not Interchain connection\\\");\\n        return abi.decode(data, (InterchainConnectionMessage));\\n    }\\n\\n    function encodeTransferErc1155Message(\\n        address token,\\n        address receiver,\\n        uint256 id,\\n        uint256 amount\\n    ) internal pure returns (bytes memory) {\\n        TransferErc1155Message memory message = TransferErc1155Message(\\n            BaseMessage(MessageType.TRANSFER_ERC1155),\\n            token,\\n            receiver,\\n            id,\\n            amount\\n        );\\n        return abi.encode(message);\\n    }\\n\\n    function decodeTransferErc1155Message(\\n        bytes calldata data\\n    ) internal pure returns (TransferErc1155Message memory) {\\n        require(getMessageType(data) == MessageType.TRANSFER_ERC1155, \\\"Message type is not ERC1155 transfer\\\");\\n        return abi.decode(data, (TransferErc1155Message));\\n    }\\n\\n    function encodeTransferErc1155AndTokenInfoMessage(\\n        address token,\\n        address receiver,\\n        uint256 id,\\n        uint256 amount,\\n        Erc1155TokenInfo memory tokenInfo\\n    ) internal pure returns (bytes memory) {\\n        TransferErc1155AndTokenInfoMessage memory message = TransferErc1155AndTokenInfoMessage(\\n            TransferErc1155Message(\\n                BaseMessage(MessageType.TRANSFER_ERC1155_AND_TOKEN_INFO),\\n                token,\\n                receiver,\\n                id,\\n                amount\\n            ),\\n            tokenInfo\\n        );\\n        return abi.encode(message);\\n    }\\n\\n    function decodeTransferErc1155AndTokenInfoMessage(\\n        bytes calldata data\\n    ) internal pure returns (TransferErc1155AndTokenInfoMessage memory) {\\n        require(\\n            getMessageType(data) == MessageType.TRANSFER_ERC1155_AND_TOKEN_INFO,\\n            \\\"Message type is not ERC1155AndTokenInfo transfer\\\"\\n        );\\n        return abi.decode(data, (TransferErc1155AndTokenInfoMessage));\\n    }\\n\\n    function encodeTransferErc1155BatchMessage(\\n        address token,\\n        address receiver,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal pure returns (bytes memory) {\\n        TransferErc1155BatchMessage memory message = TransferErc1155BatchMessage(\\n            BaseMessage(MessageType.TRANSFER_ERC1155_BATCH),\\n            token,\\n            receiver,\\n            ids,\\n            amounts\\n        );\\n        return abi.encode(message);\\n    }\\n\\n    function decodeTransferErc1155BatchMessage(\\n        bytes calldata data\\n    ) internal pure returns (TransferErc1155BatchMessage memory) {\\n        require(\\n            getMessageType(data) == MessageType.TRANSFER_ERC1155_BATCH,\\n            \\\"Message type is not ERC1155Batch transfer\\\"\\n        );\\n        return abi.decode(data, (TransferErc1155BatchMessage));\\n    }\\n\\n    function encodeTransferErc1155BatchAndTokenInfoMessage(\\n        address token,\\n        address receiver,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        Erc1155TokenInfo memory tokenInfo\\n    ) internal pure returns (bytes memory) {\\n        TransferErc1155BatchAndTokenInfoMessage memory message = TransferErc1155BatchAndTokenInfoMessage(\\n            TransferErc1155BatchMessage(\\n                BaseMessage(MessageType.TRANSFER_ERC1155_BATCH_AND_TOKEN_INFO),\\n                token,\\n                receiver,\\n                ids,\\n                amounts\\n            ),\\n            tokenInfo\\n        );\\n        return abi.encode(message);\\n    }\\n\\n    function decodeTransferErc1155BatchAndTokenInfoMessage(\\n        bytes calldata data\\n    ) internal pure returns (TransferErc1155BatchAndTokenInfoMessage memory) {\\n        require(\\n            getMessageType(data) == MessageType.TRANSFER_ERC1155_BATCH_AND_TOKEN_INFO,\\n            \\\"Message type is not ERC1155BatchAndTokenInfo transfer\\\"\\n        );\\n        return abi.decode(data, (TransferErc1155BatchAndTokenInfoMessage));\\n    }\\n\\n    function _encodeUserStatusMessage(address receiver, bool isActive) private pure returns (bytes memory) {\\n        UserStatusMessage memory message = UserStatusMessage(\\n            BaseMessage(MessageType.USER_STATUS),\\n            receiver,\\n            isActive\\n        );\\n        return abi.encode(message);\\n    }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/Linker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/**\\n *   Linker.sol - SKALE Interchain Messaging Agent\\n *   Copyright (C) 2021-Present SKALE Labs\\n *   @author Artem Payvin\\n *\\n *   SKALE IMA is free software: you can redistribute it and/or modify\\n *   it under the terms of the GNU Affero General Public License as published\\n *   by the Free Software Foundation, either version 3 of the License, or\\n *   (at your option) any later version.\\n *\\n *   SKALE IMA is distributed in the hope that it will be useful,\\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *   GNU Affero General Public License for more details.\\n *\\n *   You should have received a copy of the GNU Affero General Public License\\n *   along with SKALE IMA.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\nimport \\\"../Messages.sol\\\";\\nimport \\\"./Twin.sol\\\";\\n\\nimport \\\"./MessageProxyForMainnet.sol\\\";\\n\\n\\n/**\\n * @title Linker For Mainnet\\n * @dev Runs on Mainnet, holds deposited ETH, and contains mappings and\\n * balances of ETH tokens received through DepositBox.\\n */\\ncontract Linker is Twin {\\n    using AddressUpgradeable for address;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    enum KillProcess {NotKilled, PartiallyKilledBySchainOwner, PartiallyKilledByContractOwner, Killed}\\n    EnumerableSetUpgradeable.AddressSet private _mainnetContracts;\\n\\n    mapping(bytes32 => bool) public interchainConnections;\\n    mapping(bytes32 => KillProcess) public statuses;\\n\\n    modifier onlyLinker() {\\n        require(hasRole(LINKER_ROLE, msg.sender), \\\"Linker role is required\\\");\\n        _;\\n    }\\n\\n    function registerMainnetContract(address newMainnetContract) external onlyLinker {\\n        require(_mainnetContracts.add(newMainnetContract), \\\"The contracts was not registered\\\");\\n    }\\n\\n    function removeMainnetContract(address mainnetContract) external onlyLinker {\\n        require(_mainnetContracts.remove(mainnetContract), \\\"The contract was not removed\\\");\\n    }\\n\\n    function connectSchain(string calldata schainName, address[] calldata schainContracts) external onlyLinker {\\n        require(schainContracts.length == _mainnetContracts.length(), \\\"Incorrect number of addresses\\\");\\n        for (uint i = 0; i < schainContracts.length; i++) {\\n            Twin(_mainnetContracts.at(i)).addSchainContract(schainName, schainContracts[i]);\\n        }\\n        messageProxy.addConnectedChain(schainName);\\n    }\\n\\n    function allowInterchainConnections(string calldata schainName) external onlySchainOwner(schainName) {\\n        bytes32 schainHash = keccak256(abi.encodePacked(schainName));\\n        require(statuses[schainHash] == KillProcess.NotKilled, \\\"Schain is in kill process\\\");\\n        interchainConnections[schainHash] = true;\\n        messageProxy.postOutgoingMessage(\\n            schainHash,\\n            schainLinks[schainHash],\\n            Messages.encodeInterchainConnectionMessage(true)\\n        );\\n    }\\n\\n    function kill(string calldata schainName) external {\\n        require(!interchainConnections[keccak256(abi.encodePacked(schainName))], \\\"Interchain connections turned on\\\");\\n        bytes32 schainHash = keccak256(abi.encodePacked(schainName));\\n        if (statuses[schainHash] == KillProcess.NotKilled) {\\n            if (hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) {\\n                statuses[schainHash] = KillProcess.PartiallyKilledByContractOwner;\\n            } else if (isSchainOwner(msg.sender, schainHash)) {\\n                statuses[schainHash] = KillProcess.PartiallyKilledBySchainOwner;\\n            } else {\\n                revert(\\\"Not allowed\\\");\\n            }\\n        } else if (\\n            (\\n                statuses[schainHash] == KillProcess.PartiallyKilledBySchainOwner &&\\n                hasRole(DEFAULT_ADMIN_ROLE, msg.sender)\\n            ) || (\\n                statuses[schainHash] == KillProcess.PartiallyKilledByContractOwner &&\\n                isSchainOwner(msg.sender, schainHash)\\n            )\\n        ) {\\n            statuses[schainHash] = KillProcess.Killed;\\n        } else {\\n            revert(\\\"Already killed or incorrect sender\\\");\\n        }\\n    }\\n\\n    function disconnectSchain(string calldata schainName) external onlyLinker {\\n        uint length = _mainnetContracts.length();\\n        for (uint i = 0; i < length; i++) {\\n            Twin(_mainnetContracts.at(i)).removeSchainContract(schainName);\\n        }\\n        messageProxy.removeConnectedChain(schainName);\\n    }\\n\\n    function isNotKilled(bytes32 schainHash) external view returns (bool) {\\n        return statuses[schainHash] != KillProcess.Killed;\\n    }\\n\\n    function hasMainnetContract(address mainnetContract) external view returns (bool) {\\n        return _mainnetContracts.contains(mainnetContract);\\n    }\\n\\n    function hasSchain(string calldata schainName) external view returns (bool connected) {\\n        uint length = _mainnetContracts.length();\\n        connected = messageProxy.isConnectedChain(schainName);\\n        for (uint i = 0; connected && i < length; i++) {\\n            connected = connected && Twin(_mainnetContracts.at(i)).hasSchainContract(schainName);\\n        }\\n    }\\n\\n    function initialize(\\n        IContractManager contractManagerOfSkaleManagerValue,\\n        MessageProxyForMainnet messageProxyValue\\n    )\\n        public\\n        override\\n        initializer\\n    {\\n        Twin.initialize(contractManagerOfSkaleManagerValue, messageProxyValue);\\n        _setupRole(LINKER_ROLE, msg.sender);\\n        _setupRole(LINKER_ROLE, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/MessageProxyForMainnet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/**\\n *   MessageProxyForMainnet.sol - SKALE Interchain Messaging Agent\\n *   Copyright (C) 2019-Present SKALE Labs\\n *   @author Artem Payvin\\n *\\n *   SKALE IMA is free software: you can redistribute it and/or modify\\n *   it under the terms of the GNU Affero General Public License as published\\n *   by the Free Software Foundation, either version 3 of the License, or\\n *   (at your option) any later version.\\n *\\n *   SKALE IMA is distributed in the hope that it will be useful,\\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *   GNU Affero General Public License for more details.\\n *\\n *   You should have received a copy of the GNU Affero General Public License\\n *   along with SKALE IMA.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/IWallets.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/ISchains.sol\\\";\\n\\nimport \\\"../interfaces/IMessageReceiver.sol\\\";\\nimport \\\"../MessageProxy.sol\\\";\\nimport \\\"./SkaleManagerClient.sol\\\";\\nimport \\\"./CommunityPool.sol\\\";\\n\\n\\n/**\\n * @title Message Proxy for Mainnet\\n * @dev Runs on Mainnet, contains functions to manage the incoming messages from\\n * `targetSchainName` and outgoing messages to `fromSchainName`. Every SKALE chain with \\n * IMA is therefore connected to MessageProxyForMainnet.\\n *\\n * Messages from SKALE chains are signed using BLS threshold signatures from the\\n * nodes in the chain. Since Ethereum Mainnet has no BLS public key, mainnet\\n * messages do not need to be signed.\\n */\\ncontract MessageProxyForMainnet is SkaleManagerClient, MessageProxy {\\n\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * 16 Agents\\n     * Synchronize time with time.nist.gov\\n     * Every agent checks if it is his time slot\\n     * Time slots are in increments of 10 seconds\\n     * At the start of his slot each agent:\\n     * For each connected schain:\\n     * Read incoming counter on the dst chain\\n     * Read outgoing counter on the src chain\\n     * Calculate the difference outgoing - incoming\\n     * Call postIncomingMessages function passing (un)signed message array\\n     * ID of this schain, Chain 0 represents ETH mainnet,\\n    */\\n\\n    CommunityPool public communityPool;\\n\\n    uint256 public headerMessageGasCost;\\n    uint256 public messageGasCost;\\n\\n    event GasCostMessageHeaderWasChanged(\\n        uint256 oldValue,\\n        uint256 newValue\\n    );\\n\\n    event GasCostMessageWasChanged(\\n        uint256 oldValue,\\n        uint256 newValue\\n    );\\n\\n    /**\\n     * @dev Allows LockAndData to add a `schainName`.\\n     * \\n     * Requirements:\\n     * \\n     * - `msg.sender` must be SKALE Node address.\\n     * - `schainName` must not be \\\"Mainnet\\\".\\n     * - `schainName` must not already be added.\\n     */\\n    function addConnectedChain(string calldata schainName) external override {\\n        bytes32 schainHash = keccak256(abi.encodePacked(schainName));\\n        require(schainHash != MAINNET_HASH, \\\"SKALE chain name is incorrect\\\");\\n        _addConnectedChain(schainHash);\\n    }\\n\\n    function setCommunityPool(CommunityPool newCommunityPoolAddress) external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Not authorized caller\\\");\\n        require(address(newCommunityPoolAddress) != address(0), \\\"CommunityPool address has to be set\\\");\\n        communityPool = newCommunityPoolAddress;\\n    }\\n\\n    function registerExtraContract(string memory schainName, address extraContract) external {\\n        bytes32 schainHash = keccak256(abi.encodePacked(schainName));\\n        require(\\n            hasRole(EXTRA_CONTRACT_REGISTRAR_ROLE, msg.sender) ||\\n            isSchainOwner(msg.sender, schainHash),\\n            \\\"Not enough permissions to register extra contract\\\"\\n        );\\n        require(schainHash != MAINNET_HASH, \\\"Schain hash can not be equal Mainnet\\\");        \\n        _registerExtraContract(schainHash, extraContract);\\n    }\\n\\n    function removeExtraContract(string memory schainName, address extraContract) external {\\n        bytes32 schainHash = keccak256(abi.encodePacked(schainName));\\n        require(\\n            hasRole(EXTRA_CONTRACT_REGISTRAR_ROLE, msg.sender) ||\\n            isSchainOwner(msg.sender, schainHash),\\n            \\\"Not enough permissions to register extra contract\\\"\\n        );\\n        require(schainHash != MAINNET_HASH, \\\"Schain hash can not be equal Mainnet\\\");\\n        _removeExtraContract(schainHash, extraContract);\\n    }\\n\\n    /**\\n     * @dev Posts incoming message from `fromSchainName`. \\n     * \\n     * Requirements:\\n     * \\n     * - `msg.sender` must be authorized caller.\\n     * - `fromSchainName` must be initialized.\\n     * - `startingCounter` must be equal to the chain's incoming message counter.\\n     * - If destination chain is Mainnet, message signature must be valid.\\n     */\\n    function postIncomingMessages(\\n        string calldata fromSchainName,\\n        uint256 startingCounter,\\n        Message[] calldata messages,\\n        Signature calldata sign\\n    )\\n        external\\n        override\\n    {\\n        uint256 gasTotal = gasleft();\\n        bytes32 fromSchainHash = keccak256(abi.encodePacked(fromSchainName));\\n        require(connectedChains[fromSchainHash].inited, \\\"Chain is not initialized\\\");\\n        require(messages.length <= MESSAGES_LENGTH, \\\"Too many messages\\\");\\n        require(\\n            startingCounter == connectedChains[fromSchainHash].incomingMessageCounter,\\n            \\\"Starting counter is not equal to incoming message counter\\\");\\n\\n        require(_verifyMessages(fromSchainName, _hashedArray(messages), sign), \\\"Signature is not verified\\\");\\n        uint additionalGasPerMessage = \\n            (gasTotal - gasleft() + headerMessageGasCost + messages.length * messageGasCost) / messages.length;\\n        for (uint256 i = 0; i < messages.length; i++) {\\n            gasTotal = gasleft();\\n            address receiver = _callReceiverContract(fromSchainHash, messages[i], startingCounter + i);\\n            if (receiver == address(0)) \\n                continue;\\n            communityPool.refundGasByUser(\\n                fromSchainHash,\\n                payable(msg.sender),\\n                receiver,\\n                gasTotal - gasleft() + additionalGasPerMessage\\n            );\\n        }\\n        connectedChains[fromSchainHash].incomingMessageCounter += messages.length;\\n    }\\n\\n    /**\\n     * @dev Sets headerMessageGasCost to a new value\\n     * \\n     * Requirements:\\n     * \\n     * - `msg.sender` must be granted as CONSTANT_SETTER_ROLE.\\n     */\\n    function setNewHeaderMessageGasCost(uint256 newHeaderMessageGasCost) external onlyConstantSetter {\\n        emit GasCostMessageHeaderWasChanged(headerMessageGasCost, newHeaderMessageGasCost);\\n        headerMessageGasCost = newHeaderMessageGasCost;\\n    }\\n\\n    /**\\n     * @dev Sets messageGasCost to a new value\\n     * \\n     * Requirements:\\n     * \\n     * - `msg.sender` must be granted as CONSTANT_SETTER_ROLE.\\n     */\\n    function setNewMessageGasCost(uint256 newMessageGasCost) external onlyConstantSetter {\\n        emit GasCostMessageWasChanged(messageGasCost, newMessageGasCost);\\n        messageGasCost = newMessageGasCost;\\n    }\\n\\n    \\n\\n    /**\\n     * @dev Checks whether chain is currently connected.\\n     * \\n     * Note: Mainnet chain does not have a public key, and is implicitly \\n     * connected to MessageProxy.\\n     * \\n     * Requirements:\\n     * \\n     * - `schainName` must not be Mainnet.\\n     */\\n    function isConnectedChain(\\n        string memory schainName\\n    )\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        require(keccak256(abi.encodePacked(schainName)) != MAINNET_HASH, \\\"Schain id can not be equal Mainnet\\\");\\n        return super.isConnectedChain(schainName);\\n    }\\n\\n    // Create a new message proxy\\n\\n    function initialize(IContractManager contractManagerOfSkaleManagerValue) public virtual override initializer {\\n        SkaleManagerClient.initialize(contractManagerOfSkaleManagerValue);\\n        MessageProxy.initializeMessageProxy(1e6);\\n        headerMessageGasCost = 70000;\\n        messageGasCost = 8790;\\n    }    \\n\\n    /**\\n     * @dev Converts calldata structure to memory structure and checks\\n     * whether message BLS signature is valid.\\n     */\\n    function _verifyMessages(\\n        string calldata fromSchainName,\\n        bytes32 hashedMessages,\\n        MessageProxyForMainnet.Signature calldata sign\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return ISchains(\\n            contractManagerOfSkaleManager.getContract(\\\"Schains\\\")\\n        ).verifySchainSignature(\\n            sign.blsSignature[0],\\n            sign.blsSignature[1],\\n            hashedMessages,\\n            sign.counter,\\n            sign.hashA,\\n            sign.hashB,\\n            fromSchainName\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/Twin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/**\\n *   Twin.sol - SKALE Interchain Messaging Agent\\n *   Copyright (C) 2021-Present SKALE Labs\\n *   @author Artem Payvin\\n *   @author Dmytro Stebaiev\\n *   @author Vadim Yavorsky\\n *\\n *   SKALE IMA is free software: you can redistribute it and/or modify\\n *   it under the terms of the GNU Affero General Public License as published\\n *   by the Free Software Foundation, either version 3 of the License, or\\n *   (at your option) any later version.\\n *\\n *   SKALE IMA is distributed in the hope that it will be useful,\\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *   GNU Affero General Public License for more details.\\n *\\n *   You should have received a copy of the GNU Affero General Public License\\n *   along with SKALE IMA.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"./MessageProxyForMainnet.sol\\\";\\nimport \\\"./SkaleManagerClient.sol\\\";\\n\\n\\nabstract contract Twin is SkaleManagerClient {\\n\\n    MessageProxyForMainnet public messageProxy;\\n    mapping(bytes32 => address) public schainLinks;\\n    bytes32 public constant LINKER_ROLE = keccak256(\\\"LINKER_ROLE\\\");\\n\\n\\n    modifier onlyMessageProxy() {\\n        require(msg.sender == address(messageProxy), \\\"Sender is not a MessageProxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Binds a contract on mainnet with his twin on schain\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be schain owner or has required role.\\n     * - SKALE chain must not already be added.\\n     * - Address of contract on schain must be non-zero.\\n     */\\n    function addSchainContract(string calldata schainName, address contractReceiver) external {\\n        bytes32 schainHash = keccak256(abi.encodePacked(schainName));\\n        require(\\n            hasRole(LINKER_ROLE, msg.sender) ||\\n            isSchainOwner(msg.sender, schainHash), \\\"Not authorized caller\\\"\\n        );\\n        require(schainLinks[schainHash] == address(0), \\\"SKALE chain is already set\\\");\\n        require(contractReceiver != address(0), \\\"Incorrect address of contract receiver on Schain\\\");\\n        schainLinks[schainHash] = contractReceiver;\\n    }\\n\\n    /**\\n     * @dev Removes connection with contract on schain\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be schain owner or has required role\\n     * - SKALE chain must already be set.\\n     */\\n    function removeSchainContract(string calldata schainName) external {\\n        bytes32 schainHash = keccak256(abi.encodePacked(schainName));\\n        require(\\n            hasRole(LINKER_ROLE, msg.sender) ||\\n            isSchainOwner(msg.sender, schainHash), \\\"Not authorized caller\\\"\\n        );\\n        require(schainLinks[schainHash] != address(0), \\\"SKALE chain is not set\\\");\\n        delete schainLinks[schainHash];\\n    }\\n\\n    function hasSchainContract(string calldata schainName) external view returns (bool) {\\n        return schainLinks[keccak256(abi.encodePacked(schainName))] != address(0);\\n    }\\n    \\n    function initialize(\\n        IContractManager contractManagerOfSkaleManagerValue,\\n        MessageProxyForMainnet newMessageProxy\\n    )\\n        public\\n        virtual\\n        initializer\\n    {\\n        SkaleManagerClient.initialize(contractManagerOfSkaleManagerValue);\\n        messageProxy = newMessageProxy;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/SkaleManagerClient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/**\\n *   SkaleManagerClient.sol - SKALE Interchain Messaging Agent\\n *   Copyright (C) 2021-Present SKALE Labs\\n *   @author Artem Payvin\\n *\\n *   SKALE IMA is free software: you can redistribute it and/or modify\\n *   it under the terms of the GNU Affero General Public License as published\\n *   by the Free Software Foundation, either version 3 of the License, or\\n *   (at your option) any later version.\\n *\\n *   SKALE IMA is distributed in the hope that it will be useful,\\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *   GNU Affero General Public License for more details.\\n *\\n *   You should have received a copy of the GNU Affero General Public License\\n *   along with SKALE IMA.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/IContractManager.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/ISchainsInternal.sol\\\";\\n\\n\\n/**\\n * @title SkaleManagerClient - contract that knows ContractManager\\n * and makes calls to SkaleManager contracts\\n * @author Artem Payvin\\n * @author Dmytro Stebaiev\\n */\\ncontract SkaleManagerClient is Initializable, AccessControlEnumerableUpgradeable {\\n\\n    IContractManager public contractManagerOfSkaleManager;\\n\\n    modifier onlySchainOwner(string memory schainName) {\\n        require(\\n            isSchainOwner(msg.sender, keccak256(abi.encodePacked(schainName))),\\n            \\\"Sender is not an Schain owner\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Checks whether sender is owner of SKALE chain\\n     */\\n    function isSchainOwner(address sender, bytes32 schainHash) public view returns (bool) {\\n        address skaleChainsInternal = contractManagerOfSkaleManager.getContract(\\\"SchainsInternal\\\");\\n        return ISchainsInternal(skaleChainsInternal).isOwnerAddress(sender, schainHash);\\n    }\\n\\n    /**\\n     * @dev initialize - sets current address of ContractManager of SkaleManager\\n     * @param newContractManagerOfSkaleManager - current address of ContractManager of SkaleManager\\n     */\\n    function initialize(\\n        IContractManager newContractManagerOfSkaleManager\\n    )\\n        public\\n        virtual\\n        initializer\\n    {\\n        AccessControlEnumerableUpgradeable.__AccessControlEnumerable_init();\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        contractManagerOfSkaleManager = newContractManagerOfSkaleManager;\\n    }\\n}\\n\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/IWallets.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    IWallets - SKALE Manager Interfaces\\n    Copyright (C) 2021-Present SKALE Labs\\n    @author Dmytro Stebaeiv\\n\\n    SKALE Manager Interfaces is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager Interfaces is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager Interfaces.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\ninterface IWallets {\\n    function refundGasBySchain(bytes32 schainId, address payable spender, uint spentGas, bool isDebt) external;\\n    function rechargeSchainWallet(bytes32 schainId) external payable;\\n}\\n\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/ISchains.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    ISchains.sol - SKALE Manager Interfaces\\n    Copyright (C) 2021-Present SKALE Labs\\n    @author Dmytro Stebaeiv\\n\\n    SKALE Manager Interfaces is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager Interfaces is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager Interfaces.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\ninterface ISchains {\\n    function verifySchainSignature(\\n        uint256 signA,\\n        uint256 signB,\\n        bytes32 hash,\\n        uint256 counter,\\n        uint256 hashA,\\n        uint256 hashB,\\n        string calldata schainName\\n    )\\n        external\\n        view\\n        returns (bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IMessageReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/**\\n *   IMessageReceiver.sol - SKALE Interchain Messaging Agent\\n *   Copyright (C) 2021-Present SKALE Labs\\n *   @author Dmytro Stebaiev\\n *\\n *   SKALE IMA is free software: you can redistribute it and/or modify\\n *   it under the terms of the GNU Affero General Public License as published\\n *   by the Free Software Foundation, either version 3 of the License, or\\n *   (at your option) any later version.\\n *\\n *   SKALE IMA is distributed in the hope that it will be useful,\\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *   GNU Affero General Public License for more details.\\n *\\n *   You should have received a copy of the GNU Affero General Public License\\n *   along with SKALE IMA.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.6;\\n\\n\\ninterface IMessageReceiver {\\n    function postMessage(\\n        bytes32 schainHash,\\n        address sender,\\n        bytes calldata data\\n    )\\n        external\\n        returns (address);\\n}\"\r\n    },\r\n    \"contracts/MessageProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/**\\n *   MessageProxy.sol - SKALE Interchain Messaging Agent\\n *   Copyright (C) 2021-Present SKALE Labs\\n *   @author Dmytro Stebaiev\\n *\\n *   SKALE IMA is free software: you can redistribute it and/or modify\\n *   it under the terms of the GNU Affero General Public License as published\\n *   by the Free Software Foundation, either version 3 of the License, or\\n *   (at your option) any later version.\\n *\\n *   SKALE IMA is distributed in the hope that it will be useful,\\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *   GNU Affero General Public License for more details.\\n *\\n *   You should have received a copy of the GNU Affero General Public License\\n *   along with SKALE IMA.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IMessageReceiver.sol\\\";\\n\\n\\nabstract contract MessageProxy is AccessControlEnumerableUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    bytes32 public constant MAINNET_HASH = keccak256(abi.encodePacked(\\\"Mainnet\\\"));\\n    bytes32 public constant CHAIN_CONNECTOR_ROLE = keccak256(\\\"CHAIN_CONNECTOR_ROLE\\\");\\n    bytes32 public constant EXTRA_CONTRACT_REGISTRAR_ROLE = keccak256(\\\"EXTRA_CONTRACT_REGISTRAR_ROLE\\\");\\n    bytes32 public constant CONSTANT_SETTER_ROLE = keccak256(\\\"CONSTANT_SETTER_ROLE\\\");\\n    uint256 public constant MESSAGES_LENGTH = 10;\\n\\n    struct ConnectedChainInfo {\\n        // message counters start with 0\\n        uint256 incomingMessageCounter;\\n        uint256 outgoingMessageCounter;\\n        bool inited;\\n    }\\n\\n    struct Message {\\n        address sender;\\n        address destinationContract;\\n        bytes data;\\n    }\\n\\n    struct Signature {\\n        uint256[2] blsSignature;\\n        uint256 hashA;\\n        uint256 hashB;\\n        uint256 counter;\\n    }\\n\\n    //   schainHash => ConnectedChainInfo\\n    mapping(bytes32 => ConnectedChainInfo) public connectedChains;\\n    //   schainHash => contract address => allowed\\n    mapping(bytes32 => mapping(address => bool)) public registryContracts;\\n\\n    uint256 public gasLimit;\\n\\n    /**\\n     * @dev Emitted for every outgoing message to `dstChain`.\\n     */\\n    event OutgoingMessage(\\n        bytes32 indexed dstChainHash,\\n        uint256 indexed msgCounter,\\n        address indexed srcContract,\\n        address dstContract,\\n        bytes data\\n    );\\n\\n    event PostMessageError(\\n        uint256 indexed msgCounter,\\n        bytes message\\n    );\\n\\n    event GasLimitWasChanged(\\n        uint256 oldValue,\\n        uint256 newValue\\n    );\\n\\n    modifier onlyChainConnector() {\\n        require(hasRole(CHAIN_CONNECTOR_ROLE, msg.sender), \\\"CHAIN_CONNECTOR_ROLE is required\\\");\\n        _;\\n    }\\n\\n    modifier onlyExtraContractRegistrar() {\\n        require(hasRole(EXTRA_CONTRACT_REGISTRAR_ROLE, msg.sender), \\\"EXTRA_CONTRACT_REGISTRAR_ROLE is required\\\");\\n        _;\\n    }\\n\\n    modifier onlyConstantSetter() {\\n        require(hasRole(CONSTANT_SETTER_ROLE, msg.sender), \\\"Not enough permissions to set constant\\\");\\n        _;\\n    }\\n\\n    function initializeMessageProxy(uint newGasLimit) public initializer {\\n        AccessControlEnumerableUpgradeable.__AccessControlEnumerable_init();\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(CHAIN_CONNECTOR_ROLE, msg.sender);\\n        _setupRole(EXTRA_CONTRACT_REGISTRAR_ROLE, msg.sender);\\n        _setupRole(CONSTANT_SETTER_ROLE, msg.sender);\\n        gasLimit = newGasLimit;\\n    }\\n\\n    // Registration state detection\\n    function isConnectedChain(\\n        string memory schainName\\n    )\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return connectedChains[keccak256(abi.encodePacked(schainName))].inited;\\n    }\\n\\n    /**\\n     * @dev Allows LockAndData to add a `schainName`.\\n     * \\n     * Requirements:\\n     * \\n     * - `msg.sender` must be SKALE Node address.\\n     * - `schainName` must not be \\\"Mainnet\\\".\\n     * - `schainName` must not already be added.\\n     */\\n    function addConnectedChain(string calldata schainName) external virtual;\\n\\n    /**\\n     * @dev Allows LockAndData to remove connected chain from this contract.\\n     * \\n     * Requirements:\\n     * \\n     * - `msg.sender` must be LockAndData contract.\\n     * - `schainName` must be initialized.\\n     */\\n    function removeConnectedChain(string memory schainName) public virtual onlyChainConnector {\\n        bytes32 schainHash = keccak256(abi.encodePacked(schainName));\\n        require(connectedChains[schainHash].inited, \\\"Chain is not initialized\\\");\\n        delete connectedChains[schainHash];\\n    }\\n\\n    /**\\n     * @dev Sets gasLimit to a new value\\n     * \\n     * Requirements:\\n     * \\n     * - `msg.sender` must be granted CONSTANT_SETTER_ROLE.\\n     */\\n    function setNewGasLimit(uint256 newGasLimit) external onlyConstantSetter {\\n        emit GasLimitWasChanged(gasLimit, newGasLimit);\\n        gasLimit = newGasLimit;\\n    }\\n\\n    /**\\n     * @dev Posts message from this contract to `targetSchainName` MessageProxy contract.\\n     * This is called by a smart contract to make a cross-chain call.\\n     * \\n     * Requirements:\\n     * \\n     * - `targetSchainName` must be initialized.\\n     */\\n    function postOutgoingMessage(\\n        bytes32 targetChainHash,\\n        address targetContract,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n    {\\n        require(connectedChains[targetChainHash].inited, \\\"Destination chain is not initialized\\\");\\n        require(\\n            registryContracts[bytes32(0)][msg.sender] || \\n            registryContracts[targetChainHash][msg.sender],\\n            \\\"Sender contract is not registered\\\"\\n        );        \\n        \\n        emit OutgoingMessage(\\n            targetChainHash,\\n            connectedChains[targetChainHash].outgoingMessageCounter,\\n            msg.sender,\\n            targetContract,\\n            data\\n        );\\n\\n        connectedChains[targetChainHash].outgoingMessageCounter += 1;\\n    }\\n\\n    function postIncomingMessages(\\n        string calldata fromSchainName,\\n        uint256 startingCounter,\\n        Message[] calldata messages,\\n        Signature calldata sign\\n    )\\n        external\\n        virtual;\\n\\n    function registerExtraContractForAll(address extraContract) external onlyExtraContractRegistrar {\\n        require(extraContract.isContract(), \\\"Given address is not a contract\\\");\\n        require(!registryContracts[bytes32(0)][extraContract], \\\"Extra contract is already registered\\\");\\n        registryContracts[bytes32(0)][extraContract] = true;\\n    }\\n\\n    function removeExtraContractForAll(address extraContract) external onlyExtraContractRegistrar {\\n        require(registryContracts[bytes32(0)][extraContract], \\\"Extra contract is not registered\\\");\\n        delete registryContracts[bytes32(0)][extraContract];\\n    }\\n\\n    /**\\n     * @dev Checks whether contract is currently connected to\\n     * send messages to chain or receive messages from chain.\\n     */\\n    function isContractRegistered(\\n        string calldata schainName,\\n        address contractAddress\\n    )\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return registryContracts[keccak256(abi.encodePacked(schainName))][contractAddress] ||\\n               registryContracts[bytes32(0)][contractAddress];\\n    }\\n\\n    /**\\n     * @dev Returns number of outgoing messages to some schain\\n     * \\n     * Requirements:\\n     * \\n     * - `targetSchainName` must be initialized.\\n     */\\n    function getOutgoingMessagesCounter(string calldata targetSchainName)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        bytes32 dstChainHash = keccak256(abi.encodePacked(targetSchainName));\\n        require(connectedChains[dstChainHash].inited, \\\"Destination chain is not initialized\\\");\\n        return connectedChains[dstChainHash].outgoingMessageCounter;\\n    }\\n\\n    /**\\n     * @dev Returns number of incoming messages from some schain\\n     * \\n     * Requirements:\\n     * \\n     * - `fromSchainName` must be initialized.\\n     */\\n    function getIncomingMessagesCounter(string calldata fromSchainName)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        bytes32 srcChainHash = keccak256(abi.encodePacked(fromSchainName));\\n        require(connectedChains[srcChainHash].inited, \\\"Source chain is not initialized\\\");\\n        return connectedChains[srcChainHash].incomingMessageCounter;\\n    }\\n\\n    // private\\n\\n    function _addConnectedChain(bytes32 schainHash) internal onlyChainConnector {\\n        require(!connectedChains[schainHash].inited,\\\"Chain is already connected\\\");\\n        connectedChains[schainHash] = ConnectedChainInfo({\\n            incomingMessageCounter: 0,\\n            outgoingMessageCounter: 0,\\n            inited: true\\n        });\\n    }\\n\\n    function _callReceiverContract(\\n        bytes32 schainHash,\\n        Message calldata message,\\n        uint counter\\n    )\\n        internal\\n        returns (address)\\n    {\\n        try IMessageReceiver(message.destinationContract).postMessage{gas: gasLimit}(\\n            schainHash,\\n            message.sender,\\n            message.data\\n        ) returns (address receiver) {\\n            return receiver;\\n        } catch Error(string memory reason) {\\n            emit PostMessageError(\\n                counter,\\n                bytes(reason)\\n            );\\n            return address(0);\\n        } catch (bytes memory revertData) {\\n            emit PostMessageError(\\n                counter,\\n                revertData\\n            );\\n            return address(0);\\n        }\\n    }\\n\\n    function _registerExtraContract(\\n        bytes32 chainHash,\\n        address extraContract\\n    )\\n        internal\\n    {      \\n        require(extraContract.isContract(), \\\"Given address is not a contract\\\");\\n        require(!registryContracts[chainHash][extraContract], \\\"Extra contract is already registered\\\");\\n        require(!registryContracts[bytes32(0)][extraContract], \\\"Extra contract is already registered for all chains\\\");\\n        \\n        registryContracts[chainHash][extraContract] = true;\\n    }\\n\\n    function _removeExtraContract(\\n        bytes32 chainHash,\\n        address extraContract\\n    )\\n        internal\\n    {\\n        require(registryContracts[chainHash][extraContract], \\\"Extra contract is not registered\\\");\\n        delete registryContracts[chainHash][extraContract];\\n    }\\n\\n    /**\\n     * @dev Returns hash of message array.\\n     */\\n    function _hashedArray(Message[] calldata messages) internal pure returns (bytes32) {\\n        bytes memory data;\\n        for (uint256 i = 0; i < messages.length; i++) {\\n            data = abi.encodePacked(\\n                data,\\n                bytes32(bytes20(messages[i].sender)),\\n                bytes32(bytes20(messages[i].destinationContract)),\\n                messages[i].data\\n            );\\n        }\\n        return keccak256(data);\\n    }\\n}\"\r\n    },\r\n    \"contracts/mainnet/CommunityPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    CommunityPool.sol - SKALE Manager\\n    Copyright (C) 2021-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n    @author Artem Payvin\\n    @author Vadim Yavorsky\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"../Messages.sol\\\";\\nimport \\\"./MessageProxyForMainnet.sol\\\";\\nimport \\\"./Linker.sol\\\";\\n\\n/**\\n * @title CommunityPool\\n * @dev Contract contains logic to perform automatic self-recharging ether for nodes\\n */\\ncontract CommunityPool is Twin {\\n\\n    using AddressUpgradeable for address payable;\\n\\n    bytes32 public constant CONSTANT_SETTER_ROLE = keccak256(\\\"CONSTANT_SETTER_ROLE\\\");\\n\\n    mapping(address => mapping(bytes32 => uint)) private _userWallets;\\n    mapping(address => mapping(bytes32 => bool)) public activeUsers;\\n\\n    uint public minTransactionGas;    \\n\\n    event MinTransactionGasWasChanged(\\n        uint oldValue,\\n        uint newValue\\n    );\\n\\n    function initialize(\\n        IContractManager contractManagerOfSkaleManagerValue,\\n        Linker linker,\\n        MessageProxyForMainnet messageProxyValue\\n    )\\n        external\\n        initializer\\n    {\\n        Twin.initialize(contractManagerOfSkaleManagerValue, messageProxyValue);\\n        _setupRole(LINKER_ROLE, address(linker));\\n        minTransactionGas = 1e6;\\n    }\\n\\n    function refundGasByUser(\\n        bytes32 schainHash,\\n        address payable node,\\n        address user,\\n        uint gas\\n    ) \\n        external\\n        onlyMessageProxy\\n    {\\n        require(activeUsers[user][schainHash], \\\"User should be active\\\");\\n        require(node != address(0), \\\"Node address must be set\\\");\\n        uint amount = tx.gasprice * gas;\\n        _userWallets[user][schainHash] = _userWallets[user][schainHash] - amount;\\n        if (_userWallets[user][schainHash] < minTransactionGas * tx.gasprice) {\\n            activeUsers[user][schainHash] = false;\\n            messageProxy.postOutgoingMessage(\\n                schainHash,\\n                schainLinks[schainHash],\\n                Messages.encodeLockUserMessage(user)\\n            );\\n        }\\n        node.sendValue(amount);\\n    }\\n\\n    function rechargeUserWallet(string calldata schainName) external payable {\\n        bytes32 schainHash = keccak256(abi.encodePacked(schainName));\\n        require(\\n            msg.value + _userWallets[msg.sender][schainHash] >= minTransactionGas * tx.gasprice,\\n            \\\"Not enough ETH for transaction\\\"\\n        );\\n        _userWallets[msg.sender][schainHash] = _userWallets[msg.sender][schainHash] + msg.value;\\n        if (!activeUsers[msg.sender][schainHash]) {\\n            activeUsers[msg.sender][schainHash] = true;\\n            messageProxy.postOutgoingMessage(\\n                schainHash,\\n                schainLinks[schainHash],\\n                Messages.encodeActivateUserMessage(msg.sender)\\n            );\\n        }\\n    }\\n\\n    function withdrawFunds(string calldata schainName, uint amount) external {\\n        bytes32 schainHash = keccak256(abi.encodePacked(schainName));\\n        require(amount <= _userWallets[msg.sender][schainHash], \\\"Balance is too low\\\");\\n        _userWallets[msg.sender][schainHash] = _userWallets[msg.sender][schainHash] - amount;\\n        if (\\n            _userWallets[msg.sender][schainHash] < minTransactionGas * tx.gasprice &&\\n            activeUsers[msg.sender][schainHash]\\n        ) {\\n            activeUsers[msg.sender][schainHash] = false;\\n            messageProxy.postOutgoingMessage(\\n                schainHash,\\n                schainLinks[schainHash],\\n                Messages.encodeLockUserMessage(msg.sender)\\n            );\\n        }\\n        payable(msg.sender).sendValue(amount);\\n    }\\n\\n    function setMinTransactionGas(uint newMinTransactionGas) external {\\n        require(hasRole(CONSTANT_SETTER_ROLE, msg.sender), \\\"CONSTANT_SETTER_ROLE is required\\\");\\n        emit MinTransactionGasWasChanged(minTransactionGas, newMinTransactionGas);\\n        minTransactionGas = newMinTransactionGas;\\n    }\\n\\n    function getBalance(string calldata schainName) external view returns (uint) {\\n        return _userWallets[msg.sender][keccak256(abi.encodePacked(schainName))];\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable {\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n        __AccessControlEnumerable_init_unchained();\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal initializer {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping (bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if(!hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\n                \\\"AccessControl: account \\\",\\n                StringsUpgradeable.toHexString(uint160(account), 20),\\n                \\\" is missing role \\\",\\n                StringsUpgradeable.toHexString(uint256(role), 32)\\n            )));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/IContractManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    IContractManager.sol - SKALE Manager Interfaces\\n    Copyright (C) 2021-Present SKALE Labs\\n    @author Dmytro Stebaeiv\\n\\n    SKALE Manager Interfaces is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager Interfaces is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager Interfaces.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\ninterface IContractManager {\\n    function setContractsAddress(string calldata contractsName, address newContractsAddress) external;\\n    function getContract(string calldata name) external view returns (address);\\n}\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/ISchainsInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    ISchainsInternal - SKALE Manager Interfaces\\n    Copyright (C) 2021-Present SKALE Labs\\n    @author Dmytro Stebaeiv\\n\\n    SKALE Manager Interfaces is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager Interfaces is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager Interfaces.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\ninterface ISchainsInternal {\\n    function isNodeAddressesInGroup(bytes32 schainId, address sender) external view returns (bool);\\n    function isOwnerAddress(address from, bytes32 schainId) external view returns (bool);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"schainName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractOnMainnet\",\"type\":\"address\"}],\"name\":\"ERC721TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractOnMainnet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721TokenReady\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSIT_BOX_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LINKER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"schainName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"erc721OnMainnet\",\"type\":\"address\"}],\"name\":\"addERC721TokenByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"schainName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"contractReceiver\",\"type\":\"address\"}],\"name\":\"addSchainContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractManagerOfSkaleManager\",\"outputs\":[{\"internalType\":\"contract IContractManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"schainName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"erc721OnMainnet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"depositERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"schainName\",\"type\":\"string\"}],\"name\":\"disableWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"schainName\",\"type\":\"string\"}],\"name\":\"enableWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"schainName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"erc721OnMainnet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"schainName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"erc721OnMainnet\",\"type\":\"address\"}],\"name\":\"getSchainToERC721\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"schainName\",\"type\":\"string\"}],\"name\":\"hasSchainContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IContractManager\",\"name\":\"contractManagerOfSkaleManagerValue\",\"type\":\"address\"},{\"internalType\":\"contract MessageProxyForMainnet\",\"name\":\"newMessageProxy\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IContractManager\",\"name\":\"contractManagerOfSkaleManagerValue\",\"type\":\"address\"},{\"internalType\":\"contract Linker\",\"name\":\"linkerValue\",\"type\":\"address\"},{\"internalType\":\"contract MessageProxyForMainnet\",\"name\":\"messageProxyValue\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IContractManager\",\"name\":\"newContractManagerOfSkaleManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"isSchainOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"schainName\",\"type\":\"string\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linker\",\"outputs\":[{\"internalType\":\"contract Linker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageProxy\",\"outputs\":[{\"internalType\":\"contract MessageProxyForMainnet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"postMessage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"schainName\",\"type\":\"string\"}],\"name\":\"removeSchainContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"schainLinks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"schainToERC721\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferredAmount\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DepositBoxERC721","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}