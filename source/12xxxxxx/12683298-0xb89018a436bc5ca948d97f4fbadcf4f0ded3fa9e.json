{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/enamakel/Work/mahadao.com/arthcoin/arthcoin-v2/contracts/Arth/ArthController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from '../ERC20/IERC20.sol';\\nimport {SafeMath} from '../utils/math/SafeMath.sol';\\nimport {IARTHPool} from './Pools/IARTHPool.sol';\\nimport {IARTHController} from './IARTHController.sol';\\nimport {AccessControl} from '../access/AccessControl.sol';\\nimport {\\n    IUniswapPairOracle\\n} from '../Oracle/Variants/uniswap/IUniswapPairOracle.sol';\\nimport {IOracle} from '../Oracle/IOracle.sol';\\nimport {ICurve} from '../Curves/ICurve.sol';\\nimport {Math} from '../utils/math/Math.sol';\\nimport {IBondingCurve} from '../Curves/IBondingCurve.sol';\\n\\n/**\\n * @title  ARTHStablecoin.\\n * @author MahaDAO.\\n */\\ncontract ArthController is AccessControl, IARTHController {\\n    using SafeMath for uint256;\\n\\n    IERC20 public ARTH;\\n    IERC20 public ARTHX;\\n    IERC20 public MAHA;\\n\\n    IUniswapPairOracle public MAHAGMUOracle;\\n    IUniswapPairOracle public ARTHXGMUOracle;\\n\\n    ICurve public recollateralizeDiscountCruve;\\n    IBondingCurve public bondingCurve;\\n\\n    address public ownerAddress;\\n    address public timelockAddress;\\n    address public DEFAULT_ADMIN_ADDRESS;\\n\\n    uint256 public globalCollateralRatio;\\n    uint256 public collateralRaisedOnOtherChain = 0;\\n\\n    uint256 public override buybackFee; // 6 decimals of precision, divide by 1000000 in calculations for fee.\\n    uint256 public override mintingFee;\\n    uint256 public override redemptionFee;\\n\\n    uint256 public maxRecollateralizeDiscount = 750000; // In 1e6 precision.\\n\\n    /// @notice Timestamp at which contract was deployed.\\n    uint256 public immutable genesisTimestamp;\\n    /// @notice Will use uniswap oracle after this duration.\\n    uint256 public constant maxGenesisDuration = 7 days;\\n    /// @notice Will force use of genesis oracle during genesis.\\n    bool public isARTHXGenesActive = true;\\n\\n    bool public isColalteralRatioPaused = false;\\n\\n    bytes32 public constant COLLATERAL_RATIO_PAUSER =\\n        keccak256('COLLATERAL_RATIO_PAUSER');\\n    bytes32 public constant _RECOLLATERALIZE_PAUSER =\\n        keccak256('RECOLLATERALIZE_PAUSER');\\n    bytes32 public constant _MINT_PAUSER = keccak256('MINT_PAUSER');\\n    bytes32 public constant _REDEEM_PAUSER = keccak256('REDEEM_PAUSER');\\n    bytes32 public constant _BUYBACK_PAUSER = keccak256('BUYBACK_PAUSER');\\n\\n    address[] public arthPoolsArray; // These contracts are able to mint ARTH.\\n    mapping(address => bool) public override arthPools;\\n\\n    bool public mintPaused = false;\\n    bool public redeemPaused = false;\\n    bool public buyBackPaused = true;\\n    bool public recollateralizePaused = true;\\n\\n    uint256 public constant _PRICE_PRECISION = 1e6;\\n    uint256 public stabilityFee = 0; // 1e4; // 1% in e6 precision.\\n\\n    event TargetPriceChanged(uint256 old, uint256 current);\\n    event RedemptionFeeChanged(uint256 old, uint256 current);\\n    event MintingFeeChanged(uint256 old, uint256 current);\\n\\n    /**\\n     * Modifiers.\\n     */\\n\\n    modifier onlyCollateralRatioPauser() {\\n        require(\\n            hasRole(COLLATERAL_RATIO_PAUSER, msg.sender),\\n            'ARTHController: FORBIDDEN'\\n        );\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(\\n            hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\\n            'ARTHController: FORBIDDEN'\\n        );\\n        _;\\n    }\\n\\n    modifier onlyByOwnerOrGovernance() {\\n        require(\\n            msg.sender == ownerAddress || msg.sender == timelockAddress,\\n            'ARTHController: FORBIDDEN'\\n        );\\n        _;\\n    }\\n\\n    modifier onlyByOwnerGovernanceOrPool() {\\n        require(\\n            msg.sender == ownerAddress ||\\n                msg.sender == timelockAddress ||\\n                arthPools[msg.sender],\\n            'ARTHController: FORBIDDEN'\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * Constructor.\\n     */\\n\\n    constructor(\\n        IERC20 _arth,\\n        IERC20 _arthx,\\n        IERC20 _maha,\\n        address _owner,\\n        address _timelockAddress\\n    ) {\\n        ARTH = _arth;\\n        MAHA = _maha;\\n        ARTHX = _arthx;\\n\\n        timelockAddress = _timelockAddress;\\n\\n        DEFAULT_ADMIN_ADDRESS = _msgSender();\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        grantRole(COLLATERAL_RATIO_PAUSER, timelockAddress);\\n\\n        globalCollateralRatio = 11e5;\\n\\n        grantRole(_MINT_PAUSER, _timelockAddress);\\n        grantRole(_REDEEM_PAUSER, _timelockAddress);\\n        grantRole(_BUYBACK_PAUSER, _timelockAddress);\\n        grantRole(_RECOLLATERALIZE_PAUSER, _timelockAddress);\\n\\n        genesisTimestamp = block.timestamp;\\n        ownerAddress = _owner;\\n    }\\n\\n    /**\\n     * External.\\n     */\\n\\n    function deactivateGenesis() external onlyByOwnerOrGovernance {\\n        isARTHXGenesActive = false;\\n    }\\n\\n    function setBondingCurve(IBondingCurve curve)\\n        external\\n        onlyByOwnerOrGovernance\\n    {\\n        bondingCurve = curve;\\n    }\\n\\n    function setRecollateralizationCurve(ICurve curve)\\n        external\\n        onlyByOwnerGovernanceOrPool\\n    {\\n        recollateralizeDiscountCruve = curve;\\n    }\\n\\n    /// @notice Adds collateral addresses supported.\\n    /// @dev    Collateral must be an ERC20.\\n    function addPool(address poolAddress)\\n        external\\n        override\\n        onlyByOwnerOrGovernance\\n    {\\n        require(!arthPools[poolAddress], 'ARTHController: address present');\\n\\n        arthPools[poolAddress] = true;\\n        arthPoolsArray.push(poolAddress);\\n    }\\n\\n    function addPools(address[] memory poolAddress)\\n        external\\n        override\\n        onlyByOwnerOrGovernance\\n    {\\n        for (uint256 index = 0; index < poolAddress.length; index++) {\\n            arthPools[poolAddress[index]] = true;\\n            arthPoolsArray.push(poolAddress[index]);\\n        }\\n    }\\n\\n    function removePool(address poolAddress)\\n        external\\n        override\\n        onlyByOwnerOrGovernance\\n    {\\n        require(arthPools[poolAddress], 'ARTHController: address absent');\\n\\n        // Delete from the mapping.\\n        delete arthPools[poolAddress];\\n\\n        uint256 noOfPools = arthPoolsArray.length;\\n        // 'Delete' from the array by setting the address to 0x0\\n        for (uint256 i = 0; i < noOfPools; i++) {\\n            if (arthPoolsArray[i] == poolAddress) {\\n                arthPoolsArray[i] = address(0); // This will leave a null in the array and keep the indices the same.\\n                break;\\n            }\\n        }\\n    }\\n\\n    function setGlobalCollateralRatio(uint256 _globalCollateralRatio)\\n        external\\n        override\\n        onlyAdmin\\n    {\\n        globalCollateralRatio = _globalCollateralRatio;\\n    }\\n\\n    function setStabilityFee(uint256 percent)\\n        external\\n        override\\n        onlyByOwnerOrGovernance\\n    {\\n        require(percent <= 1e6, 'ArthPool: percent > 1e6');\\n        stabilityFee = percent;\\n    }\\n\\n    function setARTHXGMUOracle(address _arthxOracleAddress)\\n        external\\n        override\\n        onlyByOwnerOrGovernance\\n    {\\n        ARTHXGMUOracle = IUniswapPairOracle(_arthxOracleAddress);\\n    }\\n\\n    function setMAHAGMUOracle(address oracle)\\n        external\\n        override\\n        onlyByOwnerOrGovernance\\n    {\\n        MAHAGMUOracle = IUniswapPairOracle(oracle);\\n    }\\n\\n    function setFeesParameters(\\n        uint256 _mintingFee,\\n        uint256 _buybackFee,\\n        uint256 _redemptionFee\\n    ) external override onlyByOwnerOrGovernance {\\n        mintingFee = _mintingFee;\\n        buybackFee = _buybackFee;\\n        redemptionFee = _redemptionFee;\\n    }\\n\\n    function toggleCollateralRatio()\\n        external\\n        override\\n        onlyCollateralRatioPauser\\n    {\\n        isColalteralRatioPaused = !isColalteralRatioPaused;\\n    }\\n\\n    function setMintingFee(uint256 fee)\\n        external\\n        override\\n        onlyByOwnerOrGovernance\\n    {\\n        uint256 old = mintingFee;\\n        mintingFee = fee;\\n        emit MintingFeeChanged(old, mintingFee);\\n    }\\n\\n    function setRedemptionFee(uint256 fee)\\n        external\\n        override\\n        onlyByOwnerOrGovernance\\n    {\\n        uint256 old = redemptionFee;\\n        redemptionFee = fee;\\n        emit RedemptionFeeChanged(old, redemptionFee);\\n    }\\n\\n    function setBuybackFee(uint256 fee)\\n        external\\n        override\\n        onlyByOwnerOrGovernance\\n    {\\n        buybackFee = fee;\\n    }\\n\\n    function setOwner(address _ownerAddress)\\n        external\\n        override\\n        onlyByOwnerOrGovernance\\n    {\\n        ownerAddress = _ownerAddress;\\n    }\\n\\n    function setGlobalColletaralValue(uint256 _collateralRaised) public onlyAdmin {\\n        collateralRaisedOnOtherChain = _collateralRaised;\\n    }\\n\\n    function setTimelock(address newTimelock)\\n        external\\n        override\\n        onlyByOwnerOrGovernance\\n    {\\n        timelockAddress = newTimelock;\\n    }\\n\\n    function getMAHAPrice() public view override returns (uint256) {\\n        return MAHAGMUOracle.consult(address(MAHA), _PRICE_PRECISION);\\n    }\\n\\n    function getARTHXPrice() public view override returns (uint256) {\\n        if (getIsGenesisActive()) return getARTHXGenesisPrice();\\n        return ARTHXGMUOracle.consult(address(ARTHX), _PRICE_PRECISION);\\n    }\\n\\n    function getIsGenesisActive() public view override returns (bool) {\\n        return (isARTHXGenesActive &&\\n            block.timestamp.sub(genesisTimestamp) <= maxGenesisDuration);\\n    }\\n\\n    function getARTHXGenesisPrice() public pure override returns (uint256) {\\n        return 1e4;\\n    }\\n\\n    function getARTHXGenesisDiscount()\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return bondingCurve.getY(getPercentCollateralized());\\n    }\\n\\n    function getGlobalCollateralRatio() public view override returns (uint256) {\\n        return globalCollateralRatio;\\n    }\\n\\n    function getGlobalCollateralValue() public view override returns (uint256) {\\n        uint256 totalCollateralValueD18 = 0;\\n\\n        uint256 noOfPools = arthPoolsArray.length;\\n        for (uint256 i = 0; i < noOfPools; i++) {\\n            // Exclude null addresses.\\n            if (arthPoolsArray[i] != address(0)) {\\n                totalCollateralValueD18 = totalCollateralValueD18.add(\\n                    IARTHPool(arthPoolsArray[i]).getCollateralGMUBalance()\\n                );\\n            }\\n        }\\n\\n        return totalCollateralValueD18.add(collateralRaisedOnOtherChain);\\n    }\\n\\n    function getARTHSupply() public view override returns (uint256) {\\n        return ARTH.totalSupply();\\n    }\\n\\n    function getMintingFee() external view override returns (uint256) {\\n        return mintingFee;\\n    }\\n\\n    function getBuybackFee() external view override returns (uint256) {\\n        return buybackFee;\\n    }\\n\\n    function getRedemptionFee() external view override returns (uint256) {\\n        return redemptionFee;\\n    }\\n\\n    function getTargetCollateralValue() public view override returns (uint256) {\\n        return getARTHSupply().mul(getGlobalCollateralRatio()).div(1e6);\\n    }\\n\\n    function getPercentCollateralized() public view override returns (uint256) {\\n        uint256 targetCollatValue = getTargetCollateralValue();\\n        uint256 currentCollatValue = getGlobalCollateralValue();\\n\\n        return currentCollatValue.mul(1e18).div(targetCollatValue);\\n    }\\n\\n    function getRecollateralizationDiscount()\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            Math.min(\\n                recollateralizeDiscountCruve\\n                    .getY(getPercentCollateralized())\\n                    .mul(_PRICE_PRECISION)\\n                    .div(100),\\n                maxRecollateralizeDiscount\\n            );\\n    }\\n\\n    function getARTHInfo()\\n        external\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            // uint256,\\n            uint256\\n        )\\n    {\\n        return (\\n            0, // getARTHPrice(), // ARTH price.\\n            getARTHXPrice(), // ARTHX price.\\n            ARTH.totalSupply(), // ARTH total supply.\\n            globalCollateralRatio, // Global collateralization ratio.\\n            getGlobalCollateralValue(), // Global collateral value.\\n            mintingFee, // Minting fee.\\n            redemptionFee, // Redemtion fee.\\n            // getETHGMUPrice(), // ETH/GMU price.\\n            buybackFee\\n        );\\n    }\\n\\n    function toggleMinting() external override {\\n        require(hasRole(_MINT_PAUSER, msg.sender));\\n        mintPaused = !mintPaused;\\n    }\\n\\n    function toggleRedeeming() external override {\\n        require(hasRole(_REDEEM_PAUSER, msg.sender));\\n        redeemPaused = !redeemPaused;\\n    }\\n\\n    function toggleRecollateralize() external override {\\n        require(hasRole(_RECOLLATERALIZE_PAUSER, msg.sender));\\n        recollateralizePaused = !recollateralizePaused;\\n    }\\n\\n    function toggleBuyBack() external override {\\n        require(hasRole(_BUYBACK_PAUSER, msg.sender));\\n        buyBackPaused = !buyBackPaused;\\n    }\\n\\n    function isRedeemPaused() external view override returns (bool) {\\n        if (getIsGenesisActive()) return true;\\n        return redeemPaused;\\n    }\\n\\n    function isMintPaused() external view override returns (bool) {\\n        if (getIsGenesisActive()) return true;\\n        return mintPaused;\\n    }\\n\\n    function isBuybackPaused() external view override returns (bool) {\\n        return buyBackPaused;\\n    }\\n\\n    function isRecollaterlizePaused() external view override returns (bool) {\\n        return recollateralizePaused;\\n    }\\n\\n    function getStabilityFee() external view override returns (uint256) {\\n        if (getIsGenesisActive()) return 0;\\n        return stabilityFee;\\n    }\\n\\n    function isPool(address pool) external view override returns (bool) {\\n        return arthPools[pool];\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/enamakel/Work/mahadao.com/arthcoin/arthcoin-v2/contracts/Arth/IARTHController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IARTHController {\\n    function toggleCollateralRatio() external;\\n\\n    function addPool(address pool_address) external;\\n\\n    function addPools(address[] memory poolAddress) external;\\n\\n    function removePool(address pool_address) external;\\n\\n    function getARTHSupply() external view returns (uint256);\\n\\n    function isPool(address pool) external view returns (bool);\\n\\n    function getARTHInfo()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            // uint256,\\n            uint256\\n        );\\n\\n    function setMintingFee(uint256 fee) external;\\n\\n    function setMAHAGMUOracle(address oracle) external;\\n\\n    function setARTHXGMUOracle(address _arthxOracleAddress) external;\\n\\n    function setFeesParameters(\\n        uint256 _mintingFee,\\n        uint256 _buybackFee,\\n        uint256 _redemptionFee\\n    ) external;\\n\\n    function setRedemptionFee(uint256 fee) external;\\n\\n    function setBuybackFee(uint256 fee) external;\\n\\n    function setOwner(address _ownerAddress) external;\\n\\n    function setTimelock(address newTimelock) external;\\n\\n    function setGlobalCollateralRatio(uint256 _globalCollateralRatio) external;\\n\\n    function getARTHXPrice() external view returns (uint256);\\n\\n    function getMintingFee() external view returns (uint256);\\n\\n    function getMAHAPrice() external view returns (uint256);\\n\\n    function getBuybackFee() external view returns (uint256);\\n\\n    function getRedemptionFee() external view returns (uint256);\\n\\n    function getGlobalCollateralRatio() external view returns (uint256);\\n\\n    function getARTHXGenesisDiscount() external view returns (uint256);\\n\\n    function getGlobalCollateralValue() external view returns (uint256);\\n\\n    function arthPools(address pool) external view returns (bool);\\n\\n    function setStabilityFee(uint256 val) external;\\n\\n    function isRedeemPaused() external view returns (bool);\\n\\n    function isMintPaused() external view returns (bool);\\n\\n    function isBuybackPaused() external view returns (bool);\\n\\n    function isRecollaterlizePaused() external view returns (bool);\\n\\n    function toggleMinting() external;\\n\\n    function toggleRedeeming() external;\\n\\n    function toggleRecollateralize() external;\\n\\n    function toggleBuyBack() external;\\n\\n    function getStabilityFee() external view returns (uint256);\\n\\n    // todo add this here\\n    function mintingFee() external returns (uint256);\\n\\n    function redemptionFee() external returns (uint256);\\n\\n    function buybackFee() external returns (uint256);\\n\\n    function getRecollateralizationDiscount() external returns (uint256);\\n\\n    function getIsGenesisActive() external view returns (bool);\\n\\n    function getARTHXGenesisPrice() external view returns (uint256);\\n\\n    function getTargetCollateralValue() external view returns (uint256);\\n\\n    function getPercentCollateralized() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/home/enamakel/Work/mahadao.com/arthcoin/arthcoin-v2/contracts/Arth/Pools/IARTHPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IARTHPool {\\n    function repay(uint256 amount) external;\\n\\n    function borrow(uint256 amount) external;\\n\\n    function setBuyBackCollateralBuffer(uint256 percent) external;\\n\\n    function setCollatGMUOracle(address _collateralGMUOracleAddress) external;\\n\\n    function setPoolParameters(uint256 newCeiling, uint256 newRedemptionDelay)\\n        external;\\n\\n    function setTimelock(address newTimelock) external;\\n\\n    function setOwner(address ownerAddress) external;\\n\\n    function mint(uint256 collateralAmount, uint256 arthOutMin, uint256 arthxOutMin)\\n        external\\n        returns (uint256, uint256);\\n\\n    function redeem(uint256 arthAmount, uint256 arthxAmount, uint256 collateralOutMin)\\n        external;\\n\\n    function collectRedemption() external;\\n\\n    function recollateralizeARTH(uint256 collateralAmount, uint256 arthxOutMin)\\n        external\\n        returns (uint256);\\n\\n    function buyBackARTHX(uint256 arthxAmount, uint256 collateralOutMin)\\n        external;\\n\\n    function getGlobalCR() external view returns (uint256);\\n\\n    function getCollateralGMUBalance() external view returns (uint256);\\n\\n    function getAvailableExcessCollateralDV() external view returns (uint256);\\n\\n    function getCollateralPrice() external view returns (uint256);\\n\\n    function collateralGMUOracleAddress() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"/home/enamakel/Work/mahadao.com/arthcoin/arthcoin-v2/contracts/Curves/IBondingCurve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ICurve} from './ICurve.sol';\\n\\ninterface IBondingCurve is ICurve {\\n    function getFixedPrice() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/home/enamakel/Work/mahadao.com/arthcoin/arthcoin-v2/contracts/Curves/ICurve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ICurve {\\n    function getY(uint256 x) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/home/enamakel/Work/mahadao.com/arthcoin/arthcoin-v2/contracts/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the number of decimals for token.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"\r\n    },\r\n    \"/home/enamakel/Work/mahadao.com/arthcoin/arthcoin-v2/contracts/Oracle/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    function getPrice() external view returns (uint256);\\n\\n    function getDecimalPercision() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/home/enamakel/Work/mahadao.com/arthcoin/arthcoin-v2/contracts/Oracle/Variants/uniswap/IUniswapPairOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapPairOracle {\\n    function update() external;\\n\\n    function consult(address token, uint256 amountIn)\\n        external\\n        view\\n        returns (uint256 amountOut);\\n\\n    function canUpdate() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/home/enamakel/Work/mahadao.com/arthcoin/arthcoin-v2/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '../utils/Context.sol';\\nimport '../utils/introspection/ERC165.sol';\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IAccessControl).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        require(\\n            hasRole(getRoleAdmin(role), _msgSender()),\\n            'AccessControl: sender must be an admin to grant'\\n        );\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        require(\\n            hasRole(getRoleAdmin(role), _msgSender()),\\n            'AccessControl: sender must be an admin to revoke'\\n        );\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account)\\n        public\\n        virtual\\n        override\\n    {\\n        require(\\n            account == _msgSender(),\\n            'AccessControl: can only renounce roles for self'\\n        );\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/enamakel/Work/mahadao.com/arthcoin/arthcoin-v2/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/enamakel/Work/mahadao.com/arthcoin/arthcoin-v2/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/enamakel/Work/mahadao.com/arthcoin/arthcoin-v2/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/home/enamakel/Work/mahadao.com/arthcoin/arthcoin-v2/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/enamakel/Work/mahadao.com/arthcoin/arthcoin-v2/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_arth\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_arthx\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_maha\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelockAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"}],\"name\":\"MintingFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"}],\"name\":\"RedemptionFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"}],\"name\":\"TargetPriceChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ARTH\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ARTHX\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ARTHXGMUOracle\",\"outputs\":[{\"internalType\":\"contract IUniswapPairOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COLLATERAL_RATIO_PAUSER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAHA\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAHAGMUOracle\",\"outputs\":[{\"internalType\":\"contract IUniswapPairOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_BUYBACK_PAUSER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_MINT_PAUSER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_PRICE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_RECOLLATERALIZE_PAUSER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_REDEEM_PAUSER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"poolAddress\",\"type\":\"address[]\"}],\"name\":\"addPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"arthPools\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"arthPoolsArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondingCurve\",\"outputs\":[{\"internalType\":\"contract IBondingCurve\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralRaisedOnOtherChain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivateGenesis\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getARTHInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getARTHSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getARTHXGenesisDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getARTHXGenesisPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getARTHXPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuybackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalCollateralValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIsGenesisActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMAHAPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPercentCollateralized\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecollateralizationDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedemptionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStabilityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTargetCollateralValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isARTHXGenesActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBuybackPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isColalteralRatioPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMintPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRecollaterlizePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRedeemPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxGenesisDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRecollateralizeDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recollateralizeDiscountCruve\",\"outputs\":[{\"internalType\":\"contract ICurve\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recollateralizePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"removePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_arthxOracleAddress\",\"type\":\"address\"}],\"name\":\"setARTHXGMUOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBondingCurve\",\"name\":\"curve\",\"type\":\"address\"}],\"name\":\"setBondingCurve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setBuybackFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buybackFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_redemptionFee\",\"type\":\"uint256\"}],\"name\":\"setFeesParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_globalCollateralRatio\",\"type\":\"uint256\"}],\"name\":\"setGlobalCollateralRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralRaised\",\"type\":\"uint256\"}],\"name\":\"setGlobalColletaralValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setMAHAGMUOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setMintingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICurve\",\"name\":\"curve\",\"type\":\"address\"}],\"name\":\"setRecollateralizationCurve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setRedemptionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setStabilityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTimelock\",\"type\":\"address\"}],\"name\":\"setTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleBuyBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleCollateralRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleRecollateralize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleRedeeming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ArthController","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"100000","ConstructorArguments":"0000000000000000000000000c47185b0785c18a4de798dd0eaed9d036394c85000000000000000000000000bd2293e56689cf88f89264a779d30204d69a453c000000000000000000000000b4d930279552397bba2ee473229f89ec245bc365000000000000000000000000f3e93823f2c898044569d14c812d8c851ed08e9d000000000000000000000000841786848574ee5452ff11abd3a433a1a67fc9a8","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}