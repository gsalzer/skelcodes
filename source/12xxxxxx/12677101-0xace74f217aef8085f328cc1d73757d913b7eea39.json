{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\n\n\n// Part: IFund\n\ninterface IFund {\n    function underlying() external view returns (address);\n\n    function relayer() external view returns (address);\n\n    function deposit(uint256 amountWei) external;\n\n    function depositFor(uint256 amountWei, address holder) external;\n\n    function withdraw(uint256 numberOfShares) external;\n\n    function getPricePerShare() external view returns (uint256);\n\n    function totalValueLocked() external view returns (uint256);\n\n    function underlyingBalanceWithInvestmentForHolder(address holder)\n        external\n        view\n        returns (uint256);\n}\n\n// Part: IStrategy\n\ninterface IStrategy {\n    function name() external pure returns (string memory);\n\n    function version() external pure returns (string memory);\n\n    function underlying() external view returns (address);\n\n    function fund() external view returns (address);\n\n    function creator() external view returns (address);\n\n    function withdrawAllToFund() external;\n\n    function withdrawToFund(uint256 amount) external;\n\n    function investedUnderlyingBalance() external view returns (uint256);\n\n    function doHardWork() external;\n\n    function depositArbCheck() external view returns (bool);\n}\n\n// Part: IUpgradeSource\n\ninterface IUpgradeSource {\n    function shouldUpgrade() external view returns (bool, address);\n\n    function finalizeUpgrade() external;\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts-upgradeable@3.4.0/AddressUpgradeable\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts-upgradeable@3.4.0/IERC20Upgradeable\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts-upgradeable@3.4.0/MathUpgradeable\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts-upgradeable@3.4.0/SafeMathUpgradeable\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/Address\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/IERC20\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/SafeMath\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n\n// Part: SetGetAssembly\n\ncontract SetGetAssembly {\n    // solhint-disable-next-line no-empty-blocks\n    constructor() public {}\n\n    function setAddress(bytes32 slot, address _address) internal {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            sstore(slot, _address)\n        }\n    }\n\n    function setUint256(bytes32 slot, uint256 _value) internal {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            sstore(slot, _value)\n        }\n    }\n\n    function setUint8(bytes32 slot, uint8 _value) internal {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            sstore(slot, _value)\n        }\n    }\n\n    function setBool(bytes32 slot, bool _value) internal {\n        setUint256(slot, _value ? 1 : 0);\n    }\n\n    function getBool(bytes32 slot) internal view returns (bool) {\n        return (getUint256(slot) == 1);\n    }\n\n    function getAddress(bytes32 slot) internal view returns (address str) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            str := sload(slot)\n        }\n    }\n\n    function getUint256(bytes32 slot) internal view returns (uint256 str) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            str := sload(slot)\n        }\n    }\n\n    function getUint8(bytes32 slot) internal view returns (uint8 str) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            str := sload(slot)\n        }\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts-upgradeable@3.4.0/Initializable\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/SafeERC20\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// Part: FundStorage\n\ncontract FundStorage is Initializable, SetGetAssembly {\n    bytes32 internal constant _UNDERLYING_SLOT =\n        0xe0dc1d429ff8628e5936b3d6a6546947e1cc9ea7415a59d46ce95b3cfa4442b9;\n    bytes32 internal constant _UNDERLYING_UNIT_SLOT =\n        0x4840b03aa097a422092d99dc6875c2b69e8f48c9af2563a0447f3b4e4928d962;\n    bytes32 internal constant _DECIMALS_SLOT =\n        0x15b9fa1072bc4b2cdb762a49a2c7917b8b3af02283e37ffd41d0fccd4eef0d48;\n    bytes32 internal constant _FUND_MANAGER_SLOT =\n        0x670552e214026020a9e6caa820519c7f879b21bd75b5571387d6a9cf8f94bd18;\n    bytes32 internal constant _RELAYER_SLOT =\n        0x84e8c6b8f2281d51d9f683d351409724c3caa7848051aeb9d92c106ab36cc24c;\n    bytes32 internal constant _PLATFORM_REWARDS_SLOT =\n        0x92260bfe68dd0f8a9f5439b75466781ba1ce44523ed1a3026a73eada49072e65;\n    bytes32 internal constant _DEPOSIT_LIMIT_SLOT =\n        0xca2f8a3e9ea81335bcce793cde55fc0c38129b594f53052d2bb18099ffa72613;\n    bytes32 internal constant _DEPOSIT_LIMIT_TX_MAX_SLOT =\n        0x769f312c3790719cf1ea5f75303393f080fd62be88d75fa86726a6be00bb5a24;\n    bytes32 internal constant _DEPOSIT_LIMIT_TX_MIN_SLOT =\n        0x9027949576d185c74d79ad3b8a8dbff32126f3a3ee140b346f146beb18234c85;\n    bytes32 internal constant _PERFORMANCE_FEE_FUND_SLOT =\n        0x5b8979500398f8fbeb42c36d18f31a76fd0ab30f4338d864e7d8734b340e9bb9;\n    bytes32 internal constant _PLATFORM_FEE_SLOT =\n        0x2084059f3bff3cc3fd204df32325dcb05f47c2f590aba5d103ec584523738e7a;\n    bytes32 internal constant _WITHDRAWAL_FEE_SLOT =\n        0x0fa90db0cd58feef247d70d3b21f64c03d0e3ec10eb297f015da0cc09eb3412c;\n    bytes32 internal constant _MAX_INVESTMENT_IN_STRATEGIES_SLOT =\n        0xe3b5969c9426551aa8f16dbc7b25042b9b9c9869b759c77a85f0b097ac363475;\n    bytes32 internal constant _TOTAL_WEIGHT_IN_STRATEGIES_SLOT =\n        0x63177e03c47ab825f04f5f8f2334e312239890e7588db78cabe10d7aec327fd2;\n    bytes32 internal constant _TOTAL_ACCOUNTED_SLOT =\n        0xa19f3b8a62465676ae47ab811ee15e3d2b68d88869cb38686d086a11d382f6bb;\n    bytes32 internal constant _TOTAL_INVESTED_SLOT =\n        0x49c84685200b42972f845832b2c3da3d71def653c151340801aeae053ce104e9;\n    bytes32 internal constant _DEPOSITS_PAUSED_SLOT =\n        0x3cefcfe9774096ac956c0d63992ea27a01fb3884a22b8765ad63c8366f90a9c8;\n    bytes32 internal constant _SHOULD_REBALANCE_SLOT =\n        0x7f8e3dfb98485aa419c1d05b6ea089a8cddbafcfcf4491db33f5d0b5fe4f32c7;\n    bytes32 internal constant _LAST_HARDWORK_TIMESTAMP_SLOT =\n        0x0260c2bf5555cd32cedf39c0fcb0eab8029c67b3d5137faeb3e24a500db80bc9;\n    bytes32 internal constant _NEXT_IMPLEMENTATION_SLOT =\n        0xa7ae0fa763ec3009113ccc5eb9089e1f0028607f5b8198c52cd42366c1ddb17b;\n\n    constructor() public {\n        assert(\n            _UNDERLYING_SLOT ==\n                bytes32(\n                    uint256(\n                        keccak256(\"eip1967.mesh.finance.fundStorage.underlying\")\n                    ) - 1\n                )\n        );\n        assert(\n            _UNDERLYING_UNIT_SLOT ==\n                bytes32(\n                    uint256(\n                        keccak256(\n                            \"eip1967.mesh.finance.fundStorage.underlyingUnit\"\n                        )\n                    ) - 1\n                )\n        );\n        assert(\n            _DECIMALS_SLOT ==\n                bytes32(\n                    uint256(\n                        keccak256(\"eip1967.mesh.finance.fundStorage.decimals\")\n                    ) - 1\n                )\n        );\n        assert(\n            _FUND_MANAGER_SLOT ==\n                bytes32(\n                    uint256(\n                        keccak256(\n                            \"eip1967.mesh.finance.fundStorage.fundManager\"\n                        )\n                    ) - 1\n                )\n        );\n        assert(\n            _RELAYER_SLOT ==\n                bytes32(\n                    uint256(\n                        keccak256(\"eip1967.mesh.finance.fundStorage.relayer\")\n                    ) - 1\n                )\n        );\n        assert(\n            _PLATFORM_REWARDS_SLOT ==\n                bytes32(\n                    uint256(\n                        keccak256(\n                            \"eip1967.mesh.finance.fundStorage.platformRewards\"\n                        )\n                    ) - 1\n                )\n        );\n        assert(\n            _DEPOSIT_LIMIT_SLOT ==\n                bytes32(\n                    uint256(\n                        keccak256(\n                            \"eip1967.mesh.finance.fundStorage.depositLimit\"\n                        )\n                    ) - 1\n                )\n        );\n        assert(\n            _DEPOSIT_LIMIT_TX_MAX_SLOT ==\n                bytes32(\n                    uint256(\n                        keccak256(\n                            \"eip1967.mesh.finance.fundStorage.depositLimitTxMax\"\n                        )\n                    ) - 1\n                )\n        );\n        assert(\n            _DEPOSIT_LIMIT_TX_MIN_SLOT ==\n                bytes32(\n                    uint256(\n                        keccak256(\n                            \"eip1967.mesh.finance.fundStorage.depositLimitTxMin\"\n                        )\n                    ) - 1\n                )\n        );\n        assert(\n            _PERFORMANCE_FEE_FUND_SLOT ==\n                bytes32(\n                    uint256(\n                        keccak256(\n                            \"eip1967.mesh.finance.fundStorage.performanceFeeFund\"\n                        )\n                    ) - 1\n                )\n        );\n        assert(\n            _PLATFORM_FEE_SLOT ==\n                bytes32(\n                    uint256(\n                        keccak256(\n                            \"eip1967.mesh.finance.fundStorage.platformFee\"\n                        )\n                    ) - 1\n                )\n        );\n        assert(\n            _WITHDRAWAL_FEE_SLOT ==\n                bytes32(\n                    uint256(\n                        keccak256(\n                            \"eip1967.mesh.finance.fundStorage.withdrawalFee\"\n                        )\n                    ) - 1\n                )\n        );\n        assert(\n            _MAX_INVESTMENT_IN_STRATEGIES_SLOT ==\n                bytes32(\n                    uint256(\n                        keccak256(\n                            \"eip1967.mesh.finance.fundStorage.maxInvestmentInStrategies\"\n                        )\n                    ) - 1\n                )\n        );\n        assert(\n            _TOTAL_WEIGHT_IN_STRATEGIES_SLOT ==\n                bytes32(\n                    uint256(\n                        keccak256(\n                            \"eip1967.mesh.finance.fundStorage.totalWeightInStrategies\"\n                        )\n                    ) - 1\n                )\n        );\n        assert(\n            _TOTAL_ACCOUNTED_SLOT ==\n                bytes32(\n                    uint256(\n                        keccak256(\n                            \"eip1967.mesh.finance.fundStorage.totalAccounted\"\n                        )\n                    ) - 1\n                )\n        );\n        assert(\n            _TOTAL_INVESTED_SLOT ==\n                bytes32(\n                    uint256(\n                        keccak256(\n                            \"eip1967.mesh.finance.fundStorage.totalInvested\"\n                        )\n                    ) - 1\n                )\n        );\n        assert(\n            _DEPOSITS_PAUSED_SLOT ==\n                bytes32(\n                    uint256(\n                        keccak256(\n                            \"eip1967.mesh.finance.fundStorage.depositsPaused\"\n                        )\n                    ) - 1\n                )\n        );\n        assert(\n            _SHOULD_REBALANCE_SLOT ==\n                bytes32(\n                    uint256(\n                        keccak256(\n                            \"eip1967.mesh.finance.fundStorage.shouldRebalance\"\n                        )\n                    ) - 1\n                )\n        );\n        assert(\n            _LAST_HARDWORK_TIMESTAMP_SLOT ==\n                bytes32(\n                    uint256(\n                        keccak256(\n                            \"eip1967.mesh.finance.fundStorage.lastHardworkTimestamp\"\n                        )\n                    ) - 1\n                )\n        );\n        assert(\n            _NEXT_IMPLEMENTATION_SLOT ==\n                bytes32(\n                    uint256(\n                        keccak256(\n                            \"eip1967.mesh.finance.fundStorage.nextImplementation\"\n                        )\n                    ) - 1\n                )\n        );\n    }\n\n    function initializeFundStorage(\n        address _underlying,\n        uint256 _underlyingUnit,\n        uint8 _decimals,\n        address _fundManager,\n        address _relayer,\n        address _platformRewards\n    ) public initializer {\n        _setUnderlying(_underlying);\n        _setUnderlyingUnit(_underlyingUnit);\n        _setDecimals(_decimals);\n        _setFundManager(_fundManager);\n        _setRelayer(_relayer);\n        _setPlatformRewards(_platformRewards);\n        _setDepositLimit(0);\n        _setDepositLimitTxMax(0);\n        _setDepositLimitTxMin(0);\n        _setPerformanceFeeFund(0);\n        _setPlatformFee(0);\n        _setWithdrawalFee(0);\n        _setMaxInvestmentInStrategies(9000); // 9000 BPS (90%) can be accessed by the strategies. This is to keep something in fund for withdrawal.\n        _setTotalWeightInStrategies(0);\n        _setTotalAccounted(0);\n        _setTotalInvested(0);\n        _setDepositsPaused(false);\n        _setShouldRebalance(false);\n        _setLastHardworkTimestamp(0);\n        _setNextImplementation(address(0));\n    }\n\n    function _setUnderlying(address _address) internal {\n        setAddress(_UNDERLYING_SLOT, _address);\n    }\n\n    function _underlying() internal view returns (address) {\n        return getAddress(_UNDERLYING_SLOT);\n    }\n\n    function _setUnderlyingUnit(uint256 _value) internal {\n        setUint256(_UNDERLYING_UNIT_SLOT, _value);\n    }\n\n    function _underlyingUnit() internal view returns (uint256) {\n        return getUint256(_UNDERLYING_UNIT_SLOT);\n    }\n\n    function _setDecimals(uint8 _value) internal {\n        setUint8(_DECIMALS_SLOT, _value);\n    }\n\n    function _decimals() internal view returns (uint8) {\n        return getUint8(_DECIMALS_SLOT);\n    }\n\n    function _setFundManager(address _fundManager) internal {\n        setAddress(_FUND_MANAGER_SLOT, _fundManager);\n    }\n\n    function _fundManager() internal view returns (address) {\n        return getAddress(_FUND_MANAGER_SLOT);\n    }\n\n    function _setRelayer(address _relayer) internal {\n        setAddress(_RELAYER_SLOT, _relayer);\n    }\n\n    function _relayer() internal view returns (address) {\n        return getAddress(_RELAYER_SLOT);\n    }\n\n    function _setPlatformRewards(address _rewards) internal {\n        setAddress(_PLATFORM_REWARDS_SLOT, _rewards);\n    }\n\n    function _platformRewards() internal view returns (address) {\n        return getAddress(_PLATFORM_REWARDS_SLOT);\n    }\n\n    function _setDepositLimit(uint256 _value) internal {\n        setUint256(_DEPOSIT_LIMIT_SLOT, _value);\n    }\n\n    function _depositLimit() internal view returns (uint256) {\n        return getUint256(_DEPOSIT_LIMIT_SLOT);\n    }\n\n    function _setDepositLimitTxMax(uint256 _value) internal {\n        setUint256(_DEPOSIT_LIMIT_TX_MAX_SLOT, _value);\n    }\n\n    function _depositLimitTxMax() internal view returns (uint256) {\n        return getUint256(_DEPOSIT_LIMIT_TX_MAX_SLOT);\n    }\n\n    function _setDepositLimitTxMin(uint256 _value) internal {\n        setUint256(_DEPOSIT_LIMIT_TX_MIN_SLOT, _value);\n    }\n\n    function _depositLimitTxMin() internal view returns (uint256) {\n        return getUint256(_DEPOSIT_LIMIT_TX_MIN_SLOT);\n    }\n\n    function _setPerformanceFeeFund(uint256 _value) internal {\n        setUint256(_PERFORMANCE_FEE_FUND_SLOT, _value);\n    }\n\n    function _performanceFeeFund() internal view returns (uint256) {\n        return getUint256(_PERFORMANCE_FEE_FUND_SLOT);\n    }\n\n    function _setPlatformFee(uint256 _value) internal {\n        setUint256(_PLATFORM_FEE_SLOT, _value);\n    }\n\n    function _platformFee() internal view returns (uint256) {\n        return getUint256(_PLATFORM_FEE_SLOT);\n    }\n\n    function _setWithdrawalFee(uint256 _value) internal {\n        setUint256(_WITHDRAWAL_FEE_SLOT, _value);\n    }\n\n    function _withdrawalFee() internal view returns (uint256) {\n        return getUint256(_WITHDRAWAL_FEE_SLOT);\n    }\n\n    function _setMaxInvestmentInStrategies(uint256 _value) internal {\n        setUint256(_MAX_INVESTMENT_IN_STRATEGIES_SLOT, _value);\n    }\n\n    function _maxInvestmentInStrategies() internal view returns (uint256) {\n        return getUint256(_MAX_INVESTMENT_IN_STRATEGIES_SLOT);\n    }\n\n    function _setTotalWeightInStrategies(uint256 _value) internal {\n        setUint256(_TOTAL_WEIGHT_IN_STRATEGIES_SLOT, _value);\n    }\n\n    function _totalWeightInStrategies() internal view returns (uint256) {\n        return getUint256(_TOTAL_WEIGHT_IN_STRATEGIES_SLOT);\n    }\n\n    function _setTotalAccounted(uint256 _value) internal {\n        setUint256(_TOTAL_ACCOUNTED_SLOT, _value);\n    }\n\n    function _totalAccounted() internal view returns (uint256) {\n        return getUint256(_TOTAL_ACCOUNTED_SLOT);\n    }\n\n    function _setTotalInvested(uint256 _value) internal {\n        setUint256(_TOTAL_INVESTED_SLOT, _value);\n    }\n\n    function _totalInvested() internal view returns (uint256) {\n        return getUint256(_TOTAL_INVESTED_SLOT);\n    }\n\n    function _setDepositsPaused(bool _value) internal {\n        setBool(_DEPOSITS_PAUSED_SLOT, _value);\n    }\n\n    function _depositsPaused() internal view returns (bool) {\n        return getBool(_DEPOSITS_PAUSED_SLOT);\n    }\n\n    function _setShouldRebalance(bool _value) internal {\n        setBool(_SHOULD_REBALANCE_SLOT, _value);\n    }\n\n    function _shouldRebalance() internal view returns (bool) {\n        return getBool(_SHOULD_REBALANCE_SLOT);\n    }\n\n    function _setLastHardworkTimestamp(uint256 _value) internal {\n        setUint256(_LAST_HARDWORK_TIMESTAMP_SLOT, _value);\n    }\n\n    function _lastHardworkTimestamp() internal view returns (uint256) {\n        return getUint256(_LAST_HARDWORK_TIMESTAMP_SLOT);\n    }\n\n    function _setNextImplementation(address _newImplementation) internal {\n        setAddress(_NEXT_IMPLEMENTATION_SLOT, _newImplementation);\n    }\n\n    function _nextImplementation() internal view returns (address) {\n        return getAddress(_NEXT_IMPLEMENTATION_SLOT);\n    }\n\n    uint256[50] private bigEmptySlot;\n}\n\n// Part: Governable\n\ncontract Governable is Initializable, SetGetAssembly {\n    event GovernanceUpdated(address newGovernance, address oldGovernance);\n\n    bytes32 internal constant _GOVERNANCE_SLOT =\n        0x597f9c7c685b907e823520bd45aeb3d58b505f86b2e41cd5b4cd5b6c72782950;\n    bytes32 internal constant _PENDING_GOVERNANCE_SLOT =\n        0xcd77091f18f9504fccf6140ab99e20533c811d470bb9a5a983d0edc0720fbf8c;\n\n    modifier onlyGovernance() {\n        require(_governance() == msg.sender, \"Not governance\");\n        _;\n    }\n\n    constructor() public {\n        assert(\n            _GOVERNANCE_SLOT ==\n                bytes32(\n                    uint256(\n                        keccak256(\"eip1967.mesh.finance.governable.governance\")\n                    ) - 1\n                )\n        );\n        assert(\n            _PENDING_GOVERNANCE_SLOT ==\n                bytes32(\n                    uint256(\n                        keccak256(\n                            \"eip1967.mesh.finance.governable.pendingGovernance\"\n                        )\n                    ) - 1\n                )\n        );\n    }\n\n    function initializeGovernance(address _governance) public initializer {\n        _setGovernance(_governance);\n    }\n\n    function _setGovernance(address _governance) private {\n        setAddress(_GOVERNANCE_SLOT, _governance);\n    }\n\n    function _setPendingGovernance(address _pendingGovernance) private {\n        setAddress(_PENDING_GOVERNANCE_SLOT, _pendingGovernance);\n    }\n\n    function updateGovernance(address _newGovernance) public onlyGovernance {\n        require(\n            _newGovernance != address(0),\n            \"new governance shouldn't be empty\"\n        );\n        _setPendingGovernance(_newGovernance);\n    }\n\n    function acceptGovernance() public {\n        require(_pendingGovernance() == msg.sender, \"Not pending governance\");\n        address oldGovernance = _governance();\n        _setGovernance(msg.sender);\n        emit GovernanceUpdated(msg.sender, oldGovernance);\n    }\n\n    function _governance() internal view returns (address str) {\n        return getAddress(_GOVERNANCE_SLOT);\n    }\n\n    function _pendingGovernance() internal view returns (address str) {\n        return getAddress(_PENDING_GOVERNANCE_SLOT);\n    }\n\n    function governance() public view returns (address) {\n        return _governance();\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts-upgradeable@3.4.0/ContextUpgradeable\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts-upgradeable@3.4.0/ReentrancyGuardUpgradeable\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts-upgradeable@3.4.0/ERC20Upgradeable\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\n    using SafeMathUpgradeable for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n    uint256[44] private __gap;\n}\n\n// File: Fund.sol\n\ncontract Fund is\n    ERC20Upgradeable,\n    ReentrancyGuardUpgradeable,\n    IFund,\n    IUpgradeSource,\n    Governable,\n    FundStorage\n{\n    using SafeERC20 for IERC20;\n    using AddressUpgradeable for address;\n    using SafeMathUpgradeable for uint256;\n    using SafeMathUpgradeable for uint8;\n\n    event Withdraw(address indexed beneficiary, uint256 amount, uint256 fee);\n    event Deposit(address indexed beneficiary, uint256 amount);\n    event InvestInStrategy(address strategy, uint256 amount);\n    event StrategyRewards(\n        address strategy,\n        uint256 profit,\n        uint256 strategyCreatorFee\n    );\n    event FundManagerRewards(uint256 profitTotal, uint256 fundManagerFee);\n    event PlatformRewards(\n        uint256 lastBalance,\n        uint256 timeElapsed,\n        uint256 platformFee\n    );\n    event HardWorkDone(uint256 totalValueLocked, uint256 pricePerShare);\n\n    event StrategyAdded(\n        address strategy,\n        uint256 weightage,\n        uint256 performanceFeeStrategy\n    );\n    event StrategyWeightageUpdated(address strategy, uint256 newWeightage);\n    event StrategyPerformanceFeeUpdated(\n        address strategy,\n        uint256 newPerformanceFeeStrategy\n    );\n    event StrategyRemoved(address strategy);\n\n    address internal constant ZERO_ADDRESS = address(0);\n\n    uint256 internal constant MAX_BPS = 10000; // 100% in basis points\n    uint256 internal constant SECS_PER_YEAR = 31556952; // 365.25 days from yearn\n\n    uint256 internal constant MAX_PLATFORM_FEE = 500; // 5% (annual on AUM), goes to governance/treasury\n    uint256 internal constant MAX_PERFORMANCE_FEE_FUND = 1000; // 10% on profits, goes to fund manager\n    uint256 internal constant MAX_PERFORMANCE_FEE_STRATEGY = 1000; // 10% on profits, goes to strategy creator\n    uint256 internal constant MAX_WITHDRAWAL_FEE = 100; // 1%, goes to governance/treasury\n\n    struct StrategyParams {\n        uint256 weightage; // weightage of total assets in fund this strategy can access (in BPS) (5000 for 50%)\n        uint256 performanceFeeStrategy; // in BPS, fee on yield of the strategy, goes to strategy creator\n        uint256 activation; // timestamp when strategy is added\n        uint256 lastBalance; // balance at last hard work\n        uint256 indexInList;\n    }\n\n    mapping(address => StrategyParams) public strategies;\n    address[] public strategyList;\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor() public {}\n\n    function initializeFund(\n        address _governance,\n        address _underlying,\n        string memory _name,\n        string memory _symbol\n    ) public initializer {\n        ERC20Upgradeable.__ERC20_init(_name, _symbol);\n\n        __ReentrancyGuard_init();\n\n        Governable.initializeGovernance(_governance);\n\n        uint8 _decimals = ERC20Upgradeable(_underlying).decimals();\n\n        uint256 _underlyingUnit = 10**uint256(_decimals);\n\n        FundStorage.initializeFundStorage(\n            _underlying,\n            _underlyingUnit,\n            _decimals,\n            _governance, // fund manager is initialized as governance\n            _governance, // relayer is initialized as governance\n            _governance // rewards contract is initialized as governance\n        );\n    }\n\n    modifier onlyFundManagerOrGovernance() {\n        require(\n            (_governance() == msg.sender) || (_fundManager() == msg.sender),\n            \"Not governance nor fund manager\"\n        );\n        _;\n    }\n\n    modifier onlyFundManagerOrGovernanceOrRelayer() {\n        require(\n            (_governance() == msg.sender) ||\n                (_fundManager() == msg.sender) ||\n                (_relayer() == msg.sender),\n            \"Not governance nor fund manager nor relayer\"\n        );\n        _;\n    }\n\n    modifier whenDepositsNotPaused() {\n        require(!_depositsPaused(), \"Deposits are paused\");\n        _;\n    }\n\n    function fundManager() external view returns (address) {\n        return _fundManager();\n    }\n\n    function relayer() external view override returns (address) {\n        return _relayer();\n    }\n\n    function underlying() external view override returns (address) {\n        return _underlying();\n    }\n\n    function underlyingUnit() external view returns (uint256) {\n        return _underlyingUnit();\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals();\n    }\n\n    function getStrategyCount() internal view returns (uint256) {\n        return strategyList.length;\n    }\n\n    modifier whenStrategyDefined() {\n        require(getStrategyCount() > 0, \"Strategies must be defined\");\n        _;\n    }\n\n    function getStrategyList() public view returns (address[] memory) {\n        return strategyList;\n    }\n\n    function getStrategy(address strategy)\n        public\n        view\n        returns (StrategyParams memory)\n    {\n        return strategies[strategy];\n    }\n\n    /*\n     * Returns the underlying balance currently in the fund.\n     */\n    function underlyingBalanceInFund() internal view returns (uint256) {\n        return IERC20(_underlying()).balanceOf(address(this));\n    }\n\n    /*\n     * Returns the current underlying (e.g., DAI's) balance together with\n     * the invested amount (if DAI is invested elsewhere by the strategies).\n     */\n    function underlyingBalanceWithInvestment() internal view returns (uint256) {\n        uint256 underlyingBalance = underlyingBalanceInFund();\n        for (uint256 i; i < getStrategyCount(); i++) {\n            underlyingBalance = underlyingBalance.add(\n                IStrategy(strategyList[i]).investedUnderlyingBalance()\n            );\n        }\n        return underlyingBalance;\n    }\n\n    /*\n     * Returns price per share, scaled by underlying unit (10 ** decimals) to keep everything in uint256.\n     */\n    function _getPricePerShare() internal view returns (uint256) {\n        return\n            totalSupply() == 0\n                ? _underlyingUnit()\n                : _underlyingUnit().mul(underlyingBalanceWithInvestment()).div(\n                    totalSupply()\n                );\n    }\n\n    function getPricePerShare() external view override returns (uint256) {\n        return _getPricePerShare();\n    }\n\n    function totalValueLocked() external view override returns (uint256) {\n        return underlyingBalanceWithInvestment();\n    }\n\n    function _underlyingFromShares(uint256 numShares)\n        internal\n        view\n        returns (uint256)\n    {\n        return\n            underlyingBalanceWithInvestment().mul(numShares).div(totalSupply());\n    }\n\n    /*\n     * get the user's balance (in underlying)\n     */\n    function underlyingBalanceWithInvestmentForHolder(address holder)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        if (totalSupply() == 0) {\n            return 0;\n        }\n        return _underlyingFromShares(balanceOf(holder));\n    }\n\n    function isActiveStrategy(address strategy) internal view returns (bool) {\n        return strategies[strategy].weightage > 0;\n    }\n\n    function addStrategy(\n        address newStrategy,\n        uint256 weightage,\n        uint256 performanceFeeStrategy\n    ) external onlyFundManagerOrGovernance {\n        require(newStrategy != ZERO_ADDRESS, \"new newStrategy cannot be empty\");\n        require(\n            IStrategy(newStrategy).fund() == address(this),\n            \"The strategy does not belong to this fund\"\n        );\n        require(\n            isActiveStrategy(newStrategy) == false,\n            \"This strategy is already active in this fund\"\n        );\n        require(weightage > 0, \"The weightage should be greater than 0\");\n        uint256 totalWeightInStrategies =\n            _totalWeightInStrategies().add(weightage);\n        require(\n            totalWeightInStrategies <= _maxInvestmentInStrategies(),\n            \"Total investment can't be above max allowed\"\n        );\n        require(\n            performanceFeeStrategy <= MAX_PERFORMANCE_FEE_STRATEGY,\n            \"Performance fee too high\"\n        );\n\n        strategies[newStrategy].weightage = weightage;\n        _setTotalWeightInStrategies(totalWeightInStrategies);\n        // solhint-disable-next-line not-rely-on-time\n        strategies[newStrategy].activation = block.timestamp;\n        strategies[newStrategy].indexInList = getStrategyCount();\n        strategies[newStrategy].performanceFeeStrategy = performanceFeeStrategy;\n        strategyList.push(newStrategy);\n        _setShouldRebalance(true);\n\n        IERC20(_underlying()).safeApprove(newStrategy, 0);\n        IERC20(_underlying()).safeApprove(newStrategy, type(uint256).max);\n\n        emit StrategyAdded(newStrategy, weightage, performanceFeeStrategy);\n    }\n\n    function removeStrategy(address activeStrategy)\n        external\n        onlyFundManagerOrGovernance\n    {\n        require(\n            activeStrategy != ZERO_ADDRESS,\n            \"current strategy cannot be empty\"\n        );\n        require(\n            isActiveStrategy(activeStrategy),\n            \"This strategy is not active in this fund\"\n        );\n\n        _setTotalWeightInStrategies(\n            _totalWeightInStrategies().sub(strategies[activeStrategy].weightage)\n        );\n        uint256 totalStrategies = getStrategyCount();\n        for (\n            uint256 i = strategies[activeStrategy].indexInList;\n            i < totalStrategies - 1;\n            i++\n        ) {\n            strategyList[i] = strategyList[i + 1];\n            strategies[strategyList[i]].indexInList = i;\n        }\n        strategyList.pop();\n        delete strategies[activeStrategy];\n        IERC20(_underlying()).safeApprove(activeStrategy, 0);\n        IStrategy(activeStrategy).withdrawAllToFund();\n        _setShouldRebalance(true);\n\n        emit StrategyRemoved(activeStrategy);\n    }\n\n    function updateStrategyWeightage(\n        address activeStrategy,\n        uint256 newWeightage\n    ) external onlyFundManagerOrGovernance {\n        require(\n            activeStrategy != ZERO_ADDRESS,\n            \"current strategy cannot be empty\"\n        );\n        require(\n            isActiveStrategy(activeStrategy),\n            \"This strategy is not active in this fund\"\n        );\n        require(newWeightage > 0, \"The weightage should be greater than 0\");\n        uint256 totalWeightInStrategies =\n            _totalWeightInStrategies()\n                .sub(strategies[activeStrategy].weightage)\n                .add(newWeightage);\n        require(\n            totalWeightInStrategies <= _maxInvestmentInStrategies(),\n            \"Total investment can't be above max allowed\"\n        );\n\n        _setTotalWeightInStrategies(totalWeightInStrategies);\n        strategies[activeStrategy].weightage = newWeightage;\n        _setShouldRebalance(true);\n\n        emit StrategyWeightageUpdated(activeStrategy, newWeightage);\n    }\n\n    function updateStrategyPerformanceFee(\n        address activeStrategy,\n        uint256 newPerformanceFeeStrategy\n    ) external onlyFundManagerOrGovernance {\n        require(\n            activeStrategy != ZERO_ADDRESS,\n            \"current strategy cannot be empty\"\n        );\n        require(\n            isActiveStrategy(activeStrategy),\n            \"This strategy is not active in this fund\"\n        );\n        require(\n            newPerformanceFeeStrategy <= MAX_PERFORMANCE_FEE_STRATEGY,\n            \"Performance fee too high\"\n        );\n\n        strategies[activeStrategy]\n            .performanceFeeStrategy = newPerformanceFeeStrategy;\n\n        emit StrategyPerformanceFeeUpdated(\n            activeStrategy,\n            newPerformanceFeeStrategy\n        );\n    }\n\n    function processFees() internal {\n        uint256 profitToFund = 0;\n\n        for (uint256 i; i < getStrategyCount(); i++) {\n            address strategy = strategyList[i];\n\n            uint256 profit = 0;\n            uint256 strategyCreatorFee = 0;\n\n            if (\n                IStrategy(strategy).investedUnderlyingBalance() >\n                strategies[strategy].lastBalance\n            ) {\n                profit =\n                    IStrategy(strategy).investedUnderlyingBalance() -\n                    strategies[strategy].lastBalance;\n                strategyCreatorFee = profit\n                    .mul(strategies[strategy].performanceFeeStrategy)\n                    .div(MAX_BPS);\n                if (\n                    strategyCreatorFee > 0 &&\n                    strategyCreatorFee < underlyingBalanceInFund()\n                ) {\n                    IERC20(_underlying()).safeTransfer(\n                        IStrategy(strategy).creator(),\n                        strategyCreatorFee\n                    );\n                }\n                profitToFund = profitToFund.add(profit).sub(strategyCreatorFee);\n            }\n            emit StrategyRewards(strategy, profit, strategyCreatorFee);\n        }\n\n        uint256 fundManagerFee =\n            profitToFund.mul(_performanceFeeFund()).div(MAX_BPS);\n        if (fundManagerFee > 0 && fundManagerFee < underlyingBalanceInFund()) {\n            address fundManagerRewards =\n                (_fundManager() == _governance())\n                    ? _platformRewards()\n                    : _fundManager();\n            IERC20(_underlying()).safeTransfer(\n                fundManagerRewards,\n                fundManagerFee\n            );\n            emit FundManagerRewards(profitToFund, fundManagerFee);\n        }\n\n        uint256 platformFee =\n            // solhint-disable-next-line not-rely-on-time\n            (_totalInvested() * (block.timestamp - _lastHardworkTimestamp()))\n                .mul(_platformFee())\n                .div(MAX_BPS)\n                .div(SECS_PER_YEAR);\n\n        if (platformFee > 0 && platformFee < underlyingBalanceInFund()) {\n            IERC20(_underlying()).safeTransfer(_platformRewards(), platformFee);\n            emit PlatformRewards(\n                _totalInvested(),\n                // solhint-disable-next-line not-rely-on-time\n                block.timestamp - _lastHardworkTimestamp(),\n                platformFee\n            );\n        }\n    }\n\n    /*\n     * Invests the underlying capital to various strategies. Looks for weightage changes.\n     */\n    function doHardWork()\n        external\n        whenStrategyDefined\n        onlyFundManagerOrGovernanceOrRelayer\n    {\n        if (_lastHardworkTimestamp() > 0) {\n            processFees();\n        }\n        // ensure that new funds are invested too\n\n        if (_shouldRebalance()) {\n            _setShouldRebalance(false);\n            doHardWorkWithRebalance();\n        } else {\n            doHardWorkWithoutRebalance();\n        }\n        // solhint-disable-next-line not-rely-on-time\n        _setLastHardworkTimestamp(block.timestamp);\n        emit HardWorkDone(\n            underlyingBalanceWithInvestment(),\n            _getPricePerShare()\n        );\n    }\n\n    function doHardWorkWithoutRebalance() internal {\n        uint256 lastReserve =\n            _totalAccounted() > 0 ? _totalAccounted().sub(_totalInvested()) : 0;\n        uint256 availableAmountToInvest =\n            underlyingBalanceInFund() > lastReserve\n                ? underlyingBalanceInFund().sub(lastReserve)\n                : 0;\n\n        if (availableAmountToInvest == 0) {\n            return;\n        }\n\n        _setTotalAccounted(_totalAccounted().add(availableAmountToInvest));\n        uint256 totalInvested = 0;\n\n        for (uint256 i; i < getStrategyCount(); i++) {\n            address strategy = strategyList[i];\n            uint256 availableAmountForStrategy =\n                availableAmountToInvest.mul(strategies[strategy].weightage).div(\n                    MAX_BPS\n                );\n            if (availableAmountForStrategy > 0) {\n                IERC20(_underlying()).safeTransfer(\n                    strategy,\n                    availableAmountForStrategy\n                );\n                totalInvested = totalInvested.add(availableAmountForStrategy);\n                emit InvestInStrategy(strategy, availableAmountForStrategy);\n            }\n\n            IStrategy(strategy).doHardWork();\n\n            strategies[strategy].lastBalance = IStrategy(strategy)\n                .investedUnderlyingBalance();\n        }\n        _setTotalInvested(totalInvested);\n    }\n\n    function doHardWorkWithRebalance() internal {\n        uint256 totalUnderlyingWithInvestment =\n            underlyingBalanceWithInvestment();\n        _setTotalAccounted(totalUnderlyingWithInvestment);\n        uint256 totalInvested = 0;\n        uint256[] memory toDeposit = new uint256[](getStrategyCount());\n\n        for (uint256 i; i < getStrategyCount(); i++) {\n            address strategy = strategyList[i];\n            uint256 shouldBeInStrategy =\n                totalUnderlyingWithInvestment\n                    .mul(strategies[strategy].weightage)\n                    .div(MAX_BPS);\n            totalInvested = totalInvested.add(shouldBeInStrategy);\n            uint256 currentlyInStrategy =\n                IStrategy(strategy).investedUnderlyingBalance();\n            if (currentlyInStrategy > shouldBeInStrategy) {\n                // withdraw from strategy\n                IStrategy(strategy).withdrawToFund(\n                    currentlyInStrategy.sub(shouldBeInStrategy)\n                );\n            } else if (shouldBeInStrategy > currentlyInStrategy) {\n                // can not directly deposit here as there might not be enough balance before withdrawing from required strategies\n                toDeposit[i] = shouldBeInStrategy.sub(currentlyInStrategy);\n            }\n        }\n        _setTotalInvested(totalInvested);\n\n        for (uint256 i; i < getStrategyCount(); i++) {\n            address strategy = strategyList[i];\n            if (toDeposit[i] > 0) {\n                IERC20(_underlying()).safeTransfer(strategy, toDeposit[i]);\n                emit InvestInStrategy(strategy, toDeposit[i]);\n            }\n            IStrategy(strategy).doHardWork();\n\n            strategies[strategy].lastBalance = IStrategy(strategy)\n                .investedUnderlyingBalance();\n        }\n    }\n\n    function pauseDeposits(bool trigger) external onlyFundManagerOrGovernance {\n        _setDepositsPaused(trigger);\n    }\n\n    /*\n     * Allows for depositing the underlying asset in exchange for shares.\n     * Approval is assumed.\n     */\n    function deposit(uint256 amount)\n        external\n        override\n        nonReentrant\n        whenDepositsNotPaused\n    {\n        _deposit(amount, msg.sender, msg.sender);\n    }\n\n    /*\n     * Allows for depositing the underlying asset and shares assigned to the holder.\n     * This facilitates depositing for someone else (e.g. using DepositHelper)\n     */\n    function depositFor(uint256 amount, address holder)\n        external\n        override\n        nonReentrant\n        whenDepositsNotPaused\n    {\n        require(holder != ZERO_ADDRESS, \"holder must be defined\");\n        _deposit(amount, msg.sender, holder);\n    }\n\n    function _deposit(\n        uint256 amount,\n        address sender,\n        address beneficiary\n    ) internal {\n        require(amount > 0, \"Cannot deposit 0\");\n\n        if (_depositLimit() > 0) {\n            // if deposit limit is 0, then there is no deposit limit\n            require(\n                underlyingBalanceWithInvestment().add(amount) <=\n                    _depositLimit(),\n                \"Total deposit limit hit\"\n            );\n        }\n\n        if (_depositLimitTxMax() > 0) {\n            // if deposit limit is 0, then there is no deposit limit\n            require(\n                amount <= _depositLimitTxMax(),\n                \"Maximum transaction deposit limit hit\"\n            );\n        }\n\n        if (_depositLimitTxMin() > 0) {\n            // if deposit limit is 0, then there is no deposit limit\n            require(\n                amount >= _depositLimitTxMin(),\n                \"Minimum transaction deposit limit hit\"\n            );\n        }\n\n        uint256 toMint =\n            totalSupply() == 0\n                ? amount\n                : amount.mul(totalSupply()).div(\n                    underlyingBalanceWithInvestment()\n                );\n        _mint(beneficiary, toMint);\n\n        IERC20(_underlying()).safeTransferFrom(sender, address(this), amount);\n        emit Deposit(beneficiary, amount);\n    }\n\n    function withdraw(uint256 numberOfShares) external override nonReentrant {\n        require(totalSupply() > 0, \"Fund has no shares\");\n        require(numberOfShares > 0, \"numberOfShares must be greater than 0\");\n\n        uint256 underlyingAmountToWithdraw =\n            _underlyingFromShares(numberOfShares);\n        _burn(msg.sender, numberOfShares);\n\n        if (underlyingAmountToWithdraw > underlyingBalanceInFund()) {\n            uint256 missing =\n                underlyingAmountToWithdraw.sub(underlyingBalanceInFund());\n            uint256 missingCarryOver;\n            for (uint256 i; i < getStrategyCount(); i++) {\n                if (isActiveStrategy(strategyList[i])) {\n                    uint256 balanceBefore = underlyingBalanceInFund();\n                    uint256 weightage = strategies[strategyList[i]].weightage;\n                    uint256 missingforStrategy =\n                        (missing.mul(weightage).div(_totalWeightInStrategies()))\n                            .add(missingCarryOver);\n                    IStrategy(strategyList[i]).withdrawToFund(\n                        missingforStrategy\n                    );\n                    missingCarryOver = missingforStrategy\n                        .add(balanceBefore)\n                        .sub(underlyingBalanceInFund());\n                }\n            }\n            // recalculate to improve accuracy\n            underlyingAmountToWithdraw = MathUpgradeable.min(\n                underlyingAmountToWithdraw,\n                underlyingBalanceInFund()\n            );\n            _setShouldRebalance(true);\n        }\n\n        uint256 withdrawalFee =\n            underlyingAmountToWithdraw.mul(_withdrawalFee()).div(MAX_BPS);\n\n        if (withdrawalFee > 0) {\n            IERC20(_underlying()).safeTransfer(\n                _platformRewards(),\n                withdrawalFee\n            );\n            underlyingAmountToWithdraw = underlyingAmountToWithdraw.sub(\n                withdrawalFee\n            );\n        }\n\n        IERC20(_underlying()).safeTransfer(\n            msg.sender,\n            underlyingAmountToWithdraw\n        );\n\n        emit Withdraw(msg.sender, underlyingAmountToWithdraw, withdrawalFee);\n    }\n\n    /**\n    * Schedules an upgrade for this fund's proxy.\n    */\n    function scheduleUpgrade(address newImplementation) external onlyGovernance {\n        // Timelock implementation can be done here later\n        _setNextImplementation(newImplementation);\n    }\n\n    function shouldUpgrade() external view override returns (bool, address) {\n        return (_nextImplementation() != address(0), _nextImplementation());\n    }\n\n    function finalizeUpgrade() external override onlyGovernance {\n        _setNextImplementation(address(0));\n    }\n\n    function setFundManager(address newFundManager)\n        external\n        onlyFundManagerOrGovernance\n    {\n        _setFundManager(newFundManager);\n    }\n\n    function setRelayer(address newRelayer)\n        external\n        onlyFundManagerOrGovernance\n    {\n        _setRelayer(newRelayer);\n    }\n\n    function setPlatformRewards(address newRewards) external onlyGovernance {\n        _setPlatformRewards(newRewards);\n    }\n\n    function setShouldRebalance(bool trigger)\n        external\n        onlyFundManagerOrGovernance\n    {\n        _setShouldRebalance(trigger);\n    }\n\n    function setMaxInvestmentInStrategies(uint256 value)\n        external\n        onlyFundManagerOrGovernance\n    {\n        require(value < MAX_BPS, \"Value greater than 100%\");\n        _setMaxInvestmentInStrategies(value);\n    }\n\n    // if limit == 0 then there is no deposit limit\n    function setDepositLimit(uint256 limit)\n        external\n        onlyFundManagerOrGovernance\n    {\n        _setDepositLimit(limit);\n    }\n\n    function depositLimit() external view returns (uint256) {\n        return _depositLimit();\n    }\n\n    // if limit == 0 then there is no deposit limit\n    function setDepositLimitTxMax(uint256 limit)\n        external\n        onlyFundManagerOrGovernance\n    {\n        _setDepositLimitTxMax(limit);\n    }\n\n    function depositLimitTxMax() external view returns (uint256) {\n        return _depositLimitTxMax();\n    }\n\n    // if limit == 0 then there is no deposit limit\n    function setDepositLimitTxMin(uint256 limit)\n        external\n        onlyFundManagerOrGovernance\n    {\n        _setDepositLimitTxMin(limit);\n    }\n\n    function depositLimitTxMin() external view returns (uint256) {\n        return _depositLimitTxMin();\n    }\n\n    function setPerformanceFeeFund(uint256 fee)\n        external\n        onlyFundManagerOrGovernance\n    {\n        require(fee <= MAX_PERFORMANCE_FEE_FUND, \"Fee greater than max limit\");\n        _setPerformanceFeeFund(fee);\n    }\n\n    function performanceFeeFund() external view returns (uint256) {\n        return _performanceFeeFund();\n    }\n\n    function setPlatformFee(uint256 fee) external onlyFundManagerOrGovernance {\n        require(fee <= MAX_PLATFORM_FEE, \"Fee greater than max limit\");\n        _setPlatformFee(fee);\n    }\n\n    function platformFee() external view returns (uint256) {\n        return _platformFee();\n    }\n\n    function setWithdrawalFee(uint256 fee)\n        external\n        onlyFundManagerOrGovernance\n    {\n        require(fee <= MAX_WITHDRAWAL_FEE, \"Fee greater than max limit\");\n        _setWithdrawalFee(fee);\n    }\n\n    function withdrawalFee() external view returns (uint256) {\n        return _withdrawalFee();\n    }\n\n    // no tokens should ever be stored on this contract. Any tokens that are sent here by mistake are recoverable by governance\n    function sweep(address _token, address _sweepTo) external onlyGovernance {\n        require(_token != address(_underlying()), \"can not sweep underlying\");\n        IERC20(_token).safeTransfer(\n            _sweepTo,\n            IERC20(_token).balanceOf(address(this))\n        );\n    }\n}\n","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundManagerFee\",\"type\":\"uint256\"}],\"name\":\"FundManagerRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldGovernance\",\"type\":\"address\"}],\"name\":\"GovernanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalValueLocked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePerShare\",\"type\":\"uint256\"}],\"name\":\"HardWorkDone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InvestInStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeElapsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformFee\",\"type\":\"uint256\"}],\"name\":\"PlatformRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weightage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFeeStrategy\",\"type\":\"uint256\"}],\"name\":\"StrategyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPerformanceFeeStrategy\",\"type\":\"uint256\"}],\"name\":\"StrategyPerformanceFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strategyCreatorFee\",\"type\":\"uint256\"}],\"name\":\"StrategyRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWeightage\",\"type\":\"uint256\"}],\"name\":\"StrategyWeightageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStrategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weightage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"performanceFeeStrategy\",\"type\":\"uint256\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositLimitTxMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositLimitTxMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doHardWork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"getStrategy\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"weightage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"performanceFeeStrategy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexInList\",\"type\":\"uint256\"}],\"internalType\":\"struct Fund.StrategyParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategyList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"initializeFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_underlyingUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_fundManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_platformRewards\",\"type\":\"address\"}],\"name\":\"initializeFundStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"initializeGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"trigger\",\"type\":\"bool\"}],\"name\":\"pauseDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFeeFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"activeStrategy\",\"type\":\"address\"}],\"name\":\"removeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"scheduleUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setDepositLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setDepositLimitTxMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setDepositLimitTxMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFundManager\",\"type\":\"address\"}],\"name\":\"setFundManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxInvestmentInStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFeeFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setPlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRewards\",\"type\":\"address\"}],\"name\":\"setPlatformRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRelayer\",\"type\":\"address\"}],\"name\":\"setRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"trigger\",\"type\":\"bool\"}],\"name\":\"setShouldRebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldUpgrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weightage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"performanceFeeStrategy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexInList\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"strategyList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sweepTo\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValueLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"underlyingBalanceWithInvestmentForHolder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernance\",\"type\":\"address\"}],\"name\":\"updateGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"activeStrategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newPerformanceFeeStrategy\",\"type\":\"uint256\"}],\"name\":\"updateStrategyPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"activeStrategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newWeightage\",\"type\":\"uint256\"}],\"name\":\"updateStrategyWeightage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfShares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Fund","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}