{"status":"1","message":"OK","result":[{"SourceCode":"\"\"\"\r\n@title Greenwood CompoundCalculator\r\n@notice Compound calculations for the Greenwood Protocol\r\n@author Greenwood Labs\r\n\"\"\"\r\n\r\n# define the interfaces used by the contract\r\ninterface COMPOUND_PRICE_FEED:\r\n    def price(_ticker: String[10]) -> uint256: view\r\n\r\ninterface COMPTROLLER:\r\n    def markets(_c_token: address) -> (bool, uint256, bool): view\r\n\r\ninterface CTOKEN:\r\n    def mint(_mint_amount: uint256) -> uint256: payable\r\n    def borrow(_borrow_amount: uint256) -> uint256: payable\r\n    def repayBorrow(_repay_amount: uint256) -> uint256: payable\r\n    def borrowIndex() -> uint256: nonpayable\r\n    def redeemUnderlying(_redeem_amount: uint256) -> uint256: payable\r\n    def exchangeRateStored() -> uint256: nonpayable\r\n    def borrowRatePerBlock() -> uint256: nonpayable\r\n    def borrowBalanceCurrent(_account: address) -> uint256: nonpayable\r\n    def accrualBlockNumber() -> uint256: nonpayable\r\n\r\ninterface REGISTRY:\r\n    def getAddress(_contract: String[20], _version: String[11]) -> address: nonpayable\r\n    def governance() -> address: nonpayable\r\n\r\n# define the constants used by the contract\r\nLOOP_LIMIT: constant(uint256) = 100\r\nTEN_EXP_6: constant(uint256) = 1000000\r\nTEN_EXP_18: constant(uint256) = 1000000000000000000\r\nCONTRACT_PRECISION: constant(decimal) = 10000000000.0\r\n\r\n# define the events emitted by the contract\r\nevent SetFee:\r\n    previousFee: uint256\r\n    newFee: uint256\r\n    governance: address\r\n    blockNumber: uint256\r\n\r\nevent SetRegistry:\r\n    previousRegistry: address\r\n    newRegistry: address\r\n    governance: address\r\n    blockNumber: uint256\r\n\r\n# define the structs used by the contract\r\nstruct AssetContext:\r\n    aToken: address\r\n    aaveV2PriceFeed: address\r\n    aaveV2LendingPool: address\r\n    cToken: address\r\n    compoundPriceFeed: address\r\n    comptroller: address\r\n    decimals: uint256\r\n    underlying: address\r\n\r\nstruct Loan:\r\n    collateralAsset: address\r\n    borrowAsset: address\r\n    outstanding: uint256\r\n    collateralizationRatio: uint256\r\n    collateralLocked: uint256\r\n    borrower: address\r\n    lastBorrowIndex: uint256\r\n    repaymentTime: uint256\r\n\r\nstruct CompoundBorrowCalculation:\r\n    requiredCollateral: uint256\r\n    borrowAmount: uint256\r\n    originationFee: uint256\r\n\r\nstruct CompoundRepayCalculation:\r\n    repayAmount: uint256\r\n    redemptionAmount: int128\r\n    requiredCollateral: uint256\r\n    outstanding: int128\r\n\r\nstruct CompoundWithdrawCalculation:\r\n    requiredCollateral: uint256\r\n    outstanding: uint256\r\n\r\n# define the storage variables used by the contract\r\nprotocolFee: public(uint256)\r\nregistry: public(address)\r\n\r\n@external\r\ndef __init__(_protocol_fee: uint256, _registry: address):\r\n    \"\"\"\r\n    @notice Contract constructor\r\n    @param _protocol_fee The origination fee for the Greenwood Protocol scaled by 1e18\r\n    @param _registry The address of the Greenwood Registry\r\n    \"\"\"\r\n\r\n    # set the protocol fee\r\n    self.protocolFee = _protocol_fee\r\n\r\n    # set the address of the Greenwood Registry\r\n    self.registry = _registry\r\n\r\n@internal\r\ndef isAuthorized(_caller: address, _role: String[20], _version: String[11]) -> bool:\r\n    \"\"\"\r\n    @notice Method for role-based security\r\n    @param _caller The address that called the permissioned method\r\n    @param _role The requested authorization level\r\n    @param _version The version of Greenwood to use\r\n    @return True if the caller is authorized, False otherwise\r\n    \"\"\"\r\n\r\n    # check if the requested role is \"escrow\"\r\n    if keccak256(_role) == keccak256(\"escrow\"):\r\n\r\n        # get the address of the Escrow from the Registry\r\n        controller: address = REGISTRY(self.registry).getAddress(\"compoundEscrow\", _version)\r\n\r\n        # return the equality comparison\r\n        return controller == _caller\r\n    \r\n    # check if the requested role is \"governance\"\r\n    elif keccak256(_role) == keccak256(\"governance\"):\r\n\r\n        # get the address of the Governance from the Registry\r\n        governance: address = REGISTRY(self.registry).governance()\r\n\r\n        # return the equality comparison\r\n        return governance == _caller\r\n\r\n    # catch extraneous role arguments\r\n    else:\r\n\r\n        # revert\r\n        raise \"Unhandled role argument\"\r\n\r\n    \r\n@external\r\ndef calculateBorrow(_borrow_ticker: String[10], _collateral_ticker: String[10], _borrow_context: AssetContext, _collateral_context: AssetContext, _amount: uint256, _collateralization_ratio: uint256, _version: String[11]) -> CompoundBorrowCalculation:\r\n    \"\"\"\r\n    @notice Calculate and return values needed to open a loan on Compound\r\n    @param _borrow_ticker The ticker string of the asset that is being borrowed\r\n    @param _collateral_ticker The ticker string of the asset that is being used as collateral\r\n    @param _borrow_context The AssetContext struct of the asset being borrowed\r\n    @param _collateral_context The AssetContext struct of the asset being used as collateral\r\n    @param _amount The amount of asset being borrowed scaled by the asset's decimals\r\n    @param _collateralization_ratio The collateralization ratio for the loan\r\n    @param _version The version of the Greenwood Protocol to use\r\n    @return CompoundBorrowCalculation struct\r\n    @dev Only the CompoundEscrow or the Governance can call this method\r\n    \"\"\"\r\n\r\n    # require that the method caller is the Escrow or the Governance\r\n    assert self.isAuthorized(msg.sender, \"escrow\", _version) == True or self.isAuthorized(msg.sender, \"governance\", _version) == True\r\n\r\n    # setup memory variables to handle comptroller return values\r\n    isListed: bool = False\r\n    collateralFactorMantissa: uint256 = 0\r\n    isComped: bool = False\r\n\r\n    # get the collateral factor for the collateral asset using the comptroller\r\n    isListed, collateralFactorMantissa, isComped  = COMPTROLLER(_collateral_context.comptroller).markets(_collateral_context.cToken)\r\n\r\n    # convert collateralFactorMantissa to a percentage\r\n    collateralFactor: decimal = convert(collateralFactorMantissa, decimal) / convert(TEN_EXP_18, decimal)\r\n\r\n    # get the price of the borrow asset and the collateral asset denominated in USD\r\n    borrowAssetPriceExp: uint256 = COMPOUND_PRICE_FEED(_borrow_context.compoundPriceFeed).price(_borrow_ticker)\r\n    collateralAssetPriceExp: uint256 = COMPOUND_PRICE_FEED(_collateral_context.compoundPriceFeed).price(_collateral_ticker)\r\n\r\n    # scale down the asset prices and convert them to decimals\r\n    borrowAssetPrice: decimal = convert(borrowAssetPriceExp, decimal) / convert(TEN_EXP_6, decimal)\r\n    collateralAssetPrice: decimal = convert(collateralAssetPriceExp, decimal) / convert(TEN_EXP_6, decimal)\r\n\r\n    # convert the borrow amount to a decimal and scale it down\r\n    borrowAmount: decimal = convert(_amount, decimal) / convert(10 ** _borrow_context.decimals, decimal)\r\n\r\n    # calculate the protocol fee\r\n    originationFee: decimal = (borrowAmount * (convert(self.protocolFee, decimal) / convert(TEN_EXP_18, decimal))) / (collateralAssetPrice / borrowAssetPrice)\r\n\r\n    # calculate the value of the borrow request denominated in USD\r\n    borrowAmountInUSD: decimal = borrowAmount * borrowAssetPrice\r\n\r\n    # calculate the required collateral denominated in USD\r\n    requiredCollateralInUSD: decimal = borrowAmountInUSD / collateralFactor\r\n\r\n    # calculate the required collateral denominated in the collateral asset \r\n    requiredCollateral: decimal = requiredCollateralInUSD / collateralAssetPrice\r\n\r\n    # calculate the required collateral for Greenwood plus fees denominated in the collateral asset\r\n    requiredCollateralGreenwood: decimal = requiredCollateral * (convert(_collateralization_ratio, decimal) / 100.0)\r\n\r\n    # scale the required collateral for Greenwood by the decimals of the collateral asset\r\n    requiredCollateralScaled: uint256 = convert(requiredCollateralGreenwood * convert(10 ** _collateral_context.decimals, decimal), uint256)\r\n\r\n    return CompoundBorrowCalculation({\r\n        requiredCollateral: requiredCollateralScaled,\r\n        borrowAmount: convert(borrowAmount * convert(10 ** _borrow_context.decimals, decimal), uint256),    # scale the borrow amount back up and convert it to a uint256\r\n        originationFee: convert(originationFee * convert(10 ** _collateral_context.decimals, decimal), uint256) # scale the protocol fee back up and convert it to a uint256\r\n    })\r\n\r\n@external\r\ndef calculateWithdraw(_borrow_ticker: String[10], _collateral_ticker: String[10], _borrow_context: AssetContext, _collateral_context: AssetContext, _loan: Loan, _version: String[11]) -> CompoundWithdrawCalculation:\r\n    \"\"\"\r\n    @notice Calculate and return values needed to withdraw collateral from Compound\r\n    @param _borrow_ticker The ticker string of the asset that is being borrowed\r\n    @param _collateral_ticker The ticker string of the asset that is being used as collateral\r\n    @param _borrow_context The AssetContext struct of the asset being borrowed\r\n    @param _collateral_context The AssetContext struct of the asset being used as collateral\r\n    @param _loan A Loan struct containing loan data\r\n    @param _version The version of the Greenwood Protocol to use\r\n    @return CompoundWithdrawCalculation struct\r\n    @dev Only the CompoundEscrow or the Governance can call this method\r\n    \"\"\"\r\n\r\n    # require that the method caller is the Escrow or the Governance\r\n    assert self.isAuthorized(msg.sender, \"escrow\", _version) == True or self.isAuthorized(msg.sender, \"governance\", _version) == True, \"Only Escrow or Governance can call this method\"\r\n\r\n    # setup memory variables to handle comptroller return values\r\n    isListed: bool = False\r\n    collateralFactorMantissa: uint256 = 0\r\n    isComped: bool = False\r\n\r\n    # get the collateral factor for the collateral asset using the comptroller\r\n    isListed, collateralFactorMantissa, isComped  = COMPTROLLER(_collateral_context.comptroller).markets(_collateral_context.cToken)\r\n\r\n    # convert collateralFactorMantissa to a percentage\r\n    collateralFactor: decimal = convert(collateralFactorMantissa, decimal) / convert(TEN_EXP_18, decimal)\r\n\r\n    # get the current borrowIndex from the cToken\r\n    borrowIndex: uint256 = CTOKEN(_borrow_context.cToken).borrowIndex()\r\n\r\n    # calculate the interestAccrued since the last action on the loan\r\n    interestAccrued: decimal = convert(borrowIndex, decimal) / convert(_loan.lastBorrowIndex, decimal) - 1.0\r\n\r\n    # apply interest accrued to the outstanding balance of the loan\r\n    borrowBalanceScaled: uint256 = convert(convert(_loan.outstanding, decimal) * (1.0 + interestAccrued), uint256)\r\n\r\n    # get the price of the borrow asset and the collateral asset denominated in USD\r\n    borrowAssetPriceExp: uint256 = COMPOUND_PRICE_FEED(_borrow_context.compoundPriceFeed).price(_borrow_ticker)\r\n    collateralAssetPriceExp: uint256 = COMPOUND_PRICE_FEED(_collateral_context.compoundPriceFeed).price(_collateral_ticker)\r\n\r\n    # scale down the asset prices and convert them to decimals\r\n    borrowAssetPrice: decimal = convert(borrowAssetPriceExp, decimal) / convert(TEN_EXP_6, decimal)\r\n    collateralAssetPrice: decimal = convert(collateralAssetPriceExp, decimal) / convert(TEN_EXP_6, decimal)\r\n\r\n    # convert the borrow balance to a decimal and scale it down\r\n    borrowBalance: decimal = convert(borrowBalanceScaled, decimal) / convert(10 ** _borrow_context.decimals, decimal)\r\n\r\n    # calculate the value of the outstanding balance denominated in USD\r\n    borrowAmountInUSD: decimal = borrowBalance * borrowAssetPrice\r\n\r\n    # calculate the required collateral denominated in USD\r\n    requiredCollateralInUSD: decimal = borrowAmountInUSD / collateralFactor\r\n\r\n    # calculate the required collateral denominated in the collateral asset \r\n    requiredCollateral: decimal = requiredCollateralInUSD / collateralAssetPrice\r\n\r\n    # calculate the required collateral for Greenwood denominated in the collateral asset \r\n    requiredCollateralGreenwood: decimal = requiredCollateral * (convert(_loan.collateralizationRatio, decimal) / 100.0)\r\n\r\n    # scale the required collateral for Greenwood by the decimals of the collateral asset\r\n    requiredCollateralScaled: uint256 = convert(requiredCollateralGreenwood * convert(10 ** _collateral_context.decimals, decimal), uint256)\r\n\r\n    return CompoundWithdrawCalculation({\r\n        requiredCollateral: requiredCollateralScaled,\r\n        outstanding: borrowBalanceScaled\r\n    })\r\n\r\n@external\r\ndef calculateRepay(_borrow_ticker: String[10], _collateral_ticker: String[10], _borrow_context: AssetContext, _collateral_context: AssetContext, _amount: uint256, _loan: Loan, _version: String[11]) -> CompoundRepayCalculation:\r\n    \"\"\"\r\n    @notice Calculate and return values needed to repay a loan on Compound\r\n    @param _borrow_ticker The ticker string of the asset that is being borrowed\r\n    @param _collateral_ticker The ticker string of the asset that is being used as collateral\r\n    @param _borrow_context The AssetContext struct of the asset being borrowed\r\n    @param _collateral_context The AssetContext struct of the asset being used as collateral\r\n    @param _amount The amount of asset being repaid scaled by the asset's decimals\r\n    @param _loan The Loan struct containing the data for the loan\r\n    @param _version The version of the Greenwood Protocol to use\r\n    @return CompoundRepayCalculation struct\r\n    @dev Only the CompoundEscrow or the Governance can call this method\r\n    \"\"\"\r\n\r\n    # require that the method caller is the Escrow or the Governance\r\n    assert self.isAuthorized(msg.sender, \"escrow\", _version) == True or self.isAuthorized(msg.sender, \"governance\", _version) == True, \"Only Escrow or Governance can call this method\"\r\n    \r\n    # check if the borrow ticker is ETH\r\n    if keccak256(_borrow_ticker) == keccak256('ETH'):\r\n        \r\n        # call repayBorrow() on the cEther with a value of 0 to refresh the borrowIndex\r\n        raw_call(\r\n            _borrow_context.cToken,\r\n            method_id(\"repayBorrow()\"),\r\n            value = 0\r\n        )\r\n    \r\n    # check if the borrow ticker is BAT\r\n    elif keccak256(_borrow_ticker) == keccak256('BAT'):\r\n\r\n        # do not attempt to refresh the borrow index\r\n        pass\r\n\r\n    else:\r\n\r\n        # call repayBorrow() on the cToken with a value of 0 to refresh the borrowIndex\r\n        CTOKEN(_borrow_context.cToken).repayBorrow(0)\r\n\r\n    # get the borrowIndex from the cToken\r\n    borrowIndex: uint256 = CTOKEN(_borrow_context.cToken).borrowIndex()\r\n\r\n    # calculate the interestAccrued on the borrow\r\n    interestAccrued: decimal = convert(borrowIndex, decimal) / convert(_loan.lastBorrowIndex, decimal) - 1.0\r\n\r\n    # apply interest accrued to the outstanding balance of the loan\r\n    borrowBalance: uint256 = convert(convert(_loan.outstanding, decimal) * (1.0 + interestAccrued), uint256)\r\n           \r\n    # declare a memory variable to store the repayment amount \r\n    repayAmount: uint256 = 0\r\n\r\n    # check if this is a full repayment or an over-repayment\r\n    if _amount == MAX_UINT256 or _amount > borrowBalance:\r\n\r\n        # set repaymentAmount to be the borrowBalance\r\n        repayAmount = borrowBalance\r\n\r\n    # handle partial repayment\r\n    else:\r\n\r\n        # set repaymentAmount to be the requested amount\r\n        repayAmount = _amount\r\n\r\n    # subtract the repayment amount from borrowBalance to get the outstandingBalance\r\n    outstandingBalanceScaled: int128 = convert(borrowBalance, int128) - convert(repayAmount, int128)\r\n\r\n    # setup memory variables to handle comptroller return values\r\n    isListed: bool = False\r\n    collateralFactorMantissa: uint256 = 0\r\n    isComped: bool = False\r\n\r\n    # get the collateral factor for the collateral asset using the comptroller\r\n    isListed, collateralFactorMantissa, isComped  = COMPTROLLER(_collateral_context.comptroller).markets(_collateral_context.cToken)\r\n\r\n    # convert collateralFactorMantissa to a percentage\r\n    collateralFactor: decimal = convert(collateralFactorMantissa, decimal) / convert(TEN_EXP_18, decimal)\r\n\r\n    # get the price of the borrow asset and the collateral asset denominated in USD\r\n    borrowAssetPriceExp: uint256 = COMPOUND_PRICE_FEED(_borrow_context.compoundPriceFeed).price(_borrow_ticker)\r\n    collateralAssetPriceExp: uint256 = COMPOUND_PRICE_FEED(_collateral_context.compoundPriceFeed).price(_collateral_ticker)\r\n\r\n    # scale down the asset prices and convert them to decimals\r\n    borrowAssetPrice: decimal = convert(borrowAssetPriceExp, decimal) / convert(TEN_EXP_6, decimal)\r\n    collateralAssetPrice: decimal = convert(collateralAssetPriceExp, decimal) / convert(TEN_EXP_6, decimal)\r\n\r\n    # convert the outstanding balance to a decimal and scale it down\r\n    outstandingBalance: decimal = convert(outstandingBalanceScaled, decimal) / convert(10 ** _borrow_context.decimals, decimal)\r\n\r\n    # calculate the value of the outstanding balance denominated in USD\r\n    borrowAmountInUSD: decimal = outstandingBalance * borrowAssetPrice\r\n\r\n    # calculate the required collateral denominated in USD\r\n    requiredCollateralInUSD: decimal = borrowAmountInUSD / collateralFactor\r\n\r\n    # calculate the required collateral denominated in the collateral asset \r\n    requiredCollateral: decimal = requiredCollateralInUSD / collateralAssetPrice\r\n\r\n    # calculate the required collateral for Greenwood denominated in the collateral asset\r\n    requiredCollateralGreenwood: decimal = requiredCollateral * (convert(_loan.collateralizationRatio, decimal) / 100.0)\r\n\r\n    # scale the required collateral for Greenwood by the decimals of the collateral asset\r\n    requiredCollateralScaled: uint256 = convert(requiredCollateralGreenwood * convert(10 ** _collateral_context.decimals, decimal), uint256)\r\n\r\n    # calculate the redemption amount\r\n    redemptionAmount: int128 = convert(_loan.collateralLocked, int128) - convert(requiredCollateralScaled, int128)\r\n\r\n    return CompoundRepayCalculation({\r\n        repayAmount: repayAmount,\r\n        redemptionAmount: redemptionAmount,\r\n        requiredCollateral: requiredCollateralScaled,\r\n        outstanding: convert(outstandingBalance * convert(10 ** _borrow_context.decimals, decimal), int128), # scale the outstanding balance back up and convert it to an int128\r\n    })\r\n\r\n@external\r\ndef setProtocolFee(_new_fee: uint256):\r\n    \"\"\"\r\n    @notice Updates the protocol fee\r\n    @param _new_fee The new protocol fee\r\n    @dev Only the Governance can call this method \r\n    \"\"\"\r\n\r\n    # require that the method caller is the Governance\r\n    assert self.isAuthorized(msg.sender, \"governance\", \"\") == True, \"Only Governance can call this method\"\r\n\r\n    # get the previous protocol fee\r\n    previousFee: uint256 = self.protocolFee\r\n\r\n    # update the protocol fee\r\n    self.protocolFee = _new_fee\r\n\r\n    # emit a SetFee event\r\n    log SetFee(previousFee, _new_fee, msg.sender, block.number)\r\n\r\n@external\r\ndef setRegistry(_new_registry: address):\r\n    \"\"\"\r\n    @notice Updates the address of the Registry\r\n    @param _new_registry The address of the new Greenwood Registry\r\n    @dev Only the Governance can call this method\r\n    @dev Only call this method with a valid Greenwood Registry or subsequent calls will fail!\r\n    \"\"\"\r\n\r\n    # require that the method caller is the Governance\r\n    assert self.isAuthorized(msg.sender, \"governance\", \"\") == True, \"Only Governance can call this method\"\r\n\r\n    # get the previous Registry\r\n    previousRegistry: address = self.registry\r\n\r\n    # update the address of the Registry\r\n    self.registry = _new_registry\r\n\r\n    # emit a SetRegistry event\r\n    log SetRegistry(previousRegistry, _new_registry, msg.sender, block.number)","ABI":"[{\"name\":\"SetFee\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"previousFee\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"newFee\",\"indexed\":false},{\"type\":\"address\",\"name\":\"governance\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"blockNumber\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetRegistry\",\"inputs\":[{\"type\":\"address\",\"name\":\"previousRegistry\",\"indexed\":false},{\"type\":\"address\",\"name\":\"newRegistry\",\"indexed\":false},{\"type\":\"address\",\"name\":\"governance\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"blockNumber\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"outputs\":[],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_protocol_fee\"},{\"type\":\"address\",\"name\":\"_registry\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"name\":\"calculateBorrow\",\"outputs\":[{\"type\":\"tuple\",\"name\":\"\",\"components\":[{\"type\":\"uint256\",\"name\":\"requiredCollateral\"},{\"type\":\"uint256\",\"name\":\"borrowAmount\"},{\"type\":\"uint256\",\"name\":\"originationFee\"}]}],\"inputs\":[{\"type\":\"string\",\"name\":\"_borrow_ticker\"},{\"type\":\"string\",\"name\":\"_collateral_ticker\"},{\"type\":\"tuple\",\"name\":\"_borrow_context\",\"components\":[{\"type\":\"address\",\"name\":\"aToken\"},{\"type\":\"address\",\"name\":\"aaveV2PriceFeed\"},{\"type\":\"address\",\"name\":\"aaveV2LendingPool\"},{\"type\":\"address\",\"name\":\"cToken\"},{\"type\":\"address\",\"name\":\"compoundPriceFeed\"},{\"type\":\"address\",\"name\":\"comptroller\"},{\"type\":\"uint256\",\"name\":\"decimals\"},{\"type\":\"address\",\"name\":\"underlying\"}]},{\"type\":\"tuple\",\"name\":\"_collateral_context\",\"components\":[{\"type\":\"address\",\"name\":\"aToken\"},{\"type\":\"address\",\"name\":\"aaveV2PriceFeed\"},{\"type\":\"address\",\"name\":\"aaveV2LendingPool\"},{\"type\":\"address\",\"name\":\"cToken\"},{\"type\":\"address\",\"name\":\"compoundPriceFeed\"},{\"type\":\"address\",\"name\":\"comptroller\"},{\"type\":\"uint256\",\"name\":\"decimals\"},{\"type\":\"address\",\"name\":\"underlying\"}]},{\"type\":\"uint256\",\"name\":\"_amount\"},{\"type\":\"uint256\",\"name\":\"_collateralization_ratio\"},{\"type\":\"string\",\"name\":\"_version\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":23433},{\"name\":\"calculateWithdraw\",\"outputs\":[{\"type\":\"tuple\",\"name\":\"\",\"components\":[{\"type\":\"uint256\",\"name\":\"requiredCollateral\"},{\"type\":\"uint256\",\"name\":\"outstanding\"}]}],\"inputs\":[{\"type\":\"string\",\"name\":\"_borrow_ticker\"},{\"type\":\"string\",\"name\":\"_collateral_ticker\"},{\"type\":\"tuple\",\"name\":\"_borrow_context\",\"components\":[{\"type\":\"address\",\"name\":\"aToken\"},{\"type\":\"address\",\"name\":\"aaveV2PriceFeed\"},{\"type\":\"address\",\"name\":\"aaveV2LendingPool\"},{\"type\":\"address\",\"name\":\"cToken\"},{\"type\":\"address\",\"name\":\"compoundPriceFeed\"},{\"type\":\"address\",\"name\":\"comptroller\"},{\"type\":\"uint256\",\"name\":\"decimals\"},{\"type\":\"address\",\"name\":\"underlying\"}]},{\"type\":\"tuple\",\"name\":\"_collateral_context\",\"components\":[{\"type\":\"address\",\"name\":\"aToken\"},{\"type\":\"address\",\"name\":\"aaveV2PriceFeed\"},{\"type\":\"address\",\"name\":\"aaveV2LendingPool\"},{\"type\":\"address\",\"name\":\"cToken\"},{\"type\":\"address\",\"name\":\"compoundPriceFeed\"},{\"type\":\"address\",\"name\":\"comptroller\"},{\"type\":\"uint256\",\"name\":\"decimals\"},{\"type\":\"address\",\"name\":\"underlying\"}]},{\"type\":\"tuple\",\"name\":\"_loan\",\"components\":[{\"type\":\"address\",\"name\":\"collateralAsset\"},{\"type\":\"address\",\"name\":\"borrowAsset\"},{\"type\":\"uint256\",\"name\":\"outstanding\"},{\"type\":\"uint256\",\"name\":\"collateralizationRatio\"},{\"type\":\"uint256\",\"name\":\"collateralLocked\"},{\"type\":\"address\",\"name\":\"borrower\"},{\"type\":\"uint256\",\"name\":\"lastBorrowIndex\"},{\"type\":\"uint256\",\"name\":\"repaymentTime\"}]},{\"type\":\"string\",\"name\":\"_version\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":23168},{\"name\":\"calculateRepay\",\"outputs\":[{\"type\":\"tuple\",\"name\":\"\",\"components\":[{\"type\":\"uint256\",\"name\":\"repayAmount\"},{\"type\":\"int128\",\"name\":\"redemptionAmount\"},{\"type\":\"uint256\",\"name\":\"requiredCollateral\"},{\"type\":\"int128\",\"name\":\"outstanding\"}]}],\"inputs\":[{\"type\":\"string\",\"name\":\"_borrow_ticker\"},{\"type\":\"string\",\"name\":\"_collateral_ticker\"},{\"type\":\"tuple\",\"name\":\"_borrow_context\",\"components\":[{\"type\":\"address\",\"name\":\"aToken\"},{\"type\":\"address\",\"name\":\"aaveV2PriceFeed\"},{\"type\":\"address\",\"name\":\"aaveV2LendingPool\"},{\"type\":\"address\",\"name\":\"cToken\"},{\"type\":\"address\",\"name\":\"compoundPriceFeed\"},{\"type\":\"address\",\"name\":\"comptroller\"},{\"type\":\"uint256\",\"name\":\"decimals\"},{\"type\":\"address\",\"name\":\"underlying\"}]},{\"type\":\"tuple\",\"name\":\"_collateral_context\",\"components\":[{\"type\":\"address\",\"name\":\"aToken\"},{\"type\":\"address\",\"name\":\"aaveV2PriceFeed\"},{\"type\":\"address\",\"name\":\"aaveV2LendingPool\"},{\"type\":\"address\",\"name\":\"cToken\"},{\"type\":\"address\",\"name\":\"compoundPriceFeed\"},{\"type\":\"address\",\"name\":\"comptroller\"},{\"type\":\"uint256\",\"name\":\"decimals\"},{\"type\":\"address\",\"name\":\"underlying\"}]},{\"type\":\"uint256\",\"name\":\"_amount\"},{\"type\":\"tuple\",\"name\":\"_loan\",\"components\":[{\"type\":\"address\",\"name\":\"collateralAsset\"},{\"type\":\"address\",\"name\":\"borrowAsset\"},{\"type\":\"uint256\",\"name\":\"outstanding\"},{\"type\":\"uint256\",\"name\":\"collateralizationRatio\"},{\"type\":\"uint256\",\"name\":\"collateralLocked\"},{\"type\":\"address\",\"name\":\"borrower\"},{\"type\":\"uint256\",\"name\":\"lastBorrowIndex\"},{\"type\":\"uint256\",\"name\":\"repaymentTime\"}]},{\"type\":\"string\",\"name\":\"_version\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":26440},{\"name\":\"setProtocolFee\",\"outputs\":[],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_new_fee\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":46859},{\"name\":\"setRegistry\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_new_registry\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":46928},{\"name\":\"protocolFee\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1331},{\"name\":\"registry\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1361}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.3","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ddbb7a21905c6a8dbd76b20b7c6b3a55d1af24f","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}