{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: contracts/Round.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity 0.6.12;\r\n\r\n\r\nabstract contract RoundStorage {\r\n    // fee to owner of this game\r\n    // fee value = real fee percent value * (10**6)\r\n    uint256 public fee;\r\n\r\n    // amount players can bet\r\n    uint256 public amount;\r\n\r\n    // number of seconds of a round\r\n    uint public roundTime;\r\n\r\n    struct Round {\r\n        // round is over and calculated reward or no\r\n        bool finalized;\r\n\r\n        uint startTime;\r\n        uint endTime;\r\n        uint256 fee;\r\n        uint256 amount;\r\n    }\r\n\r\n    Round[] public rounds;\r\n}\r\n\r\ncontract Round is RoundStorage {\r\n    event Bet(uint256 indexed round, address indexed player, uint256 indexed amount);\r\n    event RoundStarted(uint256 indexed round);\r\n    event RoundEnded(uint256 indexed round);\r\n\r\n    function getCurrentRoundNumber() public view returns(uint256) {\r\n        if (rounds.length > 0) {\r\n            return rounds.length - 1;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function getCurrentRound() public view returns (uint256 number, uint start, uint end, uint256 betAmount) {\r\n        uint256 currentRoundNumber = getCurrentRoundNumber();\r\n        return (\r\n            currentRoundNumber,\r\n            rounds[currentRoundNumber].startTime,\r\n            rounds[currentRoundNumber].endTime,\r\n            rounds[currentRoundNumber].amount\r\n        );\r\n    }\r\n\r\n    function updateRoundFirstDeposit() internal {\r\n        uint256 currentRound = getCurrentRoundNumber();\r\n        if (rounds[currentRound].endTime == 0) {\r\n            rounds[currentRound].endTime = now + roundTime;\r\n        }\r\n    }\r\n\r\n    function roundOver() internal view returns(bool) {\r\n        uint256 currentRound = getCurrentRoundNumber();\r\n        if (rounds[currentRound].endTime == 0) {\r\n            return false;\r\n        } else {\r\n            return rounds[currentRound].endTime < now;\r\n        }\r\n    }\r\n\r\n    function newRound() internal {\r\n        rounds.push(Round({\r\n            finalized: false,\r\n            startTime: now,\r\n            endTime: 0, // the round start when have 1 deposit\r\n            fee: fee,\r\n            amount: amount\r\n        }));\r\n\r\n        emit RoundStarted(getCurrentRoundNumber());\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/TransferHelper.sol\r\n\r\n\r\n// pragma solidity >=0.6.0;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/Balance.sol\r\n\r\n\r\n// pragma solidity 0.6.12;\r\n\r\n// import \"contracts/TransferHelper.sol\";\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\n\r\nabstract contract BalanceStorage {\r\n    mapping(address => uint256) public balances;\r\n}\r\n\r\ncontract Balance is BalanceStorage {\r\n    using SafeMath for uint256;\r\n\r\n    // user claim their reward\r\n    function claim() public {\r\n        TransferHelper.safeTransferETH(msg.sender, balances[msg.sender]);\r\n        balances[msg.sender] = 0;\r\n    }\r\n\r\n    function addBalance(address _user, uint256 _amount) internal {\r\n        balances[_user] = balances[_user].add(_amount);\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/Maintainer.sol\r\n\r\n\r\n// pragma solidity 0.6.12;\r\n\r\n\r\nabstract contract Maintainer {\r\n    address public maintainer;\r\n\r\n    modifier onlyMaintainer() {\r\n        require(msg.sender == maintainer, \"ERROR: permission denied, only maintainer\");\r\n        _;\r\n    }\r\n\r\n    function setMaintainer(address _maintainer) external virtual;\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n// import \"@openzeppelin/contracts/GSN/Context.sol\";\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// Root file: contracts/RunningMan.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n// import \"contracts/Round.sol\";\r\n// import \"contracts/Balance.sol\";\r\n// import \"contracts/Maintainer.sol\";\r\n// import \"contracts/TransferHelper.sol\";\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n\r\ncontract RunningMan is Ownable, Round, Balance, Maintainer {\r\n    using SafeMath for uint256;\r\n    uint256 public winPercent;\r\n\r\n    enum State {\r\n        UNDEFINED, WIN, LOSE, REFUND\r\n    }\r\n\r\n    struct Player {\r\n        address payable addr;\r\n        uint256 balance;\r\n        State state;\r\n    }\r\n\r\n    mapping(uint256 => Player[]) public players;\r\n\r\n    constructor(\r\n        uint256 _fee,\r\n        uint256 _winPercent,\r\n        uint256 _amount,\r\n        uint256 _roundTime,\r\n        address _maintainer\r\n    ) public {\r\n        fee = _fee;\r\n        amount = _amount;\r\n        roundTime = _roundTime;\r\n        winPercent = _winPercent;\r\n        maintainer = _maintainer;\r\n\r\n        newRound();\r\n    }\r\n\r\n    // get total bet in this round\r\n    function getCurrentRoundBalance() public view returns(uint256 balance) {\r\n        uint256 currentRound = getCurrentRoundNumber();\r\n\r\n        uint256 total;\r\n        for (uint256 i=0; i<players[currentRound].length; i++) {\r\n            total = total.add(players[currentRound][i].balance);\r\n        }\r\n        return total;\r\n    }\r\n\r\n    // player get their info in single round\r\n    function getPlayer(uint256 _round, address payable _player) public view returns(uint256 playerBet, State playerState) {\r\n        for (uint256 i=0; i<players[_round].length; i++) {\r\n            if (players[_round][i].addr == _player) {\r\n                return (players[_round][i].balance, players[_round][i].state);\r\n            }\r\n        }\r\n\r\n        return (0, State.UNDEFINED);\r\n    }\r\n\r\n    // get total players of current round\r\n    function getRoundPlayers(uint256 _round) public view returns(uint256) {\r\n        return players[_round].length;\r\n    }\r\n\r\n    // player get their balance in single round\r\n    function getBalance(uint256 _round, address payable _player) public view returns(uint256) {\r\n        if (_round <= rounds.length - 1) {\r\n            for (uint256 i=0; i<players[_round].length; i++) {\r\n                if (players[_round][i].addr == _player) {\r\n                    return players[_round][i].balance;\r\n                }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function bet() public payable {\r\n        uint256 currentRound = getCurrentRoundNumber();\r\n        require(msg.value == rounds[currentRound].amount, \"ERROR: amount not allowed\");\r\n        if (rounds[currentRound].endTime !=0 )\r\n            require(rounds[currentRound].endTime >= now, \"ERROR: round is over\");\r\n\r\n        bool isBet;\r\n        for (uint256 i=0; i<players[currentRound].length; i++) {\r\n            if (players[currentRound][i].addr == msg.sender) {\r\n                isBet = true;\r\n            }\r\n        }\r\n\r\n        require(isBet == false, \"ERROR: already bet\");\r\n        \r\n        if (!isBet) {\r\n            players[currentRound].push(Player({\r\n                addr: msg.sender,\r\n                balance: msg.value,\r\n                state: State.UNDEFINED\r\n            }));\r\n\r\n            updateRoundFirstDeposit();\r\n            emit Bet(currentRound, msg.sender, msg.value);\r\n        }\r\n    }\r\n\r\n    // open new round\r\n    function _open() internal {\r\n        newRound();\r\n    }\r\n\r\n    function _end() internal {\r\n        uint256 currentRound = getCurrentRoundNumber();\r\n        _calculate(currentRound);\r\n        rounds[currentRound].finalized = true;\r\n\r\n        emit RoundEnded(currentRound);\r\n    }\r\n\r\n    // calculate winners and profit\r\n    function _calculate(uint256 _round) internal {\r\n        uint256 onePercent = 100*(10**6);\r\n        uint256 numberOfWinners = players[_round].length.mul(winPercent).div(onePercent);\r\n\r\n        if (numberOfWinners <= 0) {\r\n            // not enough players to play the game\r\n            // refund to user\r\n            for (uint256 i=0 ;i<players[_round].length; i++) {\r\n                TransferHelper.safeTransferETH(players[_round][i].addr, players[_round][i].balance);\r\n                players[_round][i].state = State.REFUND;\r\n            }\r\n        } else {\r\n            uint256 totalReward;\r\n            for (uint256 i=0; i<players[_round].length; i++) {\r\n                totalReward = totalReward.add(players[_round][i].balance);\r\n                if (i < numberOfWinners) {\r\n                    players[_round][i].state = State.WIN;\r\n                } else {\r\n                    players[_round][i].state = State.LOSE;\r\n                }\r\n            }\r\n\r\n            uint256 feeAmount = totalReward.mul(fee).div(100).div(10**6);\r\n            TransferHelper.safeTransferETH(owner(), feeAmount);\r\n            totalReward = totalReward.sub(feeAmount);\r\n\r\n            uint256 winAmount = totalReward.div(numberOfWinners);\r\n            for (uint256 i=0; i<numberOfWinners; i++) {\r\n                players[_round][i].balance = winAmount;\r\n                addBalance(players[_round][i].addr, winAmount);\r\n                totalReward = totalReward.sub(winAmount);\r\n            }\r\n\r\n            if (totalReward > 0) {\r\n                TransferHelper.safeTransferETH(owner(), totalReward);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setRules(uint256 _fee, uint256 _amount, uint256 _roundTime, uint256 _winPercent) public onlyOwner {\r\n        fee = _fee;\r\n        amount = _amount;\r\n        roundTime = _roundTime;\r\n        winPercent = _winPercent;\r\n    }\r\n\r\n    function setMaintainer(address _maintainer) public override onlyOwner {\r\n        maintainer = _maintainer;\r\n    }\r\n\r\n    // require the round is over\r\n    // only maintainer address can trigger\r\n    function reset() public onlyMaintainer {\r\n        require(roundOver(), \"ERROR: round is not over\");\r\n        _end();\r\n        _open();\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_winPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_roundTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_maintainer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Bet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"RoundEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"RoundStarted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRoundBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRoundNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"playerBet\",\"type\":\"uint256\"},{\"internalType\":\"enum RunningMan.State\",\"name\":\"playerState\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getRoundPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maintainer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"enum RunningMan.State\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maintainer\",\"type\":\"address\"}],\"name\":\"setMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_winPercent\",\"type\":\"uint256\"}],\"name\":\"setRules\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RunningMan","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000009896800000000000000000000000000000000000000000000000000000000001312d0000000000000000000000000000000000000000000000000000b1a2bc2ec500000000000000000000000000000000000000000000000000000000000000093a800000000000000000000000007fade8852a05039701607ff0233d5079efef9501","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0bbee9087d1edd74738d6edd98261460b825860f420b5bce0508d2c4c483950d"}]}