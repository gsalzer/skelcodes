{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.2.1 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.0.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.0.0\r\n\r\n// : MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.0.0\r\n\r\n// : MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Escrow.sol\r\n\r\n//: MIT\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract Escrow is Ownable {\r\n    event agreementInitialized(uint256 amount);\r\n    event payment(uint256 amount);\r\n    event AgreementDefaulted(uint256 outstandingObligations);\r\n\r\n    struct TokenInfo {\r\n        address EYE;\r\n        address USDC; // 6 decimal places!\r\n        uint256 initialUSDCDebt;\r\n        uint256 initialEYEDeposit;\r\n        uint256 monthlyPayment;\r\n    }\r\n\r\n    struct UserInfo {\r\n        address Justin;\r\n        address DGVC;\r\n    }\r\n\r\n    enum AgreementPhaseEnum {\r\n        dormant,\r\n        initialized,\r\n        defaulted,\r\n        concluded,\r\n        emergencyShutdown\r\n    }\r\n\r\n    struct AgreementState {\r\n        AgreementPhaseEnum phase;\r\n        uint256 commencementTimeStamp;\r\n        uint256 accumulatedRepayments;\r\n    }\r\n\r\n    TokenInfo tokens;\r\n    UserInfo users;\r\n    AgreementState agreementState;\r\n    uint256 constant ONE_USDC = 1e6;\r\n    uint256 constant ONE_EYE = 1e18;\r\n    uint256 constant ARITHMETIC_FACTOR = 1e12;\r\n    uint8 constant EMERGENCY_SHUTDOWN_JUSTIN_INDEX = 0;\r\n    uint8 constant EMERGENCY_SHUTDOWN_DEGEN_INDEX = 1;\r\n    bool[2] emergencyShutdownMultisig;\r\n\r\n    constructor() {\r\n        users.DGVC = 0x8b6e96947349C5eFAbD44Bd8f8901D31951202c6;\r\n        users.Justin = msg.sender;\r\n\r\n        tokens.EYE = 0x155ff1A85F440EE0A382eA949f24CE4E0b751c65;\r\n        tokens.USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n        tokens.initialEYEDeposit = EYE(614521);\r\n        tokens.initialUSDCDebt = USDC(550000);\r\n        tokens.monthlyPayment = tokens.initialUSDCDebt / 18;\r\n\r\n        agreementState.phase = AgreementPhaseEnum.dormant;\r\n    }\r\n\r\n    function setAddresses(\r\n        address eye,\r\n        address usdc,\r\n        address dgvc\r\n    ) public onlyOwner {\r\n        uint256 id;\r\n        assembly {\r\n            id := chainid()\r\n        }\r\n        require(id != 1, \"ESCROW: addresses hardcoded on mainnet.\");\r\n        tokens.EYE = eye;\r\n        tokens.USDC = usdc;\r\n        users.DGVC = dgvc;\r\n    }\r\n\r\n    function initializeAgreement(uint256 USDC_units) public {\r\n        require(USDC_units < 550001, \"ESCROW: Check your input\");\r\n        agreementState.phase = AgreementPhaseEnum.initialized;\r\n        agreementState.commencementTimeStamp = block.timestamp;\r\n        IERC20 eye = IERC20(tokens.EYE);\r\n        uint256 balance = eye.balanceOf(address(this));\r\n        require(\r\n            balance >= tokens.initialEYEDeposit,\r\n            \"ESCROW: Degen must deposit EYE in order for agreement to commence.\"\r\n        );\r\n        emit agreementInitialized(USDC_units);\r\n        payDebtFrom(USDC_units, msg.sender);\r\n    }\r\n\r\n    function payDebt(uint256 USDC_units) public {\r\n        payDebtFrom(USDC_units, msg.sender);\r\n    }\r\n\r\n    function payDebtFrom(uint256 USDC_units, address payer) internal {\r\n        require(\r\n            agreementState.phase == AgreementPhaseEnum.initialized,\r\n            \"ESCROW: cannot pay on inactive escrow.\"\r\n        );\r\n        uint256 usdc =\r\n            USDC(USDC_units) + IERC20(tokens.USDC).balanceOf(address(this));\r\n\r\n        //payments made by debtor\r\n        agreementState.accumulatedRepayments += usdc;\r\n\r\n        //end debt binding if all obligations met\r\n        if (agreementState.accumulatedRepayments >= tokens.initialUSDCDebt) {\r\n            agreementState.phase = AgreementPhaseEnum.concluded;\r\n            usdc -=\r\n                agreementState.accumulatedRepayments -\r\n                tokens.initialUSDCDebt;\r\n        }\r\n\r\n        require(\r\n            IERC20(tokens.USDC).transferFrom(payer, users.DGVC, usdc),\r\n            \"ESCROW: debtor payment failed\"\r\n        );\r\n\r\n        uint256 proportionalPayment =\r\n            (usdc * ARITHMETIC_FACTOR) / tokens.initialUSDCDebt;\r\n        uint256 eyeToWithdraw =\r\n            (proportionalPayment * tokens.initialEYEDeposit) /\r\n                ARITHMETIC_FACTOR;\r\n        IERC20 eyeToken = IERC20(tokens.EYE);\r\n        uint256 balance = eyeToken.balanceOf(address(this));\r\n        if (\r\n            agreementState.phase == AgreementPhaseEnum.concluded ||\r\n            balance < eyeToWithdraw\r\n        ) {\r\n            eyeToWithdraw = balance;\r\n        }\r\n\r\n        require(\r\n            eyeToken.transfer(users.Justin, eyeToWithdraw),\r\n            \"ERC20: token transfer failed\"\r\n        );\r\n\r\n        emit payment(usdc);\r\n    }\r\n\r\n    function callEYE() public {\r\n        require(\r\n            msg.sender == users.DGVC,\r\n            \"ESCROW: only DGVC can call bad debt.\"\r\n        );\r\n        require(\r\n            agreementState.phase == AgreementPhaseEnum.initialized,\r\n            \"ESCROW: calling bad debt can only be done when agreement is active.\"\r\n        );\r\n\r\n        //only claim if debtor is more than a month behind on repayments\r\n\r\n        require(!isDebtorHealthy(), \"ESCROW: debtor in healthy position.\");\r\n        IERC20 eye = IERC20(tokens.EYE);\r\n        uint256 remainingEye = eye.balanceOf(address(this));\r\n        eye.transfer(users.DGVC, remainingEye);\r\n        agreementState.phase = AgreementPhaseEnum.defaulted;\r\n        emit AgreementDefaulted(\r\n            tokens.initialUSDCDebt - agreementState.accumulatedRepayments\r\n        );\r\n    }\r\n\r\n    //if true, degen can't call their debt\r\n    function isDebtorHealthy() public view returns (bool) {\r\n        int256 months = monthsAhead();\r\n        bool moreThanMonthBehind = months <= -1;\r\n        if (months == 0) {\r\n            //accounts for being at least 1 day overdue\r\n            int256 arrears =\r\n                int256(expectedPayments()) -\r\n                    int256(agreementState.accumulatedRepayments);\r\n            moreThanMonthBehind = arrears > 0;\r\n        }\r\n        return !moreThanMonthBehind;\r\n    }\r\n\r\n    function degenWithdraw() public {\r\n        require(\r\n            msg.sender == users.DGVC,\r\n            \"ESCROW: only DegenVC can call this function\"\r\n        );\r\n        require(\r\n            agreementState.phase == AgreementPhaseEnum.dormant,\r\n            \"ESCROW: Agreement has commenced.\"\r\n        );\r\n        uint256 balance = IERC20(tokens.EYE).balanceOf(address(this));\r\n        IERC20(tokens.EYE).transfer(users.DGVC, balance);\r\n    }\r\n\r\n    function expectedPayments() public view returns (uint256) {\r\n        uint256 monthsElapsed = getMonthsElapsed();\r\n        return tokens.monthlyPayment * monthsElapsed;\r\n    }\r\n\r\n    //positive number means Justin has more than met his requirement. Negative means he's in arrears\r\n    function monthsAhead() public view returns (int256 months) {\r\n        uint256 expected = expectedPayments();\r\n        int256 difference =\r\n            int256(agreementState.accumulatedRepayments) - int256(expected);\r\n        months = difference / int256(tokens.monthlyPayment);\r\n    }\r\n\r\n    function getMonthsElapsed() public view returns (uint256 monthsElapsed) {\r\n        monthsElapsed = getDaysElapsed() / 31;\r\n\r\n        if (monthsElapsed > 18) {\r\n            monthsElapsed = 18;\r\n        }\r\n    }\r\n\r\n    function getDaysElapsed() public view returns (uint256 daysElapsed) {\r\n        daysElapsed =\r\n            (block.timestamp - agreementState.commencementTimeStamp) /\r\n            (1 days);\r\n    }\r\n\r\n    function getDaysUntilNextPayDate() public view returns (uint256 daysLeft) {\r\n        uint256 totalDaysElapsed = getDaysElapsed();\r\n        return 31 - (totalDaysElapsed % 31);\r\n    }\r\n\r\n    //positive number means Justin has more than met his requirement. Negative means he's in arrears\r\n    function expectedAccumulated() public view returns (uint256, uint256) {\r\n        uint256 expected = expectedPayments();\r\n\r\n        if (expected > agreementState.accumulatedRepayments) {\r\n            //Justin is behind\r\n\r\n            return (expected, agreementState.accumulatedRepayments);\r\n        } else {\r\n            //Justin is ahead\r\n\r\n            return (expected, agreementState.accumulatedRepayments);\r\n        }\r\n    }\r\n\r\n    //in the event of a critical bug, shutdown contract and withdraw EYE.\r\n    function voteForEmergencyShutdown(bool vote) public {\r\n        if (msg.sender == users.Justin) {\r\n            emergencyShutdownMultisig[EMERGENCY_SHUTDOWN_JUSTIN_INDEX] = vote;\r\n        } else if (msg.sender == users.DGVC) {\r\n            emergencyShutdownMultisig[EMERGENCY_SHUTDOWN_DEGEN_INDEX] = vote;\r\n        }\r\n\r\n        if (emergencyShutdownMultisig[0] && emergencyShutdownMultisig[1]) {\r\n            agreementState.phase = AgreementPhaseEnum.emergencyShutdown;\r\n            IERC20 eye = IERC20(tokens.EYE);\r\n            uint256 balance = eye.balanceOf(address(this));\r\n            eye.transfer(users.DGVC, balance);\r\n        }\r\n    }\r\n\r\n    function getTokenInfo()\r\n        external\r\n        view\r\n        returns (\r\n            address,\r\n            address,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return (\r\n            tokens.EYE,\r\n            tokens.USDC,\r\n            tokens.initialUSDCDebt,\r\n            tokens.initialEYEDeposit,\r\n            tokens.monthlyPayment\r\n        );\r\n    }\r\n\r\n    function getUserInfo() external view returns (address, address) {\r\n        return (users.Justin, users.DGVC);\r\n    }\r\n\r\n    function getAgreementState()\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return (\r\n            uint256(agreementState.phase),\r\n            agreementState.commencementTimeStamp,\r\n            agreementState.accumulatedRepayments\r\n        );\r\n    }\r\n\r\n    function changeJustin(address newJustin) public {\r\n        require(msg.sender == users.Justin);\r\n        users.Justin = newJustin;\r\n    }\r\n\r\n    function changeDGVC(address newDGVC) public {\r\n        require(msg.sender == users.DGVC);\r\n        users.DGVC = newDGVC;\r\n    }\r\n\r\n    function USDC(uint256 units) public pure returns (uint256) {\r\n        return units * ONE_USDC;\r\n    }\r\n\r\n    function EYE(uint256 units) public pure returns (uint256) {\r\n        return units * ONE_EYE;\r\n    }\r\n\r\n    function MathMin(uint256 LHS, uint256 RHS) internal pure returns (uint256) {\r\n        return LHS > RHS ? RHS : LHS;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outstandingObligations\",\"type\":\"uint256\"}],\"name\":\"AgreementDefaulted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"agreementInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payment\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"}],\"name\":\"EYE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"}],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callEYE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDGVC\",\"type\":\"address\"}],\"name\":\"changeDGVC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newJustin\",\"type\":\"address\"}],\"name\":\"changeJustin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"degenWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expectedAccumulated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expectedPayments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAgreementState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDaysElapsed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"daysElapsed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDaysUntilNextPayDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"daysLeft\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMonthsElapsed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"monthsElapsed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"USDC_units\",\"type\":\"uint256\"}],\"name\":\"initializeAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDebtorHealthy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"monthsAhead\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"months\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"USDC_units\",\"type\":\"uint256\"}],\"name\":\"payDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"eye\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dgvc\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"vote\",\"type\":\"bool\"}],\"name\":\"voteForEmergencyShutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Escrow","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fa49f3c0e66c7de0ba97b35ddb3034ecbf665be336c7b998f519cf57e8d8e06f"}]}