{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.4;\r\n\r\ninterface ERC20 {\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n}\r\n\r\ncontract ADKSell {\r\n/*\r\n    Contract allowing purchase of Aidos Kuneen ADK for a fixed price\r\n    Simply deposit ETH to this contract and it will exchange it at a fixed FX.\r\n    Check the current wADK balance of this contract before depositing ETH, otherwise the transaction will fail and roll back\r\n    */\r\n    \r\n    address wADKContract = 0x888888881f8af02398DC3fee2A243B66356717F8; // wADK Contract\r\n    \r\n    address payable public FXContractOwner;\r\n    \r\n    uint256 public exchangeRate_wADK_PER_ETH; // specifies the exchange rate: how many ADK you get for 1 ETH\r\n    uint256 public exchangeRate_WEI_PER_uwADK; // specifies the exchange rate in WEI per uwADK \r\n                                               // Info: 1 ETH = 10^18 WEI\r\n                                               // Info: 1 wADK = 10^8 uwADK\r\n    \r\n    constructor(\r\n       uint256 _exchangeRate_wADK_PER_ETH\r\n    ) {\r\n        FXContractOwner = payable(msg.sender);\r\n        exchangeRate_wADK_PER_ETH  = _exchangeRate_wADK_PER_ETH;\r\n        exchangeRate_WEI_PER_uwADK = _exchangeRate_wADK_PER_ETH * 10e10; // 10e10 is the difference in decimal position between ETH and wADK\r\n    }\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == FXContractOwner);\r\n        _;\r\n    }\r\n\r\n    event PurchasedADK(address _to, uint256 _value);\r\n    \r\n    /* Send ETH to this contract, and immediately receive wADK back, at the exchange rate specified in \r\n     _exchangeRate_ADK_PER_ETH\r\n    \r\n     Info: the exchange rate is specified at contract creation and cannot be changed (to prevent front-running)\r\n    \r\n     Info: If there is not enough ADK in this Sale Contract to cover your ETH, the transaction will fail and roll back\r\n    \r\n     Info: If the ETH you send results in less than 1 ADK, the transaction will fail and roll back\r\n    \r\n     Info: Only send from Ethereum Addresses, that can receive ERC20 TOKEN as the ADK will be sent to the Address sending ETH to this Sale Contract\r\n    */\r\n    \r\n    receive() external payable {\r\n         require(msg.value != 0);\r\n         uint256 uwADK_to_send = msg.value / exchangeRate_WEI_PER_uwADK; \r\n         emit PurchasedADK(msg.sender, uwADK_to_send);\r\n         require(ERC20(wADKContract).transfer(msg.sender, uwADK_to_send));\r\n    }\r\n    \r\n    \r\n    // Convenience Functions:\r\n    \r\n    // How much uwADK is available contract?  Remember 1 wADK = 10^8 uwADK\r\n    function AvailableADK() public view returns (uint256) {\r\n        return ERC20(wADKContract).balanceOf(address(this));\r\n    }\r\n    \r\n    // What is the maximum amount of WEI that can be sent to this contract?\r\n    //  (Depends on wADK balance)\r\n    function MaxWEI() public view returns (uint256) {  //Remember 1 WEI = 10^18 ETH\r\n        uint256 uwADKBalance = ERC20(wADKContract).balanceOf(address(this));\r\n        return uwADKBalance * exchangeRate_WEI_PER_uwADK; \r\n    }\r\n    \r\n    /////// For Contract Owner: Remove wADK\r\n    function RemoveADK() onlyOwner public {\r\n        uint256 _adk_balance = ERC20(wADKContract).balanceOf(address(this));\r\n        ERC20(wADKContract).transfer(msg.sender, _adk_balance);\r\n    }\r\n\r\n    /////// For Contract Owner: Remove ETH\r\n    function RemoveETH() onlyOwner public {\r\n        address payable _msg_sender = payable(msg.sender);\r\n        _msg_sender.transfer(address(this).balance);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_exchangeRate_wADK_PER_ETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"PurchasedADK\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AvailableADK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FXContractOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaxWEI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RemoveADK\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RemoveETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRate_WEI_PER_uwADK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRate_wADK_PER_ETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ADKSell","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000001388","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8b182fb6b8e5c4ebb9583e746b884312f45b30f609c09f729b206c16c37c9dd8"}]}