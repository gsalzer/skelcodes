{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/VolmexProtocol.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./interfaces/IERC20Modified.sol\\\";\\nimport \\\"./library/VolmexSafeERC20.sol\\\";\\n\\n/**\\n * @title Protocol Contract\\n * @author Volmex [security@volmexlabs.com]\\n */\\ncontract VolmexProtocol is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    using VolmexSafeERC20 for IERC20Modified;\\n\\n    event ToggleActivated(bool isActive);\\n    event UpdatedVolatilityToken(\\n        address indexed positionToken,\\n        bool isVolatilityIndexToken\\n    );\\n    event UpdatedFees(uint256 issuanceFees, uint256 redeemFees);\\n    event UpdatedMinimumCollateral(uint256 newMinimumCollateralQty);\\n    event ClaimedFees(uint256 fees);\\n    event ToggledVolatilityTokenPause(bool isPause);\\n    event Settled(uint256 settlementPrice);\\n    event Collateralized(\\n        address indexed sender,\\n        uint256 collateralLock,\\n        uint256 positionTokensMinted,\\n        uint256 fees\\n    );\\n    event Redeemed(\\n        address indexed sender,\\n        uint256 collateralReleased,\\n        uint256 volatilityIndexTokenBurned,\\n        uint256 inverseVolatilityIndexTokenBurned,\\n        uint256 fees\\n    );\\n\\n    // Has the value of minimum collateral qty required\\n    uint256 public minimumCollateralQty;\\n\\n    // Has the boolean state of protocol\\n    bool public active;\\n\\n    // Has the boolean state of protocol settlement\\n    bool public isSettled;\\n\\n    // Volatility tokens\\n    IERC20Modified public volatilityToken;\\n    IERC20Modified public inverseVolatilityToken;\\n\\n    // Only ERC20 standard functions are used by the collateral defined here.\\n    // Address of the acceptable collateral token.\\n    IERC20Modified public collateral;\\n\\n    // Used to calculate collateralize fee\\n    uint256 public issuanceFees;\\n\\n    // Used to calculate redeem fee\\n    uint256 public redeemFees;\\n\\n    // Total fee amount for call of collateralize and redeem\\n    uint256 public accumulatedFees;\\n\\n    // Percentage value is upto two decimal places, so we're dividing it by 10000\\n    // Set the max fee as 5%, i.e. 500/10000.\\n    uint256 constant MAX_FEE = 500;\\n\\n    // No need to add 18 decimals, because they are already considered in respective token qty arguments.\\n    uint256 public volatilityCapRatio;\\n\\n    // This is the price of volatility index, ranges from 0 to volatilityCapRatio,\\n    // and the inverse can be calculated by subtracting volatilityCapRatio by settlementPrice.\\n    uint256 public settlementPrice;\\n\\n    /**\\n     * @notice Used to check contract is active\\n     */\\n    modifier onlyActive() {\\n        require(active, \\\"Volmex: Protocol not active\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Used to check contract is not settled\\n     */\\n    modifier onlyNotSettled() {\\n        require(!isSettled, \\\"Volmex: Protocol settled\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Used to check contract is settled\\n     */\\n    modifier onlySettled() {\\n        require(isSettled, \\\"Volmex: Protocol not settled\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Makes the protocol `active` at deployment\\n     * @dev Sets the `minimumCollateralQty`\\n     * @dev Makes the collateral token as `collateral`\\n     * @dev Assign position tokens\\n     * @dev Sets the `volatilityCapRatio`\\n     *\\n     * @param _collateralTokenAddress is address of collateral token typecasted to IERC20Modified\\n     * @param _volatilityToken is address of volatility index token typecasted to IERC20Modified\\n     * @param _inverseVolatilityToken is address of inverse volatility index token typecasted to IERC20Modified\\n     * @param _minimumCollateralQty is the minimum qty of tokens need to mint 0.1 volatility and inverse volatility tokens\\n     * @param _volatilityCapRatio is the cap for volatility\\n     */\\n    function initialize(\\n        IERC20Modified _collateralTokenAddress,\\n        IERC20Modified _volatilityToken,\\n        IERC20Modified _inverseVolatilityToken,\\n        uint256 _minimumCollateralQty,\\n        uint256 _volatilityCapRatio\\n    ) external initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n\\n        require(\\n            _minimumCollateralQty > 0,\\n            \\\"Volmex: Minimum collateral quantity should be greater than 0\\\"\\n        );\\n\\n        active = true;\\n        minimumCollateralQty = _minimumCollateralQty;\\n        collateral = _collateralTokenAddress;\\n        volatilityToken = _volatilityToken;\\n        inverseVolatilityToken = _inverseVolatilityToken;\\n        volatilityCapRatio = _volatilityCapRatio;\\n    }\\n\\n    /**\\n     * @notice Toggles the active variable. Restricted to only the owner of the contract.\\n     */\\n    function toggleActive() external onlyOwner {\\n        active = !active;\\n        emit ToggleActivated(active);\\n    }\\n\\n    /**\\n     * @notice Update the `minimumCollateralQty`\\n     * @param _newMinimumCollQty Provides the new minimum collateral quantity\\n     */\\n    function updateMinimumCollQty(uint256 _newMinimumCollQty)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _newMinimumCollQty > 0,\\n            \\\"Volmex: Minimum collateral quantity should be greater than 0\\\"\\n        );\\n        minimumCollateralQty = _newMinimumCollQty;\\n        emit UpdatedMinimumCollateral(_newMinimumCollQty);\\n    }\\n\\n    /**\\n     * @notice Update the {Volatility Token}\\n     * @param _positionToken Address of the new position token\\n     * @param _isVolatilityIndexToken Type of the position token, { VolatilityIndexToken: true, InverseVolatilityIndexToken: false }\\n     */\\n    function updateVolatilityToken(\\n        address _positionToken,\\n        bool _isVolatilityIndexToken\\n    ) external onlyOwner {\\n        _isVolatilityIndexToken\\n            ? volatilityToken = IERC20Modified(_positionToken)\\n            : inverseVolatilityToken = IERC20Modified(_positionToken);\\n        emit UpdatedVolatilityToken(_positionToken, _isVolatilityIndexToken);\\n    }\\n\\n    /**\\n     * @notice Add collateral to the protocol and mint the position tokens\\n     * @param _collateralQty Quantity of the collateral being deposited\\n     *\\n     * NOTE: Collateral quantity should be at least required minimum collateral quantity\\n     *\\n     * Calculation: Get the quantity for position token\\n     * Mint the position token for `msg.sender`\\n     *\\n     */\\n    function collateralize(uint256 _collateralQty)\\n        external\\n        onlyActive\\n        onlyNotSettled\\n    {\\n        require(\\n            _collateralQty >= minimumCollateralQty,\\n            \\\"Volmex: CollateralQty > minimum qty required\\\"\\n        );\\n\\n        // Mechanism to calculate the collateral qty using the increase in balance\\n        // of protocol contract to counter USDT's fee mechanism, which can be enabled in future\\n        uint256 initialProtocolBalance = collateral.balanceOf(address(this));\\n        collateral.safeTransferFrom(msg.sender, address(this), _collateralQty);\\n        uint256 finalProtocolBalance = collateral.balanceOf(address(this));\\n\\n        _collateralQty = finalProtocolBalance - initialProtocolBalance;\\n\\n        uint256 fee;\\n        if (issuanceFees > 0) {\\n            fee = (_collateralQty * issuanceFees) / 10000;\\n            _collateralQty = _collateralQty - fee;\\n            accumulatedFees = accumulatedFees + fee;\\n        }\\n\\n        uint256 qtyToBeMinted = _collateralQty / volatilityCapRatio;\\n\\n        volatilityToken.mint(msg.sender, qtyToBeMinted);\\n        inverseVolatilityToken.mint(msg.sender, qtyToBeMinted);\\n\\n        emit Collateralized(msg.sender, _collateralQty, qtyToBeMinted, fee);\\n    }\\n\\n    /**\\n     * @notice Redeem the collateral from the protocol by providing the position token\\n     *\\n     * @param _positionTokenQty Quantity of the position token that the user is surrendering\\n     *\\n     * Amount of collateral is `_positionTokenQty` by the volatilityCapRatio.\\n     * Burn the position token\\n     *\\n     * Safely transfer the collateral to `msg.sender`\\n     */\\n    function redeem(uint256 _positionTokenQty)\\n        external\\n        onlyActive\\n        onlyNotSettled\\n    {\\n        uint256 collQtyToBeRedeemed = _positionTokenQty * volatilityCapRatio;\\n\\n        _redeem(collQtyToBeRedeemed, _positionTokenQty, _positionTokenQty);\\n    }\\n\\n    /**\\n     * @notice Redeem the collateral from the protocol after settlement\\n     *\\n     * @param _volatilityIndexTokenQty Quantity of the volatility index token that the user is surrendering\\n     * @param _inverseVolatilityIndexTokenQty Quantity of the inverse volatility index token that the user is surrendering\\n     *\\n     * Amount of collateral is `_volatilityIndexTokenQty` by the settlementPrice and `_inverseVolatilityIndexTokenQty`\\n     * by volatilityCapRatio - settlementPrice\\n     * Burn the position token\\n     *\\n     * Safely transfer the collateral to `msg.sender`\\n     */\\n    function redeemSettled(\\n        uint256 _volatilityIndexTokenQty,\\n        uint256 _inverseVolatilityIndexTokenQty\\n    ) external onlyActive onlySettled {\\n        uint256 collQtyToBeRedeemed =\\n            (_volatilityIndexTokenQty * settlementPrice) +\\n                (_inverseVolatilityIndexTokenQty *\\n                    (volatilityCapRatio - settlementPrice));\\n\\n        _redeem(\\n            collQtyToBeRedeemed,\\n            _volatilityIndexTokenQty,\\n            _inverseVolatilityIndexTokenQty\\n        );\\n    }\\n\\n    /**\\n     * @notice Settle the contract, preventing new minting and providing individual token redemption\\n     *\\n     * @param _settlementPrice The price of the volatility index after settlement\\n     *\\n     * The inverse volatility index token at settlement is worth volatilityCapRatio - volatility index settlement price\\n     */\\n    function settle(uint256 _settlementPrice)\\n        external\\n        onlyOwner\\n        onlyNotSettled\\n    {\\n        require(\\n            _settlementPrice <= volatilityCapRatio,\\n            \\\"Volmex: _settlementPrice should be less than equal to volatilityCapRatio\\\"\\n        );\\n        settlementPrice = _settlementPrice;\\n        isSettled = true;\\n        emit Settled(settlementPrice);\\n    }\\n\\n    /**\\n     * @notice Recover tokens accidentally sent to this contract\\n     */\\n    function recoverTokens(\\n        address _token,\\n        address _toWhom,\\n        uint256 _howMuch\\n    ) external nonReentrant onlyOwner {\\n        require(\\n            _token != address(collateral),\\n            \\\"Volmex: Collateral token not allowed\\\"\\n        );\\n        IERC20Modified(_token).safeTransfer(_toWhom, _howMuch);\\n    }\\n\\n    /**\\n     * @notice Update the percentage of `issuanceFees` and `redeemFees`\\n     *\\n     * @param _issuanceFees Percentage of fees required to collateralize the collateral\\n     * @param _redeemFees Percentage of fees required to redeem the collateral\\n     */\\n    function updateFees(uint256 _issuanceFees, uint256 _redeemFees)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _issuanceFees <= MAX_FEE && _redeemFees <= MAX_FEE,\\n            \\\"Volmex: issue/redeem fees should be less than MAX_FEE\\\"\\n        );\\n\\n        issuanceFees = _issuanceFees;\\n        redeemFees = _redeemFees;\\n\\n        emit UpdatedFees(_issuanceFees, _redeemFees);\\n    }\\n\\n    /**\\n     * @notice Safely transfer the accumulated fees to owner\\n     */\\n    function claimAccumulatedFees() external onlyOwner {\\n        uint256 claimedAccumulatedFees = accumulatedFees;\\n        delete accumulatedFees;\\n\\n        collateral.safeTransfer(owner(), claimedAccumulatedFees);\\n\\n        emit ClaimedFees(claimedAccumulatedFees);\\n    }\\n\\n    /**\\n     * @notice Pause/unpause volmex position token.\\n     *\\n     * @param _isPause Boolean value to pause or unpause the position token { true = pause, false = unpause }\\n     */\\n    function togglePause(bool _isPause) external onlyOwner {\\n        if (_isPause) {\\n            volatilityToken.pause();\\n            inverseVolatilityToken.pause();\\n        } else {\\n            volatilityToken.unpause();\\n            inverseVolatilityToken.unpause();\\n        }\\n\\n        emit ToggledVolatilityTokenPause(_isPause);\\n    }\\n\\n    function _redeem(\\n        uint256 _collateralQtyRedeemed,\\n        uint256 _volatilityIndexTokenQty,\\n        uint256 _inverseVolatilityIndexTokenQty\\n    ) internal {\\n        uint256 fee;\\n        if (redeemFees > 0) {\\n            fee = (_collateralQtyRedeemed * redeemFees) / 10000;\\n            _collateralQtyRedeemed = _collateralQtyRedeemed - fee;\\n            accumulatedFees = accumulatedFees + fee;\\n        }\\n\\n        volatilityToken.burn(msg.sender, _volatilityIndexTokenQty);\\n        inverseVolatilityToken.burn(\\n            msg.sender,\\n            _inverseVolatilityIndexTokenQty\\n        );\\n\\n        collateral.safeTransfer(msg.sender, _collateralQtyRedeemed);\\n\\n        emit Redeemed(\\n            msg.sender,\\n            _collateralQtyRedeemed,\\n            _volatilityIndexTokenQty,\\n            _inverseVolatilityIndexTokenQty,\\n            fee\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Modified.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Modified Interface of the OpenZeppelin's IERC20 extra functions to add features in position token.\\n */\\ninterface IERC20Modified is IERC20 {\\n    function symbol() external view returns (string memory);\\n\\n    function mint(address _toWhom, uint256 amount) external;\\n\\n    function burn(address _whose, uint256 amount) external;\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n}\\n\"\r\n    },\r\n    \"contracts/library/VolmexSafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title VolmexSafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using VolmexSafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n *\\n * NOTE: Inspired from Openzeppelin's SafeERC20 library.\\n */\\nlibrary VolmexSafeERC20 {\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"VolmexSafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = functionCall(address(token), data, \\\"VolmexSafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"VolmexSafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"VolmexSafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: 0 }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"ClaimedFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralLock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionTokensMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"Collateralized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralReleased\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"volatilityIndexTokenBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inverseVolatilityIndexTokenBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settlementPrice\",\"type\":\"uint256\"}],\"name\":\"Settled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"ToggleActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPause\",\"type\":\"bool\"}],\"name\":\"ToggledVolatilityTokenPause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"issuanceFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemFees\",\"type\":\"uint256\"}],\"name\":\"UpdatedFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimumCollateralQty\",\"type\":\"uint256\"}],\"name\":\"UpdatedMinimumCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"positionToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isVolatilityIndexToken\",\"type\":\"bool\"}],\"name\":\"UpdatedVolatilityToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accumulatedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAccumulatedFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"contract IERC20Modified\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralQty\",\"type\":\"uint256\"}],\"name\":\"collateralize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Modified\",\"name\":\"_collateralTokenAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Modified\",\"name\":\"_volatilityToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Modified\",\"name\":\"_inverseVolatilityToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minimumCollateralQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_volatilityCapRatio\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inverseVolatilityToken\",\"outputs\":[{\"internalType\":\"contract IERC20Modified\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSettled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuanceFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumCollateralQty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toWhom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_howMuch\",\"type\":\"uint256\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_positionTokenQty\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_volatilityIndexTokenQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_inverseVolatilityIndexTokenQty\",\"type\":\"uint256\"}],\"name\":\"redeemSettled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_settlementPrice\",\"type\":\"uint256\"}],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlementPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isPause\",\"type\":\"bool\"}],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_issuanceFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_redeemFees\",\"type\":\"uint256\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinimumCollQty\",\"type\":\"uint256\"}],\"name\":\"updateMinimumCollQty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_positionToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isVolatilityIndexToken\",\"type\":\"bool\"}],\"name\":\"updateVolatilityToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"volatilityCapRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"volatilityToken\",\"outputs\":[{\"internalType\":\"contract IERC20Modified\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"VolmexProtocol","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}