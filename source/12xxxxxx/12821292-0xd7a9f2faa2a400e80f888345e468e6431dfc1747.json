{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    function hasRole(bytes32 role, address account)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(\r\n        bytes32 indexed role,\r\n        bytes32 indexed previousAdminRole,\r\n        bytes32 indexed newAdminRole\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {_setupRole}.\r\n     */\r\n    event RoleGranted(\r\n        bytes32 indexed role,\r\n        address indexed account,\r\n        address indexed sender\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(\r\n        bytes32 indexed role,\r\n        address indexed account,\r\n        address indexed sender\r\n    );\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(IAccessControl).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account)\r\n        public\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override {\r\n        require(\r\n            hasRole(getRoleAdmin(role), _msgSender()),\r\n            \"AccessControl: sender must be an admin to grant\"\r\n        );\r\n\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override {\r\n        require(\r\n            hasRole(getRoleAdmin(role), _msgSender()),\r\n            \"AccessControl: sender must be an admin to revoke\"\r\n        );\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account)\r\n        public\r\n        virtual\r\n        override\r\n    {\r\n        require(\r\n            account == _msgSender(),\r\n            \"AccessControl: can only renounce roles for self\"\r\n        );\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\r\n        _roles[role].adminRole = adminRole;\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\ninterface ISatoshiART1155 {\r\n    event TransferSingle(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 id,\r\n        uint256 value\r\n    );\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n    event ApprovalForAll(\r\n        address indexed account,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    function balanceOf(address account, uint256 id)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    function isApprovedForAll(address account, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function tokenCreator(uint256 _id) external view returns (address);\r\n\r\n    function tokenRoyalty(uint256 _id) external view returns (uint256);\r\n}\r\n\r\ncontract SatoshiART1155Marketplace is AccessControl {\r\n    struct Listing {\r\n        bytes1 status; // 0x00 onHold 0x01 onSale 0x02 isAuction\r\n        uint256 price;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 commission;\r\n        bool isDropOfTheDay;\r\n        address highestBidder;\r\n        uint256 highestBid;\r\n    }\r\n\r\n    mapping(uint256 => mapping(address => Listing)) private _listings;\r\n    ISatoshiART1155 public satoshiART1155;\r\n    mapping(address => uint256) private _outstandingPayments;\r\n    uint256 private _defaultCommission;\r\n    uint256 private _defaultAuctionCommission;\r\n    bytes32 public constant DROP_OF_THE_DAY_CREATOR_ROLE =\r\n        keccak256(\"DROP_OF_THE_DAY_CREATOR_ROLE\");\r\n    address private _commissionReceiver;\r\n\r\n    event PurchaseConfirmed(uint256 tokenId, address itemOwner, address buyer);\r\n    event PaymentWithdrawed(uint256 amount);\r\n    event HighestBidIncreased(\r\n        uint256 tokenId,\r\n        address itemOwner,\r\n        address bidder,\r\n        uint256 amount\r\n    );\r\n    event AuctionEnded(\r\n        uint256 tokenId,\r\n        address itemOwner,\r\n        address winner,\r\n        uint256 amount\r\n    );\r\n\r\n    constructor(address satoshiART1155Address) {\r\n        satoshiART1155 = ISatoshiART1155(satoshiART1155Address);\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        _defaultCommission = 250;\r\n        _defaultAuctionCommission = 250;\r\n        _commissionReceiver = msg.sender;\r\n    }\r\n\r\n    function commissionReceiver() external view returns (address) {\r\n        return _commissionReceiver;\r\n    }\r\n\r\n    function setCommissionReceiver(address user) external returns (bool) {\r\n        require(\r\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\r\n            \"Caller is not an admin\"\r\n        );\r\n        _commissionReceiver = user;\r\n\r\n        return true;\r\n    }\r\n\r\n    function defaultCommission() external view returns (uint256) {\r\n        return _defaultCommission;\r\n    }\r\n\r\n    function defaultAuctionCommission() external view returns (uint256) {\r\n        return _defaultAuctionCommission;\r\n    }\r\n\r\n    function setDefaultCommission(uint256 commission) external returns (bool) {\r\n        require(\r\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\r\n            \"Caller is not an admin\"\r\n        );\r\n        require(commission <= 3000, \"commission is too high\");\r\n        _defaultCommission = commission;\r\n\r\n        return true;\r\n    }\r\n\r\n    function setDefaultAuctionCommission(uint256 commission)\r\n        external\r\n        returns (bool)\r\n    {\r\n        require(\r\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\r\n            \"Caller is not an admin\"\r\n        );\r\n        require(commission <= 3000, \"commission is too high\");\r\n        _defaultAuctionCommission = commission;\r\n\r\n        return true;\r\n    }\r\n\r\n    function setListing(\r\n        uint256 tokenId,\r\n        bytes1 status,\r\n        uint256 price,\r\n        uint256 startTime,\r\n        uint256 endTime,\r\n        uint256 dropOfTheDayCommission,\r\n        bool isDropOfTheDay\r\n    ) external {\r\n        require(\r\n            satoshiART1155.balanceOf(msg.sender, tokenId) >= 1,\r\n            \"Set listing: you are trying to sell more than you have\"\r\n        );\r\n\r\n        if (status == 0x00) {\r\n            require(\r\n                _listings[tokenId][msg.sender].highestBidder == address(0),\r\n                \"Set listing: bid already exists\"\r\n            );\r\n\r\n            _listings[tokenId][msg.sender] = Listing({\r\n                status: status,\r\n                price: 0,\r\n                startTime: 0,\r\n                endTime: 0,\r\n                commission: 0,\r\n                isDropOfTheDay: false,\r\n                highestBidder: address(0),\r\n                highestBid: 0\r\n            });\r\n        } else if (isDropOfTheDay) {\r\n            require(\r\n                hasRole(DROP_OF_THE_DAY_CREATOR_ROLE, msg.sender),\r\n                \"Set listing: Caller is not a drop of the day creator\"\r\n            );\r\n            require(\r\n                _listings[tokenId][msg.sender].status == 0x00,\r\n                \"Set listing: token not on hold\"\r\n            );\r\n            require(\r\n                dropOfTheDayCommission <= 3000,\r\n                \"Set drop of the day listing: commission is too high\"\r\n            );\r\n            require(\r\n                block.timestamp < startTime && startTime < endTime,\r\n                \"endTime should be greater than startTime. startTime should be greater than current time\"\r\n            );\r\n\r\n            _listings[tokenId][msg.sender] = Listing({\r\n                status: status,\r\n                price: price,\r\n                startTime: startTime,\r\n                endTime: endTime,\r\n                commission: dropOfTheDayCommission,\r\n                isDropOfTheDay: isDropOfTheDay,\r\n                highestBidder: address(0),\r\n                highestBid: 0\r\n            });\r\n        } else if (status == 0x01) {\r\n            require(\r\n                _listings[tokenId][msg.sender].status == 0x00,\r\n                \"Set listing: token not on hold\"\r\n            );\r\n\r\n            _listings[tokenId][msg.sender] = Listing({\r\n                status: status,\r\n                price: price,\r\n                startTime: 0,\r\n                endTime: 0,\r\n                commission: _defaultCommission,\r\n                isDropOfTheDay: false,\r\n                highestBidder: address(0),\r\n                highestBid: 0\r\n            });\r\n        } else if (status == 0x02) {\r\n            require(\r\n                _listings[tokenId][msg.sender].status == 0x00,\r\n                \"Set listing: token not on hold\"\r\n            );\r\n            require(\r\n                block.timestamp < startTime && startTime < endTime,\r\n                \"endTime should be greater than startTime. startTime should be greater than current time\"\r\n            );\r\n\r\n            _listings[tokenId][msg.sender] = Listing({\r\n                status: status,\r\n                price: price,\r\n                startTime: startTime,\r\n                endTime: endTime,\r\n                commission: _defaultAuctionCommission,\r\n                isDropOfTheDay: false,\r\n                highestBidder: address(0),\r\n                highestBid: 0\r\n            });\r\n        }\r\n    }\r\n\r\n    function listingOf(address account, uint256 tokenId)\r\n        external\r\n        view\r\n        returns (\r\n            bytes1,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            bool,\r\n            address,\r\n            uint256\r\n        )\r\n    {\r\n        require(\r\n            account != address(0),\r\n            \"ERC1155: listing query for the zero address\"\r\n        );\r\n\r\n        Listing memory l = _listings[tokenId][account];\r\n        return (\r\n            l.status,\r\n            l.price,\r\n            l.startTime,\r\n            l.endTime,\r\n            l.commission,\r\n            l.isDropOfTheDay,\r\n            l.highestBidder,\r\n            l.highestBid\r\n        );\r\n    }\r\n\r\n    function buy(uint256 tokenId, address itemOwner)\r\n        external\r\n        payable\r\n        returns (bool)\r\n    {\r\n        require(\r\n            _listings[tokenId][itemOwner].status == 0x01,\r\n            \"buy: token not listed for sale\"\r\n        );\r\n        require(\r\n            satoshiART1155.balanceOf(itemOwner, tokenId) >= 1,\r\n            \"buy: trying to buy more than owned\"\r\n        );\r\n        require(\r\n            msg.value >= _listings[tokenId][itemOwner].price,\r\n            \"buy: not enough fund\"\r\n        );\r\n\r\n        if (_listings[tokenId][itemOwner].isDropOfTheDay) {\r\n            require(\r\n                block.timestamp >= _listings[tokenId][itemOwner].startTime &&\r\n                    block.timestamp <= _listings[tokenId][itemOwner].endTime,\r\n                \"buy (Drop of the day): drop of the day has ended/not started\"\r\n            );\r\n        }\r\n\r\n        uint256 commision =\r\n            (msg.value * _listings[tokenId][itemOwner].commission) / 10000;\r\n        uint256 royalty =\r\n            (msg.value * satoshiART1155.tokenRoyalty(tokenId)) / 10000;\r\n\r\n        _listings[tokenId][itemOwner] = Listing({\r\n            status: 0x00,\r\n            price: 0,\r\n            startTime: 0,\r\n            endTime: 0,\r\n            commission: 0,\r\n            isDropOfTheDay: false,\r\n            highestBidder: address(0),\r\n            highestBid: 0\r\n        });\r\n        emit PurchaseConfirmed(tokenId, itemOwner, msg.sender);\r\n\r\n        satoshiART1155.safeTransferFrom(\r\n            itemOwner,\r\n            msg.sender,\r\n            tokenId,\r\n            satoshiART1155.balanceOf(itemOwner, tokenId),\r\n            \"\"\r\n        );\r\n\r\n        _outstandingPayments[satoshiART1155.tokenCreator(tokenId)] =\r\n            _outstandingPayments[satoshiART1155.tokenCreator(tokenId)] +\r\n            royalty;\r\n        _outstandingPayments[_commissionReceiver] =\r\n            _outstandingPayments[_commissionReceiver] +\r\n            commision;\r\n        _outstandingPayments[itemOwner] =\r\n            _outstandingPayments[itemOwner] +\r\n            (msg.value - commision - royalty);\r\n\r\n        return true;\r\n    }\r\n\r\n    function withdrawPayment() external returns (bool) {\r\n        uint256 amount = _outstandingPayments[msg.sender];\r\n        if (amount > 0) {\r\n            _outstandingPayments[msg.sender] = 0;\r\n\r\n            if (!payable(msg.sender).send(amount)) {\r\n                _outstandingPayments[msg.sender] = amount;\r\n                return false;\r\n            }\r\n        }\r\n        emit PaymentWithdrawed(amount);\r\n        return true;\r\n    }\r\n\r\n    function outstandingPayment(address user) external view returns (uint256) {\r\n        return _outstandingPayments[user];\r\n    }\r\n\r\n    //Auction\r\n    function bid(uint256 tokenId, address itemOwner) external payable {\r\n        require(\r\n            _listings[tokenId][itemOwner].status == 0x02,\r\n            \"Item not listed for auction.\"\r\n        );\r\n        require(\r\n            block.timestamp <= _listings[tokenId][itemOwner].endTime &&\r\n                block.timestamp >= _listings[tokenId][itemOwner].startTime,\r\n            \"Auction not started/already ended.\"\r\n        );\r\n        require(\r\n            msg.value > _listings[tokenId][itemOwner].highestBid,\r\n            \"There already is a higher bid.\"\r\n        );\r\n\r\n        if (_listings[tokenId][itemOwner].highestBid != 0) {\r\n            _outstandingPayments[\r\n                _listings[tokenId][itemOwner].highestBidder\r\n            ] += _listings[tokenId][itemOwner].highestBid;\r\n        }\r\n        _listings[tokenId][itemOwner].highestBidder = msg.sender;\r\n        _listings[tokenId][itemOwner].highestBid = msg.value;\r\n        emit HighestBidIncreased(tokenId, itemOwner, msg.sender, msg.value);\r\n    }\r\n\r\n    // Withdraw a bid that was overbid.\r\n    // use withdrawPayment()\r\n\r\n    /// End the auction and send the highest bid\r\n    /// to the beneficiary.\r\n    function auctionEnd(uint256 tokenId, address itemOwner) external {\r\n        require(\r\n            _listings[tokenId][itemOwner].status == 0x02,\r\n            \"Auction end: item is not for auction\"\r\n        );\r\n        require(\r\n            block.timestamp > _listings[tokenId][itemOwner].endTime,\r\n            \"Auction end: auction not yet ended.\"\r\n        );\r\n\r\n        uint256 commision =\r\n            (_listings[tokenId][itemOwner].highestBid *\r\n                _listings[tokenId][itemOwner].commission) / 10000;\r\n\r\n        uint256 royalty =\r\n            (_listings[tokenId][itemOwner].highestBid *\r\n                satoshiART1155.tokenRoyalty(tokenId)) / 10000;\r\n\r\n        _listings[tokenId][itemOwner] = Listing({\r\n            status: 0x00,\r\n            price: 0,\r\n            startTime: 0,\r\n            endTime: 0,\r\n            commission: 0,\r\n            isDropOfTheDay: false,\r\n            highestBidder: _listings[tokenId][itemOwner].highestBidder,\r\n            highestBid: _listings[tokenId][itemOwner].highestBid\r\n        });\r\n        emit AuctionEnded(\r\n            tokenId,\r\n            itemOwner,\r\n            _listings[tokenId][itemOwner].highestBidder,\r\n            _listings[tokenId][itemOwner].highestBid\r\n        );\r\n\r\n        satoshiART1155.safeTransferFrom(\r\n            itemOwner,\r\n            _listings[tokenId][itemOwner].highestBidder,\r\n            tokenId,\r\n            1,\r\n            \"\"\r\n        );\r\n\r\n        _outstandingPayments[satoshiART1155.tokenCreator(tokenId)] =\r\n            _outstandingPayments[satoshiART1155.tokenCreator(tokenId)] +\r\n            royalty;\r\n        _outstandingPayments[_commissionReceiver] =\r\n            _outstandingPayments[_commissionReceiver] +\r\n            commision;\r\n        _outstandingPayments[itemOwner] =\r\n            _outstandingPayments[itemOwner] +\r\n            (_listings[tokenId][itemOwner].highestBid - commision - royalty);\r\n    }\r\n\r\n    function setDropOfTheDayAuctionEndTime(uint256 tokenId, uint256 newEndTime)\r\n        external\r\n    {\r\n        require(\r\n            hasRole(DROP_OF_THE_DAY_CREATOR_ROLE, msg.sender),\r\n            \"Set drop of the day auction end time: caller is not drop of the day creator.\"\r\n        );\r\n        require(\r\n            _listings[tokenId][msg.sender].status == 0x02,\r\n            \"Item is not in auction\"\r\n        );\r\n        require(\r\n            _listings[tokenId][msg.sender].isDropOfTheDay,\r\n            \"Set drop of the day auction end time: item is not for drop of the day.\"\r\n        );\r\n        require(\r\n            _listings[tokenId][msg.sender].endTime < newEndTime,\r\n            \"newEndTime not greater than current endTime.\"\r\n        );\r\n        _listings[tokenId][msg.sender].endTime = newEndTime;\r\n    }\r\n\r\n    function transfer(uint256 tokenId, address receiver) external {\r\n        require(\r\n            satoshiART1155.balanceOf(msg.sender, tokenId) >= 1,\r\n            \"Do not have enough token to transfer.\"\r\n        );\r\n        require(\r\n            _listings[tokenId][msg.sender].status == 0x00,\r\n            \"Token not on hold\"\r\n        );\r\n\r\n        satoshiART1155.safeTransferFrom(\r\n            msg.sender,\r\n            receiver,\r\n            tokenId,\r\n            satoshiART1155.balanceOf(msg.sender, tokenId),\r\n            \"\"\r\n        );\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"satoshiART1155Address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"itemOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AuctionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"itemOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HighestBidIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentWithdrawed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"itemOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"PurchaseConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DROP_OF_THE_DAY_CREATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"itemOwner\",\"type\":\"address\"}],\"name\":\"auctionEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"itemOwner\",\"type\":\"address\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"itemOwner\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultAuctionCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"listingOf\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"\",\"type\":\"bytes1\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"outstandingPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"satoshiART1155\",\"outputs\":[{\"internalType\":\"contract ISatoshiART1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"setCommissionReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"setDefaultAuctionCommission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"setDefaultCommission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newEndTime\",\"type\":\"uint256\"}],\"name\":\"setDropOfTheDayAuctionEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes1\",\"name\":\"status\",\"type\":\"bytes1\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dropOfTheDayCommission\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDropOfTheDay\",\"type\":\"bool\"}],\"name\":\"setListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SatoshiART1155Marketplace","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006a68f25f6479e878230b6f7de326743f0b078a93","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://536c492e41f020679a36ee104fbc5c48c668ae7b55f280658043100286d10c70"}]}