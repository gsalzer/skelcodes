{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ninterface NFT {\r\n    \r\n    function getUserData(address _who) external view returns (uint256 userPower, uint256 userEnergy, uint256 lastWithdrawDate, uint256 whitelist);\r\n    \r\n    function updateDate(uint256 _newDate, address _who) external;\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title MoonDayPlus Strategy\r\n * \r\n *\r\n * \r\n          ,\r\n       _/ \\_     *\r\n      <     >\r\n*      /.'.\\                    *\r\n             *    ,-----.,_           ,\r\n               .'`         '.       _/ \\_\r\n    ,         /              `\\    <     >\r\n  _/ \\_      |  ,.---.         \\    /.'.\\\r\n <     >     \\.'    _,'.---.    ;   `   `\r\n  /.'.\\           .'  (-(0)-)   ;\r\n  `   `          /     '---'    |  *\r\n                /    )          |             *\r\n     *         |  .-;           ;        ,\r\n               \\_/ |___,'      ;       _/ \\_ \r\n          ,  |`---.MOON|_       /     <     >\r\n *      _/ \\_ \\         `     /        /.'.\\\r\n       <     > '.          _,'         `   `\r\n MD+    /.'.\\    `'------'`     *   \r\n        `   `\r\n \r\n \r\n */\r\n\r\n\r\ncontract Strategy {\r\n\r\n    using SafeMath for uint256;\r\n\r\n\r\n    NFT public nftContract;\r\n\r\n  \r\n\r\n    constructor(NFT _Nft) {\r\n        \r\n        nftContract = _Nft;\r\n\r\n       \r\n    }\r\n\r\n    \r\n    //public one for ui\r\n    function returnPercPub(address investor) public view returns (uint256 _perc){\r\n        uint256  balanceOf = nftContract.balanceOf(investor);\r\n\r\n        if(balanceOf < 1){\r\n            return 0;\r\n        }\r\n\r\n\r\n        (uint256 userPower, uint256 userEnergy, uint256 lastWithdrawDate,) = nftContract.getUserData(investor);\r\n\r\n\r\n        uint256  medianEnergy = userEnergy.div(balanceOf);\r\n\r\n\r\n\r\n        uint256  intervalDiff = (block.timestamp).sub(lastWithdrawDate);\r\n\r\n\r\n        if (intervalDiff.div(1 days) >= medianEnergy){\r\n\r\n            //full userPower\r\n\r\n            _perc = userPower;\r\n\r\n        }else{\r\n            \r\n          \r\n\r\n            _perc = userPower.sub(userPower.mul((medianEnergy.sub(intervalDiff.div(1 days))).div(medianEnergy)));\r\n\r\n\r\n        }\r\n\r\n\r\n        if(_perc.mul(5) > 4166){\r\n            \r\n           _perc = 4166; \r\n        }else{\r\n            \r\n            _perc = _perc.mul(5);\r\n        }\r\n\r\n\r\n        return _perc;\r\n    }\r\n\r\n\r\n    //this one update the user last withdraw\r\n    function returnPerc(address investor) external returns (uint256 _perc){\r\n        \r\n        _perc = returnPercPub(investor);\r\n        \r\n         if( _perc > 0 ){\r\n             \r\n             nftContract.updateDate(block.timestamp, investor);\r\n             \r\n         }\r\n\r\n       return _perc;\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract NFT\",\"name\":\"_Nft\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"nftContract\",\"outputs\":[{\"internalType\":\"contract NFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"returnPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_perc\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"returnPercPub\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_perc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Strategy","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003eaec957ff5db98fe3931e2c3b3103debf945ae0","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2501d84c5b76767f2f3d77f8ccf8ab89eb49e4a8ac5de01e2227bee67dae37a1"}]}