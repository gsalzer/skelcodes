{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IERC20Sumswap.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IERC20Sumswap{\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IAccessControl.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface IAccessControl {\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n}\r\n\r\n// File: contracts/TokenIssue.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\ninterface ISumma {\r\n    function issue(address addr, uint256 amount) external;\r\n}\r\n\r\ncontract TokenIssue is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant INIT_MINE_SUPPLY = 32000000 * 10 ** 18;\r\n\r\n    uint256 public issuedAmount = INIT_MINE_SUPPLY;\r\n\r\n    uint256 public surplusAmount = 2.88 * 10 ** 8 * 10 ** 18;\r\n\r\n    uint256 public TOTAL_AMOUNT = 3.2 * 10 ** 8 * 10 ** 18;\r\n\r\n    uint256 public constant MONTH_SECONDS = 225 * 24 * 30;\r\n\r\n    bytes32 public constant TRANS_ROLE = keccak256(\"TRANS_ROLE\");\r\n\r\n    // utc 2021-05-01\r\n    //    uint256 public startIssueTime = 0;\r\n    uint256 public startIssueTime = 0;\r\n\r\n    address public summa;\r\n\r\n    address public summaPri;\r\n\r\n    uint256[] public issueInfo;\r\n\r\n    constructor(address _summa,address _summaPri) public {\r\n        summa = _summa;\r\n        summaPri = _summaPri;\r\n        initialize();\r\n    }\r\n\r\n    function initialize() private {\r\n        issueInfo.push(1920000 * 10 ** 18);\r\n        issueInfo.push(2035200 * 10 ** 18);\r\n        issueInfo.push(2157312.0000000005 * 10 ** 18);\r\n        issueInfo.push(2286750.72 * 10 ** 18);\r\n        issueInfo.push(2423955.763200001 * 10 ** 18);\r\n        issueInfo.push(2569393.108992 * 10 ** 18);\r\n        issueInfo.push(2723556.6955315205 * 10 ** 18);\r\n        issueInfo.push(2886970.0972634126 * 10 ** 18);\r\n        issueInfo.push(3060188.303099217 * 10 ** 18);\r\n        issueInfo.push(3243799.6012851703 * 10 ** 18);\r\n        issueInfo.push(3438427.577362281 * 10 ** 18);\r\n        issueInfo.push(3644733.232004018 * 10 ** 18);\r\n        issueInfo.push(2575611.4839495043 * 10 ** 18);\r\n        issueInfo.push(2678635.943307485 * 10 ** 18);\r\n        issueInfo.push(2785781.3810397848 * 10 ** 18);\r\n        issueInfo.push(2897212.636281376 * 10 ** 18);\r\n        issueInfo.push(3013101.141732631 * 10 ** 18);\r\n        issueInfo.push(3133625.187401936 * 10 ** 18);\r\n        issueInfo.push(3258970.1948980135 * 10 ** 18);\r\n        issueInfo.push(3389329.0026939344 * 10 ** 18);\r\n        issueInfo.push(3524902.1628016927 * 10 ** 18);\r\n        issueInfo.push(3665898.24931376 * 10 ** 18);\r\n        issueInfo.push(3812534.17928631 * 10 ** 18);\r\n        issueInfo.push(3965035.546457763 * 10 ** 18);\r\n        issueInfo.push(2061818.484158036 * 10 ** 18);\r\n        issueInfo.push(2103054.8538411967 * 10 ** 18);\r\n        issueInfo.push(2145115.9509180207 * 10 ** 18);\r\n        issueInfo.push(2188018.269936382 * 10 ** 18);\r\n        issueInfo.push(2231778.6353351087 * 10 ** 18);\r\n        issueInfo.push(2276414.208041811 * 10 ** 18);\r\n        issueInfo.push(2321942.4922026475 * 10 ** 18);\r\n        issueInfo.push(2368381.3420467 * 10 ** 18);\r\n        issueInfo.push(2415748.9688876346 * 10 ** 18);\r\n        issueInfo.push(2464063.948265387 * 10 ** 18);\r\n        issueInfo.push(2513345.227230695 * 10 ** 18);\r\n        issueInfo.push(2563612.131775309 * 10 ** 18);\r\n        issueInfo.push(2614884.3744108155 * 10 ** 18);\r\n        issueInfo.push(2667182.061899032 * 10 ** 18);\r\n        issueInfo.push(2720525.703137012 * 10 ** 18);\r\n        issueInfo.push(2774936.2171997526 * 10 ** 18);\r\n        issueInfo.push(2830434.941543747 * 10 ** 18);\r\n        issueInfo.push(2887043.6403746223 * 10 ** 18);\r\n        issueInfo.push(2944784.513182115 * 10 ** 18);\r\n        issueInfo.push(3003680.2034457573 * 10 ** 18);\r\n        issueInfo.push(3063753.807514673 * 10 ** 18);\r\n        issueInfo.push(3125028.883664966 * 10 ** 18);\r\n        issueInfo.push(3187529.461338266 * 10 ** 18);\r\n        issueInfo.push(3251280.0505650314 * 10 ** 18);\r\n        issueInfo.push(1658152.825788165 * 10 ** 18);\r\n        issueInfo.push(1674734.3540460467 * 10 ** 18);\r\n        issueInfo.push(1691481.6975865073 * 10 ** 18);\r\n        issueInfo.push(1708396.5145623726 * 10 ** 18);\r\n        issueInfo.push(1725480.479707996 * 10 ** 18);\r\n        issueInfo.push(1742735.2845050762 * 10 ** 18);\r\n        issueInfo.push(1760162.6373501269 * 10 ** 18);\r\n        issueInfo.push(1777764.263723628 * 10 ** 18);\r\n        issueInfo.push(1795541.9063608644 * 10 ** 18);\r\n        issueInfo.push(1813497.3254244728 * 10 ** 18);\r\n        issueInfo.push(1831632.2986787176 * 10 ** 18);\r\n        issueInfo.push(1849948.621665505 * 10 ** 18);\r\n        issueInfo.push(1868448.10788216 * 10 ** 18);\r\n        issueInfo.push(1887132.5889609817 * 10 ** 18);\r\n        issueInfo.push(1906003.9148505912 * 10 ** 18);\r\n        issueInfo.push(1925063.9539990975 * 10 ** 18);\r\n        issueInfo.push(1944314.5935390887 * 10 ** 18);\r\n        issueInfo.push(1963757.7394744793 * 10 ** 18);\r\n        issueInfo.push(1983395.316869224 * 10 ** 18);\r\n        issueInfo.push(2003229.2700379163 * 10 ** 18);\r\n        issueInfo.push(2023261.5627382956 * 10 ** 18);\r\n        issueInfo.push(2043494.1783656788 * 10 ** 18);\r\n        issueInfo.push(2063929.1201493354 * 10 ** 18);\r\n        issueInfo.push(2084568.4113508288 * 10 ** 18);\r\n        issueInfo.push(2105414.0954643367 * 10 ** 18);\r\n        issueInfo.push(2126468.23641898 * 10 ** 18);\r\n        issueInfo.push(2147732.91878317 * 10 ** 18);\r\n        issueInfo.push(2169210.247971002 * 10 ** 18);\r\n        issueInfo.push(2190902.350450712 * 10 ** 18);\r\n        issueInfo.push(2212811.373955219 * 10 ** 18);\r\n        issueInfo.push(2234939.4876947715 * 10 ** 18);\r\n        issueInfo.push(2257288.882571719 * 10 ** 18);\r\n        issueInfo.push(2279861.7713974365 * 10 ** 18);\r\n        issueInfo.push(2302660.389111411 * 10 ** 18);\r\n        issueInfo.push(2325686.9930025246 * 10 ** 18);\r\n        issueInfo.push(2348943.8629325503 * 10 ** 18);\r\n        issueInfo.push(1897946.6412495002 * 10 ** 18);\r\n        issueInfo.push(1913130.2143794964 * 10 ** 18);\r\n        issueInfo.push(1928435.2560945326 * 10 ** 18);\r\n        issueInfo.push(1943862.7381432885 * 10 ** 18);\r\n        issueInfo.push(1959413.6400484347 * 10 ** 18);\r\n        issueInfo.push(1975088.9491688225 * 10 ** 18);\r\n        issueInfo.push(1990889.6607621727 * 10 ** 18);\r\n        issueInfo.push(2006816.7780482706 * 10 ** 18);\r\n        issueInfo.push(2022871.3122726567 * 10 ** 18);\r\n        issueInfo.push(2039054.282770838 * 10 ** 18);\r\n        issueInfo.push(2055366.7170330046 * 10 ** 18);\r\n        issueInfo.push(2071809.6507692689 * 10 ** 18);\r\n        issueInfo.push(2088384.1279754227 * 10 ** 18);\r\n        issueInfo.push(2105091.200999226 * 10 ** 18);\r\n        issueInfo.push(2121931.93060722 * 10 ** 18);\r\n        issueInfo.push(2138907.386052078 * 10 ** 18);\r\n        issueInfo.push(2156018.645140494 * 10 ** 18);\r\n        issueInfo.push(2173266.794301619 * 10 ** 18);\r\n        issueInfo.push(2190652.928656032 * 10 ** 18);\r\n        issueInfo.push(2208178.15208528 * 10 ** 18);\r\n        issueInfo.push(2225843.5773019614 * 10 ** 18);\r\n        issueInfo.push(2243650.3259203774 * 10 ** 18);\r\n        issueInfo.push(2261599.528527741 * 10 ** 18);\r\n        issueInfo.push(2279692.324755963 * 10 ** 18);\r\n        issueInfo.push(2297929.86335401 * 10 ** 18);\r\n        issueInfo.push(2316313.302260842 * 10 ** 18);\r\n        issueInfo.push(2334843.8086789288 * 10 ** 18);\r\n        issueInfo.push(2353522.559148361 * 10 ** 18);\r\n        issueInfo.push(2372350.7396215475 * 10 ** 18);\r\n        issueInfo.push(2391329.54553852 * 10 ** 18);\r\n        issueInfo.push(2410460.1819028277 * 10 ** 18);\r\n        issueInfo.push(2429743.8633580506 * 10 ** 18);\r\n        issueInfo.push(2449181.8142649154 * 10 ** 18);\r\n        issueInfo.push(2468775.2687790347 * 10 ** 18);\r\n        issueInfo.push(2488525.470929267 * 10 ** 18);\r\n        issueInfo.push(2508433.674696701 * 10 ** 18);\r\n        issueInfo.push(2528501.1440942744 * 10 ** 18);\r\n        issueInfo.push(2548729.153247029 * 10 ** 18);\r\n    }\r\n\r\n    function issueInfoLength() external view returns (uint256) {\r\n        return issueInfo.length;\r\n    }\r\n\r\n    function currentCanIssueAmount() public view returns (uint256){\r\n        uint256 currentTime = block.number;\r\n        if (currentTime <= startIssueTime || startIssueTime <= 0) {\r\n            return INIT_MINE_SUPPLY.sub(issuedAmount);\r\n        }\r\n        uint256 timeInterval = currentTime - startIssueTime;\r\n        uint256 monthIndex = timeInterval.div(MONTH_SECONDS);\r\n        if (monthIndex < 1) {\r\n            return issueInfo[monthIndex].div(MONTH_SECONDS).mul(timeInterval).add(INIT_MINE_SUPPLY).sub(issuedAmount);\r\n        } else if (monthIndex < issueInfo.length) {\r\n            uint256 tempTotal = INIT_MINE_SUPPLY;\r\n            for (uint256 j = 0; j < monthIndex; j++) {\r\n                tempTotal = tempTotal.add(issueInfo[j]);\r\n            }\r\n            uint256 calcAmount = timeInterval.sub(monthIndex.mul(MONTH_SECONDS)).mul(issueInfo[monthIndex].div(MONTH_SECONDS)).add(tempTotal);\r\n            if (calcAmount > TOTAL_AMOUNT) {\r\n                return TOTAL_AMOUNT.sub(issuedAmount);\r\n            }\r\n            return calcAmount.sub(issuedAmount);\r\n        } else {\r\n            return TOTAL_AMOUNT.sub(issuedAmount);\r\n        }\r\n    }\r\n\r\n    function currentBlockCanIssueAmount() public view returns (uint256){\r\n        uint256 currentTime = block.number;\r\n        if (currentTime <= startIssueTime || startIssueTime <= 0) {\r\n            return 0;\r\n        }\r\n        uint256 timeInterval = currentTime - startIssueTime;\r\n        uint256 monthIndex = timeInterval.div(MONTH_SECONDS);\r\n        if (monthIndex < 1) {\r\n            return issueInfo[monthIndex].div(MONTH_SECONDS);\r\n        } else if (monthIndex < issueInfo.length) {\r\n            uint256 tempTotal = INIT_MINE_SUPPLY;\r\n            for (uint256 j = 0; j < monthIndex; j++) {\r\n                tempTotal = tempTotal.add(issueInfo[j]);\r\n            }\r\n            uint256 actualBlockIssue = issueInfo[monthIndex].div(MONTH_SECONDS);\r\n            uint256 calcAmount = timeInterval.sub(monthIndex.mul(MONTH_SECONDS)).mul(issueInfo[monthIndex].div(MONTH_SECONDS)).add(tempTotal);\r\n            if (calcAmount > TOTAL_AMOUNT) {\r\n                if (calcAmount.sub(TOTAL_AMOUNT) <= actualBlockIssue) {\r\n                    return actualBlockIssue.sub(calcAmount.sub(TOTAL_AMOUNT));\r\n                }\r\n                return 0;\r\n            }\r\n            return actualBlockIssue;\r\n        } else {\r\n            return 0;\r\n        }\r\n\r\n    }\r\n\r\n    function issueAnyOne() public {\r\n        uint256 currentCanIssue = currentCanIssueAmount();\r\n        if (currentCanIssue > 0) {\r\n            issuedAmount = issuedAmount.add(currentCanIssue);\r\n            surplusAmount = surplusAmount.sub(currentCanIssue);\r\n            ISumma(summa).issue(address(this), currentCanIssue);\r\n        }\r\n    }\r\n\r\n    function withdrawETH() public onlyOwner {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n    function setStart() public onlyOwner {\r\n        if (startIssueTime <= 0) {\r\n            startIssueTime = block.number;\r\n        }\r\n    }\r\n\r\n    function transByContract(address to,uint256 amount) public{\r\n        require(IAccessControl(summaPri).hasRole(TRANS_ROLE, _msgSender()), \"Caller is not a transfer role\");\r\n        if(amount > IERC20Sumswap(summa).balanceOf(address(this))){\r\n            issueAnyOne();\r\n        }\r\n        require(amount <= IERC20Sumswap(summa).balanceOf(address(this)),\"not enough,please check code\");\r\n        IERC20Sumswap(summa).transfer(to,amount);\r\n    }\r\n\r\n    function withdrawToken(address addr) public onlyOwner {\r\n        IERC20Sumswap(addr).transfer(_msgSender(), IERC20Sumswap(addr).balanceOf(address(this)));\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_summa\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_summaPri\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INIT_MINE_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MONTH_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBlockCanIssueAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentCanIssueAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issueAnyOne\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"issueInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issueInfoLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startIssueTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"summa\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"summaPri\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"surplusAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transByContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"TokenIssue","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000043c308bb8a5ae96d0093444be7f56459f1340b10000000000000000000000006631dc49eb860eafd61777b92e42fe2bef84596b","EVMVersion":"istanbul","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://62b8823915ed5db54c5009c88b2600f43b1609121496f3d97cf6be77ea8d13ea"}]}