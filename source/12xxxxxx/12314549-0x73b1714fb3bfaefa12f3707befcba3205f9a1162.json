{"status":"1","message":"OK","result":[{"SourceCode":"// File: access/HasAdmin.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\ncontract HasAdmin {\r\n  event AdminChanged(address indexed _oldAdmin, address indexed _newAdmin);\r\n  event AdminRemoved(address indexed _oldAdmin);\r\n\r\n  address public admin;\r\n\r\n  modifier onlyAdmin {\r\n    require(msg.sender == admin, \"HasAdmin: not admin\");\r\n    _;\r\n  }\r\n\r\n  constructor() internal {\r\n    admin = msg.sender;\r\n    emit AdminChanged(address(0), admin);\r\n  }\r\n\r\n  function changeAdmin(address _newAdmin) external onlyAdmin {\r\n    require(_newAdmin != address(0), \"HasAdmin: new admin is the zero address\");\r\n    emit AdminChanged(admin, _newAdmin);\r\n    admin = _newAdmin;\r\n  }\r\n\r\n  function removeAdmin() external onlyAdmin {\r\n    emit AdminRemoved(admin);\r\n    admin = address(0);\r\n  }\r\n}\r\n\r\n// File: token/erc20/IERC20.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\ninterface IERC20 {\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n  function totalSupply() external view returns (uint256 _supply);\r\n  function balanceOf(address _owner) external view returns (uint256 _balance);\r\n\r\n  function approve(address _spender, uint256 _value) external returns (bool _success);\r\n  function allowance(address _owner, address _spender) external view returns (uint256 _value);\r\n\r\n  function transfer(address _to, uint256 _value) external returns (bool _success);\r\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool _success);\r\n}\r\n\r\n// File: MainchainGateway.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\ncontract MainchainGateway {\r\n  function depositERC20For(address _user, address _token, uint256 _amount) external returns (uint256);\r\n}\r\n\r\n// File: TokenSwap.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n  * Smart contract wallet to support swapping between old ERC-20 token to a new contract.\r\n  * It also supports swap and deposit into mainchainGateway in a single transaction.\r\n  * Pre-requisites: New token needs to be transferred to this contract.\r\n  * Dev should check that the decimals and supply of old token and new token are identical.\r\n */\r\ncontract TokenSwap is HasAdmin {\r\n  IERC20 public oldToken;\r\n  IERC20 public newToken;\r\n  MainchainGateway public mainchainGateway;\r\n\r\n  constructor(\r\n    IERC20 _oldToken,\r\n    IERC20 _newToken\r\n  )\r\n    public\r\n  {\r\n    oldToken = _oldToken;\r\n    newToken = _newToken;\r\n  }\r\n\r\n  function setGateway(MainchainGateway _mainchainGateway) external onlyAdmin {\r\n    if (address(mainchainGateway) != address(0)) {\r\n      require(newToken.approve(address(mainchainGateway), 0));\r\n    }\r\n\r\n    mainchainGateway = _mainchainGateway;\r\n    require(newToken.approve(address(mainchainGateway), uint256(-1)));\r\n  }\r\n\r\n  function swapToken() external {\r\n    uint256 _balance = oldToken.balanceOf(msg.sender);\r\n    require(oldToken.transferFrom(msg.sender, address(this), _balance));\r\n    require(newToken.transfer(msg.sender, _balance));\r\n  }\r\n\r\n  function swapAndBridge(address _recipient, uint256 _amount) external {\r\n    require(_recipient != address(0), \"TokenSwap: recipient is the zero address\");\r\n    uint256 _balance = oldToken.balanceOf(msg.sender);\r\n    require(oldToken.transferFrom(msg.sender, address(this), _balance));\r\n\r\n    require(_amount <= _balance);\r\n    require(newToken.transfer(msg.sender, _balance - _amount));\r\n    mainchainGateway.depositERC20For(_recipient, address(newToken), _amount);\r\n  }\r\n\r\n  function swapAndBridgeAll(address _recipient) external {\r\n    require(_recipient != address(0), \"TokenSwap: recipient is the zero address\");\r\n    uint256 _balance = oldToken.balanceOf(msg.sender);\r\n    require(oldToken.transferFrom(msg.sender, address(this), _balance));\r\n    mainchainGateway.depositERC20For(_recipient, address(newToken), _balance);\r\n  }\r\n\r\n  // Used when some old token lost forever\r\n  function withdrawToken() external onlyAdmin {\r\n    newToken.transfer(msg.sender, newToken.balanceOf(address(this)));\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_oldToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_newToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldAdmin\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainchainGateway\",\"outputs\":[{\"internalType\":\"contract MainchainGateway\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract MainchainGateway\",\"name\":\"_mainchainGateway\",\"type\":\"address\"}],\"name\":\"setGateway\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"swapAndBridge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"swapAndBridgeAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"swapToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenSwap","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f5d669627376ebd411e34b98f19c868c8aba5ada000000000000000000000000bb0e17ef65f82ab018d8edd776e8dd940327b28b","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://046c95de273744f0ea3e057c4db8b3ad3047c8c01616078bca5204fa7005fc0b"}]}