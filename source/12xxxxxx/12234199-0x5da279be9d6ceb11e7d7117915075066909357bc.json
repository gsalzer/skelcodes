{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/matiasbn/Desktop/stacktical/stacktical-dsla-contracts/contracts/PeriodRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title SLARegistry\\n * @dev SLARegistry is a contract for handling creation of service level\\n * agreements and keeping track of the created agreements\\n */\\ncontract PeriodRegistry is Ownable {\\n    using SafeMath for uint256;\\n\\n    enum PeriodType {Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly}\\n\\n    /// @dev struct to store the definition of a period\\n    struct PeriodDefinition {\\n        bool initialized;\\n        uint256[] starts;\\n        uint256[] ends;\\n    }\\n\\n    /// @dev (periodType=>PeriodDefinition) hourly/weekly/biWeekly/monthly/yearly are periodTypes\\n    mapping(PeriodType => PeriodDefinition) public periodDefinitions;\\n\\n    /**\\n     * @dev event to log a new period initialized\\n     *@param periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param periodsAdded 2. amount of periods added\\n     */\\n    event PeriodInitialized(PeriodType periodType, uint256 periodsAdded);\\n\\n    /**\\n     * @dev event to log a new period initialized\\n     *@param periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param periodsAdded 2. amount of periods added\\n     */\\n    event PeriodModified(PeriodType periodType, uint256 periodsAdded);\\n\\n    /**\\n     * @dev public function for creating canonical service level agreements\\n     *@param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param _periodStarts 2. array of the starts of the period\\n     *@param _periodEnds 3. array of the ends of the period\\n     */\\n    function initializePeriod(\\n        PeriodType _periodType,\\n        uint256[] memory _periodStarts,\\n        uint256[] memory _periodEnds\\n    ) public onlyOwner {\\n        PeriodDefinition storage periodDefinition =\\n            periodDefinitions[_periodType];\\n        require(\\n            !periodDefinition.initialized,\\n            \\\"Period type already initialized\\\"\\n        );\\n        require(\\n            _periodStarts.length == _periodEnds.length,\\n            \\\"Period type starts and ends should match\\\"\\n        );\\n        require(_periodStarts.length > 0, \\\"Period length can't be 0\\\");\\n        for (uint256 index = 0; index < _periodStarts.length; index++) {\\n            require(\\n                _periodStarts[index] < _periodEnds[index],\\n                \\\"Start should be before end\\\"\\n            );\\n            if (index < _periodStarts.length - 1) {\\n                require(\\n                    _periodStarts[index + 1].sub(_periodEnds[index]) == 1,\\n                    \\\"Start of a period should be 1 second after the end of the previous period\\\"\\n                );\\n            }\\n            periodDefinition.starts.push(_periodStarts[index]);\\n            periodDefinition.ends.push(_periodEnds[index]);\\n        }\\n        periodDefinition.initialized = true;\\n        emit PeriodInitialized(_periodType, _periodStarts.length);\\n    }\\n\\n    /**\\n     * @dev function to add new periods to certain period type\\n     *@param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param _periodStarts 2. array of uint256 of the period starts to add\\n     *@param _periodEnds 3. array of uint256 of the period starts to add\\n     */\\n    function addPeriodsToPeriodType(\\n        PeriodType _periodType,\\n        uint256[] memory _periodStarts,\\n        uint256[] memory _periodEnds\\n    ) public onlyOwner {\\n        require(_periodStarts.length > 0, \\\"Period length can't be 0\\\");\\n        PeriodDefinition storage periodDefinition =\\n            periodDefinitions[_periodType];\\n        require(periodDefinition.initialized, \\\"Period was not initialized yet\\\");\\n        for (uint256 index = 0; index < _periodStarts.length; index++) {\\n            require(\\n                _periodStarts[index] < _periodEnds[index],\\n                \\\"Start should be before end\\\"\\n            );\\n            if (index < _periodStarts.length.sub(1)) {\\n                require(\\n                    _periodStarts[index + 1].sub(_periodEnds[index]) == 1,\\n                    \\\"Start of a period should be 1 second after the end of the previous period\\\"\\n                );\\n            }\\n            periodDefinition.starts.push(_periodStarts[index]);\\n            periodDefinition.ends.push(_periodEnds[index]);\\n        }\\n        emit PeriodModified(_periodType, _periodStarts.length);\\n    }\\n\\n    /**\\n     * @dev public function to get the start and end of a period\\n     *@param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param _periodId 2. period id to get start and end\\n     */\\n    function getPeriodStartAndEnd(PeriodType _periodType, uint256 _periodId)\\n        public\\n        view\\n        returns (uint256 start, uint256 end)\\n    {\\n        start = periodDefinitions[_periodType].starts[_periodId];\\n        end = periodDefinitions[_periodType].ends[_periodId];\\n    }\\n\\n    /**\\n     * @dev public function to check if a periodType id is initialized\\n     *@param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     */\\n    function isInitializedPeriod(PeriodType _periodType)\\n        public\\n        view\\n        returns (bool initialized)\\n    {\\n        PeriodDefinition memory periodDefinition =\\n            periodDefinitions[_periodType];\\n        initialized = periodDefinition.initialized;\\n    }\\n\\n    /**\\n     * @dev public function to check if a period id is valid i.e. it belongs to the added id array\\n     *@param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param _periodId 2. period id to get start and end\\n     */\\n    function isValidPeriod(PeriodType _periodType, uint256 _periodId)\\n        public\\n        view\\n        returns (bool valid)\\n    {\\n        PeriodDefinition memory periodDefinition =\\n            periodDefinitions[_periodType];\\n        valid = periodDefinition.starts.length.sub(1) >= _periodId;\\n    }\\n\\n    /**\\n     * @dev public function to check if a period has finished\\n     *@param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param _periodId 2. period id to get start and end\\n     */\\n    function periodIsFinished(PeriodType _periodType, uint256 _periodId)\\n        public\\n        view\\n        returns (bool finished)\\n    {\\n        require(\\n            isValidPeriod(_periodType, _periodId),\\n            \\\"Period data is not valid\\\"\\n        );\\n        finished =\\n            periodDefinitions[_periodType].ends[_periodId] < block.timestamp;\\n    }\\n\\n    /**\\n     * @dev public function to check if a period has started\\n     *@param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param _periodId 2. period id to get start and end\\n     */\\n    function periodHasStarted(PeriodType _periodType, uint256 _periodId)\\n        public\\n        view\\n        returns (bool started)\\n    {\\n        require(\\n            isValidPeriod(_periodType, _periodId),\\n            \\\"Period data is not valid\\\"\\n        );\\n        started =\\n            periodDefinitions[_periodType].starts[_periodId] < block.timestamp;\\n    }\\n\\n    /**\\n     * @dev public function to get the periodDefinitions\\n     */\\n    function getPeriodDefinitions()\\n        public\\n        view\\n        returns (PeriodDefinition[] memory)\\n    {\\n        // 6 period types\\n        PeriodDefinition[] memory periodDefinition = new PeriodDefinition[](6);\\n        periodDefinition[0] = periodDefinitions[PeriodType.Hourly];\\n        periodDefinition[1] = periodDefinitions[PeriodType.Daily];\\n        periodDefinition[2] = periodDefinitions[PeriodType.Weekly];\\n        periodDefinition[3] = periodDefinitions[PeriodType.BiWeekly];\\n        periodDefinition[4] = periodDefinitions[PeriodType.Monthly];\\n        periodDefinition[5] = periodDefinitions[PeriodType.Yearly];\\n        return periodDefinition;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum PeriodRegistry.PeriodType\",\"name\":\"periodType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodsAdded\",\"type\":\"uint256\"}],\"name\":\"PeriodInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum PeriodRegistry.PeriodType\",\"name\":\"periodType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodsAdded\",\"type\":\"uint256\"}],\"name\":\"PeriodModified\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum PeriodRegistry.PeriodType\",\"name\":\"_periodType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"_periodStarts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_periodEnds\",\"type\":\"uint256[]\"}],\"name\":\"addPeriodsToPeriodType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPeriodDefinitions\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"starts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ends\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PeriodRegistry.PeriodDefinition[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PeriodRegistry.PeriodType\",\"name\":\"_periodType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_periodId\",\"type\":\"uint256\"}],\"name\":\"getPeriodStartAndEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PeriodRegistry.PeriodType\",\"name\":\"_periodType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"_periodStarts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_periodEnds\",\"type\":\"uint256[]\"}],\"name\":\"initializePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PeriodRegistry.PeriodType\",\"name\":\"_periodType\",\"type\":\"uint8\"}],\"name\":\"isInitializedPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PeriodRegistry.PeriodType\",\"name\":\"_periodType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_periodId\",\"type\":\"uint256\"}],\"name\":\"isValidPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PeriodRegistry.PeriodType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"periodDefinitions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PeriodRegistry.PeriodType\",\"name\":\"_periodType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_periodId\",\"type\":\"uint256\"}],\"name\":\"periodHasStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"started\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PeriodRegistry.PeriodType\",\"name\":\"_periodType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_periodId\",\"type\":\"uint256\"}],\"name\":\"periodIsFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"finished\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PeriodRegistry","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"100","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}