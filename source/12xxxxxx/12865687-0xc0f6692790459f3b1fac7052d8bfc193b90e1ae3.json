{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/v1/markets/eth/rarible/RaribleV1Market.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\ninterface IRarible {\\n    enum AssetType {ETH, ERC20, ERC1155, ERC721, ERC721Deprecated}\\n\\n    struct Asset {\\n        address token;\\n        uint tokenId;\\n        AssetType assetType;\\n    }\\n\\n    struct OrderKey {\\n        /* who signed the order */\\n        address owner;\\n        /* random number */\\n        uint salt;\\n\\n        /* what has owner */\\n        Asset sellAsset;\\n\\n        /* what wants owner */\\n        Asset buyAsset;\\n    }\\n\\n    struct Order {\\n        OrderKey key;\\n\\n        /* how much has owner (in wei, or UINT256_MAX if ERC-721) */\\n        uint selling;\\n        /* how much wants owner (in wei, or UINT256_MAX if ERC-721) */\\n        uint buying;\\n\\n        /* fee for selling */\\n        uint sellerFee;\\n    }\\n\\n    /* An ECDSA signature. */\\n    struct Sig {\\n        /* v parameter */\\n        uint8 v;\\n        /* r parameter */\\n        bytes32 r;\\n        /* s parameter */\\n        bytes32 s;\\n    }\\n\\n    function exchange(\\n        Order memory order,\\n        Sig memory sig,\\n        uint buyerFee,\\n        Sig memory buyerFeeSig,\\n        uint amount,\\n        address buyer\\n    ) payable external;\\n}\\n\\nlibrary RaribleV1Market {\\n    address public constant RARIBLE = 0x09EaB21c40743B2364b94345419138eF80f39e30;\\n\\n    struct RaribleBuy {\\n        IRarible.Order order;\\n        IRarible.Sig sig;\\n        uint buyerFee;\\n        IRarible.Sig buyerFeeSig;\\n        uint amount;\\n        uint256 price;\\n    }\\n\\n    function buyAssetsForEth(RaribleBuy[] memory raribleBuys, address recipient) external {\\n        for (uint256 i = 0; i < raribleBuys.length; i++) {\\n            _buyAssetForEth(\\n                raribleBuys[i].price,\\n                raribleBuys[i].amount, \\n                raribleBuys[i].buyerFee, \\n                raribleBuys[i].order, \\n                raribleBuys[i].sig, \\n                raribleBuys[i].buyerFeeSig, \\n                recipient\\n            );\\n        }\\n    }\\n\\n    function _buyAssetForEth(\\n        uint256 _price, \\n        uint256 _amount, \\n        uint256 _buyerFee, \\n        IRarible.Order memory _order, \\n        IRarible.Sig memory _sig, \\n        IRarible.Sig memory _buyerFeeSig, \\n        address _recipient\\n    ) internal {\\n        bytes memory _data = abi.encodeWithSelector(IRarible.exchange.selector, _order, _sig, _buyerFee, _buyerFeeSig, _amount, _recipient);\\n        (bool success, ) = RARIBLE.call{value:_price}(_data);\\n        if (!success) {\\n            // Copy revert reason from call\\n            assembly {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"RARIBLE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RaribleV1Market","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}