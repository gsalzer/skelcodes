{"status":"1","message":"OK","result":[{"SourceCode":"// Verified by Darwinia Network\n\n// hevm: flattened sources of src/ItemBase.sol\npragma solidity >0.4.13 >=0.4.23 >=0.4.24 <0.7.0 >=0.6.7 <0.7.0;\n\n////// lib/ds-auth/src/auth.sol\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity >=0.4.23; */\n\ninterface DSAuthority {\n    function canCall(\n        address src, address dst, bytes4 sig\n    ) external view returns (bool);\n}\n\ncontract DSAuthEvents {\n    event LogSetAuthority (address indexed authority);\n    event LogSetOwner     (address indexed owner);\n}\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority  public  authority;\n    address      public  owner;\n\n    constructor() public {\n        owner = msg.sender;\n        emit LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_)\n        public\n        auth\n    {\n        owner = owner_;\n        emit LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_)\n        public\n        auth\n    {\n        authority = authority_;\n        emit LogSetAuthority(address(authority));\n    }\n\n    modifier auth {\n        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(0)) {\n            return false;\n        } else {\n            return authority.canCall(src, address(this), sig);\n        }\n    }\n}\n\n////// lib/ds-math/src/math.sol\n/// math.sol -- mixin for inline numerical wizardry\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity >0.4.13; */\n\ncontract DSMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n    function imin(int x, int y) internal pure returns (int z) {\n        return x <= y ? x : y;\n    }\n    function imax(int x, int y) internal pure returns (int z) {\n        return x >= y ? x : y;\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    //rounds to zero if x*y < WAD / 2\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n    //rounds to zero if x*y < WAD / 2\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n    //rounds to zero if x*y < WAD / 2\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n    //rounds to zero if x*y < RAY / 2\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint x, uint n) internal pure returns (uint z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\n////// lib/ds-stop/lib/ds-note/src/note.sol\n/// note.sol -- the `note' modifier, for logging calls as events\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity >=0.4.23; */\n\ncontract DSNote {\n    event LogNote(\n        bytes4   indexed  sig,\n        address  indexed  guy,\n        bytes32  indexed  foo,\n        bytes32  indexed  bar,\n        uint256           wad,\n        bytes             fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n        uint256 wad;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n            wad := callvalue()\n        }\n\n        _;\n\n        emit LogNote(msg.sig, msg.sender, foo, bar, wad, msg.data);\n    }\n}\n\n////// lib/ds-stop/src/stop.sol\n/// stop.sol -- mixin for enable/disable functionality\n\n// Copyright (C) 2017  DappHub, LLC\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity >=0.4.23; */\n\n/* import \"ds-auth/auth.sol\"; */\n/* import \"ds-note/note.sol\"; */\n\ncontract DSStop is DSNote, DSAuth {\n    bool public stopped;\n\n    modifier stoppable {\n        require(!stopped, \"ds-stop-is-stopped\");\n        _;\n    }\n    function stop() public auth note {\n        stopped = true;\n    }\n    function start() public auth note {\n        stopped = false;\n    }\n\n}\n\n////// lib/zeppelin-solidity/src/proxy/Initializable.sol\n// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\n/* pragma solidity >=0.4.24 <0.7.0; */\n\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n * \n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n * \n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        // extcodesize checks the size of the code stored in an address, and\n        // address returns the current address. Since the code is still not\n        // deployed when running a constructor, any checks on its code size will\n        // yield zero, making it an effective way to detect if a contract is\n        // under construction or not.\n        address self = address(this);\n        uint256 cs;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { cs := extcodesize(self) }\n        return cs == 0;\n    }\n}\n\n////// src/interfaces/IELIP002.sol\n/* pragma solidity ^0.6.7; */\n\n/**\n@title IELIP002\n@dev See https://github.com/evolutionlandorg/furnace/blob/main/elip-002.md\n@author echo.hu@itering.com\n*/\ninterface IELIP002 {\n\tstruct Item {\n\t\t// index of `Formula`\n\t\tuint256 index;\n\t\t//  strength rate\n\t\tuint128 rate;\n\t\tuint16 objClassExt;\n\t\tuint16 class;\n\t\tuint16 grade;\n\t\t// element prefer\n\t\tuint16 prefer;\n\t\t//  major material\n\t\taddress major;\n\t\tuint256 id;\n\t\t// amount of minor material\n\t\taddress minor;\n\t\tuint256 amount;\n\t}\n\n\t/**\n        @dev `Enchanted` MUST emit when item is enchanted.\n        The `user` argument MUST be the address of an account/contract that is approved to make the enchant (SHOULD be msg.sender).\n        The `tokenId` argument MUST be token Id of the item which it is enchanted.\n        The `index` argument MUST be index of the `Formula`.\n        The `rate` argument MUST be rate of minor material.\n        The `objClassExt` argument MUST be extension of `ObjectClass`.\n        The `class` argument MUST be class of the item.\n        The `grade` argument MUST be grade of the item.\n        The `prefer` argument MUST be prefer of the item.\n        The `major` argument MUST be token address of major material.\n        The `id` argument MUST be token id of major material.\n        The `minor` argument MUST be token address of minor material.\n        The `amount` argument MUST be token amount of minor material.\n        The `now` argument MUST be timestamp of enchant.\n    */\n\tevent Enchanced(\n\t\taddress indexed user,\n\t\tuint256 indexed tokenId,\n\t\tuint256 index,\n\t\tuint128 rate,\n\t\tuint16 objClassExt,\n\t\tuint16 class,\n\t\tuint16 grade,\n\t\tuint16 prefer,\n\t\taddress major,\n\t\tuint256 id,\n\t\taddress minor,\n\t\tuint256 amount,\n\t\tuint256 now\n\t);\n\n\t/**\n        @dev `Disenchanted` MUST emit when item is disenchanted.\n        The `user` argument MUST be the address of an account/contract that is approved to make the disenchanted (SHOULD be msg.sender).\n        The `tokenId` argument MUST be token Id of the item which it is disenchated.\n        The `majors` argument MUST be major token addresses of major material.\n        The `id` argument MUST be token ids of major material.\n        The `minor` argument MUST be token addresses of minor material.\n        The `amount` argument MUST be token amounts of minor material.\n    */\n\tevent Disenchanted(\n\t\taddress indexed user,\n\t\tuint256 tokenId,\n\t\taddress major,\n\t\tuint256 id,\n\t\taddress minor,\n\t\tuint256 amount\n\t);\n\n\t/**\n        @notice Caller must be owner of tokens to enchant.\n        @dev Enchant function, Enchant a new NFT token from ERC721 tokens and ERC20 tokens. Enchant rule is according to `Formula`.\n        MUST revert if `_index` is not in `formula`.\n        MUST revert on any other error.        \n\t\t@param _index  Index of formula to enchant.\n        @param _id     ID of NFT tokens.\n        @param _token  Address of FT token.\n\t\t@return {\n\t\t\t\"tokenId\": \"New Token ID of Enchanting.\"\n\t\t}\n    */\n\tfunction enchant(\n\t\tuint256 _index,\n\t\tuint256 _id,\n\t\taddress _token\n\t) external returns (uint256);\n\n\t// {\n\t// \t### smelt\n\t// \t1. check Formula rule by index\n\t//  2. transfer FT and NFT to address(this)\n\t// \t3. track FTs NFT to new NFT\n\t// \t4. mint new NFT to caller\n\t// }\n\n\t/**\n        @notice Caller must be owner of token id to disenchat.\n        @dev Disenchant function, A enchanted NFT can be disenchanted into origin ERC721 tokens and ERC20 tokens recursively.\n        MUST revert on any other error.        \n        @param _id     Token ID to disenchant.\n        @param _depth   Depth of disenchanting recursively.\n    */\n\tfunction disenchant(uint256 _id, uint256 _depth) external;\n\n\t// {\n\t// \t### disenchant\n\t//  1. tranfer _id to address(this)\n\t// \t2. burn new NFT\n\t// \t3. delete track FTs NFTs to new NFT\n\t// \t4. transfer FNs NFTs to owner\n\t// }\n\n\t/**\n        @dev Get base info of item.\n        @param _tokenId Token id of item.\n\t\t@return {\n\t\t\t\"objClassExt\": \"Extension of `ObjectClass`.\",\n\t\t\t\"class\": \"Class of the item.\",\n\t\t\t\"grade\": \"Grade of the item.\"\n\t\t}\n    */\n\tfunction getBaseInfo(uint256 _tokenId)\n\t\texternal\n\t\tview\n\t\treturns (\n\t\t\tuint16,\n\t\t\tuint16,\n\t\t\tuint16\n\t\t);\n\n\t/**\n        @dev Get rate of item.\n        @param _tokenId Token id of item.\n        @param _element Element item prefer.\n\t\t@return {\n\t\t\t\"rate\": \"strength rate of item.\"\n\t\t}\n    */\n\tfunction getRate(uint256 _tokenId, uint256 _element)\n\t\texternal\n\t\tview\n\t\treturns (uint256);\n\n\tfunction getPrefer(uint256 _tokenId)\n\t\texternal\n\t\tview\n\t\treturns (uint16);\n\n\tfunction getObjectClassExt(uint256 _tokenId) \n\t\texternal\t\n\t\tview\n\t\treturns (uint16);\n}\n\n////// src/interfaces/IFormula.sol\n/* pragma solidity ^0.6.7; */\n\n/**\n@title IFormula\n@author echo.hu@itering.com\n*/\ninterface IFormula {\n\tstruct FormulaEntry {\n\t\t// item name\n\t\tbytes32 name;\n\t\t// strength rate\n\t\tuint128 rate;\n\t\t// extension of `ObjectClass`\n\t\tuint16 objClassExt;\n\t\tuint16 class;\n\t\tuint16 grade;\n\t\tbool canDisenchant;\n\t\t// if it is removed\n\t\t// uint256 enchantTime;\n\t\t// uint256 disenchantTime;\n\t\t// uint256 loseRate;\n\n\t\tbool disable;\n\n\t\t// minor material info\n\t\tbytes32 minor;\n\t\tuint256 amount;\n\t\t// major material info\n\t\t// [address token, uint16 objectClassExt, uint16 class, uint16 grade]\n\t\taddress majorAddr;\n\t\tuint16 majorObjClassExt;\n\t\tuint16 majorClass;\n\t\tuint16 majorGrade;\n\t}\n\n\tevent AddFormula(\n\t\tuint256 indexed index,\n\t\tbytes32 name,\n\t\tuint128 rate,\n\t\tuint16 objClassExt,\n\t\tuint16 class,\n\t\tuint16 grade,\n\t\tbool canDisenchant,\n\t\tbytes32 minor,\n\t\tuint256 amount,\n\t\taddress majorAddr,\n\t\tuint16 majorObjClassExt,\n\t\tuint16 majorClass,\n\t\tuint16 majorGrade\n\t);\n\tevent DisableFormula(uint256 indexed index);\n\tevent EnableFormula(uint256 indexed index);\n\n\t/**\n        @notice Only governance can add `formula`.\n        @dev Add a formula rule.\n        MUST revert if length of `_majors` is not the same as length of `_class`.\n        MUST revert if length of `_minors` is not the same as length of `_mins` and `_maxs.\n        MUST revert on any other error.        \n        @param _name         New enchanted NFT name.\n        @param _rate         New enchanted NFT rate.\n        @param _objClassExt  New enchanted NFT objectClassExt.\n        @param _class        New enchanted NFT class.\n        @param _grade        New enchanted NFT grade.\n        @param _minor        FT Token address of minor meterail for enchanting.\n        @param _amount       FT Token amount of minor meterail for enchanting.\n        @param _majorAddr    FT token address of major meterail for enchanting.\n        @param _majorObjClassExt   FT token objectClassExt of major meterail for enchanting.\n        @param _majorClass   FT token class of major meterail for enchanting.\n        @param _majorGrade   FT token grade of major meterail for enchanting.\n    */\n\tfunction insert(\n\t\tbytes32 _name,\n\t\tuint128 _rate,\n\t\tuint16 _objClassExt,\n\t\tuint16 _class,\n\t\tuint16 _grade,\n\t\tbool _canDisenchant,\n\t\tbytes32 _minor,\n\t\tuint256 _amount,\n\t\taddress _majorAddr,\n\t\tuint16 _majorObjClassExt,\n\t\tuint16 _majorClass,\n\t\tuint16 _majorGrade\n\t) external;\n\n\t/**\n        @notice Only governance can enable `formula`.\n        @dev Enable a formula rule.\n        MUST revert on any other error.        \n        @param _index  index of formula.\n    */\n\tfunction disable(uint256 _index) external;\n\n\t/**\n        @notice Only governance can disble `formula`.\n        @dev Disble a formula rule.\n        MUST revert on any other error.        \n        @param _index  index of formula.\n    */\n\tfunction enable(uint256 _index) external;\n\n\t/**\n        @dev Returns the length of the formula.\n\t         0x1f7b6d32\n     */\n\tfunction length() external view returns (uint256);\n\n\t/**\n        @dev Returns the availability of the formula.\n     */\n\tfunction isDisable(uint256 _index) external view returns (bool);\n\n\t/**\n        @dev returns the minor material of the formula.\n     */\n\tfunction getMinor(uint256 _index)\n\t\texternal\n\t\tview\n\t\treturns (bytes32, uint256);\n\n\t/**\n        @dev Decode major info of the major.\n\t         0x6ef2fd27\n\t\t@return {\n\t\t\t\"token\": \"Major token address.\",\n\t\t\t\"objClassExt\": \"Major token objClassExt.\",\n\t\t\t\"class\": \"Major token class.\",\n\t\t\t\"grade\": \"Major token address.\"\n\t\t}\n     */\n\tfunction getMajorInfo(uint256 _index)\n\t\texternal\n\t\tview\t\n\t\treturns (\n\t\t\taddress,\n\t\t\tuint16,\n\t\t\tuint16,\n\t\t\tuint16\n\t\t);\n\n\t/**\n        @dev Returns meta info of the item.\n\t         0x78533046\n\t\t@return {\n\t\t\t\"objClassExt\": \"Major token objClassExt.\",\n\t\t\t\"class\": \"Major token class.\",\n\t\t\t\"grade\": \"Major token address.\",\n\t\t\t\"base\":  \"Base strength rate.\",\n\t\t\t\"enhance\": \"Enhance strength rate.\",\n\t\t}\n     */\n\tfunction getMetaInfo(uint256 _index)\n\t\texternal\n\t\tview\n\t\treturns (\n\t\t\tuint16,\n\t\t\tuint16,\n\t\t\tuint16,\n\t\t\tuint128\n\t\t);\n\n\t/**\n        @dev returns canDisenchant of the formula.\n     */\n\tfunction canDisenchant(uint256 _index) external view returns (bool);\n}\n\n////// src/interfaces/IMetaDataTeller.sol\n/* pragma solidity ^0.6.7; */\n\ninterface IMetaDataTeller {\n\tfunction addTokenMeta(\n\t\taddress _token,\n\t\tuint16 _grade,\n\t\tuint112 _strengthRate\n\t) external;\n\n\tfunction getObjClassExt(address _token, uint256 _id) external view returns (uint16 objClassExt);\n\n\t//0xf666196d\n\tfunction getMetaData(address _token, uint256 _id)\n\t\texternal\n\t\tview\n\t\treturns (uint16, uint16, uint16);\n\n    //0x7999a5cf\n\tfunction getPrefer(bytes32 _minor, address _token) external view returns (uint256);\n\n\t//0x33281815\n\tfunction getRate(\n\t\taddress _token,\n\t\tuint256 _id,\n\t\tuint256 _index\n\t) external view returns (uint256);\n\n\t//0xf8350ed0\n\tfunction isAllowed(address _token, uint256 _id) external view returns (bool);\n}\n\n////// src/interfaces/IObjectOwnership.sol\n/* pragma solidity ^0.6.7; */\n\ninterface IObjectOwnership {\n    function mintObject(address _to, uint128 _objectId) external returns (uint256 _tokenId);\n\t\n    function burn(address _to, uint256 _tokenId) external;\n}\n\n////// src/interfaces/ISettingsRegistry.sol\n/* pragma solidity ^0.6.7; */\n\ninterface ISettingsRegistry {\n    function uintOf(bytes32 _propertyName) external view returns (uint256);\n\n    function stringOf(bytes32 _propertyName) external view returns (string memory);\n\n    function addressOf(bytes32 _propertyName) external view returns (address);\n\n    function bytesOf(bytes32 _propertyName) external view returns (bytes memory);\n\n    function boolOf(bytes32 _propertyName) external view returns (bool);\n\n    function intOf(bytes32 _propertyName) external view returns (int);\n\n    function setUintProperty(bytes32 _propertyName, uint _value) external;\n\n    function setStringProperty(bytes32 _propertyName, string calldata _value) external;\n\n    function setAddressProperty(bytes32 _propertyName, address _value) external;\n\n    function setBytesProperty(bytes32 _propertyName, bytes calldata _value) external;\n\n    function setBoolProperty(bytes32 _propertyName, bool _value) external;\n\n    function setIntProperty(bytes32 _propertyName, int _value) external;\n\n    function getValueTypeOf(bytes32 _propertyName) external view returns (uint /* SettingsValueTypes */ );\n\n    event ChangeProperty(bytes32 indexed _propertyName, uint256 _type);\n}\n\n////// src/ItemBase.sol\n/* pragma solidity ^0.6.7; */\n\n/* import \"ds-math/math.sol\"; */\n/* import \"ds-stop/stop.sol\"; */\n/* import \"zeppelin-solidity/proxy/Initializable.sol\"; */\n/* import \"./interfaces/IELIP002.sol\"; */\n/* import \"./interfaces/IFormula.sol\"; */\n/* import \"./interfaces/ISettingsRegistry.sol\"; */\n/* import \"./interfaces/IMetaDataTeller.sol\"; */\n/* import \"./interfaces/IObjectOwnership.sol\"; */\n\ncontract ItemBase is Initializable, DSStop, DSMath, IELIP002 {\n\t// 0x434f4e54524143545f4d455441444154415f54454c4c45520000000000000000\n\tbytes32 public constant CONTRACT_METADATA_TELLER =\n\t\t\"CONTRACT_METADATA_TELLER\";\n\n\t// 0x434f4e54524143545f464f524d554c4100000000000000000000000000000000\n\tbytes32 public constant CONTRACT_FORMULA = \"CONTRACT_FORMULA\";\n\n\t// 0x434f4e54524143545f4f424a4543545f4f574e45525348495000000000000000\n\tbytes32 public constant CONTRACT_OBJECT_OWNERSHIP =\n\t\t\"CONTRACT_OBJECT_OWNERSHIP\";\n\n\t//0x434f4e54524143545f4c505f454c454d454e545f544f4b454e00000000000000\n\tbytes32 public constant CONTRACT_LP_ELEMENT_TOKEN =\n\t\t\"CONTRACT_LP_ELEMENT_TOKEN\";\n\n\t//0x434f4e54524143545f454c454d454e545f544f4b454e00000000000000000000\n\tbytes32 public constant CONTRACT_ELEMENT_TOKEN = \"CONTRACT_ELEMENT_TOKEN\";\n\n\t// rate precision\n\tuint128 public constant RATE_PRECISION = 10**8;\n\t// save about 200 gas when contract create\n\tbytes4 private constant _SELECTOR_TRANSFERFROM =\n\t\tbytes4(keccak256(bytes(\"transferFrom(address,address,uint256)\")));\n\n    bytes4 private constant _SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\n\n\t/*** STORAGE ***/\n\n\tuint128 public lastItemObjectId;\n\tISettingsRegistry public registry;\n\tmapping(uint256 => Item) public tokenId2Item;\n\n\t// mapping(uint256 => mapping(uint256 => uint256)) public tokenId2Rate;\n\n\t/**\n\t * @dev Same with constructor, but is used and called by storage proxy as logic contract.\n\t */\n\tfunction initialize(address _registry) public initializer {\n\t\towner = msg.sender;\n\t\temit LogSetOwner(msg.sender);\n\t\tregistry = ISettingsRegistry(_registry);\n\n\t\t// trick test\n\t\t// lastItemObjectId = 1000000;\n\t}\n\n\tfunction _safeTransferFrom(\n\t\taddress token,\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 value\n\t) private {\n\t\t(bool success, bytes memory data) =\n\t\t\ttoken.call(abi.encodeWithSelector(_SELECTOR_TRANSFERFROM, from, to, value)); // solhint-disable-line\n\t\trequire(\n\t\t\tsuccess && (data.length == 0 || abi.decode(data, (bool))),\n\t\t\t\"Furnace: TRANSFERFROM_FAILED\"\n\t\t);\n\t}\n\n    function _safeTransfer(address token, address to, uint value) private {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(_SELECTOR, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'Furnace: TRANSFER_FAILED');\n    }\n\n\tfunction enchant(\n\t\tuint256 _index,\n\t\tuint256 _id,\n\t\taddress _token\n\t) external override stoppable returns (uint256) {\n\t\taddress teller = registry.addressOf(CONTRACT_METADATA_TELLER);\n\t\taddress formula = registry.addressOf(CONTRACT_FORMULA);\n\t\trequire(\n\t\t\tIFormula(formula).isDisable(_index) == false,\n\t\t\t\"Furnace: FORMULA_DISABLE\"\n\t\t);\n\t\t(address majorAddr, uint16 originClass, uint16 originPrefer) =\n\t\t\t_dealMajor(teller, formula, _index, _id);\n\t\t(uint16 prefer, uint256 amount) =\n\t\t\t_dealMinor(teller, formula, _index, _token);\n\t\tif (originClass > 0) {\n\t\t\trequire(prefer == originPrefer, \"Furnace: INVALID_PREFER\");\n\t\t}\n\t\treturn _enchanceItem(formula, _index, prefer, majorAddr, _id, _token, amount);\n\t}\n\n\tfunction _dealMajor(\n\t\taddress teller,\n\t\taddress formula,\n\t\tuint256 _index,\n\t\tuint256 _id\n\t) private returns (address, uint16, uint16) {\n\t\t(\n\t\t\taddress majorAddress,\n\t\t\tuint16 majorObjClassExt,\n\t\t\tuint16 majorClass,\n\t\t\tuint16 majorGrade\n\t\t) = IFormula(formula).getMajorInfo(_index);\n\t\t(uint16 objectClassExt, uint16 class, uint16 grade) =\n\t\t\tIMetaDataTeller(teller).getMetaData(majorAddress, _id);\n\t\trequire(\n\t\t\tobjectClassExt == majorObjClassExt,\n\t\t\t\"Furnace: INVALID_OBJECTCLASSEXT\"\n\t\t);\n\t\trequire(class == majorClass, \"Furnace: INVALID_CLASS\");\n\t\trequire(grade == majorGrade, \"Furnace: INVALID_GRADE\");\n\t\t_safeTransferFrom(majorAddress, msg.sender, address(this), _id);\n\t\tuint16 prefer = 0;\n\t\tif (class > 0) {\n\t\t\tprefer = getPrefer(_id);\n\t\t}\n\t\treturn (majorAddress, class, prefer);\n\t}\n\n\tfunction _dealMinor(\n\t\taddress teller,\n\t\taddress formula,\n\t\tuint256 _index,\n\t\taddress _token\n\t) private returns (uint16, uint256) {\n\t\t(bytes32 minor, uint256 amount) = IFormula(formula).getMinor(_index);\n\t\tuint16 prefer = 0;\n\t\tuint256 element = IMetaDataTeller(teller).getPrefer(minor, _token);\n\t\trequire(element > 0 && element < 6, \"Furnace: INVALID_MINOR\");\n\t\tprefer |= uint16(1 << element);\n\t\trequire(amount <= uint128(-1), \"Furnace: VALUE_OVERFLOW\");\n\t\t_safeTransferFrom(_token, msg.sender, address(this), amount);\n\t\treturn (prefer, amount);\n\t}\n\n\tfunction _enchanceItem(\n\t\taddress formula,\n\t\tuint256 _index,\n\t\tuint16 _prefer,\n\t\taddress _major,\n\t\tuint256 _id,\n\t\taddress _minor,\n\t\tuint256 _amount\n\t) private returns (uint256) {\n\t\tlastItemObjectId += 1;\n\t\trequire(lastItemObjectId <= uint128(-1), \"Furnace: OBJECTID_OVERFLOW\");\n\t\t(uint16 objClassExt, uint16 class, uint16 grade, uint128 rate) =\n\t\t\tIFormula(formula).getMetaInfo(_index);\n\t\tItem memory item =\n\t\t\tItem({\n\t\t\t\tindex: _index,\n\t\t\t\trate: rate,\n\t\t\t\tobjClassExt: objClassExt,\n\t\t\t\tclass: class,\n\t\t\t\tgrade: grade,\n\t\t\t\tprefer: _prefer,\n\t\t\t\tmajor: _major,\n\t\t\t\tid: _id,\n\t\t\t\tminor: _minor,\n\t\t\t\tamount: _amount\n\t\t\t});\n\t\tuint256 tokenId =\n\t\t\tIObjectOwnership(registry.addressOf(CONTRACT_OBJECT_OWNERSHIP))\n\t\t\t\t.mintObject(msg.sender, lastItemObjectId);\n\t\ttokenId2Item[tokenId] = item;\n\t\temit Enchanced(\n\t\t\tmsg.sender,\n\t\t\ttokenId,\n\t\t\titem.index,\n\t\t\titem.rate,\n\t\t\titem.objClassExt,\n\t\t\titem.class,\n\t\t\titem.grade,\n\t\t\titem.prefer,\n\t\t\titem.major,\n\t\t\titem.id,\n\t\t\titem.minor,\n\t\t\titem.amount,\n\t\t\tnow // solhint-disable-line\n\t\t);\n\t\treturn tokenId;\n\t}\n\n\tfunction _disenchantItem(address to, uint256 tokenId) private {\n\t\tIObjectOwnership(registry.addressOf(CONTRACT_OBJECT_OWNERSHIP)).burn(\n\t\t\tto,\n\t\t\ttokenId\n\t\t);\n        delete tokenId2Item[tokenId];\n\t}\n\n\tfunction disenchant(uint256 _id, uint256 _depth)\n\t\texternal\n\t\toverride\n\t\tstoppable\n\t{\n\t\t_safeTransferFrom(\n\t\t\tregistry.addressOf(CONTRACT_OBJECT_OWNERSHIP),\n\t\t\tmsg.sender,\n\t\t\taddress(this),\n\t\t\t_id\n\t\t);\n\n\t\t_disenchant(_id, _depth);\n\t}\n\n\tfunction _disenchant(uint256 _tokenId, uint256 _depth)\n\t\tprivate\n\t{\n\t\t(\n\t\t\tuint16 class,\n\t\t\tbool canDisenchant,\n\t\t\taddress major,\n\t\t\tuint256 id,\n\t\t\taddress minor,\n\t\t\tuint256 amount\n\t\t) = getEnchantedInfo(_tokenId);\n\t\trequire(_depth > 0, \"Furnace: INVALID_DEPTH\");\n\t\trequire(canDisenchant == true, \"Furnace: DISENCHANT_DISABLE\");\n\t\trequire(class > 0, \"Furnace: INVALID_CLASS\");\n\t\t_disenchantItem(address(this), _tokenId);\n\t\tif (_depth == 1 || class == 0) {\n\t\t\t_safeTransferFrom(major, address(this), msg.sender, id);\n\t\t} else {\n\t\t\t_disenchant(id, _depth - 1);\n\t\t}\n\t\t_safeTransfer(minor, msg.sender, amount);\n\t\temit Disenchanted(msg.sender, _tokenId, major, id, minor, amount);\n\t}\n\n\tfunction getRate(uint256 _tokenId, uint256 _element)\n\t\tpublic\n\t\tview\n\t\toverride\n\t\treturns (uint256)\n\t{\n\t\tItem storage item = tokenId2Item[_tokenId];\n\t\tif (uint256(item.prefer) & (1 << _element) > 0) {\n\t\t\treturn uint256(item.rate);\n\t\t}\n\t\treturn uint256(item.rate / 2);\n\t}\n\n\tfunction getBaseInfo(uint256 _tokenId)\n\t\tpublic\n\t\tview\n\t\toverride\n\t\treturns (\n\t\t\tuint16,\n\t\t\tuint16,\n\t\t\tuint16\n\t\t)\n\t{\n\t\tItem storage item = tokenId2Item[_tokenId];\n\t\treturn (item.objClassExt, item.class, item.grade);\n\t}\n\n\tfunction getPrefer(uint256 _tokenId) public view override returns (uint16) {\n\t\treturn tokenId2Item[_tokenId].prefer;\n\t}\n\n\tfunction getObjectClassExt(uint256 _tokenId)\n\t\tpublic\n\t\tview\n\t\toverride\n\t\treturns (uint16)\n\t{\n\t\treturn tokenId2Item[_tokenId].objClassExt;\n\t}\n\n\tfunction getEnchantedInfo(uint256 _tokenId)\n\t\tpublic\n\t\tview\n\t\treturns (\n\t\t\tuint16,\n\t\t\tbool,\n\t\t\taddress,\n\t\t\tuint256,\n\t\t\taddress,\n\t\t\tuint256\n\t\t)\n\t{\n\t\tItem storage item = tokenId2Item[_tokenId];\n\t\treturn (\n\t\t\titem.class,\n\t\t\tIFormula(registry.addressOf(CONTRACT_FORMULA)).canDisenchant(item.index),\n\t\t\titem.major,\n\t\t\titem.id,\n\t\t\titem.minor,\n\t\t\titem.amount\n\t\t);\n\t}\n}\n","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"major\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Disenchanted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"objClassExt\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"class\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"grade\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"prefer\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"major\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"now\",\"type\":\"uint256\"}],\"name\":\"Enchanced\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTRACT_ELEMENT_TOKEN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_FORMULA\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_LP_ELEMENT_TOKEN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_METADATA_TELLER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_OBJECT_OWNERSHIP\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATE_PRECISION\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract DSAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depth\",\"type\":\"uint256\"}],\"name\":\"disenchant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"enchant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getBaseInfo\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getEnchantedInfo\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getObjectClassExt\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPrefer\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_element\",\"type\":\"uint256\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastItemObjectId\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract ISettingsRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract DSAuthority\",\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenId2Item\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"objClassExt\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"class\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"grade\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"prefer\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"major\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"minor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ItemBase","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}