{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.0;\r\n\r\n// ----------------------------------------------------------------------------\r\n// LunarTokenHelper v0.9.0\r\n//\r\n// https://github.com/bokkypoobah/TokenToolz\r\n//\r\n// Deployed to 0x9809Dbeb9e030eb296C7C410758310Dfcb1ef3DD\r\n// \r\n// Note: _subdivisions and _parentIds not retrieved as LunaToken plots cannot\r\n// currently be subdivided. And stack-too-deep errors.\r\n//\r\n// SPDX-License-Identifier: MIT\r\n//\r\n// Enjoy. And hello, from the past.\r\n//\r\n// (c) BokkyPooBah / Bok Consulting Pty Ltd 2021. The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\ninterface ILunarToken {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function totalSupply() external view returns (uint);\r\n    \r\n    function numPlots() external view returns (uint);\r\n    function totalOwned() external view returns (uint);\r\n    function totalPurchases() external view returns (uint);\r\n    function initialPrice() external view returns (uint);\r\n    function feePercentage() external view returns (uint8);\r\n    function tradingEnabled() external view returns (bool);\r\n    function subdivisionEnabled() external view returns (bool);\r\n    function maxSubdivisions() external view returns (uint8);\r\n    \r\n    function plots(uint tokenId) external view returns (address owner, uint price, bool forSale, string memory metadata, bool disabled, uint8 subdivision, uint parentId);\r\n}\r\n\r\n\r\ncontract LunarTokenHelper {\r\n    ILunarToken public constant lunarToken = ILunarToken(0x43fb95c7afA1Ac1E721F33C695b2A0A94C7ddAb2);\r\n    \r\n    function tokenInfo() external view returns(string memory _symbol, string memory _name, uint[] memory _data) {\r\n        _symbol = lunarToken.symbol();\r\n        _name = lunarToken.name();\r\n        _data = new uint[](9);\r\n        _data[0] = lunarToken.totalSupply();\r\n        _data[1] = lunarToken.numPlots();\r\n        _data[2] = lunarToken.totalOwned();\r\n        _data[3] = lunarToken.totalPurchases();\r\n        _data[4] = lunarToken.initialPrice();\r\n        _data[5] = lunarToken.feePercentage();\r\n        _data[6] = lunarToken.tradingEnabled() ? 1 : 0;\r\n        _data[7] = lunarToken.subdivisionEnabled() ? 1 : 0;\r\n        _data[8] = lunarToken.maxSubdivisions();\r\n    }\r\n\r\n    function plots(uint from, uint to) external view returns(uint[] memory _tokenIds, address[] memory _owners, uint[] memory _prices, bool[] memory _forSales, string[] memory _metadatas, bool[] memory _disableds/*, uint8[] memory _subdivisions, uint[] memory _parentIds*/) {\r\n        require(from < to && to <= lunarToken.totalSupply());\r\n        uint length = to - from;\r\n        _tokenIds = new uint[](length);\r\n        _owners = new address[](length);\r\n        _prices = new uint[](length);\r\n        _forSales = new bool[](length);\r\n        _metadatas = new string[](length);\r\n        _disableds = new bool[](length);\r\n        // _subdivisions = new uint8[](length);\r\n        // _parentIds = new uint[](length);\r\n        \r\n        uint i = 0;\r\n        for (uint index = from; index < to; index++) {\r\n            _tokenIds[i] = index;\r\n            (_owners[i], _prices[i], _forSales[i], _metadatas[i], _disableds[i], /*_subdivisions[i]*/, /*_parentIds[i]*/) = lunarToken.plots(index);\r\n            i++;\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"lunarToken\",\"outputs\":[{\"internalType\":\"contract ILunarToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"plots\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_prices\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"_forSales\",\"type\":\"bool[]\"},{\"internalType\":\"string[]\",\"name\":\"_metadatas\",\"type\":\"string[]\"},{\"internalType\":\"bool[]\",\"name\":\"_disableds\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"_data\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LunarTokenHelper","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1c2de2d8762bf54e2c5534878f40678f5ab74eb020f612fc15d0032af3687e24"}]}