{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/EarlyBirdRegistry/IEarlyBirdRegistry.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title IEarlyBirdRegistry\\n/// @author Simon Fremaux (@dievardump)\\ninterface IEarlyBirdRegistry {\\n    /// @notice allows anyone to register a new project that accepts Early Birds registrations\\n    /// @param open if the early bird registration is open or only creator can register addresses\\n    /// @param endRegistration unix epoch timestamp of registration closing\\n    /// @param maxRegistration the max registration count\\n    /// @return projectId the project Id (useful if called by a contract)\\n    function registerProject(\\n        bool open,\\n        uint256 endRegistration,\\n        uint256 maxRegistration\\n    ) external returns (uint256 projectId);\\n\\n    /// @notice tells if a project exists\\n    /// @param projectId project id to check\\n    /// @return if the project exists\\n    function exists(uint256 projectId) external view returns (bool);\\n\\n    /// @notice Helper to paginate all address registered for a project\\n    /// @param projectId the project id\\n    /// @param offset index where to start\\n    /// @param limit how many to grab\\n    /// @return list of registered addresses\\n    function listRegistrations(\\n        uint256 projectId,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (address[] memory list);\\n\\n    /// @notice Helper to know how many address registered to a project\\n    /// @param projectId the project id\\n    /// @return how many people registered\\n    function registeredCount(uint256 projectId) external view returns (uint256);\\n\\n    /// @notice Helper to check if an address is registered for a project id\\n    /// @param check the address to check\\n    /// @param projectId the project id\\n    /// @return if the address was registered as an early bird\\n    function isRegistered(address check, uint256 projectId)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @notice Allows a project creator to add early birds in Batch\\n    /// @dev msg.sender must be the projectId creator\\n    /// @param projectId to add to\\n    /// @param birds all addresses to add\\n    function registerBatchTo(uint256 projectId, address[] memory birds)\\n        external;\\n}\\n\"\r\n    },\r\n    \"contracts/Sower.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@/@%,,,,,,,@#,@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&/%,,**,***,*,,,*(#@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*%*,,**********,,/%%@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#@*,************,/@(@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(@(,**,********,/@/@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,%,,**********,,#*@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.%,,*********,*&(@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&*(#(,,******,,,,,&/@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&,&@#,,,*****,***,*%,@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&,(***,******************,%&&/&@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#@*,**************************,/&(#@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@,%*******************************,*,#,/@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@#&***************************************#%*#@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@*&*******************************************/%(%%%((@\\n// @@@@@@@@@@@@@@@@@@@@@@@@ %*****************************************************#\\n// @@@@@@@@@@@@@@@@@@@@@&(%*************************************/&@(***************\\n// @@@@@@@@@@@@@@@@@@@#%%/***********%(#************************(//(((************#\\n// @@@@@@@@@@@@@@@@@@/(************@#&&#/***************************************//%\\n// @@@@@@@@@@@@@@@@#@**********&###@@@@&#&*************************************#/@@\\n// @@@@@@@@@@@@@@/%**********,%%@@@@@@@@*&************************************/#&@@\\n// @@@@@@@@@@@@%#/********/(#@@@@@@@@@@@@@(@%********************************&,@@@@\\n// @@@@@%#%####*********#(#@@@@@@@@@@@@@@@#@(******************************%&#@@@@@\\n// @@(@%/************@#@@@@@@@@@@@@@@@@@@@%@********************&*******@%,@@@@@@@@\\n// @/&//*////////*(@/@@@@@@@@@@@@@@@@@@@@&#/*////////////////**@%%(///%@@@@@@@@@@@@\\n// %(&/////////**%(&@@@@@@@@@@@@@@@@@@@@@(#//////////////////*/@*@@@@@@@@@@@@@@@@@@\\n// @@@*@@*//*#@&#@@@@@@@@@@@@@@@@@@@@@@@*@#*/////////////////*%@/@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@/#///////////////////%(%@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&/%///////////////////@##@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@/#///////////////////(@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@/#///////////////////%,@@@@@@@@@@@@@@@@\\n// @@@@@,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(&#////////////////////@/@@@@@@@@@@@@@@@\\n// @@@,@@@@@@@,@@@@@@@@@@@@@@@@@@@@@@@@@@@@*&//////////////////////&%@@@@@@@@@@@@@@\\n// @@@@,@@@,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%#&//////////////////////(&(@@@@@@@@@@@@@@\\n// @@@@@@@@@,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(@*///////////////////////%/#@@@@@@@@@@\\n// @@@@@@,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*@(/////////////////////////&&&@@@@@@@@@\\n// @@@,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*@(////////////%%/////////////%(@@@@@@@@@\\n// @@@@@,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&#(/////////////&/@#////////////(&*@@@@@@@@\\n// @@@@@@@,@@@@@@@@@@@@@@@@@@@@@@@@@@@@(@(((((((((((//#%&@#&/((((((((((((&*@@@@@@@@\\n// @@@@,@@@@,@@@@@@@@@@@@@@@@@@@@@@@@@%@((((((((((((#(%@@@@(@((((((((((((&/@@@@@@@@\\n// @@,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@##((((((((((((&&@@@@#&@((((((((((((&,@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(@%(((((((((((&/@@@@@@@(@((((((((((((&@&@@@@@@@\\n// @@@@@,@@@@@@@@@@@@@@@@@@@@@@@@@@@%(#(#########(%%@@@@@@@@@#&(#########(&@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%###########@%%@@@@@@@@@/@%##########&/@@@@@@@@\\n// @@,@@@@@@@@@@@@@@@@@@@@@@@@@@@@/&##########%&#@@@@@@@@@@@/@%###########@#@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&%%%%%%%%%%%@#@@@@@@@@@@@@@&%%%%%%%%%%%%@@#@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@&%&%%%%%%%%%%&&#@@@@@@@@@@@@@@&@%%%%%%%%%%%@%@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@/@%%%%%%%%%%%%@#@@@@@@@@@@@@@@%@%%%%%%%%%%%&%@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@/@%%%%%%%%%%%%%&@/%@@@@@@@@@@@@@%%%%%%%%%%%%%@#@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&&@@%&%%%%%%%%%%%@@&@@@@@@@@@%%%%%%%%%%%%%%%&@@#(\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&&%%%%%%%%%%&&%@@@@@@&@%%%%%%%%%%%%%%%%%%%%\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@##%#@@@@#@@@@@@@@@@@@@@@@@@@#%%%%%%%%%%%\\n\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\nimport './Variety/IVariety.sol';\\nimport './EarlyBirdRegistry/IEarlyBirdRegistry.sol';\\n\\n/// @title Sower\\n/// @author Simon Fremaux (@dievardump)\\ncontract Sower is Ownable, ReentrancyGuard {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    event Collected(\\n        address indexed operator,\\n        address indexed variety,\\n        uint256 indexed count,\\n        uint256 value\\n    );\\n\\n    event EarlyBirdSessionAdded(uint256 sessionId, uint256 projectId);\\n    event EarlyBirdSessionRemoved(uint256 sessionId, uint256 projectId);\\n\\n    event VarietyAdded(address variety);\\n    event VarietyChanged(address variety);\\n    event VarietyEmpty(address variety);\\n\\n    event DonationRecipientAdded(address recipient);\\n    event DonationRecipientRemoved(address recipient);\\n\\n    struct VarietyData {\\n        uint8 maxPerCollect; // how many can be collected at once. 0 == no limit\\n        bool active; // if Variety is active or not\\n        bool curated; // curated Varieties can only be minted by Variety creator\\n        address location; // address of the Variety contract\\n        address creator; // creator of the variety (in case the contract opens to more creators)\\n        uint256 price; // price of collecting\\n        uint256 available; // how many are available\\n        uint256 reserve; // how many are reserve for creator\\n        uint256 earlyBirdUntil; // earlyBird limit timestamp\\n        uint256 earlyBirdSessionId; // earlyBirdSessionId\\n    }\\n\\n    // main donation, we start with nfDAO\\n    address public mainDonation = 0x37133cda1941449cde7128f0C964C228F94844a8;\\n\\n    // Varieties list\\n    mapping(address => VarietyData) public varieties;\\n\\n    // list of known varieties address\\n    EnumerableSet.AddressSet internal knownVarieties;\\n\\n    // list of address to whom I would like to donate\\n    EnumerableSet.AddressSet internal donations;\\n\\n    // last generated seed\\n    bytes32 public lastSeed;\\n\\n    // address who used their EarlyBird access\\n    mapping(uint256 => mapping(address => bool)) internal _earlyBirdsConsumed;\\n\\n    // the early bird registry\\n    address public earlyBirdRegistry;\\n\\n    // because I messed up the EarlyBird registration before the launch\\n    // I have to use EarlyBirdSession containing one or more EarlyBirgProjectID.\\n    mapping(uint256 => EnumerableSet.UintSet) internal earlyBirdSessions;\\n\\n    constructor() {\\n        // Gitcoin Gnosis\\n        _addDonationRecipient(0xde21F729137C5Af1b01d73aF1dC21eFfa2B8a0d6);\\n\\n        // WOCA\\n        _addDonationRecipient(0xCCa88b952976DA313Fb928111f2D5c390eE0D723);\\n\\n        // Hardhat deploy / Jolly Roger\\n        _addDonationRecipient(0xF0D7a8198D75e10517f035CF11b928e9E2aB20f4);\\n    }\\n\\n    /// @notice Allows collector to collect up to varietyData.maxPerCollect tokens from variety.\\n    /// @param count the number of tokens to collect\\n    /// @param variety the variety to collect from\\n    function plant(uint256 count, address variety)\\n        external\\n        payable\\n        nonReentrant\\n    {\\n        require(count > 0, '!count');\\n\\n        VarietyData storage varietyData = _getVariety(variety);\\n\\n        // curated varieties have to be created in a specific way, with the seed, only by creator\\n        require(varietyData.curated == false, \\\"Can't plant this Variety.\\\");\\n\\n        // varieties can be paused or out of stock\\n        require(varietyData.active == true, 'Variety paused or out of seeds.');\\n\\n        // if we are in an earlyBird phase\\n        if (varietyData.earlyBirdUntil >= block.timestamp) {\\n            require(\\n                isUserInEarlyBirdSession(\\n                    msg.sender,\\n                    varietyData.earlyBirdSessionId\\n                ),\\n                'Not registered for EarlyBirds'\\n            );\\n\\n            require(\\n                _earlyBirdsConsumed[varietyData.earlyBirdSessionId][\\n                    msg.sender\\n                ] == false,\\n                'Already used your EarlyBird'\\n            );\\n\\n            // set early bird as consumed\\n            _earlyBirdsConsumed[varietyData.earlyBirdSessionId][\\n                msg.sender\\n            ] = true;\\n\\n            require(count == 1, 'Early bird can only grab one');\\n        }\\n\\n        require(\\n            // verifies that there are enough tokens available for this variety\\n            (varietyData.available - varietyData.reserve) >= count &&\\n                // and that the user doesn't request more than what is allowed in one tx\\n                (varietyData.maxPerCollect == 0 ||\\n                    uint256(varietyData.maxPerCollect) >= count),\\n            'Too many requested.'\\n        );\\n\\n        address operator = msg.sender;\\n\\n        require(msg.value == varietyData.price * count, 'Value error.');\\n\\n        _plant(varietyData, count, operator);\\n    }\\n\\n    /// @notice Owner function to be able to get varieties from the reserve\\n    /// @param count how many the owner wants\\n    /// @param variety from what variety\\n    /// @param recipient might be a giveaway? recipient can be someone else than owner\\n    function plantFromReserve(\\n        uint256 count,\\n        address variety,\\n        address recipient\\n    ) external {\\n        require(count > 0, '!count');\\n\\n        VarietyData storage varietyData = _getVariety(variety);\\n\\n        // curated varieties have to be created in a specific way, with the seed, only by creator\\n        require(varietyData.curated == false, \\\"Can't plant this Variety.\\\");\\n\\n        // verify that caller is the variety creator\\n        // or there is no variety creator and the caller is current owner\\n        require(\\n            msg.sender == varietyData.creator ||\\n                (varietyData.creator == address(0) && msg.sender == owner()),\\n            'Not Variety creator.'\\n        );\\n\\n        require(\\n            varietyData.reserve >= count && varietyData.available >= count,\\n            'Not enough reserve.'\\n        );\\n\\n        varietyData.reserve -= count;\\n\\n        if (recipient == address(0)) {\\n            recipient = msg.sender;\\n        }\\n\\n        _plant(varietyData, count, recipient);\\n    }\\n\\n    /// @notice Some Varieties can not generate aesthetic output with random seeds.\\n    ///         Those are \\\"curated Varieties\\\" that only the creator can mint from with curated seeds\\n    ///         The resulting Seedlings will probably be gifted or sold directly on Marketplaces\\n    ///         (direct sale or auction)\\n    /// @param variety the variety to create from\\n    /// @param recipient the recipient of the creation\\n    /// @param seeds the seeds to create\\n    function plantFromCurated(\\n        address variety,\\n        address recipient,\\n        bytes32[] memory seeds\\n    ) external {\\n        require(seeds.length > 0, '!count');\\n\\n        VarietyData storage varietyData = _getVariety(variety);\\n\\n        // verify this variety is indeed a curated one\\n        require(varietyData.curated == true, 'Variety not curated.');\\n\\n        // verify that caller is the variety creator\\n        // or there is no variety creator and the caller is current owner\\n        require(\\n            msg.sender == varietyData.creator ||\\n                (varietyData.creator == address(0) && msg.sender == owner()),\\n            'Not Variety creator.'\\n        );\\n\\n        if (recipient == address(0)) {\\n            recipient = msg.sender;\\n        }\\n\\n        _plantSeeds(varietyData, recipient, seeds);\\n    }\\n\\n    /// @notice Helper to list all Varieties\\n    /// @return list of varieties\\n    function listVarieties() external view returns (VarietyData[] memory list) {\\n        uint256 count = knownVarieties.length();\\n        list = new VarietyData[](count);\\n        for (uint256 i; i < count; i++) {\\n            list[i] = varieties[knownVarieties.at(i)];\\n        }\\n    }\\n\\n    /// @notice Adds a new variety to the list\\n    /// @param newVariety the variety to be added\\n    /// @param price the collection cost\\n    /// @param maxPerCollect how many can be collected at once; 0 == no limit\\n    /// @param active if the variety is active or not\\n    /// @param creator variety creator\\n    /// @param available variety supply\\n    /// @param reserve variety reserve for variety creator\\n    /// @param curated if the variety is curated; if yes only creator can mint from it\\n    function addVariety(\\n        address newVariety,\\n        uint256 price,\\n        uint8 maxPerCollect,\\n        bool active,\\n        address creator,\\n        uint256 available,\\n        uint256 reserve,\\n        bool curated\\n    ) external onlyOwner {\\n        require(\\n            !knownVarieties.contains(newVariety),\\n            'Variety already exists.'\\n        );\\n        knownVarieties.add(newVariety);\\n\\n        varieties[newVariety] = VarietyData({\\n            maxPerCollect: maxPerCollect,\\n            price: price,\\n            active: active,\\n            creator: creator,\\n            location: newVariety,\\n            available: available,\\n            reserve: reserve,\\n            curated: curated,\\n            earlyBirdUntil: 0,\\n            earlyBirdSessionId: 0\\n        });\\n\\n        emit VarietyAdded(newVariety);\\n    }\\n\\n    /// @notice Allows to toggle a variety active state\\n    /// @param variety the variety address\\n    /// @param isActive if active or not\\n    function setActive(address variety, bool isActive) public onlyOwner {\\n        VarietyData storage varietyData = _getVariety(variety);\\n        require(\\n            !isActive || varietyData.available > 0,\\n            \\\"Can't activate empty variety.\\\"\\n        );\\n        varietyData.active = isActive;\\n        emit VarietyChanged(variety);\\n    }\\n\\n    /// @notice Allows to change the max per collect for a variety\\n    /// @param variety the variety address\\n    /// @param maxPerCollect new max per collect\\n    function setMaxPerCollect(address variety, uint8 maxPerCollect)\\n        external\\n        onlyOwner\\n    {\\n        VarietyData storage varietyData = _getVariety(variety);\\n        varietyData.maxPerCollect = maxPerCollect;\\n        emit VarietyChanged(variety);\\n    }\\n\\n    /// @notice activate EarlyBird for a Variety.\\n    ///         When earlyBird, only registered address can plant\\n    /// @param varieties_ the varieties address\\n    /// @param earlyBirdDuration duration of Early Bird from now on\\n    /// @param earlyBirdSessionId the session id containing projects to check on the EarlyBirdRegistry\\n    /// @param activateVariety if the variety must be automatically activated (meaning early bird starts now)\\n    function activateEarlyBird(\\n        address[] memory varieties_,\\n        uint256 earlyBirdDuration,\\n        uint256 earlyBirdSessionId,\\n        bool activateVariety\\n    ) external onlyOwner {\\n        require(\\n            earlyBirdSessions[earlyBirdSessionId].length() > 0,\\n            'Session id empty'\\n        );\\n\\n        for (uint256 i; i < varieties_.length; i++) {\\n            VarietyData storage varietyData = _getVariety(varieties_[i]);\\n            varietyData.earlyBirdUntil = block.timestamp + earlyBirdDuration;\\n            varietyData.earlyBirdSessionId = earlyBirdSessionId;\\n\\n            if (activateVariety) {\\n                setActive(varieties_[i], true);\\n            } else {\\n                emit VarietyChanged(varieties_[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice sets early bird registry\\n    /// @param earlyBirdRegistry_ the registry\\n    function setEarlyBirdRegistry(address earlyBirdRegistry_)\\n        external\\n        onlyOwner\\n    {\\n        require(earlyBirdRegistry_ != address(0), 'Wrong address.');\\n        earlyBirdRegistry = earlyBirdRegistry_;\\n    }\\n\\n    /// @notice Allows to add an early bird project id to an \\\"early bird session\\\"\\n    /// @dev an early bird session is a group of early bird registrations projects\\n    /// @param sessionId the session to add to\\n    /// @param projectIds the projectIds (containing registration in EarlyBirdRegistry) to add\\n    function addEarlyBirdProjectToSession(\\n        uint256 sessionId,\\n        uint256[] memory projectIds\\n    ) external onlyOwner {\\n        require(sessionId > 0, \\\"Session can't be 0\\\");\\n        for (uint256 i; i < projectIds.length; i++) {\\n            require(\\n                IEarlyBirdRegistry(earlyBirdRegistry).exists(projectIds[i]),\\n                'Unknown early bird project'\\n            );\\n            earlyBirdSessions[sessionId].add(projectIds[i]);\\n            emit EarlyBirdSessionAdded(sessionId, projectIds[i]);\\n        }\\n    }\\n\\n    /// @notice Allows to remove an early bird project id from an \\\"early bird session\\\"\\n    /// @dev an early bird session is a group of early bird registrations projects\\n    /// @param sessionId the session to remove from\\n    /// @param projectIds the projectIds (containing registration in EarlyBirdRegistry) to remove\\n    function removeEarlyBirdProjectFromSession(\\n        uint256 sessionId,\\n        uint256[] memory projectIds\\n    ) external onlyOwner {\\n        require(sessionId > 0, \\\"Session can't be 0\\\");\\n\\n        for (uint256 i; i < projectIds.length; i++) {\\n            earlyBirdSessions[sessionId].remove(projectIds[i]);\\n            emit EarlyBirdSessionRemoved(sessionId, projectIds[i]);\\n        }\\n    }\\n\\n    /// @notice Helper to know if a user is in any of the early bird list for current session\\n    /// @param user the user to test\\n    /// @param sessionId the session to test for\\n    /// @return if the user is registered or not\\n    function isUserInEarlyBirdSession(address user, uint256 sessionId)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        // get all earlyBirdIds attached to the earlyBirdSession\\n        EnumerableSet.UintSet storage session = earlyBirdSessions[sessionId];\\n        uint256 count = session.length();\\n\\n        for (uint256 i; i < count; i++) {\\n            // if the address is registered to any of those projectId\\n            if (\\n                IEarlyBirdRegistry(earlyBirdRegistry).isRegistered(\\n                    user,\\n                    session.at(i)\\n                )\\n            ) {\\n                return true;\\n            }\\n        }\\n\\n        // else it's not an early bird\\n        return false;\\n    }\\n\\n    /// @notice Helper to list all donation recipients\\n    /// @return list of donation recipients\\n    function listDonations() external view returns (address[] memory list) {\\n        uint256 count = donations.length();\\n        list = new address[](count);\\n        for (uint256 i; i < count; i++) {\\n            list[i] = donations.at(i);\\n        }\\n    }\\n\\n    /// @notice Allows to add a donation recipient\\n    /// @param recipient the recipient\\n    function addDonationRecipient(address recipient) external onlyOwner {\\n        _addDonationRecipient(recipient);\\n    }\\n\\n    /// @notice Allows to remove a donation recipient\\n    /// @param recipient the recipient\\n    function removeDonationRecipient(address recipient) external onlyOwner {\\n        _removeDonationRecipient(recipient);\\n    }\\n\\n    /// @notice Set mainDonation donation address\\n    /// @param newMainDonation the new address\\n    function setNewMainDonation(address newMainDonation) external onlyOwner {\\n        mainDonation = newMainDonation;\\n    }\\n\\n    /// @notice This function allows Sower to answer to a seed change request\\n    ///         in the event where a seed would produce errors of rendering\\n    ///         1) this function can only be called by Sower if the token owner\\n    ///         asked for a new seed (see Variety contract)\\n    ///         2) this function will only be called if there is a rendering error\\n    /// @param tokenId the tokenId that needs update\\n    function updateTokenSeed(address variety, uint256 tokenId)\\n        external\\n        onlyOwner\\n    {\\n        require(knownVarieties.contains(variety), 'Unknown variety.');\\n        IVariety(variety).changeSeedAfterRequest(tokenId);\\n    }\\n\\n    /// @dev Owner withdraw balance function\\n    function withdraw() external onlyOwner {\\n        require(address(this).balance > 0, \\\"I don't think so.\\\");\\n\\n        uint256 count = donations.length();\\n\\n        // forces mainDonation and donations to not be empty\\n        // Code is law.\\n        require(\\n            mainDonation != address(0) && count > 0,\\n            'You have to give in order to get.'\\n        );\\n\\n        bool success;\\n\\n        // 10% of current balance\\n        uint256 ten = address(this).balance / 10;\\n\\n        // send 10% to mainDonation address\\n        (success, ) = mainDonation.call{value: ten}('');\\n        require(success, '!success');\\n\\n        // share 10% between all other donation recipients\\n        uint256 parts = ten / count;\\n        for (uint256 i; i < count; i++) {\\n            (success, ) = donations.at(i).call{value: parts}('');\\n            require(success, '!success');\\n        }\\n\\n        // send the rest to sender; use call since it might be a contract someday\\n        (success, ) = msg.sender.call{value: address(this).balance}('');\\n        require(success, '!success');\\n    }\\n\\n    /// @dev Receive function for royalties\\n    receive() external payable {}\\n\\n    /// @dev Internal collection method\\n    /// @param varietyData the varietyData\\n    /// @param count how many to collect\\n    /// @param operator Seedlings recipient\\n    function _plant(\\n        VarietyData storage varietyData,\\n        uint256 count,\\n        address operator\\n    ) internal {\\n        bytes32 seed = lastSeed;\\n        bytes32[] memory seeds = new bytes32[](count);\\n        bytes32 blockHash = blockhash(block.number - 1);\\n        uint256 timestamp = block.timestamp;\\n\\n        // generate next seeds\\n        for (uint256 i; i < count; i++) {\\n            seed = _nextSeed(seed, timestamp, operator, blockHash);\\n            seeds[i] = seed;\\n        }\\n\\n        // saves lastSeed before planting\\n        lastSeed = seed;\\n\\n        _plantSeeds(varietyData, operator, seeds);\\n    }\\n\\n    /// @dev Allows to plant a list of seeds\\n    /// @param varietyData the variety data\\n    /// @param collector the recipient of the Seedling\\n    /// @param seeds the seeds to plant\\n    function _plantSeeds(\\n        VarietyData storage varietyData,\\n        address collector,\\n        bytes32[] memory seeds\\n    ) internal {\\n        IVariety(varietyData.location).plant(collector, seeds);\\n        uint256 count = seeds.length;\\n\\n        varietyData.available -= count;\\n        if (varietyData.available == 0) {\\n            varietyData.active = false;\\n            emit VarietyEmpty(varietyData.location);\\n        }\\n\\n        emit Collected(collector, varietyData.location, count, msg.value);\\n\\n        // if Variety has a creator that is not contract owner, send them the value directly\\n        if (\\n            varietyData.creator != address(0) &&\\n            msg.value > 0 &&\\n            varietyData.creator != owner()\\n        ) {\\n            (bool success, ) = varietyData.creator.call{value: msg.value}('');\\n            require(success, '!success');\\n        }\\n    }\\n\\n    /// @dev Calculate next seed using a few on chain data\\n    /// @param currentSeed the current seed\\n    /// @param timestamp current block timestamp\\n    /// @param operator current operator\\n    /// @param blockHash last block hash\\n    /// @return a new bytes32 seed\\n    function _nextSeed(\\n        bytes32 currentSeed,\\n        uint256 timestamp,\\n        address operator,\\n        bytes32 blockHash\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    currentSeed,\\n                    timestamp,\\n                    operator,\\n                    blockHash,\\n                    block.coinbase,\\n                    block.difficulty,\\n                    tx.gasprice\\n                )\\n            );\\n    }\\n\\n    /// @notice Returns a variety, throws if does not exist\\n    /// @param variety the variety to get\\n    function _getVariety(address variety)\\n        internal\\n        view\\n        returns (VarietyData storage)\\n    {\\n        require(knownVarieties.contains(variety), 'Unknown variety.');\\n        return varieties[variety];\\n    }\\n\\n    /// @dev Allows to add a donation recipient to the list of donations\\n    /// @param recipient the recipient\\n    function _addDonationRecipient(address recipient) internal {\\n        donations.add(recipient);\\n        emit DonationRecipientAdded(recipient);\\n    }\\n\\n    /// @dev Allows to remove a donation recipient from the list of donations\\n    /// @param recipient the recipient\\n    function _removeDonationRecipient(address recipient) internal {\\n        donations.remove(recipient);\\n        emit DonationRecipientRemoved(recipient);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Variety/IVariety.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\n/// @title IVariety interface\\n/// @author Simon Fremaux (@dievardump)\\ninterface IVariety is IERC721 {\\n    /// @notice mint `seeds.length` token(s) to `to` using `seeds`\\n    /// @param to token recipient\\n    /// @param seeds each token seed\\n    function plant(address to, bytes32[] memory seeds)\\n        external\\n        returns (uint256);\\n\\n    /// @notice this function returns the seed associated to a tokenId\\n    /// @param tokenId to get the seed of\\n    function getTokenSeed(uint256 tokenId) external view returns (bytes32);\\n\\n    /// @notice This function allows an owner to ask for a seed update\\n    ///         this can be needed because although I test the contract as much as possible,\\n    ///         it might be possible that one token does not render because the seed creates\\n    ///         error or even \\\"out of gas\\\" computation. That's why this would allow an owner\\n    ///         in such case, to request for a seed change that will then be triggered by Sower\\n    /// @param tokenId id to regenerate seed for\\n    function requestSeedChange(uint256 tokenId) external;\\n\\n    /// @notice This function allows Sower to answer to a seed change request\\n    ///         in the event where a seed would produce errors of rendering\\n    ///         1) this function can only be called by Sower if the token owner\\n    ///         asked for a new seed\\n    ///         2) this function will only be called if there is a rendering error\\n    ///         or, Vitalik Buterin forbid, a duplicate\\n    /// @param tokenId id to regenerate seed for\\n    function changeSeedAfterRequest(uint256 tokenId) external;\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"variety\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Collected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"DonationRecipientAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"DonationRecipientRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"EarlyBirdSessionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"EarlyBirdSessionRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"variety\",\"type\":\"address\"}],\"name\":\"VarietyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"variety\",\"type\":\"address\"}],\"name\":\"VarietyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"variety\",\"type\":\"address\"}],\"name\":\"VarietyEmpty\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"varieties_\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"earlyBirdDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyBirdSessionId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"activateVariety\",\"type\":\"bool\"}],\"name\":\"activateEarlyBird\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"addDonationRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"projectIds\",\"type\":\"uint256[]\"}],\"name\":\"addEarlyBirdProjectToSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newVariety\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"maxPerCollect\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"curated\",\"type\":\"bool\"}],\"name\":\"addVariety\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyBirdRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"}],\"name\":\"isUserInEarlyBirdSession\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSeed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listDonations\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listVarieties\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"maxPerCollect\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"curated\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"location\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyBirdUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyBirdSessionId\",\"type\":\"uint256\"}],\"internalType\":\"struct Sower.VarietyData[]\",\"name\":\"list\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainDonation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"variety\",\"type\":\"address\"}],\"name\":\"plant\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"variety\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"seeds\",\"type\":\"bytes32[]\"}],\"name\":\"plantFromCurated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"variety\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"plantFromReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"removeDonationRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"projectIds\",\"type\":\"uint256[]\"}],\"name\":\"removeEarlyBirdProjectFromSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"variety\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"setActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"earlyBirdRegistry_\",\"type\":\"address\"}],\"name\":\"setEarlyBirdRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"variety\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"maxPerCollect\",\"type\":\"uint8\"}],\"name\":\"setMaxPerCollect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMainDonation\",\"type\":\"address\"}],\"name\":\"setNewMainDonation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"variety\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"updateTokenSeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"varieties\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"maxPerCollect\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"curated\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"location\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyBirdUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyBirdSessionId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Sower","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}