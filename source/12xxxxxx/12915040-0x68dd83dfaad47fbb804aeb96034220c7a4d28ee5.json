{"status":"1","message":"OK","result":[{"SourceCode":"{\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"vesting.sol\":{\"content\":\"// SPDX-License-Identifier: MPL\\n\\npragma solidity ~0.8.4;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface ITGTERC20Metadata is IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function live() external view returns (uint64);\\n}\\n\\ncontract Vesting {\\n    ITGTERC20Metadata private _tgtContract;\\n    address private _owner;\\n    uint256 private _vestedBalance;\\n\\n    mapping(address =\\u003e VestingParams) private _vesting;\\n\\n    struct VestingParams {\\n        //96bit are enough: max value is 1000000000000000000000000000\\n        //96bit are:                    79228162514264337593543950336\\n        uint96 vestingAmount;\\n        //64bit for timestamp in seconds lasts 584 billion years\\n        uint64 vestingDuration;\\n        //how much vested funds were already claimed\\n        uint96 vestingClaimed;\\n    }\\n\\n    event Vested(address indexed account, uint96 amount, uint64 vestingDuration);\\n\\n    modifier onlyOwner(){\\n        require(msg.sender == _owner, \\\"Vesting: not the owner\\\");\\n        _;\\n    }\\n\\n    constructor(address tgtContract) {\\n        _owner = msg.sender;\\n        _tgtContract = ITGTERC20Metadata(tgtContract);\\n    }\\n\\n    function transferOwner(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Vesting: transfer owner the zero address\\\");\\n        require(newOwner != address(this), \\\"Vesting: transfer owner to this contract\\\");\\n\\n        _owner = newOwner;\\n    }\\n\\n    function vest(address[] calldata accounts, uint96[] calldata amounts,\\n                  uint64[] calldata vestingDurations) public virtual onlyOwner {\\n        require(accounts.length == amounts.length, \\\"Vesting: accounts and amounts length must match\\\");\\n        require(amounts.length == vestingDurations.length, \\\"Vesting: amounts and vestingDurations length must match\\\");\\n\\n        for(uint256 i=0;i\\u003caccounts.length;i++) {\\n            _vestedBalance += amounts[i];\\n            //only vest those accounts that are not yet vested. We dont want to merge vestings\\n            if(_vesting[accounts[i]].vestingAmount == 0) {\\n                _vesting[accounts[i]] = VestingParams(amounts[i], vestingDurations[i], 0);\\n                emit Vested(accounts[i], amounts[i], vestingDurations[i]);\\n            }\\n        }\\n        require(_vestedBalance \\u003c= _tgtContract.balanceOf(address(this)), \\\"Vesting: not enough tokens in this contract for vesting\\\");\\n    }\\n\\n    function canClaim(address vested) public view virtual returns (uint256) {\\n        if(block.timestamp \\u003c= _tgtContract.live() || _tgtContract.live() == 0) {\\n            return 0;\\n        }\\n        VestingParams memory v = _vesting[vested];\\n        return claimableAmount(v);\\n    }\\n\\n    function claimableAmount(VestingParams memory v) internal view virtual returns (uint256) {\\n        uint256 currentDuration = block.timestamp - _tgtContract.live();\\n\\n        uint256 unlockedFunds = 0;\\n        if(v.vestingDuration \\u003c currentDuration) {\\n            //we can give all of it, vesting time passed, otherwise we see a div by zero\\n            unlockedFunds = v.vestingAmount;\\n        } else {\\n            unlockedFunds = v.vestingAmount * currentDuration / v.vestingDuration;\\n        }\\n        return unlockedFunds - v.vestingClaimed;\\n    }\\n\\n    function vestedBalance() public view virtual returns (uint256) {\\n        return _vestedBalance;\\n    }\\n\\n    function vestedBalanceOf(address vested) public view virtual returns (uint256) {\\n        VestingParams memory v = _vesting[vested];\\n        return v.vestingAmount - v.vestingClaimed;\\n    }\\n\\n    function claim(address to, uint96 amount) public virtual {\\n        require(block.timestamp \\u003e _tgtContract.live(), \\u0027Vesting: timestamp now or in the past?\\u0027);\\n        require(_tgtContract.live() != 0, \\\"Vesting: contract not live yet\\\");\\n        require(to != address(0), \\\"Vesting: transfer from the zero address\\\");\\n        require(to != address(this), \\\"Vesting: sender is this contract\\\");\\n        require(to != address(_tgtContract), \\\"Vesting: sender is _tgtContract contract\\\");\\n\\n        VestingParams storage v = _vesting[msg.sender];\\n\\n        require(amount \\u003c= claimableAmount(v), \\\"TGT: cannot transfer vested funds\\\");\\n\\n        v.vestingClaimed += amount;\\n        _vestedBalance -= amount;\\n        _tgtContract.transfer(to, amount);\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tgtContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"vestingDuration\",\"type\":\"uint64\"}],\"name\":\"Vested\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vested\",\"type\":\"address\"}],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint96[]\",\"name\":\"amounts\",\"type\":\"uint96[]\"},{\"internalType\":\"uint64[]\",\"name\":\"vestingDurations\",\"type\":\"uint64[]\"}],\"name\":\"vest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vested\",\"type\":\"address\"}],\"name\":\"vestedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Vesting","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000108a850856db3f85d0269a2693d896b394c80325","EVMVersion":"Default","Library":"","LicenseType":"MPL-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ca510082a0ca4005d7455a5b037fb15d10453e9eda062ce71fba2d87dacd3f1b"}]}