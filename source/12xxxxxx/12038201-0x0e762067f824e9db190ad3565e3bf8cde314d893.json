{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.7.5;\r\n\r\ninterface IERC20 {\r\n\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IOwnable {\r\n\r\n  function owner() external view returns (address);\r\n\r\n  function renounceOwnership() external;\r\n  \r\n  function transferOwnership( address newOwner_ ) external;\r\n}\r\n\r\ncontract Ownable is IOwnable {\r\n    \r\n  address internal _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor () {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred( address(0), _owner );\r\n  }\r\n\r\n  function owner() public view override returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require( _owner == msg.sender, \"Ownable: caller is not the owner\" );\r\n    _;\r\n  }\r\n\r\n  function renounceOwnership() public virtual override onlyOwner() {\r\n    emit OwnershipTransferred( _owner, address(0) );\r\n    _owner = address(0);\r\n  }\r\n\r\n  function transferOwnership( address newOwner_ ) public virtual override onlyOwner() {\r\n    require( newOwner_ != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred( _owner, newOwner_ );\r\n    _owner = newOwner_;\r\n  }\r\n}\r\n\r\ncontract OHMPreSale is Ownable {\r\n    using SafeMath for uint;\r\n    using SafeERC20 for IERC20;  \r\n    \r\n    address public aOHM;\r\n    address public DAI;\r\n    address public addressToSendDai;\r\n    \r\n    uint public salePrice;\r\n    uint public totalWhiteListed;\r\n    uint public endOfSale;\r\n\r\n    bool public saleStarted;\r\n\r\n    mapping(address => bool) boughtOHM;\r\n    mapping(address => bool) whiteListed;\r\n\r\n    function whiteListBuyers( address[] memory _buyers ) external onlyOwner() returns ( bool ) {\r\n        require(saleStarted == false, 'Already initialized');\r\n\r\n        totalWhiteListed = totalWhiteListed.add( _buyers.length );\r\n\r\n        for( uint i; i < _buyers.length; i++ ) {\r\n            whiteListed[_buyers[i]] = true;\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n    \r\n    function initialize ( address _addressToSendDai, address _dai, address _aOHM, uint _salePrice, uint _saleLength ) external onlyOwner() returns(bool) {\r\n        require(saleStarted == false, 'Already initialized');\r\n\r\n        aOHM = _aOHM;\r\n        DAI = _dai;\r\n\r\n        salePrice = _salePrice;\r\n        \r\n        endOfSale = _saleLength.add(block.timestamp);\r\n\r\n        saleStarted = true;\r\n\r\n        addressToSendDai = _addressToSendDai;\r\n\r\n        return true;\r\n    }\r\n\r\n    function getAllotmentPerBuyer() public view returns (uint) {\r\n        return IERC20( aOHM ).balanceOf(address(this)).div(totalWhiteListed);\r\n    }\r\n\r\n    function purchaseaOHM(uint _amountDAI) external returns(bool) {\r\n        require (saleStarted == true, 'Not started');\r\n        require(whiteListed[msg.sender] == true, 'Not whitelisted');\r\n        require(boughtOHM[msg.sender] == false, 'Already participated');\r\n        require(block.timestamp < endOfSale, 'Sale over');\r\n\r\n        boughtOHM[msg.sender] = true;\r\n\r\n        uint _purchaseAmount = _calculateSaleQuote( _amountDAI );\r\n\r\n        require(_purchaseAmount <= getAllotmentPerBuyer(), 'More than alloted');\r\n        totalWhiteListed = totalWhiteListed.sub(1);\r\n\r\n        IERC20( DAI ).safeTransferFrom(msg.sender, addressToSendDai, _amountDAI);\r\n        IERC20( aOHM ).safeTransfer(msg.sender, _purchaseAmount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function sendRemainingaOHM() external onlyOwner() returns(bool) {\r\n        require (saleStarted == true, 'Not started');\r\n        require (block.timestamp >= endOfSale, 'Not ended');\r\n\r\n        IERC20( aOHM ).safeTransfer(msg.sender, IERC20( aOHM ).balanceOf(address(this)));\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function _calculateSaleQuote( uint paymentAmount_ ) internal view returns ( uint ) {\r\n      return uint(1e9).mul(paymentAmount_).div(salePrice);\r\n    }\r\n\r\n    function calculateSaleQuote( uint paymentAmount_ ) external view returns ( uint ) {\r\n      return _calculateSaleQuote( paymentAmount_ );\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aOHM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressToSendDai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentAmount_\",\"type\":\"uint256\"}],\"name\":\"calculateSaleQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endOfSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllotmentPerBuyer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressToSendDai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aOHM\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_saleLength\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountDAI\",\"type\":\"uint256\"}],\"name\":\"purchaseaOHM\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendRemainingaOHM\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWhiteListed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_buyers\",\"type\":\"address[]\"}],\"name\":\"whiteListBuyers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OHMPreSale","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cb7c843da6fedaf8495e1b8ecffb4b4e40be4b929f243692a6db4eb1bf071e82"}]}