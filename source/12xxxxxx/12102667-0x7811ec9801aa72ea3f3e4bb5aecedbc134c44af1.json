{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/recipes/UniPieRecipe.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.1;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../interfaces/IRecipe.sol\\\";\\r\\nimport \\\"../interfaces/IUniRouter.sol\\\";\\r\\nimport \\\"../interfaces/ILendingRegistry.sol\\\";\\r\\nimport \\\"../interfaces/ILendingLogic.sol\\\";\\r\\nimport \\\"../interfaces/IPieRegistry.sol\\\";\\r\\nimport \\\"../interfaces/IPie.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\n\\r\\ncontract UniPieRecipe is IRecipe, Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    IERC20 immutable WETH;\\r\\n    IUniRouter immutable uniRouter;\\r\\n    IUniRouter immutable sushiRouter;\\r\\n    ILendingRegistry immutable lendingRegistry;\\r\\n    IPieRegistry immutable pieRegistry;\\r\\n\\r\\n    event HopUpdated(address indexed _token, address indexed _hop);\\r\\n\\r\\n    // Adds a custom hop before reaching the destination token\\r\\n    mapping(address => CustomHop) public customHops;\\r\\n\\r\\n    struct CustomHop {\\r\\n        address hop;\\r\\n        // DexChoice dex;\\r\\n    }\\r\\n\\r\\n    enum DexChoice {Uni, Sushi}\\r\\n\\r\\n    constructor(\\r\\n        address _weth,\\r\\n        address _uniRouter,\\r\\n        address _sushiRouter,\\r\\n        address _lendingRegistry,\\r\\n        address _pieRegistry\\r\\n    ) { \\r\\n        require(_weth != address(0), \\\"WETH_ZERO\\\");\\r\\n        require(_uniRouter != address(0), \\\"UNI_ROUTER_ZERO\\\");\\r\\n        require(_sushiRouter != address(0), \\\"SUSHI_ROUTER_ZERO\\\");\\r\\n        require(_lendingRegistry != address(0), \\\"LENDING_MANAGER_ZERO\\\");\\r\\n        require(_pieRegistry != address(0), \\\"PIE_REGISTRY_ZERO\\\");\\r\\n\\r\\n        WETH = IERC20(_weth);\\r\\n        uniRouter = IUniRouter(_uniRouter);\\r\\n        sushiRouter = IUniRouter(_sushiRouter);\\r\\n        lendingRegistry = ILendingRegistry(_lendingRegistry);\\r\\n        pieRegistry = IPieRegistry(_pieRegistry);\\r\\n    }\\r\\n\\r\\n    function bake(\\r\\n        address _inputToken,\\r\\n        address _outputToken,\\r\\n        uint256 _maxInput,\\r\\n        bytes memory _data\\r\\n    ) external override returns(uint256 inputAmountUsed, uint256 outputAmount) {\\r\\n        IERC20 inputToken = IERC20(_inputToken);\\r\\n        IERC20 outputToken = IERC20(_outputToken);\\r\\n\\r\\n        inputToken.safeTransferFrom(_msgSender(), address(this), _maxInput);\\r\\n\\r\\n        (uint256 mintAmount) = abi.decode(_data, (uint256));\\r\\n\\r\\n        swap(_inputToken, _outputToken, mintAmount);\\r\\n\\r\\n        uint256 remainingInputBalance = inputToken.balanceOf(address(this));\\r\\n        if(remainingInputBalance > 0) {\\r\\n            inputToken.transfer(_msgSender(), remainingInputBalance);\\r\\n        }\\r\\n\\r\\n        outputAmount = outputToken.balanceOf(address(this));\\r\\n\\r\\n        outputToken.safeTransfer(_msgSender(), outputAmount);\\r\\n\\r\\n        inputAmountUsed = _maxInput - remainingInputBalance;\\r\\n\\r\\n        return(inputAmountUsed, outputAmount);\\r\\n    }\\r\\n\\r\\n    function swap(address _inputToken, address _outputToken, uint256 _outputAmount) internal {\\r\\n        // console.log(\\\"Buying\\\", _outputToken, \\\"with\\\", _inputToken);\\r\\n\\r\\n        if(_inputToken == _outputToken) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // if input is not WETH buy WETH\\r\\n        if(_inputToken != address(WETH)) {\\r\\n            uint256 wethAmount = getPrice(address(WETH), _outputToken, _outputAmount);\\r\\n            swapUniOrSushi(_inputToken, address(WETH), wethAmount);\\r\\n            swap(address(WETH), _outputToken, _outputAmount);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if(pieRegistry.inRegistry(_outputToken)) {\\r\\n            // console.log(\\\"Swapping to PIE\\\", _outputToken);\\r\\n            swapPie(_outputToken, _outputAmount);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        address underlying = lendingRegistry.wrappedToUnderlying(_outputToken);\\r\\n        if(underlying != address(0)) {\\r\\n            // calc amount according to exchange rate\\r\\n            ILendingLogic lendingLogic = getLendingLogicFromWrapped(_outputToken);\\r\\n            uint256 exchangeRate = lendingLogic.exchangeRate(_outputToken) + 1; // wrapped to underlying\\r\\n            uint256 underlyingAmount = _outputAmount * exchangeRate / (10**18) + 1;\\r\\n\\r\\n            swap(_inputToken, underlying, underlyingAmount);\\r\\n            (address[] memory targets, bytes[] memory data) = lendingLogic.lend(underlying, underlyingAmount);\\r\\n\\r\\n            //execute lending transactions\\r\\n            for(uint256 i = 0; i < targets.length; i ++) {\\r\\n                (bool success, ) = targets[i].call{ value: 0 }(data[i]);\\r\\n                require(success, \\\"CALL_FAILED\\\");\\r\\n            }\\r\\n\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // else normal swap\\r\\n        swapUniOrSushi(_inputToken, _outputToken, _outputAmount);\\r\\n    }\\r\\n\\r\\n    function swapPie(address _pie, uint256 _outputAmount) internal {\\r\\n        IPie pie = IPie(_pie);\\r\\n        (address[] memory tokens, uint256[] memory amounts) = pie.calcTokensForAmount(_outputAmount);\\r\\n\\r\\n        for(uint256 i = 0; i < tokens.length; i ++) {\\r\\n            swap(address(WETH), tokens[i], amounts[i]);\\r\\n            IERC20 token = IERC20(tokens[i]);\\r\\n            token.approve(_pie, 0);\\r\\n            token.approve(_pie, amounts[i]);\\r\\n        }\\r\\n\\r\\n        pie.joinPool(_outputAmount);\\r\\n    }\\r\\n\\r\\n    function swapUniOrSushi(address _inputToken, address _outputToken, uint256 _outputAmount) internal {\\r\\n        (uint256 inputAmount, DexChoice dex) = getBestPriceSushiUni(_inputToken, _outputToken, _outputAmount);\\r\\n\\r\\n        address[] memory route = getRoute(_inputToken, _outputToken);\\r\\n\\r\\n        IERC20 _inputToken = IERC20(_inputToken);\\r\\n\\r\\n        CustomHop memory customHop = customHops[_outputToken];\\r\\n\\r\\n        if(address(_inputToken) == _outputToken) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if(customHop.hop != address(0)) {\\r\\n            (uint256 hopAmount,) = getBestPriceSushiUni(customHop.hop, _outputToken, _outputAmount);\\r\\n\\r\\n            //swap to intermediate hop first\\r\\n            swapUniOrSushi(address(_inputToken), customHop.hop, hopAmount);\\r\\n            swapUniOrSushi(customHop.hop, _outputToken, _outputAmount);\\r\\n\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // sushi has the best price, buy there\\r\\n        if(dex == DexChoice.Sushi) {\\r\\n            _inputToken.approve(address(sushiRouter), 0);\\r\\n            _inputToken.approve(address(sushiRouter), type(uint256).max);\\r\\n            sushiRouter.swapTokensForExactTokens(_outputAmount, type(uint256).max, route, address(this), block.timestamp + 1);\\r\\n        } else {\\r\\n            _inputToken.approve(address(uniRouter), 0);\\r\\n            _inputToken.approve(address(uniRouter), type(uint256).max);\\r\\n            uniRouter.swapTokensForExactTokens(_outputAmount, type(uint256).max, route, address(this), block.timestamp + 1);\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function setCustomHop(address _token, address _hop) external onlyOwner {\\r\\n        customHops[_token] = CustomHop({\\r\\n            hop: _hop\\r\\n            // dex: _dex\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function saveToken(address _token, address _to, uint256 _amount) external onlyOwner {\\r\\n        IERC20(_token).transfer(_to, _amount);\\r\\n    }\\r\\n  \\r\\n    function saveEth(address payable _to, uint256 _amount) external onlyOwner {\\r\\n        _to.call{value: _amount}(\\\"\\\");\\r\\n    }\\r\\n\\r\\n    function getPrice(address _inputToken, address _outputToken, uint256 _outputAmount) public returns(uint256)  {\\r\\n        if(_inputToken == _outputToken) {\\r\\n            return _outputAmount;\\r\\n        }\\r\\n\\r\\n        CustomHop memory customHop = customHops[_outputToken];\\r\\n        if(customHop.hop != address(0)) {\\r\\n            //get price for hop\\r\\n            uint256 hopAmount = getPrice(customHop.hop, _outputToken, _outputAmount);\\r\\n            return getPrice(_inputToken, _outputToken, hopAmount);\\r\\n        }\\r\\n\\r\\n        address underlying = lendingRegistry.wrappedToUnderlying(_outputToken);\\r\\n        if(underlying != address(0)) {\\r\\n            // calc amount according to exchange rate\\r\\n            ILendingLogic lendingLogic = getLendingLogicFromWrapped(_outputToken);\\r\\n            uint256 exchangeRate = lendingLogic.exchangeRate(_outputToken) + 1; // wrapped to underlying\\r\\n            uint256 underlyingAmount = _outputAmount * exchangeRate / (10**18) + 1;\\r\\n\\r\\n            return getPrice(_inputToken, underlying, underlyingAmount);\\r\\n        }\\r\\n\\r\\n        // check if token is pie\\r\\n        if(pieRegistry.inRegistry(_outputToken)) {\\r\\n            uint256 ethAmount =  getPricePie(_outputToken, _outputAmount);\\r\\n\\r\\n            // if input was not WETH\\r\\n            if(_inputToken != address(WETH)) {\\r\\n                return getPrice(_inputToken, address(WETH), ethAmount);\\r\\n            }\\r\\n\\r\\n            return ethAmount;\\r\\n        }\\r\\n\\r\\n        // if input and output are not WETH (2 hop swap)\\r\\n        if(_inputToken != address(WETH) && _outputToken != address(WETH)) {\\r\\n            (uint256 middleInputAmount,) = getBestPriceSushiUni(address(WETH), _outputToken, _outputAmount);\\r\\n            (uint256 inputAmount,) = getBestPriceSushiUni(_inputToken, address(WETH), middleInputAmount);\\r\\n\\r\\n            return inputAmount;\\r\\n        }\\r\\n\\r\\n        // else single hop swap\\r\\n        (uint256 inputAmount,) = getBestPriceSushiUni(_inputToken, _outputToken, _outputAmount);\\r\\n\\r\\n        return inputAmount;\\r\\n    }\\r\\n\\r\\n    function getBestPriceSushiUni(address _inputToken, address _outputToken, uint256 _outputAmount) internal returns(uint256, DexChoice) {\\r\\n        uint256 sushiAmount = getPriceUniLike(_inputToken, _outputToken, _outputAmount, sushiRouter);\\r\\n        uint256 uniAmount = getPriceUniLike(_inputToken, _outputToken, _outputAmount, uniRouter);\\r\\n\\r\\n        if(uniAmount < sushiAmount) {\\r\\n            return (uniAmount, DexChoice.Uni);\\r\\n        }\\r\\n\\r\\n        return (sushiAmount, DexChoice.Sushi);\\r\\n    }\\r\\n\\r\\n    function getRoute(address _inputToken, address _outputToken) internal returns(address[] memory route) {\\r\\n        // if both input and output are not WETH\\r\\n        if(_inputToken != address(WETH) && _outputToken != address(WETH)) {\\r\\n            route = new address[](3);\\r\\n            route[0] = _inputToken;\\r\\n            route[1] = address(WETH);\\r\\n            route[2] = _outputToken;\\r\\n            return route;\\r\\n        }\\r\\n\\r\\n        route = new address[](2);\\r\\n        route[0] = _inputToken;\\r\\n        route[1] = _outputToken;\\r\\n\\r\\n        return route;\\r\\n    }\\r\\n\\r\\n    function getPriceUniLike(address _inputToken, address _outputToken, uint256 _outputAmount, IUniRouter _router) internal returns(uint256) {\\r\\n        if(_inputToken == _outputToken) {\\r\\n            return(_outputAmount);\\r\\n        }\\r\\n        \\r\\n        // TODO this IS an external call but somehow the compiler does not recognize it as such :(\\r\\n        try _router.getAmountsIn(_outputAmount, getRoute(_inputToken, _outputToken)) returns(uint256[] memory amounts) {\\r\\n            return amounts[0];\\r\\n        } catch {\\r\\n            return type(uint256).max;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // NOTE input token must be WETH\\r\\n    function getPricePie(address _pie, uint256 _pieAmount) internal returns(uint256) {\\r\\n        IPie pie = IPie(_pie);\\r\\n        (address[] memory tokens, uint256[] memory amounts) = pie.calcTokensForAmount(_pieAmount);\\r\\n\\r\\n        uint256 inputAmount = 0;\\r\\n\\r\\n        for(uint256 i = 0; i < tokens.length; i ++) {\\r\\n            inputAmount += getPrice(address(WETH), tokens[i], amounts[i]);\\r\\n        }\\r\\n\\r\\n        return inputAmount;\\r\\n    }\\r\\n\\r\\n    function getLendingLogicFromWrapped(address _wrapped) internal view returns(ILendingLogic) {\\r\\n        return ILendingLogic(\\r\\n                lendingRegistry.protocolToLogic(\\r\\n                    lendingRegistry.wrappedToProtocol(\\r\\n                        _wrapped\\r\\n                    )\\r\\n                )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function encodeData(uint256 _outputAmount) external pure returns(bytes memory){\\r\\n        return abi.encode((_outputAmount));\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IRecipe.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.1;\\r\\n\\r\\ninterface IRecipe {\\r\\n    function bake(\\r\\n        address _inputToken,\\r\\n        address _outputToken,\\r\\n        uint256 _maxInput,\\r\\n        bytes memory _data\\r\\n    ) external returns (uint256 inputAmountUsed, uint256 outputAmount);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IUniRouter.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IUniRouter is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/ILendingRegistry.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.1;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface ILendingRegistry {\\r\\n    // Maps wrapped token to protocol\\r\\n    function wrappedToProtocol(address _wrapped) external view returns(bytes32);\\r\\n    // Maps wrapped token to underlying\\r\\n    function wrappedToUnderlying(address _wrapped) external view returns(address);\\r\\n    function underlyingToProtocolWrapped(address _underlying, bytes32 protocol) external view returns (address);\\r\\n    function protocolToLogic(bytes32 _protocol) external view returns (address);\\r\\n\\r\\n    /**\\r\\n        @notice Set which protocl a wrapped token belongs to\\r\\n        @param _wrapped Address of the wrapped token\\r\\n        @param _protocol Bytes32 key of the protocol\\r\\n    */\\r\\n    function setWrappedToProtocol(address _wrapped, bytes32 _protocol) external;\\r\\n\\r\\n    /**\\r\\n        @notice Set what is the underlying for a wrapped token\\r\\n        @param _wrapped Address of the wrapped token\\r\\n        @param _underlying Address of the underlying token\\r\\n    */\\r\\n    function setWrappedToUnderlying(address _wrapped, address _underlying) external;\\r\\n\\r\\n    /**\\r\\n        @notice Set the logic contract for the protocol\\r\\n        @param _protocol Bytes32 key of the procol\\r\\n        @param _logic Address of the lending logic contract for that protocol\\r\\n    */\\r\\n    function setProtocolToLogic(bytes32 _protocol, address _logic) external;\\r\\n    /**\\r\\n        @notice Set the wrapped token for the underlying deposited in this protocol\\r\\n        @param _underlying Address of the unerlying token\\r\\n        @param _protocol Bytes32 key of the protocol\\r\\n        @param _wrapped Address of the wrapped token\\r\\n    */\\r\\n    function setUnderlyingToProtocolWrapped(address _underlying, bytes32 _protocol, address _wrapped) external;\\r\\n\\r\\n    /**\\r\\n        @notice Get tx data to lend the underlying amount in a specific protocol\\r\\n        @param _underlying Address of the underlying token\\r\\n        @param _amount Amount to lend\\r\\n        @param _protocol Bytes32 key of the protocol\\r\\n        @return targets Addresses of the contracts to call\\r\\n        @return data Calldata for the calls\\r\\n    */\\r\\n    function getLendTXData(address _underlying, uint256 _amount, bytes32 _protocol) external view returns(address[] memory targets, bytes[] memory data);\\r\\n\\r\\n    /**\\r\\n        @notice Get the tx data to unlend the wrapped amount\\r\\n        @param _wrapped Address of the wrapped token\\r\\n        @param _amount Amount of wrapped token to unlend\\r\\n        @return targets Addresses of the contracts to call\\r\\n        @return data Calldata for the calls\\r\\n    */\\r\\n    function getUnlendTXData(address _wrapped, uint256 _amount) external view returns(address[] memory targets, bytes[] memory data);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/ILendingLogic.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.1;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface ILendingLogic {\\r\\n    /**\\r\\n        @notice Get the calls needed to lend.\\r\\n        @param _underlying Address of the underlying token\\r\\n        @param _amount Amount of the underlying token\\r\\n        @return targets Addresses of the contracts to call\\r\\n        @return data Calldata of the calls\\r\\n    */\\r\\n    function lend(address _underlying, uint256 _amount) external view returns(address[] memory targets, bytes[] memory data);\\r\\n    \\r\\n    /**\\r\\n        @notice Get the calls needed to unlend\\r\\n        @param _wrapped Address of the wrapped token\\r\\n        @param _amount Amount of the underlying tokens\\r\\n        @return targets Addresses of the contracts to call\\r\\n        @return data Calldata of the calls\\r\\n    */\\r\\n    function unlend(address _wrapped, uint256 _amount) external view returns(address[] memory targets, bytes[] memory data);\\r\\n\\r\\n    /**\\r\\n        @notice Get the underlying wrapped exchange rate\\r\\n        @param _wrapped Address of the wrapped token\\r\\n        @return The exchange rate\\r\\n    */\\r\\n    function exchangeRate(address _wrapped) external returns(uint256);\\r\\n\\r\\n    /**\\r\\n        @notice Get the underlying wrapped exchange rate in a view (non state changing) way\\r\\n        @param _wrapped Address of the wrapped token\\r\\n        @return The exchange rate\\r\\n    */\\r\\n    function exchangeRateView(address _wrapped) external view returns(uint256);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPieRegistry.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.1;\\r\\ninterface IPieRegistry {\\r\\n    function inRegistry(address _pool) external view returns(bool);\\r\\n    function entries(uint256 _index) external view returns(address);\\r\\n    function addSmartPool(address _smartPool) external;\\r\\n    function removeSmartPool(uint256 _index) external;\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPie.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.1;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IPie is IERC20 {\\r\\n    function joinPool(uint256 _amount) external;\\r\\n    function exitPool(uint256 _amount) external;\\r\\n    function calcTokensForAmount(uint256 _amount) external view  returns(address[] memory tokens, uint256[] memory amounts);\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sushiRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lendingRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pieRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_hop\",\"type\":\"address\"}],\"name\":\"HopUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxInput\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"bake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmountUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"customHops\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"hop\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_outputAmount\",\"type\":\"uint256\"}],\"name\":\"encodeData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_outputAmount\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"saveEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"saveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hop\",\"type\":\"address\"}],\"name\":\"setCustomHop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UniPieRecipe","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000d9e1ce17f2641f24ae83637ab66a2cca9c378b9f0000000000000000000000009a607dd7da5fdabf4f53f73a476d99f68172c36d000000000000000000000000412a5d5ec35ff185d6bff32a367a985e1fb7c296","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}