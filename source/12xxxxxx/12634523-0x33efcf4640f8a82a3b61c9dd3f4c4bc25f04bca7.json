{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    \r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n   \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n   \r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n  \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n  function allPairs(uint) external view returns (address pair);\r\n  function allPairsLength() external view returns (uint);\r\n\r\n  function feeTo() external view returns (address);\r\n  function feeToSetter() external view returns (address);\r\n\r\n  function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract EthanolX is Ownable, IERC20Metadata {\r\n    IUniswapV2Factory public uniswapV2Factory;\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 private _totalSupply;\r\n\r\n    uint256 public startTime;\r\n    uint256 private _cashbackInterval;\r\n    uint256 private _initialDitributionAmount;\r\n    uint256 public ditributionRewardsPool;\r\n    uint256 public liquidityRewardsPool;\r\n    uint256 public taxPercentage;\r\n    uint8 public activateFeatures;\r\n\r\n    uint256 public stabilizingRewardsPool;\r\n    uint8 public lastStabilizeAction;\r\n    uint256 private _stabilizeTokenAmount;\r\n    \r\n    address public referralWallet;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping(address => Cashback) public cashbacks;\r\n    mapping(address => bool) public excluded;\r\n    mapping(address => address) public referrers;\r\n    mapping(address => uint256) public weeklyPayouts;\r\n\r\n    struct Cashback {\r\n        address user;\r\n        uint256 timestamp;\r\n        uint256 totalClaimedRewards;\r\n    }\r\n    \r\n    event CashBackClaimed(address indexed user, uint256 amount, uint256 timestamp);\r\n    event Refund(address indexed user, uint256 amount, uint256 timestamp);\r\n    event SwapAndAddLiquidity(address indexed sender, uint256 tokensSwapped, uint256 ethReceived);\r\n    event Referral(address indexed user, address indexed referrer, uint256 timestamp);\r\n    event Stablize(string action, uint256 tokenAmount, uint256 ethAmount, uint256 timestamp);\r\n\r\n    constructor(address _referralWallet) {\r\n        _name = \"EthanolX\";\r\n        _symbol = \"ENOX\";\r\n        \r\n        uint256 _initialSupply = 10000000 ether;\r\n        uint256 _minterAmount = (_initialSupply * 70) / 100;\r\n        uint256 _ditributionAmount = (_initialSupply * 30) / 100;\r\n        \r\n        startTime = block.timestamp;\r\n        _cashbackInterval = 24 hours;\r\n        taxPercentage =  8;\r\n        activateFeatures = 0;\r\n        lastStabilizeAction = 0;\r\n        _stabilizeTokenAmount = 1000 ether;\r\n\r\n        _initialDitributionAmount = _ditributionAmount;\r\n        ditributionRewardsPool = _ditributionAmount;\r\n\r\n        _mint(_msgSender(), _minterAmount);\r\n        _mint(address(this), _ditributionAmount);\r\n        \r\n        referralWallet = _referralWallet;\r\n\r\n        /* \r\n            instantiate uniswapV2Router & uniswapV2Factory\r\n            uniswapV2Router address: 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n            pancakeswapV2Router address: 0xD99D1c33F9fC3444f8101754aBC46c52416550D1\r\n        */\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Factory = IUniswapV2Factory(uniswapV2Router.factory());\r\n\r\n        // create ENOX -> WETH pair\r\n        uniswapV2Factory.createPair(address(this), uniswapV2Router.WETH());\r\n\r\n        excluded[address(this)] = true;\r\n        excluded[address(uniswapV2Router)] = true;\r\n        excluded[address(uniswapV2Factory)] = true;\r\n        excluded[getPair()] = true;\r\n    }\r\n\r\n    receive() external payable {  }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns(uint256) {\r\n        uint256 _initialBalance = _balances[account];\r\n        uint256 _finalBalance = _initialBalance + calculateRewards(account);\r\n        return _finalBalance;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        // claim accumulated cashbacks\r\n        _claimCashback(recipient);\r\n        // transfer token from caller to recipient\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        // claim accumulated cashbacks for sender and the recipient\r\n        _claimCashback(sender);\r\n        _claimCashback(recipient);\r\n\r\n        // transfer token from sender to recipient\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        // calculate tax from transferred amount\r\n        (uint256 _finalAmount, uint256 _tax) = _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += _finalAmount;\r\n        _balances[address(this)] += _tax;\r\n        _distributeTax(_tax);\r\n\r\n        /*\r\n            Note:: A static \"startTime\" might lead to an unforseen _cashback bug in the future.\r\n            A way of mitigating this is to automaticaly update the startTime every 24 hours on deployment\r\n        */\r\n        if((block.timestamp - startTime) >= _cashbackInterval) startTime = block.timestamp;\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function burn(uint256 _amount) external {\r\n        _burn(_msgSender(), _amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(address, address, uint256 amount) internal virtual returns(uint256 _finalAmount, uint256 _tax) {\r\n        if(taxPercentage == 0 || activateFeatures == 0 || excluded[_msgSender()]) return(amount, 0);\r\n\r\n        _tax = (amount * 8) / 100;\r\n        _finalAmount = amount - _tax;\r\n        return(_finalAmount, _tax);\r\n    }\r\n \r\n\r\n\r\n    function setActivateFeatures() external onlyOwner {\r\n        if(activateFeatures == 0) activateFeatures = 1;\r\n        else activateFeatures = 0;\r\n    }\r\n\r\n    function setExcluded(address _account, bool _status) external onlyOwner {\r\n        excluded[_account] = _status;\r\n    }\r\n\r\n    function setTransferFee(uint256 _amount) public onlyOwner {\r\n        taxPercentage = _amount;\r\n    }\r\n\r\n    function _distributeTax(uint256 _amount) internal returns(uint8) {\r\n        if(getPair() == address(0) || activateFeatures == 0 || _amount == 0) return 0;\r\n        uint256 _splitedAmount = _amount / 4; \r\n\r\n        /* \r\n            Add twice of the _splitedAmount to ditributionRewardsPool, \r\n            this will later be deducted as referrer's rewards\r\n        */\r\n        ditributionRewardsPool += (_splitedAmount * 2);\r\n        stabilizingRewardsPool += _splitedAmount;\r\n        liquidityRewardsPool += _splitedAmount;\r\n        _balances[referralWallet] += _splitedAmount;\r\n        return 1;\r\n    }\r\n\r\n    function injectLpToken() public onlyOwner returns(uint8) {\r\n        if(liquidityRewardsPool == 0) return 0;\r\n        _addLiquidity(liquidityRewardsPool);\r\n        return 1;\r\n    }\r\n    \r\n    function withdrawLpToken() external onlyOwner {\r\n        _transfer(address(this), _msgSender(), liquidityRewardsPool);\r\n        liquidityRewardsPool = 0;\r\n    }\r\n\r\n    // Start CashBack Logics\r\n    function setCashbackInterval(uint256 _value) external onlyOwner {\r\n        _cashbackInterval = _value;\r\n    }\r\n\r\n    function _claimCashback(address _account) internal returns(uint8) {\r\n        if(calculateRewards(_account) == 0) return 0;\r\n        uint256 _totalClaimedRewards = cashbacks[_account].totalClaimedRewards;\r\n\r\n        uint256 _rewards = _transferRewards(_account);\r\n        cashbacks[_account] = Cashback(_account, block.timestamp, _totalClaimedRewards + _rewards);\r\n        emit CashBackClaimed(_account, _rewards, block.timestamp);\r\n        return 1;\r\n    }\r\n\r\n    function calculateRewards(address _account) public view returns(uint256) {\r\n        // should return zero is _account has zero balance || _account => contract address\r\n        if(_balances[_account] == 0 || _isContract(_account) || _cashbackInterval == 0) return 0;\r\n\r\n        uint256 _lastClaimedTime = 0;\r\n\r\n        /* \r\n            This logic sets the initial claimedTime to the timestamp the contract was deployed.\r\n            Since the cashbacks[_account].timestamp will always be zero for all users when the contract is being deployed\r\n        */\r\n        cashbacks[_account].timestamp == 0 \r\n            ? _lastClaimedTime = startTime \r\n            : _lastClaimedTime = cashbacks[_account].timestamp;\r\n\r\n        // calculates for the unclaimed days using (current time - last claimed time) / cashbackInterval (24 hours on deployment)\r\n        uint256 _unclaimedDays = (block.timestamp - _lastClaimedTime) / _cashbackInterval;\r\n        uint256 _rewards = _unclaimedDays * calculateDailyCashback(_account);\r\n        return _rewards;\r\n    }\r\n\r\n    function calculateDailyCashback(address _account) public view returns(uint256 _rewardsPerDay) {\r\n        uint256 _accountBalance = _balances[_account];\r\n        _rewardsPerDay = (_accountBalance * 2) / 100;\r\n        return _rewardsPerDay;\r\n    }\r\n\r\n    function _transferRewards(address _account) private returns(uint256) {\r\n        uint256 _rewards = calculateRewards(_account);\r\n        uint256 _seventyPercent = (ditributionRewardsPool * 70) / 100;\r\n        uint256 _diff = ditributionRewardsPool - _initialDitributionAmount;\r\n\r\n        if(ditributionRewardsPool <= _seventyPercent) {\r\n            _mint(address(this), _diff);\r\n            ditributionRewardsPool += _diff;\r\n        } if(_rewards > ditributionRewardsPool) {\r\n            _mint(address(this), _rewards);\r\n            ditributionRewardsPool += _rewards;\r\n        }\r\n\r\n        ditributionRewardsPool -= _rewards;\r\n        _transfer(address(this), _account, _rewards);\r\n        return _rewards;\r\n    }\r\n    // End CashBack Logics\r\n\r\n    // Referral Logics\r\n    function registerReferrer(address _referrer) external {\r\n        require(referrers[_msgSender()] == address(0), \"EthanolX: Referrer has already been registered\");\r\n        require(_msgSender() != _referrer, \"EthanolX: Can not register self as referrer\");\r\n        require(balanceOf(_msgSender()) != 0, \"EthanolX: Balance must be greater than zero to register a referrer\");\r\n        require(!_isContract(_referrer), \"EthanolX: Referrer can not be contract address\");\r\n\r\n        referrers[_msgSender()] = _referrer;\r\n        emit Referral(_msgSender(), _referrer, block.timestamp);\r\n    }\r\n\r\n    // End Referral Logics\r\n\r\n    // Stabilizing mechanism\r\n    function stabilize() public onlyOwner {\r\n        _stab();\r\n    }\r\n    \r\n    function _stab() internal returns(uint8 _res) {\r\n        address[] memory path = new address[](2);\r\n        uint256[] memory amounts;\r\n        /* \r\n            lastStabilizeAction == 0 => Swap ENOX -> ETH\r\n            lastStabilizeAction == 1 => Swap ETH -> ENOX\r\n        */\r\n        if(lastStabilizeAction == 0) {\r\n            if(stabilizingRewardsPool < _stabilizeTokenAmount) return 0;\r\n            path[0] = address(this);\r\n            path[1] = uniswapV2Router.WETH();\r\n            amounts = getAmountsOut(address(this), uniswapV2Router.WETH(), _stabilizeTokenAmount);\r\n\r\n            // approve _stabilizeTokenAmount to be swapped for ETH\r\n            _approve(address(this), address(uniswapV2Router), _stabilizeTokenAmount);\r\n\r\n            // swap ENOX => ETH\r\n            uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(_stabilizeTokenAmount, 0, path, address(this), block.timestamp);\r\n\r\n            // re-set global state variable\r\n            stabilizingRewardsPool -= _stabilizeTokenAmount;\r\n            lastStabilizeAction = 1;\r\n            emit Stablize(\"SELL\", _stabilizeTokenAmount, amounts[1], block.timestamp);\r\n\r\n        } else {\r\n            path[0] = uniswapV2Router.WETH();\r\n            path[1] = address(this);\r\n            amounts = getAmountsOut(address(this), uniswapV2Router.WETH(), _stabilizeTokenAmount);\r\n            // swap ETH => ENOX\r\n            uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amounts[1]}(\r\n                0,\r\n                path,\r\n                owner(),\r\n                block.timestamp\r\n            );\r\n            _transfer(owner(), address(this), amounts[0]);\r\n            // re-set global state variable\r\n            stabilizingRewardsPool += _stabilizeTokenAmount;\r\n            lastStabilizeAction = 0;\r\n            emit Stablize(\"BUY\", amounts[0], amounts[1], block.timestamp);\r\n            return 1;\r\n        }\r\n    }\r\n    \r\n    function withdrawStabilizeRewards() public onlyOwner {\r\n        _transfer(address(this), _msgSender(), stabilizingRewardsPool);\r\n        stabilizingRewardsPool = 0;\r\n    }\r\n\r\n    function setStabilizeTokenAmount(uint256 _amount) external onlyOwner {\r\n        _stabilizeTokenAmount = _amount;\r\n    }\r\n\r\n    function getStabilizeTokenAmount() external view returns(uint256) {\r\n        return _stabilizeTokenAmount;\r\n    }\r\n    // End stabilizing mechanism\r\n\r\n    // Uniswap Trade Logics\r\n    function getPair() public view returns(address pair) {\r\n        pair = uniswapV2Factory.getPair(address(this), uniswapV2Router.WETH());\r\n        return pair;\r\n    }\r\n\r\n    function getAmountsOut(address token1, address token2, uint256 _amount) public view returns(uint256[] memory amounts) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = token1;\r\n        path[1] = token2;\r\n        amounts = uniswapV2Router.getAmountsOut(_amount, path);\r\n        return amounts;\r\n    }\r\n\r\n    function _addLiquidity(uint256 tokenAmount) private {\r\n        uint256 _half = tokenAmount / 2;\r\n\r\n        address[] memory path = new address[](2);\r\n        uint256[] memory amounts = getAmountsOut(address(this), uniswapV2Router.WETH(), _half);\r\n\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        // approve transferred amount to uniswapV2Router\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            _half, \r\n            0, \r\n            path, \r\n            address(this), \r\n            block.timestamp\r\n        );\r\n\r\n        uniswapV2Router.addLiquidityETH{value: amounts[1]}(\r\n            address(this),\r\n            _half,\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n        emit SwapAndAddLiquidity(owner(), _half, amounts[1]);\r\n    }\r\n\r\n    function withdrawETH() external onlyOwner {\r\n        (bool _success, ) = payable(_msgSender()).call{ value: address(this).balance }(bytes(\"\"));\r\n        require(_success, \"EthanolX: ETH withdrawal failed\");\r\n    }\r\n\r\n    function _isContract(address account) internal view returns(bool) {\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referralWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CashBackClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Referral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Stablize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"}],\"name\":\"SwapAndAddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activateFeatures\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"calculateDailyCashback\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsPerDay\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"calculateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cashbacks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimedRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ditributionRewardsPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStabilizeTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"injectLpToken\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStabilizeAction\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityRewardsPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"registerReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setActivateFeatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setCashbackInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setExcluded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setStabilizeTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilizingRewardsPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"weeklyPayouts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLpToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStabilizeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"EthanolX","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000989b96d95ede0d11afe89e90ddab18aa1b669915","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9ac59ae18598ff20d4d4e8d662950af12504a7965f1fcf33cdfea53131691816"}]}