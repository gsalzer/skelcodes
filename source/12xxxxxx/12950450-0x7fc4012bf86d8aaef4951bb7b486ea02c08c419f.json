{"status":"1","message":"OK","result":[{"SourceCode":"// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/cryptography/ECDSA.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     *\r\n     * Documentation for signature generation:\r\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Check the signature length\r\n        // - case 65: r,s,v signature (standard)\r\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\r\n        if (signature.length == 65) {\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint8 v;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n            return recover(hash, v, r, s);\r\n        } else if (signature.length == 64) {\r\n            bytes32 r;\r\n            bytes32 vs;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                vs := mload(add(signature, 0x40))\r\n            }\r\n            return recover(hash, r, vs);\r\n        } else {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `r` and `vs` short-signature fields separately.\r\n     *\r\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\r\n     *\r\n     * _Available since v4.2._\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address) {\r\n        bytes32 s;\r\n        uint8 v;\r\n        assembly {\r\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\r\n            v := add(shr(255, vs), 27)\r\n        }\r\n        return recover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `v`, `r` and `s` signature fields separately.\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        require(\r\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\r\n            \"ECDSA: invalid signature 's' value\"\r\n        );\r\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        require(signer != address(0), \"ECDSA: invalid signature\");\r\n\r\n        return signer;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Typed Data, created from a\r\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n     * to the one signed with the\r\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n     * JSON-RPC method as part of EIP-712.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: AngryContract.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IBurnable{\r\n    function burn(uint256 amount) external;\r\n}\r\n\r\ncontract AngryContract is ReentrancyGuard{\r\n    using SafeERC20 for IERC20;\r\n    using ECDSA for bytes32;\r\n    \r\n    struct PrePurchaseInfo {\r\n        uint256 amount;\r\n        uint256 paymentAmount;\r\n        uint256 price;\r\n        uint256 expectedPrice;\r\n        uint256 startTime;\r\n        uint256 expiredTime;\r\n        uint8 status;  // 0: not deal, 1 : deal, 2 : cancel, 3 : confirm, 4 : expired\r\n        uint8 paymentType; // 1:ETH, 2:USDT\r\n    }\r\n    \r\n    struct MiningPoolInfo {\r\n        uint256 beginTime;\r\n        uint256 endTime;\r\n        uint256 rewardAmount;\r\n        uint256 claimedAmount;\r\n        uint256 burnedAmount;\r\n        mapping(address => uint256) claimedAccounts;\r\n    }\r\n    \r\n    struct ClaimRewardsInfo {\r\n        string taskId;\r\n        uint256 amount;\r\n        uint256 time;\r\n    }\r\n    bool public bInited;\r\n    bool public bStarted;\r\n    uint256 public expectedPriceFloatValLo;\r\n    uint256 public expectedPriceFloatValHi;\r\n    uint256 public expectedPriceMultipleLo;\r\n    uint256 public expectedPriceMultipleHi;\r\n    address public angryTokenAddr;\r\n    address public usdtTokenAddr;\r\n    address public vitalikButerinAddr;\r\n    address public uniswapRouterAddr;\r\n    uint256 public maxMiningTaskReward;\r\n    uint256 public minPrePurchaseUSDT;\r\n    uint256 public minPrePurchaseETH;\r\n    uint256 public cumulativePeriods;\r\n    uint256 public prePurchaseSupplyPeriod;\r\n    uint256 public prePurchaseSupplyAmount;\r\n    uint256 public cumulativePrePurchaseSupply;\r\n    uint256 public lastCumulativeTime;\r\n    uint256 public vbWithdrawPerDay;\r\n    IERC20 public angryToken;\r\n    IERC20 public usdtToken;\r\n    IUniswapV2Router02 public uniswapRouterV2;\r\n    uint256 private angryTokenDecimals;\r\n    uint256 public minTokenAmountToPrePurchase;\r\n    uint256 public maxPrePurchaseMultiple;\r\n    uint256 public prePurchaseLimitPerAcc;\r\n    uint256 public vsWithdrawAmount;\r\n    uint256 public vsBurnAmount;\r\n    uint256 public vsLastWithdrawTime;\r\n    uint256 public lastMiningTaskTime;\r\n    uint256 public startTime;\r\n    uint256 public totalPrePurcaseAmount;\r\n    uint256 public cancelOrderFeeRate;\r\n    uint256 public feeUSDT;\r\n    uint256 public feeETH;\r\n    uint256 public revenueUSDT;\r\n    uint256 public revenueETH;\r\n    address public owner;\r\n    address[] public prePurchaseAccounts;\r\n    mapping(address => PrePurchaseInfo[]) public prePurchaseList;\r\n    mapping(address => ClaimRewardsInfo[]) public claimList;\r\n    mapping(string => MiningPoolInfo) public miningPoolInfos;\r\n    mapping(address => bool) public executorList;\r\n    mapping(string => bool) public prePurchaseInvoiceMapping;\r\n    \r\n    event PrePurchase(address _userAddr, uint256 _orderIdx, uint256 _amount, uint256 _paymentAmount, uint256 _price, uint256 _expectedPrice, uint256 _startTime, uint256 _expiredTime, uint8 _paymentType, uint8 _status, string _invoiceId);\r\n    event Withdraw(address _recvAddr, uint256 _revenueETH, uint256 _revenueUSDT, uint256 _feeETH, uint256 _feeUSDT);\r\n    event OrderConfirm(address _userAddr, uint256 _orderIdx, uint8 _orderStatus);\r\n    event OrderExpire(address _userAddr, uint256 _orderIdx, uint8 _orderStatus);\r\n    event OrderComplete(address _userAddr, uint256 _orderIdx, uint8 _orderStatus);\r\n    event FeeChange(uint256 _oldValue, uint256 _newValue);\r\n    event VBRewardBurn(uint256 _amount);\r\n    event MineRemainingBurn(string _taskId, uint256 _amount);\r\n    event VbWithdraw(uint256 _amount);\r\n    event ExecutorAdd(address _newAddr);\r\n    event ExecutorDel(address _oldAddr);\r\n    event MineRewardsWithdraw(address _userAddr, string _invoiceId, uint256 _amount);\r\n    event PrePurchaseaArgsChange(uint256 _minTokenAmountOld,uint256 _maxMultipleOld,uint256 _limitPerAccOld,uint256 _minTokenAmountNew,uint256 _maxMultipleNew,uint256 _limitPerAccNew);\r\n    event ANBWithdraw(address _receiver, uint256 _amount);\r\n    event MineTaskAdd(string _taskId, uint256 _rewardAmount, uint256 _beginTime, uint256 _endTime);\r\n    event MaxMiningTaskRewardChange(uint256 _oldValue, uint256 _newValue);\r\n    event PrePurchaseSupplyPerPeriodChange(uint256 _oldPeriod, uint256 _oldAmount, uint256 _newPeriod, uint256 _newAmount);\r\n    event VbWithdrawPerDayChange(uint256 _oldValue, uint256 _newValue);\r\n    event ExpectedPriceArgsChange(uint256 _oldMultipleLo, uint256 _oldMultipleHi, uint256 _oldFloatValLo, uint256 _oldFloatValHi, uint256 _newMultipleLo, uint256 _newMultipleHi, uint256 _newFloatValLo, uint256 _newFloatValHi);\r\n    event PrePurchaseApply(address _addr, uint256 _periodNo);\r\n    event StartFlagChange(bool _bVal);\r\n    event PrePurchaseMinAmountChange(uint256 _oldEthAmount, uint256 _oldUsdtAmount, uint256 _newEthAmount,uint256 _newUsdtAmount);\r\n    event OrderCancel(address _userAddr, uint256 _orderIdx, uint8 _orderStatus);\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyExecutor {\r\n        require(executorList[msg.sender], \"NP\");\r\n        _;\r\n    }\r\n    \r\n    constructor(address _angryTokenAddr, address _usdtTokenAddr, address _uniswapRouterAddr, address _vitalikButerinAddr, uint256 _startTime) {\r\n        initialize(_angryTokenAddr, _usdtTokenAddr, _uniswapRouterAddr, _vitalikButerinAddr, _startTime);\r\n    }\r\n    \r\n    function initialize(address _angryTokenAddr, address _usdtTokenAddr, address _uniswapRouterAddr, address _vitalikButerinAddr, uint256 _startTime) public {\r\n        require(!bInited, \"AI\");\r\n        bInited = true;\r\n        bStarted = true;\r\n        owner = msg.sender;\r\n        executorList[msg.sender] = true;\r\n        startTime = _startTime;\r\n        lastCumulativeTime = _startTime;\r\n        angryTokenAddr = _angryTokenAddr;\r\n        usdtTokenAddr = _usdtTokenAddr;\r\n        uniswapRouterAddr = _uniswapRouterAddr;\r\n        vitalikButerinAddr = _vitalikButerinAddr;\r\n        angryToken = IERC20(angryTokenAddr);\r\n        usdtToken = IERC20(usdtTokenAddr);\r\n        uniswapRouterV2 = IUniswapV2Router02(uniswapRouterAddr);\r\n        angryTokenDecimals = IERC20Metadata(angryTokenAddr).decimals();\r\n        expectedPriceFloatValLo = 5;\r\n        expectedPriceFloatValHi = 5;\r\n        expectedPriceMultipleLo = 12;\r\n        expectedPriceMultipleHi = 30;\r\n        maxMiningTaskReward = 100000000;\r\n        vbWithdrawPerDay = 5479;\r\n        minTokenAmountToPrePurchase = 100000;\r\n        maxPrePurchaseMultiple = 10;\r\n        prePurchaseLimitPerAcc = 200000000;\r\n        emit ExecutorAdd(msg.sender);\r\n    }\r\n    \r\n    function addExecutor(address _newExecutor) onlyOwner public {\r\n        executorList[_newExecutor] = true;\r\n        emit ExecutorAdd(_newExecutor);\r\n    }\r\n    \r\n    function delExecutor(address _oldExecutor) onlyOwner public {\r\n        executorList[_oldExecutor] = false;\r\n        emit ExecutorDel(_oldExecutor);\r\n    }\r\n    \r\n    function setExpectedPriceArgs(uint256 _multipleLo, uint256 _multipleHi, uint256 _floatValLo, uint256 _floatValHi) public onlyExecutor{\r\n        require(_floatValLo <= 100 && _floatValHi <= 100, \"BV\");\r\n        emit ExpectedPriceArgsChange(expectedPriceMultipleLo,expectedPriceMultipleHi,expectedPriceFloatValLo, expectedPriceFloatValHi,_multipleLo,_multipleHi,_floatValLo,_floatValHi);\r\n        expectedPriceMultipleLo = _multipleLo;\r\n        expectedPriceMultipleHi = _multipleHi;\r\n        expectedPriceFloatValLo = _floatValLo;\r\n        expectedPriceFloatValHi = _floatValHi;\r\n    }\r\n    \r\n    function getExpectedPriceArgs() public view returns(uint256 _multipleLo, uint256 _multipleHi, uint256 _floatValLo, uint256 _floatValHi){\r\n        _multipleLo = expectedPriceMultipleLo;\r\n        _multipleHi = expectedPriceMultipleHi;\r\n        _floatValLo = expectedPriceFloatValLo;\r\n        _floatValHi = expectedPriceFloatValHi;\r\n    }\r\n    \r\n    function withdrawRevenueAndFee(address _receiver) onlyOwner nonReentrant public {\r\n        uint256 ethAmount = revenueETH + feeETH;\r\n        uint256 usdtAmount = revenueUSDT + feeUSDT;\r\n        emit Withdraw(_receiver, revenueETH, revenueUSDT, feeETH, feeUSDT);\r\n        revenueETH = 0;\r\n        revenueUSDT = 0;\r\n        feeETH = 0;\r\n        feeUSDT = 0;\r\n        if(ethAmount > 0){\r\n            payable(_receiver).transfer(ethAmount);\r\n        }\r\n        if(usdtAmount > 0){\r\n            usdtToken.safeTransfer(_receiver, usdtAmount);\r\n        }\r\n    }\r\n    \r\n    function vitalikButerinWithdraw() public {\r\n        require ( msg.sender == vitalikButerinAddr, \"OV\" );\r\n        require ( (block.timestamp - vsLastWithdrawTime) > (1 days), \"WO\" );\r\n        uint256 amount = vbWithdrawPerDay * 10 ** angryTokenDecimals;\r\n        vsLastWithdrawTime = block.timestamp;\r\n        vsWithdrawAmount = vsWithdrawAmount + amount;\r\n        angryToken.safeTransfer(vitalikButerinAddr, amount);\r\n        emit VbWithdraw(amount);\r\n    }\r\n    \r\n    function burnVbUnclaimANB() public onlyExecutor{\r\n        uint256 totalAmount = ((block.timestamp - startTime) / (1 days)) * vbWithdrawPerDay * 10 ** angryTokenDecimals;\r\n        uint256 toBurnAmount = 0;\r\n        if(totalAmount > (vsWithdrawAmount + vsBurnAmount)){\r\n            toBurnAmount = totalAmount - (vsWithdrawAmount + vsBurnAmount);\r\n            IBurnable(angryTokenAddr).burn(toBurnAmount);\r\n            vsBurnAmount = vsBurnAmount + toBurnAmount;\r\n            emit VBRewardBurn(toBurnAmount);\r\n        }\r\n    }\r\n    \r\n    function queryRevenueAndFee() view public returns (uint256 _revenueETH, uint256 _revenueUSDT, uint256 _feeETH, uint256 _feeUSDT) {\r\n        return (revenueETH, revenueUSDT, feeETH, feeUSDT);\r\n    }\r\n    \r\n    function setPrePurchaseaArgs(uint256 _minTokenAmount, uint256 _maxMultiple, uint256 _limitPerAcc) public onlyExecutor {\r\n        emit PrePurchaseaArgsChange(minTokenAmountToPrePurchase,maxPrePurchaseMultiple,prePurchaseLimitPerAcc,_minTokenAmount,_maxMultiple,_limitPerAcc);\r\n        minTokenAmountToPrePurchase = _minTokenAmount;\r\n        maxPrePurchaseMultiple = _maxMultiple;\r\n        prePurchaseLimitPerAcc = _limitPerAcc;\r\n    }\r\n    \r\n    function getPrePurchaseaArgs() view public returns (uint256 _minTokenAmount, uint256 _maxMultiple, uint256 _limitPerAcc){\r\n        return (minTokenAmountToPrePurchase,maxPrePurchaseMultiple,prePurchaseLimitPerAcc);\r\n    }\r\n    \r\n    function expirePrePurchaseOrders(address[] calldata _addrList, uint256[] calldata _orderIdxList) onlyExecutor public {\r\n        require ( _addrList.length == _orderIdxList.length, \"IA\" );\r\n        for ( uint256 i = 0;i < _addrList.length; i++){\r\n            PrePurchaseInfo[] storage purchases = prePurchaseList[ _addrList[i] ];\r\n            require( purchases.length > _orderIdxList[i], \"OR\" );\r\n            PrePurchaseInfo storage pcInfo = purchases[ _orderIdxList[i] ];\r\n            require( pcInfo.status == 0, \"US\" );\r\n            pcInfo.status = 4;\r\n            emit OrderExpire(_addrList[i], _orderIdxList[i], pcInfo.status);\r\n        }\r\n    }\r\n    \r\n    function getAccountPurchasedAmount(address _account)  private view returns(uint256) {\r\n        uint256 amount = 0;\r\n        PrePurchaseInfo[] storage purchases = prePurchaseList[ _account ];\r\n        for(uint256 i = 0;i < purchases.length; i++){\r\n            if(purchases[i].status != 0 && purchases[i].status != 1){\r\n                continue;\r\n            }\r\n            amount = amount + purchases[i].amount;\r\n        }\r\n        return amount;\r\n    }\r\n    \r\n    function getAccountPurchaseQuota(address _account) private view returns(uint256) {\r\n        uint256 tokenAmount = angryToken.balanceOf(_account);\r\n        if(tokenAmount < minTokenAmountToPrePurchase * 10 ** angryTokenDecimals){\r\n            return 0;\r\n        }\r\n        uint256 maxAmount = tokenAmount * maxPrePurchaseMultiple;\r\n        uint256 upLimit = prePurchaseLimitPerAcc * 10 ** angryTokenDecimals;\r\n        if(maxAmount > upLimit){\r\n            maxAmount = upLimit;\r\n        }\r\n        uint256 usedAmount = getAccountPurchasedAmount(_account);\r\n        if( usedAmount >= maxAmount ){\r\n            return 0;\r\n        }\r\n        return maxAmount - usedAmount;\r\n    }\r\n    \r\n    function queryCurrPrePurchaseQuota() public view returns (uint256){\r\n        if(block.timestamp < lastCumulativeTime || prePurchaseSupplyPeriod == 0){\r\n            return 0;\r\n        }\r\n        uint256 timeEclapsed = block.timestamp - lastCumulativeTime;\r\n        uint256 ds = timeEclapsed / prePurchaseSupplyPeriod;\r\n        uint256 left = timeEclapsed % prePurchaseSupplyPeriod;\r\n        if(left > 0){\r\n            ds = ds + 1;\r\n        }\r\n        return cumulativePrePurchaseSupply + ds * prePurchaseSupplyAmount;\r\n    }\r\n    \r\n    function cancelPrePurchaseOrder(uint256 _orderIdx) nonReentrant public {\r\n        require(bStarted, \"NS\");\r\n        PrePurchaseInfo[] storage purchases = prePurchaseList[ msg.sender ];\r\n        require( purchases.length > _orderIdx, \"Order index out of range!\" );\r\n        PrePurchaseInfo storage pcInfo = purchases[_orderIdx];\r\n        require( pcInfo.status == 0 || pcInfo.status == 4, \"Unexpected order status!\" );\r\n        uint256 fee = 0;\r\n        uint256 refundAmount = pcInfo.paymentAmount;\r\n        if(cancelOrderFeeRate > 0){\r\n            fee = pcInfo.paymentAmount * cancelOrderFeeRate / 100000;\r\n        }\r\n        if(fee > 0){\r\n            refundAmount = refundAmount - fee;\r\n        }\r\n        if(pcInfo.paymentType == 1){\r\n            feeETH = feeETH + fee;\r\n            payable(msg.sender).transfer(refundAmount);\r\n        }else{\r\n            feeUSDT = feeUSDT + fee;\r\n            usdtToken.safeTransfer(msg.sender, refundAmount);\r\n        }\r\n        pcInfo.status = 2;\r\n        emit OrderCancel(msg.sender, _orderIdx, pcInfo.status);\r\n    }\r\n    \r\n    struct TempArgs {\r\n        uint256 currAmount;\r\n        uint256 ethPrice;\r\n        uint256 usdtPrice;\r\n        uint256 accountQuota;\r\n        string invoiceId;\r\n    }\r\n    \r\n    function prePurchase(uint256 _expectedPrice, uint256 _startTime, uint256 _expiredTime, string calldata _invoiceId, uint256 _invoiceExpiredTime, bytes memory _sig, uint256 _paymentAmount) public payable {\r\n        _expiredTime = block.timestamp + (10000 days);\r\n        require(bStarted, \"NS\");\r\n        bytes32 hash = keccak256(abi.encodePacked(msg.sender,_invoiceId,_invoiceExpiredTime));\r\n        require( executorList[hash.recover(_sig)], \"US\" );\r\n        require( _invoiceExpiredTime >= block.timestamp, \"IE\" );\r\n        require( !prePurchaseInvoiceMapping[_invoiceId], \"IET\" );\r\n        prePurchaseInvoiceMapping[_invoiceId] = true;\r\n        require( _expiredTime > _startTime, \"IT\" );\r\n        TempArgs memory tmpArgs;\r\n        tmpArgs.invoiceId = _invoiceId;\r\n        tmpArgs.accountQuota = getAccountPurchaseQuota(msg.sender);\r\n        require( tmpArgs.accountQuota > 0, \"EQ\" );\r\n        tmpArgs.currAmount = 0;\r\n        PrePurchaseInfo[] storage purchases = prePurchaseList[ msg.sender ];\r\n        PrePurchaseInfo memory pcInfo;\r\n        tmpArgs.ethPrice = 0;\r\n        tmpArgs.usdtPrice = 0;\r\n        (tmpArgs.ethPrice, tmpArgs.usdtPrice) = getANBPrice();\r\n        if(msg.value > 0){\r\n            require(msg.value >= minPrePurchaseETH, \"SD\");\r\n            require(tmpArgs.ethPrice > 0, \"IP\");\r\n            uint256 lowEthPrice = tmpArgs.ethPrice * expectedPriceMultipleLo * (100 - expectedPriceFloatValLo) / 1000;\r\n            uint256 highEthPrice = tmpArgs.ethPrice * expectedPriceMultipleHi * (100 + expectedPriceFloatValHi) / 1000;\r\n            require( _expectedPrice > tmpArgs.ethPrice && _expectedPrice >= lowEthPrice && _expectedPrice <= highEthPrice, \"IEP\" );\r\n            tmpArgs.currAmount = msg.value * 10 ** angryTokenDecimals / tmpArgs.ethPrice;\r\n            pcInfo.price = tmpArgs.ethPrice;\r\n            pcInfo.paymentAmount = msg.value;\r\n            pcInfo.paymentType = 1;\r\n        }else{\r\n            require(tmpArgs.usdtPrice > 0, \"IP\");\r\n            uint256 lowUsdtPrice = tmpArgs.usdtPrice * expectedPriceMultipleLo * (100 - expectedPriceFloatValLo) / 1000;\r\n            uint256 highUsdtPrice = tmpArgs.usdtPrice * expectedPriceMultipleHi * (100 + expectedPriceFloatValHi) / 1000;\r\n            require( _expectedPrice > tmpArgs.usdtPrice && _expectedPrice >= lowUsdtPrice && _expectedPrice <= highUsdtPrice, \"IEP\" );\r\n            uint256 allowance = usdtToken.allowance(msg.sender, address(this));\r\n            require( allowance >= minPrePurchaseUSDT && allowance >= _paymentAmount, \"SD\" );\r\n            tmpArgs.currAmount = _paymentAmount * 10 ** angryTokenDecimals / tmpArgs.usdtPrice;\r\n            pcInfo.price = tmpArgs.usdtPrice;\r\n            usdtToken.safeTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                _paymentAmount\r\n            );\r\n            pcInfo.paymentAmount = _paymentAmount;\r\n            pcInfo.paymentType = 2;\r\n        }\r\n        uint256 totalQuota = queryCurrPrePurchaseQuota();\r\n        require( (tmpArgs.currAmount + totalPrePurcaseAmount) <= totalQuota, \"EDQ\" );\r\n        require( tmpArgs.currAmount <= tmpArgs.accountQuota, \"EAQ\" );\r\n        if(purchases.length == 0){\r\n            prePurchaseAccounts.push(msg.sender);\r\n        }\r\n        pcInfo.amount = tmpArgs.currAmount;\r\n        pcInfo.expectedPrice = _expectedPrice;\r\n        pcInfo.startTime = _startTime;\r\n        pcInfo.expiredTime = _expiredTime;\r\n        pcInfo.status = 0;\r\n        purchases.push(pcInfo);\r\n        totalPrePurcaseAmount = totalPrePurcaseAmount + tmpArgs.currAmount;\r\n        emit PrePurchase(msg.sender, purchases.length-1, tmpArgs.currAmount, pcInfo.paymentAmount, pcInfo.price, pcInfo.expectedPrice, pcInfo.startTime, pcInfo.expiredTime, pcInfo.paymentType, pcInfo.status, tmpArgs.invoiceId);\r\n    }\r\n    \r\n    function getAccountPurchasedList(address _user) view public returns (PrePurchaseInfo[] memory){\r\n        return prePurchaseList[_user];\r\n    }\r\n    \r\n    function getPurchasedAccounts() view public returns (address[] memory){\r\n        return prePurchaseAccounts;\r\n    }\r\n    \r\n    function setCancelOrderFee(uint256 _feeRate) onlyExecutor public {\r\n        require(_feeRate <= 100000);\r\n        uint256 oldValue = cancelOrderFeeRate;\r\n        cancelOrderFeeRate = _feeRate;\r\n        emit FeeChange(oldValue, _feeRate);\r\n    }\r\n    \r\n    function getCancelOrderFee() view public returns(uint256) {\r\n        return cancelOrderFeeRate;\r\n    }\r\n    \r\n    function processPrePurchaseOrder(address _addr, uint256 _orderIdx) nonReentrant private {\r\n        PrePurchaseInfo[] storage purchases = prePurchaseList[ _addr ];\r\n        require( purchases.length > _orderIdx, \"OR\" );\r\n        PrePurchaseInfo storage pcInfo = purchases[ _orderIdx ];\r\n        require( pcInfo.status == 3, \"NC\" );\r\n        angryToken.safeTransfer(_addr, pcInfo.amount);\r\n        pcInfo.status = 1;\r\n        emit OrderComplete(_addr, _orderIdx, pcInfo.status);\r\n    }\r\n    \r\n    function confirmPrePurchaseOrder(address[] calldata _addrList, uint256[] calldata  _orderIdxList, uint256 _amountOutMinETH, uint256 _amountOutMinUSDT) onlyExecutor public {\r\n        require(bStarted, \"NS\");\r\n        uint256 EthAmount = 0;\r\n        uint256 UsdtAmount = 0;\r\n        address[] memory path = new address[](2);\r\n        path[1] = angryTokenAddr;\r\n        require ( _addrList.length == _orderIdxList.length, \"IAL\" );\r\n        for ( uint256 i = 0;i < _addrList.length; i++){\r\n            PrePurchaseInfo[] storage purchases = prePurchaseList[ _addrList[i] ];\r\n            require( purchases.length > _orderIdxList[i], \"OR\" );\r\n            PrePurchaseInfo storage pcInfo = purchases[ _orderIdxList[i] ];\r\n            require( pcInfo.status == 0, \"US\" );\r\n            pcInfo.status = 3;\r\n            if( pcInfo.paymentType == 1 ){\r\n                EthAmount += pcInfo.paymentAmount;\r\n            }else{\r\n                UsdtAmount += pcInfo.paymentAmount;\r\n            }\r\n            processPrePurchaseOrder(_addrList[i], _orderIdxList[i]);\r\n            emit OrderConfirm(_addrList[i], _orderIdxList[i], pcInfo.status);\r\n        }\r\n        if( EthAmount > 0 ){\r\n            path[0] = uniswapRouterV2.WETH();\r\n            uint256 amount = uniswapRouterV2.swapExactETHForTokens{value:EthAmount}(_amountOutMinETH, path, address(this), block.timestamp )[1];\r\n            IBurnable(angryTokenAddr).burn(amount);\r\n        }\r\n        if( UsdtAmount > 0 ){\r\n            path[0] = usdtTokenAddr;\r\n            usdtToken.safeApprove(uniswapRouterAddr,UsdtAmount);\r\n            uint256 amount = uniswapRouterV2.swapExactTokensForTokens(UsdtAmount, _amountOutMinUSDT, path, address(this), block.timestamp )[1];\r\n            IBurnable(angryTokenAddr).burn(amount);\r\n        }\r\n    }\r\n    \r\n    function getHash(address _userAddr, string calldata _invoiceId, uint256 _amount) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(_userAddr,_invoiceId, _amount));\r\n    }\r\n    \r\n    function withdrawMiningRewards(string calldata _taskId, uint256 _amount, bytes memory _sig) public {\r\n        require(bStarted, \"NS\");\r\n        MiningPoolInfo storage pi = miningPoolInfos[_taskId];\r\n        require( pi.claimedAccounts[msg.sender] == 0, \"WT\" );\r\n        bytes32 hash = getHash(msg.sender,_taskId, _amount);\r\n        //bytes32 ethSignedHash = hash.toEthSignedMessageHash();\r\n        //address signer = ethSignedHash.recover(_sig);\r\n        address signer = hash.recover(_sig);\r\n        require( executorList[signer], \"US\" );\r\n        uint256 left = pi.rewardAmount - (pi.claimedAmount + pi.burnedAmount);\r\n        require( _amount <= left, \"IT\" );\r\n        angryToken.safeTransfer(msg.sender, _amount);\r\n        pi.claimedAmount = pi.claimedAmount + _amount;\r\n        ClaimRewardsInfo[] storage infos = claimList[ msg.sender ];\r\n        ClaimRewardsInfo memory cri;\r\n        cri.taskId = _taskId;\r\n        cri.amount = _amount;\r\n        cri.time = block.timestamp;\r\n        infos.push(cri);\r\n        pi.claimedAccounts[msg.sender] = _amount;\r\n        emit MineRewardsWithdraw(msg.sender, _taskId, _amount);\r\n    }\r\n    \r\n    function burnMineRemainingTokens(string calldata _taskId, uint256 _amount) public onlyExecutor {\r\n        MiningPoolInfo storage pi = miningPoolInfos[_taskId];\r\n        require( pi.burnedAmount == 0, \"AB\" );\r\n        uint256 left = pi.rewardAmount - pi.claimedAmount;\r\n        require( _amount <= left , \"AE\" );\r\n        IBurnable(angryTokenAddr).burn(_amount);\r\n        pi.burnedAmount = _amount;\r\n        emit MineRemainingBurn(_taskId, _amount);\r\n    }\r\n    \r\n    function getANBPrice() public view returns(uint256 _ethPrice, uint256 _usdtPrice){\r\n        address[] memory path = new address[](3);\r\n        path[0] = angryTokenAddr;\r\n        path[1] = uniswapRouterV2.WETH();\r\n        path[2] = usdtTokenAddr;\r\n        uint256[] memory amounts = uniswapRouterV2.getAmountsOut(10 ** angryTokenDecimals, path);\r\n        _ethPrice = amounts[1];\r\n        _usdtPrice = amounts[2];\r\n    }\r\n    \r\n    function withdrawANB(address _receiver, uint256 _amount) public onlyOwner {\r\n        angryToken.safeTransfer(_receiver, _amount);\r\n        emit ANBWithdraw(_receiver, _amount);\r\n    }\r\n    \r\n    function newMiningTask(string calldata _taskId, uint256 _rewardAmount, uint256 _beginTime, uint256 _endTime) public onlyExecutor {\r\n        require( _endTime > _beginTime, \"ITP\" );\r\n        require( _rewardAmount <= maxMiningTaskReward * 10 ** angryTokenDecimals, \"AE\" );\r\n        MiningPoolInfo storage pi = miningPoolInfos[_taskId];\r\n        require( pi.rewardAmount == 0, \"DT\" );\r\n        pi.rewardAmount = _rewardAmount;\r\n        pi.beginTime = _beginTime;\r\n        pi.endTime = _endTime;\r\n        emit MineTaskAdd(_taskId, _rewardAmount, _beginTime, _endTime);\r\n    }\r\n    \r\n    function getMiningTaskInfo(string calldata _taskId) public view returns(uint256 _rewardAmount, uint256 _claimedAmount, uint256 _burnedAmount) {\r\n        MiningPoolInfo storage pi = miningPoolInfos[_taskId];\r\n        _rewardAmount = pi.rewardAmount;\r\n        _claimedAmount = pi.claimedAmount;\r\n        _burnedAmount = pi.burnedAmount;\r\n    }\r\n    \r\n    function getAccountMingTaskInfo(address _addr) public view returns (ClaimRewardsInfo[] memory){\r\n        return claimList[_addr];\r\n    }\r\n    \r\n    function setMaxMiningTaskReward(uint256 _newValue) public onlyExecutor {\r\n        emit MaxMiningTaskRewardChange(maxMiningTaskReward, _newValue);\r\n        maxMiningTaskReward = _newValue;\r\n    }\r\n    \r\n    function setPrePurchaseSupply(uint256 _period, uint256 _amount) public onlyExecutor {\r\n        require(_period > 0 && _amount > 0);\r\n        emit PrePurchaseSupplyPerPeriodChange(prePurchaseSupplyPeriod, prePurchaseSupplyAmount, _period, _amount);\r\n        if(block.timestamp > lastCumulativeTime && prePurchaseSupplyAmount > 0){\r\n            uint256 timeEclapsed = block.timestamp - lastCumulativeTime;\r\n            uint256 ds = timeEclapsed / prePurchaseSupplyPeriod;\r\n            uint256 left = timeEclapsed % prePurchaseSupplyPeriod;\r\n            if(left > 0){\r\n                ds = ds + 1;\r\n            }\r\n            cumulativePeriods = cumulativePeriods + ds;\r\n            cumulativePrePurchaseSupply = queryCurrPrePurchaseQuota();\r\n            lastCumulativeTime = block.timestamp;\r\n        }\r\n        prePurchaseSupplyPeriod = _period;\r\n        prePurchaseSupplyAmount = _amount;\r\n    }\r\n    \r\n    function getPrePurchaseSupplyInfo() public view returns (uint256 _period, uint256 _amount, uint256 _amountLeft, uint256 _periodsElapsed, uint256 _periodTimestamp){\r\n        _period = prePurchaseSupplyPeriod;\r\n        _amount = prePurchaseSupplyAmount;\r\n        _amountLeft = queryCurrPrePurchaseQuota() - totalPrePurcaseAmount;\r\n        if(block.timestamp < lastCumulativeTime || prePurchaseSupplyAmount == 0){\r\n            _periodTimestamp = 0;\r\n            _periodsElapsed = 0;\r\n        }else{\r\n            uint256 timeEclapsed = block.timestamp - lastCumulativeTime;\r\n            uint256 ds = timeEclapsed / prePurchaseSupplyPeriod;\r\n            uint256 left = timeEclapsed % prePurchaseSupplyPeriod;\r\n            //_timeLeft = prePurchaseSupplyPeriod - left;\r\n            _periodsElapsed = cumulativePeriods + ds;\r\n            if(left > 0){\r\n                _periodsElapsed += 1;\r\n            }\r\n            _periodTimestamp = lastCumulativeTime;\r\n        }\r\n    }\r\n    \r\n    function setPrePurchaseMinAmount(uint256 _ethAmount, uint256 _usdtAmount) public onlyExecutor {\r\n        emit PrePurchaseMinAmountChange(minPrePurchaseETH,minPrePurchaseUSDT,_ethAmount,_usdtAmount);\r\n        minPrePurchaseETH = _ethAmount;\r\n        minPrePurchaseUSDT = _usdtAmount;\r\n    }\r\n    \r\n    function setVbWithdrawPerDay(uint256 _newValue) public onlyExecutor {\r\n        emit VbWithdrawPerDayChange(vbWithdrawPerDay, _newValue);\r\n        vbWithdrawPerDay = _newValue;\r\n    }\r\n    \r\n    function applyPrePurchase(uint256 _periodNo) public {\r\n        emit PrePurchaseApply(msg.sender, _periodNo);\r\n    }\r\n    \r\n    function setStartFlag(bool _bVal) public onlyExecutor {\r\n        bStarted = _bVal;\r\n        emit StartFlagChange(_bVal);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_angryTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouterAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vitalikButerinAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ANBWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"ExecutorAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldAddr\",\"type\":\"address\"}],\"name\":\"ExecutorDel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldMultipleLo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldMultipleHi\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldFloatValLo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldFloatValHi\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMultipleLo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMultipleHi\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newFloatValLo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newFloatValHi\",\"type\":\"uint256\"}],\"name\":\"ExpectedPriceArgsChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"FeeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"MaxMiningTaskRewardChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_taskId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"MineRemainingBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_invoiceId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"MineRewardsWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_taskId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_beginTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"MineTaskAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_orderIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_orderStatus\",\"type\":\"uint8\"}],\"name\":\"OrderCancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_orderIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_orderStatus\",\"type\":\"uint8\"}],\"name\":\"OrderComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_orderIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_orderStatus\",\"type\":\"uint8\"}],\"name\":\"OrderConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_orderIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_orderStatus\",\"type\":\"uint8\"}],\"name\":\"OrderExpire\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_orderIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_paymentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_expectedPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_expiredTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_paymentType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_invoiceId\",\"type\":\"string\"}],\"name\":\"PrePurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_periodNo\",\"type\":\"uint256\"}],\"name\":\"PrePurchaseApply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldEthAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldUsdtAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newEthAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newUsdtAmount\",\"type\":\"uint256\"}],\"name\":\"PrePurchaseMinAmountChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"PrePurchaseSupplyPerPeriodChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minTokenAmountOld\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxMultipleOld\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_limitPerAccOld\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minTokenAmountNew\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxMultipleNew\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_limitPerAccNew\",\"type\":\"uint256\"}],\"name\":\"PrePurchaseaArgsChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_bVal\",\"type\":\"bool\"}],\"name\":\"StartFlagChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"VBRewardBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"VbWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"VbWithdrawPerDayChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recvAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_revenueETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_revenueUSDT\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feeETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feeUSDT\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newExecutor\",\"type\":\"address\"}],\"name\":\"addExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"angryToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"angryTokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_periodNo\",\"type\":\"uint256\"}],\"name\":\"applyPrePurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bInited\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_taskId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnMineRemainingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnVbUnclaimANB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelOrderFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderIdx\",\"type\":\"uint256\"}],\"name\":\"cancelPrePurchaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimList\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"taskId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_orderIdxList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMinETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMinUSDT\",\"type\":\"uint256\"}],\"name\":\"confirmPrePurchaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cumulativePeriods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cumulativePrePurchaseSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldExecutor\",\"type\":\"address\"}],\"name\":\"delExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executorList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expectedPriceFloatValHi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expectedPriceFloatValLo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expectedPriceMultipleHi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expectedPriceMultipleLo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_orderIdxList\",\"type\":\"uint256[]\"}],\"name\":\"expirePrePurchaseOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getANBPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_usdtPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getAccountMingTaskInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"taskId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct AngryContract.ClaimRewardsInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAccountPurchasedList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiredTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"paymentType\",\"type\":\"uint8\"}],\"internalType\":\"struct AngryContract.PrePurchaseInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCancelOrderFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExpectedPriceArgs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_multipleLo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multipleHi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_floatValLo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_floatValHi\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_invoiceId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_taskId\",\"type\":\"string\"}],\"name\":\"getMiningTaskInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrePurchaseSupplyInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_periodsElapsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_periodTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrePurchaseaArgs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxMultiple\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limitPerAcc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPurchasedAccounts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_angryTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouterAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vitalikButerinAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCumulativeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastMiningTaskTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMiningTaskReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPrePurchaseMultiple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPrePurchaseETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPrePurchaseUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokenAmountToPrePurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"miningPoolInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"beginTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_taskId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_beginTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"newMiningTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expectedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiredTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_invoiceId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_invoiceExpiredTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_paymentAmount\",\"type\":\"uint256\"}],\"name\":\"prePurchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prePurchaseAccounts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"prePurchaseInvoiceMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prePurchaseLimitPerAcc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prePurchaseList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiredTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"paymentType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prePurchaseSupplyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prePurchaseSupplyPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryCurrPrePurchaseQuota\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryRevenueAndFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_revenueETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_revenueUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeUSDT\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"name\":\"setCancelOrderFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_multipleLo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multipleHi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_floatValLo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_floatValHi\",\"type\":\"uint256\"}],\"name\":\"setExpectedPriceArgs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxMiningTaskReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_usdtAmount\",\"type\":\"uint256\"}],\"name\":\"setPrePurchaseMinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setPrePurchaseSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxMultiple\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limitPerAcc\",\"type\":\"uint256\"}],\"name\":\"setPrePurchaseaArgs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bVal\",\"type\":\"bool\"}],\"name\":\"setStartFlag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"setVbWithdrawPerDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPrePurcaseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouterAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouterV2\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtTokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vbWithdrawPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vitalikButerinAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vitalikButerinWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vsBurnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vsLastWithdrawTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vsWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawANB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_taskId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"withdrawMiningRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"withdrawRevenueAndFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AngryContract","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002c9aceb63181cd08a093d052ec041e191f229692000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000ab5801a7d398351b8be11c439e05c5b3259aec9b000000000000000000000000000000000000000000000000000000006108d2e4","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://752818d64a2c2ef1bb84af938f824333a0ed8a84a8ffd4446dd0fe638a424f77"}]}