{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-04-21\r\n*/\r\n\r\npragma solidity ^0.7.6;\r\n\r\n// SPDX-License-Identifier: MIT\r\n// Source code: https://github.com/DeCash-Official/smart-contracts\r\n\r\ninterface DeCashStorageInterface {\r\n    // Getters\r\n    function getAddress(bytes32 _key) external view returns (address);\r\n\r\n    function getUint(bytes32 _key) external view returns (uint256);\r\n\r\n    function getString(bytes32 _key) external view returns (string memory);\r\n\r\n    function getBytes(bytes32 _key) external view returns (bytes memory);\r\n\r\n    function getBool(bytes32 _key) external view returns (bool);\r\n\r\n    function getInt(bytes32 _key) external view returns (int256);\r\n\r\n    function getBytes32(bytes32 _key) external view returns (bytes32);\r\n\r\n    // Setters\r\n    function setAddress(bytes32 _key, address _value) external;\r\n\r\n    function setUint(bytes32 _key, uint256 _value) external;\r\n\r\n    function setString(bytes32 _key, string calldata _value) external;\r\n\r\n    function setBytes(bytes32 _key, bytes calldata _value) external;\r\n\r\n    function setBool(bytes32 _key, bool _value) external;\r\n\r\n    function setInt(bytes32 _key, int256 _value) external;\r\n\r\n    function setBytes32(bytes32 _key, bytes32 _value) external;\r\n\r\n    // Deleters\r\n    function deleteAddress(bytes32 _key) external;\r\n\r\n    function deleteUint(bytes32 _key) external;\r\n\r\n    function deleteString(bytes32 _key) external;\r\n\r\n    function deleteBytes(bytes32 _key) external;\r\n\r\n    function deleteBool(bytes32 _key) external;\r\n\r\n    function deleteInt(bytes32 _key) external;\r\n\r\n    function deleteBytes32(bytes32 _key) external;\r\n}\r\n\r\n/// @title Base settings / modifiers for each contract in DeCash Token (Credits David Rugendyke/Rocket Pool)\r\n/// @author Fabrizio Amodio (ZioFabry)\r\n\r\nabstract contract DeCashBase {\r\n    // Version of the contract\r\n    uint8 public version;\r\n\r\n    // The main storage contract where primary persistant storage is maintained\r\n    DeCashStorageInterface internal _decashStorage = DeCashStorageInterface(0);\r\n\r\n    /**\r\n     * @dev Throws if called by any sender that doesn't match one of the supplied contract or is the latest version of that contract\r\n     */\r\n    modifier onlyLatestContract(\r\n        string memory _contractName,\r\n        address _contractAddress\r\n    ) {\r\n        require(\r\n            _contractAddress ==\r\n                _getAddress(\r\n                    keccak256(\r\n                        abi.encodePacked(\"contract.address\", _contractName)\r\n                    )\r\n                ),\r\n            \"Invalid or outdated contract\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_isOwner(msg.sender), \"Account is not the owner\");\r\n        _;\r\n    }\r\n    modifier onlyAdmin() {\r\n        require(_isAdmin(msg.sender), \"Account is not an admin\");\r\n        _;\r\n    }\r\n    modifier onlySuperUser() {\r\n        require(_isSuperUser(msg.sender), \"Account is not a super user\");\r\n        _;\r\n    }\r\n    modifier onlyDelegator(address _address) {\r\n        require(_isDelegator(_address), \"Account is not a delegator\");\r\n        _;\r\n    }\r\n    modifier onlyFeeRecipient(address _address) {\r\n        require(_isFeeRecipient(_address), \"Account is not a fee recipient\");\r\n        _;\r\n    }\r\n    modifier onlyRole(string memory _role) {\r\n        require(_roleHas(_role, msg.sender), \"Account does not match the role\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Set the main DeCash Storage address\r\n    constructor(address _decashStorageAddress) {\r\n        // Update the contract address\r\n        _decashStorage = DeCashStorageInterface(_decashStorageAddress);\r\n    }\r\n\r\n    function isOwner(address _address) external view returns (bool) {\r\n        return _isOwner(_address);\r\n    }\r\n\r\n    function isAdmin(address _address) external view returns (bool) {\r\n        return _isAdmin(_address);\r\n    }\r\n\r\n    function isSuperUser(address _address) external view returns (bool) {\r\n        return _isSuperUser(_address);\r\n    }\r\n\r\n    function isDelegator(address _address) external view returns (bool) {\r\n        return _isDelegator(_address);\r\n    }\r\n\r\n    function isFeeRecipient(address _address) external view returns (bool) {\r\n        return _isFeeRecipient(_address);\r\n    }\r\n\r\n    function isBlacklisted(address _address) external view returns (bool) {\r\n        return _isBlacklisted(_address);\r\n    }\r\n\r\n    /// @dev Get the address of a network contract by name\r\n    function _getContractAddress(string memory _contractName)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        // Get the current contract address\r\n        address contractAddress =\r\n            _getAddress(\r\n                keccak256(abi.encodePacked(\"contract.address\", _contractName))\r\n            );\r\n        // Check it\r\n        require(contractAddress != address(0x0), \"Contract not found\");\r\n        // Return\r\n        return contractAddress;\r\n    }\r\n\r\n    /// @dev Get the name of a network contract by address\r\n    function _getContractName(address _contractAddress)\r\n        internal\r\n        view\r\n        returns (string memory)\r\n    {\r\n        // Get the contract name\r\n        string memory contractName =\r\n            _getString(\r\n                keccak256(abi.encodePacked(\"contract.name\", _contractAddress))\r\n            );\r\n        // Check it\r\n        require(\r\n            keccak256(abi.encodePacked(contractName)) !=\r\n                keccak256(abi.encodePacked(\"\")),\r\n            \"Contract not found\"\r\n        );\r\n        // Return\r\n        return contractName;\r\n    }\r\n\r\n    /// @dev Role Management\r\n    function _roleHas(string memory _role, address _address)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return\r\n            _getBool(\r\n                keccak256(abi.encodePacked(\"access.role\", _role, _address))\r\n            );\r\n    }\r\n\r\n    function _isOwner(address _address) internal view returns (bool) {\r\n        return _roleHas(\"owner\", _address);\r\n    }\r\n\r\n    function _isAdmin(address _address) internal view returns (bool) {\r\n        return _roleHas(\"admin\", _address);\r\n    }\r\n\r\n    function _isSuperUser(address _address) internal view returns (bool) {\r\n        return _roleHas(\"admin\", _address) || _isOwner(_address);\r\n    }\r\n\r\n    function _isDelegator(address _address) internal view returns (bool) {\r\n        return _roleHas(\"delegator\", _address) || _isOwner(_address);\r\n    }\r\n\r\n    function _isFeeRecipient(address _address) internal view returns (bool) {\r\n        return _roleHas(\"fee\", _address) || _isOwner(_address);\r\n    }\r\n\r\n    function _isBlacklisted(address _address) internal view returns (bool) {\r\n        return _roleHas(\"blacklisted\", _address) && !_isOwner(_address);\r\n    }\r\n\r\n    /// @dev Storage get methods\r\n    function _getAddress(bytes32 _key) internal view returns (address) {\r\n        return _decashStorage.getAddress(_key);\r\n    }\r\n\r\n    function _getUint(bytes32 _key) internal view returns (uint256) {\r\n        return _decashStorage.getUint(_key);\r\n    }\r\n\r\n    function _getString(bytes32 _key) internal view returns (string memory) {\r\n        return _decashStorage.getString(_key);\r\n    }\r\n\r\n    function _getBytes(bytes32 _key) internal view returns (bytes memory) {\r\n        return _decashStorage.getBytes(_key);\r\n    }\r\n\r\n    function _getBool(bytes32 _key) internal view returns (bool) {\r\n        return _decashStorage.getBool(_key);\r\n    }\r\n\r\n    function _getInt(bytes32 _key) internal view returns (int256) {\r\n        return _decashStorage.getInt(_key);\r\n    }\r\n\r\n    function _getBytes32(bytes32 _key) internal view returns (bytes32) {\r\n        return _decashStorage.getBytes32(_key);\r\n    }\r\n\r\n    function _getAddressS(string memory _key) internal view returns (address) {\r\n        return _decashStorage.getAddress(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _getUintS(string memory _key) internal view returns (uint256) {\r\n        return _decashStorage.getUint(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _getStringS(string memory _key)\r\n        internal\r\n        view\r\n        returns (string memory)\r\n    {\r\n        return _decashStorage.getString(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _getBytesS(string memory _key)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return _decashStorage.getBytes(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _getBoolS(string memory _key) internal view returns (bool) {\r\n        return _decashStorage.getBool(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _getIntS(string memory _key) internal view returns (int256) {\r\n        return _decashStorage.getInt(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _getBytes32S(string memory _key) internal view returns (bytes32) {\r\n        return _decashStorage.getBytes32(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    /// @dev Storage set methods\r\n    function _setAddress(bytes32 _key, address _value) internal {\r\n        _decashStorage.setAddress(_key, _value);\r\n    }\r\n\r\n    function _setUint(bytes32 _key, uint256 _value) internal {\r\n        _decashStorage.setUint(_key, _value);\r\n    }\r\n\r\n    function _setString(bytes32 _key, string memory _value) internal {\r\n        _decashStorage.setString(_key, _value);\r\n    }\r\n\r\n    function _setBytes(bytes32 _key, bytes memory _value) internal {\r\n        _decashStorage.setBytes(_key, _value);\r\n    }\r\n\r\n    function _setBool(bytes32 _key, bool _value) internal {\r\n        _decashStorage.setBool(_key, _value);\r\n    }\r\n\r\n    function _setInt(bytes32 _key, int256 _value) internal {\r\n        _decashStorage.setInt(_key, _value);\r\n    }\r\n\r\n    function _setBytes32(bytes32 _key, bytes32 _value) internal {\r\n        _decashStorage.setBytes32(_key, _value);\r\n    }\r\n\r\n    function _setAddressS(string memory _key, address _value) internal {\r\n        _decashStorage.setAddress(keccak256(abi.encodePacked(_key)), _value);\r\n    }\r\n\r\n    function _setUintS(string memory _key, uint256 _value) internal {\r\n        _decashStorage.setUint(keccak256(abi.encodePacked(_key)), _value);\r\n    }\r\n\r\n    function _setStringS(string memory _key, string memory _value) internal {\r\n        _decashStorage.setString(keccak256(abi.encodePacked(_key)), _value);\r\n    }\r\n\r\n    function _setBytesS(string memory _key, bytes memory _value) internal {\r\n        _decashStorage.setBytes(keccak256(abi.encodePacked(_key)), _value);\r\n    }\r\n\r\n    function _setBoolS(string memory _key, bool _value) internal {\r\n        _decashStorage.setBool(keccak256(abi.encodePacked(_key)), _value);\r\n    }\r\n\r\n    function _setIntS(string memory _key, int256 _value) internal {\r\n        _decashStorage.setInt(keccak256(abi.encodePacked(_key)), _value);\r\n    }\r\n\r\n    function _setBytes32S(string memory _key, bytes32 _value) internal {\r\n        _decashStorage.setBytes32(keccak256(abi.encodePacked(_key)), _value);\r\n    }\r\n\r\n    /// @dev Storage delete methods\r\n    function _deleteAddress(bytes32 _key) internal {\r\n        _decashStorage.deleteAddress(_key);\r\n    }\r\n\r\n    function _deleteUint(bytes32 _key) internal {\r\n        _decashStorage.deleteUint(_key);\r\n    }\r\n\r\n    function _deleteString(bytes32 _key) internal {\r\n        _decashStorage.deleteString(_key);\r\n    }\r\n\r\n    function _deleteBytes(bytes32 _key) internal {\r\n        _decashStorage.deleteBytes(_key);\r\n    }\r\n\r\n    function _deleteBool(bytes32 _key) internal {\r\n        _decashStorage.deleteBool(_key);\r\n    }\r\n\r\n    function _deleteInt(bytes32 _key) internal {\r\n        _decashStorage.deleteInt(_key);\r\n    }\r\n\r\n    function _deleteBytes32(bytes32 _key) internal {\r\n        _decashStorage.deleteBytes32(_key);\r\n    }\r\n\r\n    function _deleteAddressS(string memory _key) internal {\r\n        _decashStorage.deleteAddress(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _deleteUintS(string memory _key) internal {\r\n        _decashStorage.deleteUint(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _deleteStringS(string memory _key) internal {\r\n        _decashStorage.deleteString(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _deleteBytesS(string memory _key) internal {\r\n        _decashStorage.deleteBytes(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _deleteBoolS(string memory _key) internal {\r\n        _decashStorage.deleteBool(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _deleteIntS(string memory _key) internal {\r\n        _decashStorage.deleteInt(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _deleteBytes32S(string memory _key) internal {\r\n        _decashStorage.deleteBytes32(keccak256(abi.encodePacked(_key)));\r\n    }\r\n}\r\n\r\ninterface DeCashUpgradeInterface {\r\n    function upgradeContract(\r\n        string calldata _name,\r\n        address _contractAddress,\r\n        string calldata _contractAbi\r\n    ) external;\r\n\r\n    function addContract(\r\n        string calldata _name,\r\n        address _contractAddress,\r\n        string calldata _contractAbi\r\n    ) external;\r\n\r\n    function upgradeABI(string calldata _name, string calldata _contractAbi)\r\n        external;\r\n\r\n    function addABI(string calldata _name, string calldata _contractAbi)\r\n        external;\r\n}\r\n\r\ninterface DeCashProxyInterface {\r\n    function initialize(string memory _tokenName, address _tokenAddr) external;\r\n\r\n    function upgrade(address _new) external;\r\n}\r\n\r\ninterface ERC20 {\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n\r\n    function allowance(address _owner, address _spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) external returns (bool);\r\n\r\n    function transferMany(address[] calldata _tos, uint256[] calldata _values)\r\n        external\r\n        returns (bool);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n\r\n    function mint(address _to, uint256 _value) external returns (bool);\r\n\r\n    function burn(uint256 _value) external returns (bool);\r\n\r\n    function burnFrom(address _from, uint256 _value) external returns (bool);\r\n}\r\n\r\n// Handles network contract upgrades\r\n\r\ncontract DeCashUpgrade is DeCashBase, DeCashUpgradeInterface {\r\n    // Events\r\n    event ContractUpgraded(\r\n        bytes32 indexed name,\r\n        address indexed oldAddress,\r\n        address indexed newAddress,\r\n        uint256 time\r\n    );\r\n    event ContractAdded(\r\n        bytes32 indexed name,\r\n        address indexed newAddress,\r\n        uint256 time\r\n    );\r\n    event ABIUpgraded(bytes32 indexed name, uint256 time);\r\n    event ABIAdded(bytes32 indexed name, uint256 time);\r\n\r\n    // Construct\r\n    constructor(address _decashStorageAddress)\r\n        DeCashBase(_decashStorageAddress)\r\n    {\r\n        version = 1;\r\n    }\r\n\r\n    // Upgrade a network contract\r\n    function upgradeContract(\r\n        string memory _name,\r\n        address _contractAddress,\r\n        string memory _contractAbi\r\n    )\r\n        external\r\n        override\r\n        onlyLatestContract(\"upgrade\", address(this))\r\n        onlySuperUser\r\n    {\r\n        // Check contract being upgraded\r\n        bytes32 nameHash = keccak256(abi.encodePacked(_name));\r\n        require(nameHash != keccak256(abi.encodePacked(\"proxy\")), \"Cannot upgrade proxy contracts\");\r\n        // require(nameHash != keccak256(abi.encodePacked(\"token\")), \"Cannot upgrade token contracts\");\r\n\r\n        // Get old contract address & check contract exists\r\n        address oldContractAddress =\r\n            _getAddress(keccak256(abi.encodePacked(\"contract.address\", _name)));\r\n        require(oldContractAddress != address(0x0), \"Contract does not exist\");\r\n\r\n        // Check new contract address\r\n        require(_contractAddress != address(0x0), \"Invalid contract address\");\r\n        require(\r\n            _contractAddress != oldContractAddress,\r\n            \"The contract address cannot be set to its current address\"\r\n        );\r\n\r\n        // Register new contract\r\n        _setBool(\r\n            keccak256(abi.encodePacked(\"contract.exists\", _contractAddress)),\r\n            true\r\n        );\r\n        _setString(\r\n            keccak256(abi.encodePacked(\"contract.name\", _contractAddress)),\r\n            _name\r\n        );\r\n        _setAddress(\r\n            keccak256(abi.encodePacked(\"contract.address\", _name)),\r\n            _contractAddress\r\n        );\r\n        _setString(\r\n            keccak256(abi.encodePacked(\"contract.abi\", _name)),\r\n            _contractAbi\r\n        );\r\n\r\n        // Deregister old contract\r\n        _deleteString(\r\n            keccak256(abi.encodePacked(\"contract.name\", oldContractAddress))\r\n        );\r\n        _deleteBool(\r\n            keccak256(abi.encodePacked(\"contract.exists\", oldContractAddress))\r\n        );\r\n\r\n        // Emit contract upgraded event\r\n        emit ContractUpgraded(\r\n            nameHash,\r\n            oldContractAddress,\r\n            _contractAddress,\r\n            block.timestamp\r\n        );\r\n\r\n        // if the upgraded contract is the token, I updated also the proxy contract\r\n        if (nameHash == keccak256(abi.encodePacked(\"token\"))) {\r\n            DeCashProxyInterface proxy =\r\n                DeCashProxyInterface(\r\n                    _getAddress(\r\n                        keccak256(abi.encodePacked(\"contract.address\", \"proxy\"))\r\n                    )\r\n                );\r\n            proxy.upgrade(_contractAddress);\r\n        }\r\n    }\r\n\r\n    // Add a new network contract\r\n    function addContract(\r\n        string memory _name,\r\n        address _contractAddress,\r\n        string memory _contractAbi\r\n    )\r\n        external\r\n        override\r\n        onlyLatestContract(\"upgrade\", address(this))\r\n        onlySuperUser\r\n    {\r\n        // Check contract name\r\n        bytes32 nameHash = keccak256(abi.encodePacked(_name));\r\n        require(\r\n            nameHash != keccak256(abi.encodePacked(\"\")),\r\n            \"Invalid contract name\"\r\n        );\r\n        require(\r\n            _getAddress(\r\n                keccak256(abi.encodePacked(\"contract.address\", _name))\r\n            ) == address(0x0),\r\n            \"Contract name is already in use\"\r\n        );\r\n\r\n        string memory existingAbi =\r\n            _getString(keccak256(abi.encodePacked(\"contract.abi\", _name)));\r\n        require(\r\n            keccak256(abi.encodePacked(existingAbi)) ==\r\n                keccak256(abi.encodePacked(\"\")),\r\n            \"Contract name is already in use\"\r\n        );\r\n\r\n        // Check contract address\r\n        require(_contractAddress != address(0x0), \"Invalid contract address\");\r\n        require(\r\n            !_getBool(\r\n                keccak256(abi.encodePacked(\"contract.exists\", _contractAddress))\r\n            ),\r\n            \"Contract address is already in use\"\r\n        );\r\n\r\n        // Register contract\r\n        _setBool(\r\n            keccak256(abi.encodePacked(\"contract.exists\", _contractAddress)),\r\n            true\r\n        );\r\n        _setString(\r\n            keccak256(abi.encodePacked(\"contract.name\", _contractAddress)),\r\n            _name\r\n        );\r\n        _setAddress(\r\n            keccak256(abi.encodePacked(\"contract.address\", _name)),\r\n            _contractAddress\r\n        );\r\n        _setString(\r\n            keccak256(abi.encodePacked(\"contract.abi\", _name)),\r\n            _contractAbi\r\n        );\r\n\r\n        // Emit contract added event\r\n        emit ContractAdded(nameHash, _contractAddress, block.timestamp);\r\n    }\r\n\r\n    // Upgrade a network contract ABI\r\n    function upgradeABI(string memory _name, string memory _contractAbi)\r\n        external\r\n        override\r\n        onlyLatestContract(\"upgrade\", address(this))\r\n        onlySuperUser\r\n    {\r\n        // Check ABI exists\r\n        string memory existingAbi =\r\n            _getString(keccak256(abi.encodePacked(\"contract.abi\", _name)));\r\n        require(\r\n            keccak256(abi.encodePacked(existingAbi)) !=\r\n                keccak256(abi.encodePacked(\"\")),\r\n            \"ABI does not exist\"\r\n        );\r\n\r\n        // Set ABI\r\n        _setString(\r\n            keccak256(abi.encodePacked(\"contract.abi\", _name)),\r\n            _contractAbi\r\n        );\r\n\r\n        // Emit ABI upgraded event\r\n        emit ABIUpgraded(keccak256(abi.encodePacked(_name)), block.timestamp);\r\n    }\r\n\r\n    // Add a new network contract ABI\r\n    function addABI(string memory _name, string memory _contractAbi)\r\n        external\r\n        override\r\n        onlyLatestContract(\"upgrade\", address(this))\r\n        onlySuperUser\r\n    {\r\n        // Check ABI name\r\n        bytes32 nameHash = keccak256(abi.encodePacked(_name));\r\n        require(\r\n            nameHash != keccak256(abi.encodePacked(\"\")),\r\n            \"Invalid ABI name\"\r\n        );\r\n        require(\r\n            _getAddress(\r\n                keccak256(abi.encodePacked(\"contract.address\", _name))\r\n            ) == address(0x0),\r\n            \"ABI name is already in use\"\r\n        );\r\n\r\n        string memory existingAbi =\r\n            _getString(keccak256(abi.encodePacked(\"contract.abi\", _name)));\r\n        require(\r\n            keccak256(abi.encodePacked(existingAbi)) ==\r\n                keccak256(abi.encodePacked(\"\")),\r\n            \"ABI name is already in use\"\r\n        );\r\n\r\n        // Set ABI\r\n        _setString(\r\n            keccak256(abi.encodePacked(\"contract.abi\", _name)),\r\n            _contractAbi\r\n        );\r\n\r\n        // Emit ABI added event\r\n        emit ABIAdded(nameHash, block.timestamp);\r\n    }\r\n}\r\n\r\ncontract EURDUpgrade is DeCashUpgrade {\r\n    constructor(address _storage) DeCashUpgrade(_storage) {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_decashStorageAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ABIAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ABIUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ContractAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ContractUpgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contractAbi\",\"type\":\"string\"}],\"name\":\"addABI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_contractAbi\",\"type\":\"string\"}],\"name\":\"addContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isDelegator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isFeeRecipient\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isSuperUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contractAbi\",\"type\":\"string\"}],\"name\":\"upgradeABI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_contractAbi\",\"type\":\"string\"}],\"name\":\"upgradeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DeCashUpgrade","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000070c70f1195a5d7544fa36eb70b58a89ab270daf0","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5ea1ee90d88d4346b41e426950fb84b4d9c2abdc6ebec4b5490807329712baca"}]}