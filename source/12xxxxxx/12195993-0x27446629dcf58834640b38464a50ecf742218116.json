{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.7.4;\r\n\r\ninterface IERC20 {\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface StakingDistributor {\r\n    function distribute() external returns ( bool );\r\n}\r\n\r\ninterface IVault {\r\n    function depositReserves( uint _amount ) external returns ( bool );\r\n}\r\n\r\ncontract OlympusSalesLite {\r\n    \r\n    using SafeMath for uint;\r\n    \r\n    address public owner;\r\n\r\n    address public constant SUSHISWAP_ROUTER_ADDRESS = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\r\n    IUniswapV2Router02 public sushiswapRouter;\r\n\r\n    uint public OHMToSell; // OHM sold per epoch ( 9 decimals )\r\n    uint public minimumToReceive; // Minimum DAI from sale ( 18 decimals )\r\n    uint public OHMToSellNextEpoch; // Setter to change OHMToSell\r\n\r\n    uint public nextEpochBlock; \r\n    uint public epochBlockLength;\r\n\r\n    address public OHM;\r\n    address public DAI;\r\n    address public stakingDistributor; // Receives new OHM\r\n    address public vault; // Mints new OHM\r\n\r\n    address public DAO; // Receives a share of new OHM\r\n    uint public DAOShare; // % = ( 1 / DAOShare )\r\n\r\n    bool public salesEnabled;\r\n\r\n    constructor( \r\n        address _OHM, \r\n        address _DAI, \r\n        address _DAO,\r\n        address _stakingDistributor, \r\n        address _vault, \r\n        uint _nextEpochBlock,\r\n        uint _epochBlockLength,\r\n        uint _OHMTOSell,\r\n        uint _minimumToReceive,\r\n        uint _DAOShare\r\n    ) {\r\n        owner = msg.sender;\r\n        sushiswapRouter = IUniswapV2Router02( SUSHISWAP_ROUTER_ADDRESS );\r\n        OHM = _OHM;\r\n        DAI = _DAI;\r\n        vault = _vault;\r\n\r\n        OHMToSell = _OHMTOSell;\r\n        OHMToSellNextEpoch = _OHMTOSell;\r\n        minimumToReceive = _minimumToReceive;\r\n\r\n        nextEpochBlock = _nextEpochBlock;\r\n        epochBlockLength = _epochBlockLength;\r\n\r\n        DAO = _DAO;\r\n        DAOShare = _DAOShare;\r\n        stakingDistributor = _stakingDistributor;\r\n    }\r\n\r\n    // Swaps OHM for DAI, then mints new OHM and sends to distributor\r\n    // uint _triggerDistributor - triggers staking distributor if == 1\r\n    function makeSale( uint _triggerDistributor ) external returns ( bool ) {\r\n        require( salesEnabled, \"Sales are not enabled\" );\r\n        require( block.number >= nextEpochBlock, \"Not next epoch\" );\r\n\r\n        IERC20(OHM).approve( SUSHISWAP_ROUTER_ADDRESS, OHMToSell );\r\n        sushiswapRouter.swapExactTokensForTokens( // Makes trade on sushi\r\n            OHMToSell, \r\n            minimumToReceive,\r\n            getPathForOHMtoDAI(), \r\n            address(this), \r\n            block.timestamp + 15\r\n        );\r\n        \r\n        uint daiBalance = IERC20(DAI).balanceOf(address(this) );\r\n        IERC20( DAI ).approve( vault, daiBalance );\r\n        IVault( vault ).depositReserves( daiBalance ); // Mint OHM\r\n\r\n        uint OHMToTransfer = IERC20(OHM).balanceOf( address(this) ).sub( OHMToSellNextEpoch );\r\n        uint transferToDAO = OHMToTransfer.div( DAOShare );\r\n\r\n        IERC20(OHM).transfer( stakingDistributor, OHMToTransfer.sub( transferToDAO ) ); // Transfer to staking\r\n        IERC20(OHM).transfer( DAO, transferToDAO ); // Transfer to DAO\r\n\r\n        nextEpochBlock = nextEpochBlock.add( epochBlockLength );\r\n        OHMToSell = OHMToSellNextEpoch;\r\n\r\n        if ( _triggerDistributor == 1 ) { \r\n            StakingDistributor( stakingDistributor ).distribute(); // Distribute epoch rebase\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function getPathForOHMtoDAI() private view returns ( address[] memory ) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = OHM;\r\n        path[1] = DAI;\r\n        \r\n        return path;\r\n    }\r\n\r\n    // Turns sales on or off\r\n    function toggleSales() external returns ( bool ) {\r\n        require( msg.sender == owner, \"Only owner\" );\r\n        salesEnabled = !salesEnabled;\r\n        return true;\r\n    }\r\n\r\n    // Sets sales rate one epoch ahead\r\n    function setOHMToSell( uint _amount, uint _minimumToReceive ) external returns ( bool ) {\r\n        require( msg.sender == owner, \"Only owner\" );\r\n        OHMToSellNextEpoch = _amount;\r\n        minimumToReceive = _minimumToReceive;\r\n        return true;\r\n    }\r\n\r\n    // Sets the DAO profit share ( % = 1 / share_ )\r\n    function setDAOShare( uint _share ) external returns ( bool ) {\r\n        require( msg.sender == owner, \"Only owner\" );\r\n        DAOShare = _share;\r\n        return true;\r\n    }\r\n\r\n    function transferOwnership( address _newOwner ) external returns ( bool ) {\r\n        require( msg.sender == owner, \"Only owner\" );\r\n        owner = _newOwner;\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_OHM\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DAI\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DAO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingDistributor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nextEpochBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epochBlockLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_OHMTOSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumToReceive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_DAOShare\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAOShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OHM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OHMToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OHMToSellNextEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUSHISWAP_ROUTER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochBlockLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_triggerDistributor\",\"type\":\"uint256\"}],\"name\":\"makeSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumToReceive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpochBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salesEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_share\",\"type\":\"uint256\"}],\"name\":\"setDAOShare\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumToReceive\",\"type\":\"uint256\"}],\"name\":\"setOHMToSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleSales\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"OlympusSalesLite","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000383518188c0c6d7730d91b2c03a03c837814a8990000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000245cc372c84b3645bf0ffe6538620b04a217988b000000000000000000000000be731507810c8747c3e01e62c676b1ca6f93242f000000000000000000000000886ce997aa9ee4f8c2282e182ab72a705762399d0000000000000000000000000000000000000000000000000000000000ba1bc0000000000000000000000000000000000000000000000000000000000000089800000000000000000000000000000000000000000000000000000000b2d05e000000000000000000000000000000000000000000000000410d586a20a4c00000000000000000000000000000000000000000000000000000000000000000000a","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3e80ed1072dd07571e8abab681c09863396ec9bd200994dc0916fc2547239ad5"}]}