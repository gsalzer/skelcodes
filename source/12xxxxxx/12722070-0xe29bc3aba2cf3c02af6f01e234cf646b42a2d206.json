{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n   interface ERC20 {\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        external\r\n        returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    function decimals() external view returns (uint256 digits);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}   abstract contract GasTokenInterface is ERC20 {\r\n    function free(uint256 value) public virtual returns (bool success);\r\n\r\n    function freeUpTo(uint256 value) public virtual returns (uint256 freed);\r\n\r\n    function freeFrom(address from, uint256 value) public virtual returns (bool success);\r\n\r\n    function freeFromUpTo(address from, uint256 value) public virtual returns (uint256 freed);\r\n}   contract GasBurner {\r\n    // solhint-disable-next-line const-name-snakecase\r\n    GasTokenInterface public constant gasToken = GasTokenInterface(0x0000000000b3F879cb30FE243b4Dfee438691c04);\r\n\r\n    modifier burnGas(uint _amount) {\r\n        if (gasToken.balanceOf(address(this)) >= _amount) {\r\n            gasToken.free(_amount);\r\n        }\r\n\r\n        _;\r\n    }\r\n}   library Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}   library SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}   library SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     */\r\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function _callOptionalReturn(ERC20 token, bytes memory data) private {\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}   contract AdminAuth {\r\n\r\n    using SafeERC20 for ERC20;\r\n\r\n    address public owner;\r\n    address public admin;\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(admin == msg.sender);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = 0xBc841B0dE0b93205e912CFBBd1D0c160A1ec6F00;\r\n        admin = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9;\r\n    }\r\n\r\n    /// @notice Admin is set by owner first time, after that admin is super role and has permission to change owner\r\n    /// @param _admin Address of multisig that becomes admin\r\n    function setAdminByOwner(address _admin) public {\r\n        require(msg.sender == owner);\r\n        require(admin == address(0));\r\n\r\n        admin = _admin;\r\n    }\r\n\r\n    /// @notice Admin is able to set new admin\r\n    /// @param _admin Address of multisig that becomes new admin\r\n    function setAdminByAdmin(address _admin) public {\r\n        require(msg.sender == admin);\r\n\r\n        admin = _admin;\r\n    }\r\n\r\n    /// @notice Admin is able to change owner\r\n    /// @param _owner Address of new owner\r\n    function setOwnerByAdmin(address _owner) public {\r\n        require(msg.sender == admin);\r\n\r\n        owner = _owner;\r\n    }\r\n\r\n    /// @notice Destroy the contract\r\n    function kill() public onlyOwner {\r\n        selfdestruct(payable(owner));\r\n    }\r\n\r\n    /// @notice  withdraw stuck funds\r\n    function withdrawStuckFunds(address _token, uint _amount) public onlyOwner {\r\n        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\r\n            payable(owner).transfer(_amount);\r\n        } else {\r\n            ERC20(_token).safeTransfer(owner, _amount);\r\n        }\r\n    }\r\n}   abstract contract DSGuard {\r\n    function canCall(address src_, address dst_, bytes4 sig) public view virtual returns (bool);\r\n\r\n    function permit(bytes32 src, bytes32 dst, bytes32 sig) public virtual;\r\n\r\n    function forbid(bytes32 src, bytes32 dst, bytes32 sig) public virtual;\r\n\r\n    function permit(address src, address dst, bytes32 sig) public virtual;\r\n\r\n    function forbid(address src, address dst, bytes32 sig) public virtual;\r\n}\r\n\r\n\r\nabstract contract DSGuardFactory {\r\n    function newGuard() public virtual returns (DSGuard guard);\r\n}   abstract contract DSAuthority {\r\n    function canCall(address src, address dst, bytes4 sig) public virtual view returns (bool);\r\n}   contract DSAuthEvents {\r\n    event LogSetAuthority(address indexed authority);\r\n    event LogSetOwner(address indexed owner);\r\n}\r\n\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority public authority;\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_) public auth {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_) public auth {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n}   contract ProxyPermission {\r\n    address public constant FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7;\r\n\r\n    /// @notice Called in the context of DSProxy to authorize an address\r\n    /// @param _contractAddr Address which will be authorized\r\n    function givePermission(address _contractAddr) public {\r\n        address currAuthority = address(DSAuth(address(this)).authority());\r\n        DSGuard guard = DSGuard(currAuthority);\r\n\r\n        if (currAuthority == address(0)) {\r\n            guard = DSGuardFactory(FACTORY_ADDRESS).newGuard();\r\n            DSAuth(address(this)).setAuthority(DSAuthority(address(guard)));\r\n        }\r\n\r\n        guard.permit(_contractAddr, address(this), bytes4(keccak256(\"execute(address,bytes)\")));\r\n    }\r\n\r\n    /// @notice Called in the context of DSProxy to remove authority of an address\r\n    /// @param _contractAddr Auth address which will be removed from authority list\r\n    function removePermission(address _contractAddr) public {\r\n        address currAuthority = address(DSAuth(address(this)).authority());\r\n        \r\n        // if there is no authority, that means that contract doesn't have permission\r\n        if (currAuthority == address(0)) {\r\n            return;\r\n        }\r\n\r\n        DSGuard guard = DSGuard(currAuthority);\r\n        guard.forbid(_contractAddr, address(this), bytes4(keccak256(\"execute(address,bytes)\")));\r\n    }\r\n\r\n    function proxyOwner() internal returns(address) {\r\n        return DSAuth(address(this)).owner();\r\n    } \r\n}   \r\n\r\n\r\n\r\n\r\nlibrary Account {\r\n    enum Status {Normal, Liquid, Vapor}\r\n    struct Info {\r\n        address owner; // The address that owns the account\r\n        uint256 number; // A nonce that allows a single address to control many accounts\r\n    }\r\n    struct Storage {\r\n        mapping(uint256 => Types.Par) balances; // Mapping from marketId to principal\r\n        Status status;\r\n    }\r\n}\r\n\r\n\r\nlibrary Actions {\r\n    enum ActionType {\r\n        Deposit, // supply tokens\r\n        Withdraw, // borrow tokens\r\n        Transfer, // transfer balance between accounts\r\n        Buy, // buy an amount of some token (public virtually)\r\n        Sell, // sell an amount of some token (public virtually)\r\n        Trade, // trade tokens against another account\r\n        Liquidate, // liquidate an undercollateralized or expiring account\r\n        Vaporize, // use excess tokens to zero-out a completely negative account\r\n        Call // send arbitrary data to an address\r\n    }\r\n\r\n    enum AccountLayout {OnePrimary, TwoPrimary, PrimaryAndSecondary}\r\n\r\n    enum MarketLayout {ZeroMarkets, OneMarket, TwoMarkets}\r\n\r\n    struct ActionArgs {\r\n        ActionType actionType;\r\n        uint256 accountId;\r\n        Types.AssetAmount amount;\r\n        uint256 primaryMarketId;\r\n        uint256 secondaryMarketId;\r\n        address otherAddress;\r\n        uint256 otherAccountId;\r\n        bytes data;\r\n    }\r\n\r\n    struct DepositArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 market;\r\n        address from;\r\n    }\r\n\r\n    struct WithdrawArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 market;\r\n        address to;\r\n    }\r\n\r\n    struct TransferArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info accountOne;\r\n        Account.Info accountTwo;\r\n        uint256 market;\r\n    }\r\n\r\n    struct BuyArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 makerMarket;\r\n        uint256 takerMarket;\r\n        address exchangeWrapper;\r\n        bytes orderData;\r\n    }\r\n\r\n    struct SellArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 takerMarket;\r\n        uint256 makerMarket;\r\n        address exchangeWrapper;\r\n        bytes orderData;\r\n    }\r\n\r\n    struct TradeArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info takerAccount;\r\n        Account.Info makerAccount;\r\n        uint256 inputMarket;\r\n        uint256 outputMarket;\r\n        address autoTrader;\r\n        bytes tradeData;\r\n    }\r\n\r\n    struct LiquidateArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info solidAccount;\r\n        Account.Info liquidAccount;\r\n        uint256 owedMarket;\r\n        uint256 heldMarket;\r\n    }\r\n\r\n    struct VaporizeArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info solidAccount;\r\n        Account.Info vaporAccount;\r\n        uint256 owedMarket;\r\n        uint256 heldMarket;\r\n    }\r\n\r\n    struct CallArgs {\r\n        Account.Info account;\r\n        address callee;\r\n        bytes data;\r\n    }\r\n}\r\n\r\n\r\nlibrary Decimal {\r\n    struct D256 {\r\n        uint256 value;\r\n    }\r\n}\r\n\r\n\r\nlibrary Interest {\r\n    struct Rate {\r\n        uint256 value;\r\n    }\r\n\r\n    struct Index {\r\n        uint96 borrow;\r\n        uint96 supply;\r\n        uint32 lastUpdate;\r\n    }\r\n}\r\n\r\n\r\nlibrary Monetary {\r\n    struct Price {\r\n        uint256 value;\r\n    }\r\n    struct Value {\r\n        uint256 value;\r\n    }\r\n}\r\n\r\n\r\nlibrary Storage {\r\n    // All information necessary for tracking a market\r\n    struct Market {\r\n        // Contract address of the associated ERC20 token\r\n        address token;\r\n        // Total aggregated supply and borrow amount of the entire market\r\n        Types.TotalPar totalPar;\r\n        // Interest index of the market\r\n        Interest.Index index;\r\n        // Contract address of the price oracle for this market\r\n        address priceOracle;\r\n        // Contract address of the interest setter for this market\r\n        address interestSetter;\r\n        // Multiplier on the marginRatio for this market\r\n        Decimal.D256 marginPremium;\r\n        // Multiplier on the liquidationSpread for this market\r\n        Decimal.D256 spreadPremium;\r\n        // Whether additional borrows are allowed for this market\r\n        bool isClosing;\r\n    }\r\n\r\n    // The global risk parameters that govern the health and security of the system\r\n    struct RiskParams {\r\n        // Required ratio of over-collateralization\r\n        Decimal.D256 marginRatio;\r\n        // Percentage penalty incurred by liquidated accounts\r\n        Decimal.D256 liquidationSpread;\r\n        // Percentage of the borrower's interest fee that gets passed to the suppliers\r\n        Decimal.D256 earningsRate;\r\n        // The minimum absolute borrow value of an account\r\n        // There must be sufficient incentivize to liquidate undercollateralized accounts\r\n        Monetary.Value minBorrowedValue;\r\n    }\r\n\r\n    // The maximum RiskParam values that can be set\r\n    struct RiskLimits {\r\n        uint64 marginRatioMax;\r\n        uint64 liquidationSpreadMax;\r\n        uint64 earningsRateMax;\r\n        uint64 marginPremiumMax;\r\n        uint64 spreadPremiumMax;\r\n        uint128 minBorrowedValueMax;\r\n    }\r\n\r\n    // The entire storage state of Solo\r\n    struct State {\r\n        // number of markets\r\n        uint256 numMarkets;\r\n        // marketId => Market\r\n        mapping(uint256 => Market) markets;\r\n        // owner => account number => Account\r\n        mapping(address => mapping(uint256 => Account.Storage)) accounts;\r\n        // Addresses that can control other users accounts\r\n        mapping(address => mapping(address => bool)) operators;\r\n        // Addresses that can control all users accounts\r\n        mapping(address => bool) globalOperators;\r\n        // mutable risk parameters of the system\r\n        RiskParams riskParams;\r\n        // immutable risk limits of the system\r\n        RiskLimits riskLimits;\r\n    }\r\n}\r\n\r\n\r\nlibrary Types {\r\n    enum AssetDenomination {\r\n        Wei, // the amount is denominated in wei\r\n        Par // the amount is denominated in par\r\n    }\r\n\r\n    enum AssetReference {\r\n        Delta, // the amount is given as a delta from the current value\r\n        Target // the amount is given as an exact number to end up at\r\n    }\r\n\r\n    struct AssetAmount {\r\n        bool sign; // true if positive\r\n        AssetDenomination denomination;\r\n        AssetReference ref;\r\n        uint256 value;\r\n    }\r\n\r\n    struct TotalPar {\r\n        uint128 borrow;\r\n        uint128 supply;\r\n    }\r\n\r\n    struct Par {\r\n        bool sign; // true if positive\r\n        uint128 value;\r\n    }\r\n\r\n    struct Wei {\r\n        bool sign; // true if positive\r\n        uint256 value;\r\n    }\r\n}\r\n\r\n\r\nabstract contract ISoloMargin {\r\n    struct OperatorArg {\r\n        address operator;\r\n        bool trusted;\r\n    }\r\n\r\n    function ownerSetSpreadPremium(\r\n        uint256 marketId,\r\n        Decimal.D256 memory spreadPremium\r\n    ) public virtual;\r\n\r\n    function getIsGlobalOperator(address operator) public virtual view returns (bool);\r\n\r\n    function getMarketTokenAddress(uint256 marketId)\r\n        public virtual\r\n        view\r\n        returns (address);\r\n\r\n    function ownerSetInterestSetter(uint256 marketId, address interestSetter)\r\n        public virtual;\r\n\r\n    function getAccountValues(Account.Info memory account)\r\n        public virtual\r\n        view\r\n        returns (Monetary.Value memory, Monetary.Value memory);\r\n\r\n    function getMarketPriceOracle(uint256 marketId)\r\n        public virtual\r\n        view\r\n        returns (address);\r\n\r\n    function getMarketInterestSetter(uint256 marketId)\r\n        public virtual\r\n        view\r\n        returns (address);\r\n\r\n    function getMarketSpreadPremium(uint256 marketId)\r\n        public virtual\r\n        view\r\n        returns (Decimal.D256 memory);\r\n\r\n    function getNumMarkets() public virtual view returns (uint256);\r\n\r\n    function ownerWithdrawUnsupportedTokens(address token, address recipient)\r\n        public virtual\r\n        returns (uint256);\r\n\r\n    function ownerSetMinBorrowedValue(Monetary.Value memory minBorrowedValue)\r\n        public virtual;\r\n\r\n    function ownerSetLiquidationSpread(Decimal.D256 memory spread) public virtual;\r\n\r\n    function ownerSetEarningsRate(Decimal.D256 memory earningsRate) public virtual;\r\n\r\n    function getIsLocalOperator(address owner, address operator)\r\n        public virtual\r\n        view\r\n        returns (bool);\r\n\r\n    function getAccountPar(Account.Info memory account, uint256 marketId)\r\n        public virtual\r\n        view\r\n        returns (Types.Par memory);\r\n\r\n    function ownerSetMarginPremium(\r\n        uint256 marketId,\r\n        Decimal.D256 memory marginPremium\r\n    ) public virtual;\r\n\r\n    function getMarginRatio() public virtual view returns (Decimal.D256 memory);\r\n\r\n    function getMarketCurrentIndex(uint256 marketId)\r\n        public virtual\r\n        view\r\n        returns (Interest.Index memory);\r\n\r\n    function getMarketIsClosing(uint256 marketId) public virtual view returns (bool);\r\n\r\n    function getRiskParams() public virtual view returns (Storage.RiskParams memory);\r\n\r\n    function getAccountBalances(Account.Info memory account)\r\n        public virtual\r\n        view\r\n        returns (address[] memory, Types.Par[] memory, Types.Wei[] memory);\r\n\r\n    function renounceOwnership() public virtual;\r\n\r\n    function getMinBorrowedValue() public virtual view returns (Monetary.Value memory);\r\n\r\n    function setOperators(OperatorArg[] memory args) public virtual;\r\n\r\n    function getMarketPrice(uint256 marketId) public virtual view returns (address);\r\n\r\n    function owner() public virtual view returns (address);\r\n\r\n    function isOwner() public virtual view returns (bool);\r\n\r\n    function ownerWithdrawExcessTokens(uint256 marketId, address recipient)\r\n        public virtual\r\n        returns (uint256);\r\n\r\n    function ownerAddMarket(\r\n        address token,\r\n        address priceOracle,\r\n        address interestSetter,\r\n        Decimal.D256 memory marginPremium,\r\n        Decimal.D256 memory spreadPremium\r\n    ) public virtual;\r\n\r\n    function operate(\r\n        Account.Info[] memory accounts,\r\n        Actions.ActionArgs[] memory actions\r\n    ) public virtual;\r\n\r\n    function getMarketWithInfo(uint256 marketId)\r\n        public virtual\r\n        view\r\n        returns (\r\n            Storage.Market memory,\r\n            Interest.Index memory,\r\n            Monetary.Price memory,\r\n            Interest.Rate memory\r\n        );\r\n\r\n    function ownerSetMarginRatio(Decimal.D256 memory ratio) public virtual;\r\n\r\n    function getLiquidationSpread() public virtual view returns (Decimal.D256 memory);\r\n\r\n    function getAccountWei(Account.Info memory account, uint256 marketId)\r\n        public virtual\r\n        view\r\n        returns (Types.Wei memory);\r\n\r\n    function getMarketTotalPar(uint256 marketId)\r\n        public virtual\r\n        view\r\n        returns (Types.TotalPar memory);\r\n\r\n    function getLiquidationSpreadForPair(\r\n        uint256 heldMarketId,\r\n        uint256 owedMarketId\r\n    ) public virtual view returns (Decimal.D256 memory);\r\n\r\n    function getNumExcessTokens(uint256 marketId)\r\n        public virtual\r\n        view\r\n        returns (Types.Wei memory);\r\n\r\n    function getMarketCachedIndex(uint256 marketId)\r\n        public virtual\r\n        view\r\n        returns (Interest.Index memory);\r\n\r\n    function getAccountStatus(Account.Info memory account)\r\n        public virtual\r\n        view\r\n        returns (uint8);\r\n\r\n    function getEarningsRate() public virtual view returns (Decimal.D256 memory);\r\n\r\n    function ownerSetPriceOracle(uint256 marketId, address priceOracle) public virtual;\r\n\r\n    function getRiskLimits() public virtual view returns (Storage.RiskLimits memory);\r\n\r\n    function getMarket(uint256 marketId)\r\n        public virtual\r\n        view\r\n        returns (Storage.Market memory);\r\n\r\n    function ownerSetIsClosing(uint256 marketId, bool isClosing) public virtual;\r\n\r\n    function ownerSetGlobalOperator(address operator, bool approved) public virtual;\r\n\r\n    function transferOwnership(address newOwner) public virtual;\r\n\r\n    function getAdjustedAccountValues(Account.Info memory account)\r\n        public virtual\r\n        view\r\n        returns (Monetary.Value memory, Monetary.Value memory);\r\n\r\n    function getMarketMarginPremium(uint256 marketId)\r\n        public virtual\r\n        view\r\n        returns (Decimal.D256 memory);\r\n\r\n    function getMarketInterestRate(uint256 marketId)\r\n        public virtual\r\n        view\r\n        returns (Interest.Rate memory);\r\n}    \r\n\r\n\r\n\r\n\r\ncontract DydxFlashLoanBase {\r\n    using SafeMath for uint256;\r\n\r\n    address public constant SOLO_MARGIN_ADDRESS = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\r\n\r\n    function _getMarketIdFromTokenAddress(address token)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return 0;\r\n    }\r\n\r\n    function _getRepaymentAmountInternal(uint256 amount)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // Needs to be overcollateralize\r\n        // Needs to provide +2 wei to be safe\r\n        return amount.add(2);\r\n    }\r\n\r\n    function _getAccountInfo() internal view returns (Account.Info memory) {\r\n        return Account.Info({owner: address(this), number: 1});\r\n    }\r\n\r\n    function _getWithdrawAction(uint marketId, uint256 amount, address contractAddr)\r\n        internal\r\n        view\r\n        returns (Actions.ActionArgs memory)\r\n    {\r\n        return\r\n            Actions.ActionArgs({\r\n                actionType: Actions.ActionType.Withdraw,\r\n                accountId: 0,\r\n                amount: Types.AssetAmount({\r\n                    sign: false,\r\n                    denomination: Types.AssetDenomination.Wei,\r\n                    ref: Types.AssetReference.Delta,\r\n                    value: amount\r\n                }),\r\n                primaryMarketId: marketId,\r\n                secondaryMarketId: 0,\r\n                otherAddress: contractAddr,\r\n                otherAccountId: 0,\r\n                data: \"\"\r\n            });\r\n    }\r\n\r\n    function _getCallAction(bytes memory data, address contractAddr)\r\n        internal\r\n        view\r\n        returns (Actions.ActionArgs memory)\r\n    {\r\n        return\r\n            Actions.ActionArgs({\r\n                actionType: Actions.ActionType.Call,\r\n                accountId: 0,\r\n                amount: Types.AssetAmount({\r\n                    sign: false,\r\n                    denomination: Types.AssetDenomination.Wei,\r\n                    ref: Types.AssetReference.Delta,\r\n                    value: 0\r\n                }),\r\n                primaryMarketId: 0,\r\n                secondaryMarketId: 0,\r\n                otherAddress: contractAddr,\r\n                otherAccountId: 0,\r\n                data: data\r\n            });\r\n    }\r\n\r\n    function _getDepositAction(uint marketId, uint256 amount, address contractAddr)\r\n        internal\r\n        view\r\n        returns (Actions.ActionArgs memory)\r\n    {\r\n        return\r\n            Actions.ActionArgs({\r\n                actionType: Actions.ActionType.Deposit,\r\n                accountId: 0,\r\n                amount: Types.AssetAmount({\r\n                    sign: true,\r\n                    denomination: Types.AssetDenomination.Wei,\r\n                    ref: Types.AssetReference.Delta,\r\n                    value: amount\r\n                }),\r\n                primaryMarketId: marketId,\r\n                secondaryMarketId: 0,\r\n                otherAddress: contractAddr,\r\n                otherAccountId: 0,\r\n                data: \"\"\r\n            });\r\n    }\r\n}   contract DefisaverLogger {\r\n    event LogEvent(\r\n        address indexed contractAddress,\r\n        address indexed caller,\r\n        string indexed logName,\r\n        bytes data\r\n    );\r\n\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function Log(address _contract, address _caller, string memory _logName, bytes memory _data)\r\n        public\r\n    {\r\n        emit LogEvent(_contract, _caller, _logName, _data);\r\n    }\r\n}   abstract contract DSProxyInterface {\r\n\r\n    /// Truffle wont compile if this isn't commented\r\n    // function execute(bytes memory _code, bytes memory _data)\r\n    //     public virtual\r\n    //     payable\r\n    //     returns (address, bytes32);\r\n\r\n    function execute(address _target, bytes memory _data) public virtual payable returns (bytes32);\r\n\r\n    function setCache(address _cacheAddr) public virtual payable returns (bool);\r\n\r\n    function owner() public virtual returns (address);\r\n}   abstract contract ProxyRegistryInterface {\r\n    function proxies(address _owner) public virtual view returns (address);\r\n    function build(address) public virtual returns (address);\r\n}   abstract contract TokenInterface {\r\n\taddress public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    \r\n    function allowance(address, address) public virtual returns (uint256);\r\n\r\n    function balanceOf(address) public virtual returns (uint256);\r\n\r\n    function approve(address, uint256) public virtual;\r\n\r\n    function transfer(address, uint256) public virtual returns (bool);\r\n\r\n    function transferFrom(address, address, uint256) public virtual returns (bool);\r\n\r\n    function deposit() public virtual payable;\r\n\r\n    function withdraw(uint256) public virtual;\r\n}    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Import Aave position from account to wallet\r\n/// @dev Contract needs to have enough wei in WETH for all transactions (2 WETH wei per transaction)\r\ncontract AaveImportTakerV2 is DydxFlashLoanBase, ProxyPermission {\r\n\r\n    address public constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    address payable public constant AAVE_IMPORT = 0xBF827d72076198c70eD825bb1884f839F90288b7;\r\n    address public constant DEFISAVER_LOGGER = 0x5c55B921f590a89C1Ebe84dF170E655a82b62126;\r\n    address public constant PROXY_REGISTRY_ADDRESS = 0x4678f0a6958e4D2Bc4F1BAF7Bc52E8F3564f3fE4;\r\n\r\n    /// @notice Starts the process to move users position 1 collateral and 1 borrow\r\n    /// @dev User must send 2 wei with this transaction\r\n    /// @dev User must approve DSProxy to pull _aCollateralToken\r\n    /// @param _market Market in which we want to import\r\n    /// @param _collateralToken Collateral token we are moving to DSProxy\r\n    /// @param _borrowToken Borrow token we are moving to DSProxy\r\n    /// @param _ethAmount ETH amount that needs to be pulled from dydx\r\n    function importLoan(address _market, address _collateralToken, address _borrowToken, uint _ethAmount) public {\r\n        ISoloMargin solo = ISoloMargin(SOLO_MARGIN_ADDRESS);\r\n\r\n        // Get marketId from token address\r\n        uint256 marketId = _getMarketIdFromTokenAddress(WETH_ADDR);\r\n\r\n        // Calculate repay amount (_amount + (2 wei))\r\n        // Approve transfer from\r\n        uint256 repayAmount = _getRepaymentAmountInternal(_ethAmount);\r\n        ERC20(WETH_ADDR).approve(SOLO_MARGIN_ADDRESS, repayAmount);\r\n\r\n        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\r\n\r\n        operations[0] = _getWithdrawAction(marketId, _ethAmount, AAVE_IMPORT);\r\n        operations[1] = _getCallAction(\r\n            abi.encode(_market, _collateralToken, _borrowToken, _ethAmount, address(this)),\r\n            AAVE_IMPORT\r\n        );\r\n        operations[2] = _getDepositAction(marketId, repayAmount, address(this));\r\n\r\n        Account.Info[] memory accountInfos = new Account.Info[](1);\r\n        accountInfos[0] = _getAccountInfo();\r\n\r\n        givePermission(AAVE_IMPORT);\r\n        solo.operate(accountInfos, operations);\r\n        removePermission(AAVE_IMPORT);\r\n\r\n        DefisaverLogger(DEFISAVER_LOGGER).Log(address(this), msg.sender, \"AaveImport\", abi.encode(_collateralToken, _borrowToken));\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"AAVE_IMPORT\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFISAVER_LOGGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FACTORY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_REGISTRY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOLO_MARGIN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddr\",\"type\":\"address\"}],\"name\":\"givePermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrowToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"name\":\"importLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddr\",\"type\":\"address\"}],\"name\":\"removePermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AaveImportTakerV2","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8e0b8a9d476759f4eb1f892639acfb1528676f49e762e9fdbd958da2230acd51"}]}