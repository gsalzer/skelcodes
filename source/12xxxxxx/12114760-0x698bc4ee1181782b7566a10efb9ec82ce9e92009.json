{"status":"1","message":"OK","result":[{"SourceCode":"pragma experimental ABIEncoderV2;\r\npragma solidity 0.6.4;\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\nlibrary EthAddressLib {\r\n    /**\r\n     * @dev returns the address used within the protocol to identify ETH\r\n     * @return the address assigned to ETH\r\n     */\r\n    function ethAddress() internal pure returns (address) {\r\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\ninterface IOracleProxy {\r\n    function get(address token) external view returns (uint256, bool);\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\ninterface IPriceOracles {\r\n    function get(address token) external view returns (uint256, bool);\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a <= b ? a : b;\r\n    }\r\n\r\n    function abs(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a < b) {\r\n            return b - a;\r\n        }\r\n        return a - b;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n            data\r\n        );\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(\r\n            value\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeERC20: decreased allowance below zero\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeERC20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SignedSafeMath {\r\n  int256 constant private _INT256_MIN = -2**255;\r\n\r\n  /**\r\n   * @dev Multiplies two signed integers, reverts on overflow.\r\n   */\r\n  function mul(int256 a, int256 b) internal pure returns (int256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    require(!(a == -1 && b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\r\n\r\n    int256 c = a * b;\r\n    require(c / a == b, \"SignedSafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\r\n   */\r\n  function div(int256 a, int256 b) internal pure returns (int256) {\r\n    require(b != 0, \"SignedSafeMath: division by zero\");\r\n    require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\r\n\r\n    int256 c = a / b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Subtracts two signed integers, reverts on overflow.\r\n   */\r\n  function sub(int256 a, int256 b) internal pure returns (int256) {\r\n    int256 c = a - b;\r\n    require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds two signed integers, reverts on overflow.\r\n   */\r\n  function add(int256 a, int256 b) internal pure returns (int256) {\r\n    int256 c = a + b;\r\n    require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @notice Computes average of two signed integers, ensuring that the computation\r\n   * doesn't overflow.\r\n   * @dev If the result is not an integer, it is rounded towards zero. For example,\r\n   * avg(-3, -4) = -3\r\n   */\r\n  function avg(int256 _a, int256 _b)\r\n    internal\r\n    pure\r\n    returns (int256)\r\n  {\r\n    if ((_a < 0 && _b > 0) || (_a > 0 && _b < 0)) {\r\n      return add(_a, _b) / 2;\r\n    }\r\n    int256 remainder = (_a % 2 + _b % 2) / 2;\r\n    return add(add(_a / 2, _b / 2), remainder);\r\n  }\r\n}\r\n\r\nlibrary Median {\r\n  using SignedSafeMath for int256;\r\n\r\n  int256 constant INT_MAX = 2**255-1;\r\n\r\n  /**\r\n   * @notice Returns the sorted middle, or the average of the two middle indexed items if the\r\n   * array has an even number of elements.\r\n   * @dev The list passed as an argument isn't modified.\r\n   * @dev This algorithm has expected runtime O(n), but for adversarially chosen inputs\r\n   * the runtime is O(n^2).\r\n   * @param list The list of elements to compare\r\n   */\r\n  function calculate(int256[] memory list)\r\n    internal\r\n    pure\r\n    returns (int256)\r\n  {\r\n    return calculateInplace(copy(list));\r\n  }\r\n\r\n  /**\r\n   * @notice See documentation for function calculate.\r\n   * @dev The list passed as an argument may be permuted.\r\n   */\r\n  function calculateInplace(int256[] memory list)\r\n    internal\r\n    pure\r\n    returns (int256)\r\n  {\r\n    require(0 < list.length, \"list must not be empty\");\r\n    uint256 len = list.length;\r\n    uint256 middleIndex = len / 2;\r\n    if (len % 2 == 0) {\r\n      int256 median1;\r\n      int256 median2;\r\n      (median1, median2) = quickselectTwo(list, 0, len - 1, middleIndex - 1, middleIndex);\r\n      return SignedSafeMath.avg(median1, median2);\r\n    } else {\r\n      return quickselect(list, 0, len - 1, middleIndex);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Maximum length of list that shortSelectTwo can handle\r\n   */\r\n  uint256 constant SHORTSELECTTWO_MAX_LENGTH = 7;\r\n\r\n  /**\r\n   * @notice Select the k1-th and k2-th element from list of length at most 7\r\n   * @dev Uses an optimal sorting network\r\n   */\r\n  function shortSelectTwo(\r\n    int256[] memory list,\r\n    uint256 lo,\r\n    uint256 hi,\r\n    uint256 k1,\r\n    uint256 k2\r\n  )\r\n    private\r\n    pure\r\n    returns (int256 k1th, int256 k2th)\r\n  {\r\n    // Uses an optimal sorting network (https://en.wikipedia.org/wiki/Sorting_network)\r\n    // for lists of length 7. Network layout is taken from\r\n    // http://jgamble.ripco.net/cgi-bin/nw.cgi?inputs=7&algorithm=hibbard&output=svg\r\n\r\n    uint256 len = hi + 1 - lo;\r\n    int256 x0 = list[lo + 0];\r\n    int256 x1 = 1 < len ? list[lo + 1] : INT_MAX;\r\n    int256 x2 = 2 < len ? list[lo + 2] : INT_MAX;\r\n    int256 x3 = 3 < len ? list[lo + 3] : INT_MAX;\r\n    int256 x4 = 4 < len ? list[lo + 4] : INT_MAX;\r\n    int256 x5 = 5 < len ? list[lo + 5] : INT_MAX;\r\n    int256 x6 = 6 < len ? list[lo + 6] : INT_MAX;\r\n\r\n    if (x0 > x1) {(x0, x1) = (x1, x0);}\r\n    if (x2 > x3) {(x2, x3) = (x3, x2);}\r\n    if (x4 > x5) {(x4, x5) = (x5, x4);}\r\n    if (x0 > x2) {(x0, x2) = (x2, x0);}\r\n    if (x1 > x3) {(x1, x3) = (x3, x1);}\r\n    if (x4 > x6) {(x4, x6) = (x6, x4);}\r\n    if (x1 > x2) {(x1, x2) = (x2, x1);}\r\n    if (x5 > x6) {(x5, x6) = (x6, x5);}\r\n    if (x0 > x4) {(x0, x4) = (x4, x0);}\r\n    if (x1 > x5) {(x1, x5) = (x5, x1);}\r\n    if (x2 > x6) {(x2, x6) = (x6, x2);}\r\n    if (x1 > x4) {(x1, x4) = (x4, x1);}\r\n    if (x3 > x6) {(x3, x6) = (x6, x3);}\r\n    if (x2 > x4) {(x2, x4) = (x4, x2);}\r\n    if (x3 > x5) {(x3, x5) = (x5, x3);}\r\n    if (x3 > x4) {(x3, x4) = (x4, x3);}\r\n\r\n    uint256 index1 = k1 - lo;\r\n    if (index1 == 0) {k1th = x0;}\r\n    else if (index1 == 1) {k1th = x1;}\r\n    else if (index1 == 2) {k1th = x2;}\r\n    else if (index1 == 3) {k1th = x3;}\r\n    else if (index1 == 4) {k1th = x4;}\r\n    else if (index1 == 5) {k1th = x5;}\r\n    else if (index1 == 6) {k1th = x6;}\r\n    else {revert(\"k1 out of bounds\");}\r\n\r\n    uint256 index2 = k2 - lo;\r\n    if (k1 == k2) {return (k1th, k1th);}\r\n    else if (index2 == 0) {return (k1th, x0);}\r\n    else if (index2 == 1) {return (k1th, x1);}\r\n    else if (index2 == 2) {return (k1th, x2);}\r\n    else if (index2 == 3) {return (k1th, x3);}\r\n    else if (index2 == 4) {return (k1th, x4);}\r\n    else if (index2 == 5) {return (k1th, x5);}\r\n    else if (index2 == 6) {return (k1th, x6);}\r\n    else {revert(\"k2 out of bounds\");}\r\n  }\r\n\r\n  /**\r\n   * @notice Selects the k-th ranked element from list, looking only at indices between lo and hi\r\n   * (inclusive). Modifies list in-place.\r\n   */\r\n  function quickselect(int256[] memory list, uint256 lo, uint256 hi, uint256 k)\r\n    private\r\n    pure\r\n    returns (int256 kth)\r\n  {\r\n    require(lo <= k);\r\n    require(k <= hi);\r\n    while (lo < hi) {\r\n      if (hi - lo < SHORTSELECTTWO_MAX_LENGTH) {\r\n        int256 ignore;\r\n        (kth, ignore) = shortSelectTwo(list, lo, hi, k, k);\r\n        return kth;\r\n      }\r\n      uint256 pivotIndex = partition(list, lo, hi);\r\n      if (k <= pivotIndex) {\r\n        // since pivotIndex < (original hi passed to partition),\r\n        // termination is guaranteed in this case\r\n        hi = pivotIndex;\r\n      } else {\r\n        // since (original lo passed to partition) <= pivotIndex,\r\n        // termination is guaranteed in this case\r\n        lo = pivotIndex + 1;\r\n      }\r\n    }\r\n    return list[lo];\r\n  }\r\n\r\n  /**\r\n   * @notice Selects the k1-th and k2-th ranked elements from list, looking only at indices between\r\n   * lo and hi (inclusive). Modifies list in-place.\r\n   */\r\n  function quickselectTwo(\r\n    int256[] memory list,\r\n    uint256 lo,\r\n    uint256 hi,\r\n    uint256 k1,\r\n    uint256 k2\r\n  )\r\n    internal // for testing\r\n    pure\r\n    returns (int256 k1th, int256 k2th)\r\n  {\r\n    require(k1 < k2);\r\n    require(lo <= k1 && k1 <= hi);\r\n    require(lo <= k2 && k2 <= hi);\r\n\r\n    while (true) {\r\n      if (hi - lo < SHORTSELECTTWO_MAX_LENGTH) {\r\n        return shortSelectTwo(list, lo, hi, k1, k2);\r\n      }\r\n      uint256 pivotIdx = partition(list, lo, hi);\r\n      if (k2 <= pivotIdx) {\r\n        hi = pivotIdx;\r\n      } else if (pivotIdx < k1) {\r\n        lo = pivotIdx + 1;\r\n      } else {\r\n        assert(k1 <= pivotIdx && pivotIdx < k2);\r\n        k1th = quickselect(list, lo, pivotIdx, k1);\r\n        k2th = quickselect(list, pivotIdx + 1, hi, k2);\r\n        return (k1th, k2th);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Partitions list in-place using Hoare's partitioning scheme.\r\n   * Only elements of list between indices lo and hi (inclusive) will be modified.\r\n   * Returns an index i, such that:\r\n   * - lo <= i < hi\r\n   * - forall j in [lo, i]. list[j] <= list[i]\r\n   * - forall j in [i, hi]. list[i] <= list[j]\r\n   */\r\n  function partition(int256[] memory list, uint256 lo, uint256 hi)\r\n    private\r\n    pure\r\n    returns (uint256)\r\n  {\r\n    // We don't care about overflow of the addition, because it would require a list\r\n    // larger than any feasible computer's memory.\r\n    int256 pivot = list[(lo + hi) / 2];\r\n    lo -= 1; // this can underflow. that's intentional.\r\n    hi += 1;\r\n    while (true) {\r\n      do {\r\n        lo += 1;\r\n      } while (list[lo] < pivot);\r\n      do {\r\n        hi -= 1;\r\n      } while (list[hi] > pivot);\r\n      if (lo < hi) {\r\n        (list[lo], list[hi]) = (list[hi], list[lo]);\r\n      } else {\r\n        // Let orig_lo and orig_hi be the original values of lo and hi passed to partition.\r\n        // Then, hi < orig_hi, because hi decreases *strictly* monotonically\r\n        // in each loop iteration and\r\n        // - either list[orig_hi] > pivot, in which case the first loop iteration\r\n        //   will achieve hi < orig_hi;\r\n        // - or list[orig_hi] <= pivot, in which case at least two loop iterations are\r\n        //   needed:\r\n        //   - lo will have to stop at least once in the interval\r\n        //     [orig_lo, (orig_lo + orig_hi)/2]\r\n        //   - (orig_lo + orig_hi)/2 < orig_hi\r\n        return hi;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Makes an in-memory copy of the array passed in\r\n   * @param list Reference to the array to be copied\r\n   */\r\n  function copy(int256[] memory list)\r\n    private\r\n    pure\r\n    returns(int256[] memory)\r\n  {\r\n    int256[] memory list2 = new int256[](list.length);\r\n    for (uint256 i = 0; i < list.length; i++) {\r\n      list2[i] = list[i];\r\n    }\r\n    return list2;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2020-06-04\r\n*/\r\ncontract ForTubeOracle is Initializable, IPriceOracles {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n\r\n    event Enable(address feeder);\r\n    event Disable(address feeder);\r\n\r\n    event Enables(address[] feeder);\r\n    event Disables(address[] feeder);\r\n\r\n    event EnableToken(address token);\r\n    event DisableToken(address token);\r\n\r\n    event EnableTokens(address[] ts);\r\n    event DisableTokens(address[] ts);\r\n\r\n    event Set(address who, address token, uint val, uint exp);\r\n    event BatchSet(address[] tokens, uint[] vals, uint exp);\r\n\r\n    address public multiSig;\r\n    address public admin;\r\n\r\n    //所有喂价地址列表，每个节点一个喂价地址，下架节点时，需要删除下架节点的数据。\r\n    EnumerableSet.AddressSet private _tokens;// 支持的币种列表\r\n\r\n    // to save gas\r\n    struct Price {\r\n        uint192 price;\r\n        uint64 expiration;\r\n    }\r\n    mapping (address => Price) public finalPrices;//最终结果\r\n\r\n    //使用新的address作为Key\r\n    EnumerableSet.AddressSet private _feeders;// 支持的喂价者列表\r\n    mapping (address => mapping (address => Price)) public _prices;\r\n\r\n    function initialize(address _multiSig, address[] memory _initFeeders)\r\n        public\r\n        initializer\r\n    {\r\n        multiSig = _multiSig;\r\n        admin = msg.sender;\r\n\r\n        require(_initFeeders.length >= 1, \"invalid length\");\r\n        for (uint256 i = 0; i < _initFeeders.length; i++) {\r\n            _feeders.add(_initFeeders[i]);\r\n        }\r\n    }\r\n\r\n    // constructor(address _multiSig, address[] memory _initFeeders) public\r\n    // {\r\n    //     multiSig = _multiSig;\r\n    //     admin = msg.sender;\r\n\r\n    //     require(_initFeeders.length >= 1, \"invalid length\");\r\n    //     for (uint256 i = 0; i < _initFeeders.length; i++) {\r\n    //         _feeders.add(_initFeeders[i]);\r\n    //     }\r\n    // }\r\n\r\n    // 每个节点都能访问该喂价合约，但只能喂价属于本节点的数据\r\n    modifier auth {\r\n        require(_feeders.contains(msg.sender), \"unauthorized feeder\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyMultiSig {\r\n        require(msg.sender == multiSig, \"require multiSig\");\r\n        _;\r\n    }\r\n\r\n    function setMultiSig(address _multiSig) external onlyMultiSig {\r\n        multiSig = _multiSig;\r\n    }\r\n\r\n    modifier onlyAdmin {\r\n        require(msg.sender == admin, \"require admin\");\r\n        _;\r\n    }\r\n\r\n    function setAdmin(address _admin) external onlyMultiSig {\r\n        admin = _admin;\r\n    }\r\n\r\n    function enable(address feeder) public onlyMultiSig {\r\n        require(!_feeders.contains(feeder), \"duplicated feeder\");\r\n        _feeders.add(feeder);\r\n        emit Enable(feeder);\r\n    }\r\n\r\n    function disable(address feeder) public onlyMultiSig {\r\n        require(_feeders.contains(feeder), \"not exist\");\r\n        _feeders.remove(feeder);\r\n\r\n        for (uint i = 0; i < _tokens.length(); i++) {\r\n            delete _prices[feeder][_tokens.at(i)];\r\n        }\r\n        emit Disable(feeder);\r\n    }\r\n\r\n    function enables(address[] calldata feeders) external onlyMultiSig {\r\n        for (uint256 i = 0; i < feeders.length; i++) {\r\n            enable(feeders[i]);\r\n        }\r\n        emit Enables(feeders);\r\n    }\r\n\r\n    function disables(address[] calldata feeders) external onlyMultiSig {\r\n        for (uint256 i = 0; i < feeders.length; i++) {\r\n            disable(feeders[i]);\r\n        }\r\n        emit Disables(feeders);\r\n    }\r\n\r\n    function enableToken(address token) public onlyAdmin {\r\n        require(_tokens.add(token), \"Duplicate token\");\r\n        emit EnableToken(token);\r\n    }\r\n\r\n    function disableToken(address token) public onlyAdmin {\r\n        require(_tokens.remove(token), \"nonexist token\");\r\n        //TODO: delete feeder's history price data\r\n        emit DisableToken(token);\r\n    }\r\n\r\n    function enableTokens(address[] calldata tokens) external onlyAdmin {\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            enableToken(tokens[i]);\r\n        }\r\n        emit EnableTokens(tokens);\r\n    }\r\n\r\n    function disableTokens(address[] calldata tokens) external onlyAdmin {\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            disableToken(tokens[i]);\r\n        }\r\n        emit DisableTokens(tokens);\r\n    }\r\n\r\n    function tokens() public view returns (address[] memory) {\r\n        address[] memory values = new address[](_tokens.length());\r\n        for (uint256 i = 0; i < _tokens.length(); ++i) {\r\n            values[i] = _tokens.at(i);\r\n        }\r\n        return values;\r\n    }\r\n\r\n    // 设置价格为 @val, 保持有效时间为 @exp second.\r\n    function set(address token, uint val, uint exp) public auth {\r\n        require(_feeders.contains(msg.sender), \"unauth feeder\");\r\n\r\n        _prices[msg.sender][token].price = uint192(val);\r\n        _prices[msg.sender][token].expiration = uint64(now + exp);\r\n\r\n        int256[] memory priceList = new int256[](_feeders.length());\r\n        uint256 j = 0;\r\n        for (uint256 i = 0; i < _feeders.length(); i++) {\r\n            address who = _feeders.at(i);\r\n            if (_prices[who][token].price != 0 && now < _prices[who][token].expiration) {\r\n                priceList[j++] = int256(_prices[who][token].price);\r\n            }\r\n        }\r\n\r\n        int256[] memory priceFilter = new int256[](j);\r\n        for (uint256 i = 0; i < j; i++) {\r\n            priceFilter[i] = priceList[i];\r\n        }\r\n\r\n        finalPrices[token].price = uint192(Median.calculateInplace(priceFilter));\r\n        finalPrices[token].expiration = uint64(now + exp);\r\n\r\n        emit Set(msg.sender, token, val, exp);\r\n    }\r\n\r\n    //批量设置，减少gas使用\r\n    function batchSet(address[] calldata tokens, uint[] calldata vals, uint exp) external auth {\r\n        uint nToken = tokens.length;\r\n        require(nToken == vals.length, \"invalid array length\");\r\n\r\n        for (uint i = 0; i < nToken; ++i) {\r\n            set(tokens[i], vals[i], now + exp);\r\n        }\r\n\r\n        emit BatchSet(tokens, vals, exp);\r\n    }\r\n\r\n    function getExpiration(address token) external view returns (uint) {\r\n        return finalPrices[token].expiration;\r\n    }\r\n\r\n    function getPrice(address token) external view returns (uint) {\r\n        return finalPrices[token].price;\r\n    }\r\n\r\n    function get(address token) external override view returns (uint, bool) {\r\n        return (finalPrices[token].price, valid(token));\r\n    }\r\n\r\n    function valid(address token) public view returns (bool) {\r\n        return now < finalPrices[token].expiration;\r\n    }\r\n\r\n    function getLastPriceByFeeder(address feeder, address token) public view returns (uint price, uint expiration) {\r\n        return (_prices[feeder][token].price, _prices[feeder][token].expiration);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"vals\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exp\",\"type\":\"uint256\"}],\"name\":\"BatchSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeder\",\"type\":\"address\"}],\"name\":\"Disable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"DisableToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"ts\",\"type\":\"address[]\"}],\"name\":\"DisableTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"feeder\",\"type\":\"address[]\"}],\"name\":\"Disables\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeder\",\"type\":\"address\"}],\"name\":\"Enable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"EnableToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"ts\",\"type\":\"address[]\"}],\"name\":\"EnableTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"feeder\",\"type\":\"address[]\"}],\"name\":\"Enables\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exp\",\"type\":\"uint256\"}],\"name\":\"Set\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_prices\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"price\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"vals\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"exp\",\"type\":\"uint256\"}],\"name\":\"batchSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeder\",\"type\":\"address\"}],\"name\":\"disable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"disableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"disableTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"feeders\",\"type\":\"address[]\"}],\"name\":\"disables\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeder\",\"type\":\"address\"}],\"name\":\"enable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"enableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"enableTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"feeders\",\"type\":\"address[]\"}],\"name\":\"enables\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"finalPrices\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"price\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getExpiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getLastPriceByFeeder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_multiSig\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_initFeeders\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiSig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exp\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_multiSig\",\"type\":\"address\"}],\"name\":\"setMultiSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"valid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ForTubeOracle","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://68ac4d3d8ffbc4c582939d4ce85d90f4286b1b9d890c85f701d5af6977c84965"}]}