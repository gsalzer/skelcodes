{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.8.6;\r\n\r\ncontract AddressesProvider {\r\n    struct AddressMetadata {\r\n        address addr;\r\n        string addressId;\r\n        string addressTypeId;\r\n        uint256 version;\r\n        uint256 lastModified;\r\n    }\r\n    \r\n    struct AddressMetadataParams {\r\n        address addr;\r\n        string addressId;\r\n        string addressTypeId;\r\n    }\r\n    \r\n    address public ownerAddress;\r\n    mapping(uint256 => AddressMetadata) public addressMetadataById;\r\n    mapping(string => bool) internal addressIdExists;\r\n    mapping(string => uint256) public addressIdPosition;\r\n    mapping(string => bool) internal addressTypeIdExists;\r\n    uint256 addressesMetadataLength;\r\n\r\n    constructor() {\r\n        ownerAddress = msg.sender;\r\n    }\r\n    \r\n    function setAddressMetadata(AddressMetadataParams memory addressMetadataParams) public {\r\n        require(msg.sender == ownerAddress, \"Caller is not owner\");\r\n        address addr = addressMetadataParams.addr;\r\n        string memory addressId = addressMetadataParams.addressId;\r\n        string memory addressTypeId = addressMetadataParams.addressTypeId;\r\n\r\n        uint256 upsertPosition = addressesMetadataLength;\r\n        uint256 version = 1;\r\n        if (addressIdExists[addressId]) {\r\n            upsertPosition = addressIdPosition[addressId];\r\n            version = addressMetadataById[upsertPosition].version + 1;\r\n        } else {\r\n            addressIdExists[addressId] = true;\r\n            addressIdPosition[addressId] = addressesMetadataLength;\r\n            addressesMetadataLength++;\r\n        }\r\n        addressMetadataById[upsertPosition] = AddressMetadata({\r\n           addr: addr,\r\n           addressId: addressId,\r\n           addressTypeId: addressTypeId,\r\n           version: version,\r\n           lastModified: block.timestamp\r\n        });\r\n        addressTypeIdExists[addressTypeId] = true;\r\n        if (addressIdExists[addressId] == false) {\r\n            addressesMetadataLength++;\r\n        }\r\n    }\r\n    \r\n    function setAddressesMetadata(AddressMetadataParams[] memory addressesMetadataParams) external {\r\n        require(msg.sender == ownerAddress, \"Caller is not owner\");\r\n        for (uint256 addressMetadataParamsIdx; addressMetadataParamsIdx < addressesMetadataParams.length; addressMetadataParamsIdx++) {\r\n            AddressMetadataParams memory addressMetadataParams = addressesMetadataParams[addressMetadataParamsIdx];\r\n            setAddressMetadata(addressMetadataParams);\r\n        }\r\n    }\r\n    \r\n    function addressesMetadata() external view returns (AddressMetadata[] memory) {\r\n        AddressMetadata[] memory _addressesMetadata = new AddressMetadata[](addressesMetadataLength);\r\n        for (uint256 addressMetadataIdx; addressMetadataIdx < addressesMetadataLength; addressMetadataIdx++) {\r\n            AddressMetadata memory addressMetadata = addressMetadataById[addressMetadataIdx];\r\n            _addressesMetadata[addressMetadataIdx] = addressMetadata;\r\n        }\r\n        return _addressesMetadata;\r\n    }\r\n    \r\n    function addressMetadataByName(string memory addressId) external view returns (AddressMetadata memory) {\r\n        for (uint256 addressMetadataIdx; addressMetadataIdx < addressesMetadataLength; addressMetadataIdx++) {\r\n            AddressMetadata memory addressMetadata = addressMetadataById[addressMetadataIdx];\r\n            if (stringsEqual(addressId, addressMetadata.addressId)) {\r\n                return addressMetadata;\r\n            }\r\n        }\r\n        return AddressMetadata({\r\n            addr: address(0),\r\n            addressId: \"\",\r\n            addressTypeId: \"\",\r\n            version: 0,\r\n            lastModified: 0\r\n        });\r\n    }\r\n\r\n    \r\n    function addresses() external view returns (address[] memory) {\r\n        address[] memory _addresses = new address[](addressesMetadataLength);\r\n        for (uint256 addressMetadataIdx; addressMetadataIdx < addressesMetadataLength; addressMetadataIdx++) {\r\n            AddressMetadata memory addressMetadata = addressMetadataById[addressMetadataIdx];\r\n            _addresses[addressMetadataIdx] = addressMetadata.addr;\r\n        }\r\n        return _addresses;\r\n    }\r\n    \r\n    function addressById(string memory addressId) external view returns (address) {\r\n        for (uint256 addressMetadataIdx; addressMetadataIdx < addressesMetadataLength; addressMetadataIdx++) {\r\n            AddressMetadata memory addressMetadata = addressMetadataById[addressMetadataIdx];\r\n            if (stringsEqual(addressId, addressMetadata.addressId)) {\r\n                return addressMetadata.addr;\r\n            }\r\n        }\r\n        return address(0);\r\n    }\r\n    \r\n    function addressesIds() external view returns (string[] memory) {\r\n        string[] memory _addressesIds = new string[](addressesMetadataLength);\r\n        for (uint256 addressMetadataIdx; addressMetadataIdx < addressesMetadataLength; addressMetadataIdx++) {\r\n            AddressMetadata memory addressMetadata = addressMetadataById[addressMetadataIdx];\r\n            _addressesIds[addressMetadataIdx] = addressMetadata.addressId;\r\n        }\r\n        return _addressesIds;\r\n    }\r\n    \r\n    function addressesTypeIds() external view returns (string[] memory) {\r\n        string[] memory _addressTypeIds = new string[](addressesMetadataLength);\r\n        uint256 addressTypeIdsLength;\r\n        for (uint256 addressMetadataIdx; addressMetadataIdx < addressesMetadataLength; addressMetadataIdx++) {\r\n            AddressMetadata memory addressMetadata = addressMetadataById[addressMetadataIdx];\r\n            string memory addressTypeId = addressMetadata.addressTypeId;\r\n            // TODO: Implement using bloom filter instead..\r\n            bool addressTypeIdFound;\r\n            for (uint256 addressTypeIdIdx; addressTypeIdIdx < addressTypeIdsLength; addressTypeIdIdx++) {\r\n                string memory currentAddressTypeId = _addressTypeIds[addressTypeIdIdx];\r\n                if (stringsEqual(addressTypeId, currentAddressTypeId)) {\r\n                    addressTypeIdFound = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!addressTypeIdFound) {\r\n                _addressTypeIds[addressTypeIdsLength] = addressTypeId;\r\n                addressTypeIdsLength++;\r\n            }\r\n        }\r\n        bytes memory encodedTypeIds = abi.encode(_addressTypeIds);\r\n        assembly {\r\n            mstore(add(encodedTypeIds, 0x40), addressTypeIdsLength)\r\n        }\r\n        string[] memory filteredTypeIds =\r\n            abi.decode(encodedTypeIds, (string[]));\r\n        \r\n        return filteredTypeIds;\r\n    }\r\n\r\n    /**\r\n     * Check to see if two strings are exactly equal\r\n     * @dev Only valid for strings up to 32 characters\r\n     */    \r\n    function stringsEqual(string memory input1, string memory input2) internal pure returns (bool) {\r\n        bytes32 input1Bytes32;\r\n        bytes32 input2Bytes32;\r\n        assembly {\r\n            input1Bytes32 := mload(add(input1, 32))\r\n            input2Bytes32 := mload(add(input2, 32))\r\n        }\r\n        return input1Bytes32 == input2Bytes32;\r\n    }\r\n\r\n    /**\r\n     * Allow storage slots to be manually updated\r\n     */\r\n    function updateSlot(bytes32 slot, bytes32 value) external {\r\n        require(msg.sender == ownerAddress);\r\n        assembly {\r\n            sstore(slot, value)\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"addressId\",\"type\":\"string\"}],\"name\":\"addressById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"addressIdPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressMetadataById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"addressId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"addressTypeId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastModified\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"addressId\",\"type\":\"string\"}],\"name\":\"addressMetadataByName\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"addressId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"addressTypeId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastModified\",\"type\":\"uint256\"}],\"internalType\":\"struct AddressesProvider.AddressMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressesIds\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressesMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"addressId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"addressTypeId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastModified\",\"type\":\"uint256\"}],\"internalType\":\"struct AddressesProvider.AddressMetadata[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressesTypeIds\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"addressId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"addressTypeId\",\"type\":\"string\"}],\"internalType\":\"struct AddressesProvider.AddressMetadataParams\",\"name\":\"addressMetadataParams\",\"type\":\"tuple\"}],\"name\":\"setAddressMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"addressId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"addressTypeId\",\"type\":\"string\"}],\"internalType\":\"struct AddressesProvider.AddressMetadataParams[]\",\"name\":\"addressesMetadataParams\",\"type\":\"tuple[]\"}],\"name\":\"setAddressesMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"updateSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AddressesProvider","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ab7b7ed3328e0904c0ccc02e6a69a9f4bb74eac0f5479a4d9e40f9a31e4177d5"}]}