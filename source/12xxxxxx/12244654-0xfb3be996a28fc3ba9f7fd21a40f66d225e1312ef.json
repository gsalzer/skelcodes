{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.1.1 https://hardhat.org\r\n\r\n// File contracts/libraries/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/governance/HordCongressMembersRegistry.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\n/**\r\n * HordCongressMembersRegistry contract.\r\n * @author Nikola Madjarevic\r\n * Date created: 21.3.21.\r\n * Github: madjarevicn\r\n */\r\ncontract HordCongressMembersRegistry {\r\n\r\n    using SafeMath for *;\r\n\r\n    /// @notice The name of this contract\r\n    string public constant name = \"HordCongressMembersRegistry\";\r\n\r\n    /// @notice Event to fire every time someone is added or removed from members\r\n    event MembershipChanged(address member, bool isMember);\r\n\r\n    /// @notice Hord congress pointer\r\n    address public hordCongress;\r\n\r\n    //The minimum number of voting members that must be in attendance\r\n    uint256 minimalQuorum;\r\n\r\n    // Mapping to check if the member is belonging to congress\r\n    mapping (address => bool) isMemberInCongress;\r\n\r\n    // Mapping address to member info\r\n    mapping(address => Member) public address2Member;\r\n\r\n    // Mapping to store all members addresses\r\n    address[] public allMembers;\r\n\r\n\r\n    struct Member {\r\n        bytes32 name;\r\n        uint memberSince;\r\n    }\r\n\r\n    modifier onlyHordCongress {\r\n        require(msg.sender == hordCongress);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @param initialCongressMembers is the array containing addresses of initial members\r\n     */\r\n    constructor(\r\n        address[] memory initialCongressMembers,\r\n        bytes32[] memory initialCongressMemberNames,\r\n        address _hordCongress\r\n    )\r\n    public\r\n    {\r\n        uint length = initialCongressMembers.length;\r\n\r\n        for(uint i=0; i<length; i++) {\r\n            addMemberInternal(\r\n                initialCongressMembers[i],\r\n                initialCongressMemberNames[i]\r\n            );\r\n        }\r\n\r\n        hordCongress = _hordCongress;\r\n    }\r\n\r\n\r\n    function changeMinimumQuorum(\r\n        uint newMinimumQuorum\r\n    )\r\n    external\r\n    onlyHordCongress\r\n    {\r\n        require(newMinimumQuorum > 0);\r\n        minimalQuorum = newMinimumQuorum;\r\n    }\r\n\r\n    /**\r\n     * Add member\r\n     *\r\n     * Make `targetMember` a member named `memberName`\r\n     *\r\n     * @param targetMember ethereum address to be added\r\n     * @param memberName public name for that member\r\n     */\r\n    function addMember(\r\n        address targetMember,\r\n        bytes32 memberName\r\n    )\r\n    external\r\n    onlyHordCongress\r\n    {\r\n        addMemberInternal(targetMember, memberName);\r\n    }\r\n\r\n\r\n    function addMemberInternal(\r\n        address targetMember,\r\n        bytes32 memberName\r\n    )\r\n    internal\r\n    {\r\n        //Require that this member is not already a member of congress\r\n        require(isMemberInCongress[targetMember] == false);\r\n        // Update basic member information\r\n        address2Member[targetMember] = Member({\r\n            memberSince: block.timestamp,\r\n            name: memberName\r\n        });\r\n        // Add member to list of all members\r\n        allMembers.push(targetMember);\r\n        // Update minimum quorum\r\n        minimalQuorum = allMembers.length.sub(1);\r\n        // Mark that user is member in congress\r\n        isMemberInCongress[targetMember] = true;\r\n        // Fire an event\r\n        emit MembershipChanged(targetMember, true);\r\n    }\r\n\r\n    /**\r\n     * Remove member\r\n     *\r\n     * @notice Remove membership from `targetMember`\r\n     *\r\n     * @param targetMember ethereum address to be removed\r\n     */\r\n    function removeMember(\r\n        address targetMember\r\n    )\r\n    external\r\n    onlyHordCongress\r\n    {\r\n        require(isMemberInCongress[targetMember] == true);\r\n\r\n        uint length = allMembers.length;\r\n\r\n        uint i=0;\r\n\r\n        // Find selected member\r\n        while(allMembers[i] != targetMember) {\r\n            if(i == length) {\r\n                revert();\r\n            }\r\n            i++;\r\n        }\r\n\r\n        // Move the last member to this place\r\n        allMembers[i] = allMembers[length-1];\r\n\r\n        // Remove the last member\r\n        allMembers.pop();\r\n\r\n        //Remove him from state mapping\r\n        isMemberInCongress[targetMember] = false;\r\n\r\n        //Remove his state to empty member\r\n        address2Member[targetMember] = Member({\r\n            memberSince: block.timestamp,\r\n            name: \"0x0\"\r\n        });\r\n\r\n        //Reduce 1 member from quorum\r\n        minimalQuorum = minimalQuorum.sub(1);\r\n\r\n        // Emit event that member is removed.\r\n        emit MembershipChanged(targetMember, false);\r\n    }\r\n\r\n    /**\r\n     * @notice Function which will be exposed and congress will use it as \"modifier\"\r\n     * @param _address is the address we're willing to check if it belongs to congress\r\n     * @return true/false depending if it is either a member or not\r\n     */\r\n    function isMember(\r\n        address _address\r\n    )\r\n    external\r\n    view\r\n    returns (bool)\r\n    {\r\n        return isMemberInCongress[_address];\r\n    }\r\n\r\n    /// @notice Getter for length for how many members are currently\r\n    /// @return length of members\r\n    function getNumberOfMembers()\r\n    external\r\n    view\r\n    returns (uint)\r\n    {\r\n        return allMembers.length;\r\n    }\r\n\r\n    /// @notice Function to get addresses of all members in congress\r\n    /// @return array of addresses\r\n    function getAllMemberAddresses()\r\n    external\r\n    view\r\n    returns (address[] memory)\r\n    {\r\n        return allMembers;\r\n    }\r\n\r\n    /// Get member information\r\n    function getMemberInfo(\r\n        address _member\r\n    )\r\n    external\r\n    view\r\n    returns (address, bytes32, uint)\r\n    {\r\n        Member memory member = address2Member[_member];\r\n        return (\r\n            _member,\r\n            member.name,\r\n            member.memberSince\r\n        );\r\n    }\r\n\r\n    function getMinimalQuorum()\r\n    external\r\n    view\r\n    returns (uint256)\r\n    {\r\n        return minimalQuorum;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"initialCongressMembers\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"initialCongressMemberNames\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"_hordCongress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isMember\",\"type\":\"bool\"}],\"name\":\"MembershipChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetMember\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"memberName\",\"type\":\"bytes32\"}],\"name\":\"addMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"address2Member\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"memberSince\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allMembers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinimumQuorum\",\"type\":\"uint256\"}],\"name\":\"changeMinimumQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllMemberAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"getMemberInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimalQuorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfMembers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hordCongress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetMember\",\"type\":\"address\"}],\"name\":\"removeMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HordCongressMembersRegistry","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000604fab7ce497059eb87c86399ed7467d1a82517f0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000de1c1f83154ef64a8b3ae42b20ac2da716d18aba000000000000000000000000fe597d4bfa6d16b3a42510b0b9a5d69e45a2f0e20000000000000000000000007bd96058c46892665c90bc440bc2dd5b542245fb000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000466f756e646174696f6e2064656c6567617465000000000000000000000000000000000000005465616d2064656c656761746500000000000000000000000000000000000000324b65792064656c6567617465","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9cd6d058be60cbd2c091891d05778681e63d3515232764453eca45293a5b6e74"}]}