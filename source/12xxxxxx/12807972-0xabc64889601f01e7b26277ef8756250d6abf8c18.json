{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Governed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (governor) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the governor account will be the one that deploys the contract. This\\n * can later be changed with {transferGovernorship}.\\n *\\n */\\ncontract Governed is Context, Initializable {\\n    address public governor;\\n    address private proposedGovernor;\\n\\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial governor.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        governor = msgSender;\\n        emit UpdatedGovernor(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev If inheriting child is using proxy then child contract can use\\n     * _initializeGoverned() function to initialization this contract\\n     */\\n    function _initializeGoverned() internal initializer {\\n        address msgSender = _msgSender();\\n        governor = msgSender;\\n        emit UpdatedGovernor(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the governor.\\n     */\\n    modifier onlyGovernor {\\n        require(governor == _msgSender(), \\\"not-the-governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers governorship of the contract to a new account (`proposedGovernor`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferGovernorship(address _proposedGovernor) external onlyGovernor {\\n        require(_proposedGovernor != address(0), \\\"proposed-governor-is-zero\\\");\\n        proposedGovernor = _proposedGovernor;\\n    }\\n\\n    /**\\n     * @dev Allows new governor to accept governorship of the contract.\\n     */\\n    function acceptGovernorship() external {\\n        require(proposedGovernor == _msgSender(), \\\"not-the-proposed-governor\\\");\\n        emit UpdatedGovernor(governor, proposedGovernor);\\n        governor = proposedGovernor;\\n        proposedGovernor = address(0);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/maker/IMakerDAO.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface ManagerLike {\\n    function cdpCan(\\n        address,\\n        uint256,\\n        address\\n    ) external view returns (uint256);\\n\\n    function ilks(uint256) external view returns (bytes32);\\n\\n    function owns(uint256) external view returns (address);\\n\\n    function urns(uint256) external view returns (address);\\n\\n    function vat() external view returns (address);\\n\\n    function open(bytes32, address) external returns (uint256);\\n\\n    function give(uint256, address) external;\\n\\n    function cdpAllow(\\n        uint256,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function urnAllow(address, uint256) external;\\n\\n    function frob(\\n        uint256,\\n        int256,\\n        int256\\n    ) external;\\n\\n    function flux(\\n        uint256,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function move(\\n        uint256,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function exit(\\n        address,\\n        uint256,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function quit(uint256, address) external;\\n\\n    function enter(address, uint256) external;\\n\\n    function shift(uint256, uint256) external;\\n}\\n\\ninterface VatLike {\\n    function can(address, address) external view returns (uint256);\\n\\n    function ilks(bytes32)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function dai(address) external view returns (uint256);\\n\\n    function urns(bytes32, address) external view returns (uint256, uint256);\\n\\n    function frob(\\n        bytes32,\\n        address,\\n        address,\\n        address,\\n        int256,\\n        int256\\n    ) external;\\n\\n    function hope(address) external;\\n\\n    function nope(address) external;\\n\\n    function move(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n}\\n\\ninterface GemJoinLike {\\n    function dec() external view returns (uint256);\\n\\n    function gem() external view returns (address);\\n\\n    function ilk() external view returns (bytes32);\\n\\n    function join(address, uint256) external payable;\\n\\n    function exit(address, uint256) external;\\n}\\n\\ninterface DaiJoinLike {\\n    function vat() external returns (VatLike);\\n\\n    function dai() external view returns (address);\\n\\n    function join(address, uint256) external payable;\\n\\n    function exit(address, uint256) external;\\n}\\n\\ninterface JugLike {\\n    function drip(bytes32) external returns (uint256);\\n}\\n\\ninterface SpotterLike {\\n    function ilks(bytes32) external view returns (address, uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/vesper/ICollateralManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface ICollateralManager {\\n    function addGemJoin(address[] calldata _gemJoins) external;\\n\\n    function borrow(uint256 _amount) external;\\n\\n    function createVault(bytes32 _collateralType) external returns (uint256 _vaultNum);\\n\\n    function depositCollateral(uint256 _amount) external;\\n\\n    function payback(uint256 _amount) external;\\n\\n    function transferVaultOwnership(address _newOwner) external;\\n\\n    function withdrawCollateral(uint256 _amount) external;\\n\\n    function getVaultBalance(address _vaultOwner) external view returns (uint256 collateralLocked);\\n\\n    function getVaultDebt(address _vaultOwner) external view returns (uint256 daiDebt);\\n\\n    function getVaultInfo(address _vaultOwner)\\n        external\\n        view\\n        returns (\\n            uint256 collateralLocked,\\n            uint256 daiDebt,\\n            uint256 collateralUsdRate,\\n            uint256 collateralRatio,\\n            uint256 minimumDebt\\n        );\\n\\n    function mcdManager() external view returns (address);\\n\\n    function vaultNum(address _vaultOwner) external view returns (uint256 _vaultNum);\\n\\n    function whatWouldWithdrawDo(address _vaultOwner, uint256 _amount)\\n        external\\n        view\\n        returns (\\n            uint256 collateralLocked,\\n            uint256 daiDebt,\\n            uint256 collateralUsdRate,\\n            uint256 collateralRatio,\\n            uint256 minimumDebt\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/maker/CollateralManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../Governed.sol\\\";\\nimport \\\"../../interfaces//maker/IMakerDAO.sol\\\";\\nimport \\\"../../interfaces/vesper/ICollateralManager.sol\\\";\\n\\ncontract DSMath {\\n    uint256 internal constant RAY = 10**27;\\n    uint256 internal constant WAD = 10**18;\\n\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = ((x * y) + (WAD / 2)) / WAD;\\n    }\\n\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = ((x * WAD) + (y / 2)) / y;\\n    }\\n\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = ((x * y) + (RAY / 2)) / RAY;\\n    }\\n\\n    function toRad(uint256 wad) internal pure returns (uint256 rad) {\\n        rad = wad * RAY;\\n    }\\n\\n    /// @notice It will work only if _dec < 18\\n    function convertTo18(uint256 _dec, uint256 _amt) internal pure returns (uint256 amt) {\\n        amt = _amt * 10**(18 - _dec);\\n    }\\n}\\n\\ncontract CollateralManager is ICollateralManager, DSMath, ReentrancyGuard, Governed {\\n    using SafeERC20 for IERC20;\\n\\n    // Vault number to collateral type\\n    mapping(uint256 => bytes32) public collateralType;\\n    // Vault owner to vault num mapping\\n    mapping(address => uint256) public override vaultNum;\\n    // Collateral type to Gem join address of that type\\n    mapping(bytes32 => address) public mcdGemJoin;\\n\\n    address public constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address public override mcdManager = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\\n    address public mcdDaiJoin = 0x9759A6Ac90977b93B58547b4A71c78317f391A28;\\n    address public mcdSpot = 0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3;\\n    address public mcdJug = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\\n    address public treasury;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    event AddedGemJoin(address indexed gemJoin, bytes32 ilk);\\n    event CreatedVault(address indexed owner, uint256 indexed vaultNum, bytes32 indexed collateralType);\\n    event TransferredVaultOwnership(uint256 indexed vaultNum, address indexed previousOwner, address indexed newOwner);\\n    event UpdatedMCDAddresses(address mcdManager, address mcdDaiJoin, address mcdSpot, address mcdJug);\\n    event UpdatedTreasury(address indexed previousTreasury, address indexed newTreasury);\\n\\n    modifier onlyVaultOwner() {\\n        require(vaultNum[msg.sender] != 0, \\\"caller-doesn't-own-any-vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Add gemJoin adapter address from Maker in mapping\\n     * @param _gemJoins Array of gem join addresses\\n     */\\n    function addGemJoin(address[] calldata _gemJoins) external override onlyGovernor {\\n        require(_gemJoins.length != 0, \\\"no-gemJoin-address\\\");\\n        for (uint256 i; i < _gemJoins.length; i++) {\\n            address gemJoin = _gemJoins[i];\\n            bytes32 ilk = GemJoinLike(gemJoin).ilk();\\n            mcdGemJoin[ilk] = gemJoin;\\n            emit AddedGemJoin(gemJoin, ilk);\\n        }\\n    }\\n\\n    /**\\n     * @notice Create new Maker vault\\n     * @dev Store caller of this function as vault owner.\\n     * @param _collateralType Collateral type for Maker vault\\n     * @return _vaultNum Newly created vault number\\n     */\\n    function createVault(bytes32 _collateralType) external override returns (uint256 _vaultNum) {\\n        require(vaultNum[msg.sender] == 0, \\\"caller-owns-another-vault\\\");\\n        ManagerLike manager = ManagerLike(mcdManager);\\n        _vaultNum = manager.open(_collateralType, address(this));\\n        manager.cdpAllow(_vaultNum, address(this), 1);\\n\\n        vaultNum[msg.sender] = _vaultNum;\\n        collateralType[_vaultNum] = _collateralType;\\n        emit CreatedVault(msg.sender, _vaultNum, _collateralType);\\n    }\\n\\n    /**\\n     * @notice Transfer vault ownership to another address/strategy\\n     * @param _newOwner Address of new owner of vault\\n     */\\n    function transferVaultOwnership(address _newOwner) external override onlyVaultOwner {\\n        _transferVaultOwnership(vaultNum[msg.sender], msg.sender, _newOwner);\\n    }\\n\\n    /**\\n     * @notice Transfer vault ownership to another address/strategy\\n     * @param _vaultNum Number of vault being transferred\\n     * @param _owner Address of owner of vault\\n     * @param _newOwner Address of new owner of vault\\n     */\\n    function transferVaultOwnership(\\n        uint256 _vaultNum,\\n        address _owner,\\n        address _newOwner\\n    ) external onlyGovernor {\\n        require(_vaultNum != 0, \\\"vault-number-is-zero\\\");\\n        require(_owner != address(0), \\\"owner-address-zero\\\");\\n        _transferVaultOwnership(_vaultNum, _owner, _newOwner);\\n    }\\n\\n    /**\\n     * @dev Update MCD addresses.\\n     */\\n    function updateMCDAddresses(\\n        address _mcdManager,\\n        address _mcdDaiJoin,\\n        address _mcdSpot,\\n        address _mcdJug\\n    ) external onlyGovernor {\\n        require(_mcdManager != address(0), \\\"mcdManager-address-is-zero\\\");\\n        require(_mcdDaiJoin != address(0), \\\"mcdDaiJoin-address-is-zero\\\");\\n        require(_mcdSpot != address(0), \\\"mcdSpot-address-is-zero\\\");\\n        require(_mcdJug != address(0), \\\"mcdJug-address-is-zero\\\");\\n        mcdManager = _mcdManager;\\n        mcdDaiJoin = _mcdDaiJoin;\\n        mcdSpot = _mcdSpot;\\n        mcdJug = _mcdJug;\\n        emit UpdatedMCDAddresses(_mcdManager, _mcdDaiJoin, _mcdSpot, _mcdJug);\\n    }\\n\\n    /**\\n     * @notice Update treasure address\\n     */\\n    function updateTreasury(address _treasury) external onlyGovernor {\\n        require(_treasury != address(0), \\\"treasury-address-is-zero\\\");\\n        emit UpdatedTreasury(treasury, _treasury);\\n        treasury = _treasury;\\n    }\\n\\n    /**\\n     * @dev Deposit ERC20 collateral.\\n     * @param _amount ERC20 amount to deposit.\\n     */\\n    function depositCollateral(uint256 _amount) external override nonReentrant onlyVaultOwner {\\n        uint256 _vaultNum = vaultNum[msg.sender];\\n        // Receives Gem amount, approve and joins it into the vat.\\n        // Also convert amount to 18 decimal\\n        _amount = _joinGem(mcdGemJoin[collateralType[_vaultNum]], _amount);\\n\\n        ManagerLike manager = ManagerLike(mcdManager);\\n        // Locks Gem amount into the CDP\\n        VatLike(manager.vat()).frob(\\n            collateralType[_vaultNum],\\n            manager.urns(_vaultNum),\\n            address(this),\\n            address(this),\\n            int256(_amount),\\n            0\\n        );\\n    }\\n\\n    /**\\n     * @dev Withdraw collateral.\\n     * @param _amount Collateral amount to withdraw.\\n     */\\n    function withdrawCollateral(uint256 _amount) external override nonReentrant onlyVaultOwner {\\n        uint256 _vaultNum = vaultNum[msg.sender];\\n        ManagerLike manager = ManagerLike(mcdManager);\\n        GemJoinLike gemJoin = GemJoinLike(mcdGemJoin[collateralType[_vaultNum]]);\\n        uint256 amount18 = convertTo18(gemJoin.dec(), _amount);\\n        // Unlocks Gem amount18 from the CDP\\n        manager.frob(_vaultNum, -int256(amount18), 0);\\n        // Moves Gem amount18 from the CDP urn to this address\\n        manager.flux(_vaultNum, address(this), amount18);\\n        // Exits Gem amount to this address as a token\\n        gemJoin.exit(address(this), _amount);\\n        // Send Gem to pool's address\\n        IERC20(gemJoin.gem()).safeTransfer(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @dev Payback borrowed DAI.\\n     * @param _amount Dai amount to payback.\\n     */\\n    function payback(uint256 _amount) external override onlyVaultOwner {\\n        uint256 _vaultNum = vaultNum[msg.sender];\\n        ManagerLike manager = ManagerLike(mcdManager);\\n        address urn = manager.urns(_vaultNum);\\n        address vat = manager.vat();\\n        bytes32 ilk = collateralType[_vaultNum];\\n        // Calculate dai debt\\n        uint256 _daiDebt = _getVaultDebt(ilk, urn, vat);\\n        require(_daiDebt >= _amount, \\\"paying-excess-debt\\\");\\n        // Approve and join dai in vat\\n        _joinDai(urn, _amount);\\n        manager.frob(_vaultNum, 0, _getWipeAmount(ilk, urn, vat));\\n    }\\n\\n    /**\\n     * @notice Borrow DAI.\\n     * @dev In edge case, when we hit DAI mint limit, we might end up borrowing\\n     * less than what is being asked.\\n     * @param _amount Dai amount to borrow. Actual borrow amount may be less than \\\"amount\\\"\\n     */\\n    function borrow(uint256 _amount) external override onlyVaultOwner {\\n        uint256 _vaultNum = vaultNum[msg.sender];\\n        ManagerLike manager = ManagerLike(mcdManager);\\n        address vat = manager.vat();\\n        // Safety check in scenario where current debt and request borrow will exceed max dai limit\\n        uint256 _maxAmount = _maxAvailableDai(vat, collateralType[_vaultNum]);\\n        if (_amount > _maxAmount) {\\n            _amount = _maxAmount;\\n        }\\n\\n        // Generates debt in the CDP\\n        manager.frob(_vaultNum, 0, _getBorrowAmount(vat, manager.urns(_vaultNum), _vaultNum, _amount));\\n        // Moves the DAI amount (balance in the vat in rad) to pool's address\\n        manager.move(_vaultNum, address(this), toRad(_amount));\\n        // Allows adapter to access to pool's DAI balance in the vat\\n        if (VatLike(vat).can(address(this), mcdDaiJoin) == 0) {\\n            VatLike(vat).hope(mcdDaiJoin);\\n        }\\n        // Exits DAI as a token to user's address\\n        DaiJoinLike(mcdDaiJoin).exit(msg.sender, _amount);\\n    }\\n\\n    /// @dev sweep given ERC20 token to treasury pool\\n    function sweepErc20(address _fromToken) external {\\n        require(treasury != address(0), \\\"treasury-not-set\\\");\\n        uint256 amount = IERC20(_fromToken).balanceOf(address(this));\\n        IERC20(_fromToken).safeTransfer(treasury, amount);\\n    }\\n\\n    /**\\n     * @dev Get current dai debt of vault.\\n     * @param _vaultOwner Address of vault owner\\n     */\\n    function getVaultDebt(address _vaultOwner) external view override returns (uint256 daiDebt) {\\n        uint256 _vaultNum = vaultNum[_vaultOwner];\\n        require(_vaultNum != 0, \\\"invalid-vault-number\\\");\\n        address _urn = ManagerLike(mcdManager).urns(_vaultNum);\\n        address _vat = ManagerLike(mcdManager).vat();\\n        bytes32 _ilk = collateralType[_vaultNum];\\n        daiDebt = _getVaultDebt(_ilk, _urn, _vat);\\n    }\\n\\n    /**\\n     * @dev Get current collateral balance of vault.\\n     * @param _vaultOwner Address of vault owner\\n     */\\n    function getVaultBalance(address _vaultOwner) external view override returns (uint256 collateralLocked) {\\n        uint256 _vaultNum = vaultNum[_vaultOwner];\\n        require(_vaultNum != 0, \\\"invalid-vault-number\\\");\\n        address _vat = ManagerLike(mcdManager).vat();\\n        address _urn = ManagerLike(mcdManager).urns(_vaultNum);\\n        (collateralLocked, ) = VatLike(_vat).urns(collateralType[_vaultNum], _urn);\\n    }\\n\\n    /**\\n     * @dev Calculate state based on withdraw amount.\\n     * @param _vaultOwner Address of vault owner\\n     * @param _amount Collateral amount to withdraw.\\n     */\\n    function whatWouldWithdrawDo(address _vaultOwner, uint256 _amount)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 collateralLocked,\\n            uint256 daiDebt,\\n            uint256 collateralUsdRate,\\n            uint256 collateralRatio,\\n            uint256 minimumDebt\\n        )\\n    {\\n        uint256 _vaultNum = vaultNum[_vaultOwner];\\n        require(_vaultNum != 0, \\\"invalid-vault-number\\\");\\n        (collateralLocked, daiDebt, collateralUsdRate, collateralRatio, minimumDebt) = getVaultInfo(_vaultOwner);\\n\\n        GemJoinLike _gemJoin = GemJoinLike(mcdGemJoin[collateralType[_vaultNum]]);\\n        uint256 _amount18 = convertTo18(_gemJoin.dec(), _amount);\\n        require(_amount18 <= collateralLocked, \\\"insufficient-collateral-locked\\\");\\n        collateralLocked = collateralLocked - _amount18;\\n        collateralRatio = _getCollateralRatio(collateralLocked, collateralUsdRate, daiDebt);\\n    }\\n\\n    /**\\n     * @dev Get vault info\\n     * @param _vaultOwner Address of vault owner\\n     */\\n    function getVaultInfo(address _vaultOwner)\\n        public\\n        view\\n        override\\n        returns (\\n            uint256 collateralLocked,\\n            uint256 daiDebt,\\n            uint256 collateralUsdRate,\\n            uint256 collateralRatio,\\n            uint256 minimumDebt\\n        )\\n    {\\n        uint256 _vaultNum = vaultNum[_vaultOwner];\\n        require(_vaultNum != 0, \\\"invalid-vault-number\\\");\\n        (collateralLocked, collateralUsdRate, daiDebt, minimumDebt) = _getVaultInfo(_vaultNum);\\n        collateralRatio = _getCollateralRatio(collateralLocked, collateralUsdRate, daiDebt);\\n    }\\n\\n    /**\\n     * @notice Get max available DAI safe to borrow for given collateral type.\\n     * @param _collateralType Collateral type.\\n     */\\n    function maxAvailableDai(bytes32 _collateralType) public view returns (uint256) {\\n        return _maxAvailableDai(ManagerLike(mcdManager).vat(), _collateralType);\\n    }\\n\\n    /**\\n     * @notice Get max available DAI safe to borrow\\n     * @dev Calculation based on current DAI debt and DAI limit for given collateral type.\\n     * @param _vat Vat address\\n     * @param _collateralType Vault collateral type.\\n     */\\n    function _maxAvailableDai(address _vat, bytes32 _collateralType) internal view returns (uint256) {\\n        // Get stable coin Art(debt) [wad], rate [ray], line [rad]\\n        //solhint-disable-next-line var-name-mixedcase\\n        (uint256 Art, uint256 rate, , uint256 line, ) = VatLike(_vat).ilks(_collateralType);\\n        // Calculate total issued debt is Art * rate [rad]\\n        // Calculate total available dai [wad]\\n        uint256 _totalAvailableDai = (line - (Art * rate)) / RAY;\\n        // For safety reason, return 99% of available\\n        return (_totalAvailableDai * 99) / 100;\\n    }\\n\\n    function _joinDai(address _urn, uint256 _amount) internal {\\n        DaiJoinLike _daiJoin = DaiJoinLike(mcdDaiJoin);\\n        // Transfer Dai from strategy or pool to here\\n        IERC20(DAI).safeTransferFrom(msg.sender, address(this), _amount);\\n        // Approves adapter to move dai.\\n        IERC20(DAI).safeApprove(mcdDaiJoin, 0);\\n        IERC20(DAI).safeApprove(mcdDaiJoin, _amount);\\n        // Joins DAI into the vat\\n        _daiJoin.join(_urn, _amount);\\n    }\\n\\n    function _joinGem(address _adapter, uint256 _amount) internal returns (uint256) {\\n        GemJoinLike gemJoin = GemJoinLike(_adapter);\\n\\n        IERC20 token = IERC20(gemJoin.gem());\\n        // Transfer token from strategy or pool to here\\n        token.safeTransferFrom(msg.sender, address(this), _amount);\\n        // Approves adapter to take the Gem amount\\n        token.safeApprove(_adapter, 0);\\n        token.safeApprove(_adapter, _amount);\\n        // Joins Gem collateral into the vat\\n        gemJoin.join(address(this), _amount);\\n        // Convert amount to 18 decimal\\n        return convertTo18(gemJoin.dec(), _amount);\\n    }\\n\\n    /**\\n     * @dev Get borrow dai amount.\\n     */\\n    function _getBorrowAmount(\\n        address _vat,\\n        address _urn,\\n        uint256 _vaultNum,\\n        uint256 _wad\\n    ) internal returns (int256 amount) {\\n        // Updates stability fee rate\\n        uint256 rate = JugLike(mcdJug).drip(collateralType[_vaultNum]);\\n        // Gets DAI balance of the urn in the vat\\n        uint256 dai = VatLike(_vat).dai(_urn);\\n        // If there was already enough DAI in the vat balance, just exits it without adding more debt\\n        if (dai < _wad * RAY) {\\n            // Calculates the needed amt so together with the existing dai in the vat is enough to exit wad amount of DAI tokens\\n            amount = int256(((_wad * RAY) - dai) / rate);\\n            // This is needed due lack of precision. It might need to sum an extra amt wei (for the given DAI wad amount)\\n            amount = (uint256(amount) * rate) < (_wad * RAY) ? amount + 1 : amount;\\n        }\\n    }\\n\\n    /// @notice Transfer vault ownership\\n    function _transferVaultOwnership(\\n        uint256 _vaultNum,\\n        address _owner,\\n        address _newOwner\\n    ) internal {\\n        require(_newOwner != address(0), \\\"new-owner-address-is-zero\\\");\\n        require(vaultNum[_owner] == _vaultNum, \\\"invalid-vault-num\\\");\\n        require(vaultNum[_newOwner] == 0, \\\"new-owner-owns-another-vault\\\");\\n\\n        vaultNum[_newOwner] = _vaultNum;\\n        vaultNum[_owner] = 0;\\n        emit TransferredVaultOwnership(_vaultNum, _owner, _newOwner);\\n    }\\n\\n    /**\\n     * @dev Get Vault Debt Amount.\\n     */\\n    function _getVaultDebt(\\n        bytes32 _ilk,\\n        address _urn,\\n        address _vat\\n    ) internal view returns (uint256 wad) {\\n        // Get normalized debt [wad]\\n        (, uint256 art) = VatLike(_vat).urns(_ilk, _urn);\\n        // Get stable coin rate [ray]\\n        (, uint256 rate, , , ) = VatLike(_vat).ilks(_ilk);\\n        // Get balance from vat [rad]\\n        uint256 dai = VatLike(_vat).dai(_urn);\\n        wad = _getVaultDebt(art, rate, dai);\\n    }\\n\\n    function _getVaultInfo(uint256 _vaultNum)\\n        internal\\n        view\\n        returns (\\n            uint256 collateralLocked,\\n            uint256 collateralUsdRate,\\n            uint256 daiDebt,\\n            uint256 minimumDebt\\n        )\\n    {\\n        address _urn = ManagerLike(mcdManager).urns(_vaultNum);\\n        address _vat = ManagerLike(mcdManager).vat();\\n        bytes32 _ilk = collateralType[_vaultNum];\\n        // Get minimum liquidation ratio [ray]\\n        (, uint256 mat) = SpotterLike(mcdSpot).ilks(_ilk);\\n        // Get collateral locked and normalized debt [wad] [wad]\\n        (uint256 ink, uint256 art) = VatLike(_vat).urns(_ilk, _urn);\\n        // Get stable coin and collateral rate  and min debt [ray] [ray] [rad]\\n        (, uint256 rate, uint256 spot, , uint256 dust) = VatLike(_vat).ilks(_ilk);\\n\\n        collateralLocked = ink;\\n        daiDebt = _getVaultDebt(art, rate, VatLike(_vat).dai(_urn));\\n        minimumDebt = dust / RAY;\\n        // Calculate collateral rate in 18 decimals\\n        collateralUsdRate = rmul(mat, spot) / 10**9;\\n    }\\n\\n    /**\\n     * @dev Get Payback amount.\\n     * @notice We need to fetch latest art, rate and dai to calculate payback amount.\\n     */\\n    function _getWipeAmount(\\n        bytes32 _ilk,\\n        address _urn,\\n        address _vat\\n    ) internal view returns (int256 amount) {\\n        // Get normalize debt, rate and dai balance from Vat\\n        (, uint256 _art) = VatLike(_vat).urns(_ilk, _urn);\\n        (, uint256 _rate, , , ) = VatLike(_vat).ilks(_ilk);\\n        uint256 _dai = VatLike(_vat).dai(_urn);\\n\\n        // Uses the whole dai balance in the vat to reduce the debt\\n        amount = int256(_dai / _rate);\\n        // Checks the calculated amt is not higher than urn.art (total debt), otherwise uses its value\\n        amount = uint256(amount) <= _art ? -amount : -int256(_art);\\n    }\\n\\n    /// @notice Get collateral ratio\\n    function _getCollateralRatio(\\n        uint256 _collateralLocked,\\n        uint256 _collateralRate,\\n        uint256 _daiDebt\\n    ) internal pure returns (uint256) {\\n        if (_collateralLocked == 0) {\\n            return 0;\\n        }\\n\\n        if (_daiDebt == 0) {\\n            return MAX_UINT_VALUE;\\n        }\\n\\n        require(_collateralRate != 0, \\\"collateral-rate-is-zero\\\");\\n        return wdiv(wmul(_collateralLocked, _collateralRate), _daiDebt);\\n    }\\n\\n    /// @notice Get vault debt\\n    function _getVaultDebt(\\n        uint256 _art,\\n        uint256 _rate,\\n        uint256 _dai\\n    ) internal pure returns (uint256 wad) {\\n        if (_dai < (_art * _rate)) {\\n            uint256 rad = ((_art * _rate) - _dai);\\n            wad = rad / RAY;\\n            wad = (wad * RAY) < rad ? wad + 1 : wad;\\n        } else {\\n            wad = 0;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"}],\"name\":\"AddedGemJoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultNum\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"CreatedVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultNum\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TransferredVaultOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedGovernor\",\"type\":\"address\"}],\"name\":\"UpdatedGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mcdManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mcdDaiJoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mcdSpot\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mcdJug\",\"type\":\"address\"}],\"name\":\"UpdatedMCDAddresses\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousTreasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"UpdatedTreasury\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gemJoins\",\"type\":\"address[]\"}],\"name\":\"addGemJoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collateralType\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_collateralType\",\"type\":\"bytes32\"}],\"name\":\"createVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNum\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultOwner\",\"type\":\"address\"}],\"name\":\"getVaultBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralLocked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultOwner\",\"type\":\"address\"}],\"name\":\"getVaultDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"daiDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultOwner\",\"type\":\"address\"}],\"name\":\"getVaultInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daiDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralUsdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_collateralType\",\"type\":\"bytes32\"}],\"name\":\"maxAvailableDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mcdDaiJoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"mcdGemJoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mcdJug\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mcdManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mcdSpot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"payback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweepErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposedGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferVaultOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferVaultOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mcdManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mcdDaiJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mcdSpot\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mcdJug\",\"type\":\"address\"}],\"name\":\"updateMCDAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"whatWouldWithdrawDo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daiDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralUsdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CollateralManager","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}