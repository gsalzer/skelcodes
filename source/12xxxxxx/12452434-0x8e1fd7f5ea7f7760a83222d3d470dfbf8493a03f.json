{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.8.2;\r\n\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IBoostedVaultWithLockup {\r\n    /**\r\n     * @dev Stakes a given amount of the StakingToken for the sender\r\n     * @param _amount Units of StakingToken\r\n     */\r\n    function stake(uint256 _amount) external;\r\n\r\n    /**\r\n     * @dev Stakes a given amount of the StakingToken for a given beneficiary\r\n     * @param _beneficiary Staked tokens are credited to this address\r\n     * @param _amount      Units of StakingToken\r\n     */\r\n    function stake(address _beneficiary, uint256 _amount) external;\r\n\r\n    /**\r\n     * @dev Withdraws stake from pool and claims any unlocked rewards.\r\n     * Note, this function is costly - the args for _claimRewards\r\n     * should be determined off chain and then passed to other fn\r\n     */\r\n    function exit() external;\r\n\r\n    /**\r\n     * @dev Withdraws stake from pool and claims any unlocked rewards.\r\n     * @param _first    Index of the first array element to claim\r\n     * @param _last     Index of the last array element to claim\r\n     */\r\n    function exit(uint256 _first, uint256 _last) external;\r\n\r\n    /**\r\n     * @dev Withdraws given stake amount from the pool\r\n     * @param _amount Units of the staked token to withdraw\r\n     */\r\n    function withdraw(uint256 _amount) external;\r\n\r\n    /**\r\n     * @dev Claims only the tokens that have been immediately unlocked, not including\r\n     * those that are in the lockers.\r\n     */\r\n    function claimReward() external;\r\n\r\n    /**\r\n     * @dev Claims all unlocked rewards for sender.\r\n     * Note, this function is costly - the args for _claimRewards\r\n     * should be determined off chain and then passed to other fn\r\n     */\r\n    function claimRewards() external;\r\n\r\n    /**\r\n     * @dev Claims all unlocked rewards for sender. Both immediately unlocked\r\n     * rewards and also locked rewards past their time lock.\r\n     * @param _first    Index of the first array element to claim\r\n     * @param _last     Index of the last array element to claim\r\n     */\r\n    function claimRewards(uint256 _first, uint256 _last) external;\r\n\r\n    /**\r\n     * @dev Pokes a given account to reset the boost\r\n     */\r\n    function pokeBoost(address _account) external;\r\n\r\n    /**\r\n     * @dev Gets the last applicable timestamp for this reward period\r\n     */\r\n    function lastTimeRewardApplicable() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Calculates the amount of unclaimed rewards per token since last update,\r\n     * and sums with stored to give the new cumulative reward per token\r\n     * @return 'Reward' per staked token\r\n     */\r\n    function rewardPerToken() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returned the units of IMMEDIATELY claimable rewards a user has to receive. Note - this\r\n     * does NOT include the majority of rewards which will be locked up.\r\n     * @param _account User address\r\n     * @return Total reward amount earned\r\n     */\r\n    function earned(address _account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Calculates all unclaimed reward data, finding both immediately unlocked rewards\r\n     * and those that have passed their time lock.\r\n     * @param _account User address\r\n     * @return amount Total units of unclaimed rewards\r\n     * @return first Index of the first userReward that has unlocked\r\n     * @return last Index of the last userReward that has unlocked\r\n     */\r\n    function unclaimedRewards(address _account)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 amount,\r\n            uint256 first,\r\n            uint256 last\r\n        );\r\n}\r\n\r\n// SPDX-License-Identifier: AGPL-3.0-or-later\r\nstruct PokeVaultAccounts {\r\n    // Address of the Boosted Vault\r\n    address boostVault;\r\n    // List of accounts to be poked\r\n    address[] accounts;\r\n}\r\n\r\n/**\r\n * @title   Poker\r\n * @author  mStable\r\n * @notice  Pokes accounts on boosted vaults so their vault balances can be recalculated.\r\n * @dev     VERSION: 1.0\r\n *          DATE:    2021-04-17\r\n */\r\ncontract Poker {\r\n\r\n    /**\r\n     * @dev For each boosted vault, poke all the over boosted accounts.\r\n     * @param _vaultAccounts     An array of PokeVaultAccounts structs\r\n     */\r\n    function poke(PokeVaultAccounts[] memory _vaultAccounts) external {\r\n        uint vaultCount = _vaultAccounts.length;\r\n        for(uint i = 0; i < vaultCount; i++) {\r\n            PokeVaultAccounts memory vaultAccounts = _vaultAccounts[i];\r\n            address boostVaultAddress = vaultAccounts.boostVault;\r\n            require(boostVaultAddress != address(0), \"blank vault address\");\r\n            IBoostedVaultWithLockup boostVault = IBoostedVaultWithLockup(boostVaultAddress);\r\n\r\n            uint accountsLength = vaultAccounts.accounts.length;\r\n            for(uint j = 0; j < accountsLength; j++) {\r\n                address accountAddress = vaultAccounts.accounts[j];\r\n                require(accountAddress != address(0), \"blank address\");\r\n                boostVault.pokeBoost(accountAddress);\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"boostVault\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"internalType\":\"struct PokeVaultAccounts[]\",\"name\":\"_vaultAccounts\",\"type\":\"tuple[]\"}],\"name\":\"poke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Poker","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1429e1fcfcf05c33c73f22341e7312447162274e94d9fa3c0869a71d0605d235"}]}