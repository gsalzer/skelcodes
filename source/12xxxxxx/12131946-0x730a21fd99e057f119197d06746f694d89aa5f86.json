{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.12;\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity >=0.5.12;\r\n\r\ncontract LibNote {\r\n    event LogNote(\r\n        bytes4 indexed sig,\r\n        address indexed usr,\r\n        bytes32 indexed arg1,\r\n        bytes32 indexed arg2,\r\n        bytes data\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        _;\r\n        assembly {\r\n            // log an 'anonymous' event with a constant 6 words of calldata\r\n            // and four indexed topics: selector, caller, arg1 and arg2\r\n            let mark := msize() // end of memory ensures zero\r\n            mstore(0x40, add(mark, 288)) // update free memory pointer\r\n            mstore(mark, 0x20) // bytes type data offset\r\n            mstore(add(mark, 0x20), 224) // bytes size (padded)\r\n            calldatacopy(add(mark, 0x40), 0, 224) // bytes payload\r\n            log4(\r\n                mark,\r\n                288, // calldata\r\n                shl(224, shr(224, calldataload(0))), // msg.sig\r\n                caller(), // msg.sender\r\n                calldataload(4), // arg1\r\n                calldataload(36) // arg2\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\ncontract Auth is LibNote {\r\n    mapping(address => uint256) public wards;\r\n    address public deployer;\r\n\r\n    function rely(address usr) external note auth {\r\n        wards[usr] = 1;\r\n    }\r\n\r\n    function deny(address usr) external note auth {\r\n        wards[usr] = 0;\r\n    }\r\n\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1 || deployer == msg.sender, \"Auth/not-authorized\");\r\n        _;\r\n    }\r\n}\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function mint(address account, uint256 amount) external;\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n}\r\n\r\n\r\ninterface VatLike {\r\n    function slip(\r\n        bytes32,\r\n        address,\r\n        int256\r\n    ) external;\r\n\r\n    function move(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) external;\r\n}\r\n\r\n\r\n\r\ninterface CurveGaugeWrapper {\r\n\r\n    function deposit(uint256 _value, address addr) external;\r\n\r\n    function withdraw(uint256 _value) external;\r\n\r\n    function set_approve_deposit(address addr, bool can_deposit) external;\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function mint(address account, uint256 amount) external;\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\ninterface CurveGauge {\r\n\r\n    function deposit(uint256 _value) external;\r\n    function withdraw(uint256 _value) external;\r\n\r\n    function lp_token() external view returns (address);\r\n    function minter() external view returns (address);\r\n    function crv_token() external view returns (address);\r\n    function voting_escrow() external view returns (address);\r\n}\r\n\r\ninterface CurveGaugeReward {\r\n    function rewarded_token() external returns (address);\r\n    function claim_rewards(address addr) external;\r\n}\r\n\r\ninterface Minter {\r\n    function mint(address gauge_addr) external;\r\n}\r\n\r\ninterface VotingEscrow {\r\n\r\n    function create_lock(uint256 _value, uint256 _unlock_time) external;\r\n\r\n    function increase_amount(uint256 _value) external;\r\n\r\n    function increase_unlock_time(uint256 _unlock_time) external;\r\n\r\n    function withdraw() external;\r\n}\r\n\r\ncontract Bag {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    address public owner;\r\n    uint256 amnt;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function claim(CurveGauge curveGauge, CurveGaugeReward curveGaugeReward) internal {\r\n        address minter = curveGauge.minter();\r\n        Minter(minter).mint(address(curveGauge));\r\n\r\n        if (address(curveGaugeReward) != address(0)) {\r\n            curveGaugeReward.claim_rewards(address(this));\r\n        }\r\n    }\r\n\r\n    function transferToken(uint256 wad, address token, address usr, uint256 total) internal {\r\n        uint256 tokenToTransfer = IERC20(token).balanceOf(address(this)).mul(wad).div(total);\r\n        require(IERC20(token).transfer(usr, tokenToTransfer), \"GJFC/bag-failed-tkn-tran\");\r\n    }\r\n\r\n    function exit(CurveGauge curveGauge, address gem, address usr, uint256 wad, \r\n                  CurveGaugeReward curveGaugeReward) external {\r\n        require(owner == msg.sender, \"GJFC/bag-exit-auth\");\r\n\r\n        uint256 amntBefore = amnt;\r\n        amnt = amnt.sub(wad);\r\n\r\n        claim(curveGauge, curveGaugeReward);\r\n\r\n        transferToken(wad, curveGauge.crv_token(), usr, amntBefore);\r\n        if (address(curveGaugeReward) != address(0)) {\r\n            transferToken(wad, curveGaugeReward.rewarded_token(), usr, amntBefore);\r\n        }\r\n        curveGauge.withdraw(wad);\r\n\r\n        require(IERC20(gem).transfer(usr, wad), \"GJFC/bag-failed-transfer\");\r\n    }\r\n\r\n    function join(CurveGauge curveGauge, address gem, uint256 wad, CurveGaugeReward curveGaugeReward) external {\r\n        require(owner == msg.sender, \"GJFC/bag-join-auth\");\r\n\r\n        amnt = amnt.add(wad);\r\n        claim(curveGauge, curveGaugeReward);\r\n\r\n\r\n        IERC20(gem).approve(address(curveGauge), wad);\r\n        curveGauge.deposit(wad);\r\n    }\r\n\r\n    function init(CurveGauge curveGauge) external {\r\n        require(owner == msg.sender, \"GJFC/bag-init-auth\");\r\n        IERC20 crv = IERC20(curveGauge.crv_token());\r\n        crv.approve(curveGauge.voting_escrow(), uint256(-1));\r\n    }\r\n\r\n    function create_lock(CurveGauge curveGauge, uint256 _value, uint256 _unlock_time) external {\r\n        require(owner == msg.sender, \"GJFC/bag-crt-auth\");\r\n        VotingEscrow votingEscrow = VotingEscrow(curveGauge.voting_escrow());\r\n        votingEscrow.create_lock(_value, _unlock_time);\r\n    }\r\n\r\n    function increase_amount(CurveGauge curveGauge, uint256 _value) external {\r\n        require(owner == msg.sender, \"GJFC/bag-inc-amnt-auth\");\r\n        VotingEscrow votingEscrow = VotingEscrow(curveGauge.voting_escrow());\r\n        votingEscrow.increase_amount(_value);\r\n    }\r\n\r\n    function increase_unlock_time(CurveGauge curveGauge, uint256 _unlock_time) external {\r\n        require(owner == msg.sender, \"GJFC/bag-inc-time-auth\");\r\n        VotingEscrow votingEscrow = VotingEscrow(curveGauge.voting_escrow());\r\n        votingEscrow.increase_unlock_time(_unlock_time);\r\n    }\r\n\r\n    function withdraw(CurveGauge curveGauge, address usr) external {\r\n        require(owner == msg.sender, \"GJFC/bag-with-auth\");\r\n        VotingEscrow votingEscrow = VotingEscrow(curveGauge.voting_escrow());\r\n        votingEscrow.withdraw();\r\n\r\n        IERC20 crv = IERC20(curveGauge.crv_token());\r\n\r\n        require(\r\n            crv.transfer(usr, crv.balanceOf(address(this))),\r\n            \"GJFC/failed-transfer\"\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title MakerDAO like adapter for gem join\r\n *\r\n * see MakerDAO docs for details\r\n*/\r\ncontract GemJoinForCurve is LibNote {\r\n    // --- Auth ---\r\n    mapping(address => uint256) public wards;\r\n\r\n    function rely(address usr) external note auth {\r\n        wards[usr] = 1;\r\n    }\r\n\r\n    function deny(address usr) external note auth {\r\n        wards[usr] = 0;\r\n    }\r\n\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \"GJFC/not-authorized\");\r\n        _;\r\n    }\r\n\r\n\r\n    VatLike public vat; // CDP Engine\r\n    bytes32 public ilk; // Collateral Type\r\n    IERC20 public gem;\r\n    CurveGauge public curveGauge;\r\n    CurveGaugeReward public curveGaugeReward;\r\n    uint256 public dec;\r\n    uint256 public live; // Active Flag\r\n\r\n    mapping(address => address) public bags;\r\n\r\n\r\n    constructor(\r\n        address vat_,\r\n        bytes32 ilk_,\r\n        address curveGauge_,\r\n        bool withReward\r\n    ) public {\r\n        wards[msg.sender] = 1;\r\n        live = 1;\r\n        vat = VatLike(vat_);\r\n        ilk = ilk_;\r\n        curveGauge = CurveGauge(curveGauge_);\r\n        if (withReward) {\r\n            curveGaugeReward = CurveGaugeReward(curveGauge_);\r\n        }\r\n        gem = IERC20(curveGauge.lp_token());\r\n        require(address(gem) != address(0));\r\n\r\n        dec = gem.decimals();\r\n        require(dec >= 18, \"GJFC/decimals-18-or-higher\");\r\n    }\r\n\r\n    function makeBag(address user) internal returns (address bag) {\r\n        if (bags[user] != address(0)) {\r\n            bag = bags[user];\r\n        } else {\r\n            Bag b = new Bag();\r\n            b.init(curveGauge);\r\n            bag = address(b);\r\n            bags[user] = bag;\r\n        }\r\n    }\r\n\r\n    function cage() external note auth {\r\n        live = 0;\r\n    }\r\n\r\n    function join(address urn, uint256 wad) external note {\r\n        require(live == 1, \"GJFC/not-live\");\r\n        require(int256(wad) >= 0, \"GJFC/overflow\");\r\n        vat.slip(ilk, urn, int256(wad));\r\n\r\n        address bag = makeBag(msg.sender);\r\n\r\n        require(\r\n            gem.transferFrom(msg.sender, bag, wad),\r\n            \"GJFC/failed-transfer\"\r\n        );\r\n\r\n        Bag(bag).join(curveGauge, address(gem), wad, curveGaugeReward);\r\n    }\r\n\r\n    function exit(address usr, uint256 wad) external note {\r\n        require(wad <= 2**255, \"GJFC/overflow\");\r\n        vat.slip(ilk, msg.sender, -int256(wad));\r\n\r\n        address bag = bags[msg.sender];\r\n        require(bag != address(0), \"GJFC/zero-bag\");\r\n\r\n        Bag(bag).exit(curveGauge, address(gem), usr, wad, curveGaugeReward);\r\n    }\r\n\r\n    function create_lock(uint256 _value, uint256 _unlock_time) external {\r\n        require(live == 1, \"GJFC/not-live\");\r\n\r\n        address bag = bags[msg.sender];\r\n        require(bag != address(0), \"GJFC/zero-bag\");\r\n\r\n        require(\r\n            IERC20(curveGauge.crv_token()).transferFrom(msg.sender, bag, _value),\r\n            \"GJFC/failed-transfer\"\r\n        );\r\n\r\n        Bag(bag).create_lock(curveGauge, _value, _unlock_time);\r\n    }\r\n\r\n    function increase_amount(uint256 _value) external {\r\n        require(live == 1, \"GJFC/not-live\");\r\n\r\n        address bag = bags[msg.sender];\r\n        require(bag != address(0), \"GJFC/zero-bag\");\r\n\r\n        require(\r\n            IERC20(curveGauge.crv_token()).transferFrom(msg.sender, bag, _value),\r\n            \"GJFC/failed-transfer\"\r\n        );\r\n\r\n        Bag(bag).increase_amount(curveGauge, _value);\r\n    }\r\n\r\n    function increase_unlock_time(uint256 _unlock_time) external {\r\n        require(live == 1, \"GJFC/not-live\");\r\n\r\n        address bag = bags[msg.sender];\r\n        require(bag != address(0), \"GJFC/zero-bag\");\r\n        Bag(bag).increase_unlock_time(curveGauge, _unlock_time);\r\n    }\r\n\r\n    function withdraw() external {\r\n        address bag = bags[msg.sender];\r\n        require(bag != address(0), \"GJFC/zero-bag\");\r\n        Bag(bag).withdraw(curveGauge, msg.sender);\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract BagSimple {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    address public owner;\r\n    uint256 amnt;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function claim(CurveGauge curveGauge) internal {\r\n        address minter = curveGauge.minter();\r\n        Minter(minter).mint(address(curveGauge));\r\n    }\r\n\r\n    function transferToken(uint256 wad, address token, address usr, uint256 total) internal {\r\n        uint256 tokenToTransfer = IERC20(token).balanceOf(address(this)).mul(wad).div(total);\r\n        require(IERC20(token).transfer(usr, tokenToTransfer), \"GJFC/bag-failed-tkn-tran\");\r\n    }\r\n\r\n    function exit(CurveGauge curveGauge, address gem, address usr, uint256 wad) external {\r\n        require(owner == msg.sender, \"GJFC/bag-exit-auth\");\r\n\r\n        uint256 amntBefore = amnt;\r\n        amnt = amnt.sub(wad);\r\n\r\n        claim(curveGauge);\r\n\r\n        transferToken(wad, curveGauge.crv_token(), usr, amntBefore);\r\n        curveGauge.withdraw(wad);\r\n\r\n        require(IERC20(gem).transfer(usr, wad), \"GJFC/bag-failed-transfer\");\r\n    }\r\n\r\n    function join(CurveGauge curveGauge, address gem, uint256 wad) external {\r\n        require(owner == msg.sender, \"GJFC/bag-join-auth\");\r\n\r\n        amnt = amnt.add(wad);\r\n        claim(curveGauge);\r\n\r\n\r\n        IERC20(gem).approve(address(curveGauge), wad);\r\n        curveGauge.deposit(wad);\r\n    }\r\n\r\n    function init(CurveGauge curveGauge) external {\r\n        require(owner == msg.sender, \"GJFC/bag-init-auth\");\r\n        IERC20 crv = IERC20(curveGauge.crv_token());\r\n        crv.approve(curveGauge.voting_escrow(), uint256(-1));\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title MakerDAO like adapter for gem join\r\n *\r\n * see MakerDAO docs for details\r\n * simple optimized version with no boost\r\n*/\r\ncontract GemJoinForCurveSimple is LibNote {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // --- Auth ---\r\n    mapping(address => uint256) public wards;\r\n\r\n    function rely(address usr) external note auth {\r\n        wards[usr] = 1;\r\n    }\r\n\r\n    function deny(address usr) external note auth {\r\n        wards[usr] = 0;\r\n    }\r\n\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \"GJFC/not-authorized\");\r\n        _;\r\n    }\r\n\r\n\r\n    VatLike public vat; // CDP Engine\r\n    bytes32 public ilk; // Collateral Type\r\n    IERC20 public gem;\r\n    CurveGauge public curveGauge;\r\n    uint256 public dec;\r\n    uint256 public live; // Active Flag\r\n    uint256 public totalCollateral;\r\n\r\n    mapping(address => address) public bags;\r\n\r\n\r\n    constructor(\r\n        address vat_,\r\n        bytes32 ilk_,\r\n        address curveGauge_,\r\n        bool\r\n    ) public {\r\n        wards[msg.sender] = 1;\r\n        live = 1;\r\n        vat = VatLike(vat_);\r\n        ilk = ilk_;\r\n        curveGauge = CurveGauge(curveGauge_);\r\n        gem = IERC20(curveGauge.lp_token());\r\n        require(address(gem) != address(0));\r\n\r\n        dec = gem.decimals();\r\n        require(dec >= 18, \"GJFC/decimals-18-or-higher\");\r\n    }\r\n\r\n    function makeBag(address user) internal returns (address bag) {\r\n        if (bags[user] != address(0)) {\r\n            bag = bags[user];\r\n        } else {\r\n            BagSimple b = new BagSimple();\r\n            b.init(curveGauge);\r\n            bag = address(b);\r\n            bags[user] = bag;\r\n        }\r\n    }\r\n\r\n    function cage() external note auth {\r\n        live = 0;\r\n    }\r\n\r\n    function join(address urn, uint256 wad) external note {\r\n        require(live == 1, \"GJFC/not-live\");\r\n        require(int256(wad) >= 0, \"GJFC/overflow\");\r\n        vat.slip(ilk, urn, int256(wad));\r\n        totalCollateral = totalCollateral.add(wad);\r\n\r\n        address bag = makeBag(msg.sender);\r\n\r\n        require(\r\n            gem.transferFrom(msg.sender, bag, wad),\r\n            \"GJFC/failed-transfer\"\r\n        );\r\n\r\n        BagSimple(bag).join(curveGauge, address(gem), wad);\r\n    }\r\n\r\n    function exit(address usr, uint256 wad) external note {\r\n        require(wad <= 2**255, \"GJFC/overflow\");\r\n        vat.slip(ilk, msg.sender, -int256(wad));\r\n        totalCollateral = totalCollateral.sub(wad);\r\n\r\n        address bag = bags[msg.sender];\r\n        require(bag != address(0), \"GJFC/zero-bag\");\r\n\r\n        BagSimple(bag).exit(curveGauge, address(gem), usr, wad);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract CurveGauge\",\"name\":\"curveGauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gem\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract CurveGauge\",\"name\":\"curveGauge\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract CurveGauge\",\"name\":\"curveGauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gem\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"join\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BagSimple","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"bzzr://4eb8bb0f3212d2efec419345930702f875dab393305226b8e6fdd0d8e8638392"}]}