{"status":"1","message":"OK","result":[{"SourceCode":"{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"},\"Root.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\n/// @title Contract Root\\ncontract Root is Ownable {\\n    using SafeMath for uint;\\n\\n    enum Group { PrivateRound1, PrivateRound2, UnlockedTokenFromPR2, PublicSale, Marketing, Liquidity, Team,\\n        Advisor, Development}\\n\\n    IERC20 public token;\\n\\n    struct GroupInfo {\\n        uint256[] balances;\\n        uint256[] balancesBase;\\n        uint256[] percents;\\n        address[] addresses;\\n    }\\n\\n    mapping(Group =\\u003e GroupInfo) private groupToInfo;\\n    uint256 private totalGroupsBalance;\\n\\n    /// @notice Time when the contract was deployed\\n    uint256 public deployTime;\\n\\n    constructor(address _token) {\\n        token = IERC20(_token);\\n        deployTime = block.timestamp;\\n    }\\n\\n    /// @notice Load group data to contract.\\n    /// @return bool True if data successfully loaded\\n    function loadGroupInfo(GroupInfo memory _group, Group _groupNumber) external onlyOwner returns(bool) {\\n        require(groupToInfo[_groupNumber].addresses.length == 0, \\\"[E-39] - Group already loaded.\\\");\\n        require(_group.addresses.length \\u003e 0, \\\"[E-40] - Empty address array in group.\\\");\\n\\n        _updateTotalGroupBalance(_group);\\n        _checkTotalPercentSumInGroup(_group);\\n\\n        _setupBaseBalance(_group);\\n        _transferTokensOnLoad(_group);\\n\\n        groupToInfo[_groupNumber] = _group;\\n\\n        return true;\\n    }\\n\\n    /// @notice Write total group balance to storage. Need to calculate total groups balance\\n    /// @param _group Group to upload\\n    function _updateTotalGroupBalance(GroupInfo memory _group) private {\\n        uint256 _groupBalances = 0;\\n        for (uint256 k = 0; k \\u003c _group.balances.length; k++) {\\n            _groupBalances = _groupBalances.add(_group.balances[k]);\\n        }\\n\\n        totalGroupsBalance += _groupBalances;\\n    }\\n\\n    /// @notice Check that percent sum inside group equal to 1\\n    /// @param _group Group to upload\\n    function _checkTotalPercentSumInGroup(GroupInfo memory _group) private pure {\\n        uint256 _percentSum = 0;\\n        for (uint256 k = 0; k \\u003c _group.percents.length; k++) {\\n            _percentSum = _percentSum.add(_group.percents[k]);\\n        }\\n        require(_percentSum == getDecimal(), \\\"[E-104] - Invalid percent sum in group.\\\");\\n    }\\n\\n    /// @notice Copy user balances to baseBalances\\n    /// @param _group Group to upload\\n    function _setupBaseBalance(GroupInfo memory _group) private pure {\\n        _group.balancesBase = new uint256[](_group.balances.length);\\n\\n        for (uint256 k = 0; k \\u003c _group.balances.length; k++) {\\n            _group.balancesBase[k] = _group.balances[k];\\n        }\\n    }\\n\\n    /// @notice Transfer tokens in groups where TGE is 100% and execute base input validation\\n    /// @param _group Group to upload\\n    function _transferTokensOnLoad(GroupInfo memory _group) private {\\n        require(_group.addresses.length == _group.balancesBase.length, \\\"[E-50] - Address and balance length should be equal.\\\");\\n\\n        if (_group.percents[0] == getDecimal()) {\\n            for (uint256 k = 0; k \\u003c _group.addresses.length; k++) {\\n                _group.balances[k] = 0;\\n                token.transfer(_group.addresses[k], _group.balancesBase[k]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Transfer amount from contract to `msg.sender`\\n    /// @param _group Group number\\n    /// @param _amount Withdrawal amount\\n    /// @return True if withdrawal success\\n    function withdraw(Group _group, uint256 _amount) external returns(bool) {\\n        GroupInfo memory _groupInfo = groupToInfo[_group];\\n\\n        uint256 _senderIndex = _getSenderIndexInGroup(_groupInfo);\\n\\n        uint256 _availableToWithdraw = _getAvailableToWithdraw(_groupInfo);\\n\\n        uint256 _amountToWithdraw = _amount \\u003e _availableToWithdraw ? _availableToWithdraw : _amount;\\n        require(_amountToWithdraw != 0, \\\"[E-51] - Amount to withdraw is zero.\\\");\\n\\n        groupToInfo[_group].balances[_senderIndex] = (_groupInfo.balances[_senderIndex]).sub(_amountToWithdraw);\\n\\n        return token.transfer(msg.sender, _amountToWithdraw);\\n    }\\n\\n    /// @notice Function for external call. See _getWithdrawPercent\\n    /// @param _group Group number\\n    function getWithdrawPercent(Group _group) external view returns(uint256) {\\n        GroupInfo memory _groupInfo = groupToInfo[_group];\\n        return _getWithdrawPercent(_groupInfo);\\n    }\\n\\n    /// @notice Get total percent for group depending on the number of days elapsed after contract deploy.\\n    /// @notice For example, percent for first 30 days - 15%, all next 30 days - 5%, return 25% after 90 days.\\n    /// @param _groupInfo Structure with group info\\n    function _getWithdrawPercent(GroupInfo memory _groupInfo) private view returns(uint256) {\\n        uint256 _index = 0;\\n        uint256 _timePerIndex = 30 days;\\n        uint256 _deployTime = deployTime;\\n\\n        while(_deployTime + _timePerIndex * (_index + 1) \\u003c= block.timestamp) {\\n            _index++;\\n        }\\n\\n        // Return 1 if last month is passed\\n        if (_groupInfo.percents.length - 1 \\u003c= _index) return getDecimal();\\n\\n        uint256 _monthWithdrawPercent = 0;\\n        for (uint256 i = 0; i \\u003c= _index; i++) {\\n            _monthWithdrawPercent = _monthWithdrawPercent.add(_groupInfo.percents[i]);\\n        }\\n\\n        uint256 _daysFromDeploy = (block.timestamp).sub(_deployTime).div(24 * 3600).mod(30);\\n        uint256 _daysWithdrawPercent = (_groupInfo.percents[_index + 1]).mul(_daysFromDeploy).div(30);\\n\\n        return _monthWithdrawPercent.add(_daysWithdrawPercent);\\n    }\\n\\n    /// @notice Function for external call. See _getWithdrawPercent.\\n    /// @param _group Group number\\n    function getAvailableToWithdraw(Group _group) external view returns(uint256) {\\n        GroupInfo memory _groupInfo = groupToInfo[_group];\\n        return _getAvailableToWithdraw(_groupInfo);\\n    }\\n\\n    /// @param _groupInfo Structure with group info\\n    /// @return Amount that user can withdraw.\\n    function _getAvailableToWithdraw(GroupInfo memory _groupInfo) private view returns(uint256) {\\n        uint256 _withdrawPercent = _getWithdrawPercent(_groupInfo);\\n        uint256 _senderIndex = _getSenderIndexInGroup(_groupInfo);\\n\\n        uint256 _availableToWithdraw = _withdrawPercent.mul(_groupInfo.balancesBase[_senderIndex]).div(getDecimal());\\n        uint256 _alreadyWithdraw = (_groupInfo.balancesBase[_senderIndex]).sub(_groupInfo.balances[_senderIndex]);\\n\\n        return _availableToWithdraw.sub(_alreadyWithdraw);\\n    }\\n\\n    /// @param _groupInfo Structure with group info\\n    /// @return Sender index that corresponds to the user balance and user balanceBase\\n    function _getSenderIndexInGroup(GroupInfo memory _groupInfo) private view returns(uint256) {\\n        bool _isAddressExistInGroup = false;\\n        uint256 _senderIndex = 0;\\n\\n        for (uint256 i = 0; i \\u003c _groupInfo.addresses.length; i++) {\\n            if (_groupInfo.addresses[i] == msg.sender) {\\n                _isAddressExistInGroup = true;\\n                _senderIndex = i;\\n                break;\\n            }\\n        }\\n        require(_isAddressExistInGroup, \\u0027[E-55] - Address not found in selected group.\\u0027);\\n\\n        return _senderIndex;\\n    }\\n\\n    /// @notice Decimal for contract\\n    function getDecimal() private pure returns (uint256) {\\n        return 10 ** 27;\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"deployTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Root.Group\",\"name\":\"_group\",\"type\":\"uint8\"}],\"name\":\"getAvailableToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Root.Group\",\"name\":\"_group\",\"type\":\"uint8\"}],\"name\":\"getWithdrawPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesBase\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percents\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"internalType\":\"struct Root.GroupInfo\",\"name\":\"_group\",\"type\":\"tuple\"},{\"internalType\":\"enum Root.Group\",\"name\":\"_groupNumber\",\"type\":\"uint8\"}],\"name\":\"loadGroupInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Root.Group\",\"name\":\"_group\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Root","CompilerVersion":"v0.7.2+commit.51b20bc0","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"0000000000000000000000003e8ffc8c3cb0db3081df85dec91b63abbbe99f71","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://66c4b673d6c508c22745cda19800b40b89d8bcfda6a476865c651677fada7d89"}]}