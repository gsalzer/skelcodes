{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\n// Simple public version of the TokenWell concept\r\n// (public means anyone can pump)\r\n// SPDX-License-Identifier: Apache-2.0\r\n// heckles to @deanpierce\r\n//\r\n// This instance intended as a public GST faucet\r\n\r\ncontract TokenWell {\r\n    \r\n    address public token = 0x382f5DfE9eE6e309D1B9D622735e789aFde6BADe; // GST\r\n    //address public token = 0xaD6D458402F60fD3Bd25163575031ACDce07538D; // ropDAI (testing)\r\n    ERC20 erc20 = ERC20(token);\r\n\r\n    //address public owner = 0x7ab874Eeef0169ADA0d225E9801A3FfFfa26aAC3; // me\r\n    //mapping (address => bool) public pumpers;\r\n\r\n    uint public lastPumpTime = 0;\r\n    uint public interval = 60*10; // 10 minutes\r\n\r\n    uint public flowRate = 1;\r\n    uint public flowGuage = 1000;\r\n\r\n    function getBalance() public view returns(uint balance) {\r\n        balance = erc20.balanceOf(address(this));\r\n    }\r\n    \r\n    function pump() public returns(uint balance) {\r\n    //    require(pumpers[msg.sender],\"NOT YOU\"); // only pumpers may get free tokens\r\n        require((now-lastPumpTime)>interval, \"TOO SOON\"); // enforce time interval between pumps\r\n        lastPumpTime = now;\r\n        \r\n        balance = erc20.balanceOf(address(this));\r\n        erc20.transfer(msg.sender,balance/flowGuage*flowRate); // send 0.1% of the current balance\r\n    }\r\n    \r\n    /*\r\n    function transferOwnership(address newOwner) public {\r\n        require(msg.sender==owner,\"NOT YOU\");\r\n        owner = newOwner;\r\n    }\r\n    \r\n    function addPumper(address newAddr) public {\r\n        require(msg.sender==owner,\"NOT YOU\");\r\n        pumpers[newAddr]=true;\r\n    }\r\n    \r\n    function delPumper(address badAddr) public {\r\n        require(msg.sender==owner,\"NOT YOU\");\r\n        pumpers[badAddr]=false;\r\n    }\r\n    */\r\n}\r\n\r\n\r\ninterface ERC20{\r\n    //function approve(address spender, uint256 value)external returns(bool);\r\n    //function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n}","ABI":"[{\"inputs\":[],\"name\":\"flowGuage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPumpTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pump\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TokenWell","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3a3d40897a66d86f3d061419817cebde0861af592be90053cef93cd983c4d4ce"}]}