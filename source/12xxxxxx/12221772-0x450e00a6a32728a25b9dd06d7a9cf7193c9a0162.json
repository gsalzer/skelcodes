{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: https://github.com/lendroidproject/protocol.2.0/blob/master/LICENSE.md\r\n\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Pausable.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: contracts/heartbeat/Pacemaker.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n/** @title Pacemaker\r\n    @author Lendroid Foundation\r\n    @notice Smart contract based on which various events in the Protocol take place\r\n    @dev Audit certificate : https://certificate.quantstamp.com/view/lendroid-whalestreet\r\n*/\r\n\r\n\r\n// solhint-disable-next-line\r\nabstract contract Pacemaker {\r\n\r\n    using SafeMath for uint256;\r\n    uint256 constant public HEART_BEAT_START_TIME = 1607212800;// 2020-12-06 00:00:00 UTC (UTC +00:00)\r\n    uint256 constant public EPOCH_PERIOD = 8 hours;\r\n\r\n    /**\r\n        @notice Displays the epoch which contains the given timestamp\r\n        @return uint256 : Epoch value\r\n    */\r\n    function epochFromTimestamp(uint256 timestamp) public pure returns (uint256) {\r\n        if (timestamp > HEART_BEAT_START_TIME) {\r\n            return timestamp.sub(HEART_BEAT_START_TIME).div(EPOCH_PERIOD).add(1);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n        @notice Displays timestamp when a given epoch began\r\n        @return uint256 : Epoch start time\r\n    */\r\n    function epochStartTimeFromTimestamp(uint256 timestamp) public pure returns (uint256) {\r\n        if (timestamp <= HEART_BEAT_START_TIME) {\r\n            return HEART_BEAT_START_TIME;\r\n        } else {\r\n            return HEART_BEAT_START_TIME.add((epochFromTimestamp(timestamp).sub(1)).mul(EPOCH_PERIOD));\r\n        }\r\n    }\r\n\r\n    /**\r\n        @notice Displays timestamp when a given epoch will end\r\n        @return uint256 : Epoch end time\r\n    */\r\n    function epochEndTimeFromTimestamp(uint256 timestamp) public pure returns (uint256) {\r\n        if (timestamp < HEART_BEAT_START_TIME) {\r\n            return HEART_BEAT_START_TIME;\r\n        } else if (timestamp == HEART_BEAT_START_TIME) {\r\n            return HEART_BEAT_START_TIME.add(EPOCH_PERIOD);\r\n        } else {\r\n            return epochStartTimeFromTimestamp(timestamp).add(EPOCH_PERIOD);\r\n        }\r\n    }\r\n\r\n    /**\r\n        @notice Calculates current epoch value from the block timestamp\r\n        @dev Calculates the nth 8-hour window frame since the heartbeat's start time\r\n        @return uint256 : Current epoch value\r\n    */\r\n    function currentEpoch() public view returns (uint256) {\r\n        return epochFromTimestamp(block.timestamp);// solhint-disable-line not-rely-on-time\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/IToken0.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n/**\r\n * @dev Required interface of a Token0 compliant contract.\r\n */\r\ninterface IToken0 is IERC20 {\r\n    function mint(address account, uint256 amount) external;\r\n\r\n    function burn(uint256 amount) external;\r\n\r\n    function burnFrom(address account, uint256 amount) external;\r\n}\r\n\r\n// File: contracts/IVault.sol\r\n\r\npragma solidity 0.7.5;\r\npragma abicoder v2;\r\n\r\n\r\n/**\r\n * @dev Required interface of a Vault compliant contract.\r\n */\r\ninterface IVault {\r\n    function lockVault() external;\r\n\r\n    function unlockVault() external;\r\n\r\n    function safeAddAsset(address[] calldata tokenAddresses, uint256[] calldata tokenIds,\r\n            string[] calldata categories) external;\r\n\r\n    function safeTransferAsset(uint256[] calldata assetIds) external;\r\n\r\n    function escapeHatchERC721(address tokenAddress, uint256 tokenId) external;\r\n\r\n    function setDecentralandOperator(address registryAddress, address operatorAddress,\r\n        uint256 assetId) external;\r\n\r\n    function transferOwnership(address newOwner) external;\r\n\r\n    function totalAssetSlots() external view returns (uint256);\r\n\r\n    function onERC721Received(address, uint256, bytes memory) external pure returns (bytes4);\r\n\r\n}\r\n\r\n// File: contracts/SimpleBuyout.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n/** @title SimpleBuyout\r\n    @author Lendroid Foundation\r\n    @notice Smart contract representing a NFT bundle buyout\r\n    @dev Audit certificate : Pending\r\n*/\r\ncontract SimpleBuyout is Ownable, Pacemaker, Pausable {\r\n    using SafeERC20 for IERC20;\r\n    using SafeERC20 for IToken0;\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    enum BuyoutStatus { ENABLED, ACTIVE, REVOKED, ENDED }\r\n\r\n    BuyoutStatus public status;\r\n    IToken0 public token0;\r\n    //// admin\r\n    IERC20 public token2;\r\n    uint256 public startThreshold;\r\n    uint256[4] public epochs;// [startEpoch, endEpoch, durationInEpochs, bidIntervalInEpochs]\r\n    //// vault\r\n    IVault public vault;\r\n    //// governance\r\n    uint256 public stopThresholdPercent;\r\n    uint256 public currentBidToken0Staked;\r\n    mapping (address => uint256) public token0Staked;\r\n    //// end user\r\n    address public highestBidder;\r\n    uint256[3] public highestBidValues;// [highestBid, highestToken0Bid, highestToken2Bid]\r\n    //// bid and veto count\r\n    uint256 public currentBidId;\r\n    mapping (address => uint256) public lastVetoedBidId;\r\n    //// redeem\r\n    uint256 public redeemToken2Amount;\r\n    //// prevent flash loan attacks on veto/withdrawVeto logic\r\n    mapping (address => uint256) public lastVetoedBlockNumber;\r\n\r\n    uint256 constant public MINIMUM_BID_PERCENTAGE_INCREASE_ON_VETO = 108;\r\n    uint256 constant public MINIMUM_BID_TOKEN0_PERCENTAGE_REQUIRED = 1;\r\n\r\n    // Events that will be emitted on changes.\r\n    event HighestBidIncreased(address bidder, uint256 amount);\r\n    event BuyoutStarted(address bidder, uint256 amount);\r\n    event BuyoutRevoked(uint256 amount);\r\n    event BuyoutEnded(address bidder, uint256 amount);\r\n\r\n    // solhint-disable-next-line func-visibility\r\n    constructor(address token0Address, address token2Address, address vaultAddress, uint256[4] memory uint256Values) {\r\n        // input validations\r\n        require(token0Address.isContract(), \"{enableBuyout} : invalid token0Address\");\r\n        require(token2Address.isContract(), \"{enableBuyout} : invalid token2Address\");\r\n        require(vaultAddress.isContract(), \"{enableBuyout} : invalid vaultAddress\");\r\n        require(uint256Values[0] > 0, \"{enableBuyout} : startThreshold cannot be zero\");\r\n        require(uint256Values[1] > 0, \"{enableBuyout} : durationInEpochs cannot be zero\");\r\n        // uint256Values[1], aka, bidIntervalInEpochs can be zero, so no checks required.\r\n        require(uint256Values[3] > 0 && uint256Values[3] <= 100,\r\n            \"{enableBuyout} : stopThresholdPercent should be between 1 and 100\");\r\n        // set values\r\n        token0 = IToken0(token0Address);\r\n        token2 = IERC20(token2Address);\r\n        vault = IVault(vaultAddress);\r\n        startThreshold = uint256Values[0];\r\n        epochs[2] = uint256Values[1];\r\n        epochs[3] = uint256Values[2];\r\n        stopThresholdPercent = uint256Values[3];\r\n        status = BuyoutStatus.ENABLED;\r\n    }\r\n\r\n    function togglePause(bool pause) external onlyOwner {\r\n        if (pause) {\r\n            _pause();\r\n        } else {\r\n            _unpause();\r\n        }\r\n    }\r\n\r\n    function transferVaultOwnership(address newOwner) external onlyOwner whenPaused {\r\n        require(newOwner != address(0), \"{transferVaultOwnership} : invalid newOwner\");\r\n        // transfer ownership of Vault to newOwner\r\n        vault.transferOwnership(newOwner);\r\n    }\r\n\r\n    function placeBid(uint256 totalBidAmount, uint256 token2Amount) external whenNotPaused {\r\n        // verify buyout has not ended\r\n        require(status != BuyoutStatus.ENDED, \"{placeBid} : buyout has ended\");\r\n        // verify token0 and token2 amounts are sufficient to place bid\r\n        require(totalBidAmount > startThreshold, \"{placeBid} : totalBidAmount does not meet minimum threshold\");\r\n        require(token2.balanceOf(msg.sender) >= token2Amount, \"{placeBid} : insufficient token2 balance\");\r\n        require(totalBidAmount > highestBidValues[0], \"{placeBid} : there already is a higher bid\");\r\n        uint256 token0Amount = requiredToken0ToBid(totalBidAmount, token2Amount);\r\n        require(token0.balanceOf(msg.sender) >= token0Amount, \"{placeBid} : insufficient token0 balance\");\r\n        require(token0Amount >= token0.totalSupply().mul(MINIMUM_BID_TOKEN0_PERCENTAGE_REQUIRED).div(100),\r\n            \"{placeBid} : token0Amount should be at least 5% of token0 totalSupply\");\r\n        // increment bid number and reset veto count\r\n        currentBidId = currentBidId.add(1);\r\n        currentBidToken0Staked = 0;\r\n        // update endEpoch\r\n        if (status == BuyoutStatus.ACTIVE) {\r\n            // already active\r\n            require(currentEpoch() <= epochs[1], \"{placeBid} : buyout end epoch has been surpassed\");\r\n            epochs[1] = currentEpoch().add(epochs[3]);\r\n        } else {\r\n            // activate buyout process if applicable\r\n            status = BuyoutStatus.ACTIVE;\r\n            epochs[1] = currentEpoch().add(epochs[2]);\r\n        }\r\n        // set startEpoch\r\n        epochs[0] = currentEpoch();\r\n        // return highest bid to previous bidder\r\n        if (highestBidValues[1] > 0) {\r\n            token0.safeTransfer(highestBidder, highestBidValues[1]);\r\n        }\r\n        if (highestBidValues[2] > 0) {\r\n            token2.safeTransfer(highestBidder, highestBidValues[2]);\r\n        }\r\n        // set sender as highestBidder and totalBidAmount as highestBidValues[0]\r\n        highestBidder = msg.sender;\r\n        highestBidValues[0] = totalBidAmount;\r\n        highestBidValues[1] = token0Amount;\r\n        highestBidValues[2] = token2Amount;\r\n        // transfer token0 and token2 to this contract\r\n        token0.safeTransferFrom(msg.sender, address(this), token0Amount);\r\n        token2.safeTransferFrom(msg.sender, address(this), token2Amount);\r\n        // send notification\r\n        emit HighestBidIncreased(msg.sender, totalBidAmount);\r\n    }\r\n\r\n    function veto(uint256 token0Amount) external whenNotPaused {\r\n        require(token0Amount > 0, \"{veto} : token0Amount cannot be zero\");\r\n        token0Staked[msg.sender] = token0Staked[msg.sender].add(token0Amount);\r\n        uint256 vetoAmount = lastVetoedBidId[msg.sender] == currentBidId ? token0Amount : token0Staked[msg.sender];\r\n        _veto(msg.sender, vetoAmount);\r\n        token0.safeTransferFrom(msg.sender, address(this), token0Amount);\r\n    }\r\n\r\n    function extendVeto() external whenNotPaused {\r\n        uint256 token0Amount = token0Staked[msg.sender];\r\n        require(token0Amount > 0, \"{extendVeto} : no staked token0Amount\");\r\n        require(lastVetoedBidId[msg.sender] != currentBidId, \"{extendVeto} : already vetoed\");\r\n        _veto(msg.sender, token0Amount);\r\n    }\r\n\r\n    function withdrawStakedToken0(uint256 token0Amount) external {\r\n        require(lastVetoedBlockNumber[msg.sender] < block.number, \"{withdrawStakedToken0} : Flash attack!\");\r\n        require(token0Amount > 0, \"{withdrawStakedToken0} : token0Amount cannot be zero\");\r\n        require(token0Staked[msg.sender] >= token0Amount,\r\n            \"{withdrawStakedToken0} : token0Amount cannot exceed staked amount\");\r\n        // ensure Token0 cannot be unstaked if users veto on current bid has not expired\r\n        if ((status == BuyoutStatus.ACTIVE) && (currentEpoch() <= epochs[1])) {\r\n            // already active\r\n            require(lastVetoedBidId[msg.sender] != currentBidId,\r\n                \"{withdrawStakedToken0} : cannot unstake until veto on current bid expires\");\r\n        }\r\n        token0Staked[msg.sender] = token0Staked[msg.sender].sub(token0Amount);\r\n        token0.safeTransfer(msg.sender, token0Amount);\r\n    }\r\n\r\n    function endBuyout() external whenNotPaused {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(currentEpoch() > epochs[1], \"{endBuyout} : end epoch has not yet been reached\");\r\n        require(status != BuyoutStatus.ENDED, \"{endBuyout} : buyout has already ended\");\r\n        require(highestBidder != address(0), \"{endBuyout} : buyout does not have highestBidder\");\r\n        // additional safety checks\r\n        require(((highestBidValues[1] > 0) || (highestBidValues[2] > 0)),\r\n            \"{endBuyout} : highestBidder deposits cannot be 0\");\r\n        // set status\r\n        status = BuyoutStatus.ENDED;\r\n        redeemToken2Amount = highestBidValues[2];\r\n        highestBidValues[2] = 0;\r\n        // burn token0Amount\r\n        if (highestBidValues[1] > 0) {\r\n            token0.burn(highestBidValues[1]);\r\n        }\r\n        // transfer ownership of Vault to highestBidder\r\n        vault.transferOwnership(highestBidder);\r\n\r\n        emit BuyoutEnded(highestBidder, highestBidValues[0]);\r\n    }\r\n\r\n    function withdrawBid() external whenPaused {\r\n        require(highestBidder == msg.sender, \"{withdrawBid} : sender is not highestBidder\");\r\n        _resetHighestBidDetails();\r\n\r\n    }\r\n\r\n    function redeem(uint256 token0Amount) external {\r\n        require(status == BuyoutStatus.ENDED, \"{redeem} : redeem has not yet been enabled\");\r\n        require(token0.balanceOf(msg.sender) >= token0Amount, \"{redeem} : insufficient token0 amount\");\r\n        require(token0Amount > 0, \"{redeem} : token0 amount cannot be zero\");\r\n        uint256 token2Amount = token2AmountRedeemable(token0Amount);\r\n        redeemToken2Amount = redeemToken2Amount.sub(token2Amount);\r\n        // burn token0Amount\r\n        token0.burnFrom(msg.sender, token0Amount);\r\n        // send token2Amount\r\n        token2.safeTransfer(msg.sender, token2Amount);\r\n    }\r\n\r\n    function token2AmountRedeemable(uint256 token0Amount) public view returns (uint256) {\r\n        return token0Amount.mul(redeemToken2Amount).div(token0.totalSupply());\r\n    }\r\n\r\n    function requiredToken0ToBid(uint256 totalBidAmount, uint256 token2Amount) public view returns (uint256) {\r\n        uint256 token0Supply = token0.totalSupply();\r\n        require(token2Amount <= totalBidAmount, \"{requiredToken0ToBid} : token2Amount cannot exceed totalBidAmount\");\r\n        // token2Amount = threshold * ( (totalToken0Supply - token0Amount) / totalToken0Supply )\r\n        return token0Supply\r\n            .mul(\r\n                totalBidAmount\r\n                .sub(token2Amount)\r\n            ).div(totalBidAmount);\r\n    }\r\n\r\n    function _resetHighestBidDetails() internal {\r\n        uint256 token0Amount = highestBidValues[1];\r\n        uint256 token2Amount = highestBidValues[2];\r\n        if (token0Amount > 0) {\r\n            token0.safeTransfer(highestBidder, token0Amount);\r\n        }\r\n        if (token2Amount > 0) {\r\n            token2.safeTransfer(highestBidder, token2Amount);\r\n        }\r\n        // reset highestBidder\r\n        highestBidder = address(0);\r\n        // reset highestBidValues\r\n        highestBidValues[0] = 0;\r\n        highestBidValues[1] = 0;\r\n        highestBidValues[2] = 0;\r\n    }\r\n\r\n    function _veto(address sender, uint256 token0Amount) internal {\r\n        // verify buyout has not ended\r\n        require((\r\n            (status == BuyoutStatus.ACTIVE) && (currentEpoch() >= epochs[0]) && (currentEpoch() <= epochs[1])\r\n        ), \"{_veto} : buyout is not active\");\r\n        lastVetoedBlockNumber[sender] = block.number;\r\n        lastVetoedBidId[sender] = currentBidId;\r\n        uint256 updatedCurrentBidToken0Staked = currentBidToken0Staked.add(token0Amount);\r\n        if (updatedCurrentBidToken0Staked < stopThresholdPercent.mul(token0.totalSupply().div(100))) {\r\n            currentBidToken0Staked = updatedCurrentBidToken0Staked;\r\n        } else {\r\n            currentBidToken0Staked = 0;\r\n            // increase startThreshold by 8% of last bid\r\n            startThreshold = highestBidValues[0].mul(MINIMUM_BID_PERCENTAGE_INCREASE_ON_VETO).div(100);\r\n            // reset endEpoch\r\n            epochs[1] = 0;\r\n            // set status\r\n            status = BuyoutStatus.REVOKED;\r\n            _resetHighestBidDetails();\r\n            emit BuyoutRevoked(updatedCurrentBidToken0Staked);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token2Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[4]\",\"name\":\"uint256Values\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyoutEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyoutRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyoutStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HighestBidIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EPOCH_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HEART_BEAT_START_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_BID_PERCENTAGE_INCREASE_ON_VETO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_BID_TOKEN0_PERCENTAGE_REQUIRED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBidId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBidToken0Staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBuyout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"epochEndTimeFromTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"epochFromTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"epochStartTimeFromTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extendVeto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"highestBidValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highestBidder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastVetoedBidId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastVetoedBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token2Amount\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token0Amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemToken2Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token2Amount\",\"type\":\"uint256\"}],\"name\":\"requiredToken0ToBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum SimpleBuyout.BuyoutStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopThresholdPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"contract IToken0\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"token0Staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token2\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token0Amount\",\"type\":\"uint256\"}],\"name\":\"token2AmountRedeemable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferVaultOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token0Amount\",\"type\":\"uint256\"}],\"name\":\"veto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token0Amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStakedToken0\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SimpleBuyout","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c4de189abf94c57f396bd4c52ab13b954febefd80000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000e846d7ab0bfff2f0b9b9a818b845fb99c94786c20000000000000000000000000000000000000000002ff9fa4cda6dd67a000000000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000000000000c","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://86c2c4cdfc6028d942bfef60179c713fa81ed11818ae3bc526e50b822ad9f592"}]}