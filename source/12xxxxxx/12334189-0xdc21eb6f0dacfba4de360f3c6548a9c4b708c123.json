{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.7.3;\r\n\r\n//SPDX-License-Identifier: UNLICENSED\r\n// produced by the Solididy File Flattener (c) David Appleton 2018 - 2020 and beyond\r\n// contact : calistralabs@gmail.com\r\n// source  : https://github.com/DaveAppleton/SolidityFlattery\r\n// released under Apache 2.0 licence\r\n// input  /Users/daveappleton/Documents/akombalabs/trait_allocator/traits/allocate_traits.sol\r\n// flattened :  Monday, 26-Apr-21 04:37:03 UTC\r\nabstract contract IRNG {\r\n\r\n    function requestRandomNumber() external virtual returns (bytes32 requestId) ;\r\n\r\n    function isRequestComplete(bytes32 requestId) external virtual view returns (bool isCompleted) ; \r\n\r\n    function randomNumber(bytes32 requestId) external view virtual returns (uint256 randomNum) ;\r\n}\r\nlibrary Strings {\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        uint256 index = digits - 1;\r\n        temp = value;\r\n        while (temp != 0) {\r\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\r\n            temp /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\ncontract allocate_traits {\r\n    using Strings for *;\r\n\r\n    IRNG               rng;\r\n    bytes32 public     stash;\r\n    bool    public     random_processed;\r\n    bool    public     data_folder_set;\r\n    bool    public     _FuzeBlown;\r\n    string  public     baseURI;\r\n\r\n    \r\n    uint256 constant   num_og = 90;\r\n    uint256 constant   num_alphas = 900;\r\n    uint256 constant   num_founders = 9000;\r\n    uint256 public     random;\r\n    uint256 public     og_rand;\r\n    uint256 public     alpha_rand;\r\n    uint256 public     founder_rand;\r\n\r\n    event ProcessRandom();\r\n\r\n    address owner;\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner,\"Unauthorised\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _owner,IRNG _rng) {\r\n        owner = _owner;\r\n        rng = _rng;\r\n    }\r\n\r\n    function the_big_red_button() external onlyOwner {\r\n        require(!_FuzeBlown,\"You can ony use the BIG RED BUTTON if the fuzes are not blown\");\r\n        stash = rng.requestRandomNumber();\r\n        burnDataFolder();\r\n    }\r\n\r\n    function ready_to_process() public view returns (bool) {\r\n        return rng.isRequestComplete(stash);\r\n    }\r\n\r\n    function process_random() external onlyOwner {\r\n        require(_FuzeBlown,\"You need to press the BIG RED BUTTON\");\r\n        require(ready_to_process(),\"The random number is not ready yet\");\r\n        random = rng.randomNumber(stash);\r\n        uint mask = 0xffffffffffffffff; // 8 bytes or 64 bits\r\n        og_rand = (random & mask);\r\n        alpha_rand = (random >> 64) & mask;\r\n        founder_rand = (random >> 128) & mask;\r\n        random_processed = true;\r\n        emit ProcessRandom();\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) public view returns (string memory) {\r\n        require(random_processed,\"Randomization not complete\");\r\n        uint id = tokenId;\r\n        if (tokenId < 10) {\r\n            //\r\n        } else if (tokenId < 100) {\r\n            id = ((tokenId + og_rand) % 90) + 10;\r\n        } else if (tokenId < 1000) {\r\n            id = ((tokenId + alpha_rand) % 900) + 100;\r\n        } else if (tokenId < 10000){\r\n            id = ((tokenId + founder_rand) % 9000) + 1000;\r\n        }\r\n        return iTokenURI(id);\r\n    }\r\n\r\n    function setDataFolder(string memory _baseURI) external onlyOwner {\r\n        require(!_FuzeBlown,\"This data can no longer be changed\");\r\n        baseURI = _baseURI;\r\n        data_folder_set = true;\r\n    }\r\n\r\n    function burnDataFolder() internal onlyOwner {\r\n        require(data_folder_set,\"This data can no longer be changed\");\r\n        _FuzeBlown = true;\r\n    }\r\n\r\n    function iTokenURI(uint256 tokenId) public view returns (string memory) {\r\n        // reformat to directory structure as below\r\n        string memory folder = (tokenId % 100).toString(); \r\n        string memory file = tokenId.toString();\r\n        string memory slash = \"/\";\r\n        return string(abi.encodePacked(baseURI,folder,slash,file,\".json\"));\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract IRNG\",\"name\":\"_rng\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ProcessRandom\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_FuzeBlown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alpha_rand\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"data_folder_set\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"founder_rand\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"iTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"og_rand\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"process_random\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"random\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"random_processed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ready_to_process\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setDataFolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"the_big_red_button\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"allocate_traits","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000239075fc3c75a2b9075948887610a76c179362a70000000000000000000000005638bf5c73d8aa7f7926954f7415e52230efe9bd","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://95d4337f201fdb0555cd002d9e23a7df4044e33b9286942c922e5edb2ea44d53"}]}