{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-07-02\r\n*/\r\n\r\npragma solidity 0.8.6;\r\n\r\n\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@4.1.0/Address\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@4.1.0/IERC20\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@4.1.0/SafeERC20\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Base datstructures for Locker contracts set\r\n * \r\n */\r\nabstract contract LockerTypes {\r\n    //Just enum for good readability\r\n    enum LockType {ERC20, LP}\r\n    \r\n    //Lock storage record\r\n    struct  LockStorageRecord {\r\n        LockType ltype;  //Most time it equal ERC20\r\n        address token;   //Address of project token smart contract to lock\r\n        uint256 amount;  //Lock amount for all investors/lendings\r\n        VestingRecord[] vestings; //Array of vedtings records (see below)\r\n    }\r\n\r\n    //One vesting record\r\n    struct VestingRecord {\r\n        uint256 unlockTime;  //only after this moment locked amount will be available\r\n        uint256 amountUnlock;//after unlockTime this amount will be available for all investors according  percentage share\r\n        bool isNFT; //for use with futeres lock\r\n    }\r\n\r\n    //Investor's share record\r\n    struct RegistryShare {\r\n        uint256 lockIndex;     //Array index of lock record\r\n        uint256 sharePercent;  //Investors share in this lock\r\n        uint256 claimedAmount; //Already claimed amount\r\n    }\r\n\r\n}\r\n// File: Locker.sol\r\n\r\ncontract Locker is LockerTypes {\r\n    using SafeERC20 for IERC20;\r\n\r\n    string  constant name = \"Lock & Registry v0.0.2\"; \r\n    uint256 constant MAX_VESTING_RECORDS_PER_LOCK = 250;\r\n    uint256 constant TOTAL_IN_PERCENT = 10000;\r\n    LockStorageRecord[] lockerStorage;\r\n\r\n    //map from users(investors)  to locked shares\r\n    mapping(address => RegistryShare[])  public registry;\r\n\r\n    //map from lockIndex to beneficiaries list\r\n    mapping(uint256 => address[]) beneficiariesInLock;\r\n\r\n    \r\n    event NewLock(address indexed erc20, address indexed who, uint256 lockedAmount, uint256 lockId);\r\n    \r\n    /**\r\n     * @dev Any who have token balance > 0 can lock  it here.\r\n     *\r\n     * Emits a NewLock event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `_ERC20` token contract address for lock.\r\n     * - `_amount` amount of tokens to be locked.\r\n     * - `_unlockedFrom` array of unlock dates in unixtime format.\r\n     * - `_unlockAmount` array of unlock amounts.\r\n     * - `_beneficiaries` array of address for beneficiaries.\r\n     * - `_beneficiariesShares` array of beneficiaries shares, % \r\n     * - scaled on 100. so 20% = 2000, 0.1% = 10.\r\n     * Caller must approve _ERC20 tokens to this contract address before lock\r\n     */\r\n    function lockTokens(\r\n        address _ERC20, \r\n        uint256 _amount, \r\n        uint256[] memory _unlockedFrom, \r\n        uint256[] memory _unlockAmount,\r\n        address[] memory _beneficiaries,\r\n        uint256[] memory _beneficiariesShares\r\n\r\n    )\r\n        external \r\n\r\n    {\r\n        require(_amount > 0, \"Cant lock 0 amount\");\r\n        require(IERC20(_ERC20).allowance(msg.sender, address(this)) >= _amount, \"Please approve first\");\r\n        require(_getArraySum(_unlockAmount) == _amount, \"Sum vesting records must be equal lock amount\");\r\n        require(_unlockedFrom.length == _unlockAmount.length, \"Length of periods and amounts arrays must be equal\");\r\n        require(_beneficiaries.length == _beneficiariesShares.length, \"Length of beneficiaries and shares arrays must be equal\");\r\n        require(_getArraySum(_beneficiariesShares) == TOTAL_IN_PERCENT, \"Sum of shares array must be equal to 100%\");\r\n        \r\n        //Lets prepare vestings array\r\n        VestingRecord[] memory v = new VestingRecord[](_unlockedFrom.length);\r\n        for (uint256 i = 0; i < _unlockedFrom.length; i ++ ) {\r\n                v[i].unlockTime = _unlockedFrom[i];\r\n                v[i].amountUnlock = _unlockAmount[i]; \r\n        }\r\n        \r\n        //Save lock info in storage\r\n        LockStorageRecord storage lock = lockerStorage.push();\r\n        lock.ltype = LockType.ERC20;\r\n        lock.token = _ERC20;\r\n        lock.amount = _amount;\r\n\r\n\r\n        //Copying of type struct LockerTypes.VestingRecord memory[] memory \r\n        //to storage not yet supported.\r\n        //so we need this cycle\r\n        for (uint256 i = 0; i < _unlockedFrom.length; i ++ ) {\r\n            lock.vestings.push(v[i]);    \r\n        }\r\n\r\n        //Lets save _beneficiaries for this lock\r\n        for (uint256 i = 0; i < _beneficiaries.length; i ++ ) {\r\n            RegistryShare[] storage shares = registry[_beneficiaries[i]];\r\n            shares.push(RegistryShare({\r\n                lockIndex: lockerStorage.length - 1,\r\n                sharePercent: _beneficiariesShares[i],\r\n                claimedAmount: 0\r\n            }));\r\n            //Save beneficaries in one map\r\n            beneficiariesInLock[lockerStorage.length - 1].push(_beneficiaries[i]);\r\n        }\r\n\r\n        \r\n        IERC20 token = IERC20(_ERC20);\r\n        token.safeTransferFrom(msg.sender, address(this), _amount);\r\n        emit NewLock(_ERC20, msg.sender, _amount, lockerStorage.length - 1);\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Any _beneficiaries can claim their tokens after vesting lock time is expired.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `_lockIndex` array index, number of lock record in  storage. For one project lock case = 0\r\n     * - `_desiredAmount` amount of tokens to be unlocked. Only after vesting lock time is expired\r\n     * - If now date less then vesting lock time tx will be revert\r\n     */\r\n    function claimTokens(uint256 _lockIndex, uint256 _desiredAmount) external {\r\n        //Lets get our lockRecord by index\r\n        require(_lockIndex < lockerStorage.length, \"Lock record not saved yet\");\r\n        require(_desiredAmount > 0, \"Cant claim zero\");\r\n        LockStorageRecord memory lock = lockerStorage[_lockIndex];\r\n        (uint256 percentShares, uint256 wasClaimed) = \r\n            _getUserSharePercentAndClaimedAmount(msg.sender, _lockIndex);\r\n        uint256 availableAmount =\r\n            _getAvailableAmountByLockIndex(_lockIndex)\r\n            * percentShares / TOTAL_IN_PERCENT\r\n            - wasClaimed;\r\n\r\n        require(_desiredAmount <= availableAmount, \"Insufficient for now\");\r\n        availableAmount = _desiredAmount;\r\n\r\n        //update claimed amount\r\n        _decreaseAvailableAmount(msg.sender, _lockIndex, availableAmount);\r\n\r\n        //send tokens\r\n        IERC20 token = IERC20(lock.token);\r\n        token.safeTransfer(msg.sender, availableAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns array of shares for user (beneficiary).\r\n     * See LockerTypes.RegistryShare description.\r\n     * In case of one project this will only one record\r\n     * \r\n     * Requirements:\r\n     *\r\n     * - `_user` beneficiary address\r\n     */\r\n    function getUserShares(address _user) external view returns (RegistryShare[] memory) {\r\n        return _getUsersShares(_user);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns tuple (totalBalance, available balance).\r\n     * totalBalance - amount of all user shares minus already claimed\r\n     * available - user balance that available for NOW, minus already claimed\r\n     * -\r\n     * Requirements:\r\n     *\r\n     * - `_user` beneficiary address\r\n     * - `_lockIndex` array index, number of lock record in  storage. For one project lock case = 0\r\n     */\r\n    function getUserBalances(address _user, uint256 _lockIndex) external view returns (uint256, uint256) {\r\n        return _getUserBalances(_user, _lockIndex);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns LockStorageRecord data struture.See LockerTypes.LockStorageRecord description.\r\n     * -\r\n     * Requirements:\r\n     *\r\n     * - `_index` array index, number of lock record in  storage. For one project lock case = 0\r\n     */\r\n    function getLockRecordByIndex(uint256 _index) external view returns (LockStorageRecord memory){\r\n        return _getLockRecordByIndex(_index);\r\n    }\r\n\r\n    \r\n    /**\r\n     * @dev Returns LockStorage Record count, for iteration from app.\r\n     * \r\n     */\r\n    function getLockCount() external view returns (uint256) {\r\n        return lockerStorage.length;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @dev Just helper for array summ.\r\n     * \r\n     */\r\n    function getArraySum(uint256[] memory _array) external pure returns (uint256) {\r\n        return _getArraySum(_array);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    /////////// Internals           ////////////////////////////\r\n    ////////////////////////////////////////////////////////////\r\n    function _decreaseAvailableAmount(address user, uint256 _lockIndex, uint256 _amount) internal {\r\n        RegistryShare[] storage shares = registry[user];\r\n        for (uint256 i = 0; i < shares.length; i ++ ) {\r\n            if  (shares[i].lockIndex == _lockIndex) {\r\n                //It does not matter what record will update\r\n                // with same _lockIndex. but only one!!!!\r\n                shares[i].claimedAmount += _amount;\r\n                break;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function _getArraySum(uint256[] memory _array) internal pure returns (uint256) {\r\n        uint256 res = 0;\r\n        for (uint256 i = 0; i < _array.length; i++) {\r\n            res += _array[i];           \r\n        }\r\n        return res;\r\n    }\r\n\r\n    function _getAvailableAmountByLockIndex(uint256 _lockIndex) \r\n        internal \r\n        view \r\n        returns(uint256)\r\n    {\r\n        VestingRecord[] memory v = lockerStorage[_lockIndex].vestings;\r\n        uint256 res = 0;\r\n        for (uint256 i = 0; i < v.length; i ++ ) {\r\n            if  (v[i].unlockTime <= block.timestamp && !v[i].isNFT) {\r\n                res += v[i].amountUnlock;\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n\r\n\r\n    function _getUserSharePercentAndClaimedAmount(address _user, uint256 _lockIndex) \r\n        internal \r\n        view \r\n        returns(uint256 percent, uint256 claimed)\r\n    {\r\n        RegistryShare[] memory shares = registry[_user];\r\n        for (uint256 i = 0; i < shares.length; i ++ ) {\r\n            if  (shares[i].lockIndex == _lockIndex) {\r\n                //We do this cycle because one address can exist\r\n                //more then once in one lock\r\n                percent += shares[i].sharePercent;\r\n                claimed += shares[i].claimedAmount;\r\n            }\r\n        }\r\n        return (percent, claimed);\r\n    }\r\n\r\n    function _getUsersShares(address _user) internal view returns (RegistryShare[] memory) {\r\n        return registry[_user];\r\n    }\r\n\r\n    function _getUserBalances(address _user, uint256 _lockIndex) internal view returns (uint256, uint256) {\r\n\r\n        (uint256 percentShares, uint256 wasClaimed) =\r\n            _getUserSharePercentAndClaimedAmount(_user, _lockIndex);\r\n\r\n        uint256 totalBalance =\r\n        lockerStorage[_lockIndex].amount\r\n        * percentShares / TOTAL_IN_PERCENT\r\n        - wasClaimed;\r\n\r\n        uint256 available =\r\n        _getAvailableAmountByLockIndex(_lockIndex)\r\n        * percentShares / TOTAL_IN_PERCENT\r\n        - wasClaimed;\r\n\r\n        return (totalBalance, available);\r\n     }\r\n\r\n\r\n    function _getVestingsByLockIndex(uint256 _index) internal view returns (VestingRecord[] memory) {\r\n        VestingRecord[] memory v = _getLockRecordByIndex(_index).vestings;\r\n        return v;\r\n\r\n    }\r\n\r\n    function _getLockRecordByIndex(uint256 _index) internal view returns (LockStorageRecord memory){\r\n        return lockerStorage[_index];\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"NewLock\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_desiredAmount\",\"type\":\"uint256\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_array\",\"type\":\"uint256[]\"}],\"name\":\"getArraySum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getLockRecordByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"enum LockerTypes.LockType\",\"name\":\"ltype\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUnlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isNFT\",\"type\":\"bool\"}],\"internalType\":\"struct LockerTypes.VestingRecord[]\",\"name\":\"vestings\",\"type\":\"tuple[]\"}],\"internalType\":\"struct LockerTypes.LockStorageRecord\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lockIndex\",\"type\":\"uint256\"}],\"name\":\"getUserBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserShares\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lockIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LockerTypes.RegistryShare[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ERC20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_unlockedFrom\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_unlockAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_beneficiariesShares\",\"type\":\"uint256[]\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Locker","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://052805fbe46ebbc6ac21a684da6c21acffb0372f2b8cc0d0af2d5a63ad89a9f1"}]}