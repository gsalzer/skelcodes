{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/factory/StakeTONFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nimport \\\"../interfaces/IStakeContractFactory.sol\\\";\\nimport \\\"../interfaces/IStakeTONProxyFactory.sol\\\";\\n\\n/// @title A factory that creates a stake contract that can stake TON\\ncontract StakeTONFactory is IStakeContractFactory {\\n    address public stakeTONProxyFactory;\\n    address public stakeTONLogic;\\n\\n    /// @dev constructor of StakeTONFactory\\n    /// @param _stakeTONProxyFactory the StakeTONProxyFactory address used in StakeTONFactory\\n    /// @param _stakeTONLogic the StakeTONLogic address used in StakeTONFactory\\n    constructor(address _stakeTONProxyFactory, address _stakeTONLogic) {\\n        require(\\n            _stakeTONProxyFactory != address(0) && _stakeTONLogic != address(0),\\n            \\\"StakeTONFactory: zero\\\"\\n        );\\n        stakeTONProxyFactory = _stakeTONProxyFactory;\\n        stakeTONLogic = _stakeTONLogic;\\n    }\\n\\n    /// @dev Create a stake contract that can stake TON.\\n    /// @param _addr the array of [token, paytoken, vault, defiAddr]\\n    /// @param _registry  the registry address\\n    /// @param _intdata the array of [saleStartBlock, startBlock, periodBlocks]\\n    /// @param owner  owner address\\n    /// @return contract address\\n    function create(\\n        address[4] memory _addr,\\n        address _registry,\\n        uint256[3] memory _intdata,\\n        address owner\\n    ) external override returns (address) {\\n        address proxy =\\n            IStakeTONProxyFactory(stakeTONProxyFactory).deploy(\\n                stakeTONLogic,\\n                _addr,\\n                _registry,\\n                _intdata,\\n                owner\\n            );\\n\\n        require(proxy != address(0), \\\"StakeTONFactory: proxy zero\\\");\\n\\n        return proxy;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakeContractFactory.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.6;\\n\\ninterface IStakeContractFactory {\\n    /// @dev Create a stake contract that can stake TON.\\n    /// @param _addr the array of [token, paytoken, vault, defiAddr]\\n    /// @param _registry  the registry address\\n    /// @param _intdata the array of [saleStartBlock, startBlock, periodBlocks]\\n    /// @param owner  owner address\\n    /// @return contract address\\n    function create(\\n        address[4] calldata _addr,\\n        address _registry,\\n        uint256[3] calldata _intdata,\\n        address owner\\n    ) external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakeTONProxyFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface IStakeTONProxyFactory {\\n    /// @dev Create a StakeTONProxy that can stake TON.\\n    /// @param _logic the logic contract address used in proxy\\n    /// @param _addr the array of [token, paytoken, vault, defiAddr]\\n    /// @param _registry the registry address\\n    /// @param _intdata the array of [saleStartBlock, startBlock, periodBlocks]\\n    /// @param owner  owner address\\n    /// @return contract address\\n    function deploy(\\n        address _logic,\\n        address[4] calldata _addr,\\n        address _registry,\\n        uint256[3] calldata _intdata,\\n        address owner\\n    ) external returns (address);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeTONProxyFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakeTONLogic\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address[4]\",\"name\":\"_addr\",\"type\":\"address[4]\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"uint256[3]\",\"name\":\"_intdata\",\"type\":\"uint256[3]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeTONLogic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeTONProxyFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StakeTONFactory","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"100","ConstructorArguments":"0000000000000000000000004ad54f06570a2516e8126151322991aeac83c2b6000000000000000000000000153564312134ab3afa7b7939a85b6393a10994a7","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}