{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Claimable Protocol\r\n * @dev Smart contract allow recipients to claim ERC20 tokens\r\n *      according to an initial cliff and a vesting period\r\n *      Formual:\r\n *      - claimable at cliff: (cliff / vesting) * amount\r\n *      - claimable at time t after cliff (t0 = start time)\r\n *        (t - t0) / vesting * amount\r\n *      - multiple claims, last claim at t1, claim at t:\r\n *        (t - t1) / vesting * amount\r\n *        or\r\n *        (t - t0) / vesting * amount - claimed\r\n */\r\ncontract Claimable is Context {\r\n    using SafeMath for uint256;\r\n\r\n    /// @notice unique claim ticket id, auto-increment\r\n    uint256 public currentId;\r\n\r\n    /// @notice claim ticket\r\n    /// @dev payable is not needed for ERC20, need more work to support Ether\r\n    struct Ticket {\r\n      address token; // ERC20 token address\r\n      address payable grantor; // grantor address\r\n      address payable beneficiary;\r\n      uint256 cliff; // cliff time from creation in days\r\n      uint256 vesting; // vesting period in days\r\n      uint256 amount; // initial funding amount\r\n      uint256 claimed; // amount already claimed\r\n      uint256 balance; // current balance\r\n      uint256 createdAt; // begin time\r\n      uint256 lastClaimedAt;\r\n      uint256 numClaims;\r\n      bool irrevocable; // cannot be revoked\r\n      bool isRevoked; // return balance to grantor\r\n      uint256 revokedAt; // revoke timestamp\r\n    //   mapping (uint256\r\n    //     => mapping (uint256 => uint256)) claims; // claimId => lastClaimAt => amount\r\n    }\r\n\r\n    /// @dev address => id[]\r\n    /// @dev this is expensive but make it easy to create management UI\r\n    mapping (address => uint256[]) private grantorTickets;\r\n    mapping (address => uint256[]) private beneficiaryTickets;\r\n\r\n    /**\r\n     * Claim tickets\r\n     */\r\n    /// @notice id => Ticket\r\n    mapping (uint256 => Ticket) public tickets;\r\n\r\n    event TicketCreated(uint256 id, address token, uint256 amount, bool irrevocable);\r\n    event Claimed(uint256 id, address token, uint256 amount);\r\n    event Revoked(uint256 id, uint256 amount);\r\n\r\n    modifier canView(uint256 _id) {\r\n        Ticket memory ticket = tickets[_id];\r\n        require(ticket.grantor == _msgSender() || ticket.beneficiary == _msgSender(), \"Only grantor or beneficiary can view.\");\r\n        _;\r\n    }\r\n\r\n    modifier notRevoked(uint256 _id) {\r\n        Ticket memory ticket = tickets[_id];\r\n        require(ticket.isRevoked == false, \"Ticket is already revoked\");\r\n        _;\r\n    }\r\n\r\n    /// @dev show all my grantor tickets\r\n    function myGrantorTickets() public view returns (uint256[] memory myTickets) {\r\n        myTickets = grantorTickets[_msgSender()];\r\n    }\r\n\r\n    /// @dev show all my beneficiary tickets\r\n    function myBeneficiaryTickets() public view returns (uint256[] memory myTickets) {\r\n        myTickets = beneficiaryTickets[_msgSender()];\r\n    }\r\n\r\n    /// @notice special cases: cliff = period: all claimable after the cliff\r\n    function create(address _token, address payable _beneficiary, uint256 _cliff, uint256 _vesting, uint256 _amount, bool _irrevocable) public returns (uint256 ticketId) {\r\n      /// @dev sender needs to approve this contract to fund the claim\r\n      require(_beneficiary != address(0), \"Beneficiary is required\");\r\n      require(_amount > 0, \"Amount is required\");\r\n      require(_vesting >= _cliff, \"Vesting period should be equal or longer to the cliff\");\r\n      ERC20 token = ERC20(_token);\r\n      require(token.balanceOf(_msgSender()) >= _amount, \"Insufficient balance\");\r\n      require(token.transferFrom(_msgSender(), address(this), _amount), \"Funding failed.\");\r\n      ticketId = ++currentId;\r\n      Ticket storage ticket = tickets[ticketId];\r\n      ticket.token = _token;\r\n      ticket.grantor = _msgSender();\r\n      ticket.beneficiary = _beneficiary;\r\n      ticket.cliff = _cliff;\r\n      ticket.vesting = _vesting;\r\n      ticket.amount = _amount;\r\n      ticket.balance = _amount;\r\n      ticket.createdAt = block.timestamp;\r\n      ticket.irrevocable = _irrevocable;\r\n      grantorTickets[_msgSender()].push(ticketId);\r\n      beneficiaryTickets[_beneficiary].push(ticketId);\r\n      emit TicketCreated(ticketId, _token, _amount, _irrevocable);\r\n    }\r\n\r\n    /// @notice claim available balance, only beneficiary can call\r\n    function claim(uint256 _id) notRevoked(_id) public returns (bool success) {\r\n      Ticket storage ticket = tickets[_id];\r\n      require(ticket.beneficiary == _msgSender(), \"Only beneficiary can claim.\");\r\n      require(ticket.balance > 0, \"Ticket has no balance.\");\r\n      ERC20 token = ERC20(ticket.token);\r\n      uint256 amount = available(_id);\r\n      require(amount > 0, \"Nothing to claim.\");\r\n      require(token.transfer(_msgSender(), amount), \"Claim failed\");\r\n      ticket.claimed = SafeMath.add(ticket.claimed, amount);\r\n      ticket.balance = SafeMath.sub(ticket.balance, amount);\r\n      ticket.lastClaimedAt = block.timestamp;\r\n      ticket.numClaims = SafeMath.add(ticket.numClaims, 1);\r\n      emit Claimed(_id, ticket.token, amount);\r\n      success = true;\r\n    }\r\n\r\n    /// @notice revoke ticket, balance returns to grantor, only grantor can call\r\n    function revoke(uint256 _id) notRevoked(_id) public returns (bool success) {\r\n      Ticket storage ticket = tickets[_id];\r\n      require(ticket.grantor == _msgSender(), \"Only grantor can revoke.\");\r\n      require(ticket.irrevocable == false, \"Ticket is irrevocable.\");\r\n      require(ticket.balance > 0, \"Ticket has no balance.\");\r\n      ERC20 token = ERC20(ticket.token);\r\n      require(token.transfer(_msgSender(), ticket.balance), \"Return balance failed\");\r\n      ticket.isRevoked = true;\r\n      ticket.balance = 0;\r\n      emit Revoked(_id, ticket.balance);\r\n      success = true;\r\n    }\r\n\r\n\r\n    /// @dev checks the ticket has cliffed or not\r\n    function hasCliffed(uint256 _id) canView(_id) public view returns (bool) {\r\n        Ticket memory ticket = tickets[_id];\r\n        if (ticket.cliff == 0) {\r\n            return true;\r\n        }\r\n        return block.timestamp > SafeMath.add(ticket.createdAt, SafeMath.mul(ticket.cliff, 86400)); // in seconds 24 x 60 x 60\r\n    }\r\n\r\n    /// @dev calculates the available balances excluding cliff and claims\r\n    function unlocked(uint256 _id) canView(_id) public view returns (uint256 amount) {\r\n        Ticket memory ticket = tickets[_id];\r\n        uint256 timeLapsed = SafeMath.sub(block.timestamp, ticket.createdAt); // in seconds\r\n        uint256 vestingInSeconds = SafeMath.mul(ticket.vesting, 86400); // in seconds: 24 x 60 x 60\r\n        amount = SafeMath.div(\r\n            SafeMath.mul(timeLapsed, ticket.amount),\r\n            vestingInSeconds\r\n        );\r\n    }\r\n\r\n    /// @notice check available claims, only grantor or beneficiary can call\r\n    function available(uint256 _id) canView(_id) notRevoked(_id) public view returns (uint256 amount) {\r\n        Ticket memory ticket = tickets[_id];\r\n        require(ticket.balance > 0, \"Ticket has no balance.\");\r\n        if (hasCliffed(_id)) {\r\n            amount = SafeMath.sub(unlocked(_id), ticket.claimed);\r\n        } else {\r\n            amount = 0;\r\n        }\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Revoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"irrevocable\",\"type\":\"bool\"}],\"name\":\"TicketCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vesting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_irrevocable\",\"type\":\"bool\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"hasCliffed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myBeneficiaryTickets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"myTickets\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myGrantorTickets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"myTickets\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"revoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tickets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"grantor\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vesting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numClaims\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"irrevocable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRevoked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"revokedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"unlocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Claimable","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://df2aca15346bfd7bdaf3d8a0e8c52ef8428050d49e788a1f109a498c862aeaad"}]}