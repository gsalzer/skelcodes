{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.7.3;\r\n\r\n/**\r\n * This code contains elements of ERC20BurnableUpgradeable.sol https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20BurnableUpgradeable.sol\r\n * Those have been inlined for the purpose of gas optimization.\r\n */\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        return !AddressUpgradeable.isContract(address(this));\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ProofOfHumanity Interface\r\n * @dev See https://github.com/Proof-Of-Humanity/Proof-Of-Humanity.\r\n */\r\ninterface IProofOfHumanity {\r\n  function isRegistered(address _submissionID)\r\n    external\r\n    view\r\n    returns (\r\n      bool registered\r\n    );\r\n}\r\n\r\n/**\r\n * @title Universal Basic Income\r\n * @dev UBI is an ERC20 compatible token that is connected to a Proof of Humanity registry. \r\n *\r\n * Tokens are issued and drip over time for every verified submission on a Proof of Humanity registry.\r\n * The accrued tokens are updated directly on every wallet using the `balanceOf` function.\r\n * The tokens get effectively minted and persisted in memory when someone interacts with the contract doing a `transfer` or `burn`. \r\n */\r\ncontract UBI is Initializable {\r\n\r\n  /* Events */\r\n  \r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   * Also note that due to continuous minting we cannot emit transfer events from the address 0 when tokens are created.\r\n   * In order to keep consistency, we decided not to emit those events from the address 0 even when minting is done within a transaction.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n  using SafeMath for uint256;\r\n\r\n  /* Storage */\r\n  \r\n  mapping (address => uint256) private balance;\r\n\r\n  mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n  /// @dev A lower bound of the total supply. Does not take into account tokens minted as UBI by an address before it moves those (transfer or burn).\r\n  uint256 public totalSupply;\r\n  \r\n  /// @dev Name of the token.\r\n  string public name;\r\n  \r\n  /// @dev Symbol of the token.\r\n  string public symbol;\r\n  \r\n  /// @dev Number of decimals of the token.\r\n  uint8 public decimals;\r\n\r\n  /// @dev How many tokens per second will be minted for every valid human.\r\n  uint256 public accruedPerSecond;\r\n\r\n  /// @dev The contract's governor.\r\n  address public governor;\r\n  \r\n  /// @dev The Proof Of Humanity registry to reference.\r\n  IProofOfHumanity public proofOfHumanity; \r\n\r\n  /// @dev Timestamp since human started accruing.\r\n  mapping(address => uint256) public accruedSince;\r\n\r\n  /* Modifiers */\r\n\r\n  /// @dev Verifies that the sender has ability to modify governed parameters.\r\n  modifier onlyByGovernor() {\r\n    require(governor == msg.sender, \"The caller is not the governor.\");\r\n    _;\r\n  }\r\n\r\n  /* Initializer */\r\n\r\n  /** @dev Constructor.\r\n  *  @param _initialSupply for the UBI coin including all decimals.\r\n  *  @param _name for UBI coin.\r\n  *  @param _symbol for UBI coin ticker.\r\n  *  @param _accruedPerSecond How much of the token is accrued per block.\r\n  *  @param _proofOfHumanity The Proof Of Humanity registry to reference.\r\n  */\r\n  function initialize(uint256 _initialSupply, string memory _name, string memory _symbol, uint256 _accruedPerSecond, IProofOfHumanity _proofOfHumanity) public initializer {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = 18;\r\n\r\n    accruedPerSecond = _accruedPerSecond;\r\n    proofOfHumanity = _proofOfHumanity;\r\n    governor = msg.sender;\r\n\r\n    balance[msg.sender] = _initialSupply;\r\n    totalSupply = _initialSupply;\r\n  }\r\n\r\n  /* External */\r\n\r\n  /** @dev Starts accruing UBI for a registered submission.\r\n  *  @param _human The submission ID.\r\n  */\r\n  function startAccruing(address _human) external {\r\n    require(proofOfHumanity.isRegistered(_human), \"The submission is not registered in Proof Of Humanity.\");\r\n    require(accruedSince[_human] == 0, \"The submission is already accruing UBI.\");\r\n    accruedSince[_human] = block.timestamp;\r\n  }\r\n\r\n  /** @dev Allows anyone to report a submission that\r\n  *  should no longer receive UBI due to removal from the\r\n  *  Proof Of Humanity registry. The reporter receives any\r\n  *  leftover accrued UBI.\r\n  *  @param _human The submission ID.\r\n  */\r\n  function reportRemoval(address _human) external  {\r\n    require(!proofOfHumanity.isRegistered(_human), \"The submission is still registered in Proof Of Humanity.\");\r\n    require(accruedSince[_human] != 0, \"The submission is not accruing UBI.\");\r\n    uint256 newSupply = accruedPerSecond.mul(block.timestamp.sub(accruedSince[_human]));\r\n\r\n    accruedSince[_human] = 0;\r\n\r\n    balance[msg.sender] = balance[msg.sender].add(newSupply);\r\n    totalSupply = totalSupply.add(newSupply);\r\n  }\r\n\r\n  /** @dev Changes `governor` to `_governor`.\r\n  *  @param _governor The address of the new governor.\r\n  */\r\n  function changeGovernor(address _governor) external onlyByGovernor {\r\n    governor = _governor;\r\n  }\r\n\r\n  /** @dev Changes `proofOfHumanity` to `_proofOfHumanity`.\r\n  *  @param _proofOfHumanity Registry that meets interface of Proof of Humanity.\r\n  */\r\n  function changeProofOfHumanity(IProofOfHumanity _proofOfHumanity) external onlyByGovernor {\r\n    proofOfHumanity = _proofOfHumanity;\r\n  }\r\n\r\n  /** @dev Transfers `_amount` to `_recipient` and withdraws accrued tokens.\r\n  *  @param _recipient The entity receiving the funds.\r\n  *  @param _amount The amount to tranfer in base units.\r\n  */\r\n  function transfer(address _recipient, uint256 _amount) public returns (bool) {\r\n    uint256 newSupplyFrom;\r\n    if (accruedSince[msg.sender] != 0 && proofOfHumanity.isRegistered(msg.sender)) {\r\n        newSupplyFrom = accruedPerSecond.mul(block.timestamp.sub(accruedSince[msg.sender]));\r\n        totalSupply = totalSupply.add(newSupplyFrom);\r\n        accruedSince[msg.sender] = block.timestamp;\r\n    }\r\n    balance[msg.sender] = balance[msg.sender].add(newSupplyFrom).sub(_amount, \"ERC20: transfer amount exceeds balance\");\r\n    balance[_recipient] = balance[_recipient].add(_amount);\r\n    emit Transfer(msg.sender, _recipient, _amount);\r\n    return true;\r\n  }\r\n  \r\n  /** @dev Transfers `_amount` from `_sender` to `_recipient` and withdraws accrued tokens.\r\n  *  @param _sender The entity to take the funds from.\r\n  *  @param _recipient The entity receiving the funds.\r\n  *  @param _amount The amount to tranfer in base units.\r\n  */\r\n  function transferFrom(address _sender, address _recipient, uint256 _amount) public returns (bool) {\r\n    uint256 newSupplyFrom;\r\n    allowance[_sender][msg.sender] = allowance[_sender][msg.sender].sub(_amount, \"ERC20: transfer amount exceeds allowance\");\r\n    if (accruedSince[_sender] != 0 && proofOfHumanity.isRegistered(_sender)) {\r\n        newSupplyFrom = accruedPerSecond.mul(block.timestamp.sub(accruedSince[_sender]));\r\n        totalSupply = totalSupply.add(newSupplyFrom);\r\n        accruedSince[_sender] = block.timestamp;\r\n    }\r\n    balance[_sender] = balance[_sender].add(newSupplyFrom).sub(_amount, \"ERC20: transfer amount exceeds balance\");\r\n    balance[_recipient] = balance[_recipient].add(_amount);       \r\n    emit Transfer(_sender, _recipient, _amount);\r\n    return true;\r\n  }\r\n\r\n  /** @dev Approves `_spender` to spend `_amount`.\r\n  *  @param _spender The entity allowed to spend funds.\r\n  *  @param _amount The amount of base units the entity will be allowed to spend.\r\n  */\r\n  function approve(address _spender, uint256 _amount) public returns (bool) {\r\n    allowance[msg.sender][_spender] = _amount;\r\n    emit Approval(msg.sender, _spender, _amount);\r\n    return true;\r\n  }\r\n\r\n  /** @dev Increases the `_spender` allowance by `_addedValue`.\r\n  *  @param _spender The entity allowed to spend funds.\r\n  *  @param _addedValue The amount of extra base units the entity will be allowed to spend.\r\n  */  \r\n  function increaseAllowance(address _spender, uint256 _addedValue) public returns (bool) {\r\n    uint256 newAllowance = allowance[msg.sender][_spender].add(_addedValue);\r\n    allowance[msg.sender][_spender] = newAllowance;\r\n    emit Approval(msg.sender, _spender, newAllowance);\r\n    return true;\r\n  }\r\n\r\n  /** @dev Decreases the `_spender` allowance by `_subtractedValue`.\r\n  *  @param _spender The entity whose spending allocation will be reduced.\r\n  *  @param _subtractedValue The reduction of spending allocation in base units.\r\n  */  \r\n  function decreaseAllowance(address _spender, uint256 _subtractedValue) public returns (bool) {\r\n    uint256 newAllowance = allowance[msg.sender][_spender].sub(_subtractedValue, \"ERC20: decreased allowance below zero\");\r\n    allowance[msg.sender][_spender] = newAllowance;\r\n    emit Approval(msg.sender, _spender, newAllowance);\r\n    return true;\r\n  }\r\n  \r\n  /** @dev Burns `_amount` of tokens and withdraws accrued tokens.\r\n  *  @param _amount The quantity of tokens to burn in base units.\r\n  */  \r\n  function burn(uint256 _amount) public {\r\n    uint256 newSupplyFrom;\r\n    if(accruedSince[msg.sender] != 0 && proofOfHumanity.isRegistered(msg.sender)) {\r\n      newSupplyFrom = accruedPerSecond.mul(block.timestamp.sub(accruedSince[msg.sender]));\r\n      accruedSince[msg.sender] = block.timestamp;\r\n    }\r\n    balance[msg.sender] = balance[msg.sender].add(newSupplyFrom).sub(_amount, \"ERC20: burn amount exceeds balance\");\r\n    totalSupply = totalSupply.add(newSupplyFrom).sub(_amount);\r\n    emit Transfer(msg.sender, address(0), _amount);\r\n  }\r\n\r\n  /** @dev Burns `_amount` of tokens from `_account` and withdraws accrued tokens.\r\n  *  @param _account The entity to burn tokens from.\r\n  *  @param _amount The quantity of tokens to burn in base units.\r\n  */  \r\n  function burnFrom(address _account, uint256 _amount) public {\r\n    uint256 newSupplyFrom;\r\n    allowance[_account][msg.sender] = allowance[_account][msg.sender].sub(_amount, \"ERC20: burn amount exceeds allowance\");\r\n    if (accruedSince[_account] != 0 && proofOfHumanity.isRegistered(_account)) {\r\n        newSupplyFrom = accruedPerSecond.mul(block.timestamp.sub(accruedSince[_account]));\r\n        accruedSince[_account] = block.timestamp;\r\n    }\r\n    balance[_account] = balance[_account].add(newSupplyFrom).sub(_amount, \"ERC20: burn amount exceeds balance\");\r\n    totalSupply = totalSupply.add(newSupplyFrom).sub(_amount);\r\n    emit Transfer(_account, address(0), _amount);\r\n  }\r\n  \r\n  /* Getters */\r\n\r\n  /** @dev Calculates how much UBI a submission has available for withdrawal.\r\n  *  @param _human The submission ID.\r\n  *  @return accrued The available UBI for withdrawal.\r\n  */\r\n  function getAccruedValue(address _human) public view returns (uint256 accrued) {\r\n    // If this human have not started to accrue, or is not registered, return 0.\r\n    if (accruedSince[_human] == 0 || !proofOfHumanity.isRegistered(_human)) return 0;\r\n\r\n    else return accruedPerSecond.mul(block.timestamp.sub(accruedSince[_human]));\r\n  }\r\n  \r\n  /**\r\n  * @dev Calculates the current user accrued balance.\r\n  * @param _human The submission ID.\r\n  * @return The current balance including accrued Universal Basic Income of the user.\r\n  **/\r\n  function balanceOf(address _human) public view returns (uint256) {\r\n    return getAccruedValue(_human).add(balance[_human]);\r\n  }  \r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accruedPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accruedSince\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_human\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"changeGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProofOfHumanity\",\"name\":\"_proofOfHumanity\",\"type\":\"address\"}],\"name\":\"changeProofOfHumanity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_human\",\"type\":\"address\"}],\"name\":\"getAccruedValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accrued\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_accruedPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"contract IProofOfHumanity\",\"name\":\"_proofOfHumanity\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proofOfHumanity\",\"outputs\":[{\"internalType\":\"contract IProofOfHumanity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_human\",\"type\":\"address\"}],\"name\":\"reportRemoval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_human\",\"type\":\"address\"}],\"name\":\"startAccruing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UBI","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9b66de40a18fd818126707f38f2ebb1a4056b39576098a0af9d15ebfdfe00481"}]}