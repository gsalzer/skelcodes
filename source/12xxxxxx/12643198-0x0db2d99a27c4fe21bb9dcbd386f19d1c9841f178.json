{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-06-04\r\n*/\r\n\r\npragma solidity 0.4.26;\r\npragma experimental ABIEncoderV2;\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract IERC721 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n    function approve(address to, uint256 tokenId) public;\r\n\r\n    function getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n    function transfer(address to, uint256 tokenId) public;\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n\r\ncontract BuyNFT is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n    address public ceoAddress;\r\n    uint256 public Percen = 1000;\r\n    struct Price {\r\n        address tokenOwner;\r\n        uint256 Price;\r\n        uint256 fee;\r\n    }\r\n    struct Game {\r\n        mapping(uint256 => Price) tokenPrice;\r\n        uint[] tokenIdSale;\r\n        uint256 Fee;\r\n        uint256 limitFee;\r\n    }\r\n\r\n    mapping(address => Game) public Games;\r\n    address[] public arrGames;\r\n    constructor() public {\r\n        ceoAddress = msg.sender;\r\n        Games[address(0xD1E5b0FF1287aA9f9A268759062E4Ab08b9Dacbe)].Fee = 0;\r\n        Games[address(0xD1E5b0FF1287aA9f9A268759062E4Ab08b9Dacbe)].limitFee = 0;\r\n        arrGames.push(address(0xD1E5b0FF1287aA9f9A268759062E4Ab08b9Dacbe));\r\n    }\r\n    function getArrGames() public view returns(address[] memory){\r\n        return arrGames;\r\n    }\r\n    /**\r\n     * @dev Throws if called by any account other than the ceo address.\r\n     */\r\n    modifier onlyCeoAddress() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n    modifier isOwnerOf(address _game, uint256 _tokenId) {\r\n        IERC721 erc721Address = IERC721(_game);\r\n        require(erc721Address.ownerOf(_tokenId) == msg.sender);\r\n        _;\r\n    }\r\n    event Sell(address _user, address _game, uint256 _tokenId, uint256 _Price);\r\n    event Buy(address _user, address _game, uint256 _tokenId, uint256 _Price);\r\n    event _resetPrice(address _game, uint256 _tokenId);\r\n    function ownerOf(address _game, uint256 _tokenId) public view returns (address){\r\n        IERC721 erc721Address = IERC721(_game);\r\n        return erc721Address.ownerOf(_tokenId);\r\n    }\r\n\r\n    function balanceOf() public view returns (uint256){\r\n        return address(this).balance;\r\n    }\r\n    function getTokenPrice(address _game, uint256 _tokenId) public view returns (Price) {\r\n        return Games[_game].tokenPrice[_tokenId];\r\n    }\r\n    \r\n    function getApproved(address _game, uint256 _tokenId) public view returns (address){\r\n        IERC721 erc721Address = IERC721(_game);\r\n        return erc721Address.getApproved(_tokenId);\r\n    }\r\n\r\n    function setPrice(address _game, uint256 _tokenId, uint256 _price, uint256 _fee) internal {\r\n        Games[_game].tokenPrice[_tokenId] = Price(msg.sender, _price, _fee);\r\n        Games[_game].tokenIdSale.push(_tokenId);\r\n        bool flag = false;\r\n        for(uint i = 0; i< arrGames.length; i++) {\r\n            if(arrGames[i] == _game) flag = true;\r\n        }\r\n        if(!flag) arrGames.push(_game);\r\n    }\r\n\r\n    function calFee(address _game, uint256 _price) public view returns (uint fee){\r\n        fee =_price.mul(Games[_game].Fee).div(Percen);\r\n    }\r\n    function calPrice(address _game, uint256 _tokenId, uint256 _Price) public view returns(uint256 _Need) {\r\n        uint256 fee;\r\n        uint256 totalFee;\r\n        if (Games[_game].tokenPrice[_tokenId].Price < _Price) {\r\n            fee = calFee(_game, _Price.sub(Games[_game].tokenPrice[_tokenId].Price));\r\n            totalFee = calFee(_game, _Price);\r\n            if(Games[_game].tokenPrice[_tokenId].Price == 0 && fee < Games[_game].limitFee) {\r\n                _Need = Games[_game].limitFee;\r\n            } else if(Games[_game].tokenPrice[_tokenId].Price > 0 && totalFee < Games[_game].limitFee) {\r\n                _Need = 0;\r\n            } else {\r\n                if(totalFee < Games[_game].tokenPrice[_tokenId].fee) _Need = 0;\r\n                else _Need = totalFee.sub(Games[_game].tokenPrice[_tokenId].fee);\r\n            }\r\n\r\n        }\r\n    }\r\n    function sell(address _game, uint256 _tokenId, uint256 _Price) public payable isOwnerOf(_game, _tokenId) {\r\n        IERC721 erc721Address = IERC721(_game);\r\n        if(erc721Address.ownerOf(_tokenId) != Games[_game].tokenPrice[_tokenId].tokenOwner && erc721Address.ownerOf(_tokenId) != address(this)) resetPrice(_game, _tokenId);\r\n        require(Games[_game].tokenPrice[_tokenId].Price != _Price);\r\n        uint256 Need = calPrice(_game, _tokenId, _Price);\r\n\r\n        require(msg.value >= Need);\r\n        uint256 fee;\r\n        if (Games[_game].tokenPrice[_tokenId].Price < _Price) {\r\n            fee = calFee(_game, _Price.sub(Games[_game].tokenPrice[_tokenId].Price));\r\n            uint256 totalFee = calFee(_game, _Price);\r\n\r\n            if(Games[_game].tokenPrice[_tokenId].Price == 0 && fee < Games[_game].limitFee) {\r\n\r\n                fee = Games[_game].limitFee;\r\n            } else if(Games[_game].tokenPrice[_tokenId].Price > 0 && totalFee < Games[_game].limitFee) {\r\n\r\n                fee = 0;\r\n            } else {\r\n                if(totalFee < Games[_game].tokenPrice[_tokenId].fee) fee = 0;\r\n                else fee = totalFee.sub(Games[_game].tokenPrice[_tokenId].fee);\r\n            }\r\n            fee = fee.add(Games[_game].tokenPrice[_tokenId].fee);\r\n        } else {\r\n\r\n            fee = Games[_game].tokenPrice[_tokenId].fee;\r\n        }\r\n\r\n        setPrice(_game, _tokenId, _Price, fee);\r\n        emit Sell(msg.sender, _game, _tokenId, _Price);\r\n    }\r\n\r\n    function removePrice(address _game, uint256 _tokenId) public isOwnerOf(_game, _tokenId){\r\n        msg.sender.transfer(Games[_game].tokenPrice[_tokenId].fee);\r\n        if(Games[_game].tokenPrice[_tokenId].tokenOwner == address(this)) {\r\n            IERC721 erc721Address = IERC721(_game);\r\n            erc721Address.transfer(Games[_game].tokenPrice[_tokenId].tokenOwner, _tokenId);\r\n        }\r\n        resetPrice(_game, _tokenId);\r\n    }\r\n\r\n    function setLimitFee(address _game, uint256 _Fee, uint256 _limitFee) public onlyOwner {\r\n        require(_Fee >= 0 && _limitFee >= 0);\r\n        Games[_game].Fee = _Fee;\r\n        Games[_game].limitFee = _limitFee;\r\n    }\r\n    function setLimitFeeAll(address[] memory _game, uint256[] memory _Fee, uint256[] memory _limitFee) public onlyOwner {\r\n        require(_game.length == _Fee.length);\r\n        for(uint i = 0; i < _game.length; i++){\r\n            require(_Fee[i] >= 0 && _limitFee[i] >= 0);\r\n            Games[_game[i]].Fee = _Fee[i];\r\n            Games[_game[i]].limitFee = _limitFee[i];\r\n        }\r\n    }\r\n    function _withdraw(uint256 amount) internal {\r\n        require(address(this).balance >= amount);\r\n        if(amount > 0) {\r\n            msg.sender.transfer(amount);\r\n        }\r\n    }\r\n    function withdraw(uint256 amount) public onlyCeoAddress {\r\n        _withdraw(amount);\r\n    }\r\n    function cancelBussinessByGameId(address _game, uint256 _tokenId) private {\r\n        IERC721 erc721Address = IERC721(_game);\r\n        if (Games[_game].tokenPrice[_tokenId].tokenOwner == erc721Address.ownerOf(_tokenId)\r\n        || Games[_game].tokenPrice[_tokenId].tokenOwner == address(this)) {\r\n\r\n            uint256 amount = Games[_game].tokenPrice[_tokenId].fee;\r\n            if( amount > 0 && address(this).balance >= amount) {\r\n                Games[_game].tokenPrice[_tokenId].tokenOwner.transfer(amount);\r\n            }\r\n            if(Games[_game].tokenPrice[_tokenId].tokenOwner == address(this)) erc721Address.transfer(Games[_game].tokenPrice[_tokenId].tokenOwner, _tokenId);\r\n            resetPrice(_game, _tokenId);\r\n        }\r\n    }\r\n\r\n    function cancelBussinessByGame(address _game) private {\r\n        uint256[] memory _arrTokenId = Games[_game].tokenIdSale;\r\n        for (uint i = 0; i < _arrTokenId.length; i++) {\r\n            cancelBussinessByGameId(_game, _arrTokenId[i]);\r\n        }\r\n\r\n    }\r\n    function cancelBussiness() public onlyCeoAddress {\r\n        for(uint j = 0; j< arrGames.length; j++) {\r\n            address _game = arrGames[j];\r\n            cancelBussinessByGame(_game);\r\n        }\r\n        _withdraw(address(this).balance);\r\n    }\r\n\r\n    function revenue() public view returns (uint256){\r\n        uint256 fee;\r\n        for(uint j = 0; j< arrGames.length; j++) {\r\n            address _game = arrGames[j];\r\n            IERC721 erc721Address = IERC721(arrGames[j]);\r\n            for (uint i = 0; i < Games[_game].tokenIdSale.length; i++) {\r\n                uint256 _tokenId = Games[_game].tokenIdSale[i];\r\n                if (Games[_game].tokenPrice[_tokenId].tokenOwner == erc721Address.ownerOf(_tokenId)) {\r\n\r\n                    fee = fee.add(Games[_game].tokenPrice[_tokenId].fee);\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 amount = address(this).balance.sub(fee);\r\n        return amount;\r\n    }\r\n\r\n    function changeCeo(address _address) public onlyCeoAddress {\r\n        require(_address != address(0));\r\n        ceoAddress = _address;\r\n\r\n    }\r\n\r\n    function buy(address _game, uint256 tokenId) public payable {\r\n        IERC721 erc721Address = IERC721(_game);\r\n        require(erc721Address.getApproved(tokenId) == address(this));\r\n        require(Games[_game].tokenPrice[tokenId].Price > 0 && Games[_game].tokenPrice[tokenId].Price == msg.value);\r\n        erc721Address.transferFrom(Games[_game].tokenPrice[tokenId].tokenOwner, msg.sender, tokenId);\r\n        Games[_game].tokenPrice[tokenId].tokenOwner.transfer(msg.value);\r\n        resetPrice(_game, tokenId);\r\n        emit Buy(msg.sender, _game, tokenId, msg.value);\r\n    }\r\n    function _burnArrayTokenIdSale(address _game, uint256 index)  internal {\r\n        if (index >= Games[_game].tokenIdSale.length) return;\r\n\r\n        for (uint i = index; i<Games[_game].tokenIdSale.length-1; i++){\r\n            Games[_game].tokenIdSale[i] = Games[_game].tokenIdSale[i+1];\r\n        }\r\n        delete Games[_game].tokenIdSale[Games[_game].tokenIdSale.length-1];\r\n        Games[_game].tokenIdSale.length--;\r\n    }\r\n\r\n    function resetPrice(address _game, uint256 _tokenId) private {\r\n        Games[_game].tokenPrice[_tokenId] = Price(address(0), 0, 0);\r\n        for (uint8 i = 0; i < Games[_game].tokenIdSale.length; i++) {\r\n            if (Games[_game].tokenIdSale[i] == _tokenId) {\r\n                _burnArrayTokenIdSale(_game, i);\r\n            }\r\n        }\r\n        emit _resetPrice(_game, _tokenId);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_game\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_game\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"calFee\",\"outputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_game\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"revenue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_game\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"removePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_game\",\"type\":\"address\"},{\"name\":\"_Fee\",\"type\":\"uint256\"},{\"name\":\"_limitFee\",\"type\":\"uint256\"}],\"name\":\"setLimitFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_game\",\"type\":\"address[]\"},{\"name\":\"_Fee\",\"type\":\"uint256[]\"},{\"name\":\"_limitFee\",\"type\":\"uint256[]\"}],\"name\":\"setLimitFeeAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_game\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_Price\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getArrGames\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Percen\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"arrGames\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_game\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_Price\",\"type\":\"uint256\"}],\"name\":\"calPrice\",\"outputs\":[{\"name\":\"_Need\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changeCeo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_game\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenPrice\",\"outputs\":[{\"components\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"Price\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_game\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelBussiness\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Games\",\"outputs\":[{\"name\":\"Fee\",\"type\":\"uint256\"},{\"name\":\"limitFee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_game\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_Price\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_game\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_Price\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_game\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"_resetPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BuyNFT","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://eac081941793ddd869981be9a1e55db575c92915124b6b4fab3284af25ea77b7"}]}