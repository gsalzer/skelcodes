{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event EtherTransfer(address toAddress, uint256 amount);\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b,\"Invalid values\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0,\"Invalid values\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a,\"Invalid values\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a,\"Invalid values\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0,\"Invalid values\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract MYLPowerball {\r\n    using SafeMath for uint256;\r\n    address private _owner;                                 // Variable for Owner of the Contract.\r\n    uint256 private _ticketPrice;                           // Variable for price of each ticket (set as 0.01 eth)\r\n    uint256 private _purchaseTokenAmount;                   // variable for Amount of tokens per ticket purchase (set as 10 lotto)\r\n    // address private _buyerPoolAddress;                      // Variable for pool address for tokens for ticket purchase\r\n    \r\n    IERC20 lottoCoin;\r\n\r\n\r\n\r\n    constructor (uint256 ticketPrice, uint256 purchaseTokenAmount, address owner, address _poolToken) public {\r\n        _ticketPrice = ticketPrice;\r\n        _purchaseTokenAmount = purchaseTokenAmount;\r\n        _owner = owner;\r\n        lottoCoin = IERC20(_poolToken);\r\n    }\r\n\r\n    /*----------------------------------------------------------------------------\r\n     * Functions for owner\r\n     *----------------------------------------------------------------------------\r\n     */\r\n\r\n    /**\r\n    * @dev get address of smart contract owner\r\n    * @return address of owner\r\n    */\r\n    function getowner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n    * @dev modifier to check if the message sender is owner\r\n    */\r\n    modifier onlyOwner() {\r\n        require(isOwner(),\"You are not authenticate to make this transfer\");\r\n        _;\r\n    }\r\n    \r\n    // modifier onlyairdropAddress(){\r\n    //     require(_airdropETHAddress,\"\");\r\n    //     _;\r\n    // }\r\n\r\n    /**\r\n     * @dev Internal function for modifier\r\n     */\r\n    function isOwner() internal view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer ownership of the smart contract. For owner only\r\n     * @return request status\r\n      */\r\n    function transferOwnership(address newOwner) public onlyOwner returns (bool){\r\n        _owner = newOwner;\r\n        return true;\r\n    }\r\n\r\n\r\n    \r\n    //Contract for managing business logic for this application \r\n    \r\n    mapping (uint256 => address[]) private allAddressList;                                      //list of all address participating in a saleId\r\n    mapping (uint256 => address[]) private winner;                                              //winner address for a saleId\r\n    mapping (uint256 => uint256) private winningPowerBallNumber;                                //winning powerball number by saleId\r\n    mapping (uint256 => mapping (address => uint256[])) private ticketNumberByAddress;          //user ticket number for a saleId\r\n    mapping (uint256 => mapping (uint256 => address[])) private addressesByTicketNumber;        //list of addresses for ticketId\r\n    mapping (uint256 => mapping (address => uint256)) private totalSaleAmountByAddAndSaleID;    //list of addresses for ticketId\r\n    mapping (uint256 => uint256) private totalSaleAmount;                                       //total collection for a saleId\r\n    mapping (uint256 => uint256[]) private winningAmount;                                       //winning price for a saleId\r\n    mapping (uint256 => uint256) private saleStartTimeStamp;                                    //start timestamp for a saleId\r\n    mapping (uint256 => uint256) private saleEndTimeStamp;                                      //end timestamp for a  saleId\r\n    mapping (uint256 => uint256) private saleRunningStatus;                                     //sale running status for a saleId\r\n    mapping (uint256 => uint256[]) private winningNumber;                                       //winning lottery number for a saleId\r\n    mapping (uint256 => uint256) private saleParticipants;                                      //total number sales per sale session\r\n    \r\n    uint256 private elapsedTime;                                                                //variable to set time for powerball winning \r\n    uint256 private saleIdNow = 1;                                                              //saleIdNow for sale now \r\n    address[] private AllParticipantAddresses;                                                  //list of all participants participated in the sale\r\n    uint256 private totalSaleAmountForAllSales;                                                 //total amount including all sales\r\n    uint256 private totalDonation;                                                              //total donated amount\r\n    uint256[] public checkerEmpty;\r\n    \r\n\r\n    // //Internal function for checking values for purchaseTicket\r\n    // function getNumber(uint256 _number) internal pure returns(uint256){\r\n    //   return  _number.div(6);\r\n    // }\r\n\r\n    \r\n    /**\r\n     * @dev InitiateSmartContractValue \r\n    */\r\n    function initiateSmartContractValue(uint256 _elapseTime) public onlyOwner returns(bool){\r\n        saleStartTimeStamp[saleIdNow] = now;                                                        //Initiate time\r\n        saleParticipants[saleIdNow] = 0;                                                            //Initiate sale participants\r\n        elapsedTime = _elapseTime;                                                                  //Time for next sale                                                        \r\n        return true;  \r\n    }\r\n    \r\n    /**\r\n     * @dev perform purchase\r\n     * @param _ticketNumbers ticket number from the list in application\r\n    */\r\n    function purchaseTicket(uint256 _ticketNumbers, uint256 ticketCount) external payable returns(bool){\r\n            if(_ticketNumbers == 0){\r\n                totalDonation = totalDonation + 1;\r\n                return true;\r\n            }\r\n            require(msg.value >= ticketCount.mul(_ticketPrice), \"Insufficient eth value\");\r\n            require(_ticketNumbers.div(10**(ticketCount.mul(12))) ==0 && _ticketNumbers.div(10**(ticketCount.mul(12).sub(2))) >0, \"Invalid ticket value/count\" );\r\n       \r\n            uint256 saleId;\r\n            if((saleStartTimeStamp[saleIdNow] + elapsedTime) > now){\r\n                 saleId = saleIdNow;\r\n            } else {\r\n                 saleId = saleIdNow.add(1);\r\n            }\r\n    \r\n          AllParticipantAddresses.push(msg.sender);\r\n          totalSaleAmount[saleId] = totalSaleAmount[saleId] + msg.value;\r\n          totalSaleAmountForAllSales = totalSaleAmountForAllSales + msg.value;\r\n          totalSaleAmountByAddAndSaleID[saleId][msg.sender] = totalSaleAmountByAddAndSaleID[saleId][msg.sender] + msg.value;\r\n       \r\n            ticketNumberByAddress[saleId][msg.sender].push(_ticketNumbers);\r\n            \r\n        if(ticketCount == 5){\r\n            lottoCoin.transfer(msg.sender,_purchaseTokenAmount);\r\n            \r\n          allAddressList[saleId].push(msg.sender);\r\n          saleParticipants[saleId]  = saleParticipants[saleId] + 1;\r\n          return true;\r\n           \r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev declare winner for a sale session\r\n    */\r\n    function declareWinner(uint256[] calldata _winningSequence, uint256 _powerballNumber, address payable[] calldata _winnerAddressArray, uint256[] calldata _winnerPositions, uint256[]  calldata _winnerAmountInWei) external payable onlyOwner returns(bool){\r\n        require(_winnerAddressArray.length == _winnerAmountInWei.length || _winnerAmountInWei.length == _winnerPositions.length, \"Invalid winner declaration data\");\r\n        for(uint256 i=0;i<_winnerAddressArray.length;i++){\r\n             winner[saleIdNow].push(_winnerAddressArray[i]);\r\n             winningAmount[saleIdNow].push(_winnerAmountInWei[i]);\r\n            _winnerAddressArray[i].transfer(_winnerAmountInWei[i]);\r\n        }\r\n        for(uint256 j=0;j<_winningSequence.length;j++){\r\n            winningNumber[saleIdNow].push(_winningSequence[j]);\r\n        }\r\n        winningPowerBallNumber[saleIdNow] =  _powerballNumber;\r\n        saleEndTimeStamp[saleIdNow] = now;\r\n        saleStartTimeStamp[saleIdNow+1] = now;\r\n        saleIdNow = saleIdNow +1;\r\n    }\r\n    \r\n    /**\r\n     * @dev set elapsed time for powerball\r\n    */\r\n    function setElapsedTime(uint256 time) public onlyOwner returns(bool){\r\n        require(time > 0,\"Invalid time provided, Please try Again!!\");\r\n        elapsedTime = time;\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev get elapsed time for powerball\r\n    */\r\n    function getElapsedTime() external view returns(uint256){\r\n        return elapsedTime;\r\n    }\r\n    \r\n    /**\r\n     * @dev get winning powerball number\r\n    */\r\n    function getWinningPowerballNumberBySaleId(uint256 _saleId) external view returns(uint256){\r\n        return winningPowerBallNumber[_saleId];\r\n    }\r\n    \r\n    /**\r\n     * @dev get current saleId for this session\r\n    */\r\n    function getSaleIdNow() external view returns(uint256){\r\n        return saleIdNow;\r\n    }\r\n\r\n    /**\r\n     * @dev withdraw all eth from the smart contract\r\n    */\r\n    function withdrawETHFromContract(uint256 _savingsValue,address payable _savingsReceiver, uint256 _opexValue, address payable _opexReceiver) external onlyOwner returns(bool){\r\n        _savingsReceiver.transfer(_savingsValue);\r\n        _opexReceiver.transfer(_opexValue);\r\n        return true;\r\n    }\r\n    \r\n    function withdrawTokenFromContract(address tokenAddress, uint256 amount, address receiver) external onlyOwner {\r\n        require(IERC20(tokenAddress).balanceOf(address(this))>= amount, \"Insufficient amount to transfer\");\r\n        IERC20(tokenAddress).transfer(receiver,amount);\r\n    }\r\n\r\n    /**\r\n     * @dev get end timeStamp by sale session \r\n    */\r\n    function getEndTime(uint256 _saleId) external view returns(uint256){\r\n        return saleEndTimeStamp[_saleId] ;\r\n    }\r\n\r\n    /**\r\n     * @dev get start timeStamp by sale session \r\n    */\r\n    function getStartTime(uint256 _saleId) external view returns(uint256){\r\n        return saleStartTimeStamp[_saleId+1];\r\n    }\r\n    \r\n    /**\r\n     * @dev get winning number by sale ID\r\n    */\r\n    function getWinningNumber(uint256 _saleId) external view returns(uint256[] memory){\r\n        return winningNumber[_saleId];\r\n    }\r\n\r\n    /**\r\n     * @dev get winning amount by sale ID\r\n    */\r\n    function getWinningAmount(uint256 _saleId) external view returns(uint256[] memory){\r\n        return winningAmount[_saleId];\r\n    }\r\n    \r\n\r\n    /**\r\n     * @dev get winning address by sale ID\r\n    */\r\n    function getWinningAddress(uint256 _saleId) external view returns(address[] memory){\r\n        return winner[_saleId];\r\n    }\r\n    \r\n\r\n    /**\r\n     * @dev get list of all addresses in the Sale\r\n    */\r\n    function getAllSaleAddressesBySaleID(uint256 _saleId) external view returns(address[] memory){\r\n        return allAddressList[_saleId];\r\n    }\r\n\r\n    /**\r\n     * @dev get list of all addresses in the contract\r\n    */\r\n    function getAllParticipantAddresses() external view returns(address[] memory){\r\n        return AllParticipantAddresses;\r\n    }\r\n\r\n    /**\r\n     * @dev get total sale amount for a sale session\r\n    */\r\n    function getTotalSaleAmountBySaleID(uint256 _saleId) external view returns(uint256){\r\n        return totalSaleAmount[_saleId];\r\n    }\r\n\r\n    /**\r\n     * @dev get total sale amount for all sale session\r\n    */\r\n    function getTotalSaleAmountForAllSale() external view returns(uint256){\r\n        return totalSaleAmountForAllSales;\r\n    }\r\n\r\n    /**\r\n     * @dev get total number of participants by saleId\r\n    */\r\n    function getParticipantCountBySaleId(uint256 _saleId) external view returns(uint256){\r\n        return saleParticipants[_saleId];\r\n    }\r\n\r\n    /**\r\n     * @dev get price of one ticket\r\n    */\r\n    function getPriceOfOneTicket() external view returns(uint256){\r\n        return _ticketPrice;\r\n    }\r\n\r\n    /**\r\n     * @dev set price of one ticket by owner only\r\n     * @param _newPrice New price of each token\r\n    */\r\n    function setPriceOfOneTicket(uint256 _newPrice) external onlyOwner returns(bool){\r\n        _ticketPrice = _newPrice;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev get ticket number for the given address\r\n     * @param _saleId Sale id for the sale session\r\n     * @param _add New price of each token\r\n    */\r\n    function getticketNumberByAddress(uint256 _saleId, address _add) external view returns(uint256[] memory){\r\n        return ticketNumberByAddress[_saleId][_add];\r\n    }\r\n\r\n    /**\r\n     * @dev get amount of token sent per ticket purchase\r\n    */\r\n    function getpurchaseTokenAmount() external view returns(uint256){\r\n        return _purchaseTokenAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev set amount of token sent per ticket purchase\r\n    */\r\n    function setpurchaseTokenAmount(uint256 purchaseTokenAmount) external onlyOwner returns(bool){\r\n        _purchaseTokenAmount = purchaseTokenAmount;\r\n        return true;\r\n    }\r\n\r\n   \r\n\r\n    /**\r\n     * @dev get total eth by user address and saleId \r\n    */\r\n    function getTotalSaleAmountByAddAndSaleID(uint256 _saleId, address _userAddress) external view returns(uint256){\r\n        return totalSaleAmountByAddAndSaleID[_saleId][_userAddress];\r\n    }\r\n \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"checkerEmpty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_winningSequence\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_powerballNumber\",\"type\":\"uint256\"},{\"internalType\":\"address payable[]\",\"name\":\"_winnerAddressArray\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_winnerPositions\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_winnerAmountInWei\",\"type\":\"uint256[]\"}],\"name\":\"declareWinner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllParticipantAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"getAllSaleAddressesBySaleID\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getElapsedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"getEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"getParticipantCountBySaleId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPriceOfOneTicket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSaleIdNow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"getStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getTotalSaleAmountByAddAndSaleID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"getTotalSaleAmountBySaleID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalSaleAmountForAllSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"getWinningAddress\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"getWinningAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"getWinningNumber\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"getWinningPowerballNumberBySaleId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getowner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getpurchaseTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"getticketNumberByAddress\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_elapseTime\",\"type\":\"uint256\"}],\"name\":\"initiateSmartContractValue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ticketNumbers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketCount\",\"type\":\"uint256\"}],\"name\":\"purchaseTicket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setElapsedTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setPriceOfOneTicket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"purchaseTokenAmount\",\"type\":\"uint256\"}],\"name\":\"setpurchaseTokenAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_savingsValue\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_savingsReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_opexValue\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_opexReceiver\",\"type\":\"address\"}],\"name\":\"withdrawETHFromContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdrawTokenFromContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MYLPowerball","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000008ac7230489e80000000000000000000000000000d1f15ca80b6bbcbeeb77251e635726f128933ed7000000000000000000000000c110e8d4d7f4a319a1a8f16ca94b3afde7665595","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://de2288e79957032d76f22db9d97fd8251a2ef95d5e50542004172d2713b9c3e6"}]}