{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/dependencies/open-zeppelin/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport './Context.sol';\\nimport './Strings.sol';\\nimport './ERC165.sol';\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n  function grantRole(bytes32 role, address account) external;\\n\\n  function revokeRole(bytes32 role, address account) external;\\n\\n  function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Context, IAccessControlUpgradeable, ERC165 {\\n  struct RoleData {\\n    mapping(address => bool) members;\\n    bytes32 adminRole;\\n  }\\n\\n  mapping(bytes32 => RoleData) private _roles;\\n\\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n  /**\\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n   *\\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n   * {RoleAdminChanged} not being emitted signaling this.\\n   *\\n   * _Available since v3.1._\\n   */\\n  event RoleAdminChanged(\\n    bytes32 indexed role,\\n    bytes32 indexed previousAdminRole,\\n    bytes32 indexed newAdminRole\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is granted `role`.\\n   *\\n   * `sender` is the account that originated the contract call, an admin role\\n   * bearer except when using {_setupRole}.\\n   */\\n  event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n  /**\\n   * @dev Emitted when `account` is revoked `role`.\\n   *\\n   * `sender` is the account that originated the contract call:\\n   *   - if using `revokeRole`, it is the admin role bearer\\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n   */\\n  event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n  /**\\n   * @dev Modifier that checks that an account has a specific role. Reverts\\n   * with a standardized message including the required role.\\n   *\\n   * The format of the revert reason is given by the following regular expression:\\n   *\\n   *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n   *\\n   * _Available since v4.1._\\n   */\\n  modifier onlyRole(bytes32 role) {\\n    _checkRole(role, _msgSender());\\n    _;\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return\\n      interfaceId == type(IAccessControlUpgradeable).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `role`.\\n   */\\n  function hasRole(bytes32 role, address account) public view override returns (bool) {\\n    return _roles[role].members[account];\\n  }\\n\\n  /**\\n   * @dev Revert with a standard message if `account` is missing `role`.\\n   *\\n   * The format of the revert reason is given by the following regular expression:\\n   *\\n   *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n   */\\n  function _checkRole(bytes32 role, address account) internal view {\\n    if (!hasRole(role, account)) {\\n      revert(\\n        string(\\n          abi.encodePacked(\\n            'AccessControl: account ',\\n            Strings.toHexString(uint160(account), 20),\\n            ' is missing role ',\\n            Strings.toHexString(uint256(role), 32)\\n          )\\n        )\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\n   * {revokeRole}.\\n   *\\n   * To change a role's admin, use {_setRoleAdmin}.\\n   */\\n  function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n    return _roles[role].adminRole;\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function grantRole(bytes32 role, address account)\\n    public\\n    virtual\\n    override\\n    onlyRole(getRoleAdmin(role))\\n  {\\n    _grantRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function revokeRole(bytes32 role, address account)\\n    public\\n    virtual\\n    override\\n    onlyRole(getRoleAdmin(role))\\n  {\\n    _revokeRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from the calling account.\\n   *\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\n   * if they are compromised (such as when a trusted device is misplaced).\\n   *\\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must be `account`.\\n   */\\n  function renounceRole(bytes32 role, address account) public virtual override {\\n    require(account == _msgSender(), 'AccessControl: can only renounce roles for self');\\n\\n    _revokeRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event. Note that unlike {grantRole}, this function doesn't perform any\\n   * checks on the calling account.\\n   *\\n   * [WARNING]\\n   * ====\\n   * This function should only be called from the constructor when setting\\n   * up the initial roles for the system.\\n   *\\n   * Using this function in any other way is effectively circumventing the admin\\n   * system imposed by {AccessControl}.\\n   * ====\\n   */\\n  function _setupRole(bytes32 role, address account) internal virtual {\\n    _grantRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Sets `adminRole` as ``role``'s admin role.\\n   *\\n   * Emits a {RoleAdminChanged} event.\\n   */\\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n    emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n    _roles[role].adminRole = adminRole;\\n  }\\n\\n  function _grantRole(bytes32 role, address account) private {\\n    if (!hasRole(role, account)) {\\n      _roles[role].members[account] = true;\\n      emit RoleGranted(role, account, _msgSender());\\n    }\\n  }\\n\\n  function _revokeRole(bytes32 role, address account) private {\\n    if (hasRole(role, account)) {\\n      _roles[role].members[account] = false;\\n      emit RoleRevoked(role, account, _msgSender());\\n    }\\n  }\\n\\n  uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/open-zeppelin/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/open-zeppelin/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n  bytes16 private constant alphabet = '0123456789abcdef';\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n   */\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT licence\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return '0';\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(uint256 value) internal pure returns (string memory) {\\n    if (value == 0) {\\n      return '0x00';\\n    }\\n    uint256 temp = value;\\n    uint256 length = 0;\\n    while (temp != 0) {\\n      length++;\\n      temp >>= 8;\\n    }\\n    return toHexString(value, length);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n   */\\n  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n    bytes memory buffer = new bytes(2 * length + 2);\\n    buffer[0] = '0';\\n    buffer[1] = 'x';\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i] = alphabet[value & 0xf];\\n      value >>= 4;\\n    }\\n    require(value == 0, 'Strings: hex length insufficient');\\n    return string(buffer);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/open-zeppelin/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport './IERC165.sol';\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == type(IERC165).interfaceId;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/open-zeppelin/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/safety/v1/impl/SM1Storage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport {\\n  AccessControlUpgradeable\\n} from '../../../dependencies/open-zeppelin/AccessControlUpgradeable.sol';\\nimport { ReentrancyGuard } from '../../../utils/ReentrancyGuard.sol';\\nimport { VersionedInitializable } from '../../../utils/VersionedInitializable.sol';\\nimport { SM1Types } from '../lib/SM1Types.sol';\\n\\n/**\\n * @title SM1Storage\\n * @author dYdX\\n *\\n * @dev Storage contract. Contains or inherits from all contract with storage.\\n */\\nabstract contract SM1Storage is\\n  AccessControlUpgradeable,\\n  ReentrancyGuard,\\n  VersionedInitializable\\n{\\n  // ============ Epoch Schedule ============\\n\\n  /// @dev The parameters specifying the function from timestamp to epoch number.\\n  SM1Types.EpochParameters internal _EPOCH_PARAMETERS_;\\n\\n  /// @dev The period of time at the end of each epoch in which withdrawals cannot be requested.\\n  uint256 internal _BLACKOUT_WINDOW_;\\n\\n  // ============ Staked Token ERC20 ============\\n\\n  /// @dev Allowances for ERC-20 transfers.\\n  mapping(address => mapping(address => uint256)) internal _ALLOWANCES_;\\n\\n  // ============ Governance Power Delegation ============\\n\\n  /// @dev Domain separator for EIP-712 signatures.\\n  bytes32 internal _DOMAIN_SEPARATOR_;\\n\\n  /// @dev Mapping from (owner) => (next valid nonce) for EIP-712 signatures.\\n  mapping(address => uint256) internal _NONCES_;\\n\\n  /// @dev Snapshots and delegates for governance voting power.\\n  mapping(address => mapping(uint256 => SM1Types.Snapshot)) internal _VOTING_SNAPSHOTS_;\\n  mapping(address => uint256) internal _VOTING_SNAPSHOT_COUNTS_;\\n  mapping(address => address) internal _VOTING_DELEGATES_;\\n\\n  /// @dev Snapshots and delegates for governance proposition power.\\n  mapping(address => mapping(uint256 => SM1Types.Snapshot)) internal _PROPOSITION_SNAPSHOTS_;\\n  mapping(address => uint256) internal _PROPOSITION_SNAPSHOT_COUNTS_;\\n  mapping(address => address) internal _PROPOSITION_DELEGATES_;\\n\\n  // ============ Rewards Accounting ============\\n\\n  /// @dev The emission rate of rewards.\\n  uint256 internal _REWARDS_PER_SECOND_;\\n\\n  /// @dev The cumulative rewards earned per staked token. (Shared storage slot.)\\n  uint224 internal _GLOBAL_INDEX_;\\n\\n  /// @dev The timestamp at which the global index was last updated. (Shared storage slot.)\\n  uint32 internal _GLOBAL_INDEX_TIMESTAMP_;\\n\\n  /// @dev The value of the global index when the user's staked balance was last updated.\\n  mapping(address => uint256) internal _USER_INDEXES_;\\n\\n  /// @dev The user's accrued, unclaimed rewards (as of the last update to the user index).\\n  mapping(address => uint256) internal _USER_REWARDS_BALANCES_;\\n\\n  /// @dev The value of the global index at the end of a given epoch.\\n  mapping(uint256 => uint256) internal _EPOCH_INDEXES_;\\n\\n  // ============ Staker Accounting ============\\n\\n  /// @dev The active balance by staker.\\n  mapping(address => SM1Types.StoredBalance) internal _ACTIVE_BALANCES_;\\n\\n  /// @dev The total active balance of stakers.\\n  SM1Types.StoredBalance internal _TOTAL_ACTIVE_BALANCE_;\\n\\n  /// @dev The inactive balance by staker.\\n  mapping(address => SM1Types.StoredBalance) internal _INACTIVE_BALANCES_;\\n\\n  /// @dev The total inactive balance of stakers.\\n  SM1Types.StoredBalance internal _TOTAL_INACTIVE_BALANCE_;\\n\\n  // ============ Exchange Rate ============\\n\\n  /// @dev The value of one underlying token, in the units used for staked balances, denominated\\n  ///  as a mutiple of EXCHANGE_RATE_BASE for additional precision.\\n  uint256 internal _EXCHANGE_RATE_;\\n\\n  /// @dev Historical snapshots of the exchange rate, in each block that it has changed.\\n  mapping(uint256 => SM1Types.Snapshot) internal _EXCHANGE_RATE_SNAPSHOTS_;\\n\\n  /// @dev Number of snapshots of the exchange rate.\\n  uint256 internal _EXCHANGE_RATE_SNAPSHOT_COUNT_;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\n/**\\n * @title ReentrancyGuard\\n * @author dYdX\\n *\\n * @dev Updated ReentrancyGuard library designed to be used with Proxy Contracts.\\n */\\nabstract contract ReentrancyGuard {\\n  uint256 private constant NOT_ENTERED = 1;\\n  uint256 private constant ENTERED = uint256(int256(-1));\\n\\n  uint256 private _STATUS_;\\n\\n  constructor()\\n    internal\\n  {\\n    _STATUS_ = NOT_ENTERED;\\n  }\\n\\n  modifier nonReentrant() {\\n    require(_STATUS_ != ENTERED, 'ReentrancyGuard: reentrant call');\\n    _STATUS_ = ENTERED;\\n    _;\\n    _STATUS_ = NOT_ENTERED;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/VersionedInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\n\\n/**\\n * @title VersionedInitializable\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n */\\nabstract contract VersionedInitializable {\\n    /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n    uint256 internal lastInitializedRevision = 0;\\n\\n   /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n    modifier initializer() {\\n        uint256 revision = getRevision();\\n        require(revision > lastInitializedRevision, \\\"Contract instance has already been initialized\\\");\\n\\n        lastInitializedRevision = revision;\\n\\n        _;\\n\\n    }\\n\\n    /// @dev returns the revision number of the contract.\\n    /// Needs to be defined in the inherited class as a constant.\\n    function getRevision() internal pure virtual returns(uint256);\\n\\n\\n    // Reserved storage space to allow for layout changes in the future.\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"contracts/safety/v1/lib/SM1Types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nlibrary SM1Types {\\n  /**\\n   * @dev The parameters used to convert a timestamp to an epoch number.\\n   */\\n  struct EpochParameters {\\n    uint128 interval;\\n    uint128 offset;\\n  }\\n\\n  /**\\n   * @dev Snapshot of a value at a specific block, used to track historical governance power.\\n   */\\n  struct Snapshot {\\n    uint256 blockNumber;\\n    uint256 value;\\n  }\\n\\n  /**\\n   * @dev A balance, possibly with a change scheduled for the next epoch.\\n   *\\n   * @param  currentEpoch         The epoch in which the balance was last updated.\\n   * @param  currentEpochBalance  The balance at epoch `currentEpoch`.\\n   * @param  nextEpochBalance     The balance at epoch `currentEpoch + 1`.\\n   */\\n  struct StoredBalance {\\n    uint16 currentEpoch;\\n    uint240 currentEpochBalance;\\n    uint240 nextEpochBalance;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/safety/v1/impl/SM1Getters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport { SafeMath } from '../../../dependencies/open-zeppelin/SafeMath.sol';\\nimport { Math } from '../../../utils/Math.sol';\\nimport { SM1Types } from '../lib/SM1Types.sol';\\nimport { SM1Storage } from './SM1Storage.sol';\\n\\n/**\\n * @title SM1Getters\\n * @author dYdX\\n *\\n * @dev Some external getter functions.\\n */\\nabstract contract SM1Getters is\\n  SM1Storage\\n{\\n  using SafeMath for uint256;\\n\\n  // ============ External Functions ============\\n\\n  /**\\n   * @notice The parameters specifying the function from timestamp to epoch number.\\n   *\\n   * @return The parameters struct with `interval` and `offset` fields.\\n   */\\n  function getEpochParameters()\\n    external\\n    view\\n    returns (SM1Types.EpochParameters memory)\\n  {\\n    return _EPOCH_PARAMETERS_;\\n  }\\n\\n  /**\\n   * @notice The period of time at the end of each epoch in which withdrawals cannot be requested.\\n   *\\n   * @return The blackout window duration, in seconds.\\n   */\\n  function getBlackoutWindow()\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return _BLACKOUT_WINDOW_;\\n  }\\n\\n  /**\\n   * @notice Get the domain separator used for EIP-712 signatures.\\n   *\\n   * @return The EIP-712 domain separator.\\n   */\\n  function getDomainSeparator()\\n    external\\n    view\\n    returns (bytes32)\\n  {\\n    return _DOMAIN_SEPARATOR_;\\n  }\\n\\n  /**\\n   * @notice The value of one underlying token, in the units used for staked balances, denominated\\n   *  as a mutiple of EXCHANGE_RATE_BASE for additional precision.\\n   *\\n   *  To convert from an underlying amount to a staked amount, multiply by the exchange rate.\\n   *\\n   * @return The exchange rate.\\n   */\\n  function getExchangeRate()\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return _EXCHANGE_RATE_;\\n  }\\n\\n  /**\\n   * @notice Get an exchange rate snapshot.\\n   *\\n   * @param  index  The index number of the exchange rate snapshot.\\n   *\\n   * @return The snapshot struct with `blockNumber` and `value` fields.\\n   */\\n  function getExchangeRateSnapshot(\\n    uint256 index\\n  )\\n    external\\n    view\\n    returns (SM1Types.Snapshot memory)\\n  {\\n    return _EXCHANGE_RATE_SNAPSHOTS_[index];\\n  }\\n\\n  /**\\n   * @notice Get the number of exchange rate snapshots.\\n   *\\n   * @return The number of snapshots that have been taken of the exchange rate.\\n   */\\n  function getExchangeRateSnapshotCount()\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return _EXCHANGE_RATE_SNAPSHOT_COUNT_;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/open-zeppelin/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, 'SafeMath: addition overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, 'SafeMath: subtraction overflow');\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, 'SafeMath: division by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, 'SafeMath: modulo by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport { SafeMath } from '../dependencies/open-zeppelin/SafeMath.sol';\\n\\n/**\\n * @title Math\\n * @author dYdX\\n *\\n * @dev Library for non-standard Math functions.\\n */\\nlibrary Math {\\n  using SafeMath for uint256;\\n\\n  // ============ Library Functions ============\\n\\n  /**\\n   * @dev Return `ceil(numerator / denominator)`.\\n   */\\n  function divRoundUp(\\n    uint256 numerator,\\n    uint256 denominator\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    if (numerator == 0) {\\n      // SafeMath will check for zero denominator\\n      return SafeMath.div(0, denominator);\\n    }\\n    return numerator.sub(1).div(denominator).add(1);\\n  }\\n\\n  /**\\n   * @dev Returns the minimum between a and b.\\n   */\\n  function min(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the maximum between a and b.\\n   */\\n  function max(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return a > b ? a : b;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/safety/v1/SafetyModuleV1.sol\": {\r\n      \"content\": \"// Contracts by dYdX Foundation. Individual files are released under different licenses.\\n//\\n// https://dydx.community\\n// https://github.com/dydxfoundation/governance-contracts\\n//\\n// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport { IERC20 } from '../../interfaces/IERC20.sol';\\nimport { SM1Admin } from './impl/SM1Admin.sol';\\nimport { SM1Getters } from './impl/SM1Getters.sol';\\nimport { SM1Operators } from './impl/SM1Operators.sol';\\nimport { SM1Slashing } from './impl/SM1Slashing.sol';\\nimport { SM1Staking } from './impl/SM1Staking.sol';\\n\\n/**\\n * @title SafetyModuleV1\\n * @author dYdX\\n *\\n * @notice Contract for staking tokens, which may be slashed by the permissioned slasher.\\n *\\n *  NOTE: Most functions will revert if epoch zero has not started.\\n */\\ncontract SafetyModuleV1 is\\n  SM1Slashing,\\n  SM1Operators,\\n  SM1Admin,\\n  SM1Getters\\n{\\n  // ============ Constants ============\\n\\n  string public constant EIP712_DOMAIN_NAME = 'dYdX Safety Module';\\n\\n  string public constant EIP712_DOMAIN_VERSION = '1';\\n\\n  bytes32 public constant EIP712_DOMAIN_SCHEMA_HASH = keccak256(\\n    'EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'\\n  );\\n\\n  // ============ Constructor ============\\n\\n  constructor(\\n    IERC20 stakedToken,\\n    IERC20 rewardsToken,\\n    address rewardsTreasury,\\n    uint256 distributionStart,\\n    uint256 distributionEnd\\n  )\\n    SM1Staking(stakedToken, rewardsToken, rewardsTreasury, distributionStart, distributionEnd)\\n  {}\\n\\n  // ============ External Functions ============\\n\\n  function initialize(\\n    uint256 interval,\\n    uint256 offset,\\n    uint256 blackoutWindow\\n  )\\n    external\\n    initializer\\n  {\\n    __SM1ExchangeRate_init();\\n    __SM1Roles_init();\\n    __SM1EpochSchedule_init(interval, offset, blackoutWindow);\\n    __SM1Rewards_init();\\n\\n    // Store the domain separator for EIP-712 signatures.\\n    uint256 chainId;\\n    // solium-disable-next-line\\n    assembly {\\n      chainId := chainid()\\n    }\\n    _DOMAIN_SEPARATOR_ = keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_SCHEMA_HASH,\\n        keccak256(bytes(EIP712_DOMAIN_NAME)),\\n        keccak256(bytes(EIP712_DOMAIN_VERSION)),\\n        chainId,\\n        address(this)\\n      )\\n    );\\n  }\\n\\n  // ============ Internal Functions ============\\n\\n  /**\\n   * @dev Returns the revision of the implementation contract.\\n   *\\n   * @return The revision number.\\n   */\\n  function getRevision()\\n    internal\\n    pure\\n    override\\n    returns (uint256)\\n  {\\n    return 1;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\n/**\\n* @dev Interface of the ERC20 standard as defined in the EIP.\\n*/\\ninterface IERC20 {\\n  /**\\n    * @dev Returns the amount of tokens in existence.\\n    */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n    * @dev Returns the amount of tokens owned by `account`.\\n    */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n    * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n    *\\n    * Returns a boolean value indicating whether the operation succeeded.\\n    *\\n    * Emits a {Transfer} event.\\n    */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n    * @dev Returns the remaining number of tokens that `spender` will be\\n    * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n    * zero by default.\\n    *\\n    * This value changes when {approve} or {transferFrom} are called.\\n    */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n    * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n    *\\n    * Returns a boolean value indicating whether the operation succeeded.\\n    *\\n    * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n    * that someone may use both the old and the new allowance by unfortunate\\n    * transaction ordering. One possible solution to mitigate this race\\n    * condition is to first reduce the spender's allowance to 0 and set the\\n    * desired value afterwards:\\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    *\\n    * Emits an {Approval} event.\\n    */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n    * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n    * allowance mechanism. `amount` is then deducted from the caller's\\n    * allowance.\\n    *\\n    * Returns a boolean value indicating whether the operation succeeded.\\n    *\\n    * Emits a {Transfer} event.\\n    */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n    * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n    * another (`to`).\\n    *\\n    * Note that `value` may be zero.\\n    */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n    * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n    * a call to {approve}. `value` is the new allowance.\\n    */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/safety/v1/impl/SM1Admin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport { SafeMath } from '../../../dependencies/open-zeppelin/SafeMath.sol';\\nimport { SM1Types } from '../lib/SM1Types.sol';\\nimport { SM1Roles } from './SM1Roles.sol';\\nimport { SM1StakedBalances } from './SM1StakedBalances.sol';\\n\\n/**\\n * @title SM1Admin\\n * @author dYdX\\n *\\n * @dev Admin-only functions.\\n */\\nabstract contract SM1Admin is\\n  SM1StakedBalances,\\n  SM1Roles\\n{\\n  using SafeMath for uint256;\\n\\n  // ============ External Functions ============\\n\\n  /**\\n   * @notice Set the parameters defining the function from timestamp to epoch number.\\n   *\\n   *  The formula used is `n = floor((t - b) / a)` where:\\n   *    - `n` is the epoch number\\n   *    - `t` is the timestamp (in seconds)\\n   *    - `b` is a non-negative offset, indicating the start of epoch zero (in seconds)\\n   *    - `a` is the length of an epoch, a.k.a. the interval (in seconds)\\n   *\\n   *  Reverts if epoch zero already started, and the new parameters would change the current epoch.\\n   *  Reverts if epoch zero has not started, but would have had started under the new parameters.\\n   *\\n   * @param  interval  The length `a` of an epoch, in seconds.\\n   * @param  offset    The offset `b`, i.e. the start of epoch zero, in seconds.\\n   */\\n  function setEpochParameters(\\n    uint256 interval,\\n    uint256 offset\\n  )\\n    external\\n    onlyRole(EPOCH_PARAMETERS_ROLE)\\n    nonReentrant\\n  {\\n    if (!hasEpochZeroStarted()) {\\n      require(\\n        block.timestamp < offset,\\n        'SM1Admin: Started epoch zero'\\n      );\\n      _setEpochParameters(interval, offset);\\n      return;\\n    }\\n\\n    // We must settle the total active balance to ensure the index is recorded at the epoch\\n    // boundary as needed, before we make any changes to the epoch formula.\\n    _settleTotalActiveBalance();\\n\\n    // Update the epoch parameters. Require that the current epoch number is unchanged.\\n    uint256 originalCurrentEpoch = getCurrentEpoch();\\n    _setEpochParameters(interval, offset);\\n    uint256 newCurrentEpoch = getCurrentEpoch();\\n    require(\\n      originalCurrentEpoch == newCurrentEpoch,\\n      'SM1Admin: Changed epochs'\\n    );\\n  }\\n\\n  /**\\n   * @notice Set the blackout window, during which one cannot request withdrawals of staked funds.\\n   */\\n  function setBlackoutWindow(\\n    uint256 blackoutWindow\\n  )\\n    external\\n    onlyRole(EPOCH_PARAMETERS_ROLE)\\n    nonReentrant\\n  {\\n    _setBlackoutWindow(blackoutWindow);\\n  }\\n\\n  /**\\n   * @notice Set the emission rate of rewards.\\n   *\\n   * @param  emissionPerSecond  The new number of rewards tokens given out per second.\\n   */\\n  function setRewardsPerSecond(\\n    uint256 emissionPerSecond\\n  )\\n    external\\n    onlyRole(REWARDS_RATE_ROLE)\\n    nonReentrant\\n  {\\n    uint256 totalStaked = 0;\\n    if (hasEpochZeroStarted()) {\\n      // We must settle the total active balance to ensure the index is recorded at the epoch\\n      // boundary as needed, before we make any changes to the emission rate.\\n      totalStaked = _settleTotalActiveBalance();\\n    }\\n    _setRewardsPerSecond(emissionPerSecond, totalStaked);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/safety/v1/impl/SM1Operators.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport { SafeMath } from '../../../dependencies/open-zeppelin/SafeMath.sol';\\nimport { SM1Roles } from './SM1Roles.sol';\\nimport { SM1Staking } from './SM1Staking.sol';\\n\\n/**\\n * @title SM1Operators\\n * @author dYdX\\n *\\n * @dev Actions which may be called by authorized operators, nominated by the contract owner.\\n *\\n *  There are two types of operators. These should be smart contracts, which can be used to\\n *  provide additional functionality to users:\\n *\\n *  STAKE_OPERATOR_ROLE:\\n *\\n *    This operator is allowed to request withdrawals and withdraw funds on behalf of stakers. This\\n *    role could be used by a smart contract to provide a staking interface with additional\\n *    features, for example, optional lock-up periods that pay out additional rewards (from a\\n *    separate rewards pool).\\n *\\n *  CLAIM_OPERATOR_ROLE:\\n *\\n *    This operator is allowed to claim rewards on behalf of stakers. This role could be used by a\\n *    smart contract to provide an interface for claiming rewards from multiple incentive programs\\n *    at once.\\n */\\nabstract contract SM1Operators is\\n  SM1Staking,\\n  SM1Roles\\n{\\n  using SafeMath for uint256;\\n\\n  // ============ Events ============\\n\\n  event OperatorStakedFor(\\n    address indexed staker,\\n    uint256 amount,\\n    address operator\\n  );\\n\\n  event OperatorWithdrawalRequestedFor(\\n    address indexed staker,\\n    uint256 amount,\\n    address operator\\n  );\\n\\n  event OperatorWithdrewStakeFor(\\n    address indexed staker,\\n    address recipient,\\n    uint256 amount,\\n    address operator\\n  );\\n\\n  event OperatorClaimedRewardsFor(\\n    address indexed staker,\\n    address recipient,\\n    uint256 claimedRewards,\\n    address operator\\n  );\\n\\n  // ============ External Functions ============\\n\\n  /**\\n   * @notice Request a withdrawal on behalf of a staker.\\n   *\\n   *  Reverts if we are currently in the blackout window.\\n   *\\n   * @param  staker       The staker whose stake to request a withdrawal for.\\n   * @param  stakeAmount  The amount of stake to move from the active to the inactive balance.\\n   */\\n  function requestWithdrawalFor(\\n    address staker,\\n    uint256 stakeAmount\\n  )\\n    external\\n    onlyRole(STAKE_OPERATOR_ROLE)\\n    nonReentrant\\n  {\\n    _requestWithdrawal(staker, stakeAmount);\\n    emit OperatorWithdrawalRequestedFor(staker, stakeAmount, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Withdraw a staker's stake, and send to the specified recipient.\\n   *\\n   * @param  staker       The staker whose stake to withdraw.\\n   * @param  recipient    The address that should receive the funds.\\n   * @param  stakeAmount  The amount of stake to withdraw from the staker's inactive balance.\\n   */\\n  function withdrawStakeFor(\\n    address staker,\\n    address recipient,\\n    uint256 stakeAmount\\n  )\\n    external\\n    onlyRole(STAKE_OPERATOR_ROLE)\\n    nonReentrant\\n  {\\n    _withdrawStake(staker, recipient, stakeAmount);\\n    emit OperatorWithdrewStakeFor(staker, recipient, stakeAmount, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Claim rewards on behalf of a staker, and send them to the specified recipient.\\n   *\\n   * @param  staker     The staker whose rewards to claim.\\n   * @param  recipient  The address that should receive the funds.\\n   *\\n   * @return The number of rewards tokens claimed.\\n   */\\n  function claimRewardsFor(\\n    address staker,\\n    address recipient\\n  )\\n    external\\n    onlyRole(CLAIM_OPERATOR_ROLE)\\n    nonReentrant\\n    returns (uint256)\\n  {\\n    uint256 rewards = _settleAndClaimRewards(staker, recipient); // Emits an event internally.\\n    emit OperatorClaimedRewardsFor(staker, recipient, rewards, msg.sender);\\n    return rewards;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/safety/v1/impl/SM1Slashing.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport { SafeERC20 } from '../../../dependencies/open-zeppelin/SafeERC20.sol';\\nimport { SafeMath } from '../../../dependencies/open-zeppelin/SafeMath.sol';\\nimport { IERC20 } from '../../../interfaces/IERC20.sol';\\nimport { Math } from '../../../utils/Math.sol';\\nimport { SM1Types } from '../lib/SM1Types.sol';\\nimport { SM1Roles } from './SM1Roles.sol';\\nimport { SM1Staking } from './SM1Staking.sol';\\n\\n/**\\n * @title SM1Slashing\\n * @author dYdX\\n *\\n * @dev Provides the slashing function for removing funds from the contract.\\n *\\n *  SLASHING:\\n *\\n *   All funds in the contract, active or inactive, are slashable. Slashes are recorded by updating\\n *   the exchange rate, and to simplify the technical implementation, we disallow full slashes.\\n *   To reduce the possibility of overflow in the exchange rate, we place an upper bound on the\\n *   fraction of funds that may be slashed in a single slash.\\n *\\n *   Warning: Slashing is not possible if the slash would cause the exchange rate to overflow.\\n *\\n *  REWARDS AND GOVERNANCE POWER ACCOUNTING:\\n *\\n *   Since all slashes are accounted for by a global exchange rate, slashes do not require any\\n *   update to staked balances. The earning of rewards is unaffected by slashes.\\n *\\n *   Governance power takes slashes into account by using snapshots of the exchange rate inside\\n *   the getPowerAtBlock() function. Note that getPowerAtBlock() returns the governance power as of\\n *   the end of the specified block.\\n */\\nabstract contract SM1Slashing is\\n  SM1Staking,\\n  SM1Roles\\n{\\n  using SafeERC20 for IERC20;\\n  using SafeMath for uint256;\\n\\n  // ============ Constants ============\\n\\n  /// @notice The maximum fraction of funds that may be slashed in a single slash (numerator).\\n  uint256 public constant MAX_SLASH_NUMERATOR = 95;\\n\\n  /// @notice The maximum fraction of funds that may be slashed in a single slash (denominator).\\n  uint256 public constant MAX_SLASH_DENOMINATOR = 100;\\n\\n  // ============ Events ============\\n\\n  event Slashed(\\n    uint256 amount,\\n    address recipient,\\n    uint256 newExchangeRate\\n  );\\n\\n  // ============ External Functions ============\\n\\n  /**\\n   * @notice Slash staked token balances and withdraw those funds to the specified address.\\n   *\\n   * @param  requestedSlashAmount  The request slash amount, denominated in the underlying token.\\n   * @param  recipient             The address to receive the slashed tokens.\\n   *\\n   * @return The amount slashed, denominated in the underlying token.\\n   */\\n  function slash(\\n    uint256 requestedSlashAmount,\\n    address recipient\\n  )\\n    external\\n    onlyRole(SLASHER_ROLE)\\n    nonReentrant\\n    returns (uint256)\\n  {\\n    uint256 underlyingBalance = STAKED_TOKEN.balanceOf(address(this));\\n\\n    if (underlyingBalance == 0) {\\n      return 0;\\n    }\\n\\n    // Get the slash amount and remaining amount. Note that remainingAfterSlash is nonzero.\\n    uint256 maxSlashAmount = underlyingBalance.mul(MAX_SLASH_NUMERATOR).div(MAX_SLASH_DENOMINATOR);\\n    uint256 slashAmount = Math.min(requestedSlashAmount, maxSlashAmount);\\n    uint256 remainingAfterSlash = underlyingBalance.sub(slashAmount);\\n\\n    if (slashAmount == 0) {\\n      return 0;\\n    }\\n\\n    // Update the exchange rate.\\n    //\\n    // Warning: Can revert if the max exchange rate is exceeded.\\n    uint256 newExchangeRate = updateExchangeRate(underlyingBalance, remainingAfterSlash);\\n\\n    // Transfer the slashed token.\\n    STAKED_TOKEN.safeTransfer(recipient, slashAmount);\\n\\n    emit Slashed(slashAmount, recipient, newExchangeRate);\\n    return slashAmount;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/safety/v1/impl/SM1Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport { SafeERC20 } from '../../../dependencies/open-zeppelin/SafeERC20.sol';\\nimport { SafeMath } from '../../../dependencies/open-zeppelin/SafeMath.sol';\\nimport { IERC20 } from '../../../interfaces/IERC20.sol';\\nimport { Math } from '../../../utils/Math.sol';\\nimport { SM1Types } from '../lib/SM1Types.sol';\\nimport { SM1ERC20 } from './SM1ERC20.sol';\\nimport { SM1StakedBalances } from './SM1StakedBalances.sol';\\n\\n/**\\n * @title SM1Staking\\n * @author dYdX\\n *\\n * @dev External functions for stakers. See SM1StakedBalances for details on staker accounting.\\n *\\n *  UNDERLYING AND STAKED AMOUNTS:\\n *\\n *   We distinguish between underlying amounts and stake amounts. An underlying amount is denoted\\n *   in the original units of the token being staked. A stake amount is adjusted by the exchange\\n *   rate, which can increase due to slashing. Before any slashes have occurred, the exchange rate\\n *   is equal to one.\\n */\\nabstract contract SM1Staking is\\n  SM1StakedBalances,\\n  SM1ERC20\\n{\\n  using SafeERC20 for IERC20;\\n  using SafeMath for uint256;\\n\\n  // ============ Events ============\\n\\n  event Staked(\\n    address indexed staker,\\n    address spender,\\n    uint256 underlyingAmount,\\n    uint256 stakeAmount\\n  );\\n\\n  event WithdrawalRequested(\\n    address indexed staker,\\n    uint256 stakeAmount\\n  );\\n\\n  event WithdrewStake(\\n    address indexed staker,\\n    address recipient,\\n    uint256 underlyingAmount,\\n    uint256 stakeAmount\\n  );\\n\\n  // ============ Constants ============\\n\\n  IERC20 public immutable STAKED_TOKEN;\\n\\n  // ============ Constructor ============\\n\\n  constructor(\\n    IERC20 stakedToken,\\n    IERC20 rewardsToken,\\n    address rewardsTreasury,\\n    uint256 distributionStart,\\n    uint256 distributionEnd\\n  )\\n    SM1StakedBalances(rewardsToken, rewardsTreasury, distributionStart, distributionEnd)\\n  {\\n    STAKED_TOKEN = stakedToken;\\n  }\\n\\n  // ============ External Functions ============\\n\\n  /**\\n   * @notice Deposit and stake funds. These funds are active and start earning rewards immediately.\\n   *\\n   * @param  underlyingAmount  The amount of underlying token to stake.\\n   */\\n  function stake(\\n    uint256 underlyingAmount\\n  )\\n    external\\n    nonReentrant\\n  {\\n    _stake(msg.sender, underlyingAmount);\\n  }\\n\\n  /**\\n   * @notice Deposit and stake on behalf of another address.\\n   *\\n   * @param  staker            The staker who will receive the stake.\\n   * @param  underlyingAmount  The amount of underlying token to stake.\\n   */\\n  function stakeFor(\\n    address staker,\\n    uint256 underlyingAmount\\n  )\\n    external\\n    nonReentrant\\n  {\\n    _stake(staker, underlyingAmount);\\n  }\\n\\n  /**\\n   * @notice Request to withdraw funds. Starting in the next epoch, the funds will be “inactive”\\n   *  and available for withdrawal. Inactive funds do not earn rewards.\\n   *\\n   *  Reverts if we are currently in the blackout window.\\n   *\\n   * @param  stakeAmount  The amount of stake to move from the active to the inactive balance.\\n   */\\n  function requestWithdrawal(\\n    uint256 stakeAmount\\n  )\\n    external\\n    nonReentrant\\n  {\\n    _requestWithdrawal(msg.sender, stakeAmount);\\n  }\\n\\n  /**\\n   * @notice Withdraw the sender's inactive funds, and send to the specified recipient.\\n   *\\n   * @param  recipient    The address that should receive the funds.\\n   * @param  stakeAmount  The amount of stake to withdraw from the sender's inactive balance.\\n   */\\n  function withdrawStake(\\n    address recipient,\\n    uint256 stakeAmount\\n  )\\n    external\\n    nonReentrant\\n  {\\n    _withdrawStake(msg.sender, recipient, stakeAmount);\\n  }\\n\\n  /**\\n   * @notice Withdraw the max available inactive funds, and send to the specified recipient.\\n   *\\n   *  This is less gas-efficient than querying the max via eth_call and calling withdrawStake().\\n   *\\n   * @param  recipient  The address that should receive the funds.\\n   *\\n   * @return The withdrawn amount.\\n   */\\n  function withdrawMaxStake(\\n    address recipient\\n  )\\n    external\\n    nonReentrant\\n    returns (uint256)\\n  {\\n    uint256 stakeAmount = getStakeAvailableToWithdraw(msg.sender);\\n    _withdrawStake(msg.sender, recipient, stakeAmount);\\n    return stakeAmount;\\n  }\\n\\n  /**\\n   * @notice Settle and claim all rewards, and send them to the specified recipient.\\n   *\\n   *  Call this function with eth_call to query the claimable rewards balance.\\n   *\\n   * @param  recipient  The address that should receive the funds.\\n   *\\n   * @return The number of rewards tokens claimed.\\n   */\\n  function claimRewards(\\n    address recipient\\n  )\\n    external\\n    nonReentrant\\n    returns (uint256)\\n  {\\n    return _settleAndClaimRewards(msg.sender, recipient); // Emits an event internally.\\n  }\\n\\n  // ============ Public Functions ============\\n\\n  /**\\n   * @notice Get the amount of stake available for a given staker to withdraw.\\n   *\\n   * @param  staker  The address whose balance to check.\\n   *\\n   * @return The staker's stake amount that is inactive and available to withdraw.\\n   */\\n  function getStakeAvailableToWithdraw(\\n    address staker\\n  )\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    // Note that the next epoch inactive balance is always at least that of the current epoch.\\n    return getInactiveBalanceCurrentEpoch(staker);\\n  }\\n\\n  // ============ Internal Functions ============\\n\\n  function _stake(\\n    address staker,\\n    uint256 underlyingAmount\\n  )\\n    internal\\n  {\\n    // Convert using the exchange rate.\\n    uint256 stakeAmount = stakeAmountFromUnderlyingAmount(underlyingAmount);\\n\\n    // Update staked balances and delegate snapshots.\\n    _increaseCurrentAndNextActiveBalance(staker, stakeAmount);\\n    _moveDelegatesForTransfer(address(0), staker, stakeAmount);\\n\\n    // Transfer token from the sender.\\n    STAKED_TOKEN.safeTransferFrom(msg.sender, address(this), underlyingAmount);\\n\\n    emit Staked(staker, msg.sender, underlyingAmount, stakeAmount);\\n    emit Transfer(address(0), msg.sender, stakeAmount);\\n  }\\n\\n  function _requestWithdrawal(\\n    address staker,\\n    uint256 stakeAmount\\n  )\\n    internal\\n  {\\n    require(\\n      !inBlackoutWindow(),\\n      'SM1Staking: Withdraw requests restricted in the blackout window'\\n    );\\n\\n    // Get the staker's requestable amount and revert if there is not enough to request withdrawal.\\n    uint256 requestableBalance = getActiveBalanceNextEpoch(staker);\\n    require(\\n      stakeAmount <= requestableBalance,\\n      'SM1Staking: Withdraw request exceeds next active balance'\\n    );\\n\\n    // Move amount from active to inactive in the next epoch.\\n    _moveNextBalanceActiveToInactive(staker, stakeAmount);\\n\\n    emit WithdrawalRequested(staker, stakeAmount);\\n  }\\n\\n  function _withdrawStake(\\n    address staker,\\n    address recipient,\\n    uint256 stakeAmount\\n  )\\n    internal\\n  {\\n    // Get staker withdrawable balance and revert if there is not enough to withdraw.\\n    uint256 withdrawableBalance = getInactiveBalanceCurrentEpoch(staker);\\n    require(\\n      stakeAmount <= withdrawableBalance,\\n      'SM1Staking: Withdraw amount exceeds staker inactive balance'\\n    );\\n\\n    // Update staked balances and delegate snapshots.\\n    _decreaseCurrentAndNextInactiveBalance(staker, stakeAmount);\\n    _moveDelegatesForTransfer(staker, address(0), stakeAmount);\\n\\n    // Convert using the exchange rate.\\n    uint256 underlyingAmount = underlyingAmountFromStakeAmount(stakeAmount);\\n\\n    // Transfer token to the recipient.\\n    STAKED_TOKEN.safeTransfer(recipient, underlyingAmount);\\n\\n    emit Transfer(msg.sender, address(0), stakeAmount);\\n    emit WithdrewStake(staker, recipient, underlyingAmount, stakeAmount);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/safety/v1/impl/SM1Roles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport { SM1Storage } from './SM1Storage.sol';\\n\\n/**\\n * @title SM1Roles\\n * @author dYdX\\n *\\n * @dev Defines roles used in the SafetyModuleV1 contract. The hierarchy of roles and powers\\n *  of each role are described below.\\n *\\n *  Roles:\\n *\\n *    OWNER_ROLE\\n *      | -> May add or remove addresses from any of the roles below.\\n *      |\\n *      +-- SLASHER_ROLE\\n *      |     -> Can slash staked token balances and withdraw those funds.\\n *      |\\n *      +-- EPOCH_PARAMETERS_ROLE\\n *      |     -> May set epoch parameters such as the interval, offset, and blackout window.\\n *      |\\n *      +-- REWARDS_RATE_ROLE\\n *      |     -> May set the emission rate of rewards.\\n *      |\\n *      +-- CLAIM_OPERATOR_ROLE\\n *      |     -> May claim rewards on behalf of a user.\\n *      |\\n *      +-- STAKE_OPERATOR_ROLE\\n *            -> May manipulate user's staked funds (e.g. perform withdrawals on behalf of a user).\\n */\\nabstract contract SM1Roles is SM1Storage {\\n  bytes32 public constant OWNER_ROLE = keccak256('OWNER_ROLE');\\n  bytes32 public constant SLASHER_ROLE = keccak256('SLASHER_ROLE');\\n  bytes32 public constant EPOCH_PARAMETERS_ROLE = keccak256('EPOCH_PARAMETERS_ROLE');\\n  bytes32 public constant REWARDS_RATE_ROLE = keccak256('REWARDS_RATE_ROLE');\\n  bytes32 public constant CLAIM_OPERATOR_ROLE = keccak256('CLAIM_OPERATOR_ROLE');\\n  bytes32 public constant STAKE_OPERATOR_ROLE = keccak256('STAKE_OPERATOR_ROLE');\\n\\n  function __SM1Roles_init() internal {\\n    // Assign roles to the sender.\\n    //\\n    // The STAKE_OPERATOR_ROLE and CLAIM_OPERATOR_ROLE roles are not initially assigned.\\n    // These can be assigned to other smart contracts to provide additional functionality for users.\\n    _setupRole(OWNER_ROLE, msg.sender);\\n    _setupRole(SLASHER_ROLE, msg.sender);\\n    _setupRole(EPOCH_PARAMETERS_ROLE, msg.sender);\\n    _setupRole(REWARDS_RATE_ROLE, msg.sender);\\n\\n    // Set OWNER_ROLE as the admin of all roles.\\n    _setRoleAdmin(OWNER_ROLE, OWNER_ROLE);\\n    _setRoleAdmin(SLASHER_ROLE, OWNER_ROLE);\\n    _setRoleAdmin(EPOCH_PARAMETERS_ROLE, OWNER_ROLE);\\n    _setRoleAdmin(REWARDS_RATE_ROLE, OWNER_ROLE);\\n    _setRoleAdmin(CLAIM_OPERATOR_ROLE, OWNER_ROLE);\\n    _setRoleAdmin(STAKE_OPERATOR_ROLE, OWNER_ROLE);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/safety/v1/impl/SM1StakedBalances.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport { SafeMath } from '../../../dependencies/open-zeppelin/SafeMath.sol';\\nimport { IERC20 } from '../../../interfaces/IERC20.sol';\\nimport { SafeCast } from '../lib/SafeCast.sol';\\nimport { SM1Types } from '../lib/SM1Types.sol';\\nimport { SM1Rewards } from './SM1Rewards.sol';\\n\\n/**\\n * @title SM1StakedBalances\\n * @author dYdX\\n *\\n * @dev Accounting of staked balances.\\n *\\n *  NOTE: Functions may revert if epoch zero has not started.\\n *\\n *  NOTE: All amounts dealt with in this file are denominated in staked units, which because of the\\n *   exchange rate, may not correspond one-to-one with the underlying token. See SM1Staking.sol.\\n *\\n *  STAKED BALANCE ACCOUNTING:\\n *\\n *   A staked balance is in one of two states:\\n *     - active: Earning staking rewards; cannot be withdrawn by staker; may be slashed.\\n *     - inactive: Not earning rewards; can be withdrawn by the staker; may be slashed.\\n *\\n *   A staker may have a combination of active and inactive balances. The following operations\\n *   affect staked balances as follows:\\n *     - deposit:            Increase active balance.\\n *     - request withdrawal: At the end of the current epoch, move some active funds to inactive.\\n *     - withdraw:           Decrease inactive balance.\\n *     - transfer:           Move some active funds to another staker.\\n *\\n *   To encode the fact that a balance may be scheduled to change at the end of a certain epoch, we\\n *   store each balance as a struct of three fields: currentEpoch, currentEpochBalance, and\\n *   nextEpochBalance.\\n *\\n *  REWARDS ACCOUNTING:\\n *\\n *   Active funds earn rewards for the period of time that they remain active. This means, after\\n *   requesting a withdrawal of some funds, those funds will continue to earn rewards until the end\\n *   of the epoch. For example:\\n *\\n *     epoch: n        n + 1      n + 2      n + 3\\n *            |          |          |          |\\n *            +----------+----------+----------+-----...\\n *               ^ t_0: User makes a deposit.\\n *                          ^ t_1: User requests a withdrawal of all funds.\\n *                                  ^ t_2: The funds change state from active to inactive.\\n *\\n *   In the above scenario, the user would earn rewards for the period from t_0 to t_2, varying\\n *   with the total staked balance in that period. If the user only request a withdrawal for a part\\n *   of their balance, then the remaining balance would continue earning rewards beyond t_2.\\n *\\n *   User rewards must be settled via SM1Rewards any time a user's active balance changes. Special\\n *   attention is paid to the the epoch boundaries, where funds may have transitioned from active\\n *   to inactive.\\n *\\n *  SETTLEMENT DETAILS:\\n *\\n *   Internally, this module uses the following types of operations on stored balances:\\n *     - Load:            Loads a balance, while applying settlement logic internally to get the\\n *                        up-to-date result. Returns settlement results without updating state.\\n *     - Store:           Stores a balance.\\n *     - Load-for-update: Performs a load and applies updates as needed to rewards accounting.\\n *                        Since this is state-changing, it must be followed by a store operation.\\n *     - Settle:          Performs load-for-update and store operations.\\n *\\n *   This module is responsible for maintaining the following invariants to ensure rewards are\\n *   calculated correctly:\\n *     - When an active balance is loaded for update, if a rollover occurs from one epoch to the\\n *       next, the rewards index must be settled up to the boundary at which the rollover occurs.\\n *     - Because the global rewards index is needed to update the user rewards index, the total\\n *       active balance must be settled before any staker balances are settled or loaded for update.\\n *     - A staker's balance must be settled before their rewards are settled.\\n */\\nabstract contract SM1StakedBalances is\\n  SM1Rewards\\n{\\n  using SafeCast for uint256;\\n  using SafeMath for uint256;\\n\\n  // ============ Constructor ============\\n\\n  constructor(\\n    IERC20 rewardsToken,\\n    address rewardsTreasury,\\n    uint256 distributionStart,\\n    uint256 distributionEnd\\n  )\\n    SM1Rewards(rewardsToken, rewardsTreasury, distributionStart, distributionEnd)\\n  {}\\n\\n  // ============ Public Functions ============\\n\\n  /**\\n   * @notice Get the current active balance of a staker.\\n   */\\n  function getActiveBalanceCurrentEpoch(\\n    address staker\\n  )\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    if (!hasEpochZeroStarted()) {\\n      return 0;\\n    }\\n    (SM1Types.StoredBalance memory balance, , , ) = _loadActiveBalance(\\n      _ACTIVE_BALANCES_[staker]\\n    );\\n    return uint256(balance.currentEpochBalance);\\n  }\\n\\n  /**\\n   * @notice Get the next epoch active balance of a staker.\\n   */\\n  function getActiveBalanceNextEpoch(\\n    address staker\\n  )\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    if (!hasEpochZeroStarted()) {\\n      return 0;\\n    }\\n    (SM1Types.StoredBalance memory balance, , , ) = _loadActiveBalance(\\n      _ACTIVE_BALANCES_[staker]\\n    );\\n    return uint256(balance.nextEpochBalance);\\n  }\\n\\n  /**\\n   * @notice Get the current total active balance.\\n   */\\n  function getTotalActiveBalanceCurrentEpoch()\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    if (!hasEpochZeroStarted()) {\\n      return 0;\\n    }\\n    (SM1Types.StoredBalance memory balance, , , ) = _loadActiveBalance(\\n      _TOTAL_ACTIVE_BALANCE_\\n    );\\n    return uint256(balance.currentEpochBalance);\\n  }\\n\\n  /**\\n   * @notice Get the next epoch total active balance.\\n   */\\n  function getTotalActiveBalanceNextEpoch()\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    if (!hasEpochZeroStarted()) {\\n      return 0;\\n    }\\n    (SM1Types.StoredBalance memory balance, , , ) = _loadActiveBalance(\\n      _TOTAL_ACTIVE_BALANCE_\\n    );\\n    return uint256(balance.nextEpochBalance);\\n  }\\n\\n  /**\\n   * @notice Get the current inactive balance of a staker.\\n   * @dev The balance is converted via the index to token units.\\n   */\\n  function getInactiveBalanceCurrentEpoch(\\n    address staker\\n  )\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    if (!hasEpochZeroStarted()) {\\n      return 0;\\n    }\\n    SM1Types.StoredBalance memory balance = _loadInactiveBalance(_INACTIVE_BALANCES_[staker]);\\n    return uint256(balance.currentEpochBalance);\\n  }\\n\\n  /**\\n   * @notice Get the next epoch inactive balance of a staker.\\n   * @dev The balance is converted via the index to token units.\\n   */\\n  function getInactiveBalanceNextEpoch(\\n    address staker\\n  )\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    if (!hasEpochZeroStarted()) {\\n      return 0;\\n    }\\n    SM1Types.StoredBalance memory balance = _loadInactiveBalance(_INACTIVE_BALANCES_[staker]);\\n    return uint256(balance.nextEpochBalance);\\n  }\\n\\n  /**\\n   * @notice Get the current total inactive balance.\\n   */\\n  function getTotalInactiveBalanceCurrentEpoch()\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    if (!hasEpochZeroStarted()) {\\n      return 0;\\n    }\\n    SM1Types.StoredBalance memory balance = _loadInactiveBalance(_TOTAL_INACTIVE_BALANCE_);\\n    return uint256(balance.currentEpochBalance);\\n  }\\n\\n  /**\\n   * @notice Get the next epoch total inactive balance.\\n   */\\n  function getTotalInactiveBalanceNextEpoch()\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    if (!hasEpochZeroStarted()) {\\n      return 0;\\n    }\\n    SM1Types.StoredBalance memory balance = _loadInactiveBalance(_TOTAL_INACTIVE_BALANCE_);\\n    return uint256(balance.nextEpochBalance);\\n  }\\n\\n  /**\\n   * @notice Get the current transferable balance for a user. The user can\\n   *  only transfer their balance that is not currently inactive or going to be\\n   *  inactive in the next epoch. Note that this means the user's transferable funds\\n   *  are their active balance of the next epoch.\\n   *\\n   * @param  account  The account to get the transferable balance of.\\n   *\\n   * @return The user's transferable balance.\\n   */\\n  function getTransferableBalance(\\n    address account\\n  )\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    return getActiveBalanceNextEpoch(account);\\n  }\\n\\n  // ============ Internal Functions ============\\n\\n  function _increaseCurrentAndNextActiveBalance(\\n    address staker,\\n    uint256 amount\\n  )\\n    internal\\n  {\\n    // Always settle total active balance before settling a staker active balance.\\n    uint256 oldTotalBalance = _increaseCurrentAndNextBalances(address(0), true, amount);\\n    uint256 oldUserBalance = _increaseCurrentAndNextBalances(staker, true, amount);\\n\\n    // When an active balance changes at current timestamp, settle rewards to the current timestamp.\\n    _settleUserRewardsUpToNow(staker, oldUserBalance, oldTotalBalance);\\n  }\\n\\n  function _moveNextBalanceActiveToInactive(\\n    address staker,\\n    uint256 amount\\n  )\\n    internal\\n  {\\n    // Decrease the active balance for the next epoch.\\n    // Always settle total active balance before settling a staker active balance.\\n    _decreaseNextBalance(address(0), true, amount);\\n    _decreaseNextBalance(staker, true, amount);\\n\\n    // Increase the inactive balance for the next epoch.\\n    _increaseNextBalance(address(0), false, amount);\\n    _increaseNextBalance(staker, false, amount);\\n\\n    // Note that we don't need to settle rewards since the current active balance did not change.\\n  }\\n\\n  function _transferCurrentAndNextActiveBalance(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    internal\\n  {\\n    // Always settle total active balance before settling a staker active balance.\\n    uint256 totalBalance = _settleTotalActiveBalance();\\n\\n    // Move current and next active balances from sender to recipient.\\n    uint256 oldSenderBalance = _decreaseCurrentAndNextBalances(sender, true, amount);\\n    uint256 oldRecipientBalance = _increaseCurrentAndNextBalances(recipient, true, amount);\\n\\n    // When an active balance changes at current timestamp, settle rewards to the current timestamp.\\n    _settleUserRewardsUpToNow(sender, oldSenderBalance, totalBalance);\\n    _settleUserRewardsUpToNow(recipient, oldRecipientBalance, totalBalance);\\n  }\\n\\n  function _decreaseCurrentAndNextInactiveBalance(\\n    address staker,\\n    uint256 amount\\n  )\\n    internal\\n  {\\n    // Decrease the inactive balance for the next epoch.\\n    _decreaseCurrentAndNextBalances(address(0), false, amount);\\n    _decreaseCurrentAndNextBalances(staker, false, amount);\\n\\n    // Note that we don't settle rewards since active balances are not affected.\\n  }\\n\\n  function _settleTotalActiveBalance()\\n    internal\\n    returns (uint256)\\n  {\\n    return _settleBalance(address(0), true);\\n  }\\n\\n  function _settleAndClaimRewards(\\n    address staker,\\n    address recipient\\n  )\\n    internal\\n    returns (uint256)\\n  {\\n    // Always settle total active balance before settling a staker active balance.\\n    uint256 totalBalance = _settleTotalActiveBalance();\\n\\n    // Always settle staker active balance before settling staker rewards.\\n    uint256 userBalance = _settleBalance(staker, true);\\n\\n    // Settle rewards balance since we want to claim the full accrued amount.\\n    _settleUserRewardsUpToNow(staker, userBalance, totalBalance);\\n\\n    // Claim rewards balance.\\n    return _claimRewards(staker, recipient);\\n  }\\n\\n  // ============ Private Functions ============\\n\\n  /**\\n   * @dev Load a balance for update and then store it.\\n   */\\n  function _settleBalance(\\n    address maybeStaker,\\n    bool isActiveBalance\\n  )\\n    private\\n    returns (uint256)\\n  {\\n    SM1Types.StoredBalance storage balancePtr = _getBalancePtr(maybeStaker, isActiveBalance);\\n    SM1Types.StoredBalance memory balance =\\n      _loadBalanceForUpdate(balancePtr, maybeStaker, isActiveBalance);\\n\\n    uint256 currentBalance = uint256(balance.currentEpochBalance);\\n\\n    _storeBalance(balancePtr, balance);\\n    return currentBalance;\\n  }\\n\\n  /**\\n   * @dev Settle a balance while applying an increase.\\n   */\\n  function _increaseCurrentAndNextBalances(\\n    address maybeStaker,\\n    bool isActiveBalance,\\n    uint256 amount\\n  )\\n    private\\n    returns (uint256)\\n  {\\n    SM1Types.StoredBalance storage balancePtr = _getBalancePtr(maybeStaker, isActiveBalance);\\n    SM1Types.StoredBalance memory balance =\\n      _loadBalanceForUpdate(balancePtr, maybeStaker, isActiveBalance);\\n\\n    uint256 originalCurrentBalance = uint256(balance.currentEpochBalance);\\n    balance.currentEpochBalance = originalCurrentBalance.add(amount).toUint240();\\n    balance.nextEpochBalance = uint256(balance.nextEpochBalance).add(amount).toUint240();\\n\\n    _storeBalance(balancePtr, balance);\\n    return originalCurrentBalance;\\n  }\\n\\n  /**\\n   * @dev Settle a balance while applying a decrease.\\n   */\\n  function _decreaseCurrentAndNextBalances(\\n    address maybeStaker,\\n    bool isActiveBalance,\\n    uint256 amount\\n  )\\n    private\\n    returns (uint256)\\n  {\\n    SM1Types.StoredBalance storage balancePtr = _getBalancePtr(maybeStaker, isActiveBalance);\\n    SM1Types.StoredBalance memory balance =\\n      _loadBalanceForUpdate(balancePtr, maybeStaker, isActiveBalance);\\n\\n    uint256 originalCurrentBalance = uint256(balance.currentEpochBalance);\\n    balance.currentEpochBalance = originalCurrentBalance.sub(amount).toUint240();\\n    balance.nextEpochBalance = uint256(balance.nextEpochBalance).sub(amount).toUint240();\\n\\n    _storeBalance(balancePtr, balance);\\n    return originalCurrentBalance;\\n  }\\n\\n  /**\\n   * @dev Settle a balance while applying an increase.\\n   */\\n  function _increaseNextBalance(\\n    address maybeStaker,\\n    bool isActiveBalance,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    SM1Types.StoredBalance storage balancePtr = _getBalancePtr(maybeStaker, isActiveBalance);\\n    SM1Types.StoredBalance memory balance =\\n      _loadBalanceForUpdate(balancePtr, maybeStaker, isActiveBalance);\\n\\n    balance.nextEpochBalance = uint256(balance.nextEpochBalance).add(amount).toUint240();\\n\\n    _storeBalance(balancePtr, balance);\\n  }\\n\\n  /**\\n   * @dev Settle a balance while applying a decrease.\\n   */\\n  function _decreaseNextBalance(\\n    address maybeStaker,\\n    bool isActiveBalance,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    SM1Types.StoredBalance storage balancePtr = _getBalancePtr(maybeStaker, isActiveBalance);\\n    SM1Types.StoredBalance memory balance =\\n      _loadBalanceForUpdate(balancePtr, maybeStaker, isActiveBalance);\\n\\n    balance.nextEpochBalance = uint256(balance.nextEpochBalance).sub(amount).toUint240();\\n\\n    _storeBalance(balancePtr, balance);\\n  }\\n\\n  function _getBalancePtr(\\n    address maybeStaker,\\n    bool isActiveBalance\\n  )\\n    private\\n    view\\n    returns (SM1Types.StoredBalance storage)\\n  {\\n    // Active.\\n    if (isActiveBalance) {\\n      if (maybeStaker != address(0)) {\\n        return _ACTIVE_BALANCES_[maybeStaker];\\n      }\\n      return _TOTAL_ACTIVE_BALANCE_;\\n    }\\n\\n    // Inactive.\\n    if (maybeStaker != address(0)) {\\n      return _INACTIVE_BALANCES_[maybeStaker];\\n    }\\n    return _TOTAL_INACTIVE_BALANCE_;\\n  }\\n\\n  /**\\n   * @dev Load a balance for updating.\\n   *\\n   *  IMPORTANT: This function may modify state, and so the balance MUST be stored afterwards.\\n   *    - For active balances:\\n   *      - If a rollover occurs, rewards are settled up to the epoch boundary.\\n   *\\n   * @param  balancePtr       A storage pointer to the balance.\\n   * @param  maybeStaker      The user address, or address(0) to update total balance.\\n   * @param  isActiveBalance  Whether the balance is an active balance.\\n   */\\n  function _loadBalanceForUpdate(\\n    SM1Types.StoredBalance storage balancePtr,\\n    address maybeStaker,\\n    bool isActiveBalance\\n  )\\n    private\\n    returns (SM1Types.StoredBalance memory)\\n  {\\n    // Active balance.\\n    if (isActiveBalance) {\\n      (\\n        SM1Types.StoredBalance memory balance,\\n        uint256 beforeRolloverEpoch,\\n        uint256 beforeRolloverBalance,\\n        bool didRolloverOccur\\n      ) = _loadActiveBalance(balancePtr);\\n      if (didRolloverOccur) {\\n        // Handle the effect of the balance rollover on rewards. We must partially settle the index\\n        // up to the epoch boundary where the change in balance occurred. We pass in the balance\\n        // from before the boundary.\\n        if (maybeStaker == address(0)) {\\n          // If it's the total active balance...\\n          _settleGlobalIndexUpToEpoch(beforeRolloverBalance, beforeRolloverEpoch);\\n        } else {\\n          // If it's a user active balance...\\n          _settleUserRewardsUpToEpoch(maybeStaker, beforeRolloverBalance, beforeRolloverEpoch);\\n        }\\n      }\\n      return balance;\\n    }\\n\\n    // Inactive balance.\\n    return _loadInactiveBalance(balancePtr);\\n  }\\n\\n  function _loadActiveBalance(\\n    SM1Types.StoredBalance storage balancePtr\\n  )\\n    private\\n    view\\n    returns (\\n      SM1Types.StoredBalance memory,\\n      uint256,\\n      uint256,\\n      bool\\n    )\\n  {\\n    SM1Types.StoredBalance memory balance = balancePtr;\\n\\n    // Return these as they may be needed for rewards settlement.\\n    uint256 beforeRolloverEpoch = uint256(balance.currentEpoch);\\n    uint256 beforeRolloverBalance = uint256(balance.currentEpochBalance);\\n    bool didRolloverOccur = false;\\n\\n    // Roll the balance forward if needed.\\n    uint256 currentEpoch = getCurrentEpoch();\\n    if (currentEpoch > uint256(balance.currentEpoch)) {\\n      didRolloverOccur = balance.currentEpochBalance != balance.nextEpochBalance;\\n\\n      balance.currentEpoch = currentEpoch.toUint16();\\n      balance.currentEpochBalance = balance.nextEpochBalance;\\n    }\\n\\n    return (balance, beforeRolloverEpoch, beforeRolloverBalance, didRolloverOccur);\\n  }\\n\\n  function _loadInactiveBalance(\\n    SM1Types.StoredBalance storage balancePtr\\n  )\\n    private\\n    view\\n    returns (SM1Types.StoredBalance memory)\\n  {\\n    SM1Types.StoredBalance memory balance = balancePtr;\\n\\n    // Roll the balance forward if needed.\\n    uint256 currentEpoch = getCurrentEpoch();\\n    if (currentEpoch > uint256(balance.currentEpoch)) {\\n      balance.currentEpoch = currentEpoch.toUint16();\\n      balance.currentEpochBalance = balance.nextEpochBalance;\\n    }\\n\\n    return balance;\\n  }\\n\\n  /**\\n   * @dev Store a balance.\\n   */\\n  function _storeBalance(\\n    SM1Types.StoredBalance storage balancePtr,\\n    SM1Types.StoredBalance memory balance\\n  )\\n    private\\n  {\\n    // Note: This should use a single `sstore` when compiler optimizations are enabled.\\n    balancePtr.currentEpoch = balance.currentEpoch;\\n    balancePtr.currentEpochBalance = balance.currentEpochBalance;\\n    balancePtr.nextEpochBalance = balance.nextEpochBalance;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/safety/v1/lib/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\n/**\\n * @dev Methods for downcasting unsigned integers, reverting on overflow.\\n */\\nlibrary SafeCast {\\n\\n  /**\\n   * @dev Downcast to a uint16, reverting on overflow.\\n   */\\n  function toUint16(\\n    uint256 a\\n  )\\n    internal\\n    pure\\n    returns (uint16)\\n  {\\n    uint16 b = uint16(a);\\n    require(\\n      uint256(b) == a,\\n      'SafeCast: toUint16 overflow'\\n    );\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Downcast to a uint32, reverting on overflow.\\n   */\\n  function toUint32(\\n    uint256 a\\n  )\\n    internal\\n    pure\\n    returns (uint32)\\n  {\\n    uint32 b = uint32(a);\\n    require(\\n      uint256(b) == a,\\n      'SafeCast: toUint32 overflow'\\n    );\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Downcast to a uint128, reverting on overflow.\\n   */\\n  function toUint128(\\n    uint256 a\\n  )\\n    internal\\n    pure\\n    returns (uint128)\\n  {\\n    uint128 b = uint128(a);\\n    require(\\n      uint256(b) == a,\\n      'SafeCast: toUint128 overflow'\\n    );\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Downcast to a uint224, reverting on overflow.\\n   */\\n  function toUint224(\\n    uint256 a\\n  )\\n    internal\\n    pure\\n    returns (uint224)\\n  {\\n    uint224 b = uint224(a);\\n    require(\\n      uint256(b) == a,\\n      'SafeCast: toUint224 overflow'\\n    );\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Downcast to a uint240, reverting on overflow.\\n   */\\n  function toUint240(\\n    uint256 a\\n  )\\n    internal\\n    pure\\n    returns (uint240)\\n  {\\n    uint240 b = uint240(a);\\n    require(\\n      uint256(b) == a,\\n      'SafeCast: toUint240 overflow'\\n    );\\n    return b;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/safety/v1/impl/SM1Rewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport { SafeERC20 } from '../../../dependencies/open-zeppelin/SafeERC20.sol';\\nimport { SafeMath } from '../../../dependencies/open-zeppelin/SafeMath.sol';\\nimport { IERC20 } from '../../../interfaces/IERC20.sol';\\nimport { Math } from '../../../utils/Math.sol';\\nimport { SafeCast } from '../lib/SafeCast.sol';\\nimport { SM1EpochSchedule } from './SM1EpochSchedule.sol';\\n\\n/**\\n * @title SM1Rewards\\n * @author dYdX\\n *\\n * @dev Manages the distribution of token rewards.\\n *\\n *  Rewards are distributed continuously. After each second, an account earns rewards `r` according\\n *  to the following formula:\\n *\\n *      r = R * s / S\\n *\\n *  Where:\\n *    - `R` is the rewards distributed globally each second, also called the “emission rate.”\\n *    - `s` is the account's staked balance in that second (technically, it is measured at the\\n *      end of the second)\\n *    - `S` is the sum total of all staked balances in that second (again, measured at the end of\\n *      the second)\\n *\\n *  The parameter `R` can be configured by the contract owner. For every second that elapses,\\n *  exactly `R` tokens will accrue to users, save for rounding errors, and with the exception that\\n *  while the total staked balance is zero, no tokens will accrue to anyone.\\n *\\n *  The accounting works as follows: A global index is stored which represents the cumulative\\n *  number of rewards tokens earned per staked token since the start of the distribution.\\n *  The value of this index increases over time, and there are two factors affecting the rate of\\n *  increase:\\n *    1) The emission rate (in the numerator)\\n *    2) The total number of staked tokens (in the denominator)\\n *\\n *  Whenever either factor changes, in some timestamp T, we settle the global index up to T by\\n *  calculating the increase in the index since the last update using the OLD values of the factors:\\n *\\n *    indexDelta = timeDelta * emissionPerSecond * INDEX_BASE / totalStaked\\n *\\n *  Where `INDEX_BASE` is a scaling factor used to allow more precision in the storage of the index.\\n *\\n *  For each user we store an accrued rewards balance, as well as a user index, which is a cache of\\n *  the global index at the time that the user's accrued rewards balance was last updated. Then at\\n *  any point in time, a user's claimable rewards are represented by the following:\\n *\\n *    rewards = _USER_REWARDS_BALANCES_[user] + userStaked * (\\n *                settledGlobalIndex - _USER_INDEXES_[user]\\n *              ) / INDEX_BASE\\n */\\nabstract contract SM1Rewards is\\n  SM1EpochSchedule\\n{\\n  using SafeCast for uint256;\\n  using SafeERC20 for IERC20;\\n  using SafeMath for uint256;\\n\\n  // ============ Constants ============\\n\\n  /// @dev Additional precision used to represent the global and user index values.\\n  uint256 private constant INDEX_BASE = 10**18;\\n\\n  /// @notice The rewards token.\\n  IERC20 public immutable REWARDS_TOKEN;\\n\\n  /// @notice Address to pull rewards from. Must have provided an allowance to this contract.\\n  address public immutable REWARDS_TREASURY;\\n\\n  /// @notice Start timestamp (inclusive) of the period in which rewards can be earned.\\n  uint256 public immutable DISTRIBUTION_START;\\n\\n  /// @notice End timestamp (exclusive) of the period in which rewards can be earned.\\n  uint256 public immutable DISTRIBUTION_END;\\n\\n  // ============ Events ============\\n\\n  event RewardsPerSecondUpdated(\\n    uint256 emissionPerSecond\\n  );\\n\\n  event GlobalIndexUpdated(\\n    uint256 index\\n  );\\n\\n  event UserIndexUpdated(\\n    address indexed user,\\n    uint256 index,\\n    uint256 unclaimedRewards\\n  );\\n\\n  event ClaimedRewards(\\n    address indexed user,\\n    address recipient,\\n    uint256 claimedRewards\\n  );\\n\\n  // ============ Constructor ============\\n\\n  constructor(\\n    IERC20 rewardsToken,\\n    address rewardsTreasury,\\n    uint256 distributionStart,\\n    uint256 distributionEnd\\n  ) {\\n    require(\\n      distributionEnd >= distributionStart,\\n      'SM1Rewards: Invalid parameters'\\n    );\\n    REWARDS_TOKEN = rewardsToken;\\n    REWARDS_TREASURY = rewardsTreasury;\\n    DISTRIBUTION_START = distributionStart;\\n    DISTRIBUTION_END = distributionEnd;\\n  }\\n\\n  // ============ External Functions ============\\n\\n  /**\\n   * @notice The current emission rate of rewards.\\n   *\\n   * @return The number of rewards tokens issued globally each second.\\n   */\\n  function getRewardsPerSecond()\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return _REWARDS_PER_SECOND_;\\n  }\\n\\n  // ============ Internal Functions ============\\n\\n  /**\\n   * @dev Initialize the contract.\\n   */\\n  function __SM1Rewards_init()\\n    internal\\n  {\\n    _GLOBAL_INDEX_TIMESTAMP_ = Math.max(block.timestamp, DISTRIBUTION_START).toUint32();\\n  }\\n\\n  /**\\n   * @dev Set the emission rate of rewards.\\n   *\\n   *  IMPORTANT: Do not call this function without settling the total staked balance first, to\\n   *  ensure that the index is settled up to the epoch boundaries.\\n   *\\n   * @param  emissionPerSecond  The new number of rewards tokens to give out each second.\\n   * @param  totalStaked        The total staked balance.\\n   */\\n  function _setRewardsPerSecond(\\n    uint256 emissionPerSecond,\\n    uint256 totalStaked\\n  )\\n    internal\\n  {\\n    _settleGlobalIndexUpToNow(totalStaked);\\n    _REWARDS_PER_SECOND_ = emissionPerSecond;\\n    emit RewardsPerSecondUpdated(emissionPerSecond);\\n  }\\n\\n  /**\\n   * @dev Claim tokens, sending them to the specified recipient.\\n   *\\n   *  Note: In order to claim all accrued rewards, the total and user staked balances must first be\\n   *  settled before calling this function.\\n   *\\n   * @param  user       The user's address.\\n   * @param  recipient  The address to send rewards to.\\n   *\\n   * @return The number of rewards tokens claimed.\\n   */\\n  function _claimRewards(\\n    address user,\\n    address recipient\\n  )\\n    internal\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = _USER_REWARDS_BALANCES_[user];\\n    _USER_REWARDS_BALANCES_[user] = 0;\\n    REWARDS_TOKEN.safeTransferFrom(REWARDS_TREASURY, recipient, accruedRewards);\\n    emit ClaimedRewards(user, recipient, accruedRewards);\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Settle a user's rewards up to the latest global index as of `block.timestamp`. Triggers a\\n   *  settlement of the global index up to `block.timestamp`. Should be called with the OLD user\\n   *  and total balances.\\n   *\\n   * @param  user         The user's address.\\n   * @param  userStaked   Tokens staked by the user during the period since the last user index\\n   *                      update.\\n   * @param  totalStaked  Total tokens staked by all users during the period since the last global\\n   *                      index update.\\n   *\\n   * @return The user's accrued rewards, including past unclaimed rewards.\\n   */\\n  function _settleUserRewardsUpToNow(\\n    address user,\\n    uint256 userStaked,\\n    uint256 totalStaked\\n  )\\n    internal\\n    returns (uint256)\\n  {\\n    uint256 globalIndex = _settleGlobalIndexUpToNow(totalStaked);\\n    return _settleUserRewardsUpToIndex(user, userStaked, globalIndex);\\n  }\\n\\n  /**\\n   * @dev Settle a user's rewards up to an epoch boundary. Should be used to partially settle a\\n   *  user's rewards if their balance was known to have changed on that epoch boundary.\\n   *\\n   * @param  user         The user's address.\\n   * @param  userStaked   Tokens staked by the user. Should be accurate for the time period\\n   *                      since the last update to this user and up to the end of the\\n   *                      specified epoch.\\n   * @param  epochNumber  Settle the user's rewards up to the end of this epoch.\\n   *\\n   * @return The user's accrued rewards, including past unclaimed rewards, up to the end of the\\n   *  specified epoch.\\n   */\\n  function _settleUserRewardsUpToEpoch(\\n    address user,\\n    uint256 userStaked,\\n    uint256 epochNumber\\n  )\\n    internal\\n    returns (uint256)\\n  {\\n    uint256 globalIndex = _EPOCH_INDEXES_[epochNumber];\\n    return _settleUserRewardsUpToIndex(user, userStaked, globalIndex);\\n  }\\n\\n  /**\\n   * @dev Settle the global index up to the end of the given epoch.\\n   *\\n   *  IMPORTANT: This function should only be called under conditions which ensure the following:\\n   *    - `epochNumber` < the current epoch number\\n   *    - `_GLOBAL_INDEX_TIMESTAMP_ < settleUpToTimestamp`\\n   *    - `_EPOCH_INDEXES_[epochNumber] = 0`\\n   */\\n  function _settleGlobalIndexUpToEpoch(\\n    uint256 totalStaked,\\n    uint256 epochNumber\\n  )\\n    internal\\n    returns (uint256)\\n  {\\n    uint256 settleUpToTimestamp = getStartOfEpoch(epochNumber.add(1));\\n\\n    uint256 globalIndex = _settleGlobalIndexUpToTimestamp(totalStaked, settleUpToTimestamp);\\n    _EPOCH_INDEXES_[epochNumber] = globalIndex;\\n    return globalIndex;\\n  }\\n\\n  // ============ Private Functions ============\\n\\n  /**\\n   * @dev Updates the global index, reflecting cumulative rewards given out per staked token.\\n   *\\n   * @param  totalStaked          The total staked balance, which should be constant in the interval\\n   *                              since the last update to the global index.\\n   *\\n   * @return The new global index.\\n   */\\n  function _settleGlobalIndexUpToNow(\\n    uint256 totalStaked\\n  )\\n    private\\n    returns (uint256)\\n  {\\n    return _settleGlobalIndexUpToTimestamp(totalStaked, block.timestamp);\\n  }\\n\\n  /**\\n   * @dev Helper function which settles a user's rewards up to a global index. Should be called\\n   *  any time a user's staked balance changes, with the OLD user and total balances.\\n   *\\n   * @param  user            The user's address.\\n   * @param  userStaked      Tokens staked by the user during the period since the last user index\\n   *                         update.\\n   * @param  newGlobalIndex  The new index value to bring the user index up to. MUST NOT be less\\n   *                         than the user's index.\\n   *\\n   * @return The user's accrued rewards, including past unclaimed rewards.\\n   */\\n  function _settleUserRewardsUpToIndex(\\n    address user,\\n    uint256 userStaked,\\n    uint256 newGlobalIndex\\n  )\\n    private\\n    returns (uint256)\\n  {\\n    uint256 oldAccruedRewards = _USER_REWARDS_BALANCES_[user];\\n    uint256 oldUserIndex = _USER_INDEXES_[user];\\n\\n    if (oldUserIndex == newGlobalIndex) {\\n      return oldAccruedRewards;\\n    }\\n\\n    uint256 newAccruedRewards;\\n    if (userStaked == 0) {\\n      // Note: Even if the user's staked balance is zero, we still need to update the user index.\\n      newAccruedRewards = oldAccruedRewards;\\n    } else {\\n      // Calculate newly accrued rewards since the last update to the user's index.\\n      uint256 indexDelta = newGlobalIndex.sub(oldUserIndex);\\n      uint256 accruedRewardsDelta = userStaked.mul(indexDelta).div(INDEX_BASE);\\n      newAccruedRewards = oldAccruedRewards.add(accruedRewardsDelta);\\n\\n      // Update the user's rewards.\\n      _USER_REWARDS_BALANCES_[user] = newAccruedRewards;\\n    }\\n\\n    // Update the user's index.\\n    _USER_INDEXES_[user] = newGlobalIndex;\\n    emit UserIndexUpdated(user, newGlobalIndex, newAccruedRewards);\\n    return newAccruedRewards;\\n  }\\n\\n  /**\\n   * @dev Updates the global index, reflecting cumulative rewards given out per staked token.\\n   *\\n   * @param  totalStaked          The total staked balance, which should be constant in the interval\\n   *                              (_GLOBAL_INDEX_TIMESTAMP_, settleUpToTimestamp).\\n   * @param  settleUpToTimestamp  The timestamp up to which to settle rewards. It MUST satisfy\\n   *                              `settleUpToTimestamp <= block.timestamp`.\\n   *\\n   * @return The new global index.\\n   */\\n  function _settleGlobalIndexUpToTimestamp(\\n    uint256 totalStaked,\\n    uint256 settleUpToTimestamp\\n  )\\n    private\\n    returns (uint256)\\n  {\\n    uint256 oldGlobalIndex = uint256(_GLOBAL_INDEX_);\\n\\n    // The goal of this function is to calculate rewards earned since the last global index update.\\n    // These rewards are earned over the time interval which is the intersection of the intervals\\n    // [_GLOBAL_INDEX_TIMESTAMP_, settleUpToTimestamp] and [DISTRIBUTION_START, DISTRIBUTION_END].\\n    //\\n    // We can simplify a bit based on the assumption:\\n    //   `_GLOBAL_INDEX_TIMESTAMP_ >= DISTRIBUTION_START`\\n    //\\n    // Get the start and end of the time interval under consideration.\\n    uint256 intervalStart = uint256(_GLOBAL_INDEX_TIMESTAMP_);\\n    uint256 intervalEnd = Math.min(settleUpToTimestamp, DISTRIBUTION_END);\\n\\n    // Return early if the interval has length zero (incl. case where intervalEnd < intervalStart).\\n    if (intervalEnd <= intervalStart) {\\n      return oldGlobalIndex;\\n    }\\n\\n    // Note: If we reach this point, we must update _GLOBAL_INDEX_TIMESTAMP_.\\n\\n    uint256 emissionPerSecond = _REWARDS_PER_SECOND_;\\n\\n    if (emissionPerSecond == 0 || totalStaked == 0) {\\n      // Ensure a log is emitted if the timestamp changed, even if the index does not change.\\n      _GLOBAL_INDEX_TIMESTAMP_ = intervalEnd.toUint32();\\n      emit GlobalIndexUpdated(oldGlobalIndex);\\n      return oldGlobalIndex;\\n    }\\n\\n    // Calculate the change in index over the interval.\\n    uint256 timeDelta = intervalEnd.sub(intervalStart);\\n    uint256 indexDelta = timeDelta.mul(emissionPerSecond).mul(INDEX_BASE).div(totalStaked);\\n\\n    // Calculate, update, and return the new global index.\\n    uint256 newGlobalIndex = oldGlobalIndex.add(indexDelta);\\n\\n    // Update storage. (Shared storage slot.)\\n    _GLOBAL_INDEX_TIMESTAMP_ = intervalEnd.toUint32();\\n    _GLOBAL_INDEX_ = newGlobalIndex.toUint224();\\n\\n    emit GlobalIndexUpdated(newGlobalIndex);\\n    return newGlobalIndex;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/open-zeppelin/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport { IERC20 } from '../../interfaces/IERC20.sol';\\nimport { SafeMath } from './SafeMath.sol';\\nimport { Address } from './Address.sol';\\n\\n/**\\n * @title SafeERC20\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/safety/v1/impl/SM1EpochSchedule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport { SafeMath } from '../../../dependencies/open-zeppelin/SafeMath.sol';\\nimport { SafeCast } from '../lib/SafeCast.sol';\\nimport { SM1Types } from '../lib/SM1Types.sol';\\nimport { SM1Storage } from './SM1Storage.sol';\\n\\n/**\\n * @title SM1EpochSchedule\\n * @author dYdX\\n *\\n * @dev Defines a function from block timestamp to epoch number.\\n *\\n *  The formula used is `n = floor((t - b) / a)` where:\\n *    - `n` is the epoch number\\n *    - `t` is the timestamp (in seconds)\\n *    - `b` is a non-negative offset, indicating the start of epoch zero (in seconds)\\n *    - `a` is the length of an epoch, a.k.a. the interval (in seconds)\\n *\\n *  Note that by restricting `b` to be non-negative, we limit ourselves to functions in which epoch\\n *  zero starts at a non-negative timestamp.\\n *\\n *  The recommended epoch length and blackout window are 28 and 7 days respectively; however, these\\n *  are modifiable by the admin, within the specified bounds.\\n */\\nabstract contract SM1EpochSchedule is\\n  SM1Storage\\n{\\n  using SafeCast for uint256;\\n  using SafeMath for uint256;\\n\\n  // ============ Events ============\\n\\n  event EpochParametersChanged(\\n    SM1Types.EpochParameters epochParameters\\n  );\\n\\n  event BlackoutWindowChanged(\\n    uint256 blackoutWindow\\n  );\\n\\n  // ============ Initializer ============\\n\\n  function __SM1EpochSchedule_init(\\n    uint256 interval,\\n    uint256 offset,\\n    uint256 blackoutWindow\\n  )\\n    internal\\n  {\\n    require(\\n      block.timestamp < offset,\\n      'SM1EpochSchedule: Epoch zero must start after initialization'\\n    );\\n    _setBlackoutWindow(blackoutWindow);\\n    _setEpochParameters(interval, offset);\\n  }\\n\\n  // ============ Public Functions ============\\n\\n  /**\\n   * @notice Get the epoch at the current block timestamp.\\n   *\\n   *  NOTE: Reverts if epoch zero has not started.\\n   *\\n   * @return The current epoch number.\\n   */\\n  function getCurrentEpoch()\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    (uint256 interval, uint256 offsetTimestamp) = _getIntervalAndOffsetTimestamp();\\n    return offsetTimestamp.div(interval);\\n  }\\n\\n  /**\\n   * @notice Get the time remaining in the current epoch.\\n   *\\n   *  NOTE: Reverts if epoch zero has not started.\\n   *\\n   * @return The number of seconds until the next epoch.\\n   */\\n  function getTimeRemainingInCurrentEpoch()\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    (uint256 interval, uint256 offsetTimestamp) = _getIntervalAndOffsetTimestamp();\\n    uint256 timeElapsedInEpoch = offsetTimestamp.mod(interval);\\n    return interval.sub(timeElapsedInEpoch);\\n  }\\n\\n  /**\\n   * @notice Given an epoch number, get the start of that epoch. Calculated as `t = (n * a) + b`.\\n   *\\n   * @return The timestamp in seconds representing the start of that epoch.\\n   */\\n  function getStartOfEpoch(\\n    uint256 epochNumber\\n  )\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    SM1Types.EpochParameters memory epochParameters = _EPOCH_PARAMETERS_;\\n    uint256 interval = uint256(epochParameters.interval);\\n    uint256 offset = uint256(epochParameters.offset);\\n    return epochNumber.mul(interval).add(offset);\\n  }\\n\\n  /**\\n   * @notice Check whether we are at or past the start of epoch zero.\\n   *\\n   * @return Boolean `true` if the current timestamp is at least the start of epoch zero,\\n   *  otherwise `false`.\\n   */\\n  function hasEpochZeroStarted()\\n    public\\n    view\\n    returns (bool)\\n  {\\n    SM1Types.EpochParameters memory epochParameters = _EPOCH_PARAMETERS_;\\n    uint256 offset = uint256(epochParameters.offset);\\n    return block.timestamp >= offset;\\n  }\\n\\n  /**\\n   * @notice Check whether we are in a blackout window, where withdrawal requests are restricted.\\n   *  Note that before epoch zero has started, there are no blackout windows.\\n   *\\n   * @return Boolean `true` if we are in a blackout window, otherwise `false`.\\n   */\\n  function inBlackoutWindow()\\n    public\\n    view\\n    returns (bool)\\n  {\\n    return hasEpochZeroStarted() && getTimeRemainingInCurrentEpoch() <= _BLACKOUT_WINDOW_;\\n  }\\n\\n  // ============ Internal Functions ============\\n\\n  function _setEpochParameters(\\n    uint256 interval,\\n    uint256 offset\\n  )\\n    internal\\n  {\\n    SM1Types.EpochParameters memory epochParameters =\\n      SM1Types.EpochParameters({interval: interval.toUint128(), offset: offset.toUint128()});\\n    _EPOCH_PARAMETERS_ = epochParameters;\\n    emit EpochParametersChanged(epochParameters);\\n  }\\n\\n  function _setBlackoutWindow(\\n    uint256 blackoutWindow\\n  )\\n    internal\\n  {\\n    _BLACKOUT_WINDOW_ = blackoutWindow;\\n    emit BlackoutWindowChanged(blackoutWindow);\\n  }\\n\\n  // ============ Private Functions ============\\n\\n  /**\\n   * @dev Helper function to read params from storage and apply offset to the given timestamp.\\n   *  Recall that the formula for epoch number is `n = (t - b) / a`.\\n   *\\n   *  NOTE: Reverts if epoch zero has not started.\\n   *\\n   * @return The values `a` and `(t - b)`.\\n   */\\n  function _getIntervalAndOffsetTimestamp()\\n    private\\n    view\\n    returns (uint256, uint256)\\n  {\\n    SM1Types.EpochParameters memory epochParameters = _EPOCH_PARAMETERS_;\\n    uint256 interval = uint256(epochParameters.interval);\\n    uint256 offset = uint256(epochParameters.offset);\\n\\n    require(\\n      block.timestamp >= offset,\\n      'SM1EpochSchedule: Epoch zero has not started'\\n    );\\n\\n    uint256 offsetTimestamp = block.timestamp.sub(offset);\\n    return (interval, offsetTimestamp);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/open-zeppelin/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/safety/v1/impl/SM1ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport { SafeMath } from '../../../dependencies/open-zeppelin/SafeMath.sol';\\nimport { IERC20 } from '../../../interfaces/IERC20.sol';\\nimport { IERC20Detailed } from '../../../interfaces/IERC20Detailed.sol';\\nimport { SM1Types } from '../lib/SM1Types.sol';\\nimport { SM1GovernancePowerDelegation } from './SM1GovernancePowerDelegation.sol';\\nimport { SM1StakedBalances } from './SM1StakedBalances.sol';\\n\\n/**\\n * @title SM1ERC20\\n * @author dYdX\\n *\\n * @dev ERC20 interface for staked tokens. Implements governance functionality for the tokens.\\n *\\n *  Also allows a user with an active stake to transfer their staked tokens to another user,\\n *  even if they would otherwise be restricted from withdrawing.\\n */\\nabstract contract SM1ERC20 is\\n  SM1StakedBalances,\\n  SM1GovernancePowerDelegation,\\n  IERC20Detailed\\n{\\n  using SafeMath for uint256;\\n\\n  // ============ Constants ============\\n\\n  /// @notice EIP-712 typehash for token approval via EIP-2612 permit.\\n  bytes32 public constant PERMIT_TYPEHASH = keccak256(\\n    'Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)'\\n  );\\n\\n  // ============ External Functions ============\\n\\n  function name()\\n    external\\n    pure\\n    override\\n    returns (string memory)\\n  {\\n    return 'Staked DYDX';\\n  }\\n\\n  function symbol()\\n    external\\n    pure\\n    override\\n    returns (string memory)\\n  {\\n    return 'stkDYDX';\\n  }\\n\\n  function decimals()\\n    external\\n    pure\\n    override\\n    returns (uint8)\\n  {\\n    return 18;\\n  }\\n\\n  /**\\n   * @notice Get the total supply of staked balances.\\n   *\\n   *  Note that due to the exchange rate, this is different than querying the total balance of\\n   *  underyling token staked to this contract.\\n   *\\n   * @return The sum of all staked balances.\\n   */\\n  function totalSupply()\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return getTotalActiveBalanceCurrentEpoch() + getTotalInactiveBalanceCurrentEpoch();\\n  }\\n\\n  /**\\n   * @notice Get a user's staked balance.\\n   *\\n   *  Note that due to the exchange rate, one unit of staked balance may not be equivalent to one\\n   *  unit of the underlying token. Also note that a user's staked balance is different from a\\n   *  user's transferable balance.\\n   *\\n   * @param  account  The account to get the balance of.\\n   *\\n   * @return The user's staked balance.\\n   */\\n  function balanceOf(\\n    address account\\n  )\\n    public\\n    view\\n    override(SM1GovernancePowerDelegation, IERC20)\\n    returns (uint256)\\n  {\\n    return getActiveBalanceCurrentEpoch(account) + getInactiveBalanceCurrentEpoch(account);\\n  }\\n\\n  function transfer(\\n    address recipient,\\n    uint256 amount\\n  )\\n    external\\n    override\\n    nonReentrant\\n    returns (bool)\\n  {\\n    _transfer(msg.sender, recipient, amount);\\n    return true;\\n  }\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return _ALLOWANCES_[owner][spender];\\n  }\\n\\n  function approve(\\n    address spender,\\n    uint256 amount\\n  )\\n    external\\n    override\\n    returns (bool)\\n  {\\n    _approve(msg.sender, spender, amount);\\n    return true;\\n  }\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    external\\n    override\\n    nonReentrant\\n    returns (bool)\\n  {\\n    _transfer(sender, recipient, amount);\\n    _approve(\\n      sender,\\n      msg.sender,\\n      _ALLOWANCES_[sender][msg.sender].sub(amount, 'SM1ERC20: transfer amount exceeds allowance')\\n    );\\n    return true;\\n  }\\n\\n  function increaseAllowance(\\n    address spender,\\n    uint256 addedValue\\n  )\\n    external\\n    returns (bool)\\n  {\\n    _approve(msg.sender, spender, _ALLOWANCES_[msg.sender][spender].add(addedValue));\\n    return true;\\n  }\\n\\n  function decreaseAllowance(\\n    address spender,\\n    uint256 subtractedValue\\n  )\\n    external\\n    returns (bool)\\n  {\\n    _approve(\\n      msg.sender,\\n      spender,\\n      _ALLOWANCES_[msg.sender][spender].sub(\\n        subtractedValue,\\n        'SM1ERC20: Decreased allowance below zero'\\n      )\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Implements the permit function as specified in EIP-2612.\\n   *\\n   * @param  owner     Address of the token owner.\\n   * @param  spender   Address of the spender.\\n   * @param  value     Amount of allowance.\\n   * @param  deadline  Expiration timestamp for the signature.\\n   * @param  v         Signature param.\\n   * @param  r         Signature param.\\n   * @param  s         Signature param.\\n   */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    external\\n  {\\n    require(\\n      owner != address(0),\\n      'SM1ERC20: INVALID_OWNER'\\n    );\\n    require(\\n      block.timestamp <= deadline,\\n      'SM1ERC20: INVALID_EXPIRATION'\\n    );\\n    uint256 currentValidNonce = _NONCES_[owner];\\n    bytes32 digest = keccak256(\\n      abi.encodePacked(\\n        '\\\\x19\\\\x01',\\n        _DOMAIN_SEPARATOR_,\\n        keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\\n      )\\n    );\\n    require(\\n      owner == ecrecover(digest, v, r, s),\\n      'SM1ERC20: INVALID_SIGNATURE'\\n    );\\n    _NONCES_[owner] = currentValidNonce.add(1);\\n    _approve(owner, spender, value);\\n  }\\n\\n  // ============ Internal Functions ============\\n\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  )\\n    internal\\n  {\\n    require(\\n      sender != address(0),\\n      'SM1ERC20: Transfer from address(0)'\\n    );\\n    require(\\n      recipient != address(0),\\n      'SM1ERC20: Transfer to address(0)'\\n    );\\n    require(\\n      getTransferableBalance(sender) >= amount,\\n      'SM1ERC20: Transfer exceeds next epoch active balance'\\n    );\\n\\n    // Update staked balances and delegate snapshots.\\n    _transferCurrentAndNextActiveBalance(sender, recipient, amount);\\n    _moveDelegatesForTransfer(sender, recipient, amount);\\n\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  )\\n    internal\\n  {\\n    require(\\n      owner != address(0),\\n      'SM1ERC20: Approve from address(0)'\\n    );\\n    require(\\n      spender != address(0),\\n      'SM1ERC20: Approve to address(0)'\\n    );\\n\\n    _ALLOWANCES_[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Detailed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\n\\nimport { IERC20 } from './IERC20.sol';\\n\\n/**\\n * @dev Interface for ERC20 including metadata\\n **/\\ninterface IERC20Detailed is IERC20 {\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/safety/v1/impl/SM1GovernancePowerDelegation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport { SafeMath } from '../../../dependencies/open-zeppelin/SafeMath.sol';\\nimport {\\n  IGovernancePowerDelegationERC20\\n} from '../../../interfaces/IGovernancePowerDelegationERC20.sol';\\nimport { SM1Types } from '../lib/SM1Types.sol';\\nimport { SM1ExchangeRate } from './SM1ExchangeRate.sol';\\nimport { SM1Storage } from './SM1Storage.sol';\\n\\n/**\\n * @title SM1GovernancePowerDelegation\\n * @author dYdX\\n *\\n * @dev Provides support for two types of governance powers which are separately delegatable.\\n *  Provides functions for delegation and for querying a user's power at a certain block number.\\n *\\n *  Internally, makes use of staked balances denoted in staked units, but returns underlying token\\n *  units from the getPowerAtBlock() and getPowerCurrent() functions.\\n *\\n *  This is based on, and is designed to match, Aave's implementation, which is used in their\\n *  governance token and staked token contracts.\\n */\\nabstract contract SM1GovernancePowerDelegation is\\n  SM1ExchangeRate,\\n  IGovernancePowerDelegationERC20\\n{\\n  using SafeMath for uint256;\\n\\n  // ============ Constants ============\\n\\n  /// @notice EIP-712 typehash for delegation by signature of a specific governance power type.\\n  bytes32 public constant DELEGATE_BY_TYPE_TYPEHASH = keccak256(\\n    'DelegateByType(address delegatee,uint256 type,uint256 nonce,uint256 expiry)'\\n  );\\n\\n  /// @notice EIP-712 typehash for delegation by signature of all governance powers.\\n  bytes32 public constant DELEGATE_TYPEHASH = keccak256(\\n    'Delegate(address delegatee,uint256 nonce,uint256 expiry)'\\n  );\\n\\n  // ============ External Functions ============\\n\\n  /**\\n   * @notice Delegates a specific governance power of the sender to a delegatee.\\n   *\\n   * @param  delegatee       The address to delegate power to.\\n   * @param  delegationType  The type of delegation (VOTING_POWER, PROPOSITION_POWER).\\n   */\\n  function delegateByType(\\n    address delegatee,\\n    DelegationType delegationType\\n  )\\n    external\\n    override\\n  {\\n    _delegateByType(msg.sender, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @notice Delegates all governance powers of the sender to a delegatee.\\n   *\\n   * @param  delegatee  The address to delegate power to.\\n   */\\n  function delegate(\\n    address delegatee\\n  )\\n    external\\n    override\\n  {\\n    _delegateByType(msg.sender, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(msg.sender, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n\\n  /**\\n   * @dev Delegates specific governance power from signer to `delegatee` using an EIP-712 signature.\\n   *\\n   * @param  delegatee       The address to delegate votes to.\\n   * @param  delegationType  The type of delegation (VOTING_POWER, PROPOSITION_POWER).\\n   * @param  nonce           The signer's nonce for EIP-712 signatures on this contract.\\n   * @param  expiry          Expiration timestamp for the signature.\\n   * @param  v               Signature param.\\n   * @param  r               Signature param.\\n   * @param  s               Signature param.\\n   */\\n  function delegateByTypeBySig(\\n    address delegatee,\\n    DelegationType delegationType,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    external\\n  {\\n    bytes32 structHash = keccak256(\\n      abi.encode(DELEGATE_BY_TYPE_TYPEHASH, delegatee, uint256(delegationType), nonce, expiry)\\n    );\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', _DOMAIN_SEPARATOR_, structHash));\\n    address signer = ecrecover(digest, v, r, s);\\n    require(\\n      signer != address(0),\\n      'SM1GovernancePowerDelegation: INVALID_SIGNATURE'\\n    );\\n    require(\\n      nonce == _NONCES_[signer]++,\\n      'SM1GovernancePowerDelegation: INVALID_NONCE'\\n    );\\n    require(\\n      block.timestamp <= expiry,\\n      'SM1GovernancePowerDelegation: INVALID_EXPIRATION'\\n    );\\n    _delegateByType(signer, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev Delegates both governance powers from signer to `delegatee` using an EIP-712 signature.\\n   *\\n   * @param  delegatee  The address to delegate votes to.\\n   * @param  nonce      The signer's nonce for EIP-712 signatures on this contract.\\n   * @param  expiry     Expiration timestamp for the signature.\\n   * @param  v          Signature param.\\n   * @param  r          Signature param.\\n   * @param  s          Signature param.\\n   */\\n  function delegateBySig(\\n    address delegatee,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    external\\n  {\\n    bytes32 structHash = keccak256(abi.encode(DELEGATE_TYPEHASH, delegatee, nonce, expiry));\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', _DOMAIN_SEPARATOR_, structHash));\\n    address signer = ecrecover(digest, v, r, s);\\n    require(\\n      signer != address(0),\\n      'SM1GovernancePowerDelegation: INVALID_SIGNATURE'\\n    );\\n    require(\\n      nonce == _NONCES_[signer]++,\\n      'SM1GovernancePowerDelegation: INVALID_NONCE'\\n    );\\n    require(\\n      block.timestamp <= expiry,\\n      'SM1GovernancePowerDelegation: INVALID_EXPIRATION'\\n    );\\n    _delegateByType(signer, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(signer, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n\\n  /**\\n   * @notice Returns the delegatee of a user.\\n   *\\n   * @param  delegator       The address of the delegator.\\n   * @param  delegationType  The type of delegation (VOTING_POWER, PROPOSITION_POWER).\\n   */\\n  function getDelegateeByType(\\n    address delegator,\\n    DelegationType delegationType\\n  )\\n    external\\n    override\\n    view\\n    returns (address)\\n  {\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    return _getDelegatee(delegator, delegates);\\n  }\\n\\n  /**\\n   * @notice Returns the current power of a user. The current power is the power delegated\\n   *  at the time of the last snapshot.\\n   *\\n   * @param  user            The user whose power to query.\\n   * @param  delegationType  The type of power (VOTING_POWER, PROPOSITION_POWER).\\n   */\\n  function getPowerCurrent(\\n    address user,\\n    DelegationType delegationType\\n  )\\n    external\\n    override\\n    view\\n    returns (uint256)\\n  {\\n    return getPowerAtBlock(user, block.number, delegationType);\\n  }\\n\\n  /**\\n   * @notice Get the next valid nonce for EIP-712 signatures.\\n   *\\n   *  This nonce should be used when signing for any of the following functions:\\n   *   - permit()\\n   *   - delegateByTypeBySig()\\n   *   - delegateBySig()\\n   */\\n  function nonces(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return _NONCES_[owner];\\n  }\\n\\n  // ============ Public Functions ============\\n\\n  function balanceOf(\\n    address account\\n  )\\n    public\\n    view\\n    virtual\\n    returns (uint256);\\n\\n  /**\\n   * @notice Returns the power of a user at a certain block, denominated in underlying token units.\\n   *\\n   * @param  user            The user whose power to query.\\n   * @param  blockNumber     The block number at which to get the user's power.\\n   * @param  delegationType  The type of power (VOTING_POWER, PROPOSITION_POWER).\\n   *\\n   * @return The user's governance power of the specified type, in underlying token units.\\n   */\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  )\\n    public\\n    override\\n    view\\n    returns (uint256)\\n  {\\n    (\\n      mapping(address => mapping(uint256 => SM1Types.Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotCounts,\\n      // unused: delegates\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    uint256 stakeAmount = _findValueAtBlock(\\n      snapshots[user],\\n      snapshotCounts[user],\\n      blockNumber,\\n      0\\n    );\\n    uint256 exchangeRate = _findValueAtBlock(\\n      _EXCHANGE_RATE_SNAPSHOTS_,\\n      _EXCHANGE_RATE_SNAPSHOT_COUNT_,\\n      blockNumber,\\n      EXCHANGE_RATE_BASE\\n    );\\n    return underlyingAmountFromStakeAmountWithExchangeRate(stakeAmount, exchangeRate);\\n  }\\n\\n  // ============ Internal Functions ============\\n\\n  /**\\n   * @dev Delegates one specific power to a delegatee.\\n   *\\n   * @param  delegator       The user whose power to delegate.\\n   * @param  delegatee       The address to delegate power to.\\n   * @param  delegationType  The type of power (VOTING_POWER, PROPOSITION_POWER).\\n   */\\n  function _delegateByType(\\n    address delegator,\\n    address delegatee,\\n    DelegationType delegationType\\n  )\\n    internal\\n  {\\n    require(\\n      delegatee != address(0),\\n      'SM1GovernancePowerDelegation: INVALID_DELEGATEE'\\n    );\\n\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n    uint256 delegatorBalance = balanceOf(delegator);\\n    address previousDelegatee = _getDelegatee(delegator, delegates);\\n\\n    delegates[delegator] = delegatee;\\n\\n    _moveDelegatesByType(previousDelegatee, delegatee, delegatorBalance, delegationType);\\n    emit DelegateChanged(delegator, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev Update delegate snapshots whenever staked tokens are transfered, minted, or burned.\\n   *\\n   * @param  from          The sender.\\n   * @param  to            The recipient.\\n   * @param  stakedAmount  The amount being transfered, denominated in staked units.\\n   */\\n  function _moveDelegatesForTransfer(\\n    address from,\\n    address to,\\n    uint256 stakedAmount\\n  )\\n    internal\\n  {\\n    address votingPowerFromDelegatee = _getDelegatee(from, _VOTING_DELEGATES_);\\n    address votingPowerToDelegatee = _getDelegatee(to, _VOTING_DELEGATES_);\\n\\n    _moveDelegatesByType(\\n      votingPowerFromDelegatee,\\n      votingPowerToDelegatee,\\n      stakedAmount,\\n      DelegationType.VOTING_POWER\\n    );\\n\\n    address propositionPowerFromDelegatee = _getDelegatee(from, _PROPOSITION_DELEGATES_);\\n    address propositionPowerToDelegatee = _getDelegatee(to, _PROPOSITION_DELEGATES_);\\n\\n    _moveDelegatesByType(\\n      propositionPowerFromDelegatee,\\n      propositionPowerToDelegatee,\\n      stakedAmount,\\n      DelegationType.PROPOSITION_POWER\\n    );\\n  }\\n\\n  /**\\n   * @dev Moves power from one user to another.\\n   *\\n   * @param  from            The user from which delegated power is moved.\\n   * @param  to              The user that will receive the delegated power.\\n   * @param  amount          The amount of power to be moved.\\n   * @param  delegationType  The type of power (VOTING_POWER, PROPOSITION_POWER).\\n   */\\n  function _moveDelegatesByType(\\n    address from,\\n    address to,\\n    uint256 amount,\\n    DelegationType delegationType\\n  )\\n    internal\\n  {\\n    if (from == to) {\\n      return;\\n    }\\n\\n    (\\n      mapping(address => mapping(uint256 => SM1Types.Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotCounts,\\n      // unused: delegates\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    if (from != address(0)) {\\n      mapping(uint256 => SM1Types.Snapshot) storage fromSnapshots = snapshots[from];\\n      uint256 fromSnapshotCount = snapshotCounts[from];\\n      uint256 previousBalance = 0;\\n\\n      if (fromSnapshotCount != 0) {\\n        previousBalance = fromSnapshots[fromSnapshotCount - 1].value;\\n      }\\n\\n      uint256 newBalance = previousBalance.sub(amount);\\n      snapshotCounts[from] = _writeSnapshot(\\n        fromSnapshots,\\n        fromSnapshotCount,\\n        newBalance\\n      );\\n\\n      emit DelegatedPowerChanged(from, newBalance, delegationType);\\n    }\\n\\n    if (to != address(0)) {\\n      mapping(uint256 => SM1Types.Snapshot) storage toSnapshots = snapshots[to];\\n      uint256 toSnapshotCount = snapshotCounts[to];\\n      uint256 previousBalance = 0;\\n\\n      if (toSnapshotCount != 0) {\\n        previousBalance = toSnapshots[toSnapshotCount - 1].value;\\n      }\\n\\n      uint256 newBalance = previousBalance.add(amount);\\n      snapshotCounts[to] = _writeSnapshot(\\n        toSnapshots,\\n        toSnapshotCount,\\n        newBalance\\n      );\\n\\n      emit DelegatedPowerChanged(to, newBalance, delegationType);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns delegation data (snapshot, snapshotCount, delegates) by delegation type.\\n   *\\n   * @param  delegationType  The type of power (VOTING_POWER, PROPOSITION_POWER).\\n   *\\n   * @return The mapping of each user to a mapping of snapshots.\\n   * @return The mapping of each user to the total number of snapshots for that user.\\n   * @return The mapping of each user to the user's delegate.\\n   */\\n  function _getDelegationDataByType(\\n    DelegationType delegationType\\n  )\\n    internal\\n    view\\n    returns (\\n      mapping(address => mapping(uint256 => SM1Types.Snapshot)) storage,\\n      mapping(address => uint256) storage,\\n      mapping(address => address) storage\\n    )\\n  {\\n    if (delegationType == DelegationType.VOTING_POWER) {\\n      return (\\n        _VOTING_SNAPSHOTS_,\\n        _VOTING_SNAPSHOT_COUNTS_,\\n        _VOTING_DELEGATES_\\n      );\\n    } else {\\n      return (\\n        _PROPOSITION_SNAPSHOTS_,\\n        _PROPOSITION_SNAPSHOT_COUNTS_,\\n        _PROPOSITION_DELEGATES_\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the delegatee of a user. If a user never performed any delegation, their\\n   *  delegated address will be 0x0, in which case we return the user's own address.\\n   *\\n   * @param  delegator  The address of the user for which return the delegatee.\\n   * @param  delegates  The mapping of delegates for a particular type of delegation.\\n   */\\n  function _getDelegatee(\\n    address delegator,\\n    mapping(address => address) storage delegates\\n  )\\n    internal\\n    view\\n    returns (address)\\n  {\\n    address previousDelegatee = delegates[delegator];\\n\\n    if (previousDelegatee == address(0)) {\\n      return delegator;\\n    }\\n\\n    return previousDelegatee;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IGovernancePowerDelegationERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\n\\ninterface IGovernancePowerDelegationERC20 {\\n\\n  enum DelegationType {\\n    VOTING_POWER,\\n    PROPOSITION_POWER\\n  }\\n\\n  /**\\n   * @dev Emitted when a user delegates governance power to another user.\\n   *\\n   * @param  delegator       The delegator.\\n   * @param  delegatee       The delegatee.\\n   * @param  delegationType  The type of delegation (VOTING_POWER, PROPOSITION_POWER).\\n   */\\n  event DelegateChanged(\\n    address indexed delegator,\\n    address indexed delegatee,\\n    DelegationType delegationType\\n  );\\n\\n  /**\\n   * @dev Emitted when an action changes the delegated power of a user.\\n   *\\n   * @param  user            The user whose delegated power has changed.\\n   * @param  amount          The new amount of delegated power for the user.\\n   * @param  delegationType  The type of delegation (VOTING_POWER, PROPOSITION_POWER).\\n   */\\n  event DelegatedPowerChanged(address indexed user, uint256 amount, DelegationType delegationType);\\n\\n  /**\\n   * @dev Delegates a specific governance power to a delegatee.\\n   *\\n   * @param  delegatee       The address to delegate power to.\\n   * @param  delegationType  The type of delegation (VOTING_POWER, PROPOSITION_POWER).\\n   */\\n  function delegateByType(address delegatee, DelegationType delegationType) external virtual;\\n\\n  /**\\n   * @dev Delegates all governance powers to a delegatee.\\n   *\\n   * @param  delegatee  The user to which the power will be delegated.\\n   */\\n  function delegate(address delegatee) external virtual;\\n\\n  /**\\n   * @dev Returns the delegatee of an user.\\n   *\\n   * @param  delegator       The address of the delegator.\\n   * @param  delegationType  The type of delegation (VOTING_POWER, PROPOSITION_POWER).\\n   */\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (address);\\n\\n  /**\\n   * @dev Returns the current delegated power of a user. The current power is the power delegated\\n   *  at the time of the last snapshot.\\n   *\\n   * @param  user            The user whose power to query.\\n   * @param  delegationType  The type of power (VOTING_POWER, PROPOSITION_POWER).\\n   */\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (uint256);\\n\\n  /**\\n   * @dev Returns the delegated power of a user at a certain block.\\n   *\\n   * @param  user            The user whose power to query.\\n   * @param  blockNumber     The block number at which to get the user's power.\\n   * @param  delegationType  The type of power (VOTING_POWER, PROPOSITION_POWER).\\n   */\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  )\\n    external\\n    view\\n    virtual\\n    returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/safety/v1/impl/SM1ExchangeRate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport { SafeMath } from '../../../dependencies/open-zeppelin/SafeMath.sol';\\nimport { SM1Snapshots } from './SM1Snapshots.sol';\\nimport { SM1Storage } from './SM1Storage.sol';\\n\\n/**\\n * @title SM1ExchangeRate\\n * @author dYdX\\n *\\n * @dev Performs math using the exchange rate, which converts between underlying units of the token\\n *  that was staked (e.g. STAKED_TOKEN.balanceOf(account)), and staked units, used by this contract\\n *  for all staked balances (e.g. this.balanceOf(account)).\\n *\\n *  OVERVIEW:\\n *\\n *   The exchange rate is stored as a multiple of EXCHANGE_RATE_BASE, and represents the number of\\n *   staked balance units that each unit of underlying token is worth. Before any slashes have\\n *   occurred, the exchange rate is equal to one. The exchange rate can increase with each slash,\\n *   indicating that staked balances are becoming less and less valuable, per unit, relative to the\\n *   underlying token.\\n *\\n *  AVOIDING OVERFLOW AND UNDERFLOW:\\n *\\n *   Staked balances are represented internally as uint240, so the result of an operation returning\\n *   a staked balances must return a value less than 2^240. Intermediate values in calcuations are\\n *   represented as uint256, so all operations within a calculation must return values under 2^256.\\n *\\n *   In the functions below operating on the exchange rate, we are strategic in our choice of the\\n *   order of multiplication and division operations, in order to avoid both overflow and underflow.\\n *\\n *   We use the following assumptions and principles to implement this module:\\n *     - (ASSUMPTION) An amount denoted in underlying token units is never greater than 10^28.\\n *     - If the exchange rate is greater than 10^46, then we may perform division on the exchange\\n *         rate before performing multiplication, provided that the denominator is not greater\\n *         than 10^28 (to ensure a result with at least 18 decimals of precision). Specifically,\\n *         we use EXCHANGE_RATE_MAY_OVERFLOW as the cutoff, which is a number greater than 10^46.\\n *     - Since staked balances are stored as uint240, we cap the exchange rate to ensure that a\\n *         staked balance can never overflow (using the assumption above).\\n */\\nabstract contract SM1ExchangeRate is\\n  SM1Snapshots,\\n  SM1Storage\\n{\\n  using SafeMath for uint256;\\n\\n  // ============ Constants ============\\n\\n  /// @notice The assumed upper bound on the total supply of the staked token.\\n  uint256 public constant MAX_UNDERLYING_BALANCE = 1e28;\\n\\n  /// @notice Base unit used to represent the exchange rate, for additional precision.\\n  uint256 public constant EXCHANGE_RATE_BASE = 1e18;\\n\\n  /// @notice Cutoff where an exchange rate may overflow after multiplying by an underlying balance.\\n  /// @dev Approximately 1.2e49\\n  uint256 public constant EXCHANGE_RATE_MAY_OVERFLOW = (2 ** 256 - 1) / MAX_UNDERLYING_BALANCE;\\n\\n  /// @notice Cutoff where a stake amount may overflow after multiplying by EXCHANGE_RATE_BASE.\\n  /// @dev Approximately 1.2e59\\n  uint256 public constant STAKE_AMOUNT_MAY_OVERFLOW = (2 ** 256 - 1) / EXCHANGE_RATE_BASE;\\n\\n  /// @notice Max exchange rate.\\n  /// @dev Approximately 1.8e62\\n  uint256 public constant MAX_EXCHANGE_RATE = (\\n    ((2 ** 240 - 1) / MAX_UNDERLYING_BALANCE) * EXCHANGE_RATE_BASE\\n  );\\n\\n  // ============ Initializer ============\\n\\n  function __SM1ExchangeRate_init()\\n    internal\\n  {\\n    _EXCHANGE_RATE_ = EXCHANGE_RATE_BASE;\\n  }\\n\\n  function stakeAmountFromUnderlyingAmount(\\n    uint256 underlyingAmount\\n  )\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 exchangeRate = _EXCHANGE_RATE_;\\n\\n    if (exchangeRate > EXCHANGE_RATE_MAY_OVERFLOW) {\\n      uint256 exchangeRateUnbased = exchangeRate.div(EXCHANGE_RATE_BASE);\\n      return underlyingAmount.mul(exchangeRateUnbased);\\n    } else {\\n      return underlyingAmount.mul(exchangeRate).div(EXCHANGE_RATE_BASE);\\n    }\\n  }\\n\\n  function underlyingAmountFromStakeAmount(\\n    uint256 stakeAmount\\n  )\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    return underlyingAmountFromStakeAmountWithExchangeRate(stakeAmount, _EXCHANGE_RATE_);\\n  }\\n\\n  function underlyingAmountFromStakeAmountWithExchangeRate(\\n    uint256 stakeAmount,\\n    uint256 exchangeRate\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    if (stakeAmount > STAKE_AMOUNT_MAY_OVERFLOW) {\\n      // Note that this case implies that exchangeRate > EXCHANGE_RATE_MAY_OVERFLOW.\\n      uint256 exchangeRateUnbased = exchangeRate.div(EXCHANGE_RATE_BASE);\\n      return stakeAmount.div(exchangeRateUnbased);\\n    } else {\\n      return stakeAmount.mul(EXCHANGE_RATE_BASE).div(exchangeRate);\\n    }\\n  }\\n\\n  function updateExchangeRate(\\n    uint256 numerator,\\n    uint256 denominator\\n  )\\n    internal\\n    returns (uint256)\\n  {\\n    uint256 oldExchangeRate = _EXCHANGE_RATE_;\\n\\n    // Avoid overflow.\\n    // Note that the numerator and denominator are both denominated in underlying token units.\\n    uint256 newExchangeRate;\\n    if (oldExchangeRate > EXCHANGE_RATE_MAY_OVERFLOW) {\\n      newExchangeRate = oldExchangeRate.div(denominator).mul(numerator);\\n    } else {\\n      newExchangeRate = oldExchangeRate.mul(numerator).div(denominator);\\n    }\\n\\n    require(\\n      newExchangeRate <= MAX_EXCHANGE_RATE,\\n      'SM1ExchangeRate: Max exchange rate exceeded'\\n    );\\n\\n    _EXCHANGE_RATE_SNAPSHOT_COUNT_ = _writeSnapshot(\\n      _EXCHANGE_RATE_SNAPSHOTS_,\\n      _EXCHANGE_RATE_SNAPSHOT_COUNT_,\\n      newExchangeRate\\n    );\\n\\n    _EXCHANGE_RATE_ = newExchangeRate;\\n    return newExchangeRate;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/safety/v1/impl/SM1Snapshots.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport { SM1Types } from '../lib/SM1Types.sol';\\nimport { SM1Storage } from './SM1Storage.sol';\\n\\n/**\\n * @title SM1Snapshots\\n * @author dYdX\\n *\\n * @dev Handles storage and retrieval of historical values by block number.\\n *\\n *  Note that the snapshot stored at a given block number represents the value as of the end of\\n *  that block.\\n */\\nabstract contract SM1Snapshots {\\n\\n  /**\\n   * @dev Writes a snapshot of a value at the current block.\\n   *\\n   * @param  snapshots      Storage mapping from snapshot index to snapshot struct.\\n   * @param  snapshotCount  The total number of snapshots in the provided mapping.\\n   * @param  newValue       The new value to snapshot at the current block.\\n   *\\n   * @return The new snapshot count.\\n   */\\n  function _writeSnapshot(\\n    mapping(uint256 => SM1Types.Snapshot) storage snapshots,\\n    uint256 snapshotCount,\\n    uint256 newValue\\n  )\\n    internal\\n    returns (uint256)\\n  {\\n    uint256 currentBlock = block.number;\\n\\n    if (\\n      snapshotCount != 0 &&\\n      snapshots[snapshotCount - 1].blockNumber == currentBlock\\n    ) {\\n      // If there was a previous snapshot for this block, overwrite it.\\n      snapshots[snapshotCount - 1].value = newValue;\\n      return snapshotCount;\\n    } else {\\n      snapshots[snapshotCount] = SM1Types.Snapshot(currentBlock, newValue);\\n      return snapshotCount + 1;\\n    }\\n  }\\n\\n  /**\\n   * @dev Search for the snapshot value at a given block. Uses binary search.\\n   *\\n   *  Reverts if `blockNumber` is greater than the current block number.\\n   *\\n   * @param  snapshots      Storage mapping from snapshot index to snapshot struct.\\n   * @param  snapshotCount  The total number of snapshots in the provided mapping.\\n   * @param  blockNumber    The block number to search for.\\n   * @param  initialValue   The value to return if `blockNumber` is before the earliest snapshot.\\n   *\\n   * @return The snapshot value at the specified block number.\\n   */\\n  function _findValueAtBlock(\\n    mapping(uint256 => SM1Types.Snapshot) storage snapshots,\\n    uint256 snapshotCount,\\n    uint256 blockNumber,\\n    uint256 initialValue\\n  )\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    require(\\n      blockNumber <= block.number,\\n      'SM1Snapshots: INVALID_BLOCK_NUMBER'\\n    );\\n\\n    if (snapshotCount == 0) {\\n      return initialValue;\\n    }\\n\\n    // Check earliest snapshot.\\n    if (blockNumber < snapshots[0].blockNumber) {\\n      return initialValue;\\n    }\\n\\n    // Check latest snapshot.\\n    if (blockNumber >= snapshots[snapshotCount - 1].blockNumber) {\\n      return snapshots[snapshotCount - 1].value;\\n    }\\n\\n    uint256 lower = 0;\\n    uint256 upper = snapshotCount - 1;\\n    while (upper > lower) {\\n      uint256 center = upper - (upper - lower) / 2; // Ceil, avoiding overflow.\\n      SM1Types.Snapshot memory snapshot = snapshots[center];\\n      if (snapshot.blockNumber == blockNumber) {\\n        return snapshot.value;\\n      } else if (snapshot.blockNumber < blockNumber) {\\n        lower = center;\\n      } else {\\n        upper = center - 1;\\n      }\\n    }\\n    return snapshots[lower].value;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/open-zeppelin/BaseUpgradeabilityProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport './Proxy.sol';\\nimport './Address.sol';\\n\\n/**\\n * @title BaseUpgradeabilityProxy\\n * @dev This contract implements a proxy that allows to change the\\n * implementation address to which it will delegate.\\n * Such a change is called an implementation upgrade.\\n */\\ncontract BaseUpgradeabilityProxy is Proxy {\\n  /**\\n   * @dev Emitted when the implementation is upgraded.\\n   * @param implementation Address of the new implementation.\\n   */\\n  event Upgraded(address indexed implementation);\\n\\n  /**\\n   * @dev Storage slot with the address of the current implementation.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32\\n    internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n  /**\\n   * @dev Returns the current implementation.\\n   * @return impl Address of the current implementation\\n   */\\n  function _implementation() internal override view returns (address impl) {\\n    bytes32 slot = IMPLEMENTATION_SLOT;\\n    assembly {\\n      impl := sload(slot)\\n    }\\n  }\\n\\n  /**\\n   * @dev Upgrades the proxy to a new implementation.\\n   * @param newImplementation Address of the new implementation.\\n   */\\n  function _upgradeTo(address newImplementation) internal {\\n    _setImplementation(newImplementation);\\n    emit Upgraded(newImplementation);\\n  }\\n\\n  /**\\n   * @dev Sets the implementation address of the proxy.\\n   * @param newImplementation Address of the new implementation.\\n   */\\n  function _setImplementation(address newImplementation) internal {\\n    require(\\n      Address.isContract(newImplementation),\\n      'Cannot set a proxy implementation to a non-contract address'\\n    );\\n\\n    bytes32 slot = IMPLEMENTATION_SLOT;\\n\\n    assembly {\\n      sstore(slot, newImplementation)\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/open-zeppelin/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\n/**\\n * @title Proxy\\n * @dev Implements delegation of calls to other contracts, with proper\\n * forwarding of return values and bubbling of failures.\\n * It defines a fallback function that delegates all calls to the address\\n * returned by the abstract _implementation() internal function.\\n */\\nabstract contract Proxy {\\n  /**\\n   * @dev Fallback function.\\n   * Implemented entirely in `_fallback`.\\n   */\\n  fallback() external payable {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @return The Address of the implementation.\\n   */\\n  function _implementation() internal virtual view returns (address);\\n\\n  /**\\n   * @dev Delegates execution to an implementation contract.\\n   * This is a low level function that doesn't return to its internal call site.\\n   * It will return to the external caller whatever the implementation returns.\\n   * @param implementation Address to delegate.\\n   */\\n  function _delegate(address implementation) internal {\\n    assembly {\\n      // Copy msg.data. We take full control of memory in this inline assembly\\n      // block because it will not return to Solidity code. We overwrite the\\n      // Solidity scratch pad at memory position 0.\\n      calldatacopy(0, 0, calldatasize())\\n\\n      // Call the implementation.\\n      // out and outsize are 0 because we don't know the size yet.\\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n      // Copy the returned data.\\n      returndatacopy(0, 0, returndatasize())\\n\\n      switch result\\n        // delegatecall returns 0 on error.\\n        case 0 {\\n          revert(0, returndatasize())\\n        }\\n        default {\\n          return(0, returndatasize())\\n        }\\n    }\\n  }\\n\\n  /**\\n   * @dev Function that is run as the first thing in the fallback function.\\n   * Can be redefined in derived contracts to add functionality.\\n   * Redefinitions must call super._willFallback().\\n   */\\n  function _willFallback() internal virtual {}\\n\\n  /**\\n   * @dev fallback implementation.\\n   * Extracted to enable manual triggering.\\n   */\\n  function _fallback() internal {\\n    _willFallback();\\n    _delegate(_implementation());\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/open-zeppelin/InitializableUpgradeabilityProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\n\\nimport './BaseUpgradeabilityProxy.sol';\\n\\n/**\\n * @title InitializableUpgradeabilityProxy\\n * @dev Extends BaseUpgradeabilityProxy with an initializer for initializing\\n * implementation and init data.\\n */\\ncontract InitializableUpgradeabilityProxy is BaseUpgradeabilityProxy {\\n  /**\\n   * @dev Contract initializer.\\n   * @param _logic Address of the initial implementation.\\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\\n   * It should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\\n   */\\n  function initialize(address _logic, bytes memory _data) public payable {\\n    require(_implementation() == address(0));\\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\\n    _setImplementation(_logic);\\n    if (_data.length > 0) {\\n      (bool success, ) = _logic.delegatecall(_data);\\n      require(success);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/open-zeppelin/InitializableAdminUpgradeabilityProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\n\\nimport './BaseAdminUpgradeabilityProxy.sol';\\nimport './InitializableUpgradeabilityProxy.sol';\\n\\n/**\\n * @title InitializableAdminUpgradeabilityProxy\\n * @dev Extends from BaseAdminUpgradeabilityProxy with an initializer for\\n * initializing the implementation, admin, and init data.\\n */\\ncontract InitializableAdminUpgradeabilityProxy is\\n  BaseAdminUpgradeabilityProxy,\\n  InitializableUpgradeabilityProxy\\n{\\n  /**\\n   * Contract initializer.\\n   * @param _logic address of the initial implementation.\\n   * @param _admin Address of the proxy administrator.\\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\\n   * It should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\\n   */\\n  function initialize(\\n    address _logic,\\n    address _admin,\\n    bytes memory _data\\n  ) public payable {\\n    require(_implementation() == address(0));\\n    InitializableUpgradeabilityProxy.initialize(_logic, _data);\\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\\n    _setAdmin(_admin);\\n  }\\n\\n  /**\\n   * @dev Only fall back when the sender is not the admin.\\n   */\\n  function _willFallback() internal override(BaseAdminUpgradeabilityProxy, Proxy) {\\n    BaseAdminUpgradeabilityProxy._willFallback();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/open-zeppelin/BaseAdminUpgradeabilityProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport './UpgradeabilityProxy.sol';\\n\\n/**\\n * @title BaseAdminUpgradeabilityProxy\\n * @dev This contract combines an upgradeability proxy with an authorization\\n * mechanism for administrative tasks.\\n * All external functions in this contract must be guarded by the\\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\\n * feature proposal that would enable this to be done automatically.\\n */\\ncontract BaseAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\\n  /**\\n   * @dev Emitted when the administration has been transferred.\\n   * @param previousAdmin Address of the previous admin.\\n   * @param newAdmin Address of the new admin.\\n   */\\n  event AdminChanged(address previousAdmin, address newAdmin);\\n\\n  /**\\n   * @dev Storage slot with the admin of the contract.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n\\n  bytes32\\n    internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  /**\\n   * @dev Modifier to check whether the `msg.sender` is the admin.\\n   * If it is, it will run the function. Otherwise, it will delegate the call\\n   * to the implementation.\\n   */\\n  modifier ifAdmin() {\\n    if (msg.sender == _admin()) {\\n      _;\\n    } else {\\n      _fallback();\\n    }\\n  }\\n\\n  /**\\n   * @return The address of the proxy admin.\\n   */\\n  function admin() external ifAdmin returns (address) {\\n    return _admin();\\n  }\\n\\n  /**\\n   * @return The address of the implementation.\\n   */\\n  function implementation() external ifAdmin returns (address) {\\n    return _implementation();\\n  }\\n\\n  /**\\n   * @dev Changes the admin of the proxy.\\n   * Only the current admin can call this function.\\n   * @param newAdmin Address to transfer proxy administration to.\\n   */\\n  function changeAdmin(address newAdmin) external ifAdmin {\\n    require(newAdmin != address(0), 'Cannot change the admin of a proxy to the zero address');\\n    emit AdminChanged(_admin(), newAdmin);\\n    _setAdmin(newAdmin);\\n  }\\n\\n  /**\\n   * @dev Upgrade the backing implementation of the proxy.\\n   * Only the admin can call this function.\\n   * @param newImplementation Address of the new implementation.\\n   */\\n  function upgradeTo(address newImplementation) external ifAdmin {\\n    _upgradeTo(newImplementation);\\n  }\\n\\n  /**\\n   * @dev Upgrade the backing implementation of the proxy and call a function\\n   * on the new implementation.\\n   * This is useful to initialize the proxied contract.\\n   * @param newImplementation Address of the new implementation.\\n   * @param data Data to send as msg.data in the low level call.\\n   * It should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   */\\n  function upgradeToAndCall(address newImplementation, bytes calldata data)\\n    external\\n    payable\\n    ifAdmin\\n  {\\n    _upgradeTo(newImplementation);\\n    (bool success, ) = newImplementation.delegatecall(data);\\n    require(success);\\n  }\\n\\n  /**\\n   * @return adm The admin slot.\\n   */\\n  function _admin() internal view returns (address adm) {\\n    bytes32 slot = ADMIN_SLOT;\\n    assembly {\\n      adm := sload(slot)\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets the address of the proxy admin.\\n   * @param newAdmin Address of the new proxy admin.\\n   */\\n  function _setAdmin(address newAdmin) internal {\\n    bytes32 slot = ADMIN_SLOT;\\n\\n    assembly {\\n      sstore(slot, newAdmin)\\n    }\\n  }\\n\\n  /**\\n   * @dev Only fall back when the sender is not the admin.\\n   */\\n  function _willFallback() internal virtual override {\\n    require(msg.sender != _admin(), 'Cannot call fallback function from the proxy admin');\\n    super._willFallback();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/open-zeppelin/UpgradeabilityProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport './BaseUpgradeabilityProxy.sol';\\n\\n/**\\n * @title UpgradeabilityProxy\\n * @dev Extends BaseUpgradeabilityProxy with a constructor for initializing\\n * implementation and init data.\\n */\\ncontract UpgradeabilityProxy is BaseUpgradeabilityProxy {\\n  /**\\n   * @dev Contract constructor.\\n   * @param _logic Address of the initial implementation.\\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\\n   * It should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\\n   */\\n  constructor(address _logic, bytes memory _data) public payable {\\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\\n    _setImplementation(_logic);\\n    if (_data.length > 0) {\\n      (bool success, ) = _logic.delegatecall(_data);\\n      require(success);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/open-zeppelin/AdminUpgradeabilityProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.5;\\n\\nimport './BaseAdminUpgradeabilityProxy.sol';\\n\\n/**\\n * @title AdminUpgradeabilityProxy\\n * @dev Extends from BaseAdminUpgradeabilityProxy with a constructor for\\n * initializing the implementation, admin, and init data.\\n */\\ncontract AdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy, UpgradeabilityProxy {\\n  /**\\n   * Contract constructor.\\n   * @param _logic address of the initial implementation.\\n   * @param _admin Address of the proxy administrator.\\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\\n   * It should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\\n   */\\n  constructor(address _logic, address _admin, bytes memory _data) UpgradeabilityProxy(_logic, _data) public payable {\\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\\n    _setAdmin(_admin);\\n  }\\n\\n  /**\\n   * @dev Only fall back when the sender is not the admin.\\n   */\\n  function _willFallback() internal override(BaseAdminUpgradeabilityProxy, Proxy) {\\n    require(msg.sender != _admin(), 'Cannot call fallback function from the proxy admin');\\n    super._willFallback();\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardsTreasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"distributionStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributionEnd\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blackoutWindow\",\"type\":\"uint256\"}],\"name\":\"BlackoutWindowChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedRewards\",\"type\":\"uint256\"}],\"name\":\"ClaimedRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IGovernancePowerDelegationERC20.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IGovernancePowerDelegationERC20.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"DelegatedPowerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"interval\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"offset\",\"type\":\"uint128\"}],\"indexed\":false,\"internalType\":\"struct SM1Types.EpochParameters\",\"name\":\"epochParameters\",\"type\":\"tuple\"}],\"name\":\"EpochParametersChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"GlobalIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorClaimedRewardsFor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorStakedFor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorWithdrawalRequestedFor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorWithdrewStakeFor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emissionPerSecond\",\"type\":\"uint256\"}],\"name\":\"RewardsPerSecondUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newExchangeRate\",\"type\":\"uint256\"}],\"name\":\"Slashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unclaimedRewards\",\"type\":\"uint256\"}],\"name\":\"UserIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrewStake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELEGATE_BY_TYPE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELEGATE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISTRIBUTION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISTRIBUTION_START\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712_DOMAIN_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712_DOMAIN_SCHEMA_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712_DOMAIN_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EPOCH_PARAMETERS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXCHANGE_RATE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXCHANGE_RATE_MAY_OVERFLOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_EXCHANGE_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SLASH_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SLASH_NUMERATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UNDERLYING_BALANCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARDS_RATE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARDS_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARDS_TREASURY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLASHER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKED_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_AMOUNT_MAY_OVERFLOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claimRewardsFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationERC20.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"delegateByType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationERC20.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateByTypeBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getActiveBalanceCurrentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getActiveBalanceNextEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlackoutWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationERC20.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"getDelegateeByType\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochParameters\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"interval\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"offset\",\"type\":\"uint128\"}],\"internalType\":\"struct SM1Types.EpochParameters\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getExchangeRateSnapshot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct SM1Types.Snapshot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchangeRateSnapshotCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getInactiveBalanceCurrentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getInactiveBalanceNextEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"enum IGovernancePowerDelegationERC20.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"getPowerAtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationERC20.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"getPowerCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStakeAvailableToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"}],\"name\":\"getStartOfEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeRemainingInCurrentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalActiveBalanceCurrentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalActiveBalanceNextEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalInactiveBalanceCurrentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalInactiveBalanceNextEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTransferableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasEpochZeroStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inBlackoutWindow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blackoutWindow\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"requestWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"requestWithdrawalFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blackoutWindow\",\"type\":\"uint256\"}],\"name\":\"setBlackoutWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"setEpochParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"emissionPerSecond\",\"type\":\"uint256\"}],\"name\":\"setRewardsPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestedSlashAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"slash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"name\":\"stakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawMaxStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawStakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SafetyModuleV1","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000092d6c1e31e14520e676a687f0a93788b716beff500000000000000000000000092d6c1e31e14520e676a687f0a93788b716beff5000000000000000000000000639192d54431f8c816368d3fb4107bc168d0e871000000000000000000000000000000000000000000000000000000006138cff0000000000000000000000000000000000000000000000000000000006a9ed16e","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}