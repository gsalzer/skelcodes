{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *  @authors: [@unknownunknown1*, @clesaege]\r\n *  @reviewers: []\r\n *  @auditors: []\r\n *  @bounties: []\r\n *  @deployments: []\r\n *  @tools: []\r\n */\r\n\r\npragma solidity ^0.5.17;\r\n\r\ninterface IProofOfHumanity {\r\n    \r\n    /** @dev Return true if the submission is registered and not expired.\r\n     *  @param _submissionID The address of the submission.\r\n     *  @return Whether the submission is registered or not.\r\n     */\r\n    function isRegistered(address _submissionID) external view returns (bool);\r\n    \r\n    /** @dev Return the number of submissions irrespective of their status.\r\n     *  @return The number of submissions.\r\n     */\r\n    function submissionCounter() external view returns (uint);\r\n    \r\n}\r\n\r\n/**\r\n *  @title ProofOfHumanityProxy\r\n *  A proxy contract for ProofOfHumanity that implements a token interface to interact with other dapps.\r\n *  Note that it isn't an ERC20 and only implements its interface in order to be compatible with Snapshot.\r\n */\r\ncontract ProofOfHumanityProxy {\r\n\r\n    IProofOfHumanity public PoH;\r\n    address public governor = msg.sender;\r\n    string public name = \"Human Vote\";\r\n    string public symbol = \"VOTE\";\r\n    uint8 public decimals = 0;\r\n\r\n    /** @dev Constructor.\r\n     *  @param _PoH The address of the related ProofOfHumanity contract.\r\n     */\r\n    constructor(IProofOfHumanity _PoH) public {\r\n        PoH = _PoH;\r\n    }\r\n\r\n    /** @dev Changes the address of the the related ProofOfHumanity contract.\r\n     *  @param _PoH The address of the new contract.\r\n     */\r\n    function changePoH(IProofOfHumanity _PoH) external {\r\n        require(msg.sender == governor, \"The caller must be the governor.\");\r\n        PoH = _PoH;\r\n    }\r\n    \r\n    /** @dev Changes the address of the the governor.\r\n     *  @param _governor The address of the new governor.\r\n     */\r\n    function changeGovernor(address _governor) external {\r\n        require(msg.sender == governor, \"The caller must be the governor.\");\r\n        governor = _governor;\r\n    }\r\n    \r\n\r\n    /** @dev Returns true if the submission is registered and not expired.\r\n     *  @param _submissionID The address of the submission.\r\n     *  @return Whether the submission is registered or not.\r\n     */\r\n    function isRegistered(address _submissionID) public view returns (bool) {\r\n        return PoH.isRegistered(_submissionID);\r\n    }\r\n\r\n    // ******************** //\r\n    // *      IERC20      * //\r\n    // ******************** //\r\n\r\n    /** @dev Returns the balance of a particular submission of the ProofOfHumanity contract.\r\n     *  Note that this function takes the expiration date into account.\r\n     *  @param _submissionID The address of the submission.\r\n     *  @return The balance of the submission.\r\n     */\r\n    function balanceOf(address _submissionID) external view returns (uint256) {\r\n        return isRegistered(_submissionID) ? 1 : 0;\r\n    }\r\n\r\n    /** @dev Returns the count of all submissions that made a registration request at some point, including those that were added manually.\r\n     *  Note that with the current implementation of ProofOfHumanity it'd be very costly to count only the submissions that are currently registered.\r\n     *  @return The total count of submissions.\r\n     */\r\n    function totalSupply() external view returns (uint256) {\r\n        return PoH.submissionCounter();\r\n    }\r\n\r\n    function transfer(address _recipient, uint256 _amount) external returns (bool) { return false; }\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256) {}\r\n\r\n    function approve(address _spender, uint256 _amount) external returns (bool) { return false; }\r\n\r\n    function transferFrom(address _sender, address _recipient, uint256 _amount) external returns (bool) { return false; }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IProofOfHumanity\",\"name\":\"_PoH\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"PoH\",\"outputs\":[{\"internalType\":\"contract IProofOfHumanity\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_submissionID\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"changeGovernor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IProofOfHumanity\",\"name\":\"_PoH\",\"type\":\"address\"}],\"name\":\"changePoH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_submissionID\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ProofOfHumanityProxy","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c5e9ddebb09cd64dfacab4011a0d5cedaf7c9bdb","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://fd62758eaa662e8eb8cb4baf2d964867305ed20bf8f05a869cb54159bc93c86c"}]}