{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract MarketRegistry is Ownable {\r\n    \r\n    enum MarketType {Buy, Sell, Both}\r\n    enum CurrencySupported {Eth, Erc20}\r\n    \r\n    struct BuyDetails {\r\n        uint256 marketId;\r\n        bytes buyData;\r\n    }\r\n\r\n    struct SellDetails {\r\n        uint256 marketId;\r\n        bytes sellData;\r\n    }\r\n\r\n    struct Market {\r\n        MarketType marketType;\r\n        CurrencySupported currencySupported;\r\n        address proxy;\r\n        bool isActive;\r\n    }\r\n\r\n    Market[] public markets;\r\n\r\n    constructor(\r\n        MarketType[] memory marketTypes,\r\n        CurrencySupported[] memory currenciesSupported, \r\n        address[] memory proxies\r\n    ) {\r\n        for (uint256 i = 0; i < marketTypes.length; i++) {\r\n            markets.push(Market(marketTypes[i], currenciesSupported[i], proxies[i], true));    \r\n        }\r\n    }\r\n\r\n    function addMarket(\r\n        MarketType marketType, \r\n        CurrencySupported currencySupported, \r\n        address proxy\r\n    ) external onlyOwner {\r\n        markets.push(Market(marketType, currencySupported, proxy, true));\r\n    }\r\n\r\n    function setMarketStatus(uint256 marketId, bool newStatus) external onlyOwner {\r\n        Market storage market = markets[marketId];\r\n        market.isActive = newStatus;\r\n    }\r\n\r\n    function setMarketProxy(uint256 marketId, address newProxy) external onlyOwner {\r\n        Market storage market = markets[marketId];\r\n        market.proxy = newProxy;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"enum MarketRegistry.MarketType[]\",\"name\":\"marketTypes\",\"type\":\"uint8[]\"},{\"internalType\":\"enum MarketRegistry.CurrencySupported[]\",\"name\":\"currenciesSupported\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"proxies\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum MarketRegistry.MarketType\",\"name\":\"marketType\",\"type\":\"uint8\"},{\"internalType\":\"enum MarketRegistry.CurrencySupported\",\"name\":\"currencySupported\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"addMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"enum MarketRegistry.MarketType\",\"name\":\"marketType\",\"type\":\"uint8\"},{\"internalType\":\"enum MarketRegistry.CurrencySupported\",\"name\":\"currencySupported\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newProxy\",\"type\":\"address\"}],\"name\":\"setMarketProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"setMarketStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MarketRegistry","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000cc9c5fe72ab6acdc0d220050d519afaa59b9bb000000000000000000000000dcaee44ed2965d5615a9a206f6f3ab8fb90fcd62","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d829ae15a5570b66a84d37334fe7fa44f311a6a1f2c85a86c5da887863f05c8a"}]}