{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/TokenPool.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n\r\ncontract TokenPool {\r\n    IERC20 public token;\r\n\r\n    address public _owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(IERC20 _token) public {\r\n        token = _token;\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function balance() public view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function transfer(address to, uint256 value) external onlyOwner returns (bool) {\r\n        return token.transfer(to, value);\r\n    }\r\n\r\n    function rescueFunds(address tokenToRescue, address to, uint256 amount) external onlyOwner returns (bool) {\r\n        require(address(token) != tokenToRescue, 'TokenPool: Cannot claim token held by the contract');\r\n\r\n        return IERC20(tokenToRescue).transfer(to, amount);\r\n    }\r\n}\r\n\r\n// File: contracts/TokenGeyser.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n\r\n\r\n\r\ncontract TokenGeyser {\r\n    using SafeMath for uint256;\r\n\r\n    event Staked(address indexed user, uint256 amount, uint256 total, bytes data);\r\n    event Unstaked(address indexed user, uint256 amount, uint256 total, bytes data);\r\n    event TokensClaimed(address indexed user, uint256 amount);\r\n    event TokensLocked(uint256 amount, uint256 durationSec, uint256 total);\r\n    event TokensAdded(uint256 amount, uint256 total);\r\n    event TokensUnlocked(uint256 amount, uint256 total);\r\n\r\n    TokenPool private _stakingPool;\r\n    TokenPool private _unlockedPool;\r\n    TokenPool private _lockedPool;\r\n\r\n    //\r\n    // Time-bonus params\r\n    //\r\n    uint256 public startBonus = 0;\r\n    uint256 public bonusPeriodSec = 0;\r\n\r\n    //\r\n    // Global accounting state\r\n    //\r\n    uint256 public totalLockedTokens = 0;\r\n    uint256 public totalStakingTokens = 0;\r\n    uint256 private _totalStakingTokensSeconds = 0;\r\n    uint256 private _lastAccountingTimestampSec = now;\r\n\r\n    //\r\n    // User accounting state\r\n    //\r\n    // Represents a single stake for a user. A user may have multiple.\r\n    struct Stake {\r\n        uint256 stakingTokens;\r\n        uint256 timestampSec;\r\n    }\r\n\r\n    // Caches aggregated values from the User->Stake[] map to save computation.\r\n    // If lastAccountingTimestampSec is 0, there's no entry for that user.\r\n    struct UserTotals {\r\n        uint256 stakingTokens;\r\n        uint256 stakingTokensSeconds;\r\n        uint256 lastAccountingTimestampSec;\r\n    }\r\n\r\n    // Aggregated staking values per user\r\n    mapping(address => UserTotals) private _userTotals;\r\n\r\n    // The collection of stakes for each user. Ordered by timestamp, earliest to latest.\r\n    mapping(address => Stake[]) private _userStakes;\r\n\r\n    //\r\n    // Locked/Unlocked Accounting state\r\n    //\r\n    struct UnlockSchedule {\r\n        uint256 initialLockedTokens;\r\n        uint256 unlockedTokens;\r\n        uint256 lastUnlockTimestampSec;\r\n        uint256 endAtSec;\r\n        uint256 durationSec;\r\n    }\r\n\r\n    UnlockSchedule[] public unlockSchedules;\r\n\r\n    address public _owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(IERC20 stakingToken, IERC20 distributionToken, uint256 _startBonus, uint256 _bonusPeriod) public {\r\n        _stakingPool = new TokenPool(stakingToken);\r\n        _unlockedPool = new TokenPool(distributionToken);\r\n        _lockedPool = new TokenPool(distributionToken);\r\n        startBonus = _startBonus; //33;\r\n        bonusPeriodSec = _bonusPeriod; //5184000; // 60 days\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function getStakingToken() public view returns (IERC20) {\r\n        return _stakingPool.token();\r\n    }\r\n\r\n    function getDistributionToken() public view returns (IERC20) {\r\n        return _unlockedPool.token();\r\n    }\r\n\r\n    function stake(uint256 amount, bytes calldata data) external {\r\n        _stakeFor(msg.sender, msg.sender, amount);\r\n    }\r\n\r\n    function _stakeFor(address staker, address beneficiary, uint256 amount) private {\r\n        require(amount > 0, 'TokenGeyser: stake amount is zero');\r\n        require(beneficiary != address(0), 'TokenGeyser: beneficiary is zero address');\r\n        require(totalStakingTokens == 0 || totalStaked() > 0,\r\n                'TokenGeyser: Invalid state. Staking shares exist, but no staking tokens do');\r\n\r\n        require(amount > 0, 'TokenGeyser: Stake amount is too small');\r\n\r\n        updateAccounting();\r\n\r\n        // 1. User Accounting\r\n        UserTotals storage totals = _userTotals[beneficiary];\r\n        totals.stakingTokens = totals.stakingTokens.add(amount);\r\n        totals.lastAccountingTimestampSec = now;\r\n\r\n        Stake memory newStake = Stake(amount, now);\r\n        _userStakes[beneficiary].push(newStake);\r\n\r\n        // 2. Global Accounting\r\n        totalStakingTokens = totalStakingTokens.add(amount);\r\n\r\n        // interactions\r\n        require(_stakingPool.token().transferFrom(staker, address(_stakingPool), amount),\r\n            'TokenGeyser: transfer into staking pool failed');\r\n\r\n        emit Staked(beneficiary, amount, totalStakedFor(beneficiary), \"\");\r\n    }\r\n\r\n    function unstake(uint256 amount, bytes calldata data) external {\r\n        _unstake(amount);\r\n    }\r\n\r\n    function unstakeQuery(uint256 amount) public returns (uint256) {\r\n        return _unstake(amount);\r\n    }\r\n\r\n    function _unstake(uint256 amount) private returns (uint256) {\r\n        updateAccounting();\r\n        // checks\r\n        require(amount > 0, 'TokenGeyser: unstake amount is zero');\r\n        require(totalStakedFor(msg.sender) >= amount,\r\n            'TokenGeyser: unstake amount is greater than total user stakes');\r\n\r\n        // 1. User Accounting\r\n        UserTotals storage totals = _userTotals[msg.sender];\r\n        Stake[] storage accountStakes = _userStakes[msg.sender];\r\n\r\n        // Redeem from most recent stake and go backwards in time.\r\n        uint256 stakingTokensSecondsToBurn = 0;\r\n        uint256 sharesLeftToBurn = amount;\r\n        uint256 rewardAmount = 0;\r\n        while (sharesLeftToBurn > 0) {\r\n            Stake storage lastStake = accountStakes[accountStakes.length - 1];\r\n            uint256 stakeTimeSec = now.sub(lastStake.timestampSec);\r\n            uint256 newstakingTokensSecondsToBurn = 0;\r\n            if (lastStake.stakingTokens <= sharesLeftToBurn) {\r\n                // fully redeem a past stake\r\n                newstakingTokensSecondsToBurn = lastStake.stakingTokens.mul(stakeTimeSec);\r\n                rewardAmount = computeNewReward(rewardAmount, newstakingTokensSecondsToBurn, stakeTimeSec);\r\n                stakingTokensSecondsToBurn = stakingTokensSecondsToBurn.add(newstakingTokensSecondsToBurn);\r\n                sharesLeftToBurn = sharesLeftToBurn.sub(lastStake.stakingTokens);\r\n                accountStakes.length--;\r\n            } else {\r\n                // partially redeem a past stake\r\n                newstakingTokensSecondsToBurn = sharesLeftToBurn.mul(stakeTimeSec);\r\n                rewardAmount = computeNewReward(rewardAmount, newstakingTokensSecondsToBurn, stakeTimeSec);\r\n                stakingTokensSecondsToBurn = stakingTokensSecondsToBurn.add(newstakingTokensSecondsToBurn);\r\n                lastStake.stakingTokens = lastStake.stakingTokens.sub(sharesLeftToBurn);\r\n                sharesLeftToBurn = 0;\r\n            }\r\n        }\r\n        totals.stakingTokensSeconds = totals.stakingTokensSeconds.sub(stakingTokensSecondsToBurn);\r\n        totals.stakingTokens = totals.stakingTokens.sub(amount);\r\n\r\n        // 2. Global Accounting\r\n        _totalStakingTokensSeconds = _totalStakingTokensSeconds.sub(stakingTokensSecondsToBurn);\r\n        totalStakingTokens = totalStakingTokens.sub(amount);\r\n\r\n        // unlock 99% only, leave 1% locked as a liquidity tax\r\n        uint256 amountMinusTax = amount.mul(99).div(100);\r\n        uint256 amountTax = amount.sub(amountMinusTax);\r\n        // interactions\r\n        require(_stakingPool.transfer(msg.sender, amountMinusTax),\r\n            'TokenGeyser: transfer out of staking pool failed');\r\n        require(_stakingPool.transfer(address(this), amountTax),\r\n            'TokenGeyser: transfer out of staking pool failed');\r\n        require(_unlockedPool.transfer(msg.sender, rewardAmount),\r\n            'TokenGeyser: transfer out of unlocked pool failed');\r\n\r\n        emit Unstaked(msg.sender, amountMinusTax, totalStakedFor(msg.sender), \"\");\r\n        emit TokensClaimed(msg.sender, rewardAmount);\r\n\r\n        require(totalStakingTokens == 0 || totalStaked() > 0,\r\n                \"TokenGeyser: Error unstaking. Staking shares exist, but no staking tokens do\");\r\n        return rewardAmount;\r\n    }\r\n\r\n    function computeNewReward(uint256 currentRewardTokens, uint256 stakingTokensSeconds, uint256 stakeTimeSec) private view returns (uint256) {\r\n\r\n        uint256 newRewardTokens = totalUnlocked().mul(stakingTokensSeconds).div(_totalStakingTokensSeconds);\r\n\r\n        if (stakeTimeSec >= bonusPeriodSec) {\r\n            return currentRewardTokens.add(newRewardTokens);\r\n        }\r\n\r\n        uint256 oneHundredPct = 100;\r\n        uint256 bonusedReward =\r\n            startBonus\r\n            .add(oneHundredPct.sub(startBonus).mul(stakeTimeSec).div(bonusPeriodSec))\r\n            .mul(newRewardTokens)\r\n            .div(oneHundredPct);\r\n        return currentRewardTokens.add(bonusedReward);\r\n    }\r\n\r\n    function totalStakedFor(address addr) public view returns (uint256) {\r\n        return totalStakingTokens > 0 ?\r\n            totalStaked().mul(_userTotals[addr].stakingTokens).div(totalStakingTokens) : 0;\r\n    }\r\n\r\n    function totalStaked() public view returns (uint256) {\r\n        return _stakingPool.balance();\r\n    }\r\n\r\n    function token() external view returns (address) {\r\n        return address(getStakingToken());\r\n    }\r\n\r\n    function updateAccounting() public returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n\r\n        unlockTokens();\r\n\r\n        // Global accounting\r\n        uint256 newstakingTokensSeconds =\r\n            now\r\n            .sub(_lastAccountingTimestampSec)\r\n            .mul(totalStakingTokens);\r\n        _totalStakingTokensSeconds = _totalStakingTokensSeconds.add(newstakingTokensSeconds);\r\n        _lastAccountingTimestampSec = now;\r\n\r\n        // User Accounting\r\n        UserTotals storage totals = _userTotals[msg.sender];\r\n        uint256 newUserstakingTokensSeconds =\r\n            now\r\n            .sub(totals.lastAccountingTimestampSec)\r\n            .mul(totals.stakingTokens);\r\n        totals.stakingTokensSeconds =\r\n            totals.stakingTokensSeconds\r\n            .add(newUserstakingTokensSeconds);\r\n        totals.lastAccountingTimestampSec = now;\r\n\r\n        uint256 totalUserRewards = (_totalStakingTokensSeconds > 0)\r\n            ? totalUnlocked().mul(totals.stakingTokensSeconds).div(_totalStakingTokensSeconds)\r\n            : 0;\r\n\r\n        return (\r\n            totalLocked(),\r\n            totalUnlocked(),\r\n            totals.stakingTokensSeconds,\r\n            _totalStakingTokensSeconds,\r\n            totalUserRewards,\r\n            now\r\n        );\r\n    }\r\n\r\n    function totalLocked() public view returns (uint256) {\r\n        return _lockedPool.balance();\r\n    }\r\n\r\n    function totalUnlocked() public view returns (uint256) {\r\n        return _unlockedPool.balance();\r\n    }\r\n\r\n    function unlockScheduleCount() public view returns (uint256) {\r\n        return unlockSchedules.length;\r\n    }\r\n\r\n    function lockTokens(uint256 amount, uint256 durationSec) external onlyOwner {\r\n        // Update lockedTokens amount before using it in computations after.\r\n        updateAccounting();\r\n\r\n        uint256 lockedTokens = totalLocked();\r\n\r\n        UnlockSchedule memory schedule;\r\n        schedule.initialLockedTokens = amount;\r\n        schedule.lastUnlockTimestampSec = now;\r\n        schedule.endAtSec = now.add(durationSec);\r\n        schedule.durationSec = durationSec;\r\n        unlockSchedules.push(schedule);\r\n\r\n        totalLockedTokens = lockedTokens.add(amount);\r\n\r\n        require(_lockedPool.token().transferFrom(msg.sender, address(_lockedPool), amount),\r\n            'TokenGeyser: transfer into locked pool failed');\r\n        emit TokensLocked(amount, durationSec, totalLocked());\r\n    }\r\n\r\n    function addTokens(uint256 amount) external {\r\n        UnlockSchedule storage schedule = unlockSchedules[unlockSchedules.length - 1];\r\n\r\n        // if we don't have an active schedule, create one\r\n        if(schedule.endAtSec < now){\r\n          uint256 lockedTokens = totalLocked();\r\n\r\n          UnlockSchedule memory schedule;\r\n          schedule.initialLockedTokens = amount;\r\n          schedule.lastUnlockTimestampSec = now;\r\n          schedule.endAtSec = now.add(60 * 60 * 24 * 135);\r\n          schedule.durationSec = 60 * 60 * 24 * 135;\r\n          unlockSchedules.push(schedule);\r\n\r\n          totalLockedTokens = lockedTokens.add(amount);\r\n\r\n          require(_lockedPool.token().transferFrom(msg.sender, address(_lockedPool), amount),\r\n              'TokenGeyser: transfer into locked pool failed');\r\n          emit TokensLocked(amount, 60 * 60 * 24 * 135, totalLocked());\r\n        } else {\r\n          // normalize the amount weight to offset lost time\r\n          uint256 mintedLockedShares = amount.mul(schedule.durationSec.div(schedule.endAtSec.sub(now)));\r\n          schedule.initialLockedTokens = schedule.initialLockedTokens.add(mintedLockedShares);\r\n\r\n          uint256 balanceBefore = _lockedPool.token().balanceOf(address(_lockedPool));\r\n          require(_lockedPool.token().transferFrom(msg.sender, address(_lockedPool), amount),\r\n              'TokenGeyser: transfer into locked pool failed');\r\n          uint256 balanceAfter = _lockedPool.token().balanceOf(address(_lockedPool));\r\n\r\n          totalLockedTokens = totalLockedTokens.add(balanceAfter.sub(balanceBefore));\r\n          emit TokensAdded(balanceAfter.sub(balanceBefore), totalLocked());\r\n        }\r\n\r\n    }\r\n\r\n    function unlockTokens() public returns (uint256) {\r\n        uint256 unlockedTokens = 0;\r\n\r\n        if (totalLockedTokens == 0) {\r\n            unlockedTokens = totalLocked();\r\n        } else {\r\n            for (uint256 s = 0; s < unlockSchedules.length; s++) {\r\n                unlockedTokens = unlockedTokens.add(unlockScheduleShares(s));\r\n            }\r\n            totalLockedTokens = totalLockedTokens.sub(unlockedTokens);\r\n        }\r\n\r\n        if (unlockedTokens > 0) {\r\n            require(_lockedPool.transfer(address(_unlockedPool), unlockedTokens),\r\n                'TokenGeyser: transfer out of locked pool failed');\r\n            emit TokensUnlocked(unlockedTokens, totalLocked());\r\n        }\r\n\r\n        return unlockedTokens;\r\n    }\r\n\r\n    function unlockScheduleShares(uint256 s) private returns (uint256) {\r\n        UnlockSchedule storage schedule = unlockSchedules[s];\r\n\r\n        if(schedule.unlockedTokens >= schedule.initialLockedTokens) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 sharesToUnlock = 0;\r\n        // Special case to handle any leftover dust from integer division\r\n        if (now >= schedule.endAtSec) {\r\n            sharesToUnlock = (schedule.initialLockedTokens.sub(schedule.unlockedTokens));\r\n            schedule.lastUnlockTimestampSec = schedule.endAtSec;\r\n        } else {\r\n            sharesToUnlock = now.sub(schedule.lastUnlockTimestampSec)\r\n                .mul(schedule.initialLockedTokens)\r\n                .div(schedule.durationSec);\r\n            schedule.lastUnlockTimestampSec = now;\r\n        }\r\n\r\n        schedule.unlockedTokens = schedule.unlockedTokens.add(sharesToUnlock);\r\n        return sharesToUnlock;\r\n    }\r\n\r\n    function rescueFundsFromStakingPool(address tokenToRescue, address to, uint256 amount) public onlyOwner returns (bool) {\r\n        return _stakingPool.rescueFunds(tokenToRescue, to, amount);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStakingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDistributionToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateAccounting\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"totalStakedFor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenToRescue\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueFundsFromStakingPool\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unlockSchedules\",\"outputs\":[{\"name\":\"initialLockedTokens\",\"type\":\"uint256\"},{\"name\":\"unlockedTokens\",\"type\":\"uint256\"},{\"name\":\"lastUnlockTimestampSec\",\"type\":\"uint256\"},{\"name\":\"endAtSec\",\"type\":\"uint256\"},{\"name\":\"durationSec\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusPeriodSec\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstakeQuery\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"durationSec\",\"type\":\"uint256\"}],\"name\":\"lockTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStakingToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUnlocked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockScheduleCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"unstake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLockedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"stakingToken\",\"type\":\"address\"},{\"name\":\"distributionToken\",\"type\":\"address\"},{\"name\":\"_startBonus\",\"type\":\"uint256\"},{\"name\":\"_bonusPeriod\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"durationSec\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"TokensLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"TokensAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"TokensUnlocked\",\"type\":\"event\"}]","ContractName":"TokenGeyser","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000efb424c465dbd0a626359d63412838f727f2c25000000000000000000000000a49d7499271ae71cd8ab9ac515e6694c755d400c000000000000000000000000000000000000000000000000000000000000002100000000000000000000000000000000000000000000000000000000004f1a00","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://4e3bd323539cc249de2e58c6aae38451603550c14aa6144c26d8465942477b77"}]}