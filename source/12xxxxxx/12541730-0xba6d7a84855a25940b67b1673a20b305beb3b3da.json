{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n}\r\n\r\ninterface IWETH {\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function deposit() external payable;\r\n    function withdraw(uint wad) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface Gastoken {\r\n    function free(uint256 value) external returns (bool success);\r\n    function freeUpTo(uint256 value) external returns (uint256 freed);\r\n    function freeFrom(address from, uint256 value) external returns (bool success);\r\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\r\n    function mint(uint256 value) external;\r\n}\r\n\r\ncontract Sandwich {\r\n\r\n    address owner = address(0x8C14877fe86b23FCF669350d056cDc3F2fC27029);\r\n    IWETH weth = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\r\n    constructor() {}\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function mintGastoken(address gasTokenAddress, uint _amount) external {\r\n        Gastoken(gasTokenAddress).mint(_amount);\r\n    }\r\n\r\n    function withdrawERC20(address _token, uint _amount) external onlyOwner {\r\n        IERC20(_token).transfer(msg.sender, _amount);\r\n    }\r\n\r\n    function approveMax(address router, address token) external onlyOwner {\r\n        IERC20(token).approve(router, type(uint).max);\r\n    }\r\n\r\n    function _swapExactTokensToTokens(\r\n        address gasTokenAddress,\r\n        uint amountToFree,\r\n        address inputToken,\r\n        uint256 inputAmount,\r\n        uint256 minOutAmount,\r\n        address recipient,\r\n        // IUniswapV2Pair[] calldata pairs,\r\n        IUniswapV2Pair p,\r\n        // bool[] calldata whichToken\r\n        bool whichToken\r\n    ) external onlyOwner {\r\n        require(Gastoken(gasTokenAddress).free(amountToFree));\r\n        // Last trade, check for slippage here\r\n        if (whichToken) { // Check what token are we buying, 0 or 1 ?\r\n            // 1\r\n            (uint256 reserveIn, uint256 reserveOut,) = p.getReserves();\r\n            require(IERC20(inputToken).transfer(address(p), inputAmount), \"Transfer to pair failed\");\r\n\r\n            inputAmount = inputAmount * 997; // Calculate after fee\r\n            inputAmount = (inputAmount * reserveOut)/(reserveIn * 1000 + inputAmount); // Calculate outputNeeded\r\n            // require(inputAmount >= minOutAmount, \"JRouter: not enough out tokens\"); // Checking output amount\r\n            p.swap(0, inputAmount, recipient, \"\"); // Swapping\r\n        } else {\r\n            // 0\r\n            (uint256 reserveOut, uint256 reserveIn,) = p.getReserves();\r\n            require(IERC20(inputToken).transfer(address(p), inputAmount), \"Transfer to pair failed\");\r\n\r\n            inputAmount = inputAmount * 997; // Calculate after fee\r\n            inputAmount = (inputAmount * reserveOut)/(reserveIn * 1000 + inputAmount); // Calculate outputNeeded\r\n            require(inputAmount >= minOutAmount, \"JRouter: not enough out tokens\"); // Checking output amount\r\n            p.swap(inputAmount, 0, recipient, \"\"); // Swapping\r\n        }\r\n    }\r\n\r\n    function _swapExactTokensToWETHAndBribe(\r\n        address gasTokenAddress,\r\n        uint amountToFree,\r\n        address inputToken,\r\n        uint256 minOutAmount,\r\n        address recipient,\r\n        IUniswapV2Pair p,\r\n        bool whichToken,\r\n        uint bribeAmount,\r\n        uint bribePercentage\r\n    ) external onlyOwner {\r\n        uint startBalance = weth.balanceOf(address(this));\r\n        require(Gastoken(gasTokenAddress).free(amountToFree));\r\n        // Last trade, check for slippage here\r\n        uint inputAmount = IERC20(inputToken).balanceOf(address(this));\r\n        if (whichToken) { // Check what token are we buying, 0 or 1 ?\r\n            // 1\r\n            (uint256 reserveIn, uint256 reserveOut,) = p.getReserves();\r\n            require(IERC20(inputToken).transfer(address(p), inputAmount), \"Transfer to pair failed\");\r\n\r\n            inputAmount = inputAmount * 997; // Calculate after fee\r\n            inputAmount = (inputAmount * reserveOut)/(reserveIn * 1000 + inputAmount); // Calculate outputNeeded\r\n            // require(inputAmount >= minOutAmount, \"JRouter: not enough out tokens\"); // Checking output amount\r\n            p.swap(0, inputAmount, recipient, \"\"); // Swapping\r\n        } else {\r\n            // 0\r\n            (uint256 reserveOut, uint256 reserveIn,) = p.getReserves();\r\n            require(IERC20(inputToken).transfer(address(p), inputAmount), \"Transfer to pair failed\"); // Breaks on Tether\r\n            // IERC20(inputToken).transfer(address(p), inputAmount);\r\n\r\n            inputAmount = inputAmount * 997; // Calculate after fee\r\n            inputAmount = (inputAmount * reserveOut)/(reserveIn * 1000 + inputAmount); // Calculate outputNeeded\r\n            // require(inputAmount >= minOutAmount, \"JRouter: not enough out tokens\"); // Checking output amount\r\n            p.swap(inputAmount, 0, recipient, \"\"); // Swapping\r\n        }\r\n\r\n        uint balance = weth.balanceOf(address(this));\r\n        uint profit = balance - startBalance - minOutAmount; // This reverts if not profitable\r\n        if (bribeAmount == 0) {\r\n            bribeAmount = profit * bribePercentage / 100;\r\n        }\r\n\r\n        require(profit > bribeAmount, \"Not enough money to pay bribe\"); // however, we may not have enough for the bribe\r\n        weth.withdraw(bribeAmount);\r\n        block.coinbase.call{value: bribeAmount}(new bytes(0));\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gasTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToFree\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"p\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"whichToken\",\"type\":\"bool\"}],\"name\":\"_swapExactTokensToTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gasTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToFree\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minOutAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"p\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"whichToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bribeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bribePercentage\",\"type\":\"uint256\"}],\"name\":\"_swapExactTokensToWETHAndBribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gasTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintGastoken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Sandwich","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://02b91770d4e0f811baebdf8a05c364cb4cd88ece0ba7c6ecf41ade929856d6c7"}]}