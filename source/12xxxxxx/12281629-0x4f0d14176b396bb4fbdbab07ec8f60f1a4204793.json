{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface Etheria{\r\n\tfunction getOwner(uint8 col, uint8 row) external view returns(address);\r\n\tfunction setOwner(uint8 col, uint8 row, address newowner) external;\r\n}\r\n\r\ninterface MapElevationRetriever{\r\n    function getElevation(uint8 col, uint8 row) external view returns (uint8);\r\n}\r\n\r\ncontract EtheriaExchangeV1pt1 is Ownable {\r\n \tusing SafeMath for uint256;\r\n\r\n\tstring public name = \"EtheriaExchangeV1pt1\";\r\n\r\n\tEtheria public constant etheria = Etheria(0x169332Ae7D143E4B5c6baEdb2FEF77BFBdDB4011);\r\n\tMapElevationRetriever public constant mapElevationRetriever = MapElevationRetriever(0x68549D7Dbb7A956f955Ec1263F55494f05972A6b);\r\n\r\n\tuint256 public feeRate = 25; // 2.5%, max 5%\r\n\tuint256 public withdrawalPenaltyRate = 1; // 0.1%, max 5%\r\n\tuint256 public collectedFees = 0;\r\n\tuint16 public constant mapSize = 33;\r\n\r\n    struct Bid {\r\n        address bidder;\r\n\t\tuint256 amount;\r\n    }\r\n\r\n    // A record of the highest Etheria bid\r\n    mapping (uint16 => Bid) public bids;\r\n\tmapping (address => uint256) public pendingWithdrawals;\r\n\r\n    event EtheriaBidCreated(uint16 indexed index, address indexed bidder, uint256 indexed amount);\r\n    event EtheriaGlobalBidCreated(address indexed bidder, uint256 indexed amount);\r\n    event EtheriaBidWithdrawn(uint16 indexed index, address indexed bidder, uint256 indexed amount);\r\n    event EtheriaBidAccepted(uint16 indexed index, address indexed seller, address indexed bidder, uint256 amount);\r\n    event EtheriaGlobalBidAccepted(uint16 indexed index, address indexed seller, address indexed bidder, uint256 amount);\r\n\r\n    constructor() {\r\n    }\r\n    \r\n\tfunction collectFees() external onlyOwner {\r\n\t\tpayable(msg.sender).transfer(collectedFees);\r\n\t\tcollectedFees = 0;\r\n\t}\r\n\r\n\tfunction setFeeRate(uint256 newFeeRate) external onlyOwner {\r\n\t    require(newFeeRate <= 50, \"EtheriaEx: Invalid fee\");\r\n\t\tfeeRate = newFeeRate;\r\n\t}\r\n\t\r\n\tfunction setWithdrawalPenaltyRate(uint256 newWithdrawalPenaltyRate) external onlyOwner {\r\n\t    require(newWithdrawalPenaltyRate <= 50, \"EtheriaEx: Invalid penalty rate\");\r\n\t\twithdrawalPenaltyRate = newWithdrawalPenaltyRate;\r\n\t}\r\n\r\n\tfunction getIndex(uint8 col, uint8 row) public pure returns (uint16) {\r\n\t\trequire(col < 33 && row < 33, \"EtheriaEx: Invalid col and/or row\");\r\n\t\treturn uint16(col) * mapSize + uint16(row);\r\n\t}\r\n\r\n    function getColRow(uint16 index) public pure returns (uint8 col, uint8 row) {\r\n        require(index < 1089, \"EtheriaEx: Invalid index\");\r\n        col = uint8(index / mapSize);\r\n        row = uint8(index % mapSize);\r\n\t}\r\n\t\r\n\tfunction getBidDetails(uint8 col, uint8 row) public view returns (address, uint256) {\r\n\t\tBid storage exitingBid = bids[getIndex(col, row)];\r\n\t\treturn (exitingBid.bidder, exitingBid.amount);\r\n\t}\r\n\t\r\n\tfunction bid(uint8 col, uint8 row, uint256 amount) internal returns (uint16 index) {\r\n\t    require(msg.sender == tx.origin, \"EtheriaEx: tx origin must be sender\"); // etheria doesn't allow tile ownership by contracts, this check prevents blackholing\r\n\t\trequire(amount > 0, \"EtheriaEx: Invalid bid\");\r\n\t\t\r\n\t\tindex = getIndex(col, row);\r\n\t\tBid storage existingbid = bids[index];\r\n\t\trequire(amount >= existingbid.amount.mul(101).div(100), \"EtheriaEx: bid not 1% higher\"); // require higher bid to be at least 1% higher\r\n\t\t\r\n\t\tpendingWithdrawals[existingbid.bidder] += existingbid.amount; // new bid is good. add amount of old (stale) bid to pending withdrawals (incl previous stale bid amounts)\r\n\t\t\r\n\t\texistingbid.bidder = msg.sender;\r\n\t\texistingbid.amount = amount;\r\n\t}\r\n\r\n\tfunction makeBid(uint8 col, uint8 row) external payable {\r\n\t\trequire(mapElevationRetriever.getElevation(col, row) >= 125, \"EtheriaEx: Can't bid on water\");\r\n\t\tuint16 index = bid(col, row, msg.value);\r\n\t\temit EtheriaBidCreated(index, msg.sender, msg.value);\r\n\t}\r\n\t\r\n\tfunction makeGlobalBid() external payable {\r\n\t\tbid(0, 0, msg.value);\r\n\t\temit EtheriaGlobalBidCreated(msg.sender, msg.value);\r\n\t}\r\n\r\n    // withdrawal of a still-good bid by the owner\r\n\tfunction withdrawBid(uint8 col, uint8 row) external {\r\n\t\tuint16 index = getIndex(col, row);\r\n\t\tBid storage existingbid = bids[index];\r\n\t\trequire(msg.sender == existingbid.bidder, \"EtheriaEx: not existing bidder\");\r\n\r\n        // to discourage bid withdrawal, take a cut\r\n\t\tuint256 fees = existingbid.amount.mul(withdrawalPenaltyRate).div(1000);\r\n\t\tcollectedFees += fees;\r\n\t\t\r\n\t\tuint256 amount = existingbid.amount.sub(fees);\r\n\t\t\r\n\t\texistingbid.bidder = address(0);\r\n\t\texistingbid.amount = 0;\r\n\t\t\r\n\t\tpayable(msg.sender).transfer(amount);\r\n\t\t\r\n\t\temit EtheriaBidWithdrawn(index, msg.sender, existingbid.amount);\r\n\t}\r\n\t\r\n\tfunction accept(uint8 col, uint8 row, uint256 minPrice, uint16 index) internal returns(address bidder, uint256 amount) {\r\n\t    require(etheria.getOwner(col, row) == msg.sender, \"EtheriaEx: Not tile owner\");\r\n\t\t\r\n        Bid storage existingbid = bids[index];\r\n\t\trequire(existingbid.amount > 0, \"EtheriaEx: No bid to accept\");\r\n\t\trequire(existingbid.amount >= minPrice, \"EtheriaEx: min price not met\");\r\n\t\t\r\n\t\tbidder = existingbid.bidder;\r\n\t\t\r\n\t\tetheria.setOwner(col, row, bidder);\r\n\t\trequire(etheria.getOwner(col, row) == bidder, \"EtheriaEx: setting owner failed\");\r\n\r\n\t\t//collect fee\r\n\t\tuint256 fees = existingbid.amount.mul(feeRate).div(1000);\r\n\t\tcollectedFees += fees;\r\n\r\n        amount = existingbid.amount.sub(fees);\r\n        \r\n\t\texistingbid.bidder = address(0);\r\n\t\texistingbid.amount = 0;\r\n\t\t\r\n        pendingWithdrawals[msg.sender] += amount;\r\n\t}\r\n\r\n\tfunction acceptBid(uint8 col, uint8 row, uint256 minPrice) external {\r\n\t    uint16 index = getIndex(col, row);\r\n\t\t(address bidder, uint256 amount) = accept(col, row, minPrice, index);\r\n\t\temit EtheriaBidAccepted(index, msg.sender, bidder, amount);\r\n    }\r\n    \r\n    function acceptGlobalBid(uint8 col, uint8 row, uint256 minPrice) external {\r\n        (address bidder, uint256 amount) = accept(col, row, minPrice, 0);\r\n        emit EtheriaGlobalBidAccepted(getIndex(col, row), msg.sender, bidder, amount);\r\n    }\r\n\r\n    // withdrawal of funds on any and all stale bids that have been bested\r\n\tfunction withdraw(address payable destination) public {\r\n\t\tuint256 amount = pendingWithdrawals[msg.sender];\r\n\t\trequire(amount > 0, \"EtheriaEx: no amount to withdraw\");\r\n\t\t\r\n        // Remember to zero the pending refund before\r\n        // sending to prevent re-entrancy attacks\r\n        pendingWithdrawals[destination] = 0;\r\n        payable(destination).transfer(amount);\r\n\t}\r\n\t\r\n\tfunction withdraw() external {\r\n\t\twithdraw(payable(msg.sender));\r\n\t}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EtheriaBidAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EtheriaBidCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EtheriaBidWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EtheriaGlobalBidAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EtheriaGlobalBidCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"}],\"name\":\"acceptBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"}],\"name\":\"acceptGlobalBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"bids\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"etheria\",\"outputs\":[{\"internalType\":\"contract Etheria\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"}],\"name\":\"getBidDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"}],\"name\":\"getColRow\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"}],\"name\":\"getIndex\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"}],\"name\":\"makeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makeGlobalBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mapElevationRetriever\",\"outputs\":[{\"internalType\":\"contract MapElevationRetriever\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mapSize\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeeRate\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newWithdrawalPenaltyRate\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalPenaltyRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"}],\"name\":\"withdrawBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalPenaltyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EtheriaExchangeV1pt1","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ade082c5ead9b3a40602c259bed7d8f008b8942996c5b2ba389ab58765a7be2a"}]}