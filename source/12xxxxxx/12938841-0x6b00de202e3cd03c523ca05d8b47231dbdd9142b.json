{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/nahuel/nftstudios/rocket-factory/rocket-factory-contracts/contracts/RocketComponent.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport {StringUtils, UintUtils} from \\\"./Utils.sol\\\";\\n\\ncontract RocketComponent is ERC721, Ownable {\\n    using UintUtils for uint256;\\n    using StringUtils for string;\\n\\n    modifier onlyOwnerOrAdmin() {\\n        require(\\n            owner() == _msgSender() || adminAddress == _msgSender(),\\n            \\\"Ownable: caller is not the owner nor the admin\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    struct ComponentModel {\\n        string brand;\\n        uint256 from;\\n        uint256 to;\\n    }\\n\\n    struct ComponentView {\\n        uint256 tokenId;\\n        string componentType;\\n        string brand;\\n        string imageLink;\\n        bool hasSticker;\\n        string sticker;\\n        string serialNumber;\\n        uint256 edition;\\n        uint256 total;\\n    }\\n\\n    struct ComponentSticker {\\n        uint256 tokenId;\\n        uint256 stickerId;\\n    }\\n\\n    uint256 private supply;\\n\\n    uint256 private claimPrice;\\n\\n    uint256 private earlyAccessStartDate;\\n\\n    uint256 private claimStartDate;\\n\\n    uint16 private maxClaimsPerAddress;\\n\\n    string private baseURI;\\n\\n    string private ipfsBaseURI;\\n\\n    address private rocketFactoryContract;\\n\\n    address private testFlightCrewContract;\\n\\n    address private adminAddress;\\n\\n    uint16[] private availableComponents;\\n\\n    string[] private stickers;\\n\\n    ComponentModel[] private componentModels;\\n\\n    mapping(uint256 => bool) private burnedTokens;\\n\\n    // tokenId -> stickerId\\n    mapping(uint256 => uint256) private componentStickers;\\n\\n    mapping(address => uint16) private claimedComponentsPerAddress;\\n\\n    /**\\n     * @dev Throws if called by any account other than the Rocket Contract.\\n     */\\n    modifier onlyRocketFactory() {\\n        require(\\n            msg.sender == rocketFactoryContract,\\n            \\\"Ownable: caller is not the rocket factory contract\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor() ERC721(\\\"Tom Sachs Rocket Components\\\", \\\"TSRC\\\") {\\n        // since 0 is the default value for unset in Solidity, create the first sticker as \\\"none\\\"\\n        // to allow to use the componentStickers map\\n        stickers.push(\\\"none\\\");\\n    }\\n\\n    // ONLY OWNER functions\\n\\n    /**\\n     * @dev Sets the claim price.\\n     */\\n    function setClaimPrice(uint256 _claimPrice) external onlyOwnerOrAdmin {\\n        claimPrice = _claimPrice;\\n    }\\n\\n    /**\\n     * @dev Allows to withdraw the Ether in the contract.\\n     */\\n    function withdraw() external onlyOwnerOrAdmin {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    /**\\n     * @dev Sets the data for the components\\n     */\\n    function addComponents(ComponentModel[] memory _components)\\n        external\\n        onlyOwnerOrAdmin\\n    {\\n        for (uint256 i; i < _components.length; i++) {\\n            componentModels.push(_components[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Adds tokenIds to the list of tokens that can be claimed by\\n     * users using the claim function.\\n     */\\n    function addAvailableComponents(uint16[] memory _availableComponents)\\n        external\\n        onlyOwnerOrAdmin\\n    {\\n        for (uint256 i; i < _availableComponents.length; i++) {\\n            availableComponents.push(_availableComponents[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a tokenId from the list of tokens that can be claimed by\\n     * users using the claim function.\\n     */\\n    function removeFromAvailableComponents(uint16 tokenId)\\n        external\\n        onlyOwnerOrAdmin\\n    {\\n        for (uint256 i; i < availableComponents.length; i++) {\\n            if (availableComponents[i] != tokenId) {\\n                continue;\\n            }\\n\\n            availableComponents[i] = availableComponents[\\n                availableComponents.length - 1\\n            ];\\n            availableComponents.pop();\\n\\n            break;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes all tokenIds from the list of tokens that can be claimed by\\n     * users using the claim function.\\n     */\\n    function resetAvailableComponents() external onlyOwnerOrAdmin {\\n        delete availableComponents;\\n    }\\n\\n    /**\\n     * @dev Returns a list with all the available components that can be claimed by\\n     * users using the claim function.\\n     */\\n    function getAvailableComponents()\\n        external\\n        view\\n        onlyOwnerOrAdmin\\n        returns (uint16[] memory)\\n    {\\n        return availableComponents;\\n    }\\n\\n    /**\\n     * @dev Returns whether or not a tokenId is in the available compoenents list.\\n     */\\n    function isInAvailableComponents(uint256 tokenId)\\n        external\\n        view\\n        onlyOwnerOrAdmin\\n        returns (bool)\\n    {\\n        for (uint256 i; i < availableComponents.length; i++) {\\n            if (availableComponents[i] == tokenId) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Sets the base URI for IPFS.\\n     */\\n    function setIpfsBaseURI(string memory _ipfsBaseURI)\\n        external\\n        onlyOwnerOrAdmin\\n    {\\n        ipfsBaseURI = _ipfsBaseURI;\\n    }\\n\\n    /**\\n     * @dev Sets the base URI for the API that provides the NFT data.\\n     */\\n    function setBaseTokenURI(string memory _uri) external onlyOwnerOrAdmin {\\n        baseURI = _uri;\\n    }\\n\\n    /**\\n     * @dev Sets the address of the Rocket Factory contract.\\n     */\\n    function setRocketFactoryContract(address _address)\\n        external\\n        onlyOwnerOrAdmin\\n    {\\n        rocketFactoryContract = _address;\\n    }\\n\\n    /**\\n     * @dev Sets the address of the Test Flight Crew Contract.\\n     */\\n    function setTestFlightCrewContract(address _address)\\n        external\\n        onlyOwnerOrAdmin\\n    {\\n        testFlightCrewContract = _address;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the Rocket Factory contract.\\n     */\\n    function getRocketFactoryContract()\\n        external\\n        view\\n        onlyOwnerOrAdmin\\n        returns (address)\\n    {\\n        return rocketFactoryContract;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the Test Flight Crew Contract.\\n     */\\n    function getTestFlightCrewContract()\\n        external\\n        view\\n        onlyOwnerOrAdmin\\n        returns (address)\\n    {\\n        return testFlightCrewContract;\\n    }\\n\\n    /**\\n     * @dev Onwer only claim function that allows to mint tokens and send them to a given address.\\n     */\\n    function ownerClaim(uint256[] memory tokenIds, address to)\\n        external\\n        onlyOwnerOrAdmin\\n    {\\n        for (uint256 i; i < tokenIds.length; i++) {\\n            mint(to, tokenIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Adds new stickers into the contract.\\n     */\\n    function addStickers(string[] memory _stickers) external onlyOwnerOrAdmin {\\n        for (uint256 i; i < _stickers.length; i++) {\\n            stickers.push(_stickers[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Adds an sticker to a compoenent.\\n     */\\n    function addComponentStickers(ComponentSticker[] memory _componentStickers)\\n        external\\n        onlyOwnerOrAdmin\\n    {\\n        for (uint256 i; i < _componentStickers.length; i++) {\\n            componentStickers[\\n                _componentStickers[i].tokenId\\n            ] = _componentStickers[i].stickerId;\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the start datetime to allow claims.\\n     */\\n    function setClaimStartDate(uint256 _claimStartDate)\\n        external\\n        onlyOwnerOrAdmin\\n    {\\n        claimStartDate = _claimStartDate;\\n    }\\n\\n    /**\\n     * @dev Sets the start datetime to allow early access claims.\\n     */\\n    function setEarlyAccessStartDate(uint256 _earlyAccessStartDate)\\n        external\\n        onlyOwnerOrAdmin\\n    {\\n        earlyAccessStartDate = _earlyAccessStartDate;\\n    }\\n\\n    /**\\n     * @dev Sets the maximum amount of components that an address can claim\\n     */\\n    function setMaxClaimsPerAddress(uint16 _maxClaimsPerAddress)\\n        external\\n        onlyOwnerOrAdmin\\n    {\\n        maxClaimsPerAddress = _maxClaimsPerAddress;\\n    }\\n\\n    /**\\n     * @dev Sets the admin address for the contract\\n     */\\n    function setAdminAddress(address _adminAddress) external onlyOwnerOrAdmin {\\n        adminAddress = _adminAddress;\\n    }\\n\\n    // END ONLY OWNER functions\\n\\n    // ONLY Rocket Factory functions\\n\\n    /**\\n     * @dev Burns rocket components when a rocket is minted. Only can be called by the Rocket Factory contract.\\n     */\\n    function burn(\\n        address _owner,\\n        uint256 _noseId,\\n        uint256 _bodyId,\\n        uint256 _tailId\\n    ) external onlyRocketFactory {\\n        require(\\n            ownerOf(_noseId) == _owner &&\\n                ownerOf(_bodyId) == _owner &&\\n                ownerOf(_tailId) == _owner,\\n            \\\"Invalid owner for given components\\\"\\n        );\\n\\n        require(\\n            _noseId % 3 == 0 && _bodyId % 3 == 1 && _tailId % 3 == 2,\\n            \\\"Invalid components given\\\"\\n        );\\n\\n        _burn(_noseId);\\n        _burn(_bodyId);\\n        _burn(_tailId);\\n\\n        burnedTokens[_noseId] = true;\\n        burnedTokens[_bodyId] = true;\\n        burnedTokens[_tailId] = true;\\n\\n        supply -= 3;\\n    }\\n\\n    // END ONLY Rocket Factory functions\\n\\n    /**\\n     * @dev Allows to randomly claim an available Component.\\n     */\\n    function claim(uint16 amount) external payable {\\n        require(amount > 0, \\\"At least one component should be claimed\\\");\\n\\n        require(\\n            availableComponents.length > 0,\\n            \\\"No components left to be claimed\\\"\\n        );\\n\\n        IERC721 token = IERC721(testFlightCrewContract);\\n        require(\\n            (claimStartDate != 0 && claimStartDate <= block.timestamp) ||\\n                (earlyAccessStartDate <= block.timestamp &&\\n                    token.balanceOf(msg.sender) > 0),\\n            \\\"It is not time yet to start claiming\\\"\\n        );\\n\\n        require(\\n            claimedComponentsPerAddress[msg.sender] + amount <=\\n                maxClaimsPerAddress,\\n            \\\"You cannot claim more components\\\"\\n        );\\n\\n        require(\\n            msg.sender == tx.origin,\\n            \\\"Claim can only be called from a wallet\\\"\\n        );\\n\\n        if (amount > availableComponents.length) {\\n            amount = uint16(availableComponents.length);\\n        }\\n\\n        uint256 totalClaimPrice = claimPrice * amount;\\n\\n        require(msg.value >= totalClaimPrice, \\\"Insufficient Ether to claim\\\");\\n\\n        if (msg.value > totalClaimPrice) {\\n            payable(msg.sender).transfer(msg.value - totalClaimPrice);\\n        }\\n\\n        claimedComponentsPerAddress[msg.sender] += amount;\\n\\n        for (uint256 i; i < amount; i++) {\\n            uint256 random = _getRandomNumber(availableComponents.length);\\n            uint256 tokenId = uint256(availableComponents[random]);\\n\\n            availableComponents[random] = availableComponents[\\n                availableComponents.length - 1\\n            ];\\n            availableComponents.pop();\\n\\n            mint(msg.sender, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns all the metadata of a given Component.\\n     */\\n    function retrieve(uint256 _tokenId)\\n        external\\n        view\\n        returns (ComponentView memory)\\n    {\\n        for (uint256 i; i < componentModels.length; i++) {\\n            if (\\n                _tokenId < componentModels[i].from ||\\n                _tokenId > componentModels[i].to\\n            ) {\\n                continue;\\n            }\\n\\n            string memory componentType = _getComponentType(_tokenId);\\n\\n            (uint256 total, uint256 edition) = _totalComponentEditions(\\n                _tokenId,\\n                i\\n            );\\n\\n            bool hasSticker;\\n            string memory stickerName;\\n            string memory stickerComponentPath;\\n\\n            if (componentStickers[_tokenId] != 0) {\\n                hasSticker = true;\\n                stickerName = stickers[componentStickers[_tokenId]];\\n                stickerComponentPath = string(\\n                    abi.encodePacked(\\\"-\\\", stickerName, \\\"-sticker\\\")\\n                );\\n            }\\n\\n            string memory serialNumber = \\\"2021.191.\\\";\\n            string memory tokenIdStr = _tokenId.uint2str();\\n            if (_tokenId >= 1000) {\\n                serialNumber = string(\\n                    abi.encodePacked(serialNumber, tokenIdStr)\\n                );\\n            } else if (_tokenId >= 100) {\\n                serialNumber = string(\\n                    abi.encodePacked(serialNumber, \\\"0\\\", tokenIdStr)\\n                );\\n            } else if (_tokenId >= 10) {\\n                serialNumber = string(\\n                    abi.encodePacked(serialNumber, \\\"00\\\", tokenIdStr)\\n                );\\n            } else {\\n                serialNumber = string(\\n                    abi.encodePacked(serialNumber, \\\"000\\\", tokenIdStr)\\n                );\\n            }\\n\\n            return\\n                ComponentView(\\n                    _tokenId,\\n                    componentType,\\n                    componentModels[i].brand,\\n                    string(\\n                        abi.encodePacked(\\n                            ipfsBaseURI,\\n                            componentModels[i].brand.toSlug(),\\n                            \\\"-\\\",\\n                            componentType,\\n                            stickerComponentPath.toSlug(),\\n                            \\\".png\\\"\\n                        )\\n                    ),\\n                    hasSticker,\\n                    stickerName,\\n                    serialNumber,\\n                    edition,\\n                    total\\n                );\\n        }\\n\\n        revert(\\\"Component does not exist\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the claim price.\\n     */\\n    function getClaimPrice() external view returns (uint256) {\\n        return claimPrice;\\n    }\\n\\n    /**\\n     * @dev Returns how many components are available to be claimed.\\n     */\\n    function getAvailableComponentsCount() external view returns (uint256) {\\n        return availableComponents.length;\\n    }\\n\\n    /**\\n     * @dev Returns the base URI for the tokens API.\\n     */\\n    function baseTokenURI() external view returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    /**\\n     * @dev Returns the base URI for IPFS.\\n     */\\n    function getIpfsBaseURI() external view returns (string memory) {\\n        return ipfsBaseURI;\\n    }\\n\\n    /**\\n     * @dev Returns a list of all the existing stickers.\\n     */\\n    function getStickers() external view returns (string[] memory) {\\n        return stickers;\\n    }\\n\\n    /**\\n     * @dev Returns an sticker by its id.\\n     */\\n    function getSticker(uint256 stickerId)\\n        external\\n        view\\n        returns (string memory)\\n    {\\n        return stickers[stickerId];\\n    }\\n\\n    /**\\n     * @dev Returns the total rocket supply\\n     */\\n    function totalSupply() external view virtual returns (uint256) {\\n        return supply;\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of claimed components for the given address\\n     */\\n    function getClaimedComponentsPerAddress(address _address)\\n        external\\n        view\\n        returns (uint16)\\n    {\\n        return claimedComponentsPerAddress[_address];\\n    }\\n\\n    // Private and Internal functions\\n\\n    /**\\n     * @dev See {ERC721}.\\n     */\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    /**\\n     * @dev Returns if the given Component is a nose, body or tail.\\n     */\\n    function _getComponentType(uint256 _tokenId)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        uint256 modulo = _tokenId % 3;\\n        if (modulo == 0) {\\n            return \\\"nose\\\";\\n        }\\n\\n        if (modulo == 1) {\\n            return \\\"body\\\";\\n        }\\n\\n        return \\\"tail\\\";\\n    }\\n\\n    /**\\n     * @dev Checks that the token hasn't been burned and that the token exists before minting it.\\n     * See {ERC721}.\\n     */\\n    function mint(address to, uint256 tokenId) private {\\n        require(burnedTokens[tokenId] == false, \\\"Token was already burned\\\");\\n\\n        require(\\n            tokenId <= componentModels[componentModels.length - 1].to,\\n            \\\"TokenId is out of bounds\\\"\\n        );\\n\\n        supply++;\\n\\n        _mint(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns the edition number and total of editions for a given tokenId.\\n     */\\n    function _totalComponentEditions(uint256 tokenId, uint256 modelId)\\n        private\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 edition;\\n        uint256 total;\\n\\n        for (\\n            uint256 i = componentModels[modelId].from;\\n            i <= componentModels[modelId].to;\\n            i++\\n        ) {\\n            if (i % 3 == tokenId % 3) {\\n                total++;\\n            }\\n\\n            if (tokenId == i) {\\n                edition = total;\\n            }\\n        }\\n\\n        return (total, edition);\\n    }\\n\\n    /**\\n     * @dev Generates a pseudo-random number.\\n     */\\n    function _getRandomNumber(uint256 _upper) private view returns (uint256) {\\n        uint256 random = uint256(\\n            keccak256(\\n                abi.encodePacked(\\n                    availableComponents.length,\\n                    blockhash(block.number - 1),\\n                    block.coinbase,\\n                    block.difficulty,\\n                    msg.sender\\n                )\\n            )\\n        );\\n\\n        return random % _upper;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/nahuel/nftstudios/rocket-factory/rocket-factory-contracts/contracts/RocketFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"./RocketComponent.sol\\\";\\nimport {Bytes32Utils, UintUtils} from \\\"./Utils.sol\\\";\\n\\ncontract RocketFactory is ERC721, Ownable {\\n    using UintUtils for uint256;\\n    using Bytes32Utils for bytes32;\\n    using StringUtils for string;\\n\\n    event LaunchPaid(address indexed from, uint256 indexed tokenId);\\n\\n    modifier onlyOwnerOrAdmin() {\\n        require(\\n            owner() == _msgSender() || adminAddress == _msgSender(),\\n            \\\"Ownable: caller is not the owner nor the admin\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    struct Rocket {\\n        string gpsCoordinates;\\n        string recoveryStatus;\\n        string physicalImage;\\n        string launchVideo;\\n        uint256 nose;\\n        uint256 body;\\n        uint256 tail;\\n        uint256 assemblyDate;\\n        uint256 launchDate;\\n    }\\n\\n    struct RocketView {\\n        uint256 tokenId;\\n        string name;\\n        string serialNumber;\\n        string gpsCoordinates;\\n        string recoveryStatus;\\n        string physicalImage;\\n        string launchVideo;\\n        string rocketType;\\n        string imageLink;\\n        uint256 assemblyDate;\\n        uint256 launchDate;\\n        uint256 stickers;\\n        bool payloadEligible;\\n        RocketComponent.ComponentView nose;\\n        RocketComponent.ComponentView body;\\n        RocketComponent.ComponentView tail;\\n    }\\n\\n    uint256 private launchPrice;\\n\\n    uint256 private assemblyStartDate;\\n\\n    string private baseURI;\\n\\n    string private ipfsBaseURI;\\n\\n    string private ipfsRocketFolder;\\n\\n    address private rocketComponentContract;\\n\\n    address private adminAddress;\\n\\n    bytes32[] private rocketNames;\\n\\n    Rocket[] private rockets;\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier tokenExists(uint256 _tokenId) {\\n        require(\\n            _exists(_tokenId),\\n            \\\"ERC721: operator query for nonexistent token\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor() ERC721(\\\"Tom Sachs Rockets\\\", \\\"TSR\\\") {}\\n\\n    /**\\n     * @dev Sets the rocket component contract address\\n     */\\n    function setRocketComponentContract(address _address)\\n        external\\n        onlyOwnerOrAdmin\\n    {\\n        rocketComponentContract = _address;\\n    }\\n\\n    /**\\n     * @dev Sets the base URI for IPFS.\\n     */\\n    function setIpfsBaseURI(string memory _ipfsBaseURI)\\n        external\\n        onlyOwnerOrAdmin\\n    {\\n        ipfsBaseURI = _ipfsBaseURI;\\n    }\\n\\n    /**\\n     * @dev Sets the folder containing the rocket images in IPFS\\n     */\\n    function setIpfsRocketFolder(string memory _ipfsRocketFolder)\\n        external\\n        onlyOwnerOrAdmin\\n    {\\n        ipfsRocketFolder = _ipfsRocketFolder;\\n    }\\n\\n    /**\\n     * @dev Sets the base URI for the API that provides the NFT data.\\n     */\\n    function setBaseTokenURI(string memory _uri) external onlyOwnerOrAdmin {\\n        baseURI = _uri;\\n    }\\n\\n    /**\\n     * @dev Sets the metadata for a rocket\\n     */\\n    function setRocketMetadata(\\n        uint256 tokenId,\\n        string memory gpsCoordinates,\\n        string memory recoveryStatus,\\n        string memory physicalImage,\\n        string memory launchVideo,\\n        uint256 launchDate\\n    ) external onlyOwnerOrAdmin tokenExists(tokenId) {\\n        Rocket storage rocket = rockets[tokenId];\\n\\n        rocket.gpsCoordinates = gpsCoordinates;\\n        rocket.recoveryStatus = recoveryStatus;\\n        rocket.physicalImage = physicalImage;\\n        rocket.launchVideo = launchVideo;\\n        rocket.launchDate = launchDate;\\n    }\\n\\n    /**\\n     * @dev sets the GPS Coordinates\\n     */\\n    function setRocketGPSCoordinates(\\n        uint256 tokenId,\\n        string memory gpsCoordinates\\n    ) external onlyOwnerOrAdmin tokenExists(tokenId) {\\n        rockets[tokenId].gpsCoordinates = gpsCoordinates;\\n    }\\n\\n    /**\\n     * @dev sets the recovery status\\n     */\\n    function setRecoveryStatus(uint256 tokenId, string memory recoveryStatus)\\n        external\\n        onlyOwnerOrAdmin\\n        tokenExists(tokenId)\\n    {\\n        rockets[tokenId].recoveryStatus = recoveryStatus;\\n    }\\n\\n    /**\\n     * @dev sets the physical image\\n     */\\n    function setPhysicalImage(uint256 tokenId, string memory physicalImage)\\n        external\\n        onlyOwnerOrAdmin\\n        tokenExists(tokenId)\\n    {\\n        rockets[tokenId].physicalImage = physicalImage;\\n    }\\n\\n    /**\\n     * @dev sets the launch video\\n     */\\n    function setLaunchVideo(uint256 tokenId, string memory launchVideo)\\n        external\\n        onlyOwnerOrAdmin\\n        tokenExists(tokenId)\\n    {\\n        rockets[tokenId].launchVideo = launchVideo;\\n    }\\n\\n    /**\\n     * @dev sets the launch date\\n     */\\n    function setLaunchDate(uint256 tokenId, uint256 launchDate)\\n        external\\n        onlyOwnerOrAdmin\\n        tokenExists(tokenId)\\n    {\\n        rockets[tokenId].launchDate = launchDate;\\n    }\\n\\n    /**\\n     * @dev Sets the price that needs to be payed to launch a rocket\\n     */\\n    function setLaunchPrice(uint256 _launchPrice) external onlyOwnerOrAdmin {\\n        launchPrice = _launchPrice;\\n    }\\n\\n    /**\\n     * @dev Allows to withdraw the Ether in the contract\\n     */\\n    function withdraw() external onlyOwnerOrAdmin {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    /**\\n     * @dev Sets the admin address for the contract\\n     */\\n    function setAdminAddress(address _adminAddress) external onlyOwnerOrAdmin {\\n        adminAddress = _adminAddress;\\n    }\\n\\n    /**\\n     * @dev Adds names for rockets\\n     */\\n    function addNames(bytes32[] memory _rocketNames) external onlyOwnerOrAdmin {\\n        for (uint256 i; i < _rocketNames.length; i++) {\\n            rocketNames.push(_rocketNames[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the date when users can start to assembly rockets\\n     */\\n    function setAssemblyStartDate(uint256 _assemblyStartDate)\\n        external\\n        onlyOwnerOrAdmin\\n    {\\n        assemblyStartDate = _assemblyStartDate;\\n    }\\n\\n    /**\\n     * @dev allows admin and owner to mint rockets even before public assembly date starts\\n     */\\n    function devMint(\\n        uint256 noseId,\\n        uint256 bodyId,\\n        uint256 tailId\\n    ) external onlyOwnerOrAdmin {\\n        assemble(noseId, bodyId, tailId);\\n    }\\n\\n    /**\\n     * @dev mints a new Rocket using the given parts\\n     */\\n    function mint(\\n        uint256 noseId,\\n        uint256 bodyId,\\n        uint256 tailId\\n    ) external payable {\\n        require(\\n            assemblyStartDate != 0 && block.timestamp > assemblyStartDate,\\n            \\\"You are too early\\\"\\n        );\\n\\n        assemble(noseId, bodyId, tailId);\\n    }\\n\\n    function payForLaunch(uint256 _tokenId) external payable {\\n        require(\\n            _exists(_tokenId),\\n            \\\"ERC721: operator query for nonexistent token\\\"\\n        );\\n\\n        require(\\n            msg.value >= launchPrice,\\n            \\\"Not enough Ether to pay for the launch\\\"\\n        );\\n\\n        emit LaunchPaid(msg.sender, _tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns all the metadata of a given Rocket.\\n     */\\n    function retrieve(uint256 _tokenId)\\n        external\\n        view\\n        returns (RocketView memory)\\n    {\\n        require(\\n            _exists(_tokenId),\\n            \\\"ERC721: operator query for nonexistent token\\\"\\n        );\\n\\n        RocketComponent rocketComponent = RocketComponent(\\n            rocketComponentContract\\n        );\\n\\n        Rocket memory rocket = rockets[_tokenId];\\n\\n        RocketComponent.ComponentView memory nose = rocketComponent.retrieve(\\n            rockets[_tokenId].nose\\n        );\\n        RocketComponent.ComponentView memory body = rocketComponent.retrieve(\\n            rockets[_tokenId].body\\n        );\\n        RocketComponent.ComponentView memory tail = rocketComponent.retrieve(\\n            rockets[_tokenId].tail\\n        );\\n\\n        bool perfectRocket = nose.brand.compareStrings(body.brand) &&\\n            body.brand.compareStrings(tail.brand);\\n\\n        uint256 stickers;\\n\\n        string memory nosePath = nose.brand;\\n        if (nose.hasSticker) {\\n            nosePath = string(\\n                abi.encodePacked(nosePath, \\\"-\\\", nose.sticker, \\\"-sticker\\\")\\n            );\\n            stickers++;\\n        }\\n\\n        string memory bodyPath = body.brand;\\n        if (body.hasSticker) {\\n            bodyPath = string(\\n                abi.encodePacked(bodyPath, \\\"-\\\", body.sticker, \\\"-sticker\\\")\\n            );\\n            stickers++;\\n        }\\n\\n        string memory tailPath = tail.brand;\\n        if (tail.hasSticker) {\\n            tailPath = string(\\n                abi.encodePacked(tailPath, \\\"-\\\", tail.sticker, \\\"-sticker\\\")\\n            );\\n            stickers++;\\n        }\\n\\n        return\\n            RocketView(\\n                _tokenId,\\n                getRocketName(_tokenId),\\n                buildSerialNumber(_tokenId),\\n                rocket.gpsCoordinates,\\n                rocket.recoveryStatus,\\n                rocket.physicalImage,\\n                rocket.launchVideo,\\n                perfectRocket ? \\\"perfect\\\" : \\\"franken\\\",\\n                string(\\n                    abi.encodePacked(\\n                        ipfsBaseURI,\\n                        ipfsRocketFolder,\\n                        string(\\n                            abi.encodePacked(\\n                                nosePath,\\n                                \\\"-\\\",\\n                                bodyPath,\\n                                \\\"-\\\",\\n                                tailPath\\n                            )\\n                        ).toSlug(),\\n                        \\\".png\\\"\\n                    )\\n                ),\\n                rocket.assemblyDate,\\n                rocket.launchDate,\\n                stickers,\\n                _tokenId % 5 == 0, // Every fifth rocket is payload eligible\\n                nose,\\n                body,\\n                tail\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns the base URI for the tokens API.\\n     */\\n    function baseTokenURI() external view returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    /**\\n     * @dev Returns the base URI for IPFS.\\n     */\\n    function getIpfsBaseURI() external view returns (string memory) {\\n        return ipfsBaseURI;\\n    }\\n\\n    /**\\n     * @dev Returns folder name for the rocket images in IPFS.\\n     */\\n    function getIpfsRocketFolder() external view returns (string memory) {\\n        return ipfsRocketFolder;\\n    }\\n\\n    /**\\n     * @dev Returns the total rocket supply\\n     */\\n    function totalSupply() external view virtual returns (uint256) {\\n        return rockets.length;\\n    }\\n\\n    /**\\n     * @dev Returns the launch price\\n     */\\n    function getLaunchPrice() external view returns (uint256) {\\n        return launchPrice;\\n    }\\n\\n    // Private and Internal functions\\n\\n    /**\\n     * @dev See {ERC721}.\\n     */\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    function buildSerialNumber(uint256 _tokenId)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        string memory serialNumber = \\\"2021.192.\\\";\\n        string memory tokenIdStr = _tokenId.uint2str();\\n\\n        if (_tokenId >= 100) {\\n            serialNumber = string(abi.encodePacked(serialNumber, tokenIdStr));\\n        } else if (_tokenId >= 10) {\\n            serialNumber = string(\\n                abi.encodePacked(serialNumber, \\\"0\\\", tokenIdStr)\\n            );\\n        } else {\\n            serialNumber = string(\\n                abi.encodePacked(serialNumber, \\\"00\\\", tokenIdStr)\\n            );\\n        }\\n\\n        return serialNumber;\\n    }\\n\\n    /**\\n     * @dev returns the name of a rocket for its tokenId\\n     */\\n    function getRocketName(uint256 tokenId)\\n        private\\n        view\\n        returns (string memory)\\n    {\\n        return rocketNames[tokenId].bytes32ToString();\\n    }\\n\\n    function assemble(\\n        uint256 noseId,\\n        uint256 bodyId,\\n        uint256 tailId\\n    ) private {\\n        RocketComponent rocketComponent = RocketComponent(\\n            rocketComponentContract\\n        );\\n        rocketComponent.burn(msg.sender, noseId, bodyId, tailId);\\n\\n        rockets.push(\\n            Rocket(\\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", noseId, bodyId, tailId, block.timestamp, 0)\\n        );\\n\\n        _mint(msg.sender, rockets.length - 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/nahuel/nftstudios/rocket-factory/rocket-factory-contracts/contracts/Utils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary StringUtils {\\n    /**\\n     * @dev Checks if the given strings are equal.\\n     */\\n    function compareStrings(string memory a, string memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return (keccak256(abi.encodePacked((a))) ==\\n            keccak256(abi.encodePacked((b))));\\n    }\\n\\n    /**\\n     * @dev Converts a given string to its slug representation. replacing spaces with hyphens and lowercasing the given string.\\n     */\\n    function toSlug(string memory _base) internal pure returns (string memory) {\\n        bytes memory _baseBytes = bytes(_base);\\n        uint256 removedChars;\\n\\n        for (uint256 i = 0; i < _baseBytes.length; i++) {\\n            _baseBytes[i] = _lower(_baseBytes[i]);\\n\\n            // replace spaces with hyphens\\n            if (_baseBytes[i] == 0x20 || _baseBytes[i] == \\\"'\\\") {\\n                _baseBytes[i] = 0x2D;\\n            } else if (_baseBytes[i] == 0xC3) {\\n                // Special Character\\n                _baseBytes[i] = \\\"\\\";\\n                removedChars++;\\n            } else if (_baseBytes[i] == 0xA8) {\\n                // è to e\\n                _baseBytes[i] = \\\"e\\\";\\n            }\\n        }\\n\\n        if (removedChars == 0) {\\n            return string(_baseBytes);\\n        }\\n\\n        bytes memory _modifiedBytes = new bytes(\\n            _baseBytes.length - removedChars\\n        );\\n        uint256 index;\\n        for (uint256 i; i < _baseBytes.length; i++) {\\n            if (_baseBytes[i] == \\\"\\\") {\\n                continue;\\n            }\\n\\n            _modifiedBytes[index] = _baseBytes[i];\\n            index++;\\n        }\\n\\n        return string(_modifiedBytes);\\n    }\\n\\n    /**\\n     * @dev Converts a given character to lowercase, if it's between the A-Z range.\\n     */\\n    function _lower(bytes1 _b1) private pure returns (bytes1) {\\n        if (_b1 >= 0x41 && _b1 <= 0x5A) {\\n            return bytes1(uint8(_b1) + 32);\\n        }\\n\\n        return _b1;\\n    }\\n}\\n\\nlibrary UintUtils {\\n    /**\\n     * @dev converts and uint256 to string\\n     */\\n    function uint2str(uint256 _i)\\n        internal\\n        pure\\n        returns (string memory _uintAsString)\\n    {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n\\n        uint256 j = _i;\\n        uint256 len;\\n\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n\\n        return string(bstr);\\n    }\\n}\\n\\nlibrary Bytes32Utils {\\n    function bytes32ToString(bytes32 _bytes32)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        uint8 i = 0;\\n        while (i < 32 && _bytes32[i] != 0) {\\n            i++;\\n        }\\n        bytes memory bytesArray = new bytes(i);\\n        for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\\n            bytesArray[i] = _bytes32[i];\\n        }\\n        return string(bytesArray);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"./extensions/IERC721Enumerable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping (uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping (address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC721).interfaceId\\n            || interfaceId == type(IERC721Metadata).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0\\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n            : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\\n     * in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"LaunchPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_rocketNames\",\"type\":\"bytes32[]\"}],\"name\":\"addNames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"noseId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bodyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tailId\",\"type\":\"uint256\"}],\"name\":\"devMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIpfsBaseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIpfsRocketFolder\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLaunchPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"noseId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bodyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tailId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"payForLaunch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"retrieve\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"serialNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"gpsCoordinates\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"recoveryStatus\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"physicalImage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"launchVideo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rocketType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageLink\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"assemblyDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"launchDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stickers\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"payloadEligible\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"componentType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"brand\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageLink\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"hasSticker\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"sticker\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"serialNumber\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"edition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"internalType\":\"struct RocketComponent.ComponentView\",\"name\":\"nose\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"componentType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"brand\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageLink\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"hasSticker\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"sticker\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"serialNumber\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"edition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"internalType\":\"struct RocketComponent.ComponentView\",\"name\":\"body\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"componentType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"brand\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageLink\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"hasSticker\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"sticker\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"serialNumber\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"edition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"internalType\":\"struct RocketComponent.ComponentView\",\"name\":\"tail\",\"type\":\"tuple\"}],\"internalType\":\"struct RocketFactory.RocketView\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"setAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assemblyStartDate\",\"type\":\"uint256\"}],\"name\":\"setAssemblyStartDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setBaseTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ipfsBaseURI\",\"type\":\"string\"}],\"name\":\"setIpfsBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ipfsRocketFolder\",\"type\":\"string\"}],\"name\":\"setIpfsRocketFolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"launchDate\",\"type\":\"uint256\"}],\"name\":\"setLaunchDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_launchPrice\",\"type\":\"uint256\"}],\"name\":\"setLaunchPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"launchVideo\",\"type\":\"string\"}],\"name\":\"setLaunchVideo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"physicalImage\",\"type\":\"string\"}],\"name\":\"setPhysicalImage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"recoveryStatus\",\"type\":\"string\"}],\"name\":\"setRecoveryStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setRocketComponentContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"gpsCoordinates\",\"type\":\"string\"}],\"name\":\"setRocketGPSCoordinates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"gpsCoordinates\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"recoveryStatus\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"physicalImage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"launchVideo\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"launchDate\",\"type\":\"uint256\"}],\"name\":\"setRocketMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RocketFactory","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}