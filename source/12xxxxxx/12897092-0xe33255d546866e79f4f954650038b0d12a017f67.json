{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/D/Projects/tosdis_contracts/contracts/IDOCreator.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\r\\nimport \\\"./IDOPool.sol\\\";\\r\\nimport \\\"./interfaces/IidoMaster.sol\\\";\\r\\n\\r\\ncontract IDOCreator is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for ERC20Burnable;\\r\\n    using SafeERC20 for ERC20;\\r\\n\\r\\n    IidoMaster  public  idoMaster;\\r\\n    ITierSystem  public  tierSystem;\\r\\n    \\r\\n    constructor(\\r\\n        IidoMaster _idoMaster,\\r\\n        ITierSystem _tierSystem\\r\\n    ) public {\\r\\n        idoMaster = _idoMaster;\\r\\n        tierSystem = _tierSystem;\\r\\n    }\\r\\n\\r\\n    function createIDO(\\r\\n        uint256 _tokenPrice,\\r\\n        ERC20 _rewardToken,\\r\\n        uint256 _startTimestamp,\\r\\n        uint256 _finishTimestamp,\\r\\n        uint256 _startClaimTimestamp,\\r\\n        uint256 _minEthPayment,\\r\\n        uint256 _maxEthPayment,\\r\\n        uint256 _maxDistributedTokenAmount,\\r\\n        bool _hasWhitelisting,\\r\\n        bool _enableTierSystem\\r\\n    ) external returns (address){\\r\\n        \\r\\n        if(idoMaster.feeAmount() > 0){\\r\\n            uint256 burnAmount = idoMaster.feeAmount().mul(idoMaster.burnPercent()).div(idoMaster.divider());\\r\\n            idoMaster.feeToken().safeTransferFrom(\\r\\n                msg.sender,\\r\\n                idoMaster.feeWallet(),\\r\\n                idoMaster.feeAmount().sub(burnAmount)\\r\\n            );\\r\\n           \\r\\n            if(burnAmount > 0) {\\r\\n                idoMaster.feeToken().safeTransferFrom(msg.sender, address(this), burnAmount);\\r\\n                idoMaster.feeToken().burn(burnAmount);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        IDOPool idoPool =\\r\\n            new IDOPool(\\r\\n                idoMaster,\\r\\n                idoMaster.feeFundsPercent(),\\r\\n                _tokenPrice,\\r\\n                _rewardToken,\\r\\n                _startTimestamp,\\r\\n                _finishTimestamp,\\r\\n                _startClaimTimestamp,\\r\\n                _minEthPayment,\\r\\n                _maxEthPayment,\\r\\n                _maxDistributedTokenAmount,\\r\\n                _hasWhitelisting,\\r\\n                _enableTierSystem,\\r\\n                tierSystem\\r\\n            );\\r\\n\\r\\n        idoPool.transferOwnership(msg.sender);\\r\\n\\r\\n        _rewardToken.safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(idoPool),\\r\\n            _maxDistributedTokenAmount\\r\\n        );\\r\\n\\r\\n        require(_rewardToken.balanceOf(address(idoPool)) == _maxDistributedTokenAmount,  \\\"Unsupported token\\\");\\r\\n\\r\\n        idoMaster.registrateIDO(address(idoPool),   \\r\\n                                _tokenPrice,\\r\\n                                address(0),\\r\\n                                address(_rewardToken),\\r\\n                                _startTimestamp,\\r\\n                                _finishTimestamp,\\r\\n                                _startClaimTimestamp,\\r\\n                                _minEthPayment,\\r\\n                                _maxEthPayment,\\r\\n                                _maxDistributedTokenAmount);\\r\\n\\r\\n         return address(idoPool);\\r\\n    }\\r\\n\\r\\n    function isContract(address _addr) private view returns (bool) {\\r\\n        uint32 size;\\r\\n        assembly {\\r\\n            size := extcodesize(_addr)\\r\\n        }\\r\\n        return (size > 0);\\r\\n    }\\r\\n\\r\\n    function setTierSystem(ITierSystem _tierSystem) external onlyOwner {\\r\\n        tierSystem = _tierSystem;\\r\\n    }\\r\\n\\r\\n    // ============ Version Control ============\\r\\n    function version() external pure returns (uint256) {\\r\\n        return 101; // 1.0.1\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/D/Projects/tosdis_contracts/contracts/IDOPool.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"./Pausable.sol\\\";\\r\\nimport \\\"./Whitelist.sol\\\";\\r\\nimport \\\"./interfaces/IidoMaster.sol\\\";\\r\\nimport \\\"./interfaces/ITierSystem.sol\\\";\\r\\n\\r\\n contract IDOPool is Ownable, Pausable, Whitelist, ReentrancyGuard  {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for ERC20;\\r\\n\\r\\n    uint256 public tokenPrice;\\r\\n    ERC20 public rewardToken;\\r\\n    uint256 public decimals;\\r\\n    uint256 public startTimestamp;\\r\\n    uint256 public finishTimestamp;\\r\\n    uint256 public startClaimTimestamp;\\r\\n    uint256 public minEthPayment;\\r\\n    uint256 public maxEthPayment;\\r\\n    uint256 public maxDistributedTokenAmount;\\r\\n    uint256 public tokensForDistribution;\\r\\n    uint256 public distributedTokens;\\r\\n\\r\\n\\r\\n    ITierSystem  public  tierSystem;\\r\\n    IidoMaster  public  idoMaster;\\r\\n    uint256 public feeFundsPercent;\\r\\n    bool public enableTierSystem;\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint debt;\\r\\n        uint total;\\r\\n        uint totalInvestedETH;\\r\\n    }\\r\\n\\r\\n    mapping(address => UserInfo) public userInfo;\\r\\n\\r\\n    event TokensDebt(\\r\\n        address indexed holder,\\r\\n        uint256 ethAmount,\\r\\n        uint256 tokenAmount\\r\\n    );\\r\\n    \\r\\n    event TokensWithdrawn(address indexed holder, uint256 amount);\\r\\n    event HasWhitelistingUpdated(bool newValue);\\r\\n    event EnableTierSystemUpdated(bool newValue);\\r\\n    event FundsWithdrawn(uint256 amount);\\r\\n    event FundsFeeWithdrawn(uint256 amount);\\r\\n    event NotSoldWithdrawn(uint256 amount);\\r\\n\\r\\n    uint256 public vestingPercent;\\r\\n    uint256 public vestingStart;\\r\\n    uint256 public vestingInterval;\\r\\n    uint256 public vestingDuration;\\r\\n\\r\\n    event VestingUpdated(uint256 _vestingPercent,\\r\\n                    uint256 _vestingStart,\\r\\n                    uint256 _vestingInterval,\\r\\n                    uint256 _vestingDuration);\\r\\n    event VestingCreated(address indexed holder, uint256 amount);\\r\\n    event VestingReleased(uint256 amount);\\r\\n\\r\\n    struct Vesting {\\r\\n        uint256 balance;\\r\\n        uint256 released;\\r\\n    }\\r\\n\\r\\n    mapping (address => Vesting) private _vestings;\\r\\n\\r\\n    constructor(\\r\\n        IidoMaster _idoMaster,\\r\\n        uint256 _feeFundsPercent, \\r\\n        uint256 _tokenPrice,\\r\\n        ERC20 _rewardToken,\\r\\n        uint256 _startTimestamp,\\r\\n        uint256 _finishTimestamp,\\r\\n        uint256 _startClaimTimestamp,\\r\\n        uint256 _minEthPayment,\\r\\n        uint256 _maxEthPayment,\\r\\n        uint256 _maxDistributedTokenAmount,\\r\\n        bool _hasWhitelisting,\\r\\n        bool _enableTierSystem,\\r\\n        ITierSystem _tierSystem\\r\\n        \\r\\n    ) public Whitelist(_hasWhitelisting) {\\r\\n        idoMaster = _idoMaster;\\r\\n        feeFundsPercent = _feeFundsPercent;\\r\\n        tokenPrice = _tokenPrice;\\r\\n        rewardToken = _rewardToken;\\r\\n        decimals = rewardToken.decimals();\\r\\n\\r\\n        require( _startTimestamp < _finishTimestamp,  \\\"Start must be less than finish\\\");\\r\\n        require( _finishTimestamp > now, \\\"Finish must be more than now\\\");\\r\\n        \\r\\n        startTimestamp = _startTimestamp;\\r\\n        finishTimestamp = _finishTimestamp;\\r\\n        startClaimTimestamp = _startClaimTimestamp;\\r\\n        minEthPayment = _minEthPayment;\\r\\n        maxEthPayment = _maxEthPayment;\\r\\n        maxDistributedTokenAmount = _maxDistributedTokenAmount;\\r\\n        enableTierSystem = _enableTierSystem;\\r\\n        tierSystem = _tierSystem;\\r\\n    }\\r\\n\\r\\n\\r\\n  function setVesting(uint256 _vestingPercent,\\r\\n                    uint256 _vestingStart,\\r\\n                    uint256 _vestingInterval,\\r\\n                    uint256 _vestingDuration) external onlyOwner {\\r\\n\\r\\n        require(now < startTimestamp, \\\"Already started\\\");\\r\\n\\r\\n        require(_vestingPercent <= 100, \\\"Vesting percent must be <= 100\\\");\\r\\n        if(_vestingPercent > 0)\\r\\n        {\\r\\n            require(_vestingInterval > 0 , \\\"interval must be greater than 0\\\");\\r\\n            require(_vestingDuration >= _vestingInterval, \\\"interval cannot be bigger than duration\\\");\\r\\n        }\\r\\n\\r\\n        vestingPercent = _vestingPercent;\\r\\n        vestingStart = _vestingStart;\\r\\n        vestingInterval = _vestingInterval;\\r\\n        vestingDuration = _vestingDuration;\\r\\n\\r\\n        emit VestingUpdated(vestingPercent,\\r\\n                            vestingStart,\\r\\n                            vestingInterval,\\r\\n                            vestingDuration);\\r\\n    }\\r\\n\\r\\n\\r\\n    function pay() payable external nonReentrant onlyWhitelisted whenNotPaused{\\r\\n        require(msg.value >= minEthPayment, \\\"Less then min amount\\\");\\r\\n        require(now >= startTimestamp, \\\"Not started\\\");\\r\\n        require(now < finishTimestamp, \\\"Ended\\\");\\r\\n        \\r\\n        uint256 tokenAmount = getTokenAmount(msg.value);\\r\\n        require(tokensForDistribution.add(tokenAmount) <= maxDistributedTokenAmount, \\\"Overfilled\\\");\\r\\n\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n\\r\\n        if(enableTierSystem){\\r\\n            require(user.totalInvestedETH.add(msg.value) <= tierSystem.getMaxEthPayment(msg.sender, maxEthPayment), \\\"More then max amount\\\");\\r\\n        }\\r\\n        else{\\r\\n            require(user.totalInvestedETH.add(msg.value) <= maxEthPayment, \\\"More then max amount\\\");\\r\\n        }\\r\\n\\r\\n        tokensForDistribution = tokensForDistribution.add(tokenAmount);\\r\\n        user.totalInvestedETH = user.totalInvestedETH.add(msg.value);\\r\\n        user.total = user.total.add(tokenAmount);\\r\\n        user.debt = user.debt.add(tokenAmount);\\r\\n        \\r\\n        emit TokensDebt(msg.sender, msg.value, tokenAmount);\\r\\n    }\\r\\n\\r\\n    function getTokenAmount(uint256 ethAmount)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return ethAmount.mul(10**decimals).div(tokenPrice);\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @dev Allows to claim tokens for the specific user.\\r\\n    /// @param _addresses Token receivers.\\r\\n    function claimFor(address[] memory _addresses) external whenNotPaused{\\r\\n         for (uint i = 0; i < _addresses.length; i++) {\\r\\n            proccessClaim(_addresses[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Allows to claim tokens for themselves.\\r\\n    function claim() external whenNotPaused{\\r\\n        proccessClaim(msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @dev Proccess the claim.\\r\\n    /// @param _receiver Token receiver.\\r\\n    function proccessClaim(\\r\\n        address _receiver\\r\\n    ) internal nonReentrant{\\r\\n        require(now > startClaimTimestamp, \\\"Distribution not started\\\");\\r\\n        UserInfo storage user = userInfo[_receiver];\\r\\n        uint256 _amount = user.debt;\\r\\n        if (_amount > 0) {\\r\\n            user.debt = 0;            \\r\\n            distributedTokens = distributedTokens.add(_amount);\\r\\n\\r\\n            if(vestingPercent > 0)\\r\\n            {   \\r\\n                uint256 vestingAmount = _amount.mul(vestingPercent).div(100);\\r\\n                createVesting(_receiver, vestingAmount);\\r\\n                _amount = _amount.sub(vestingAmount);\\r\\n            }\\r\\n\\r\\n            rewardToken.safeTransfer(_receiver, _amount);\\r\\n            emit TokensWithdrawn(_receiver,_amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setHasWhitelisting(bool value) external onlyOwner{\\r\\n        hasWhitelisting = value;\\r\\n        emit HasWhitelistingUpdated(hasWhitelisting);\\r\\n    } \\r\\n\\r\\n    function setEnableTierSystem(bool value) external onlyOwner{\\r\\n        enableTierSystem = value;\\r\\n        emit EnableTierSystemUpdated(enableTierSystem);\\r\\n    } \\r\\n\\r\\n    function setTierSystem(ITierSystem _tierSystem) external onlyOwner {    \\r\\n        tierSystem = _tierSystem;\\r\\n    }\\r\\n\\r\\n    function withdrawFunds() external onlyOwner nonReentrant{\\r\\n        if(feeFundsPercent>0){\\r\\n            uint256 feeAmount = address(this).balance.mul(feeFundsPercent).div(100);\\r\\n            idoMaster.feeWallet().transfer(feeAmount); /* Fee Address */\\r\\n            emit FundsFeeWithdrawn(feeAmount);\\r\\n        }\\r\\n        uint256 amount = address(this).balance;\\r\\n        msg.sender.transfer(amount);\\r\\n        emit FundsWithdrawn(amount);\\r\\n    } \\r\\n     \\r\\n\\r\\n    function withdrawNotSoldTokens() external onlyOwner nonReentrant{\\r\\n        require(now > finishTimestamp, \\\"Allow after finish time\\\");\\r\\n        uint256 amount = rewardToken.balanceOf(address(this)).add(distributedTokens).sub(tokensForDistribution);\\r\\n        rewardToken.safeTransfer(msg.sender, amount);\\r\\n        emit NotSoldWithdrawn(amount);\\r\\n    }\\r\\n\\r\\n    function getVesting(address beneficiary) public view returns (uint256, uint256) {\\r\\n        Vesting memory v = _vestings[beneficiary];\\r\\n        return (v.balance, v.released);\\r\\n    }\\r\\n\\r\\n    function createVesting(\\r\\n        address beneficiary,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        Vesting storage vest = _vestings[beneficiary];\\r\\n        require(vest.balance == 0, \\\"Vesting already created\\\");\\r\\n\\r\\n        vest.balance = amount;\\r\\n\\r\\n        emit VestingCreated(beneficiary, amount);\\r\\n    }\\r\\n\\r\\n     function release(address beneficiary) external nonReentrant {\\r\\n        uint256 unreleased = releasableAmount(beneficiary);\\r\\n        require(unreleased > 0, \\\"Nothing to release\\\");\\r\\n\\r\\n        Vesting storage vest = _vestings[beneficiary];\\r\\n\\r\\n        vest.released = vest.released.add(unreleased);\\r\\n        vest.balance = vest.balance.sub(unreleased);\\r\\n\\r\\n        rewardToken.safeTransfer(beneficiary, unreleased);\\r\\n        emit VestingReleased(unreleased);\\r\\n    }\\r\\n\\r\\n    function releasableAmount(address beneficiary) public view returns (uint256) {\\r\\n        return vestedAmount(beneficiary).sub(_vestings[beneficiary].released);\\r\\n    }\\r\\n\\r\\n    function vestedAmount(address beneficiary) public view returns (uint256) {\\r\\n        if (block.timestamp < vestingStart) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        Vesting memory vest = _vestings[beneficiary];\\r\\n        uint256 currentBalance = vest.balance;\\r\\n        uint256 totalBalance = currentBalance.add(vest.released);\\r\\n\\r\\n        if (block.timestamp >= vestingStart.add(vestingDuration)) {\\r\\n            return totalBalance;\\r\\n        } else {\\r\\n            uint256 numberOfInvervals = block.timestamp.sub(vestingStart).div(vestingInterval);\\r\\n            uint256 totalIntervals = vestingDuration.div(vestingInterval);\\r\\n            return totalBalance.mul(numberOfInvervals).div(totalIntervals);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ============ Version Control ============\\r\\n    function version() external pure returns (uint256) {\\r\\n        return 101; // 1.0.1\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Projects/tosdis_contracts/contracts/Pausable.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Pausable\\r\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\r\\n */\\r\\ncontract Pausable is Ownable {\\r\\n    event Pause();\\r\\n    event Unpause();\\r\\n\\r\\n    bool public paused = false;\\r\\n\\r\\n\\r\\n    /**\\r\\n    * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n    */\\r\\n    modifier whenNotPaused() {\\r\\n        require(!paused, \\\"Has to be unpaused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Modifier to make a function callable only when the contract is paused.\\r\\n    */\\r\\n    modifier whenPaused() {\\r\\n        require(paused, \\\"Has to be paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev called by the owner to pause, triggers stopped state\\r\\n    */\\r\\n    function pause() onlyOwner whenNotPaused public {\\r\\n        paused = true;\\r\\n        emit Pause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev called by the owner to unpause, returns to normal state\\r\\n    */\\r\\n    function unpause() onlyOwner whenPaused public {\\r\\n        paused = false;\\r\\n        emit Unpause();\\r\\n    }\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"/D/Projects/tosdis_contracts/contracts/Whitelist.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract Whitelist is Ownable {\\r\\n\\r\\n    mapping(address => bool) public whitelist;\\r\\n    //Gas optimization\\r\\n    // address[] public whitelistedAddresses;\\r\\n    bool public hasWhitelisting = false;\\r\\n\\r\\n    event AddedToWhitelist(address account);\\r\\n    event RemovedFromWhitelist(address account);\\r\\n\\r\\n    modifier onlyWhitelisted() {\\r\\n        if(hasWhitelisting){\\r\\n            require(isWhitelisted(msg.sender));\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    constructor (bool _hasWhitelisting) public{\\r\\n        hasWhitelisting = _hasWhitelisting;\\r\\n    }\\r\\n\\r\\n    function add(address[] memory _addresses) public onlyOwner {\\r\\n        for (uint i = 0; i < _addresses.length; i++) {\\r\\n            // require(whitelist[_addresses[i]] != true);\\r\\n            whitelist[_addresses[i]] = true;\\r\\n            // whitelistedAddresses.push(_addresses[i]);\\r\\n            emit AddedToWhitelist(_addresses[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function remove(address[] memory _addresses) public onlyOwner {\\r\\n        for (uint i = 0; i < _addresses.length; i++) {\\r\\n            address uAddress = _addresses[i];\\r\\n            if(whitelist[uAddress]){\\r\\n                whitelist[uAddress] = false;\\r\\n                emit RemovedFromWhitelist(uAddress);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // function getWhitelistedAddresses() public view returns(address[] memory) {\\r\\n    //     return whitelistedAddresses;\\r\\n    // } \\r\\n\\r\\n    function isWhitelisted(address _address) public view returns(bool) {\\r\\n        return whitelist[_address];\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/D/Projects/tosdis_contracts/contracts/interfaces/ITierSystem.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\r\\ninterface ITierSystem {\\r\\n    \\r\\n    // function setTier(uint256 _vipDisAmount, uint256 _vipPercent, \\r\\n    //                  uint256 _holdersDisAmount, uint256 _holdersPercent, \\r\\n    //                  uint256 _publicDisAmount, uint256 _publicPercent) public;\\r\\n\\r\\n    // function addBalances(address[] memory _addresses, uint256[] memory _balances) external;\\r\\n\\r\\n    function getMaxEthPayment(address user, uint256 maxEthPayment)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n}\"\r\n    },\r\n    \"/D/Projects/tosdis_contracts/contracts/interfaces/IidoMaster.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\r\\ninterface IidoMaster {\\r\\n    \\r\\n    function feeToken() external pure returns (ERC20Burnable);\\r\\n    function feeWallet() external pure returns (address payable);\\r\\n\\r\\n    function feeAmount() external pure returns (uint256);\\r\\n    function burnPercent() external pure returns (uint256);\\r\\n    function divider() external pure returns (uint256);\\r\\n    function feeFundsPercent() external pure returns (uint256);\\r\\n\\r\\n    function registrateIDO(\\r\\n        address _poolAddress,\\r\\n        uint256 _tokenPrice,\\r\\n        address _payableToken,\\r\\n        address _rewardToken,\\r\\n        uint256 _startTimestamp,\\r\\n        uint256 _finishTimestamp,\\r\\n        uint256 _startClaimTimestamp,\\r\\n        uint256 _minEthPayment,\\r\\n        uint256 _maxEthPayment,\\r\\n        uint256 _maxDistributedTokenAmount\\r\\n    ) external;\\r\\n\\r\\n    // function getMaxEthPayment(address user, uint256 maxEthPayment)\\r\\n    //     external\\r\\n    //     view\\r\\n    //     returns (uint256);\\r\\n\\r\\n    // function getFullDisBalance(address user)\\r\\n    //     external\\r\\n    //     view     \\r\\n    //     returns (uint256);\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IidoMaster\",\"name\":\"_idoMaster\",\"type\":\"address\"},{\"internalType\":\"contract ITierSystem\",\"name\":\"_tierSystem\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_finishTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startClaimTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minEthPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxEthPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDistributedTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_hasWhitelisting\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_enableTierSystem\",\"type\":\"bool\"}],\"name\":\"createIDO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idoMaster\",\"outputs\":[{\"internalType\":\"contract IidoMaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITierSystem\",\"name\":\"_tierSystem\",\"type\":\"address\"}],\"name\":\"setTierSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tierSystem\",\"outputs\":[{\"internalType\":\"contract ITierSystem\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"IDOCreator","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000068f03bb6cb2cad6f3edd3e09f2bc67f7a2b0db7d000000000000000000000000bf9d94d59b2898b1773c63b537e06577345ef19d","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}