{"status":"1","message":"OK","result":[{"SourceCode":"// File: interfaces/IUniswapV2Pair.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File: interfaces/IUniswapV2Factory.sol\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// File: interfaces/IUniswapV2Router01.sol\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: interfaces/IOracleRouterV2.sol\r\n\r\n\r\n/// @title The interface for Graviton oracle router\r\n/// @notice Forwards data about crosschain locking/unlocking events to balance keepers\r\n/// @author Artemij Artamonov - <array.clean@gmail.com>\r\n/// @author Anton Davydov - <fetsorn@gmail.com>\r\ninterface IOracleRouterV2 {\r\n    /// @notice User that can grant access permissions and perform privileged actions\r\n    function owner() external view returns (address);\r\n\r\n    /// @notice Transfers ownership of the contract to a new account (`_owner`).\r\n    /// @dev Can only be called by the current owner.\r\n    function setOwner(address _owner) external;\r\n\r\n    /// @notice Look up if `user` can route data to balance keepers\r\n    function canRoute(address user) external view returns (bool);\r\n\r\n    /// @notice Sets the permission to route data to balance keepers\r\n    /// @dev Can only be called by the current owner.\r\n    function setCanRoute(address parser, bool _canRoute) external;\r\n\r\n    /// @notice Routes value to balance keepers according to the type of event associated with topic0\r\n    /// @param uuid Unique identifier of the routed data\r\n    /// @param chain Type of blockchain associated with the routed event, i.e. \"EVM\"\r\n    /// @param emiter The blockchain-specific address where the data event originated\r\n    /// @param topic0 Unique identifier of the event\r\n    /// @param token The blockchain-specific token address\r\n    /// @param sender The blockchain-specific address that sent the tokens\r\n    /// @param receiver The blockchain-specific address to receive the tokens\r\n    /// @dev receiver is always same as sender, kept for compatibility\r\n    /// @param amount The amount of tokens\r\n    function routeValue(\r\n        bytes16 uuid,\r\n        string memory chain,\r\n        bytes memory emiter,\r\n        bytes32 topic0,\r\n        bytes memory token,\r\n        bytes memory sender,\r\n        bytes memory receiver,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    /// @notice Event emitted when the owner changes via #setOwner`.\r\n    /// @param ownerOld The account that was the previous owner of the contract\r\n    /// @param ownerNew The account that became the owner of the contract\r\n    event SetOwner(address indexed ownerOld, address indexed ownerNew);\r\n\r\n    /// @notice Event emitted when the `parser` permission is updated via `#setCanRoute`\r\n    /// @param owner The owner account at the time of change\r\n    /// @param parser The account whose permission to route data was updated\r\n    /// @param newBool Updated permission\r\n    event SetCanRoute(\r\n        address indexed owner,\r\n        address indexed parser,\r\n        bool indexed newBool\r\n    );\r\n\r\n    /// @notice Event emitted when data is routed\r\n    /// @param uuid Unique identifier of the routed data\r\n    /// @param chain Type of blockchain associated with the routed event, i.e. \"EVM\"\r\n    /// @param emiter The blockchain-specific address where the data event originated\r\n    /// @param token The blockchain-specific token address\r\n    /// @param sender The blockchain-specific address that sent the tokens\r\n    /// @param receiver The blockchain-specific address to receive the tokens\r\n    /// @dev receiver is always same as sender, kept for compatibility\r\n    /// @param amount The amount of tokens\r\n    event RouteValue(\r\n        bytes16 uuid,\r\n        string chain,\r\n        bytes emiter,\r\n        bytes indexed token,\r\n        bytes indexed sender,\r\n        bytes indexed receiver,\r\n        uint256 amount\r\n    );\r\n}\r\n\r\n// File: interfaces/IWETH.sol\r\n\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint amount) external;\r\n\r\n    function transfer(address to, uint amount) external returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: interfaces/IERC20.sol\r\n\r\n\r\ninterface IERC20 {\r\n    function mint(address _to, uint256 _value) external;\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        external\r\n        returns (bool);\r\n\r\n    function transfer(address _to, uint256 _value)\r\n        external\r\n        returns (bool success);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) external returns (bool success);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n}\r\n\r\n// File: interfaces/IRelay.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title The interface for Graviton relay contract\r\n/// @notice Trades native tokens for gton to start crosschain swap,\r\n/// trades gton for native tokens to compelete crosschain swap\r\n/// @author Artemij Artamonov - <array.clean@gmail.com>\r\n/// @author Anton Davydov - <fetsorn@gmail.com>\r\ninterface IRelay is IOracleRouterV2 {\r\n    /// @notice ERC20 wrapped version of the native token\r\n    function wnative() external view returns (IWETH);\r\n\r\n    /// @notice UniswapV2 router\r\n    function router() external view returns (IUniswapV2Router01);\r\n\r\n    /// @notice relay token\r\n    function gton() external view returns (IERC20);\r\n\r\n    /// @notice chains for relay swaps to and from\r\n    function isAllowedChain(string calldata chain) external view returns (bool);\r\n\r\n    /// @notice allow/forbid chain to relay swap\r\n    /// @param chain blockchain name, e.g. 'FTM', 'PLG'\r\n    /// @param newBool new permission for the chain\r\n    function setIsAllowedChain(string calldata chain, bool newBool) external;\r\n\r\n    /// @notice minimum fee for a destination\r\n    function feeMin(string calldata destination) external view returns (uint256);\r\n\r\n    /// @notice percentage fee for a destination\r\n    function feePercent(string calldata destination) external view returns (uint256);\r\n\r\n    /// @notice Sets fees for a destination\r\n    /// @param _feeMin Minimum fee\r\n    /// @param _feePercent Percentage fee\r\n    function setFees(string calldata destination, uint256 _feeMin, uint256 _feePercent) external;\r\n\r\n    /// @notice minimum amount of native tokens allowed to swap\r\n    function lowerLimit(string calldata destination) external view returns (uint256);\r\n\r\n    /// @notice maximum amount of native tokens allowed to swap\r\n    function upperLimit(string calldata destination) external view returns (uint256);\r\n\r\n    /// @notice Sets limits for a destination\r\n    /// @param _lowerLimit Minimum amount of native tokens allowed to swap\r\n    /// @param _upperLimit Maximum amount of native tokens allowed to swap\r\n    function setLimits(string calldata destination, uint256 _lowerLimit, uint256 _upperLimit) external;\r\n\r\n    /// @notice topic0 of the event associated with initiating a relay transfer\r\n    function relayTopic() external view returns (bytes32);\r\n\r\n    /// @notice Sets topic0 of the event associated with initiating a relay transfer\r\n    function setRelayTopic(bytes32 _relayTopic) external;\r\n\r\n    /// @notice Trades native tokens for relay, takes fees,\r\n    /// emits event to start crosschain transfer\r\n    /// @param destination The blockchain that will receive native tokens\r\n    /// @param receiver The account that will receive native tokens\r\n    function lock(string calldata destination, bytes calldata receiver) external payable;\r\n\r\n    /// @notice Transfers locked ERC20 tokens to owner\r\n    function reclaimERC20(IERC20 token, uint256 amount) external;\r\n\r\n    /// @notice Transfers locked native tokens to owner\r\n    function reclaimNative(uint256 amount) external;\r\n\r\n    /// @notice Event emitted when native tokens equivalent to\r\n    /// `amount` of relay tokens are locked via `#lock`\r\n    /// @dev Oracles read this event and unlock\r\n    /// equivalent amount of native tokens on the destination chain\r\n    /// @param destinationHash The blockchain that will receive native tokens\r\n    /// @dev indexed string returns keccak256 of the value\r\n    /// @param receiverHash The account that will receive native tokens\r\n    /// @dev indexed bytes returns keccak256 of the value\r\n    /// @param destination The blockchain that will receive native tokens\r\n    /// @param receiver The account that will receive native tokens\r\n    /// @param amount The amount of relay tokens equivalent to the\r\n    /// amount of locked native tokens\r\n    event Lock(\r\n        string indexed destinationHash,\r\n        bytes indexed receiverHash,\r\n        string destination,\r\n        bytes receiver,\r\n        uint256 amount\r\n    );\r\n\r\n    /// @notice Event emitted when fees are calculated\r\n    /// @param amountIn Native tokens sent to dex\r\n    /// @param amountOut Relay tokens received on dex\r\n    /// @param feeMin Minimum fee\r\n    /// @param feePercent Percentage for the fee in %\r\n    /// @dev precision 3 decimals\r\n    /// @param fee Percentage fee in relay tokens\r\n    /// @param amountMinusFee Relay tokens minus fees\r\n    event CalculateFee(\r\n        uint256 amountIn,\r\n        uint256 amountOut,\r\n        uint256 feeMin,\r\n        uint256 feePercent,\r\n        uint256 fee,\r\n        uint256 amountMinusFee\r\n    );\r\n\r\n    /// @notice Event emitted when the relay tokens are traded for\r\n    /// `amount0` of gton swaped for native tokens via '#routeValue'\r\n    /// `amount1` of native tokens sent to the `user` via '#routeValue'\r\n    event DeliverRelay(address user, uint256 amount0, uint256 amount1);\r\n\r\n    /// @notice Event emitted when the RelayTopic is set via '#setRelayTopic'\r\n    /// @param topicOld The previous topic\r\n    /// @param topicNew The new topic\r\n    event SetRelayTopic(bytes32 indexed topicOld, bytes32 indexed topicNew);\r\n\r\n    /// @notice Event emitted when the wallet is set via '#setWallet'\r\n    /// @param walletOld The previous wallet address\r\n    /// @param walletNew The new wallet address\r\n    event SetWallet(address indexed walletOld, address indexed walletNew);\r\n\r\n    /// @notice Event emitted when permission for a chain is set via '#setIsAllowedChain'\r\n    /// @param chain Name of blockchain whose permission is changed, i.e. \"FTM\", \"PLG\"\r\n    /// @param newBool Updated permission\r\n    event SetIsAllowedChain(string chain, bool newBool);\r\n\r\n    /// @notice Event emitted when fees are set via '#setFees'\r\n    /// @param _feeMin Minimum fee\r\n    /// @param _feePercent Percentage fee\r\n    event SetFees(string destination, uint256 _feeMin, uint256 _feePercent);\r\n\r\n    /// @notice Event emitted when limits are set via '#setLimits'\r\n    /// @param _lowerLimit Minimum fee\r\n    /// @param _upperLimit Percentage fee\r\n    event SetLimits(string destination, uint256 _lowerLimit, uint256 _upperLimit);\r\n}\r\n\r\n// File: Relay.sol\r\n\r\n\r\n\r\n/// @title Relay\r\n/// @author Artemij Artamonov - <array.clean@gmail.com>\r\n/// @author Anton Davydov - <fetsorn@gmail.com>\r\ncontract Relay is IRelay {\r\n\r\n    /// @inheritdoc IOracleRouterV2\r\n    address public override owner;\r\n\r\n    modifier isOwner() {\r\n        require(msg.sender == owner, \"ACW\");\r\n        _;\r\n    }\r\n\r\n    /// @inheritdoc IRelay\r\n    IWETH public override wnative;\r\n    /// @inheritdoc IRelay\r\n    IUniswapV2Router01 public override router;\r\n    /// @inheritdoc IRelay\r\n    IERC20 public override gton;\r\n\r\n    /// @inheritdoc IRelay\r\n    mapping (string => uint256) public override feeMin;\r\n    /// @inheritdoc IRelay\r\n    /// @dev 30000 = 30%, 200 = 0.2%, 1 = 0.001%\r\n    mapping (string => uint256) public override feePercent;\r\n\r\n    /// @inheritdoc IRelay\r\n    mapping(string => uint256) public override lowerLimit;\r\n\r\n    /// @inheritdoc IRelay\r\n    mapping(string => uint256) public override upperLimit;\r\n\r\n    /// @inheritdoc IRelay\r\n    bytes32 public override relayTopic;\r\n\r\n    /// @inheritdoc IOracleRouterV2\r\n    mapping(address => bool) public override canRoute;\r\n\r\n    /// @inheritdoc IRelay\r\n    mapping(string => bool) public override isAllowedChain;\r\n\r\n    receive() external payable {\r\n        // only accept ETH via fallback from the WETH contract\r\n        assert(msg.sender == address(wnative));\r\n    }\r\n\r\n    constructor (\r\n        IWETH _wnative,\r\n        IUniswapV2Router01 _router,\r\n        IERC20 _gton,\r\n        bytes32 _relayTopic,\r\n        string[] memory allowedChains,\r\n        uint[2][] memory fees,\r\n        uint[2][] memory limits\r\n    ) {\r\n        owner = msg.sender;\r\n        wnative = _wnative;\r\n        router = _router;\r\n        gton = _gton;\r\n        relayTopic = _relayTopic;\r\n        for (uint256 i = 0; i < allowedChains.length; i++) {\r\n            isAllowedChain[allowedChains[i]] = true;\r\n            feeMin[allowedChains[i]] = fees[i][0];\r\n            feePercent[allowedChains[i]] = fees[i][1];\r\n            lowerLimit[allowedChains[i]] = limits[i][0];\r\n            upperLimit[allowedChains[i]] = limits[i][1];\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IOracleRouterV2\r\n    function setOwner(address _owner) external override isOwner {\r\n        address ownerOld = owner;\r\n        owner = _owner;\r\n        emit SetOwner(ownerOld, _owner);\r\n    }\r\n\r\n    /// @inheritdoc IRelay\r\n    function setIsAllowedChain(string calldata chain, bool newBool)\r\n        external\r\n        override\r\n        isOwner\r\n    {\r\n        isAllowedChain[chain] = newBool;\r\n        emit SetIsAllowedChain(chain, newBool);\r\n    }\r\n\r\n    /// @inheritdoc IRelay\r\n    function setFees(string calldata destination, uint256 _feeMin, uint256 _feePercent) external override {\r\n        feeMin[destination] = _feeMin;\r\n        feePercent[destination] = _feePercent;\r\n        emit SetFees(destination, _feeMin, _feePercent);\r\n    }\r\n\r\n    /// @inheritdoc IRelay\r\n    function setLimits(string calldata destination, uint256 _lowerLimit, uint256 _upperLimit) external override {\r\n        lowerLimit[destination] = _lowerLimit;\r\n        upperLimit[destination] = _upperLimit;\r\n        emit SetLimits(destination, _lowerLimit, _upperLimit);\r\n    }\r\n\r\n    /// @inheritdoc IRelay\r\n    function lock(string calldata destination, bytes calldata receiver) external payable override {\r\n        require(isAllowedChain[destination], \"R1\");\r\n        require(msg.value > lowerLimit[destination], \"R2\");\r\n        require(msg.value < upperLimit[destination], \"R3\");\r\n        // wrap native tokens\r\n        wnative.deposit{value: msg.value}();\r\n        // trade wrapped native tokens for relay tokens\r\n        wnative.approve(address(router), msg.value);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(wnative);\r\n        path[1] = address(gton);\r\n        uint256[] memory amounts = router.swapExactTokensForTokens(msg.value, 0, path, address(this), block.timestamp+3600);\r\n        // subtract fee\r\n        uint256 amountMinusFee;\r\n        uint256 fee = amounts[1] * feePercent[destination] / 100000;\r\n        if (fee > feeMin[destination]) {\r\n            amountMinusFee = amounts[1] - fee;\r\n        } else {\r\n            amountMinusFee = amounts[1] - feeMin[destination];\r\n        }\r\n        emit CalculateFee(amounts[0], amounts[1], feeMin[destination], feePercent[destination], fee, amountMinusFee);\r\n        // check that remainder after subtracting fees is larger than 0\r\n        require(amountMinusFee > 0, \"R4\");\r\n        // emit event to notify oracles and initiate crosschain transfer\r\n        emit Lock(destination, receiver, destination, receiver, amountMinusFee);\r\n    }\r\n\r\n    /// @inheritdoc IRelay\r\n    function reclaimERC20(IERC20 token, uint256 amount) external override isOwner {\r\n        token.transfer(msg.sender, amount);\r\n    }\r\n\r\n    /// @inheritdoc IRelay\r\n    function reclaimNative(uint256 amount) external override isOwner {\r\n        payable(msg.sender).transfer(amount);\r\n    }\r\n\r\n    /// @inheritdoc IOracleRouterV2\r\n    function setCanRoute(address parser, bool _canRoute)\r\n        external\r\n        override\r\n        isOwner\r\n    {\r\n        canRoute[parser] = _canRoute;\r\n        emit SetCanRoute(msg.sender, parser, canRoute[parser]);\r\n    }\r\n\r\n    /// @inheritdoc IRelay\r\n    function setRelayTopic(bytes32 _relayTopic) external override isOwner {\r\n        bytes32 topicOld = relayTopic;\r\n        relayTopic = _relayTopic;\r\n        emit SetRelayTopic(topicOld, _relayTopic);\r\n    }\r\n\r\n    function equal(bytes32 a, bytes32 b) internal pure returns (bool) {\r\n        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\r\n    }\r\n\r\n    function deserializeUint(\r\n        bytes memory b,\r\n        uint256 startPos,\r\n        uint256 len\r\n    ) internal pure returns (uint256) {\r\n        uint256 v = 0;\r\n        for (uint256 p = startPos; p < startPos + len; p++) {\r\n            v = v * 256 + uint256(uint8(b[p]));\r\n        }\r\n        return v;\r\n    }\r\n\r\n    function deserializeAddress(bytes memory b, uint256 startPos)\r\n        internal\r\n        pure\r\n        returns (address)\r\n    {\r\n        return address(uint160(deserializeUint(b, startPos, 20)));\r\n    }\r\n\r\n    /// @inheritdoc IOracleRouterV2\r\n    function routeValue(\r\n        bytes16 uuid,\r\n        string memory chain,\r\n        bytes memory emiter,\r\n        bytes32 topic0,\r\n        bytes memory token,\r\n        bytes memory sender,\r\n        bytes memory receiver,\r\n        uint256 amount\r\n    ) external override {\r\n        require(canRoute[msg.sender], \"ACR\");\r\n        if (equal(topic0, relayTopic)) {\r\n            // trade relay tokens for wrapped native tokens\r\n            gton.approve(address(router), amount);\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(gton);\r\n            path[1] = address(wnative);\r\n            uint[] memory amounts = router.swapExactTokensForTokens(amount, 0, path, address(this), block.timestamp+3600);\r\n            // unwrap to get native tokens\r\n            wnative.withdraw(amounts[1]);\r\n            // transfer native tokens to the receiver\r\n            address payable user = payable(deserializeAddress(receiver, 0));\r\n            user.transfer(amounts[1]);\r\n            emit DeliverRelay(user, amounts[0], amounts[1]);\r\n        }\r\n        emit RouteValue(uuid, chain, emiter, token, sender, receiver, amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"_wnative\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_gton\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_relayTopic\",\"type\":\"bytes32\"},{\"internalType\":\"string[]\",\"name\":\"allowedChains\",\"type\":\"string[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"fees\",\"type\":\"uint256[2][]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"limits\",\"type\":\"uint256[2][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeMin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountMinusFee\",\"type\":\"uint256\"}],\"name\":\"CalculateFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"DeliverRelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"destinationHash\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"receiverHash\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"destination\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"receiver\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"uuid\",\"type\":\"bytes16\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"chain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"emiter\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"token\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"receiver\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RouteValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"parser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newBool\",\"type\":\"bool\"}],\"name\":\"SetCanRoute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"destination\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feeMin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"SetFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"chain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newBool\",\"type\":\"bool\"}],\"name\":\"SetIsAllowedChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"destination\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lowerLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_upperLimit\",\"type\":\"uint256\"}],\"name\":\"SetLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerOld\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerNew\",\"type\":\"address\"}],\"name\":\"SetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"topicOld\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"topicNew\",\"type\":\"bytes32\"}],\"name\":\"SetRelayTopic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletOld\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletNew\",\"type\":\"address\"}],\"name\":\"SetWallet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"canRoute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"feeMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"feePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gton\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"isAllowedChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"destination\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"receiver\",\"type\":\"bytes\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"lowerLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reclaimERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reclaimNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayTopic\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"uuid\",\"type\":\"bytes16\"},{\"internalType\":\"string\",\"name\":\"chain\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"emiter\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"topic0\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"token\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"receiver\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"routeValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"parser\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_canRoute\",\"type\":\"bool\"}],\"name\":\"setCanRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"destination\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_feeMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"chain\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"newBool\",\"type\":\"bool\"}],\"name\":\"setIsAllowedChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"destination\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_lowerLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_upperLimit\",\"type\":\"uint256\"}],\"name\":\"setLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_relayTopic\",\"type\":\"bytes32\"}],\"name\":\"setRelayTopic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"upperLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wnative\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Relay","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000d9e1ce17f2641f24ae83637ab66a2cca9c378b9f00000000000000000000000001e0e2e61f554ecaaec0cc933e739ad90f24a86da4f88aed847e87bafdc18210d88464dc24f71fa4bf1b4672710c9bc876bb004400000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000004e0000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000346544d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003424e4200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003504cffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://60d5077e01c877810e5f2b6f87211c51358c2f05d9fded301db4f91fd76d9bdc"}]}