{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/NameRegistry.sol\": {\r\n      \"content\": \"pragma solidity >=0.8.0;\\n\\nimport \\\"./Base.sol\\\";\\n\\ncontract NameRegistry is Base {\\n    event OwnerTransfered(address indexed from, address owner);\\n\\n    event NameRegistered(address indexed from, string name, string url);\\n\\n    event UrlChanged(address indexed from, string url);\\n\\n    uint256 public PRICE;\\n\\n    mapping(bytes32 => address) private getAddress;\\n\\n    mapping(address => bytes32) private addressToName;\\n    mapping(address => string) private addressToUrl;\\n    address[] private registers;\\n\\n    constructor(address _config, uint256 _price) Base(_config) {\\n        require(_price > 0, \\\"price == 0\\\");\\n        PRICE = _price;\\n    }\\n\\n    function register(string memory _name, string memory _url)\\n        external\\n        payable\\n    {\\n        require(msg.value == PRICE, \\\"ether amount != price\\\");\\n        address manager = msg.sender;\\n        bytes32 name = strToB32(_name);\\n        address nameOwner = getAddress[name];\\n        require(nameOwner == address(0), \\\"name registered\\\");\\n\\n        bool newRegister = addressToName[manager] == bytes32(0);\\n\\n        addressToName[manager] = name;\\n        addressToUrl[manager] = _url;\\n        getAddress[name] = manager;\\n\\n        if (newRegister) {\\n            // new register\\n            registers.push(msg.sender);\\n            config.notify(IConfig.EventType.REG_CREATED, manager);\\n        } else {\\n            config.notify(IConfig.EventType.REG_UPDATED, manager);\\n        }\\n        emit NameRegistered(msg.sender, _name, _url);\\n    }\\n\\n    function isRegistered(address _owner) external view returns (bool) {\\n        return addressToName[_owner] != bytes32(0);\\n    }\\n\\n    function getName(address _addr) external view returns (string memory) {\\n        return b32ToStr(addressToName[_addr]);\\n    }\\n\\n    function getUrl(address _addr) external view returns (string memory) {\\n        return addressToUrl[_addr];\\n    }\\n\\n    function setUrl(string memory _url) external {\\n        require(addressToName[msg.sender] != 0x0, \\\"not registered\\\");\\n        addressToUrl[msg.sender] = _url;\\n        config.notify(IConfig.EventType.REG_UPDATED, msg.sender);\\n    }\\n\\n    function registerCount() external view returns (uint256) {\\n        return registers.length;\\n    }\\n\\n    function getRegisters() external view returns (address[] memory) {\\n        return registers;\\n    }\\n\\n    bool locker = false;\\n\\n    function transfer(address payable _to) external onlyCEO() {\\n        require(_to != address(0), \\\"Zero_Address\\\");\\n        require(!locker, \\\"locked\\\");\\n        locker = true;\\n        _to.transfer(address(this).balance);\\n        locker = false;\\n    }\\n\\n    function updateFee(uint256 _newFee) external onlyCEO() {\\n        PRICE = _newFee;\\n    }\\n\\n    function strToB32(string memory _name)\\n        public\\n        pure\\n        returns (bytes32 result)\\n    {\\n        bytes memory b = bytes(_name);\\n        require(b.length > 0 && b.length <= 32, \\\"Exceed_32_Bytes\\\");\\n\\n        assembly {\\n            result := mload(add(_name, 32))\\n        }\\n    }\\n\\n    function b32ToStr(bytes32 _bytes32) public pure returns (string memory) {\\n        uint8 i = 0;\\n        while (i < 32 && _bytes32[i] != 0) {\\n            i++;\\n        }\\n        bytes memory bytesArray = new bytes(i);\\n        for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\\n            bytesArray[i] = _bytes32[i];\\n        }\\n        return string(bytesArray);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Base.sol\": {\r\n      \"content\": \"pragma solidity >=0.8.0;\\n\\nimport \\\"./interfaces/IConfig.sol\\\";\\n\\ncontract Base {\\n    event ConfigUpdated(address indexed owner, address indexed config);\\n\\n    IConfig internal config;\\n\\n    modifier onlyCEO() {\\n        require(msg.sender == config.ceo(), \\\"only CEO\\\");\\n        _;\\n    }\\n\\n    constructor(address _configAddr) {\\n        require(_configAddr != address(0), \\\"config address = 0\\\");\\n        config = IConfig(_configAddr);\\n    }\\n\\n    function updateConfig(address _config) external onlyCEO() {\\n        require(_config != address(0), \\\"config address = 0\\\");\\n        require(address(config) != _config, \\\"address identical\\\");\\n        config = IConfig(_config);\\n        emit ConfigUpdated(msg.sender, _config);\\n    }\\n\\n    function configAddress() external view returns (address) {\\n        return address(config);\\n    }\\n\\n    function getConfig() external view returns (IConfig) {\\n        return config;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IConfig.sol\": {\r\n      \"content\": \"pragma solidity >=0.8.0;\\n\\ninterface IConfig {\\n    enum EventType {FUND_CREATED, FUND_UPDATED, STAKE_CREATED, STAKE_UPDATED, REG_CREATED, REG_UPDATED, PFUND_CREATED, PFUND_UPDATED}\\n\\n    function ceo() external view returns (address);\\n\\n    function protocolPool() external view returns (address);\\n\\n    function protocolToken() external view returns (address);\\n\\n    function feeTo() external view returns (address);\\n\\n    function nameRegistry() external view returns (address);\\n\\n    //  function investTokenWhitelist() external view returns (address[] memory);\\n\\n    function tokenMinFundSize(address token) external view returns (uint256);\\n\\n    function investFeeRate() external view returns (uint256);\\n\\n    function redeemFeeRate() external view returns (uint256);\\n\\n    function claimFeeRate() external view returns (uint256);\\n\\n    function poolCreationRate() external view returns (uint256);\\n\\n    function slot0() external view returns (uint256);\\n\\n    function slot1() external view returns (uint256);\\n\\n    function slot2() external view returns (uint256);\\n\\n    function slot3() external view returns (uint256);\\n\\n    function slot4() external view returns (uint256);\\n\\n    function notify(EventType _type, address _src) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"config\",\"type\":\"address\"}],\"name\":\"ConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"NameRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"UrlChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_bytes32\",\"type\":\"bytes32\"}],\"name\":\"b32ToStr\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"contract IConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegisters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"setUrl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"strToB32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"result\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"}],\"name\":\"updateConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"updateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NameRegistry","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"000000000000000000000000a2d0b2148c84c71e873bcdc45dfed041822cfbb900000000000000000000000000000000000000000000000000038d7ea4c68000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}