{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: /Users/starfish/code/badger-system/deps/@openzeppelin/contracts/cryptography/MerkleProof.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev These functions deal with verification of Merkle trees (hash trees),\r\n */\r\nlibrary MerkleProof {\r\n    /**\r\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n     * defined by `root`. For this, a `proof` must be provided, containing\r\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n     */\r\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\r\n        bytes32 computedHash = leaf;\r\n\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            bytes32 proofElement = proof[i];\r\n\r\n            if (computedHash <= proofElement) {\r\n                // Hash(current computed hash + current element of the proof)\r\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\r\n            } else {\r\n                // Hash(current element of the proof + current computed hash)\r\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\r\n            }\r\n        }\r\n\r\n        // Check if the computed hash (root) is equal to the provided root\r\n        return computedHash == root;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: /Users/starfish/code/badger-system/deps/@openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: /Users/starfish/code/badger-system/interfaces/yearn/GuestlistApi.sol\r\n\r\n// pragma solidity >=0.6.0 <0.7.0;\r\n// pragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface GuestListAPI {\r\n    function authorized(address guest, uint256 amount) external view returns (bool);\r\n}\r\n\r\n// Dependency file: /Users/starfish/code/badger-system/deps/@openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * // importANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// Dependency file: /Users/starfish/code/badger-system/interfaces/yearn/VaultAPI.sol\r\n\r\n// pragma solidity >=0.6.0 <0.7.0;\r\n\r\n// import \"/Users/starfish/code/badger-system/deps/@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\nstruct StrategyParams {\r\n    uint256 performanceFee;\r\n    uint256 activation;\r\n    uint256 debtRatio;\r\n    uint256 minDebtPerHarvest;\r\n    uint256 maxDebtPerHarvest;\r\n    uint256 lastReport;\r\n    uint256 totalDebt;\r\n    uint256 totalGain;\r\n    uint256 totalLoss;\r\n}\r\n\r\ninterface VaultAPI is IERC20 {\r\n    function name() external view returns (string calldata);\r\n\r\n    function symbol() external view returns (string calldata);\r\n\r\n    function decimals() external view returns (uint256);\r\n\r\n    function apiVersion() external pure returns (string memory);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount,\r\n        uint256 expiry,\r\n        bytes calldata signature\r\n    ) external returns (bool);\r\n\r\n    // NOTE: Vyper produces multiple signatures for a given function with \"default\" args\r\n    function deposit() external returns (uint256);\r\n\r\n    function deposit(uint256 amount) external returns (uint256);\r\n\r\n    function deposit(uint256 amount, address recipient) external returns (uint256);\r\n\r\n    // NOTE: Vyper produces multiple signatures for a given function with \"default\" args\r\n    function withdraw() external returns (uint256);\r\n\r\n    function withdraw(uint256 maxShares) external returns (uint256);\r\n\r\n    function withdraw(uint256 maxShares, address recipient) external returns (uint256);\r\n\r\n    function token() external view returns (address);\r\n\r\n    function guestList() external view returns (address);\r\n\r\n    function strategies(address _strategy) external view returns (StrategyParams memory);\r\n\r\n    function pricePerShare() external view returns (uint256);\r\n\r\n    function totalAssets() external view returns (uint256);\r\n\r\n    function setDepositLimit(uint256 limit) external;\r\n\r\n    function depositLimit() external view returns (uint256);\r\n\r\n    function maxAvailableShares() external view returns (uint256);\r\n\r\n    function setGuestList(address guestList) external;\r\n\r\n    /**\r\n     * View how much the Vault would increase this Strategy's borrow limit,\r\n     * based on its present performance (since its last report). Can be used to\r\n     * determine expectedReturn in your Strategy.\r\n     */\r\n    function creditAvailable() external view returns (uint256);\r\n\r\n    /**\r\n     * View how much the Vault would like to pull back from the Strategy,\r\n     * based on its present performance (since its last report). Can be used to\r\n     * determine expectedReturn in your Strategy.\r\n     */\r\n    function debtOutstanding() external view returns (uint256);\r\n\r\n    /**\r\n     * View how much the Vault expect this Strategy to return at the current\r\n     * block, based on its present performance (since its last report). Can be\r\n     * used to determine expectedReturn in your Strategy.\r\n     */\r\n    function expectedReturn() external view returns (uint256);\r\n\r\n    /**\r\n     * This is the main contact point where the Strategy interacts with the\r\n     * Vault. It is critical that this call is handled as intended by the\r\n     * Strategy. Therefore, this function will be called by BaseStrategy to\r\n     * make sure the integration is correct.\r\n     */\r\n    function report(\r\n        uint256 _gain,\r\n        uint256 _loss,\r\n        uint256 _debtPayment\r\n    ) external returns (uint256);\r\n\r\n    /**\r\n     * This function should only be used in the scenario where the Strategy is\r\n     * being retired but no migration of the positions are possible, or in the\r\n     * extreme scenario that the Strategy needs to be put into \"Emergency Exit\"\r\n     * mode in order for it to exit as quickly as possible. The latter scenario\r\n     * could be for any reason that is considered \"critical\" that the Strategy\r\n     * exits its position as fast as possible, such as a sudden change in\r\n     * market conditions leading to losses, or an imminent failure in an\r\n     * external dependency.\r\n     */\r\n    function revokeStrategy() external;\r\n\r\n    /**\r\n     * View the governance address of the Vault to assert privileged functions\r\n     * can only be called by governance. The Strategy serves the Vault, so it\r\n     * is subject to governance defined by the Vault.\r\n     */\r\n    function governance() external view returns (address);\r\n\r\n    /**\r\n     * View the management address of the Vault to assert privileged functions\r\n     * can only be called by management. The Strategy serves the Vault, so it\r\n     * is subject to management defined by the Vault.\r\n     */\r\n    function management() external view returns (address);\r\n\r\n    /**\r\n     * View the guardian address of the Vault to assert privileged functions\r\n     * can only be called by guardian. The Strategy serves the Vault, so it\r\n     * is subject to guardian defined by the Vault.\r\n     */\r\n    function guardian() external view returns (address);\r\n}\r\n\r\n// Root file: contracts/yearn/VipCappedGuestList.sol\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n// import \"/Users/starfish/code/badger-system/deps/@openzeppelin/contracts/cryptography/MerkleProof.sol\";\r\n// import \"/Users/starfish/code/badger-system/deps/@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import \"/Users/starfish/code/badger-system/interfaces/yearn/GuestlistApi.sol\";\r\n// import \"/Users/starfish/code/badger-system/interfaces/yearn/VaultAPI.sol\";\r\n\r\n/**\r\n * @notice A basic guest list contract for testing.\r\n * @dev For a Vyper implementation of this contract containing additional\r\n * functionality, see https://github.com/banteg/guest-list/blob/master/contracts/GuestList.vy\r\n * The bouncer can invite arbitrary guests\r\n * A guest can be added permissionlessly with proof of inclusion in current merkle set\r\n * The bouncer can change the merkle root at any time\r\n * Merkle-based permission that has been claimed cannot be revoked permissionlessly.\r\n * Any guests can be revoked by the bouncer at-will\r\n * The TVL cap is based on the number of want tokens in the underlying vaults.\r\n * This can only be made more permissive over time. If decreased, existing TVL is maintained and no deposits are possible until the TVL has gone below the threshold\r\n * A variant of the yearn AffiliateToken that supports guest list control of deposits\r\n * A guest list that gates access by merkle root and a TVL cap\r\n */\r\ncontract VipCappedGuestList {\r\n    using SafeMath for uint256;\r\n\r\n    address public vault;\r\n    address public bouncer;\r\n\r\n    bytes32 public guestRoot;\r\n    uint256 public userDepositCap;\r\n\r\n    mapping(address => bool) public guests;\r\n\r\n    event ProveInvitation(address indexed account, bytes32 indexed guestRoot);\r\n    event SetGuestRoot(bytes32 indexed guestRoot);\r\n    event SetUserDepositCap(uint256 cap);\r\n\r\n    /**\r\n     * @notice Create the test guest list, setting the message sender as\r\n     * `bouncer`.\r\n     * @dev Note that since this is just for testing, you're unable to change\r\n     * `bouncer`.\r\n     */\r\n    constructor(address vault_) public {\r\n        vault = vault_;\r\n        bouncer = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @notice Invite guests or kick them from the party.\r\n     * @param _guests The guests to add or update.\r\n     * @param _invited A flag for each guest at the matching index, inviting or\r\n     * uninviting the guest.\r\n     */\r\n    function setGuests(address[] calldata _guests, bool[] calldata _invited) external {\r\n        require(msg.sender == bouncer, \"onlyBouncer\");\r\n        _setGuests(_guests, _invited);\r\n    }\r\n\r\n    function vaultBalance(address user) public view returns (uint256) {\r\n        return (VaultAPI(vault).balanceOf(user).mul(VaultAPI(vault).pricePerShare())).div((10**VaultAPI(vault).decimals()));\r\n    }\r\n\r\n    function remainingDepositAllowed(address user) public view returns (uint256) {\r\n        return userDepositCap - vaultBalance(user);\r\n    }\r\n\r\n    /**\r\n     * @notice Permissionly prove an address is included in the current merkle root, thereby granting access\r\n     * @notice Note that the list is designed to ONLY EXPAND in future instances\r\n     * @notice The admin does retain the ability to ban individual addresses\r\n     */\r\n    function proveInvitation(address account, bytes32[] calldata merkleProof) external {\r\n        // Verify Merkle Proof\r\n        bytes32 node = keccak256(abi.encode(account));\r\n        require(MerkleProof.verify(merkleProof, guestRoot, node), \"Invalid merkle proof.\");\r\n\r\n        address[] memory accounts = new address[](1);\r\n        bool[] memory invited = new bool[](1);\r\n\r\n        accounts[0] = account;\r\n        invited[0] = true;\r\n\r\n        _setGuests(accounts, invited);\r\n\r\n        emit ProveInvitation(account, guestRoot);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the merkle root to verify invitation proofs against.\r\n     * @notice Note that accounts not included in the root will still be invited if their inviation was previously approved.\r\n     */\r\n    function setGuestRoot(bytes32 guestRoot_) external {\r\n        require(msg.sender == bouncer, \"onlyBouncer\");\r\n        guestRoot = guestRoot_;\r\n\r\n        emit SetGuestRoot(guestRoot);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the merkle root to verify invitation proofs against.\r\n     * @notice Note that accounts not included in the root will still be invited if their inviation was previously approved.\r\n     */\r\n    function setUserDepositCap(uint256 cap_) external {\r\n        require(msg.sender == bouncer, \"onlyBouncer\");\r\n        userDepositCap = cap_;\r\n\r\n        emit SetUserDepositCap(userDepositCap);\r\n    }\r\n\r\n    /**\r\n     * @notice Check if a guest with a bag of a certain size is allowed into\r\n     * the party.\r\n     * @dev Note that `_amount` isn't checked to keep test setup simple, since\r\n     * from the vault tests' perspective this is a pass/fail call anyway.\r\n     * @param _guest The guest's address to check.\r\n     */\r\n    function authorized(address _guest, uint256 _amount) external view returns (bool) {\r\n        return guests[_guest] && (vaultBalance(_guest) + _amount <= userDepositCap);\r\n    }\r\n\r\n    function _setGuests(address[] memory _guests, bool[] memory _invited) internal {\r\n        require(_guests.length == _invited.length);\r\n        for (uint256 i = 0; i < _guests.length; i++) {\r\n            if (_guests[i] == address(0)) {\r\n                break;\r\n            }\r\n            guests[_guests[i]] = _invited[i];\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"guestRoot\",\"type\":\"bytes32\"}],\"name\":\"ProveInvitation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"guestRoot\",\"type\":\"bytes32\"}],\"name\":\"SetGuestRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"SetUserDepositCap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bouncer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guestRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"guests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"proveInvitation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"remainingDepositAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guestRoot_\",\"type\":\"bytes32\"}],\"name\":\"setGuestRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_guests\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_invited\",\"type\":\"bool[]\"}],\"name\":\"setGuests\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cap_\",\"type\":\"uint256\"}],\"name\":\"setUserDepositCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userDepositCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"vaultBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"VipCappedGuestList","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000001ae8ccd120a05080d9a01c3b4f627f865685d091","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fe813d5deea8967eb1e24cea112d56b6a5b764f9ed9193034fa24ab8eb880fd6"}]}