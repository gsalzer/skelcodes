{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/liquidityMining/KyberFairLaunch.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport {ReentrancyGuard} from '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\\nimport {SafeMath} from '@openzeppelin/contracts/math/SafeMath.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport {SafeCast} from '@openzeppelin/contracts/utils/SafeCast.sol';\\nimport {IERC20Ext} from '@kyber.network/utils-sc/contracts/IERC20Ext.sol';\\nimport {PermissionAdmin} from '@kyber.network/utils-sc/contracts/PermissionAdmin.sol';\\nimport {IKyberFairLaunch} from '../interfaces/liquidityMining/IKyberFairLaunch.sol';\\nimport {IKyberRewardLocker} from '../interfaces/liquidityMining/IKyberRewardLocker.sol';\\n\\n/// FairLaunch contract for Kyber DMM Liquidity Mining program\\n/// Allow stakers to stake LP tokens and receive reward tokens\\n/// Allow extend or renew a pool to continue/restart the LM program\\n/// When harvesting, rewards will be transferred to a RewardLocker\\n/// Support multiple reward tokens, reward tokens must be distinct and immutable\\ncontract KyberFairLaunch is IKyberFairLaunch, PermissionAdmin, ReentrancyGuard {\\n  using SafeMath for uint256;\\n  using SafeCast for uint256;\\n  using SafeERC20 for IERC20Ext;\\n\\n  uint256 internal constant PRECISION = 1e12;\\n\\n  struct UserRewardData {\\n    uint256 unclaimedReward;\\n    uint256 lastRewardPerShare;\\n  }\\n  // Info of each user.\\n  struct UserInfo {\\n    uint256 amount; // How many Staking tokens the user has provided.\\n    mapping (uint256 => UserRewardData) userRewardData;\\n    //\\n    // Basically, any point in time, the amount of reward token\\n    // entitled to a user but is pending to be distributed is:\\n    //\\n    //   pending reward = user.unclaimAmount + (user.amount * (pool.accRewardPerShare - user.lastRewardPerShare)\\n    //\\n    // Whenever a user deposits or withdraws Staking tokens to a pool. Here's what happens:\\n    //   1. The pool's `accRewardPerShare` (and `lastRewardBlock`) gets updated.\\n    //   2. User receives the pending reward sent to his/her address.\\n    //   3. User's `lastRewardPerShare` gets updated.\\n    //   4. User's `amount` gets updated.\\n  }\\n\\n  struct PoolRewardData {\\n    uint256 rewardPerBlock;\\n    uint256 accRewardPerShare;\\n  }\\n  // Info of each pool\\n  // poolRewardData: reward data for each reward token\\n  //      rewardPerBlock: amount of reward token per block\\n  //      accRewardPerShare: accumulated reward per share of token\\n  // totalStake: total amount of stakeToken has been staked\\n  // stakeToken: token to stake, should be an ERC20 token\\n  // startBlock: the block that the reward starts\\n  // endBlock: the block that the reward ends\\n  // lastRewardBlock: last block number that rewards distribution occurs\\n  struct PoolInfo {\\n    uint256 totalStake;\\n    address stakeToken;\\n    uint32 startBlock;\\n    uint32 endBlock;\\n    uint32 lastRewardBlock;\\n    mapping (uint256 => PoolRewardData) poolRewardData;\\n  }\\n\\n  // check if a pool exists for a stakeToken\\n  mapping(address => bool) public poolExists;\\n  // contract for locking reward\\n  IKyberRewardLocker public immutable rewardLocker;\\n  // list reward tokens, use 0x0 for native token, shouldn't be too many reward tokens\\n  // don't validate values or length by trusting the deployer\\n  address[] public rewardTokens;\\n\\n  // Info of each pool.\\n  uint256 public override poolLength;\\n  mapping(uint256 => PoolInfo) internal poolInfo;\\n  // Info of each user that stakes Staking tokens.\\n  mapping(uint256 => mapping(address => UserInfo)) internal userInfo;\\n\\n  event AddNewPool(\\n    address indexed stakeToken,\\n    uint32 indexed startBlock,\\n    uint32 indexed endBlock,\\n    uint256[] rewardPerBlocks\\n  );\\n  event RenewPool(\\n    uint256 indexed pid,\\n    uint32 indexed startBlock,\\n    uint32 indexed endBlock,\\n    uint256[] rewardPerBlocks\\n  );\\n  event UpdatePool(\\n    uint256 indexed pid,\\n    uint32 indexed endBlock,\\n    uint256[] rewardPerBlocks\\n  );\\n  event Deposit(\\n    address indexed user,\\n    uint256 indexed pid,\\n    uint256 indexed blockNumber,\\n    uint256 amount\\n  );\\n  event Withdraw(\\n    address indexed user,\\n    uint256 indexed pid,\\n    uint256 indexed blockNumber,\\n    uint256 amount\\n  );\\n  event Harvest(\\n    address indexed user,\\n    uint256 indexed pid,\\n    address indexed rewardToken,\\n    uint256 lockedAmount,\\n    uint256 blockNumber\\n  );\\n  event EmergencyWithdraw(\\n    address indexed user,\\n    uint256 indexed pid,\\n    uint256 indexed blockNumber,\\n    uint256 amount\\n  );\\n\\n  constructor(\\n    address _admin,\\n    address[] memory _rewardTokens,\\n    IKyberRewardLocker _rewardLocker\\n  ) PermissionAdmin(_admin) {\\n    rewardTokens = _rewardTokens;\\n    rewardLocker = _rewardLocker;\\n\\n    // approve allowance to reward locker\\n    for(uint256 i = 0; i < _rewardTokens.length; i++) {\\n      if (_rewardTokens[i] != address(0)) {\\n        IERC20Ext(_rewardTokens[i]).safeApprove(address(_rewardLocker), type(uint256).max);\\n      }\\n    }\\n  }\\n\\n  receive() external payable {}\\n\\n  /**\\n   * @dev Allow admin to withdraw only reward tokens\\n   */\\n  function adminWithdraw(uint256 rewardTokenIndex, uint256 amount) external onlyAdmin {\\n    IERC20Ext rewardToken = IERC20Ext(rewardTokens[rewardTokenIndex]);\\n    if (rewardToken == IERC20Ext(0)) {\\n      (bool success, ) = msg.sender.call{ value: amount }('');\\n      require(success, 'transfer reward token failed');\\n    } else {\\n      rewardToken.safeTransfer(msg.sender, amount);\\n    }\\n  }\\n\\n  /**\\n   * @dev Add a new lp to the pool. Can only be called by the admin.\\n   * @param _stakeToken: token to be staked to the pool\\n   * @param _startBlock: block where the reward starts\\n   * @param _endBlock: block where the reward ends\\n   * @param _rewardPerBlocks: amount of reward token per block for the pool for each reward token\\n   */\\n  function addPool(\\n    address _stakeToken,\\n    uint32 _startBlock,\\n    uint32 _endBlock,\\n    uint256[] calldata _rewardPerBlocks\\n  ) external override onlyAdmin {\\n    require(!poolExists[_stakeToken], 'add: duplicated pool');\\n    require(_stakeToken != address(0), 'add: invalid stake token');\\n    require(rewardTokens.length == _rewardPerBlocks.length, 'add: invalid length');\\n\\n    require(_startBlock > block.number && _endBlock > _startBlock, 'add: invalid blocks');\\n\\n    poolInfo[poolLength].stakeToken = _stakeToken;\\n    poolInfo[poolLength].startBlock = _startBlock;\\n    poolInfo[poolLength].endBlock = _endBlock;\\n    poolInfo[poolLength].lastRewardBlock = _startBlock;\\n\\n    for(uint256 i = 0; i < _rewardPerBlocks.length; i++) {\\n      poolInfo[poolLength].poolRewardData[i] = PoolRewardData({\\n        rewardPerBlock: _rewardPerBlocks[i],\\n        accRewardPerShare: 0\\n      });\\n    }\\n\\n    poolLength++;\\n\\n    poolExists[_stakeToken] = true;\\n\\n    emit AddNewPool(_stakeToken, _startBlock, _endBlock, _rewardPerBlocks);\\n  }\\n\\n  /**\\n   * @dev Renew a pool to start another liquidity mining program\\n   * @param _pid: id of the pool to renew, must be pool that has not started or already ended\\n   * @param _startBlock: block where the reward starts\\n   * @param _endBlock: block where the reward ends\\n   * @param _rewardPerBlocks: amount of reward token per block for the pool\\n   *   0 if we want to stop the pool from accumulating rewards\\n   */\\n  function renewPool(\\n    uint256 _pid,\\n    uint32 _startBlock,\\n    uint32 _endBlock,\\n    uint256[] calldata _rewardPerBlocks\\n  ) external override onlyAdmin {\\n    updatePoolRewards(_pid);\\n\\n    PoolInfo storage pool = poolInfo[_pid];\\n    // check if pool has not started or already ended\\n    require(\\n      pool.startBlock > block.number || pool.endBlock < block.number,\\n      'renew: invalid pool state to renew'\\n    );\\n    // checking data of new pool\\n    require(rewardTokens.length == _rewardPerBlocks.length, 'renew: invalid length');\\n    require(_startBlock > block.number && _endBlock > _startBlock, 'renew: invalid blocks');\\n\\n    pool.startBlock = _startBlock;\\n    pool.endBlock = _endBlock;\\n    pool.lastRewardBlock = _startBlock;\\n\\n    for(uint256 i = 0; i < _rewardPerBlocks.length; i++) {\\n      pool.poolRewardData[i].rewardPerBlock = _rewardPerBlocks[i];\\n    }\\n\\n    emit RenewPool(_pid, _startBlock, _endBlock, _rewardPerBlocks);\\n  }\\n\\n  /**\\n   * @dev Update a pool, allow to change end block, reward per block\\n   * @param _pid: pool id to be renew\\n   * @param _endBlock: block where the reward ends\\n   * @param _rewardPerBlocks: amount of reward token per block for the pool,\\n   *   0 if we want to stop the pool from accumulating rewards\\n   */\\n  function updatePool(\\n    uint256 _pid,\\n    uint32 _endBlock,\\n    uint256[] calldata _rewardPerBlocks\\n  ) external override onlyAdmin {\\n    updatePoolRewards(_pid);\\n\\n    PoolInfo storage pool = poolInfo[_pid];\\n\\n    // should call renew pool if the pool has ended\\n    require(pool.endBlock > block.number, 'update: pool already ended');\\n    require(rewardTokens.length == _rewardPerBlocks.length, 'update: invalid length');\\n    require(_endBlock > block.number && _endBlock > pool.startBlock, 'update: invalid end block');\\n\\n    pool.endBlock = _endBlock;\\n    for(uint256 i = 0; i < _rewardPerBlocks.length; i++) {\\n      pool.poolRewardData[i].rewardPerBlock = _rewardPerBlocks[i];\\n    }\\n\\n    emit UpdatePool(_pid, _endBlock, _rewardPerBlocks);\\n  }\\n\\n  /**\\n   * @dev Deposit tokens to accumulate rewards\\n   * @param _pid: id of the pool\\n   * @param _amount: amount of stakeToken to be deposited\\n   * @param _shouldHarvest: whether to harvest the reward or not\\n   */\\n  function deposit(\\n    uint256 _pid,\\n    uint256 _amount,\\n    bool _shouldHarvest\\n  ) external override nonReentrant {\\n    // update pool rewards, user's rewards\\n    updatePoolRewards(_pid);\\n    _updateUserReward(msg.sender, _pid, _shouldHarvest);\\n\\n    PoolInfo storage pool = poolInfo[_pid];\\n    UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n    // collect stakeToken\\n    IERC20Ext(pool.stakeToken).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n    // update user staked amount, and total staked amount for the pool\\n    user.amount = user.amount.add(_amount);\\n    pool.totalStake = pool.totalStake.add(_amount);\\n\\n    emit Deposit(msg.sender, _pid, block.number, _amount);\\n  }\\n\\n  /**\\n   * @dev Withdraw token (of the sender) from pool, also harvest rewards\\n   * @param _pid: id of the pool\\n   * @param _amount: amount of stakeToken to withdraw\\n   */\\n  function withdraw(uint256 _pid, uint256 _amount) external override nonReentrant {\\n    _withdraw(_pid, _amount);\\n  }\\n\\n  /**\\n   * @dev Withdraw all tokens (of the sender) from pool, also harvest reward\\n   * @param _pid: id of the pool\\n   */\\n  function withdrawAll(uint256 _pid) external override nonReentrant {\\n    _withdraw(_pid, userInfo[_pid][msg.sender].amount);\\n  }\\n\\n  /**\\n   * @notice EMERGENCY USAGE ONLY, USER'S REWARDS WILL BE RESET\\n   * @dev Emergency withdrawal function to allow withdraw all deposited tokens (of the sender)\\n   *   and reset all rewards\\n   * @param _pid: id of the pool\\n   */\\n  function emergencyWithdraw(uint256 _pid) external override nonReentrant {\\n    PoolInfo storage pool = poolInfo[_pid];\\n    UserInfo storage user = userInfo[_pid][msg.sender];\\n    uint256 amount = user.amount;\\n\\n    user.amount = 0;\\n    for(uint256 i = 0; i < rewardTokens.length; i++) {\\n      UserRewardData storage rewardData = user.userRewardData[i];\\n      rewardData.lastRewardPerShare = 0;\\n      rewardData.unclaimedReward = 0;\\n    }\\n\\n    pool.totalStake = pool.totalStake.sub(amount);\\n\\n    if (amount > 0) {\\n      IERC20Ext(pool.stakeToken).safeTransfer(msg.sender, amount);\\n    }\\n\\n    emit EmergencyWithdraw(msg.sender, _pid, block.number, amount);\\n  }\\n\\n  /**\\n   * @dev Harvest rewards from multiple pools for the sender\\n   *   combine rewards from all pools and only transfer once to save gas\\n   */\\n  function harvestMultiplePools(uint256[] calldata _pids) external override {\\n    address[] memory rTokens = rewardTokens;\\n    uint256[] memory totalRewards = new uint256[](rTokens.length);\\n    address account = msg.sender;\\n    uint256 pid;\\n\\n    for (uint256 i = 0; i < _pids.length; i++) {\\n      pid = _pids[i];\\n      updatePoolRewards(pid);\\n      // update user reward without harvesting\\n      _updateUserReward(account, pid, false);\\n\\n      for(uint256 j = 0; j < rTokens.length; j++) {\\n        uint256 reward = userInfo[pid][account].userRewardData[j].unclaimedReward;\\n        if (reward > 0) {\\n          totalRewards[j] = totalRewards[j].add(reward);\\n          userInfo[pid][account].userRewardData[j].unclaimedReward = 0;\\n          emit Harvest(account, pid, rTokens[j], reward, block.number);\\n        }\\n      }\\n    }\\n\\n    for(uint256 i = 0; i < totalRewards.length; i++) {\\n      if (totalRewards[i] > 0) {\\n        _lockReward(IERC20Ext(rTokens[i]), account, totalRewards[i]);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Get pending rewards of a user from a pool, mostly for front-end\\n   * @param _pid: id of the pool\\n   * @param _user: user to check for pending rewards\\n   */\\n  function pendingRewards(uint256 _pid, address _user)\\n    external\\n    override\\n    view\\n    returns (uint256[] memory rewards)\\n  {\\n    uint256 rTokensLength = rewardTokens.length;\\n    rewards = new uint256[](rTokensLength);\\n    PoolInfo storage pool = poolInfo[_pid];\\n    UserInfo storage user = userInfo[_pid][_user];\\n    uint256 _totalStake = pool.totalStake;\\n    uint256 _poolLastRewardBlock = pool.lastRewardBlock;\\n    uint32 lastAccountedBlock = _lastAccountedRewardBlock(_pid);\\n    for(uint256 i = 0; i < rTokensLength; i++) {\\n      uint256 _accRewardPerShare = pool.poolRewardData[i].accRewardPerShare;\\n      if (lastAccountedBlock > _poolLastRewardBlock && _totalStake != 0) {\\n        uint256 reward = (lastAccountedBlock - _poolLastRewardBlock)\\n          .mul(pool.poolRewardData[i].rewardPerBlock);\\n        _accRewardPerShare = _accRewardPerShare.add(reward.mul(PRECISION) / _totalStake);\\n      }\\n\\n      rewards[i] = user.amount.mul(\\n        _accRewardPerShare.sub(user.userRewardData[i].lastRewardPerShare)\\n        ) / PRECISION;\\n      rewards[i] = rewards[i].add(user.userRewardData[i].unclaimedReward);\\n    }\\n  }\\n\\n  /**\\n   * @dev Return list reward tokens\\n   */\\n  function getRewardTokens() external override view returns (address[] memory) {\\n    return rewardTokens;\\n  }\\n\\n  /**\\n   * @dev Return full details of a pool\\n   */\\n  function getPoolInfo(uint256 _pid)\\n    external override view\\n    returns (\\n      uint256 totalStake,\\n      address stakeToken,\\n      uint32 startBlock,\\n      uint32 endBlock,\\n      uint32 lastRewardBlock,\\n      uint256[] memory rewardPerBlocks,\\n      uint256[] memory accRewardPerShares\\n    )\\n  {\\n    PoolInfo storage pool = poolInfo[_pid];\\n    (\\n      totalStake,\\n      stakeToken,\\n      startBlock,\\n      endBlock,\\n      lastRewardBlock\\n    ) = (\\n      pool.totalStake,\\n      pool.stakeToken,\\n      pool.startBlock,\\n      pool.endBlock,\\n      pool.lastRewardBlock\\n    );\\n    rewardPerBlocks = new uint256[](rewardTokens.length);\\n    accRewardPerShares = new uint256[](rewardTokens.length);\\n    for(uint256 i = 0; i < rewardTokens.length; i++) {\\n      rewardPerBlocks[i] = pool.poolRewardData[i].rewardPerBlock;\\n      accRewardPerShares[i] = pool.poolRewardData[i].accRewardPerShare;\\n    }\\n  }\\n\\n  /**\\n   * @dev Return user's info including deposited amount and reward data\\n   */\\n  function getUserInfo(uint256 _pid, address _account)\\n    external override view\\n    returns (\\n      uint256 amount,\\n      uint256[] memory unclaimedRewards,\\n      uint256[] memory lastRewardPerShares\\n    )\\n  {\\n    UserInfo storage user = userInfo[_pid][_account];\\n    amount = user.amount;\\n    unclaimedRewards = new uint256[](rewardTokens.length);\\n    lastRewardPerShares = new uint256[](rewardTokens.length);\\n    for(uint256 i = 0; i < rewardTokens.length; i++) {\\n      unclaimedRewards[i] = user.userRewardData[i].unclaimedReward;\\n      lastRewardPerShares[i] = user.userRewardData[i].lastRewardPerShare;\\n    }\\n  }\\n\\n  /**\\n   * @dev Harvest rewards from a pool for the sender\\n   * @param _pid: id of the pool\\n   */\\n  function harvest(uint256 _pid) public override {\\n    updatePoolRewards(_pid);\\n    _updateUserReward(msg.sender, _pid, true);\\n  }\\n\\n  /**\\n   * @dev Update rewards for one pool\\n   */\\n  function updatePoolRewards(uint256 _pid) public override {\\n    require(_pid < poolLength, 'invalid pool id');\\n    PoolInfo storage pool = poolInfo[_pid];\\n    uint32 lastAccountedBlock = _lastAccountedRewardBlock(_pid);\\n    if (lastAccountedBlock <= pool.lastRewardBlock) return;\\n    uint256 _totalStake = pool.totalStake;\\n    if (_totalStake == 0) {\\n      pool.lastRewardBlock = lastAccountedBlock;\\n      return;\\n    }\\n    uint256 numberBlocks = lastAccountedBlock - pool.lastRewardBlock;\\n    for(uint256 i = 0; i < rewardTokens.length; i++) {\\n      PoolRewardData storage rewardData = pool.poolRewardData[i];\\n      uint256 reward = numberBlocks.mul(rewardData.rewardPerBlock);\\n      rewardData.accRewardPerShare = rewardData.accRewardPerShare.add(reward.mul(PRECISION) / _totalStake);\\n    }\\n    pool.lastRewardBlock = lastAccountedBlock;\\n  }\\n\\n  /**\\n   * @dev Withdraw _amount of stakeToken from pool _pid, also harvest reward for the sender\\n   */\\n  function _withdraw(uint256 _pid, uint256 _amount) internal {\\n    PoolInfo storage pool = poolInfo[_pid];\\n    UserInfo storage user = userInfo[_pid][msg.sender];\\n    require(user.amount >= _amount, 'withdraw: insufficient amount');\\n\\n    // update pool reward and harvest\\n    updatePoolRewards(_pid);\\n    _updateUserReward(msg.sender, _pid, true);\\n\\n    user.amount = user.amount.sub(_amount);\\n    pool.totalStake = pool.totalStake.sub(_amount);\\n\\n    IERC20Ext(pool.stakeToken).safeTransfer(msg.sender, _amount);\\n\\n    emit Withdraw(msg.sender, _pid, block.number, _amount);\\n  }\\n\\n  /**\\n   * @dev Update reward of _to address from pool _pid, harvest if needed\\n   */\\n  function _updateUserReward(\\n    address _to,\\n    uint256 _pid,\\n    bool shouldHarvest\\n  ) internal {\\n    uint256 userAmount = userInfo[_pid][_to].amount;\\n    uint256 rTokensLength = rewardTokens.length;\\n\\n    if (userAmount == 0) {\\n      // update user last reward per share to the latest pool reward per share\\n      // by right if user.amount is 0, user.unclaimedReward should be 0 as well,\\n      // except when user uses emergencyWithdraw function\\n      for(uint256 i = 0; i < rTokensLength; i++) {\\n        userInfo[_pid][_to].userRewardData[i].lastRewardPerShare =\\n          poolInfo[_pid].poolRewardData[i].accRewardPerShare;\\n      }\\n      return;\\n    }\\n\\n    for(uint256 i = 0; i < rTokensLength; i++) {\\n      uint256 lastAccRewardPerShare = poolInfo[_pid].poolRewardData[i].accRewardPerShare;\\n      UserRewardData storage rewardData = userInfo[_pid][_to].userRewardData[i];\\n      // user's unclaim reward + user's amount * (pool's accRewardPerShare - user's lastRewardPerShare) / precision\\n      uint256 _pending = userAmount.mul(lastAccRewardPerShare.sub(rewardData.lastRewardPerShare)) / PRECISION;\\n      _pending = _pending.add(rewardData.unclaimedReward);\\n\\n      rewardData.unclaimedReward = shouldHarvest ? 0 : _pending;\\n      // update user last reward per share to the latest pool reward per share\\n      rewardData.lastRewardPerShare = lastAccRewardPerShare;\\n\\n      if (shouldHarvest && _pending > 0) {\\n        _lockReward(IERC20Ext(rewardTokens[i]), _to, _pending);\\n        emit Harvest(_to, _pid, rewardTokens[i], _pending, block.number);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns last accounted reward block, either the current block number or the endBlock of the pool\\n   */\\n  function _lastAccountedRewardBlock(uint256 _pid) internal view returns (uint32 _value) {\\n    _value = poolInfo[_pid].endBlock;\\n    if (_value > block.number) _value = block.number.toUint32();\\n  }\\n\\n  /**\\n   * @dev Call locker contract to lock rewards\\n   */\\n  function _lockReward(IERC20Ext token, address _account, uint256 _amount) internal {\\n    uint256 value = token == IERC20Ext(0) ? _amount : 0;\\n    rewardLocker.lock{ value: value }(token, _account, _amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@kyber.network/utils-sc/contracts/IERC20Ext.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\n/**\\n * @dev Interface extending ERC20 standard to include decimals() as\\n *      it is optional in the OpenZeppelin IERC20 interface.\\n */\\ninterface IERC20Ext is IERC20 {\\n    /**\\n     * @dev This function is required as Kyber requires to interact\\n     *      with token.decimals() with many of its operations.\\n     */\\n    function decimals() external view returns (uint8 digits);\\n}\\n\"\r\n    },\r\n    \"@kyber.network/utils-sc/contracts/PermissionAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n\\nabstract contract PermissionAdmin {\\n    address public admin;\\n    address public pendingAdmin;\\n\\n    event AdminClaimed(address newAdmin, address previousAdmin);\\n\\n    event TransferAdminPending(address pendingAdmin);\\n\\n    constructor(address _admin) {\\n        require(_admin != address(0), \\\"admin 0\\\");\\n        admin = _admin;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"only admin\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows the current admin to set the pendingAdmin address.\\n     * @param newAdmin The address to transfer ownership to.\\n     */\\n    function transferAdmin(address newAdmin) public onlyAdmin {\\n        require(newAdmin != address(0), \\\"new admin 0\\\");\\n        emit TransferAdminPending(newAdmin);\\n        pendingAdmin = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Allows the current admin to set the admin in one tx. Useful initial deployment.\\n     * @param newAdmin The address to transfer ownership to.\\n     */\\n    function transferAdminQuickly(address newAdmin) public onlyAdmin {\\n        require(newAdmin != address(0), \\\"admin 0\\\");\\n        emit TransferAdminPending(newAdmin);\\n        emit AdminClaimed(newAdmin, admin);\\n        admin = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Allows the pendingAdmin address to finalize the change admin process.\\n     */\\n    function claimAdmin() public {\\n        require(pendingAdmin == msg.sender, \\\"not pending\\\");\\n        emit AdminClaimed(pendingAdmin, admin);\\n        admin = pendingAdmin;\\n        pendingAdmin = address(0);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/liquidityMining/IKyberFairLaunch.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IKyberFairLaunch {\\n  /**\\n   * @dev Add a new lp to the pool. Can only be called by the admin.\\n   * @param _stakeToken: token to be staked to the pool\\n   * @param _startBlock: block where the reward starts\\n   * @param _endBlock: block where the reward ends\\n   * @param _rewardPerBlocks: amount of reward token per block for the pool\\n   */\\n  function addPool(\\n    address _stakeToken,\\n    uint32 _startBlock,\\n    uint32 _endBlock,\\n    uint256[] calldata _rewardPerBlocks\\n  ) external;\\n\\n  /**\\n   * @dev Renew a pool to start another liquidity mining program\\n   * @param _pid: id of the pool to renew, must be pool that has not started or already ended\\n   * @param _startBlock: block where the reward starts\\n   * @param _endBlock: block where the reward ends\\n   * @param _rewardPerBlocks: amount of reward token per block for the pool\\n   *   0 if we want to stop the pool from accumulating rewards\\n   */\\n  function renewPool(\\n    uint256 _pid,\\n    uint32 _startBlock,\\n    uint32 _endBlock,\\n    uint256[] calldata _rewardPerBlocks\\n  ) external;\\n\\n  /**\\n   * @dev Update a pool, allow to change end block, reward per block\\n   * @param _pid: pool id to be renew\\n   * @param _endBlock: block where the reward ends\\n   * @param _rewardPerBlocks: amount of reward token per block for the pool\\n   *   0 if we want to stop the pool from accumulating rewards\\n   */\\n  function updatePool(\\n    uint256 _pid,\\n    uint32 _endBlock,\\n    uint256[] calldata _rewardPerBlocks\\n  ) external;\\n\\n  /**\\n   * @dev deposit to tokens to accumulate rewards\\n   * @param _pid: id of the pool\\n   * @param _amount: amount of stakeToken to be deposited\\n   * @param _shouldHarvest: whether to harvest the reward or not\\n   */\\n  function deposit(\\n    uint256 _pid,\\n    uint256 _amount,\\n    bool _shouldHarvest\\n  ) external;\\n\\n  /**\\n   * @dev withdraw token (of the sender) from pool, also harvest reward\\n   * @param _pid: id of the pool\\n   * @param _amount: amount of stakeToken to withdraw\\n   */\\n  function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n  /**\\n   * @dev withdraw all tokens (of the sender) from pool, also harvest reward\\n   * @param _pid: id of the pool\\n   */\\n  function withdrawAll(uint256 _pid) external;\\n\\n  /**\\n   * @dev emergency withdrawal function to allow withdraw all deposited token (of the sender)\\n   *   without harvesting the reward\\n   * @param _pid: id of the pool\\n   */\\n  function emergencyWithdraw(uint256 _pid) external;\\n\\n  /**\\n   * @dev harvest reward from pool for the sender\\n   * @param _pid: id of the pool\\n   */\\n  function harvest(uint256 _pid) external;\\n\\n  /**\\n   * @dev harvest rewards from multiple pools for the sender\\n   */\\n  function harvestMultiplePools(uint256[] calldata _pids) external;\\n\\n  /**\\n   * @dev update reward for one pool\\n   */\\n  function updatePoolRewards(uint256 _pid) external;\\n\\n  /**\\n   * @dev return the total of pools that have been added\\n   */\\n  function poolLength() external view returns (uint256);\\n\\n  /**\\n   * @dev return full details of a pool\\n   */\\n  function getPoolInfo(uint256 _pid)\\n    external view\\n    returns(\\n      uint256 totalStake,\\n      address stakeToken,\\n      uint32 startBlock,\\n      uint32 endBlock,\\n      uint32 lastRewardBlock,\\n      uint256[] memory rewardPerBlocks,\\n      uint256[] memory accRewardPerShares);\\n\\n  /**\\n   * @dev get user's info\\n   */\\n  function getUserInfo(uint256 _pid, address _account)\\n    external view\\n    returns (\\n      uint256 amount,\\n      uint256[] memory unclaimedRewards,\\n      uint256[] memory lastRewardPerShares);\\n\\n  /**\\n  * @dev return list reward tokens\\n  */\\n  function getRewardTokens() external view returns (address[] memory);\\n  /**\\n   * @dev get pending reward of a user from a pool, mostly for front-end\\n   * @param _pid: id of the pool\\n   * @param _user: user to check for pending rewards\\n   */\\n  function pendingRewards(\\n    uint256 _pid,\\n    address _user\\n   )\\n    external view\\n    returns (uint256[] memory rewards);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/liquidityMining/IKyberRewardLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport {IERC20Ext} from '@kyber.network/utils-sc/contracts/IERC20Ext.sol';\\n\\ninterface IKyberRewardLocker {\\n  struct VestingSchedule {\\n    uint64 startBlock;\\n    uint64 endBlock;\\n    uint128 quantity;\\n    uint128 vestedQuantity;\\n  }\\n\\n  event VestingEntryCreated(\\n    IERC20Ext indexed token,\\n    address indexed beneficiary,\\n    uint256 startBlock,\\n    uint256 endBlock,\\n    uint256 quantity,\\n    uint256 index\\n  );\\n\\n  event VestingEntryQueued(\\n    uint256 indexed index,\\n    IERC20Ext indexed token,\\n    address indexed beneficiary,\\n    uint256 quantity\\n  );\\n\\n  event Vested(\\n    IERC20Ext indexed token,\\n    address indexed beneficiary,\\n    uint256 vestedQuantity,\\n    uint256 index\\n  );\\n\\n  /**\\n   * @dev queue a vesting schedule starting from now\\n   */\\n  function lock(\\n    IERC20Ext token,\\n    address account,\\n    uint256 amount\\n  ) external payable;\\n\\n  /**\\n   * @dev queue a vesting schedule\\n   */\\n  function lockWithStartBlock(\\n    IERC20Ext token,\\n    address account,\\n    uint256 quantity,\\n    uint256 startBlock\\n  ) external payable;\\n\\n  /**\\n   * @dev vest all completed schedules for multiple tokens\\n   */\\n  function vestCompletedSchedulesForMultipleTokens(IERC20Ext[] calldata tokens)\\n    external\\n    returns (uint256[] memory vestedAmounts);\\n\\n  /**\\n   * @dev claim multiple tokens for specific vesting schedule,\\n   *      if schedule has not ended yet, claiming amounts are linear with vesting blocks\\n   */\\n  function vestScheduleForMultipleTokensAtIndices(\\n    IERC20Ext[] calldata tokens,\\n    uint256[][] calldata indices\\n  )\\n    external\\n    returns (uint256[] memory vestedAmounts);\\n\\n  /**\\n   * @dev for all completed schedule, claim token\\n   */\\n  function vestCompletedSchedules(IERC20Ext token) external returns (uint256);\\n\\n  /**\\n   * @dev claim token for specific vesting schedule,\\n   * @dev if schedule has not ended yet, claiming amount is linear with vesting blocks\\n   */\\n  function vestScheduleAtIndices(IERC20Ext token, uint256[] calldata indexes)\\n    external\\n    returns (uint256);\\n\\n  /**\\n   * @dev claim token for specific vesting schedule from startIndex to endIndex\\n   */\\n  function vestSchedulesInRange(\\n    IERC20Ext token,\\n    uint256 startIndex,\\n    uint256 endIndex\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev length of vesting schedules array\\n   */\\n  function numVestingSchedules(address account, IERC20Ext token) external view returns (uint256);\\n\\n  /**\\n   * @dev get detailed of each vesting schedule\\n   */\\n  function getVestingScheduleAtIndex(\\n    address account,\\n    IERC20Ext token,\\n    uint256 index\\n  ) external view returns (VestingSchedule memory);\\n\\n  /**\\n   * @dev get vesting shedules array\\n   */\\n  function getVestingSchedules(address account, IERC20Ext token)\\n    external\\n    view\\n    returns (VestingSchedule[] memory schedules);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"contract IKyberRewardLocker\",\"name\":\"_rewardLocker\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"startBlock\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"endBlock\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewardPerBlocks\",\"type\":\"uint256[]\"}],\"name\":\"AddNewPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"}],\"name\":\"AdminClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"startBlock\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"endBlock\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewardPerBlocks\",\"type\":\"uint256[]\"}],\"name\":\"RenewPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingAdmin\",\"type\":\"address\"}],\"name\":\"TransferAdminPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"endBlock\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewardPerBlocks\",\"type\":\"uint256[]\"}],\"name\":\"UpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_startBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_endBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardPerBlocks\",\"type\":\"uint256[]\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardTokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_shouldHarvest\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"startBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastRewardBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardPerBlocks\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"accRewardPerShares\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"unclaimedRewards\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lastRewardPerShares\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"}],\"name\":\"harvestMultiplePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_startBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_endBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardPerBlocks\",\"type\":\"uint256[]\"}],\"name\":\"renewPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardLocker\",\"outputs\":[{\"internalType\":\"contract IKyberRewardLocker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminQuickly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_endBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardPerBlocks\",\"type\":\"uint256[]\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePoolRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"KyberFairLaunch","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"0000000000000000000000004bd6037e5cf0cadb0cce85691a5723bc94ae2fae0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000fab5186a194588f5ad5074bd52659302906b45220000000000000000000000000000000000000000000000000000000000000001000000000000000000000000defa4e8a7bcba345f687a2f1456f5edd9ce97202","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}