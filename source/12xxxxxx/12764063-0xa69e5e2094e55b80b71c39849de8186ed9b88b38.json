{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/LockUnlockLP.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"./interfaces/ILockUnlockLP.sol\\\";\\n\\n/// @title LockUnlockLP\\n/// @author Artemij Artamonov - <array.clean@gmail.com>\\n/// @author Anton Davydov - <fetsorn@gmail.com>\\ncontract LockUnlockLP is ILockUnlockLP {\\n    /// @inheritdoc ILockUnlockLP\\n    address public override owner;\\n\\n    modifier isOwner() {\\n        require(msg.sender == owner, \\\"ACW\\\");\\n        _;\\n    }\\n\\n    /// @inheritdoc ILockUnlockLP\\n    mapping(address => bool) public override isAllowedToken;\\n    /// @inheritdoc ILockUnlockLP\\n    mapping(address => uint256) public override lockLimit;\\n    mapping(address => mapping(address => uint256)) internal _balance;\\n    /// @inheritdoc ILockUnlockLP\\n    mapping(address => uint256) public override tokenSupply;\\n    /// @inheritdoc ILockUnlockLP\\n    uint256 public override totalSupply;\\n\\n    /// @inheritdoc ILockUnlockLP\\n    bool public override canLock;\\n\\n    constructor(address[] memory allowedTokens) {\\n        owner = msg.sender;\\n        for (uint256 i = 0; i < allowedTokens.length; i++) {\\n            isAllowedToken[allowedTokens[i]] = true;\\n        }\\n    }\\n\\n    /// @inheritdoc ILockUnlockLP\\n    function setOwner(address _owner) external override isOwner {\\n        address ownerOld = owner;\\n        owner = _owner;\\n        emit SetOwner(ownerOld, _owner);\\n    }\\n\\n    /// @inheritdoc ILockUnlockLP\\n    function setIsAllowedToken(address token, bool _isAllowedToken)\\n        external\\n        override\\n        isOwner\\n    {\\n        isAllowedToken[token] = _isAllowedToken;\\n        emit SetIsAllowedToken(owner, token, _isAllowedToken);\\n    }\\n\\n    /// @inheritdoc ILockUnlockLP\\n    function setLockLimit(address token, uint256 _lockLimit)\\n        external\\n        override\\n        isOwner\\n    {\\n        lockLimit[token] = _lockLimit;\\n        emit SetLockLimit(owner, token, _lockLimit);\\n    }\\n\\n    /// @inheritdoc ILockUnlockLP\\n    function setCanLock(bool _canLock) external override isOwner {\\n        canLock = _canLock;\\n        emit SetCanLock(owner, _canLock);\\n    }\\n\\n    /// @inheritdoc ILockUnlockLP\\n    function balance(address token, address depositer)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _balance[token][depositer];\\n    }\\n\\n    /// @inheritdoc ILockUnlockLP\\n    function lock(address token, uint256 amount) external override {\\n        require(canLock, \\\"LP1\\\");\\n        require(isAllowedToken[token], \\\"LP2\\\");\\n        require(amount >= lockLimit[token], \\\"LP3\\\");\\n        _balance[token][msg.sender] += amount;\\n        tokenSupply[token] += amount;\\n        totalSupply += amount;\\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\\n        emit Lock(token, msg.sender, msg.sender, amount);\\n    }\\n\\n    /// @inheritdoc ILockUnlockLP\\n    function unlock(address token, uint256 amount) external override {\\n        require(_balance[token][msg.sender] >= amount, \\\"LP4\\\");\\n        _balance[token][msg.sender] -= amount;\\n        tokenSupply[token] -= amount;\\n        totalSupply -= amount;\\n        IERC20(token).transfer(msg.sender, amount);\\n        emit Unlock(token, msg.sender, msg.sender, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILockUnlockLP.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/// @title The interface for Graviton lp-token lock-unlock\\n/// @notice Locks liquidity provision tokens\\n/// @author Artemij Artamonov - <array.clean@gmail.com>\\n/// @author Anton Davydov - <fetsorn@gmail.com>\\ninterface ILockUnlockLP {\\n    /// @notice User that can grant access permissions and perform privileged actions\\n    function owner() external view returns (address);\\n\\n    /// @notice Transfers ownership of the contract to a new account (`_owner`).\\n    /// @dev Can only be called by the current owner.\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Look up if locking is allowed\\n    function canLock() external view returns (bool);\\n\\n    /// @notice Sets the permission to lock to `_canLock`\\n    function setCanLock(bool _canLock) external;\\n\\n    /// @notice Look up if the locking of `token` is allowed\\n    function isAllowedToken(address token) external view returns (bool);\\n\\n    /// @notice Look up if the locking of `token` is allowed\\n    function lockLimit(address token) external view returns (uint256);\\n\\n    /// @notice Sets minimum lock amount limit for `token` to `_lockLimit`\\n    function setLockLimit(address token, uint256 _lockLimit) external;\\n\\n    /// @notice The total amount of locked `token`\\n    function tokenSupply(address token) external view returns (uint256);\\n\\n    /// @notice The total amount of all locked lp-tokens\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Sets permission to lock `token` to `_isAllowedToken`\\n    function setIsAllowedToken(address token, bool _isAllowedToken) external;\\n\\n    /// @notice The amount of `token` locked by `depositer`\\n    function balance(address token, address depositer)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Transfers `amount` of `token` from the caller to LockUnlockLP\\n    function lock(address token, uint256 amount) external;\\n\\n    /// @notice Transfers `amount` of `token` from LockUnlockLP to the caller\\n    function unlock(address token, uint256 amount) external;\\n\\n    /// @notice Event emitted when the owner changes via `#setOwner`.\\n    /// @param ownerOld The account that was the previous owner of the contract\\n    /// @param ownerNew The account that became the owner of the contract\\n    event SetOwner(address indexed ownerOld, address indexed ownerNew);\\n\\n    /// @notice Event emitted when the `sender` locks `amount` of `token` lp-tokens\\n    /// @param token The address of the lp-token\\n    /// @param sender The account that locked lp-token\\n    /// @param receiver The account to whose lp-token balance the tokens are added\\n    /// @dev receiver is always same as sender, kept for compatibility\\n    /// @param amount The amount of lp-tokens locked\\n    event Lock(\\n        address indexed token,\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 amount\\n    );\\n\\n    /// @notice Event emitted when the `sender` unlocks `amount` of `token` lp-tokens\\n    /// @param token The address of the lp-token\\n    /// @param sender The account that locked lp-token\\n    /// @param receiver The account to whose lp-token balance the tokens are added\\n    /// @dev receiver is always same as sender, kept for compatibility\\n    /// @param amount The amount of lp-tokens unlocked\\n    event Unlock(\\n        address indexed token,\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 amount\\n    );\\n\\n    /// @notice Event emitted when the permission to lock token is updated via `#setIsAllowedToken`\\n    /// @param owner The owner account at the time of change\\n    /// @param token The lp-token whose permission was updated\\n    /// @param newBool Updated permission\\n    event SetIsAllowedToken(\\n        address indexed owner,\\n        address indexed token,\\n        bool indexed newBool\\n    );\\n\\n    /// @notice Event emitted when the minimum lock amount limit updated via `#setLockLimit`\\n    /// @param owner The owner account at the time of change\\n    /// @param token The lp-token whose permission was updated\\n    /// @param _lockLimit New minimum lock amount limit\\n    event SetLockLimit(\\n        address indexed owner,\\n        address indexed token,\\n        uint256 indexed _lockLimit\\n    );\\n\\n    /// @notice Event emitted when the permission to lock is updated via `#setCanLock`\\n    /// @param owner The owner account at the time of change\\n    /// @param newBool Updated permission\\n    event SetCanLock(address indexed owner, bool indexed newBool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.0;\\n\\ninterface IERC20 {\\n    function mint(address _to, uint256 _value) external;\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        external\\n        returns (bool);\\n\\n    function transfer(address _to, uint256 _value)\\n        external\\n        returns (bool success);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool success);\\n\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"allowedTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newBool\",\"type\":\"bool\"}],\"name\":\"SetCanLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newBool\",\"type\":\"bool\"}],\"name\":\"SetIsAllowedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_lockLimit\",\"type\":\"uint256\"}],\"name\":\"SetLockLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerOld\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerNew\",\"type\":\"address\"}],\"name\":\"SetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositer\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAllowedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_canLock\",\"type\":\"bool\"}],\"name\":\"setCanLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isAllowedToken\",\"type\":\"bool\"}],\"name\":\"setIsAllowedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lockLimit\",\"type\":\"uint256\"}],\"name\":\"setLockLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LockUnlockLP","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000b3ecea6bc79be3ecc805528655c4fc173cac2dd","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}