{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.3;\r\n\r\n/**\r\n * @title An Ether or token balance scanner\r\n * @author Maarten Zuidhoorn\r\n * @author Luit Hollander\r\n */\r\ncontract BalanceScanner {\r\n  struct Result {\r\n    bool success;\r\n    bytes data;\r\n  }\r\n\r\n  /**\r\n   * @notice Get the Ether balance for all addresses specified\r\n   * @param addresses The addresses to get the Ether balance for\r\n   * @return results The Ether balance for all addresses in the same order as specified\r\n   */\r\n  function etherBalances(address[] calldata addresses) external view returns (Result[] memory results) {\r\n    results = new Result[](addresses.length);\r\n\r\n    for (uint256 i = 0; i < addresses.length; i++) {\r\n      results[i] = Result(true, abi.encode(addresses[i].balance));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Get the ERC-20 token balance of `token` for all addresses specified\r\n   * @dev This does not check if the `token` address specified is actually an ERC-20 token\r\n   * @param addresses The addresses to get the token balance for\r\n   * @param token The address of the ERC-20 token contract\r\n   * @return results The token balance for all addresses in the same order as specified\r\n   */\r\n  function tokenBalances(address[] calldata addresses, address token) external view returns (Result[] memory results) {\r\n    results = new Result[](addresses.length);\r\n\r\n    for (uint256 i = 0; i < addresses.length; i++) {\r\n      bytes memory data = abi.encodeWithSignature(\"balanceOf(address)\", addresses[i]);\r\n      results[i] = staticCall(token, data, 20000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Get the ERC-20 token balance from multiple contracts for a single owner\r\n   * @param owner The address of the token owner\r\n   * @param contracts The addresses of the ERC-20 token contracts\r\n   * @return results The token balances in the same order as the addresses specified\r\n   */\r\n  function tokensBalance(address owner, address[] calldata contracts) external view returns (Result[] memory results) {\r\n    results = new Result[](contracts.length);\r\n\r\n    bytes memory data = abi.encodeWithSignature(\"balanceOf(address)\", owner);\r\n    for (uint256 i = 0; i < contracts.length; i++) {\r\n      results[i] = staticCall(contracts[i], data, 20000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Call multiple contracts with the provided arbitrary data\r\n   * @param contracts The contracts to call\r\n   * @param data The data to call the contracts with\r\n   * @return results The raw result of the contract calls\r\n   */\r\n  function call(address[] calldata contracts, bytes[] calldata data) external view returns (Result[] memory results) {\r\n    return call(contracts, data, gasleft());\r\n  }\r\n\r\n  /**\r\n   * @notice Call multiple contracts with the provided arbitrary data\r\n   * @param contracts The contracts to call\r\n   * @param data The data to call the contracts with\r\n   * @param gas The amount of gas to call the contracts with\r\n   * @return results The raw result of the contract calls\r\n   */\r\n  function call(\r\n    address[] calldata contracts,\r\n    bytes[] calldata data,\r\n    uint256 gas\r\n  ) public view returns (Result[] memory results) {\r\n    require(contracts.length == data.length, \"Length must be equal\");\r\n    results = new Result[](contracts.length);\r\n\r\n    for (uint256 i = 0; i < contracts.length; i++) {\r\n      results[i] = staticCall(contracts[i], data[i], gas);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Static call a contract with the provided data\r\n   * @param target The address of the contract to call\r\n   * @param data The data to call the contract with\r\n   * @param gas The amount of gas to forward to the call\r\n   * @return result The result of the contract call\r\n   */\r\n  function staticCall(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 gas\r\n  ) private view returns (Result memory) {\r\n    uint256 size = codeSize(target);\r\n\r\n    if (size > 0) {\r\n      (bool success, bytes memory result) = target.staticcall{ gas: gas }(data);\r\n      if (success) {\r\n        return Result(success, result);\r\n      }\r\n    }\r\n\r\n    return Result(false, \"\");\r\n  }\r\n\r\n  /**\r\n   * @notice Get code size of address\r\n   * @param _address The address to get code size from\r\n   * @return size Unsigned 256-bits integer\r\n   */\r\n  function codeSize(address _address) private view returns (uint256 size) {\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      size := extcodesize(_address)\r\n    }\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"call\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct BalanceScanner.Result[]\",\"name\":\"results\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"call\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct BalanceScanner.Result[]\",\"name\":\"results\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"etherBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct BalanceScanner.Result[]\",\"name\":\"results\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct BalanceScanner.Result[]\",\"name\":\"results\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"}],\"name\":\"tokensBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct BalanceScanner.Result[]\",\"name\":\"results\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BalanceScanner","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e8c924774ae9547fb6c3f81b9817f53df0b070dd9e37e05ce52f4cfa1712f0f1"}]}