{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ninterface ICourtStake{\r\n\r\n    function lockedStake(uint256 amount, address beneficiar,  uint256 StartReleasingTime, uint256 batchCount, uint256 batchPeriod) external;\r\n\r\n}\r\n\r\ninterface IMERC20 {\r\n    function mint(address account, uint amount) external;\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract CourtFarming_RoomStake {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n\r\n    IERC20 public constant stakedToken = IERC20(0xAd4f86a25bbc20FfB751f2FAC312A0B4d8F88c64);\r\n\r\n\r\n    IMERC20 public constant courtToken = IMERC20(0x0538A9b4f4dcB0CB01A7fA34e17C0AC947c22553);\r\n\r\n    uint256 private _totalStaked;\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // last updated block number\r\n    uint256 private _lastUpdateBlock;\r\n\r\n    // incentive rewards\r\n    uint256 public incvFinishBlock; //  finish incentive rewarding block number\r\n    uint256 private _incvRewardPerBlock; // incentive reward per block\r\n    uint256 private _incvAccRewardPerToken; // accumulative reward per token\r\n    mapping(address => uint256) private _incvRewards; // reward balances\r\n    mapping(address => uint256) private _incvPrevAccRewardPerToken;// previous accumulative reward per token (for a user)\r\n\r\n    uint256 public incvStartReleasingTime;  // incentive releasing time\r\n    uint256 public incvBatchPeriod; // incentive batch period\r\n    uint256 public incvBatchCount; // incentive batch count\r\n    mapping(address => uint256) public  incvWithdrawn;\r\n\r\n    address public owner;\r\n\r\n    enum TransferRewardState {\r\n        Succeeded,\r\n        RewardsStillLocked\r\n    }\r\n\r\n\r\n    address public courtStakeAddress;\r\n\r\n    event Staked(address indexed user, uint256 amount);\r\n    event Unstaked(address indexed user, uint256 amount);\r\n    event ClaimReward(address indexed user, uint256 reward);\r\n    event ClaimIncentiveReward(address indexed user, uint256 reward);\r\n    event StakeRewards(address indexed user, uint256 amount, uint256 lockTime);\r\n    event CourtStakeChanged(address oldAddress, address newAddress);\r\n    event StakeParametersChanged(uint256 incvRewardPerBlock, uint256 incvRewardFinsishBlock, uint256 incvLockTime);\r\n\r\n    constructor () public {\r\n\r\n        owner = msg.sender;\r\n\r\n        uint256 incvRewardsPerBlock = 41335978835978835;\r\n        uint256 incvRewardsPeriodInDays = 90;\r\n        \r\n\t\tincvStartReleasingTime = 1620914400; // 13/05/2021 // check https://www.epochconverter.com/ for timestamp\r\n        incvBatchPeriod = 1 days;\r\n        incvBatchCount = 1;\r\n\r\n         _stakeParametrsCalculation(incvRewardsPerBlock, incvRewardsPeriodInDays, incvStartReleasingTime);\r\n\r\n        _lastUpdateBlock = blockNumber();\r\n    }\r\n\r\n    function _stakeParametrsCalculation(uint256 incvRewardsPerBlock, uint256 incvRewardsPeriodInDays, uint256 iLockTime) internal{\r\n\r\n\r\n        uint256 incvRewardBlockCount = incvRewardsPeriodInDays * 5760;\r\n        uint256 incvRewardPerBlock = incvRewardsPerBlock;\r\n\r\n        _incvRewardPerBlock = incvRewardPerBlock * (1e18);\r\n        incvFinishBlock = blockNumber().add(incvRewardBlockCount);\r\n\r\n        incvStartReleasingTime = iLockTime;\r\n    }\r\n\r\n    function changeStakeParameters( uint256 incvRewardsPerBlock, uint256 incvRewardsPeriodInDays, uint256 iLockTime) public {\r\n\r\n        require(msg.sender == owner, \"can be called by owner only\");\r\n        updateReward(address(0));\r\n\r\n        _stakeParametrsCalculation(incvRewardsPerBlock, incvRewardsPeriodInDays, iLockTime);\r\n\r\n        emit StakeParametersChanged( _incvRewardPerBlock, incvFinishBlock, incvStartReleasingTime);\r\n    }\r\n\r\n    function updateReward(address account) public {\r\n        // reward algorithm\r\n        // in general: rewards = (reward per token ber block) user balances\r\n        uint256 cnBlock = blockNumber();\r\n\r\n        // update accRewardPerToken, in case totalSupply is zero; do not increment accRewardPerToken\r\n        if (_totalStaked > 0) {\r\n            uint256 incvlastRewardBlock = cnBlock < incvFinishBlock ? cnBlock : incvFinishBlock;\r\n            if (incvlastRewardBlock > _lastUpdateBlock) {\r\n                _incvAccRewardPerToken = incvlastRewardBlock.sub(_lastUpdateBlock)\r\n                .mul(_incvRewardPerBlock).div(_totalStaked)\r\n                .add(_incvAccRewardPerToken);\r\n            }\r\n        }\r\n\r\n        _lastUpdateBlock = cnBlock;\r\n\r\n        if (account != address(0)) {\r\n\r\n            uint256 incAccRewardPerTokenForUser = _incvAccRewardPerToken.sub(_incvPrevAccRewardPerToken[account]);\r\n\r\n            if (incAccRewardPerTokenForUser > 0) {\r\n                _incvRewards[account] =\r\n                _balances[account]\r\n                .mul(incAccRewardPerTokenForUser)\r\n                .div(1e18)\r\n                .add(_incvRewards[account]);\r\n\r\n                _incvPrevAccRewardPerToken[account] = _incvAccRewardPerToken;\r\n            }\r\n        }\r\n    }\r\n\r\n    function stake(uint256 amount) public {\r\n        updateReward(msg.sender);\r\n\r\n        if (amount > 0) {\r\n            _totalStaked = _totalStaked.add(amount);\r\n            _balances[msg.sender] = _balances[msg.sender].add(amount);\r\n            stakedToken.safeTransferFrom(msg.sender, address(this), amount);\r\n            emit Staked(msg.sender, amount);\r\n        }\r\n    }\r\n\r\n    function unstake(uint256 amount, bool claim) public {\r\n        updateReward(msg.sender);\r\n\r\n        if (amount > 0) {\r\n            _totalStaked = _totalStaked.sub(amount);\r\n            _balances[msg.sender] = _balances[msg.sender].sub(amount);\r\n            stakedToken.safeTransfer(msg.sender, amount);\r\n            emit Unstaked(msg.sender, amount);\r\n        }\r\n        claim = false;\r\n    }\r\n\r\n\r\n    function stakeIncvRewards(uint256 amount) public returns (bool) {\r\n        updateReward(msg.sender);\r\n        uint256 incvReward = _incvRewards[msg.sender];\r\n\r\n\r\n        if (amount > incvReward || courtStakeAddress == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        _incvRewards[msg.sender] -= amount;  // no need to use safe math sub, since there is check for amount > reward\r\n\r\n        courtToken.mint(address(this), amount);\r\n\r\n        ICourtStake courtStake = ICourtStake(courtStakeAddress);\r\n        courtStake.lockedStake(amount,  msg.sender, incvStartReleasingTime, incvBatchCount, incvBatchPeriod);\r\n        emit StakeRewards(msg.sender, amount, incvStartReleasingTime);\r\n    }\r\n\r\n    function setCourtStake(address courtStakeAdd) public {\r\n        require(msg.sender == owner, \"only contract owner can change\");\r\n\r\n        address oldAddress = courtStakeAddress;\r\n        courtStakeAddress = courtStakeAdd;\r\n\r\n        IERC20 courtTokenERC20 = IERC20(address(courtToken));\r\n\r\n        courtTokenERC20.approve(courtStakeAdd, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\r\n\r\n        emit CourtStakeChanged(oldAddress, courtStakeAdd);\r\n    }\r\n\r\n    function rewards(address account) public view returns (uint256 reward, uint256 incvReward) {\r\n        // read version of update\r\n        uint256 cnBlock = blockNumber();\r\n        \r\n        uint256 incvAccRewardPerToken = _incvAccRewardPerToken;\r\n\r\n        // update accRewardPerToken, in case totalSupply is zero; do not increment accRewardPerToken\r\n        if (_totalStaked > 0) {\r\n            \r\n            uint256 incvLastRewardBlock = cnBlock < incvFinishBlock ? cnBlock : incvFinishBlock;\r\n            if (incvLastRewardBlock > _lastUpdateBlock) {\r\n                incvAccRewardPerToken = incvLastRewardBlock.sub(_lastUpdateBlock)\r\n                .mul(_incvRewardPerBlock).div(_totalStaked)\r\n                .add(incvAccRewardPerToken);\r\n            }\r\n        }\r\n\r\n        incvReward = _balances[account]\r\n        .mul(incvAccRewardPerToken.sub(_incvPrevAccRewardPerToken[account]))\r\n        .div(1e18)\r\n        .add(_incvRewards[account])\r\n        .sub(incvWithdrawn[account]);\r\n        \r\n        reward = 0;\r\n    }\r\n\r\n    function incvRewardInfo() external view returns (uint256 cBlockNumber, uint256 incvRewardPerBlock, uint256 incvRewardFinishBlock, uint256 incvRewardFinishTime, uint256 incvRewardLockTime) {\r\n        cBlockNumber = blockNumber();\r\n        incvRewardFinishBlock = incvFinishBlock;\r\n        incvRewardPerBlock = _incvRewardPerBlock.div(1e18);\r\n        if( cBlockNumber < incvFinishBlock){\r\n            incvRewardFinishTime = block.timestamp.add(incvFinishBlock.sub(cBlockNumber).mul(15));\r\n        }else{\r\n            incvRewardFinishTime = block.timestamp.sub(cBlockNumber.sub(incvFinishBlock).mul(15));\r\n        }\r\n        incvRewardLockTime=incvStartReleasingTime;\r\n    }\r\n\r\n\r\n    // expected reward,\r\n    // please note this is only expectation, because total balance may changed during the day\r\n    function expectedRewardsToday(uint256 amount) external view returns (uint256 reward, uint256 incvReward) {\r\n        reward = 0;\r\n        uint256 totalIncvRewardPerDay = _incvRewardPerBlock * 5760;\r\n        incvReward =  totalIncvRewardPerDay.div(_totalStaked.add(amount)).mul(amount).div(1e18);\r\n    }\r\n\r\n    function lastUpdateBlock() external view returns(uint256) {\r\n        return _lastUpdateBlock;\r\n    }\r\n\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function totalStaked() external view returns (uint256) {\r\n        return _totalStaked;\r\n    }\r\n\r\n    function blockNumber() public view returns (uint256) {\r\n       return block.number;\r\n    }\r\n    \r\n    function getCurrentTime() public view returns(uint256){\r\n        return block.timestamp;\r\n    }\r\n    \r\n    function getVestedAmount(uint256 lockedAmount, uint256 time) internal  view returns(uint256){\r\n        \r\n        // if time < StartReleasingTime: then return 0\r\n        if(time < incvStartReleasingTime){\r\n            return 0;\r\n        }\r\n\r\n        // if locked amount 0 return 0\r\n        if (lockedAmount == 0){\r\n            return 0;\r\n        }\r\n\r\n        // elapsedBatchCount = ((time - startReleasingTime) / batchPeriod) + 1\r\n        uint256 elapsedBatchCount =\r\n        time.sub(incvStartReleasingTime)\r\n        .div(incvBatchPeriod)\r\n        .add(1);\r\n\r\n        // vestedAmount = lockedAmount  * elapsedBatchCount / batchCount\r\n        uint256  vestedAmount =\r\n        lockedAmount\r\n        .mul(elapsedBatchCount)\r\n        .div(incvBatchCount);\r\n\r\n        if(vestedAmount > lockedAmount){\r\n            vestedAmount = lockedAmount;\r\n        }\r\n\r\n        return vestedAmount;\r\n    }\r\n    \r\n    \r\n    function incvRewardClaim() public returns(uint256 amount){\r\n        updateReward(msg.sender);\r\n        amount = getVestedAmount(_incvRewards[msg.sender], getCurrentTime()).sub(incvWithdrawn[msg.sender]);\r\n        \r\n        if(amount > 0){\r\n            incvWithdrawn[msg.sender] = incvWithdrawn[msg.sender].add(amount);\r\n\r\n            courtToken.mint(msg.sender, amount);\r\n\r\n            emit ClaimIncentiveReward(msg.sender, amount);\r\n        }\r\n    }\r\n    \r\n    function getBeneficiaryInfo(address ibeneficiary) external view\r\n    returns(address beneficiary,\r\n        uint256 totalLocked,\r\n        uint256 withdrawn,\r\n        uint256 releasableAmount,\r\n        uint256 nextBatchTime,\r\n        uint256 currentTime){\r\n\r\n        beneficiary = ibeneficiary;\r\n        currentTime = getCurrentTime();\r\n        \r\n        totalLocked = _incvRewards[ibeneficiary];\r\n        withdrawn = incvWithdrawn[ibeneficiary];\r\n        ( , uint256 incvReward) = rewards(ibeneficiary);\r\n        releasableAmount = getVestedAmount(incvReward, getCurrentTime()).sub(incvWithdrawn[beneficiary]);\r\n        nextBatchTime = getIncNextBatchTime(incvReward, ibeneficiary, currentTime);\r\n        \r\n    }\r\n    \r\n    function getIncNextBatchTime(uint256 lockedAmount, address beneficiary, uint256 time) internal view returns(uint256){\r\n\r\n        // if total vested equal to total locked then return 0\r\n        if(getVestedAmount(lockedAmount, time) == _incvRewards[beneficiary]){\r\n            return 0;\r\n        }\r\n\r\n        // if time less than startReleasingTime: then return sartReleasingTime\r\n        if(time <= incvStartReleasingTime){\r\n            return incvStartReleasingTime;\r\n        }\r\n\r\n        // find the next batch time\r\n        uint256 elapsedBatchCount =\r\n        time.sub(incvStartReleasingTime)\r\n        .div(incvBatchPeriod)\r\n        .add(1);\r\n\r\n        uint256 nextBatchTime =\r\n        elapsedBatchCount\r\n        .mul(incvBatchPeriod)\r\n        .add(incvStartReleasingTime);\r\n\r\n        return nextBatchTime;\r\n\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"ClaimIncentiveReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"ClaimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"CourtStakeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"incvRewardPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"incvRewardFinsishBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"incvLockTime\",\"type\":\"uint256\"}],\"name\":\"StakeParametersChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"}],\"name\":\"StakeRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"incvRewardsPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incvRewardsPeriodInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iLockTime\",\"type\":\"uint256\"}],\"name\":\"changeStakeParameters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"courtStakeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"courtToken\",\"outputs\":[{\"internalType\":\"contract IMERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"expectedRewardsToday\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incvReward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"ibeneficiary\",\"type\":\"address\"}],\"name\":\"getBeneficiaryInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextBatchTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"incvBatchCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"incvBatchPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"incvFinishBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"incvRewardClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"incvRewardInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incvRewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incvRewardFinishBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incvRewardFinishTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incvRewardLockTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"incvStartReleasingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"incvWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUpdateBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incvReward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"courtStakeAdd\",\"type\":\"address\"}],\"name\":\"setCourtStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeIncvRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claim\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"updateReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CourtFarming_RoomStake","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://54f36945a0cce5ed5d391e87ffed604f3c92ad4ab6b3c77fed4f83f75b02e0af"}]}