{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity >= 0.8.0;\r\n\r\ninterface ERC20 {\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function decimals() external returns (uint8);\r\n}\r\n\r\nstruct Order {\r\n    address baseTkn;\r\n    address quoteTkn;\r\n    uint8 baseDecimals;\r\n    bool buying;\r\n    address owner;\r\n    uint expires; // timestamp\r\n    uint baseAmt;\r\n    uint price;\r\n    uint minBaseAmt;\r\n}\r\n\r\ncontract Board {\r\n    event Make(uint id, Order order);\r\n    event Take(address sender, uint id, uint baseAmt, uint quoteAmt);\r\n    event Cancel(address sender, uint id);\r\n\r\n    uint private next = 1;\r\n\r\n    mapping (uint => bytes32) public orders;\r\n\r\n    uint constant public TTL = 30 * 24 * 60 * 60; // 30 days\r\n\r\n    function make(Order calldata o) external returns (uint id) {\r\n        require(o.owner == msg.sender, 'board/not-owner');\r\n        require(o.expires > block.timestamp, 'board/too-late');\r\n        require(o.expires <= block.timestamp + TTL, 'board/too-long');\r\n        require(o.baseAmt >= o.minBaseAmt, 'board/min-base-too-big');\r\n        id = next++;\r\n        orders[id] = getHash(o);\r\n        emit Make(id, o);\r\n    }\r\n\r\n    function take(uint id, uint baseAmt, Order calldata o) external {\r\n        require(orders[id] == getHash(o), 'board/wrong-hash');\r\n        require(o.expires > block.timestamp, 'board/expired');\r\n        require(baseAmt <= o.baseAmt, 'board/base-too-big');\r\n        require(baseAmt >= o.minBaseAmt || baseAmt == o.baseAmt, 'board/base-too-small');\r\n\r\n        uint one = 10 ** uint(o.baseDecimals);\r\n        uint rounding = !o.buying && (baseAmt * o.price) % one > 0 ? one : 0;\r\n        uint quoteAmt = (baseAmt * o.price + rounding) / one;\r\n\r\n        if(baseAmt < o.baseAmt) {\r\n            Order memory n = o;\r\n            n.baseAmt = n.baseAmt - baseAmt;\r\n            orders[id] = getHash(n);\r\n        } else {\r\n            delete orders[id];\r\n        }\r\n\r\n        emit Take(msg.sender, id, baseAmt, quoteAmt);\r\n\r\n        if(o.buying) {\r\n            safeTransferFrom(ERC20(o.baseTkn), msg.sender, o.owner, baseAmt);\r\n            safeTransferFrom(ERC20(o.quoteTkn), o.owner, msg.sender, quoteAmt);\r\n\r\n        } else {\r\n            safeTransferFrom(ERC20(o.baseTkn), o.owner, msg.sender, baseAmt);\r\n            safeTransferFrom(ERC20(o.quoteTkn), msg.sender, o.owner, quoteAmt);\r\n        }\r\n    }\r\n\r\n    function cancel(uint id, Order calldata o) external {\r\n        require(orders[id] == getHash(o), 'board/wrong-hash');\r\n        require(o.expires <= block.timestamp || o.owner == msg.sender, 'board/invalid-cancel');\r\n        delete orders[id];\r\n        emit Cancel(msg.sender, id);\r\n    }\r\n\r\n    function safeTransferFrom(ERC20 token, address from, address to, uint amount) private {\r\n        uint256 size;\r\n        assembly { size := extcodesize(token) }\r\n        require(size > 0, \"board/not-a-contract\");\r\n\r\n        bytes memory data = abi.encodeWithSelector(\r\n            ERC20(token).transferFrom.selector, from, to, amount\r\n        );\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"board/token-call-failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"board/transfer-failed\");\r\n        }\r\n    }\r\n\r\n    function getHash(Order memory o) private pure returns (bytes32) {\r\n        return keccak256(abi.encode(\r\n            o.baseTkn, o.quoteTkn, o.baseDecimals,\r\n            o.buying, o.owner, o.expires, o.baseAmt,\r\n            o.price, o.minBaseAmt\r\n        ));\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"baseTkn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteTkn\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"baseDecimals\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"buying\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBaseAmt\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"Make\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quoteAmt\",\"type\":\"uint256\"}],\"name\":\"Take\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TTL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"baseTkn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteTkn\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"baseDecimals\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"buying\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBaseAmt\",\"type\":\"uint256\"}],\"internalType\":\"struct Order\",\"name\":\"o\",\"type\":\"tuple\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"baseTkn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteTkn\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"baseDecimals\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"buying\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBaseAmt\",\"type\":\"uint256\"}],\"internalType\":\"struct Order\",\"name\":\"o\",\"type\":\"tuple\"}],\"name\":\"make\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAmt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"baseTkn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteTkn\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"baseDecimals\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"buying\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBaseAmt\",\"type\":\"uint256\"}],\"internalType\":\"struct Order\",\"name\":\"o\",\"type\":\"tuple\"}],\"name\":\"take\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Board","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://18ce82860f237429af9952794f306dc2759fdd55f4f5762f55c7da7e832b910e"}]}