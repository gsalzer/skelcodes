{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/******************************************/\r\n/*       ChainLink starts here            */\r\n/******************************************/\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\n/******************************************/\r\n/*       Benchmark starts here            */\r\n/******************************************/\r\n\r\nabstract contract Benchmark \r\n\r\n{\r\n    function rebase(uint256 supplyDelta, bool increaseSupply) external virtual returns (uint256);\r\n    \r\n    function transfer(address to, uint256 value) external virtual returns (bool);\r\n    \r\n    function balanceOf(address who) external virtual view returns (uint256);\r\n\r\n    function totalSupply() external virtual view returns (uint256);\r\n}\r\n\r\n/******************************************/\r\n/*       BenchmarkSync starts here        */\r\n/******************************************/\r\n\r\nabstract contract BenchmarkSync \r\n\r\n{\r\n    function syncPools() external virtual;\r\n}\r\n\r\n/******************************************/\r\n/*       BenchmarkOracle starts here      */\r\n/******************************************/\r\n\r\ncontract BenchmarkOracle {\r\n\r\n    AggregatorV3Interface internal priceFeed;\r\n    int256 public lastOracleVxx;\r\n\r\n    address owner1;\r\n    address owner2;\r\n    address owner3;\r\n    address owner4;\r\n    address owner5;\r\n\r\n    address public standard;\r\n    uint256 public standardRewards;\r\n    \r\n    Benchmark public bm;\r\n    BenchmarkSync public sync;\r\n\r\n    Transaction public pendingRebasement;\r\n    uint256 internal lastRebasementTime;\r\n\r\n    struct Transaction {\r\n        address initiator;\r\n        int256 rebaseOne;\r\n        int256 rebaseTwo;\r\n        bool executed;\r\n    }\r\n\r\n    modifier isOwner() \r\n    {\r\n        require (msg.sender == owner1 || msg.sender == owner2 || msg.sender == owner3 || msg.sender == owner4 || msg.sender == owner5);\r\n        _;\r\n    }\r\n\r\n    constructor(address _benchmark, address _standard, address _sync)\r\n    {\r\n        /**\r\n        * Network: Ethereum\r\n        * Aggregator: VXX\r\n        * Address: 0xC18F2a0C166A091fcD5E2051EFEFD63c4f4A27E9\r\n        */\r\n        priceFeed = AggregatorV3Interface(0xC18F2a0C166A091fcD5E2051EFEFD63c4f4A27E9);\r\n        lastOracleVxx = getOracleVxx();\r\n\r\n        owner1 = 0x2c155e07a1Ee62f229c9968B7A903dC69436e3Ec;\r\n        owner2 = 0xdBd39C1b439ba2588Dab47eED41b8456486F4Ba5;\r\n        owner3 = 0x90d33D152A422D63e0Dd1c107b7eD3943C06ABA8;\r\n        owner4 = 0xE12E421D5C4b4D8193bf269BF94DC8dA28798BA9;\r\n        owner5 = 0xD4B33C108659A274D8C35b60e6BfCb179a2a6D4C;\r\n        standard = _standard;\r\n        bm = Benchmark(_benchmark);\r\n        sync = BenchmarkSync(_sync);\r\n\r\n        \r\n        pendingRebasement.executed = true;\r\n    }\r\n\r\n    /**\r\n     * Returns the latest price\r\n     */\r\n    function getOracleVxx() public view returns (int) {\r\n        (\r\n            uint80 roundID, \r\n            int price,\r\n            uint startedAt,\r\n            uint timeStamp,\r\n            uint80 answeredInRound\r\n        ) = priceFeed.latestRoundData();\r\n        return price;\r\n    }\r\n\r\n    /**\r\n     * Returns absolute value.\r\n     */\r\n    function abs(int x) private pure returns (int) {\r\n    return x >= 0 ? x : -x;\r\n    }\r\n    \r\n    /**\r\n     * @dev Initiates a rebasement proposal that has to be confirmed by another owner of the contract to be executed. Can't be called while another proposal is pending.\r\n     * @param _rebaseOne Divergence from the target price.\r\n     * @param _rebaseTwo VXX difference.\r\n     */\r\n    function initiateRebasement(int256 _rebaseOne, int256 _rebaseTwo) public isOwner\r\n    {\r\n        require (pendingRebasement.executed == true, \"Pending rebasement.\");\r\n        require (lastRebasementTime < (block.timestamp - 54000), \"Rebasement has already occured within the past 15 hours.\");\r\n\r\n        Transaction storage txn = pendingRebasement; \r\n        txn.initiator = msg.sender;\r\n        txn.rebaseOne = _rebaseOne;\r\n        txn.rebaseTwo = _rebaseTwo;\r\n        txn.executed = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Confirms and executes a pending rebasement proposal. Prohibits further proposals for 15 hours. Distribute Standard rewards and sync liquidity pools.\r\n     * @param _overrule True if Chainlink Oracle should be ignored.\r\n     * @param _currentVxx Manually provide current VXX value if Chainlink Oracle is ignored.\r\n     */\r\n    function confirmRebasement(bool _overrule, int256 _currentVxx) public isOwner\r\n    {\r\n        require (pendingRebasement.initiator != msg.sender, \"Initiator can't confirm rebasement.\");\r\n        require (pendingRebasement.executed == false, \"Rebasement already executed.\");\r\n        int256 oracleRebaseTwo;\r\n\r\n        if (_overrule == false) {\r\n            oracleRebaseTwo = ((getOracleVxx() - lastOracleVxx) * 1e10) / lastOracleVxx;   \r\n            oracleRebaseTwo = oracleRebaseTwo < 0 ? int(0) : oracleRebaseTwo;\r\n            require (oracleRebaseTwo == pendingRebasement.rebaseTwo, \"VXX rebases don't match!\");\r\n            lastOracleVxx = getOracleVxx();\r\n        } else {\r\n            oracleRebaseTwo = pendingRebasement.rebaseTwo;\r\n            require(_currentVxx != 0, \"Current VXX not provided.\");\r\n            lastOracleVxx = _currentVxx;\r\n        }  \r\n\r\n        pendingRebasement.executed = true;\r\n        lastRebasementTime = block.timestamp;\r\n        \r\n        int256 rebasePercentage = pendingRebasement.rebaseOne + oracleRebaseTwo;\r\n        bool increaseSupply = rebasePercentage >= 0 ? true : false;\r\n        uint256 absolutePercentage = uint256(abs(rebasePercentage));\r\n        uint256 supplyDelta = bm.totalSupply() * absolutePercentage / 1e10;\r\n\r\n        bm.rebase(supplyDelta, increaseSupply);\r\n        bm.transfer(standard, standardRewards);\r\n\r\n        sync.syncPools();\r\n    }\r\n\r\n    /**\r\n     * @dev View Supply delta and sign for rebasement verification.\r\n     * @param _overrule True if Chainlink Oracle should be ignored.\r\n     */\r\n    function verifyRebasement(bool _overrule) public view returns (uint256, bool)\r\n    {\r\n        int256 oracleRebaseTwo;\r\n\r\n        if (_overrule == false) {\r\n            oracleRebaseTwo = ((getOracleVxx() - lastOracleVxx) * 1e10) / lastOracleVxx;   \r\n            oracleRebaseTwo = oracleRebaseTwo < 0 ? int(0) : oracleRebaseTwo;\r\n            require (oracleRebaseTwo == pendingRebasement.rebaseTwo, \"VXX rebases don't match!\");\r\n        } else {\r\n            oracleRebaseTwo = pendingRebasement.rebaseTwo;\r\n        }  \r\n        \r\n        int256 rebasePercentage = pendingRebasement.rebaseOne + oracleRebaseTwo;\r\n        bool increaseSupply = rebasePercentage >= 0 ? true : false;\r\n        uint256 absolutePercentage = uint256(abs(rebasePercentage));\r\n        uint256 supplyDelta = bm.totalSupply() * absolutePercentage / 1e10;\r\n\r\n        return(supplyDelta, increaseSupply);\r\n    }\r\n\r\n    /**\r\n     * @dev Denies a pending rebasement proposal and allows the creation of a new proposal.\r\n     */\r\n    function denyRebasement() public isOwner\r\n    {\r\n        require (pendingRebasement.executed == false, \"Rebasement already executed.\");\r\n        \r\n        pendingRebasement.executed = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Change Standard staking rewards. \r\n     * @param _standardRewards New amount.\r\n     */\r\n    function setStandardRewards(uint256 _standardRewards) public isOwner {\r\n        standardRewards = _standardRewards;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove all MARK deposited on this contract. \r\n     */\r\n    function withdrawMark() public {\r\n        require (msg.sender == 0x2c155e07a1Ee62f229c9968B7A903dC69436e3Ec || msg.sender == 0xdBd39C1b439ba2588Dab47eED41b8456486F4Ba5, \"Only Masterchief can withdraw.\");\r\n        bm.transfer(msg.sender, bm.balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @dev Change the contract for pool synchronization. \r\n     */\r\n    function setSyncContract(address _sync) public isOwner {\r\n        sync = BenchmarkSync(_sync);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_benchmark\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_standard\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sync\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"bm\",\"outputs\":[{\"internalType\":\"contract Benchmark\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_overrule\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"_currentVxx\",\"type\":\"int256\"}],\"name\":\"confirmRebasement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denyRebasement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracleVxx\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_rebaseOne\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_rebaseTwo\",\"type\":\"int256\"}],\"name\":\"initiateRebasement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastOracleVxx\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRebasement\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"rebaseOne\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"rebaseTwo\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_standardRewards\",\"type\":\"uint256\"}],\"name\":\"setStandardRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sync\",\"type\":\"address\"}],\"name\":\"setSyncContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"standardRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[{\"internalType\":\"contract BenchmarkSync\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_overrule\",\"type\":\"bool\"}],\"name\":\"verifyRebasement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMark\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BenchmarkOracle","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000067c597624b17b16fb77959217360b7cd1828425300000000000000000000000036b679bd64ed73dbfd88909cdcb892cb66bd4cbb000000000000000000000000b37ad193017715b33e0ce992dd3b4bbeecc0d97e","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://771834c65728e56cabaaf13f8d5124f839d385c0907c4afb8407694c582114fe"}]}