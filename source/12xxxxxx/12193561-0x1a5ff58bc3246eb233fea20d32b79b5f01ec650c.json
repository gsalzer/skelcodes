{"status":"1","message":"OK","result":[{"SourceCode":"// File: localhost/contracts/interfaces/ICollateralRegistry.sol\r\n\r\n// SPDX-License-Identifier: bsl-1.1\r\n\r\ninterface ICollateralRegistry {\r\n    function addCollateral ( address asset ) external;\r\n    function collateralId ( address ) external view returns ( uint256 );\r\n    function collaterals (  ) external view returns ( address[] memory );\r\n    function removeCollateral ( address asset ) external;\r\n    function vaultParameters (  ) external view returns ( address );\r\n    function isCollateral ( address asset ) external view returns ( bool );\r\n    function collateralList ( uint id ) external view returns ( address );\r\n    function collateralsCount (  ) external view returns ( uint );\r\n}\r\n\r\n// File: localhost/contracts/interfaces/IVault.sol\r\n\r\ninterface IVault {\r\n    function DENOMINATOR_1E2 (  ) external view returns ( uint256 );\r\n    function DENOMINATOR_1E5 (  ) external view returns ( uint256 );\r\n    function borrow ( address asset, address user, uint256 amount ) external returns ( uint256 );\r\n    function calculateFee ( address asset, address user, uint256 amount ) external view returns ( uint256 );\r\n    function changeOracleType ( address asset, address user, uint256 newOracleType ) external;\r\n    function chargeFee ( address asset, address user, uint256 amount ) external;\r\n    function col (  ) external view returns ( address );\r\n    function colToken ( address, address ) external view returns ( uint256 );\r\n    function collaterals ( address, address ) external view returns ( uint256 );\r\n    function debts ( address, address ) external view returns ( uint256 );\r\n    function depositCol ( address asset, address user, uint256 amount ) external;\r\n    function depositEth ( address user ) external payable;\r\n    function depositMain ( address asset, address user, uint256 amount ) external;\r\n    function destroy ( address asset, address user ) external;\r\n    function getTotalDebt ( address asset, address user ) external view returns ( uint256 );\r\n    function lastUpdate ( address, address ) external view returns ( uint256 );\r\n    function liquidate ( address asset, address positionOwner, uint256 mainAssetToLiquidator, uint256 colToLiquidator, uint256 mainAssetToPositionOwner, uint256 colToPositionOwner, uint256 repayment, uint256 penalty, address liquidator ) external;\r\n    function liquidationBlock ( address, address ) external view returns ( uint256 );\r\n    function liquidationFee ( address, address ) external view returns ( uint256 );\r\n    function liquidationPrice ( address, address ) external view returns ( uint256 );\r\n    function oracleType ( address, address ) external view returns ( uint256 );\r\n    function repay ( address asset, address user, uint256 amount ) external returns ( uint256 );\r\n    function spawn ( address asset, address user, uint256 _oracleType ) external;\r\n    function stabilityFee ( address, address ) external view returns ( uint256 );\r\n    function tokenDebts ( address ) external view returns ( uint256 );\r\n    function triggerLiquidation ( address asset, address positionOwner, uint256 initialPrice ) external;\r\n    function update ( address asset, address user ) external;\r\n    function usdp (  ) external view returns ( address );\r\n    function vaultParameters (  ) external view returns ( address );\r\n    function weth (  ) external view returns ( address payable );\r\n    function withdrawCol ( address asset, address user, uint256 amount ) external;\r\n    function withdrawEth ( address user, uint256 amount ) external;\r\n    function withdrawMain ( address asset, address user, uint256 amount ) external;\r\n}\r\n\r\n// File: localhost/contracts/CDPRegistry.sol\r\n\r\n/*\r\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\r\n*/\r\npragma solidity ^0.7.1;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\ncontract CDPRegistry {\r\n\r\n    struct CDP {\r\n        address asset;\r\n        address owner;\r\n    }\r\n\r\n    mapping (address => address[]) cdpList;\r\n    mapping (address => mapping (address => uint)) cdpIndex;\r\n\r\n    IVault public immutable vault;\r\n    ICollateralRegistry public immutable cr;\r\n\r\n    event Added(address indexed asset, address indexed owner);\r\n    event Removed(address indexed asset, address indexed owner);\r\n\r\n    constructor (address _vault, address _collateralRegistry) {\r\n        require(_vault != address(0) && _collateralRegistry != address(0), \"Unit Protocol: ZERO_ADDRESS\");\r\n        vault = IVault(_vault);\r\n        cr = ICollateralRegistry(_collateralRegistry);\r\n    }\r\n\r\n    function checkpoint(address asset, address owner) public {\r\n        require(asset != address(0) && owner != address(0), \"Unit Protocol: ZERO_ADDRESS\");\r\n\r\n        bool listed = isListed(asset, owner);\r\n        bool alive = isAlive(asset, owner);\r\n\r\n        if (alive && !listed) {\r\n            _addCdp(asset, owner);\r\n        } else if (listed && !alive) {\r\n            _removeCdp(asset, owner);\r\n        }\r\n    }\r\n\r\n    function batchCheckpointForAsset(address asset, address[] calldata owners) external {\r\n        for (uint i = 0; i < owners.length; i++) {\r\n            checkpoint(asset, owners[i]);\r\n        }\r\n    }\r\n\r\n    function batchCheckpoint(address[] calldata assets, address[] calldata owners) external {\r\n        require(assets.length == owners.length, \"Unit Protocol: ARGUMENTS_LENGTH_MISMATCH\");\r\n        for (uint i = 0; i < owners.length; i++) {\r\n            checkpoint(assets[i], owners[i]);\r\n        }\r\n    }\r\n\r\n    function isAlive(address asset, address owner) public view returns (bool) {\r\n        return vault.debts(asset, owner) != 0;\r\n    }\r\n\r\n    function isListed(address asset, address owner) public view returns (bool) {\r\n        if (cdpList[asset].length == 0) { return false; }\r\n        return cdpIndex[asset][owner] != 0 || cdpList[asset][0] == owner;\r\n    }\r\n\r\n    function _removeCdp(address asset, address owner) internal {\r\n        uint id = cdpIndex[asset][owner];\r\n\r\n        delete cdpIndex[asset][owner];\r\n\r\n        uint lastId = cdpList[asset].length - 1;\r\n\r\n        if (id != lastId) {\r\n            address lastOwner = cdpList[asset][lastId];\r\n            cdpList[asset][id] = lastOwner;\r\n            cdpIndex[asset][lastOwner] = id;\r\n        }\r\n\r\n        cdpList[asset].pop();\r\n\r\n        emit Removed(asset, owner);\r\n    }\r\n\r\n    function _addCdp(address asset, address owner) internal {\r\n        cdpIndex[asset][owner] = cdpList[asset].length;\r\n        cdpList[asset].push(owner);\r\n\r\n        emit Added(asset, owner);\r\n    }\r\n\r\n    function getCdpsByCollateral(address asset) external view returns (CDP[] memory cdps) {\r\n        address[] memory owners = cdpList[asset];\r\n        cdps = new CDP[](owners.length);\r\n        for (uint i = 0; i < owners.length; i++) {\r\n            cdps[i] = CDP(asset, owners[i]);\r\n        }\r\n    }\r\n\r\n    function getCdpsByOwner(address owner) external view returns (CDP[] memory r) {\r\n        address[] memory assets = cr.collaterals();\r\n        CDP[] memory cdps = new CDP[](assets.length);\r\n        uint actualCdpsCount;\r\n\r\n        for (uint i = 0; i < assets.length; i++) {\r\n            if (isListed(assets[i], owner)) {\r\n                cdps[actualCdpsCount++] = CDP(assets[i], owner);\r\n            }\r\n        }\r\n\r\n        r = new CDP[](actualCdpsCount);\r\n\r\n        for (uint i = 0; i < actualCdpsCount; i++) {\r\n            r[i] = cdps[i];\r\n        }\r\n\r\n    }\r\n\r\n    function getAllCdps() external view returns (CDP[] memory r) {\r\n        uint totalCdpCount = getCdpsCount();\r\n        \r\n        uint cdpCount;\r\n\r\n        r = new CDP[](totalCdpCount);\r\n\r\n        address[] memory assets = cr.collaterals();\r\n        for (uint i = 0; i < assets.length; i++) {\r\n            address[] memory owners = cdpList[assets[i]];\r\n            for (uint j = 0; j < owners.length; j++) {\r\n                r[cdpCount++] = CDP(assets[i], owners[j]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getCdpsCount() public view returns (uint totalCdpCount) {\r\n        address[] memory assets = cr.collaterals();\r\n        for (uint i = 0; i < assets.length; i++) {\r\n            totalCdpCount += cdpList[assets[i]].length;\r\n        }\r\n    }\r\n\r\n    function getCdpsCountForCollateral(address asset) public view returns (uint) {\r\n        return cdpList[asset].length;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Added\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Removed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"}],\"name\":\"batchCheckpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"}],\"name\":\"batchCheckpointForAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"checkpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cr\",\"outputs\":[{\"internalType\":\"contract ICollateralRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllCdps\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct CDPRegistry.CDP[]\",\"name\":\"r\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getCdpsByCollateral\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct CDPRegistry.CDP[]\",\"name\":\"cdps\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getCdpsByOwner\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct CDPRegistry.CDP[]\",\"name\":\"r\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCdpsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCdpCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getCdpsCountForCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isAlive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CDPRegistry","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b1cff81b9305166ff1efc49a129ad2afcd7bcf190000000000000000000000003db39b538db1123389c77f888a213f1a6dd22ef3","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://75da99575f0f07e069c790e5b01c3ceb08720423c5f635362ea8d635b1e858c7"}]}