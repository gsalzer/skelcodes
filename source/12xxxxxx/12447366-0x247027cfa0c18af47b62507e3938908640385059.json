{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.2.1 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v3.4.1\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v3.4.1\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/math/SafeMath.sol@v3.4.1\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v3.4.1\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v3.4.1\r\n\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/SafeERC20.sol@v3.4.1\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Whitelist.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\ncontract Whitelist {\r\n\r\n    // pool index => whether or not whitelist is enabled\r\n    mapping(uint => bool) public enableWhiteList;\r\n\r\n    // pool index => account => whether or not in white list\r\n    mapping(uint => mapping(address => bool)) public whitelist;\r\n\r\n    function _setEnableWhiteList(uint index, bool v) internal {\r\n        enableWhiteList[index] = v;\r\n    }\r\n\r\n    function _addWhitelist(uint index, address[] memory whitelist_) internal {\r\n        for (uint i = 0; i < whitelist_.length; i++) {\r\n            whitelist[index][whitelist_[i]] = true;\r\n        }\r\n    }\r\n\r\n    function _removeWhitelist(uint index, address[] memory whitelist_) internal {\r\n        for (uint i = 0; i < whitelist_.length; i++) {\r\n            delete whitelist[index][whitelist_[i]];\r\n        }\r\n    }\r\n\r\n    function _isWhitelistEnabled(uint index) internal view returns (bool) {\r\n        return enableWhiteList[index];\r\n    }\r\n\r\n    function _inWhitelist(uint index, address target) internal view returns (bool) {\r\n        return whitelist[index][target];\r\n    }\r\n\r\n    modifier checkInWhitelist(uint index, address target) {\r\n        if (_isWhitelistEnabled(index)) {\r\n            require(_inWhitelist(index, target), \"ADDRESS SHOULD IN WHITELIST\");\r\n        }\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/PoolToken.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\ncontract PoolToken {\r\n\r\n    struct TokenInfo {\r\n        address payable creator;\r\n        // address of token0\r\n        address token0;\r\n        // address of token1\r\n        address token1;\r\n        // total amount of token0\r\n        uint amountTotal0;\r\n        // total amount of token1\r\n        uint amountTotal1;\r\n        // maximum allocation amount of token1 per address\r\n        uint maxAllocToken1;\r\n        // swapped amount of token0\r\n        uint amountSwap0;\r\n        // swapped amount of token1\r\n        uint amountSwap1;\r\n    }\r\n\r\n    TokenInfo[] public tokenInfos;\r\n\r\n    function getPoolCount() public view returns (uint) {\r\n        return tokenInfos.length;\r\n    }\r\n\r\n    function _setPoolToken(\r\n        address payable creator,\r\n        address token0,\r\n        address token1,\r\n        uint amountTotal0,\r\n        uint amountTotal1,\r\n        uint maxAllocToken1\r\n    ) internal returns (TokenInfo memory) {\r\n        require(token0 != token1, \"TOKEN0 AND TOKEN1 SHOULD BE DIFFERENT\");\r\n        require(amountTotal0 != 0, \"INVALID TOTAL AMOUNT OF TOKEN0\");\r\n        require(amountTotal1 != 0, \"INVALID TOTAL AMOUNT OF TOKEN1\");\r\n\r\n        TokenInfo memory tokenInfo;\r\n        tokenInfo.creator = creator;\r\n        tokenInfo.token0 = token0;\r\n        tokenInfo.token1 = token1;\r\n        tokenInfo.amountTotal0 = amountTotal0;\r\n        tokenInfo.amountTotal1 = amountTotal1;\r\n        tokenInfo.maxAllocToken1 = maxAllocToken1;\r\n        tokenInfo.amountSwap0 = 0;\r\n        tokenInfo.amountSwap1 = 0;\r\n        tokenInfos.push(tokenInfo);\r\n\r\n        return tokenInfo;\r\n    }\r\n\r\n    modifier poolShouldExist(uint index) {\r\n        require(index < tokenInfos.length, \"POOL SHOULD EXIST\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/PoolTime.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\ncontract PoolTime {\r\n    struct TimeInfo {\r\n        // timestamp when the pool will open\r\n        uint openAt;\r\n        // timestamp when the pool will close\r\n        uint closeAt;\r\n        // timestamp when users can claim their tokens\r\n        uint claimAt;\r\n    }\r\n\r\n    mapping(uint => TimeInfo) public timeInfos;\r\n\r\n    function _setPoolTime(uint index, uint openAt, uint closeAt, uint claimAt) internal returns (TimeInfo memory) {\r\n        require(openAt >= block.timestamp, \"INVALID OPEN_AT\");\r\n        require(closeAt >= openAt, \"INVALID CLOSE_AT\");\r\n        require(claimAt == 0 || claimAt >= closeAt, \"INVALID CLAIM_AT\");\r\n\r\n        TimeInfo memory timeInfo;\r\n        timeInfo.openAt = openAt;\r\n        timeInfo.closeAt = closeAt;\r\n        timeInfo.claimAt = claimAt;\r\n        timeInfos[index] = timeInfo;\r\n\r\n        return timeInfo;\r\n    }\r\n\r\n    function _isInstantClaim(uint index) internal view returns (bool) {\r\n        return timeInfos[index].claimAt == 0;\r\n    }\r\n\r\n    modifier poolShouldClose(uint index) {\r\n        require(timeInfos[index].closeAt <= block.timestamp, \"POOL SHOULD BE CLOSED\");\r\n        _;\r\n    }\r\n\r\n    modifier canClaim(uint index) {\r\n        require(timeInfos[index].claimAt == 0 || timeInfos[index].claimAt <= block.timestamp, \"CANNOT CLAIM\");\r\n        _;\r\n    }\r\n\r\n    modifier poolShouldOpen(uint index) {\r\n        require(\r\n            timeInfos[index].openAt <= block.timestamp && block.timestamp < timeInfos[index].closeAt,\r\n            \"POOL SHOULD BE OPENED\"\r\n        );\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/TokenFixedSwap.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract TokenFixedSwap is Ownable, Whitelist, PoolToken, PoolTime {\r\n    using SafeMath for uint;\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct Pool {\r\n        // token receiver\r\n        address payable creator;\r\n        // address of token0\r\n        address token0;\r\n        // address of token1\r\n        address token1;\r\n        // total amount of token0\r\n        uint amountTotal0;\r\n        // total amount of token1\r\n        uint amountTotal1;\r\n        // maximum allocation amount of token1 per address\r\n        uint maxAllocToken1;\r\n        // the timestamp in seconds the pool will open\r\n        uint openAt;\r\n        // the timestamp in seconds the pool will be closed\r\n        uint closeAt;\r\n        // the delay timestamp in seconds when buyers can claim after pool filled\r\n        uint claimAt;\r\n    }\r\n\r\n    // team address => pool index => whether or not pool has been claimed\r\n    mapping(address => mapping(uint => bool)) public poolClaimed;\r\n    // user address => pool index => whether or not my pool has been claimed\r\n    mapping(address => mapping(uint => bool)) public myClaimed;\r\n    // user address => pool index => swapped amount of token0\r\n    mapping(address => mapping(uint => uint)) public myAmountSwapped0;\r\n    // user address => pool index => swapped amount of token1\r\n    mapping(address => mapping(uint => uint)) public myAmountSwapped1;\r\n\r\n    event Created(uint indexed index, address indexed sender, Pool pool);\r\n    event Swapped(uint indexed index, address indexed sender, uint amount0, uint amount1);\r\n    event PoolClaimed(uint indexed index, address indexed sender, uint amount0);\r\n    event UserClaimed(uint indexed index, address indexed sender, uint amount0);\r\n\r\n    function create(Pool memory pool, address[] memory whitelist_) public onlyOwner {\r\n        // transfer amount of token0 to this contract\r\n        IERC20 _token0 = IERC20(pool.token0);\r\n        // uint token0BalanceBefore = _token0.balanceOf(address(this));\r\n        // _token0.safeTransferFrom(pool.creator, address(this), pool.amountTotal0);\r\n        // require(\r\n        //     _token0.balanceOf(address(this)).sub(token0BalanceBefore) == pool.amountTotal0,\r\n        //     \"DON'T SUPPORT DEFLATIONARY TOKEN\"\r\n        // );\r\n        // reset allowance to 0\r\n        _token0.safeApprove(address(this), 0);\r\n\r\n        uint index = getPoolCount();\r\n        super._setEnableWhiteList(index, false);\r\n        super._addWhitelist(index, whitelist_);\r\n        super._setPoolToken(pool.creator, pool.token0, pool.token1, pool.amountTotal0, pool.amountTotal1, pool.maxAllocToken1);\r\n        super._setPoolTime(index, pool.openAt, pool.closeAt, pool.claimAt);\r\n\r\n        emit Created(index, msg.sender, pool);\r\n    }\r\n\r\n    function editTime(uint index, uint openAt, uint closeAt, uint claimAt) public onlyOwner {\r\n        super._setPoolTime(index, openAt, closeAt, claimAt);\r\n    }\r\n\r\n    function setEnableWhiteList(uint index, bool v) public onlyOwner {\r\n        super._setEnableWhiteList(index, v);\r\n    }\r\n\r\n    function swap(uint index, uint amount1) external payable poolShouldExist(index) poolShouldOpen(index) checkInWhitelist(index, msg.sender) {\r\n        TokenInfo memory tokenInfo = tokenInfos[index];\r\n        require(tokenInfo.amountTotal1 > tokenInfo.amountSwap1, \"INSUFFICIENT SWAP AMOUNT\");\r\n\r\n        // check if amount1 is exceeded\r\n        uint excessAmount1 = 0;\r\n        uint _amount1 = tokenInfo.amountTotal1.sub(tokenInfo.amountSwap1);\r\n        if (_amount1 < amount1) {\r\n            excessAmount1 = amount1.sub(_amount1);\r\n        } else {\r\n            _amount1 = amount1;\r\n        }\r\n\r\n        // check if amount0 is exceeded\r\n        uint amount0 = _amount1.mul(tokenInfo.amountTotal0).div(tokenInfo.amountTotal1);\r\n        uint _amount0 = tokenInfo.amountTotal0.sub(tokenInfo.amountSwap0);\r\n        if (_amount0 > amount0) {\r\n            _amount0 = amount0;\r\n        }\r\n\r\n        tokenInfos[index].amountSwap0 = tokenInfo.amountSwap0.add(_amount0);\r\n        tokenInfos[index].amountSwap1 = tokenInfo.amountSwap1.add(_amount1);\r\n        myAmountSwapped0[msg.sender][index] = myAmountSwapped0[msg.sender][index].add(_amount0);\r\n        // check if swapped amount of token1 is exceeded maximum allowance\r\n        if (tokenInfo.maxAllocToken1 != 0) {\r\n            require(\r\n                myAmountSwapped1[msg.sender][index].add(_amount1) <= tokenInfo.maxAllocToken1,\r\n                \"SWAP AMOUNT EXCEEDED\"\r\n            );\r\n            myAmountSwapped1[msg.sender][index] = myAmountSwapped1[msg.sender][index].add(_amount1);\r\n        }\r\n\r\n        // transfer amount of token1 to this contract\r\n        if (tokenInfo.token1 == address(0)) {\r\n            require(msg.value == amount1, \"INVALID MSG.VALUE\");\r\n        } else {\r\n            require(msg.value == 0, \"MSG.VALUE SHOULD BE ZERO\");\r\n            IERC20(tokenInfo.token1).safeTransferFrom(msg.sender, address(this), amount1);\r\n        }\r\n\r\n        if (super._isInstantClaim(index)) {\r\n            if (_amount0 > 0) {\r\n                // send token0 to sender\r\n                if (tokenInfo.token0 == address(0)) {\r\n                    msg.sender.transfer(_amount0);\r\n                } else {\r\n                    IERC20(tokenInfo.token0).safeTransfer(msg.sender, _amount0);\r\n                }\r\n            }\r\n        }\r\n        if (excessAmount1 > 0) {\r\n            // send excess amount of token1 back to sender\r\n            if (tokenInfo.token1 == address(0)) {\r\n                msg.sender.transfer(excessAmount1);\r\n            } else {\r\n                IERC20(tokenInfo.token1).safeTransfer(msg.sender, excessAmount1);\r\n            }\r\n        }\r\n\r\n        // send token1 to creator\r\n        if (_amount1 > 0) {\r\n            if (tokenInfo.token1 == address(0)) {\r\n                tokenInfo.creator.transfer(_amount1);\r\n            } else {\r\n                IERC20(tokenInfo.token1).safeTransfer(tokenInfo.creator, _amount1);\r\n            }\r\n        }\r\n\r\n        emit Swapped(index, msg.sender, _amount0, _amount1);\r\n    }\r\n\r\n    function poolClaim(uint index) external poolShouldExist(index) poolShouldClose(index) canClaim(index) {\r\n        TokenInfo memory tokenInfo = tokenInfos[index];\r\n        require(!poolClaimed[tokenInfo.creator][index], \"POOL CLAIMED\");\r\n        poolClaimed[tokenInfo.creator][index] = true;\r\n\r\n        uint unSwapAmount0 = tokenInfo.amountTotal0.sub(tokenInfo.amountSwap0);\r\n        if (unSwapAmount0 > 0) {\r\n            IERC20(tokenInfo.token0).safeTransfer(tokenInfo.creator, unSwapAmount0);\r\n        }\r\n\r\n        emit PoolClaimed(index, msg.sender, unSwapAmount0);\r\n    }\r\n\r\n    function userClaim(uint index) external poolShouldExist(index) poolShouldClose(index) canClaim(index) {\r\n        TokenInfo memory tokenInfo = tokenInfos[index];\r\n        require(!super._isInstantClaim(index), \"NOT DELAYED CLAIM\");\r\n        require(!myClaimed[msg.sender][index], \"USER CLAIMED\");\r\n        myClaimed[msg.sender][index] = true;\r\n\r\n        if (myAmountSwapped0[msg.sender][index] > 0) {\r\n            // send token0 to sender\r\n            if (tokenInfo.token0 == address(0)) {\r\n                msg.sender.transfer(myAmountSwapped0[msg.sender][index]);\r\n            } else {\r\n                IERC20(tokenInfo.token0).safeTransfer(msg.sender, myAmountSwapped0[msg.sender][index]);\r\n            }\r\n        }\r\n        emit UserClaimed(index, msg.sender, myAmountSwapped0[msg.sender][index]);\r\n    }\r\n\r\n    function addWhitelist(uint index, address[] memory whitelist_) public onlyOwner {\r\n        super._addWhitelist(index, whitelist_);\r\n    }\r\n\r\n    function removeWhitelist(uint index, address[] memory whitelist_) external onlyOwner {\r\n        super._removeWhitelist(index, whitelist_);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAllocToken1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimAt\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct TokenFixedSwap.Pool\",\"name\":\"pool\",\"type\":\"tuple\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"}],\"name\":\"PoolClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"}],\"name\":\"UserClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"whitelist_\",\"type\":\"address[]\"}],\"name\":\"addWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAllocToken1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimAt\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenFixedSwap.Pool\",\"name\":\"pool\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"whitelist_\",\"type\":\"address[]\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimAt\",\"type\":\"uint256\"}],\"name\":\"editTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"enableWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"myAmountSwapped0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"myAmountSwapped1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"myClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"poolClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"whitelist_\",\"type\":\"address[]\"}],\"name\":\"removeWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"v\",\"type\":\"bool\"}],\"name\":\"setEnableWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timeInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"openAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenInfos\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAllocToken1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountSwap0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountSwap1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"userClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TokenFixedSwap","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c0ba0eac740a472bbab1ffbf663a995c8d0cf540e656592d7eb23475b1954127"}]}