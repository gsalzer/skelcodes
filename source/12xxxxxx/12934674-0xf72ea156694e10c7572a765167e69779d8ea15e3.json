{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity 0.8.4;\r\n\r\ninterface INonfungiblePositionManager {\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n    struct CollectParams {\r\n        uint256 tokenId;\r\n        address recipient;\r\n        uint128 amount0Max;\r\n        uint128 amount1Max;\r\n    }\r\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\r\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\r\n    /// recipient The account that should receive the tokens,\r\n    /// amount0Max The maximum amount of token0 to collect,\r\n    /// amount1Max The maximum amount of token1 to collect\r\n    /// @return amount0 The amount of fees collected in token0\r\n    /// @return amount1 The amount of fees collected in token1\r\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\r\n}\r\n\r\n// File contracts/libraries/Position.sol\r\nlibrary Position {\r\n    struct Info {\r\n        uint256 tokenId;\r\n        // duration in which fees can't be claimed\r\n        uint256 cliff;\r\n        // start timestamp\r\n        uint256 start;\r\n        // total lock duration\r\n        uint256 duration;\r\n        // allow fees to be claimed at feeReciever address\r\n        bool allowFeeClaim;\r\n        // allow owner to transfer ownership or update feeReciever\r\n        bool allowBeneficiaryUpdate;\r\n        // address to receive earned fees\r\n        address feeReciever;\r\n        // owner of the position\r\n        address owner;\r\n    }\r\n    \r\n    function isPositionValid(Info memory self) internal view {\r\n        require(self.owner != address(0), \"ULL::OWNER_ZERO_ADDRESS\");\r\n        require(self.duration >= self.cliff, \"ULL::CLIFF_GT_DURATION\");\r\n        require(self.duration > 0, \"ULL::INVALID_DURATION\");\r\n        require((self.start + self.duration) > block.timestamp, \"ULL::INVALID_ENDING_TIME\");\r\n    }\r\n    \r\n    function isOwner(Info memory self) internal view {\r\n        require(self.owner == msg.sender && self.allowBeneficiaryUpdate, \"ULL::NOT_AUTHORIZED\");\r\n    }\r\n    \r\n    function isTokenIdValid(Info memory self, uint256 tokenId) internal pure {\r\n        require(self.tokenId == tokenId, \"ULL::INVALID_TOKEN_ID\");\r\n    }\r\n    \r\n    function isTokenUnlocked(Info memory self) internal view {\r\n        require((self.start + self.duration) < block.timestamp, \"ULL::NOT_UNLOCKED\");\r\n    }\r\n    \r\n    function isFeeClaimAllowed(Info memory self) internal view {\r\n        require(self.allowFeeClaim, \"ULL::FEE_CLAIM_NOT_ALLOWED\");\r\n        require((self.start + self.cliff) < block.timestamp, \"ULL::CLIFF_NOT_ENDED\");\r\n    }\r\n}\r\ncontract UniswapV3LiquidityLocker {\r\n    using Position for Position.Info;\r\n    address private constant POSITION_MANAGER = 0xC36442b4a4522E871399CD717aBDD847Ab11FE88;\r\n    uint128 private constant MAX_UINT128 = type(uint128).max;\r\n    mapping(uint256 => Position.Info) public lockedLiquidityPositions;\r\n    INonfungiblePositionManager private _uniswapNFPositionManager;\r\n    event PositionUpdated(Position.Info position);\r\n    event FeeClaimed(uint256 tokenId);\r\n    event TokenUnlocked(uint256 tokenId);\r\n    constructor() {\r\n        _uniswapNFPositionManager = INonfungiblePositionManager(POSITION_MANAGER);\r\n    }\r\n    function lockLPToken(Position.Info calldata params) external {\r\n        _uniswapNFPositionManager.transferFrom(msg.sender, address(this), params.tokenId);\r\n        params.isPositionValid();\r\n        lockedLiquidityPositions[params.tokenId] = params;\r\n        emit PositionUpdated(params);\r\n    }\r\n    function claimLPFee(uint256 tokenId) external returns (uint256 amount0, uint256 amount1) {\r\n        Position.Info memory llPosition = lockedLiquidityPositions[tokenId];\r\n        llPosition.isTokenIdValid(tokenId);\r\n        llPosition.isFeeClaimAllowed();\r\n        (amount0, amount1) = _uniswapNFPositionManager.collect(\r\n            INonfungiblePositionManager.CollectParams(tokenId, llPosition.feeReciever, MAX_UINT128, MAX_UINT128)\r\n        );\r\n        emit FeeClaimed(tokenId);\r\n    }\r\n    function updateOwner(address owner, uint256 tokenId) external {\r\n        Position.Info storage llPosition = lockedLiquidityPositions[tokenId];\r\n        llPosition.isTokenIdValid(tokenId);\r\n        llPosition.isOwner();\r\n        llPosition.owner = owner;\r\n        emit PositionUpdated(llPosition);\r\n    }\r\n    function updateFeeReciever(address feeReciever, uint256 tokenId) external {\r\n        Position.Info storage llPosition = lockedLiquidityPositions[tokenId];\r\n        llPosition.isTokenIdValid(tokenId);\r\n        llPosition.isOwner();\r\n        llPosition.feeReciever = feeReciever;\r\n        emit PositionUpdated(llPosition);\r\n    }\r\n    function renounceBeneficiaryUpdate(uint256 tokenId) external {\r\n        Position.Info storage llPosition = lockedLiquidityPositions[tokenId];\r\n        llPosition.isTokenIdValid(tokenId);\r\n        llPosition.isOwner();\r\n        llPosition.allowBeneficiaryUpdate = false;\r\n        emit PositionUpdated(llPosition);\r\n    }\r\n    function unlockToken(uint256 tokenId) external {\r\n        Position.Info memory llPosition = lockedLiquidityPositions[tokenId];\r\n        llPosition.isTokenIdValid(tokenId);\r\n        llPosition.isTokenUnlocked();\r\n        _uniswapNFPositionManager.transferFrom(address(this), llPosition.owner, tokenId);\r\n        delete lockedLiquidityPositions[tokenId];\r\n        emit TokenUnlocked(tokenId);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"FeeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowFeeClaim\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowBeneficiaryUpdate\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"feeReciever\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct Position.Info\",\"name\":\"position\",\"type\":\"tuple\"}],\"name\":\"PositionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenUnlocked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claimLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowFeeClaim\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowBeneficiaryUpdate\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"feeReciever\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct Position.Info\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"lockLPToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedLiquidityPositions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowFeeClaim\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowBeneficiaryUpdate\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"feeReciever\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"renounceBeneficiaryUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unlockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReciever\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"updateFeeReciever\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"updateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UniswapV3LiquidityLocker","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://44bdaba16da3120483008244193f7df00f59831307c242d7d43d19ab88d5056d"}]}