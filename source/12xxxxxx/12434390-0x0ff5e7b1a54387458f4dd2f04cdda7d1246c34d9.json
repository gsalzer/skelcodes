{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0-or-later\r\n\r\n// Copyright (C) 2017, 2018, 2019 dbrock, rain, mrchico\r\n// Copyright (C) 2021 Dai Foundation\r\n// Copyright (C) 2021 Servo Farms, LLC\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface MKRToken {\r\n  function totalSupply() external view returns (uint supply);\r\n  function balanceOf( address who ) external view returns (uint value);\r\n  function allowance( address owner, address spender ) external view returns (uint _allowance);\r\n\r\n  function transfer( address to, uint value) external returns (bool ok);\r\n  function transferFrom( address from, address to, uint value) external returns (bool ok);\r\n  function approve( address spender, uint value ) external returns (bool ok);\r\n}\r\n\r\ncontract Breaker {\r\n\r\n  // --- ERC20 Data ---\r\n  string   public constant name     = \"Breaker Token\";\r\n  string   public constant symbol   = \"BKR\";\r\n  string   public constant version  = \"1\";\r\n  uint8    public constant decimals = 18;\r\n  MKRToken public constant MKR      = MKRToken(0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2);\r\n  uint256  public totalSupply;\r\n\r\n  mapping (address => uint256)                      public balanceOf;\r\n  mapping (address => mapping (address => uint256)) public allowance;\r\n  mapping (address => uint256)                      public nonces;\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Rely(address indexed usr);\r\n  event Deny(address indexed usr);\r\n\r\n  // --- Math ---\r\n  function _add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n    require((z = x + y) >= x);\r\n  }\r\n  function _sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n    require((z = x - y) <= x);\r\n  }\r\n  function _mul(uint x, uint y) internal pure returns (uint z) {\r\n    require(y == 0 || (z = x * y) / y == x);\r\n  }\r\n\r\n  // --- EIP712 niceties ---\r\n  uint256 public  immutable deploymentChainId;\r\n  bytes32 private immutable _DOMAIN_SEPARATOR;\r\n  bytes32 public  constant  PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n\r\n  constructor() public {\r\n    uint256 chainId;\r\n    assembly {chainId := chainid()}\r\n    deploymentChainId = chainId;\r\n    _DOMAIN_SEPARATOR = _calculateDomainSeparator(chainId);\r\n  }\r\n\r\n  function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\r\n    return keccak256(\r\n      abi.encode(\r\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n        keccak256(bytes(name)),\r\n        keccak256(bytes(version)),\r\n        chainId,\r\n        address(this)\r\n      )\r\n    );\r\n  }\r\n  function DOMAIN_SEPARATOR() external view returns (bytes32) {\r\n    uint256 chainId;\r\n    assembly {chainId := chainid()}\r\n    return chainId == deploymentChainId ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\r\n  }\r\n\r\n  // --- ERC20 Mutations ---\r\n  function transfer(address to, uint256 value) external returns (bool) {\r\n    require(to != address(0) && to != address(this), \"Breaker/invalid-address\");\r\n    uint256 balance = balanceOf[msg.sender];\r\n    require(balance >= value, \"Breaker/insufficient-balance\");\r\n\r\n    balanceOf[msg.sender] = balance - value;\r\n    balanceOf[to] += value;\r\n\r\n    emit Transfer(msg.sender, to, value);\r\n\r\n    return true;\r\n  }\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool) {\r\n    require(to != address(0) && to != address(this), \"Breaker/invalid-address\");\r\n    uint256 balance = balanceOf[from];\r\n    require(balance >= value, \"Breaker/insufficient-balance\");\r\n\r\n    if (from != msg.sender) {\r\n      uint256 allowed = allowance[from][msg.sender];\r\n      if (allowed != type(uint256).max) {\r\n        require(allowed >= value, \"Breaker/insufficient-allowance\");\r\n\r\n        allowance[from][msg.sender] = allowed - value;\r\n      }\r\n    }\r\n\r\n    balanceOf[from] = balance - value;\r\n    balanceOf[to] += value;\r\n\r\n    emit Transfer(from, to, value);\r\n\r\n    return true;\r\n  }\r\n  function approve(address spender, uint256 value) external returns (bool) {\r\n    allowance[msg.sender][spender] = value;\r\n\r\n    emit Approval(msg.sender, spender, value);\r\n\r\n    return true;\r\n  }\r\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\r\n    uint256 newValue = _add(allowance[msg.sender][spender], addedValue);\r\n    allowance[msg.sender][spender] = newValue;\r\n\r\n    emit Approval(msg.sender, spender, newValue);\r\n\r\n    return true;\r\n  }\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\r\n    uint256 allowed = allowance[msg.sender][spender];\r\n    require(allowed >= subtractedValue, \"Breaker/insufficient-allowance\");\r\n    allowed = allowed - subtractedValue;\r\n    allowance[msg.sender][spender] = allowed;\r\n\r\n    emit Approval(msg.sender, spender, allowed);\r\n\r\n    return true;\r\n  }\r\n\r\n  // --- Approve by signature ---\r\n  function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {\r\n    require(block.timestamp <= deadline, \"Breaker/permit-expired\");\r\n\r\n    uint256 chainId;\r\n    assembly {chainId := chainid()}\r\n\r\n    bytes32 digest =\r\n      keccak256(abi.encodePacked(\r\n          \"\\x19\\x01\",\r\n          chainId == deploymentChainId ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId),\r\n          keccak256(abi.encode(\r\n            PERMIT_TYPEHASH,\r\n            owner,\r\n            spender,\r\n            value,\r\n            nonces[owner]++,\r\n            deadline\r\n          ))\r\n      ));\r\n\r\n    require(owner != address(0) && owner == ecrecover(digest, v, r, s), \"Breaker/invalid-permit\");\r\n\r\n    allowance[owner][spender] = value;\r\n    emit Approval(owner, spender, value);\r\n  }\r\n\r\n  function mkrToBkr(uint256 mkr) public pure returns (uint256 bkr) {\r\n    return _mul(mkr, 10**9);\r\n  }\r\n\r\n  function bkrToMkr(uint256 bkr) public pure returns (uint256 mkr) {\r\n    return bkr / 10**9;\r\n  }\r\n\r\n  /**\r\n  * @dev   Make Maker into Breaker\r\n  *        (user must approve() this contract on MKR)\r\n  * @param mkr  amount of MKR tokens to be wrapped\r\n  */\r\n  function breaker(uint256 mkr) public returns (uint256 bkr) {\r\n    MKR.transferFrom(\r\n        msg.sender,\r\n        address(this),\r\n        mkr\r\n    );\r\n    bkr = mkrToBkr(mkr);\r\n    balanceOf[msg.sender] = _add(balanceOf[msg.sender], bkr);\r\n    totalSupply   = _add(totalSupply, bkr);\r\n    emit Transfer(address(0), msg.sender, bkr);\r\n  }\r\n\r\n  /**\r\n  * @dev   Make Breaker into Maker\r\n  * @param bkr  amount of tokens to be unwrapped (amount will be rounded to Conti units)\r\n  */\r\n  function maker(uint256 bkr) public returns (uint256 mkr) {\r\n    mkr = bkrToMkr(bkr);\r\n    bkr = mkrToBkr(mkr);\r\n\r\n    uint256 balance = balanceOf[msg.sender];\r\n    require(balance >= bkr, \"Breaker/insufficient-balance\");\r\n    balanceOf[msg.sender] = balance - bkr;\r\n    totalSupply     = _sub(totalSupply, bkr);\r\n\r\n    MKR.transfer(msg.sender, mkr);\r\n\r\n    emit Transfer(msg.sender, address(0), bkr);\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Deny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Rely\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MKR\",\"outputs\":[{\"internalType\":\"contract MKRToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bkr\",\"type\":\"uint256\"}],\"name\":\"bkrToMkr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mkr\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mkr\",\"type\":\"uint256\"}],\"name\":\"breaker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bkr\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deploymentChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bkr\",\"type\":\"uint256\"}],\"name\":\"maker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mkr\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mkr\",\"type\":\"uint256\"}],\"name\":\"mkrToBkr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bkr\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Breaker","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://caa8c134666594cafc21168dca79c22c8671cb2ae2fc1b7a2cf211b06c5a5e7d"}]}