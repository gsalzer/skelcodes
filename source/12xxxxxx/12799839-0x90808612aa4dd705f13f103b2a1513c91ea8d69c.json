{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.17;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n/**\r\n * @title The interface for the Kyber Network smart contract\r\n * @author Zefram Lou (Zebang Liu)\r\n */\r\ninterface IKyberNetwork {\r\n    function getExpectedRate(\r\n        ERC20Detailed src,\r\n        ERC20Detailed dest,\r\n        uint256 srcQty\r\n    ) external view returns (uint256 expectedRate, uint256 slippageRate);\r\n\r\n    function tradeWithHint(\r\n        ERC20Detailed src,\r\n        uint256 srcAmount,\r\n        ERC20Detailed dest,\r\n        address payable destAddress,\r\n        uint256 maxDestAmount,\r\n        uint256 minConversionRate,\r\n        address walletId,\r\n        bytes calldata hint\r\n    ) external payable returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title The smart contract for useful utility functions and constants.\r\n * @author Zefram Lou (Zebang Liu)\r\n */\r\ncontract Utils {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC20Detailed;\r\n\r\n    /**\r\n     * @notice Checks if `_token` is a valid token.\r\n     * @param _token the token's address\r\n     */\r\n    modifier isValidToken(address _token) {\r\n        require(_token != address(0));\r\n        if (_token != address(ETH_TOKEN_ADDRESS)) {\r\n            require(isContract(_token));\r\n        }\r\n        _;\r\n    }\r\n\r\n    address public USDC_ADDR;\r\n    address payable public KYBER_ADDR;\r\n    address payable public ONEINCH_ADDR;\r\n\r\n    bytes public constant PERM_HINT = \"PERM\";\r\n\r\n    // The address Kyber Network uses to represent Ether\r\n    ERC20Detailed internal constant ETH_TOKEN_ADDRESS =\r\n        ERC20Detailed(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n    ERC20Detailed internal usdc;\r\n    IKyberNetwork internal kyber;\r\n\r\n    uint256 internal constant PRECISION = (10**18);\r\n    uint256 internal constant MAX_QTY = (10**28); // 10B tokens\r\n    uint256 internal constant ETH_DECIMALS = 18;\r\n    uint256 internal constant MAX_DECIMALS = 18;\r\n\r\n    constructor(\r\n        address _usdcAddr,\r\n        address payable _kyberAddr,\r\n        address payable _oneInchAddr\r\n    ) public {\r\n        USDC_ADDR = _usdcAddr;\r\n        KYBER_ADDR = _kyberAddr;\r\n        ONEINCH_ADDR = _oneInchAddr;\r\n\r\n        usdc = ERC20Detailed(_usdcAddr);\r\n        kyber = IKyberNetwork(_kyberAddr);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the number of decimals of a token\r\n     * @param _token the token to be queried\r\n     * @return number of decimals\r\n     */\r\n    function getDecimals(ERC20Detailed _token) internal view returns (uint256) {\r\n        if (address(_token) == address(ETH_TOKEN_ADDRESS)) {\r\n            return uint256(ETH_DECIMALS);\r\n        }\r\n        return uint256(_token.decimals());\r\n    }\r\n\r\n    /**\r\n     * @notice Get the token balance of an account\r\n     * @param _token the token to be queried\r\n     * @param _addr the account whose balance will be returned\r\n     * @return token balance of the account\r\n     */\r\n    function getBalance(ERC20Detailed _token, address _addr)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (address(_token) == address(ETH_TOKEN_ADDRESS)) {\r\n            return uint256(_addr.balance);\r\n        }\r\n        return uint256(_token.balanceOf(_addr));\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the rate of a trade. The rate is the price of the source token in the dest token, in 18 decimals.\r\n     *         Note: the rate is on the token level, not the wei level, so for example if 1 Atoken = 10 Btoken, then the rate\r\n     *         from A to B is 10 * 10**18, regardless of how many decimals each token uses.\r\n     * @param srcAmount amount of source token\r\n     * @param destAmount amount of dest token\r\n     * @param srcDecimals decimals used by source token\r\n     * @param dstDecimals decimals used by dest token\r\n     */\r\n    function calcRateFromQty(\r\n        uint256 srcAmount,\r\n        uint256 destAmount,\r\n        uint256 srcDecimals,\r\n        uint256 dstDecimals\r\n    ) internal pure returns (uint256) {\r\n        require(srcAmount <= MAX_QTY);\r\n        require(destAmount <= MAX_QTY);\r\n\r\n        if (dstDecimals >= srcDecimals) {\r\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\r\n            return ((destAmount * PRECISION) /\r\n                ((10**(dstDecimals - srcDecimals)) * srcAmount));\r\n        } else {\r\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\r\n            return ((destAmount *\r\n                PRECISION *\r\n                (10**(srcDecimals - dstDecimals))) / srcAmount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Wrapper function for doing token conversion on Kyber Network\r\n     * @param _srcToken the token to convert from\r\n     * @param _srcAmount the amount of tokens to be converted\r\n     * @param _destToken the destination token\r\n     * @return _destPriceInSrc the price of the dest token, in terms of source tokens\r\n     *         _srcPriceInDest the price of the source token, in terms of dest tokens\r\n     *         _actualDestAmount actual amount of dest token traded\r\n     *         _actualSrcAmount actual amount of src token traded\r\n     */\r\n    function __kyberTrade(\r\n        ERC20Detailed _srcToken,\r\n        uint256 _srcAmount,\r\n        ERC20Detailed _destToken\r\n    )\r\n        internal\r\n        returns (\r\n            uint256 _destPriceInSrc,\r\n            uint256 _srcPriceInDest,\r\n            uint256 _actualDestAmount,\r\n            uint256 _actualSrcAmount\r\n        )\r\n    {\r\n        require(_srcToken != _destToken);\r\n\r\n        uint256 beforeSrcBalance = getBalance(_srcToken, address(this));\r\n        uint256 msgValue;\r\n        if (_srcToken != ETH_TOKEN_ADDRESS) {\r\n            msgValue = 0;\r\n            _srcToken.safeApprove(KYBER_ADDR, 0);\r\n            _srcToken.safeApprove(KYBER_ADDR, _srcAmount);\r\n        } else {\r\n            msgValue = _srcAmount;\r\n        }\r\n        _actualDestAmount = kyber.tradeWithHint.value(msgValue)(\r\n            _srcToken,\r\n            _srcAmount,\r\n            _destToken,\r\n            toPayableAddr(address(this)),\r\n            MAX_QTY,\r\n            1,\r\n            address(0),\r\n            PERM_HINT\r\n        );\r\n        _actualSrcAmount = beforeSrcBalance.sub(\r\n            getBalance(_srcToken, address(this))\r\n        );\r\n        require(_actualDestAmount > 0 && _actualSrcAmount > 0);\r\n        _destPriceInSrc = calcRateFromQty(\r\n            _actualDestAmount,\r\n            _actualSrcAmount,\r\n            getDecimals(_destToken),\r\n            getDecimals(_srcToken)\r\n        );\r\n        _srcPriceInDest = calcRateFromQty(\r\n            _actualSrcAmount,\r\n            _actualDestAmount,\r\n            getDecimals(_srcToken),\r\n            getDecimals(_destToken)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Wrapper function for doing token conversion on 1inch\r\n     * @param _srcToken the token to convert from\r\n     * @param _srcAmount the amount of tokens to be converted\r\n     * @param _destToken the destination token\r\n     * @return _destPriceInSrc the price of the dest token, in terms of source tokens\r\n     *         _srcPriceInDest the price of the source token, in terms of dest tokens\r\n     *         _actualDestAmount actual amount of dest token traded\r\n     *         _actualSrcAmount actual amount of src token traded\r\n     */\r\n    function __oneInchTrade(\r\n        ERC20Detailed _srcToken,\r\n        uint256 _srcAmount,\r\n        ERC20Detailed _destToken,\r\n        bytes memory _calldata\r\n    )\r\n        public  \r\n        returns (\r\n            uint256 _destPriceInSrc,\r\n            uint256 _srcPriceInDest,\r\n            uint256 _actualDestAmount,\r\n            uint256 _actualSrcAmount\r\n        )\r\n    {\r\n        require(_srcToken != _destToken);\r\n\r\n        uint256 beforeSrcBalance = getBalance(_srcToken, address(this));\r\n        uint256 beforeDestBalance = getBalance(_destToken, address(this));\r\n        // Note: _actualSrcAmount is being used as msgValue here, because otherwise we'd run into the stack too deep error\r\n        if (_srcToken != ETH_TOKEN_ADDRESS) {\r\n            _actualSrcAmount = 0;\r\n            _srcToken.safeApprove(ONEINCH_ADDR, 0);\r\n            _srcToken.safeApprove(ONEINCH_ADDR, _srcAmount);\r\n        } else {\r\n            _actualSrcAmount = _srcAmount;\r\n        }\r\n\r\n        // trade through 1inch proxy\r\n        (bool success, ) = ONEINCH_ADDR.call.value(_actualSrcAmount)(_calldata);\r\n        require(success);\r\n\r\n        // calculate trade amounts and price\r\n        _actualDestAmount = getBalance(_destToken, address(this)).sub(\r\n            beforeDestBalance\r\n        );\r\n        _actualSrcAmount = beforeSrcBalance.sub(\r\n            getBalance(_srcToken, address(this))\r\n        );\r\n        require(_actualDestAmount > 0 && _actualSrcAmount > 0);\r\n        _destPriceInSrc = calcRateFromQty(\r\n            _actualDestAmount,\r\n            _actualSrcAmount,\r\n            getDecimals(_destToken),\r\n            getDecimals(_srcToken)\r\n        );\r\n        _srcPriceInDest = calcRateFromQty(\r\n            _actualSrcAmount,\r\n            _actualDestAmount,\r\n            getDecimals(_srcToken),\r\n            getDecimals(_destToken)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Checks if an Ethereum account is a smart contract\r\n     * @param _addr the account to be checked\r\n     * @return True if the account is a smart contract, false otherwise\r\n     */\r\n    function isContract(address _addr) internal view returns (bool) {\r\n        uint256 size;\r\n        if (_addr == address(0)) return false;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function toPayableAddr(address _addr)\r\n        internal\r\n        pure\r\n        returns (address payable)\r\n    {\r\n        return address(uint160(_addr));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdcAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_kyberAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_oneInchAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER_ADDR\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ONEINCH_ADDR\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERM_HINT\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USDC_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ERC20Detailed\",\"name\":\"_srcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20Detailed\",\"name\":\"_destToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"__oneInchTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_destPriceInSrc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_srcPriceInDest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_actualDestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_actualSrcAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Utils","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000818e6fecd516ecc3849daf6845e3ec868087b75500000000000000000000000011111112542d85b3ef69ae05771c2dccff4faa26","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://81c8b4e47f5c3a72a96ff49794d354474290b0970b543502db8255efd6661661"}]}