{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at BscScan.com on 2021-05-08\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n    returns (uint256[] memory amounts);\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}//\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\naddress private _owner;\r\n\r\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n/**\r\n * @dev Initializes the contract setting the deployer as the initial owner.\r\n */\r\nconstructor () {\r\naddress msgSender = _msgSender();\r\n_owner = msgSender;\r\nemit OwnershipTransferred(address(0), msgSender);\r\n}\r\n\r\n/**\r\n * @dev Returns the address of the current owner.\r\n */\r\nfunction owner() public view virtual returns (address) {\r\nreturn _owner;\r\n}\r\n\r\n/**\r\n * @dev Throws if called by any account other than the owner.\r\n */\r\nmodifier onlyOwner() {\r\nrequire(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n_;\r\n}\r\n\r\n/**\r\n * @dev Leaves the contract without owner. It will not be possible to call\r\n * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n *\r\n * NOTE: Renouncing ownership will leave the contract without an owner,\r\n * thereby removing any functionality that is only available to the owner.\r\n */\r\nfunction renounceOwnership() public virtual onlyOwner {\r\nemit OwnershipTransferred(_owner, address(0));\r\n_owner = address(0);\r\n}\r\n\r\n/**\r\n * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n * Can only be called by the current owner.\r\n */\r\nfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\nrequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\nemit OwnershipTransferred(_owner, newOwner);\r\n_owner = newOwner;\r\n}\r\n}//\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n/**\r\n * @dev Returns the amount of tokens in existence.\r\n */\r\nfunction totalSupply() external view returns (uint256);\r\n\r\n/**\r\n * @dev Returns the amount of tokens owned by `account`.\r\n */\r\nfunction balanceOf(address account) external view returns (uint256);\r\n\r\n/**\r\n * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n *\r\n * Returns a boolean value indicating whether the operation succeeded.\r\n *\r\n * Emits a {Transfer} event.\r\n */\r\nfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n/**\r\n * @dev Returns the remaining number of tokens that `spender` will be\r\n * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n * zero by default.\r\n *\r\n * This value changes when {approve} or {transferFrom} are called.\r\n */\r\nfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n/**\r\n * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n *\r\n * Returns a boolean value indicating whether the operation succeeded.\r\n *\r\n * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n * that someone may use both the old and the new allowance by unfortunate\r\n * transaction ordering. One possible solution to mitigate this race\r\n * condition is to first reduce the spender's allowance to 0 and set the\r\n * desired value afterwards:\r\n * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n *\r\n * Emits an {Approval} event.\r\n */\r\nfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n/**\r\n * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n * allowance mechanism. `amount` is then deducted from the caller's\r\n * allowance.\r\n *\r\n * Returns a boolean value indicating whether the operation succeeded.\r\n *\r\n * Emits a {Transfer} event.\r\n */\r\nfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n/**\r\n * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n * another (`to`).\r\n *\r\n * Note that `value` may be zero.\r\n */\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n/**\r\n * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n * a call to {approve}. `value` is the new allowance.\r\n */\r\nevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Cryptozen is Context, Ownable {\r\n    \r\n    address payable private _feeAddress;\r\n    uint256[3][9] private _tiers;\r\n    mapping (address => uint256) private _rewards;\r\n    IERC20 private _ninjaContract;\r\n    IUniswapV2Router01 private _uniswapRouterAddress;\r\n    event CryptozenReward(address userAddress, uint256 amount);\r\n    \r\n    constructor() {\r\n        setFeeAddress(payable(0x64F75386cB876AF489eE12e1DEE7978eB075d397));\r\n        setNinjaContract(IERC20(0x2d77695ef1E6DAC3AFf3E2B61484bDE2F88f0298));\r\n        uint256[3][9] memory a = [\r\n        [uint256(0),uint256(30),uint256(0)],\r\n        [uint256(15),uint256(27),uint256(1)],\r\n        [uint256(50),uint256(24),uint256(2)],\r\n        [uint256(150),uint256(21),uint256(3)],\r\n        [uint256(400),uint256(18),uint256(4)],\r\n        [uint256(1500),uint256(25),uint256(5)],\r\n        [uint256(3500),uint256(12),uint256(6)],\r\n        [uint256(6000),uint256(9),uint256(7)],\r\n        [uint256(10000),uint256(6),uint256(8)]\r\n        ];\r\n        setTiers(a);\r\n        setUniswapRouterAddress(IUniswapV2Router01(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D));\r\n    }\r\n    \r\n    function setUniswapRouterAddress(IUniswapV2Router01 routerAddress) public onlyOwner returns(bool){\r\n        _uniswapRouterAddress = routerAddress;\r\n        return true;\r\n    }\r\n    \r\n    function setNinjaContract(IERC20 contractAddress) public onlyOwner returns(bool){\r\n        _ninjaContract = contractAddress;\r\n        return true;\r\n    }\r\n    \r\n    function ninjaContract() public view returns(IERC20){\r\n        return _ninjaContract;\r\n    }\r\n    \r\n    function uniswapRouterAddress() public view returns(IUniswapV2Router01){\r\n        return _uniswapRouterAddress;\r\n    }\r\n    \r\n    function setFeeAddress(address payable feeAddress)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        _feeAddress = feeAddress;\r\n        return true;\r\n    }\r\n    \r\n    function setTiers(uint256[3][9] memory tiers)\r\n        public\r\n        onlyOwner\r\n    returns (bool)\r\n    {\r\n        _tiers = tiers;\r\n        return true;\r\n    }\r\n    \r\n    function updateTier(uint256 index, uint256[3] memory tier)\r\n        public\r\n        onlyOwner\r\n    returns (bool)\r\n    {\r\n        _tiers[index] = tier;\r\n        return true;\r\n    }\r\n    \r\n    function tiers() public view returns (uint256[3][9] memory) {\r\n        return _tiers;\r\n    }\r\n    \r\n    function tier(uint256 index) public view returns (uint256[3] memory) {\r\n        return _tiers[index];\r\n    }\r\n    \r\n    function _getTierByAmount(uint256 amount)\r\n        internal\r\n        view\r\n        returns (uint256[3] memory)\r\n    {\r\n        if (amount >= _tiers[0][0] && amount < _tiers[1][0]) {\r\n        return _tiers[0];\r\n        }\r\n        \r\n        if (amount >= _tiers[1][0] && amount < _tiers[2][0]) {\r\n        return _tiers[1];\r\n        }\r\n        if (amount >= _tiers[2][0] && amount < _tiers[3][0]) {\r\n        return _tiers[2];\r\n        }\r\n        if (amount >= _tiers[3][0] && amount < _tiers[4][0]) {\r\n        return _tiers[3];\r\n        }\r\n        if (amount >= _tiers[4][0] && amount < _tiers[5][0]) {\r\n        return _tiers[4];\r\n        }\r\n        if (amount >= _tiers[5][0] && amount < _tiers[6][0]) {\r\n        return _tiers[5];\r\n        }\r\n        \r\n        if (amount >= _tiers[6][0] && amount < _tiers[7][0]) {\r\n        return _tiers[6];\r\n        }\r\n        \r\n        if (amount >= _tiers[7][0] && amount < _tiers[8][0]) {\r\n        return _tiers[7];\r\n        }\r\n        \r\n        if (amount >= _tiers[8][0]) {\r\n        return _tiers[8];\r\n        }\r\n    }\r\n    \r\n    function getTier() public view returns (uint256[3] memory){\r\n        return _getTier();\r\n    }\r\n    \r\n    function getNinjaBalanceAndRewardOf(address yourAddress) public view returns(uint256){\r\n        return _ninjaContract.balanceOf(yourAddress) + _rewards[yourAddress];\r\n    }\r\n    \r\n    function _getTier() internal view returns (uint256[3] memory){\r\n        return _getTierByAmount(_ninjaContract.balanceOf(_msgSender()) + _rewards[_msgSender()]);\r\n    }\r\n    \r\n    function getFeePercentage()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _getTier()[1];\r\n    }\r\n    \r\n    function _calculateTransferFee(uint256 amount, uint256 percent)\r\n        internal\r\n        view\r\n    returns (uint256)\r\n    {\r\n        require(amount + percent >= 10000);\r\n        return (amount * percent) / 10000;\r\n    }\r\n    \r\n    function calculateTransferFee(uint256 amount, uint256 percent)\r\n        public\r\n        view\r\n    returns (uint256)\r\n    {\r\n        return _calculateTransferFee(amount, percent);\r\n    }\r\n    \r\n    function transferSameToken(\r\n        IERC20 tokenContractAddress,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public {\r\n         uint256 s = gasleft();\r\n        // require(\r\n        //     tokenContractAddress.balanceOf(_msgSender()) >= amount,\r\n        //     \"Not Enough Balance\"\r\n        // );\r\n        // require(\r\n        //     checkAllowance(tokenContractAddress) >= amount,\r\n        //     \"Must be approved\"\r\n        // );\r\n        uint256 a = _calculateTransferFee(amount, _getTier()[1]);\r\n        uint256 b = 0;\r\n        if(tokenContractAddress != _ninjaContract){\r\n            uint256 b = _calculateNinjaReward(a, address(tokenContractAddress));\r\n        }\r\n        tokenContractAddress.transferFrom(\r\n            _msgSender(),\r\n            address(recipient),\r\n            (amount - a)\r\n        );\r\n        \r\n        tokenContractAddress.transferFrom(\r\n            _msgSender(),\r\n            address(_feeAddress),\r\n            a\r\n        );\r\n        _putReward(_msgSender(), b + _calculateNinjaReward( ((s - gasleft()) + 1631) * tx.gasprice, _WETH() ) );\r\n        // _ninjaContract.transfer(_msgSender(), b + _calculateNinjaReward( (startGas - gasleft()) * tx.gasprice, _WETH() ));\r\n    }\r\n    \r\n    function transferSameEther(address payable recipient)\r\n        public\r\n        payable\r\n    {\r\n        uint256 s = gasleft();\r\n        uint256 a =\r\n        _calculateTransferFee(msg.value, _getTier()[1]);\r\n        Address.sendValue(recipient, (msg.value - a));\r\n        Address.sendValue(_feeAddress, a);\r\n        _putReward(_msgSender(), _calculateNinjaReward(a + ( ((s - gasleft()) + 1631) * tx.gasprice), _WETH()));\r\n        // _ninjaContract.transfer(_msgSender(), _calculateNinjaReward(a + ( (startGas - gasleft()) * tx.gasprice), _WETH()));\r\n    }\r\n    \r\n    function putRewards(address[] memory recipients, uint256[] memory amounts) public onlyOwner{\r\n        for (uint i=0; i<recipients.length; i++) {\r\n            putReward(recipients[i], amounts[i]);\r\n        }\r\n    }\r\n    \r\n    function putReward(address recipient, uint256 amount) public onlyOwner{\r\n        _putReward(recipient, amount);\r\n    }\r\n    \r\n    function _putReward(address recipient, uint256 amount) internal{\r\n        _rewards[recipient] += amount;\r\n        emit CryptozenReward(recipient, amount);\r\n    }\r\n    \r\n    function getReward() public view returns(uint256){\r\n        return _rewards[_msgSender()];\r\n    }\r\n    \r\n    function rewardOf(address yourAddress) public view returns(uint256){\r\n        return _rewards[yourAddress];\r\n    }\r\n    \r\n    function claimRewards() public returns(bool){\r\n        _ninjaContract.transfer(_msgSender(), getReward());\r\n        _rewards[_msgSender()] = 0;\r\n        return true;\r\n    }\r\n    \r\n   function _calculateNinjaReward(uint256 amountIn, address tokenContractAddress) internal returns(uint256){\r\n        address[] memory path = _getPath(tokenContractAddress);\r\n        return _uniswapRouterAddress.getAmountsOut(amountIn, path)[path.length - 1];\r\n    }\r\n    \r\n    function calculateNinjaReward(uint256 amountIn, address tokenContractAddress) public view returns(uint256){\r\n        address[] memory path = _getPath(tokenContractAddress);\r\n        return _uniswapRouterAddress.getAmountsOut(amountIn, path)[path.length - 1];\r\n    }\r\n    \r\n    function _getPath(address tokenContractAddress) internal view returns(address[] memory){\r\n        address[] memory path = new address[](2);\r\n        address w = _WETH();\r\n        path[0] = w;\r\n        path[1] = address(_ninjaContract);\r\n        if(tokenContractAddress != w){\r\n             if(tokenContractAddress != address(_ninjaContract)){\r\n                path = new address[](3);\r\n                path[0] = tokenContractAddress;\r\n                path[1] = w;\r\n                path[2] = address(_ninjaContract);\r\n            }\r\n        }\r\n        return path;\r\n    }\r\n    \r\n   function _WETH() internal view returns(address){\r\n        return _uniswapRouterAddress.WETH();\r\n    }\r\n    \r\n    function WETH() public view returns(address){\r\n        return _uniswapRouterAddress.WETH();\r\n    }\r\n    \r\n    function withdrawNinjaToken(address recipient, uint256 amount) public onlyOwner{\r\n        _ninjaContract.transfer(recipient, amount);\r\n    }\r\n\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CryptozenReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"}],\"name\":\"calculateNinjaReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"calculateTransferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"yourAddress\",\"type\":\"address\"}],\"name\":\"getNinjaBalanceAndRewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTier\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ninjaContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"putReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"putRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"yourAddress\",\"type\":\"address\"}],\"name\":\"rewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setNinjaContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3][9]\",\"name\":\"tiers\",\"type\":\"uint256[3][9]\"}],\"name\":\"setTiers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"name\":\"setUniswapRouterAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tier\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tiers\",\"outputs\":[{\"internalType\":\"uint256[3][9]\",\"name\":\"\",\"type\":\"uint256[3][9]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferSameEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferSameToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouterAddress\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"tier\",\"type\":\"uint256[3]\"}],\"name\":\"updateTier\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawNinjaToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Cryptozen","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7f5efa1f617d01ab5066fd31858262c55236e688dada9f227d1034598027e607"}]}