{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/vgorin/DEVELOP/up/Cryptant/cryptant-contracts/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"/Users/vgorin/DEVELOP/up/Cryptant/cryptant-contracts/contracts/interfaces/ILinkedToILV.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\n/**\\n * @title Linked to ILV Marker Interface\\n *\\n * @notice Marks smart contracts which are linked to IlluviumERC20 token instance upon construction,\\n *      all these smart contracts share a common ilv() address getter\\n *\\n * @notice Implementing smart contracts MUST verify that they get linked to real IlluviumERC20 instance\\n *      and that ilv() getter returns this very same instance address\\n *\\n * @author Basil Gorin\\n */\\ninterface ILinkedToILV {\\n  /**\\n   * @notice Getter for a verified IlluviumERC20 instance address\\n   *\\n   * @return IlluviumERC20 token instance address smart contract is linked to\\n   */\\n  function ilv() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"/Users/vgorin/DEVELOP/up/Cryptant/cryptant-contracts/contracts/interfaces/ILockedPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\nimport \\\"./ILinkedToILV.sol\\\";\\n\\ninterface ILockedPool is ILinkedToILV {\\n    function vault() external view returns (address);\\n\\n    function tokenLocking() external view returns (address);\\n\\n    function vaultRewardsPerToken() external view returns (uint256);\\n\\n    function poolTokenReserve() external view returns (uint256);\\n\\n    function balanceOf(address _staker) external view returns (uint256);\\n\\n    function pendingVaultRewards(address _staker) external view returns (uint256);\\n\\n    function stakeLockedTokens(address _staker, uint256 _amount) external;\\n\\n    function unstakeLockedTokens(address _staker, uint256 _amount) external;\\n\\n    function changeLockedHolder(address _from, address _to) external;\\n\\n    function receiveVaultRewards(uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"/Users/vgorin/DEVELOP/up/Cryptant/cryptant-contracts/contracts/pools/IlluviumAware.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\nimport \\\"../token/IlluviumERC20.sol\\\";\\nimport \\\"../interfaces/ILinkedToILV.sol\\\";\\n\\n/**\\n * @title Illuvium Aware\\n *\\n * @notice Helper smart contract to be inherited by other smart contracts requiring to\\n *      be linked to verified IlluviumERC20 instance and performing some basic tasks on it\\n *\\n * @author Basil Gorin\\n */\\nabstract contract IlluviumAware is ILinkedToILV {\\n  /// @dev Link to ILV ERC20 Token IlluviumERC20 instance\\n  address public immutable override ilv;\\n\\n  /**\\n   * @dev Creates IlluviumAware instance, requiring to supply deployed IlluviumERC20 instance address\\n   *\\n   * @param _ilv deployed IlluviumERC20 instance address\\n   */\\n  constructor(address _ilv) {\\n    // verify ILV address is set and is correct\\n    require(_ilv != address(0), \\\"ILV address not set\\\");\\n    require(IlluviumERC20(_ilv).TOKEN_UID() == 0x83ecb176af7c4f35a45ff0018282e3a05a1018065da866182df12285866f5a2c, \\\"unexpected TOKEN_UID\\\");\\n\\n    // write ILV address\\n    ilv = _ilv;\\n  }\\n\\n  /**\\n   * @dev Executes IlluviumERC20.safeTransferFrom(address(this), _to, _value, \\\"\\\")\\n   *      on the bound IlluviumERC20 instance\\n   *\\n   * @dev Reentrancy safe due to the IlluviumERC20 design\\n   */\\n  function transferIlv(address _to, uint256 _value) internal {\\n    // just delegate call to the target\\n    transferIlvFrom(address(this), _to, _value);\\n  }\\n\\n  /**\\n   * @dev Executes IlluviumERC20.transferFrom(_from, _to, _value)\\n   *      on the bound IlluviumERC20 instance\\n   *\\n   * @dev Reentrancy safe due to the IlluviumERC20 design\\n   */\\n  function transferIlvFrom(address _from, address _to, uint256 _value) internal {\\n    // just delegate call to the target\\n    IlluviumERC20(ilv).transferFrom(_from, _to, _value);\\n  }\\n\\n  /**\\n   * @dev Executes IlluviumERC20.mint(_to, _values)\\n   *      on the bound IlluviumERC20 instance\\n   *\\n   * @dev Reentrancy safe due to the IlluviumERC20 design\\n   */\\n  function mintIlv(address _to, uint256 _value) internal {\\n    // just delegate call to the target\\n    IlluviumERC20(ilv).mint(_to, _value);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"/Users/vgorin/DEVELOP/up/Cryptant/cryptant-contracts/contracts/pools/IlluviumLockedPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\nimport \\\"../interfaces/ILockedPool.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./IlluviumAware.sol\\\";\\nimport \\\"./TokenLocking.sol\\\";\\nimport \\\"../utils/Ownable.sol\\\";\\n\\ncontract IlluviumLockedPool is ILockedPool, IlluviumAware {\\n    /**\\n     * @dev Smart contract unique identifier, a random number\\n     * @dev Should be regenerated each time smart contact source code is changed\\n     *      and changes smart contract itself is to be redeployed\\n     * @dev Generated using https://www.random.org/bytes/\\n     */\\n    uint256 public constant POOL_UID = 0x620bbda48b8ff3098da2f0033cbf499115c61efdd5dcd2db05346782df6218e7;\\n\\n    // @dev Data struct to store information about locked token staker\\n    struct User {\\n        // @dev Total staked amount\\n        uint256 tokenAmount;\\n        // @dev Auxiliary variable for vault rewards calculation\\n        uint256 subVaultRewards;\\n    }\\n\\n    /// @dev Link to deployed IlluviumVault instance\\n    address public override vault;\\n\\n    /// @dev Link to deployed TokenLocking instance\\n    address public override tokenLocking;\\n\\n    /// @dev Used to calculate vault rewards\\n    /// @dev This value is different from \\\"reward per weight\\\" used in other pools\\n    /// @dev Note: locked pool doesn't operate on weights since all stakes are equal in duration\\n    uint256 public override vaultRewardsPerToken;\\n\\n    /// @dev Total value of ILV tokens available in the pool\\n    uint256 public override poolTokenReserve;\\n\\n    /// @dev Locked pool stakers mapping, maps staker addr => staker data struct (User)\\n    mapping(address => User) public users;\\n\\n    /**\\n     * @dev Rewards per token can be small values, usually fitting into (0, 1) bounds.\\n     *      We store these values multiplied by 1e12, as integers.\\n     */\\n    uint256 private constant REWARD_PER_TOKEN_MULTIPLIER = 1e12;\\n\\n    /**\\n     * @dev Fired in _stake()\\n     *\\n     * @param _from token holder address, the tokens will be returned to that address\\n     * @param amount amount of tokens staked\\n     */\\n    event Staked(address indexed _from, uint256 amount);\\n\\n    /**\\n     * @dev Fired in _unstake()\\n     *\\n     * @param _to an address which received the unstaked tokens, usually token holder\\n     * @param amount amount of tokens unstaked\\n     */\\n    event Unstaked(address indexed _to, uint256 amount);\\n\\n    /**\\n     * @dev Fired in _processVaultRewards() and dependent functions, like processRewards()\\n     *\\n     * @param _by an address which executed the function\\n     * @param _to an address which received a reward\\n     * @param amount amount of reward received\\n     */\\n    event VaultRewardsClaimed(address indexed _by, address indexed _to, uint256 amount);\\n\\n    /**\\n     * @dev Fired in receiveVaultRewards()\\n     *\\n     * @param _by an address that sent the rewards, always a vault\\n     * @param amount amount of tokens received\\n     */\\n    event VaultRewardsReceived(address indexed _by, uint256 amount);\\n\\n    /**\\n     * @dev Fired in setVault()\\n     *\\n     * @param _by an address which executed the function, always a factory owner\\n     */\\n    event VaultUpdated(address indexed _by, address _fromVal, address _toVal);\\n\\n    /**\\n     * @dev Defines TokenLocking only access\\n     */\\n    modifier onlyTokenLocking() {\\n        // verify the access\\n        require(msg.sender == tokenLocking, \\\"access denied\\\");\\n        // execute rest of the function marked with the modifier\\n        _;\\n    }\\n\\n    /**\\n     * @dev Deploys LockedPool linked to the previously deployed ILV token\\n     *      and TokenLocking addresses\\n     *\\n     * @param _ilv ILV ERC20 token instance deployed address\\n     * @param _tokenLocking TokenLocking instance deployed address the pool is bound to\\n     */\\n    constructor(address _ilv, address _tokenLocking) IlluviumAware(_ilv) {\\n        // verify the inputs\\n        require(_tokenLocking != address(0), \\\"TokenLocking address is not set\\\");\\n\\n        // verify token locking smart contract is an expected one\\n        require(\\n            TokenLocking(_tokenLocking).LOCKING_UID() ==\\n                0x76ff776d518e4c1b71ef4a1af2227a94e9868d7c9ecfa08e9255d2360e18f347,\\n            \\\"unexpected LOCKING_UID\\\"\\n        );\\n\\n        // internal state init\\n        tokenLocking = _tokenLocking;\\n    }\\n\\n    /**\\n     * @dev Converts stake amount to ILV reward value, applying the 1e12 division on the token amount\\n     *      to correct for the fact that \\\"rewards per token\\\" are stored multiplied by 1e12\\n     *\\n     * @param _tokens amount of tokens to convert to reward\\n     * @param _rewardPerToken reward per token\\n     *      (this value is supplied multiplied by 1e12 and thus the need for division on the result)\\n     * @return _reward reward value normalized to 1e12\\n     */\\n    function tokensToReward(uint256 _tokens, uint256 _rewardPerToken) public pure returns (uint256 _reward) {\\n        // apply the formula and return\\n        return (_tokens * _rewardPerToken) / REWARD_PER_TOKEN_MULTIPLIER;\\n    }\\n\\n    /**\\n     * @dev Derives reward per token given total reward and total tokens value\\n     *      Naturally the result would by just a division _reward/_tokens if not\\n     *      the requirement to store the result as an integer - therefore the result\\n     *      is represented multiplied by 1e12, as an integer\\n     *\\n     * @param _reward total amount of reward\\n     * @param _tokens total amount of tokens\\n     * @return _rewardPerToken reward per token (this value is returned multiplied by 1e12)\\n     */\\n    function rewardPerToken(uint256 _reward, uint256 _tokens) public pure returns (uint256 _rewardPerToken) {\\n        // apply the formula and return\\n        return (_reward * REWARD_PER_TOKEN_MULTIPLIER) / _tokens;\\n    }\\n\\n    /**\\n     * @notice Calculates current vault rewards value available for address specified\\n     *\\n     * @dev Performs calculations based on current smart contract state only,\\n     *      not taking into account any additional time/blocks which might have passed\\n     *\\n     * @param _staker an address to calculate vault rewards value for\\n     * @return pending calculated vault reward value for the given address\\n     */\\n    function pendingVaultRewards(address _staker) public view override returns (uint256 pending) {\\n        User memory user = users[_staker];\\n\\n        return tokensToReward(user.tokenAmount, vaultRewardsPerToken) - user.subVaultRewards;\\n    }\\n\\n    /**\\n     * @dev Returns locked holder staked balance\\n     *\\n     * @param _staker address to check locked tokens balance\\n     */\\n    function balanceOf(address _staker) external view override returns (uint256 balance) {\\n        balance = users[_staker].tokenAmount;\\n    }\\n\\n    /**\\n     * @dev Executed only by the factory owner to Set the vault\\n     *\\n     * @param _vault an address of deployed IlluviumVault instance\\n     */\\n    function setVault(address _vault) external {\\n        // verify function is executed by the factory owner\\n        require(Ownable(tokenLocking).owner() == msg.sender, \\\"access denied\\\");\\n\\n        // verify input is set\\n        require(_vault != address(0), \\\"zero input\\\");\\n\\n        // emit an event\\n        emit VaultUpdated(msg.sender, vault, _vault);\\n\\n        // update vault address\\n        vault = _vault;\\n    }\\n\\n    /**\\n     * @dev Executed by the TokenLocking instance to stake\\n     *      locked tokens on behalf of their holders\\n     *\\n     * @param _staker locked tokens holder address\\n     * @param _amount amount of the tokens staked\\n     */\\n    function stakeLockedTokens(address _staker, uint256 _amount) external override onlyTokenLocking {\\n        _stake(_staker, _amount);\\n    }\\n\\n    /**\\n     * @dev Executed by the TokenLocking instance to unstake\\n     *      locked tokens on behalf of their holders\\n     *\\n     * @param _staker locked tokens holder address\\n     * @param _amount amount of the tokens to be unstaked\\n     */\\n    function unstakeLockedTokens(address _staker, uint256 _amount) external override onlyTokenLocking {\\n        _unstake(_staker, _amount);\\n    }\\n\\n    /**\\n     * @dev Calculates vault rewards for the transaction sender and sends these rewards immediately\\n     *\\n     * @dev calls internal _processVaultRewards and passes _staker as msg.sender\\n     */\\n    function processVaultRewards() external {\\n        _processVaultRewards(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Executed by the vault to transfer vault rewards ILV from the vault\\n     *      into the pool\\n     *\\n     * @param _rewardsAmount amount of ILV rewards to transfer into the pool\\n     */\\n    function receiveVaultRewards(uint256 _rewardsAmount) external override {\\n        require(msg.sender == vault, \\\"access denied\\\");\\n        // return silently if there is no reward to receive\\n        if (_rewardsAmount == 0) {\\n            return;\\n        }\\n        require(poolTokenReserve > 0, \\\"zero reserve\\\");\\n\\n        transferIlvFrom(msg.sender, address(this), _rewardsAmount);\\n\\n        vaultRewardsPerToken += rewardPerToken(_rewardsAmount, poolTokenReserve);\\n        poolTokenReserve += _rewardsAmount;\\n\\n        emit VaultRewardsReceived(msg.sender, _rewardsAmount);\\n    }\\n\\n    /**\\n     * @dev Executed by token locking contract, by changing a locked token owner\\n     *      after verifying the signature.\\n     * @dev Inputs are validated by the caller - TokenLocking smart contract\\n     *\\n     * @param _from account to move tokens from\\n     * @param _to account to move tokens to\\n     */\\n    function changeLockedHolder(address _from, address _to) external override onlyTokenLocking {\\n        users[_to] = users[_from];\\n        delete users[_from];\\n    }\\n\\n    /**\\n     * @dev Used internally, mostly by children implementations, see stake()\\n     *\\n     * @param _staker an address which stakes tokens and which will receive them back\\n     * @param _amount amount of tokens to stake\\n     */\\n    function _stake(address _staker, uint256 _amount) private {\\n        // validate the inputs\\n        require(_amount > 0, \\\"zero amount\\\");\\n        _processVaultRewards(_staker);\\n\\n        User storage user = users[_staker];\\n        user.tokenAmount += _amount;\\n        poolTokenReserve += _amount;\\n        user.subVaultRewards = tokensToReward(user.tokenAmount, vaultRewardsPerToken);\\n\\n        // emit an event\\n        emit Staked(_staker, _amount);\\n    }\\n\\n    /**\\n     * @dev Used internally, mostly by children implementations, see unstake()\\n     *\\n     * @param _staker an address which unstakes tokens (which previously staked them)\\n     * @param _amount amount of tokens to unstake\\n     */\\n    function _unstake(address _staker, uint256 _amount) private {\\n        // verify an amount is set\\n        require(_amount > 0, \\\"zero amount\\\");\\n        User storage user = users[_staker];\\n        require(user.tokenAmount >= _amount, \\\"not enough balance\\\");\\n        _processVaultRewards(_staker);\\n        user.tokenAmount -= _amount;\\n        poolTokenReserve -= _amount;\\n        user.subVaultRewards = tokensToReward(user.tokenAmount, vaultRewardsPerToken);\\n\\n        // emit an event\\n        emit Unstaked(_staker, _amount);\\n    }\\n\\n    /**\\n     * @dev Calculates vault rewards for the `_staker` and sends these rewards immediately\\n     *\\n     * @dev Used internally to process vault rewards for the staker\\n     *\\n     * @param _staker address of the user (staker) to process rewards for\\n     */\\n    function _processVaultRewards(address _staker) private {\\n        User storage user = users[_staker];\\n        uint256 pendingVaultClaim = pendingVaultRewards(_staker);\\n        if (pendingVaultClaim == 0) return;\\n        // read ILV token balance of the pool via standard ERC20 interface\\n        uint256 ilvBalance = IERC20(ilv).balanceOf(address(this));\\n        require(ilvBalance >= pendingVaultClaim, \\\"contract ILV balance too low\\\");\\n        // protects against rounding errors\\n        poolTokenReserve -= pendingVaultClaim > poolTokenReserve ? poolTokenReserve : pendingVaultClaim;\\n\\n        user.subVaultRewards = tokensToReward(user.tokenAmount, vaultRewardsPerToken);\\n\\n        transferIlv(_staker, pendingVaultClaim);\\n\\n        emit VaultRewardsClaimed(msg.sender, _staker, pendingVaultClaim);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/vgorin/DEVELOP/up/Cryptant/cryptant-contracts/contracts/pools/TokenLocking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\nimport \\\"../interfaces/ILockedPool.sol\\\";\\nimport \\\"./IlluviumAware.sol\\\";\\nimport \\\"./IlluviumLockedPool.sol\\\";\\nimport \\\"../utils/Ownable.sol\\\";\\n\\n/**\\n * @title Token Locking\\n *\\n * @notice A token holder contract that can release its token balance gradually like a\\n *      typical vesting scheme, with a cliff and vesting period.\\n * @notice Supports token staking for the tokens locked; staking is powered by IlluviumLockedPool (locked tokens pool)\\n *\\n * @notice Smart contract is deployed/initialized in 4 steps. During the initialization period the\\n *      deployer is able to set locked token holders' balances and finally set the locked tokens pool\\n *      to enable staking. Once final step is complete the deployer no longer can do that.\\n *\\n * @dev To initialize:\\n *      1) deploy this smart contract (prerequisite: ILV token deployed)\\n *      2) set the locked token holders and balances with `setBalances`\\n *      3) transfer ILV in the amount equal to the sum of all holders' balances to the deployed instance\\n *      4) [optional] set the Locked Token Pool with `setPool` (staking won't work until this is done)\\n *\\n * @dev The purpose of steps 2 and 3 is to have team and pre-seed investors tokens locked immediately,\\n *      without giving them an ability not to lock them; in the same time we preserve an ability to stake\\n *      these locked tokens\\n *\\n * @dev TokenLocking contract works with the token amount up to 10^7, which makes it safe\\n *      to use uint96 for token amounts in the contract\\n *\\n * @dev Inspired by OpenZeppelin's TokenVesting.sol draft\\n *\\n * @author Pedro Bergamini, reviewed by Basil Gorin\\n */\\ncontract TokenLocking is Ownable, IlluviumAware {\\n    /**\\n     * @dev Smart contract unique identifier, a random number\\n     * @dev Should be regenerated each time smart contact source code is changed\\n     *      and changes smart contract itself is to be redeployed\\n     * @dev Generated using https://www.random.org/bytes/\\n     */\\n    uint256 public constant LOCKING_UID = 0x76ff776d518e4c1b71ef4a1af2227a94e9868d7c9ecfa08e9255d2360e18f347;\\n\\n    /// @dev Keeps the essential user data required to return (unlock) locked tokens\\n    struct UserRecord {\\n        // @dev Amount of the currently locked ILV tokens\\n        uint96 ilvBalance;\\n        // @dev ILV already unlocked (during linear unlocking period for example)\\n        //      Total amount of holder's tokens is the sum `balance + released`\\n        uint96 ilvReleased;\\n        // @dev Flag indicating if holder's balance was staked (sent to  Pool)\\n        bool hasStaked;\\n    }\\n\\n    /// @dev Maps locked token holder address to their user record (see above)\\n    mapping(address => UserRecord) public userRecords;\\n\\n    /// @dev Enumeration of all the locked token holders\\n    address[] public lockedHolders;\\n\\n    /// @dev When the linear unlocking starts, unix timestamp\\n    uint64 public immutable cliff;\\n    /// @dev How long the linear unlocking takes place, seconds\\n    uint32 public immutable duration;\\n\\n    /// @dev Link to Locked Pool used to stake locked tokens and receive vault rewards\\n    IlluviumLockedPool public pool;\\n\\n    /// @dev Nonces to support EIP-712 based token migrations\\n    mapping(address => uint256) public migrationNonces;\\n\\n    /**\\n     * @notice EIP-712 contract's domain typeHash,\\n     *      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\\n     */\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /**\\n     * @notice EIP-712 contract's domain separator,\\n     *      see https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator\\n     */\\n    bytes32 public immutable DOMAIN_SEPARATOR;\\n\\n    /**\\n     * @notice EIP-712 token migration struct typeHash,\\n     *      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\\n     */\\n    bytes32 public constant MIGRATION_TYPEHASH =\\n        keccak256(\\\"Migration(address from,address to,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @dev Fired in release(), triggered by regular users (locked token holders)\\n    event TokensReleased(address indexed holder, uint96 amountIlv);\\n    /// @dev Fired in stake(), triggered by regular users (locked token holders)\\n    event TokensStaked(address indexed _by, address indexed pool, uint96 amount);\\n    /// @dev Fired in _unstakeIlv(), triggered by regular users (locked token holders)\\n    event TokensUnstaked(address indexed _by, address indexed pool, uint96 amount);\\n    /// @dev Fired in setPool(), triggered by admins only\\n    event PoolUpdated(address indexed _by, address indexed poolAddr);\\n    /// @dev Fired in setBalances(), triggered by admins only\\n    event LockedBalancesSet(address indexed _by, uint32 recordsNum, uint96 totalAmount);\\n    /// @dev Fired in migrateTokens(), triggered by admin only\\n    event TokensMigrated(address indexed _from, address indexed _to);\\n\\n    /**\\n     * @dev Creates a token locking contract which integrates with the locked pool for token staking\\n     *      and implements linear unlocking mechanism starting at `_cliff` and lasting for `_duration`\\n     *\\n     * @param _cliff unix timestamp when the unlocking starts\\n     * @param _duration linear unlocking period (duration)\\n     * @param _ilv an address of the ILV ERC20 token\\n     */\\n    constructor(\\n        uint64 _cliff,\\n        uint32 _duration,\\n        address _ilv\\n    ) IlluviumAware(_ilv) {\\n        // verify the input parameters are set\\n        require(_cliff > 0, \\\"cliff is not set (zero)\\\");\\n        require(_duration > 0, \\\"duration is not set (zero)\\\");\\n\\n        // init the variables\\n        cliff = _cliff;\\n        duration = _duration;\\n\\n        // init the EIP-712 contract domain separator\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(\\\"TokenLocking\\\")), block.chainid, address(this))\\n        );\\n    }\\n\\n    /**\\n     * @dev Restricted access function to be executed by smart contract owner (admin)\\n     *      as a part of initialization process (step 4 - last step)\\n     * @dev Sets the Pool to be used for ILV staking, see `stake()`\\n     *\\n     * @dev Can be executed only once, throws if an attempt to set pool again is made\\n     * @dev Requires to be executed by smart contract owner\\n     *\\n     * @param _pool an address of the Pool to set\\n     */\\n    function setPool(IlluviumLockedPool _pool) external onlyOwner {\\n        // verify the input address is set (not zero)\\n        require(address(_pool) != address(0), \\\"Pool address is not specified (zero)\\\");\\n        // check that Pool was not already set before\\n        require(address(pool) == address(0), \\\"Pool is already set\\\");\\n\\n        // verify the pool is of the expected type\\n        require(\\n            _pool.POOL_UID() == 0x620bbda48b8ff3098da2f0033cbf499115c61efdd5dcd2db05346782df6218e7,\\n            \\\"unexpected POOL_UID\\\"\\n        );\\n\\n        // setup the locked tokens pool address\\n        pool = _pool;\\n\\n        // emit an event\\n        emit PoolUpdated(msg.sender, address(_pool));\\n    }\\n\\n    /**\\n     * @dev Restricted access function to be executed by smart contract owner (admin)\\n     *      as a part of initialization process (step 2)\\n     * @dev Sets the balances of the token owners, effectively allowing these balances to\\n     *      be staked and released when time comes, see `stake()`, see `release()`\\n     *\\n     * @dev Can be executed only before locked pool is set with `setPool`\\n     *\\n     * @dev Each execution overwrites the result of the previous one.\\n     *      Function cannot be effectively used to set bigger number of locked token holders\\n     *      that fits into a single block, which, however, is not required since\\n     *      the number of locked token holders doesn't exceed 100\\n     *\\n     * @dev Requires to be executed by smart contract owner\\n     * @dev Requires `owners` and `amounts` arrays sizes to match\\n     *\\n     * @param holders token holders array\\n     * @param amounts token holders corresponding balances\\n     */\\n    function setBalances(\\n        address[] memory holders,\\n        uint96[] memory amounts,\\n        uint96 expectedTotal\\n    ) external onlyOwner {\\n        // verify arrays lengths match\\n        require(holders.length == amounts.length, \\\"input arr lengths mismatch\\\");\\n\\n        // we're not going to touch balances once the pool is set and staking becomes possible\\n        require(address(pool) == address(0), \\\"too late: pool is already set\\\");\\n\\n        // we're not going to touch balances once linear unlocking phase starts\\n        require(now256() < cliff, \\\"too late: unlocking already begun\\\");\\n\\n        // erase previously set mappings if any\\n        for (uint256 i = 0; i < lockedHolders.length; i++) {\\n            // delete old user record\\n            delete userRecords[lockedHolders[i]];\\n        }\\n\\n        // update the locked holders enumeration\\n        lockedHolders = holders;\\n\\n        // total amount set - to be used in LockedBalancesSet event log\\n        uint96 totalAmount = 0;\\n\\n        // iterate the data supplied,\\n        for (uint256 i = 0; i < holders.length; i++) {\\n            // verify the inputs\\n            require(holders[i] != address(0), \\\"zero holder address found\\\");\\n            require(amounts[i] != 0, \\\"zero amount found\\\");\\n\\n            // ensure input holders array doesn't have non-zero duplicates\\n            require(userRecords[holders[i]].ilvBalance == 0, \\\"duplicate addresses found\\\");\\n\\n            // update user record's balance value (locked tokens amount)\\n            userRecords[holders[i]].ilvBalance = amounts[i];\\n\\n            // update total amount\\n            totalAmount += amounts[i];\\n        }\\n\\n        // ensure total amount is as expected\\n        require(totalAmount == expectedTotal, \\\"unexpected total\\\");\\n\\n        // emit an event\\n        emit LockedBalancesSet(msg.sender, uint32(holders.length), totalAmount);\\n    }\\n\\n    /**\\n     * @dev Reads the ILV balance of the token holder\\n     *\\n     * @param holder locked tokens holder address\\n     * @return token holder locked balance (ILV)\\n     */\\n    function balanceOf(address holder) external view returns (uint96) {\\n        // read from the storage and return\\n        return userRecords[holder].ilvBalance;\\n    }\\n\\n    /**\\n     * @notice Checks if an address supplied has staked its tokens\\n\\n     * @dev A shortcut to userRecords.hasStaked flag\\n     *\\n     * @param holder an address to query staked flag for\\n     * @return whether the token holder has already staked or not\\n     */\\n    function hasStaked(address holder) external view returns (bool) {\\n        // read from the storage and return\\n        return userRecords[holder].hasStaked;\\n    }\\n\\n    /**\\n     * @notice Transfers vested tokens back to beneficiary, is executed after\\n     *      locked tokens get unlocked (at least partially)\\n     *\\n     * @notice When releasing the staked tokens `useSILV` determines if the reward\\n     *      is returned back as an sILV token (true) or if an ILV deposit is created (false)\\n     *\\n     * @dev Throws if executed before `cliff` timestamp\\n     * @dev Throws if there are no tokens to release\\n     */\\n    function release() external {\\n        UserRecord storage userRecord = userRecords[msg.sender];\\n        // calculate how many tokens are available for the sender to withdraw\\n        uint96 unreleasedIlv = releasableAmount(msg.sender);\\n\\n        // ensure there are some tokens to withdraw\\n        require(unreleasedIlv > 0, \\\"no tokens are due\\\");\\n\\n        // update balance and released user counters\\n        userRecord.ilvBalance -= unreleasedIlv;\\n        userRecord.ilvReleased += unreleasedIlv;\\n\\n        // when the tokens were previously staked\\n        if (userRecord.hasStaked) {\\n            // unstake these tokens - delegate to internal `_unstakeIlv`\\n            _unstakeIlv(unreleasedIlv);\\n        }\\n        // transfer the tokens back to the holder\\n        transferIlv(msg.sender, unreleasedIlv);\\n\\n        // emit an event\\n        emit TokensReleased(msg.sender, unreleasedIlv);\\n    }\\n\\n    /**\\n     * @notice Stakes the tokens into the Pool,\\n     *      effectively transferring them into the pool;\\n     *      can be called by the locked token holders only once\\n     *\\n     * @dev Throws if Pool is not set (see initialization), if holder has already staked\\n     *      or of holder is not registered within the smart contract and its balance is zero\\n     */\\n    function stake() external {\\n        // verify Pool address has been set\\n        require(address(pool) != address(0), \\\"pool is not set\\\");\\n\\n        // get a link to a user record\\n        UserRecord storage userRecord = userRecords[msg.sender];\\n\\n        // verify holder hasn't already staked\\n        require(!userRecord.hasStaked, \\\"tokens already staked\\\");\\n\\n        // read holder's balance into the stack\\n        uint96 amount = userRecord.ilvBalance;\\n\\n        // verify the balance is positive\\n        require(amount > 0, \\\"nothing to stake\\\");\\n\\n        // update the staked flag in user records\\n        userRecord.hasStaked = true;\\n\\n        // transfer the tokens into the pool, staking them\\n        pool.stakeLockedTokens(msg.sender, amount);\\n\\n        // emit an event\\n        emit TokensStaked(msg.sender, address(pool), amount);\\n    }\\n\\n    // @dev Releases staked ilv tokens, called internally\\n    function _unstakeIlv(uint96 amount) private {\\n        // unstake from the pool\\n        // we assume locking deposit is #0 which is by design of pool\\n        pool.unstakeLockedTokens(msg.sender, amount);\\n        // and emit an event\\n        emit TokensUnstaked(msg.sender, address(pool), amount);\\n    }\\n\\n    /**\\n     * @notice Moves locked tokens between two addresses. Designed to be used\\n     *      in emergency situations when locked token holder suspects their\\n     *      account credentials ware revealed\\n     *\\n     * @dev Executed by contract owner on behalf of the locked tokens holder\\n     *\\n     * @dev Compliant with EIP-712: Ethereum typed structured data hashing and signing,\\n     *      see https://eips.ethereum.org/EIPS/eip-712\\n     *\\n     * @dev The procedure of signing the migration with signature request is:\\n     *      1. Construct the EIP712Domain as per https://eips.ethereum.org/EIPS/eip-712,\\n     *          version and salt are omitted:\\n     *          {\\n     *              name: \\\"TokenLocking\\\",\\n     *              chainId: await web3.eth.net.getId(),\\n     *              verifyingContract: <deployed TokenLocking address>\\n     *          }\\n     *      2. Construct the EIP712 domainSeparator:\\n     *          domainSeparator = hashStruct(eip712Domain)\\n     *      3. Construct the EIP721 TypedData:\\n     *          primaryType: \\\"Migration\\\",\\n     *          types: {\\n     *              Migration: [\\n     *                  {name: 'from', type: 'address'},\\n     *                  {name: 'to', type: 'address'},\\n     *                  {name: 'nonce', type: 'uint256'},\\n     *                  {name: 'expiry', type: 'uint256'}\\n     *              ]\\n     *          }\\n     *      4. Build the message to sign:\\n     *          {\\n     *              from: _from,\\n     *              to: _to,\\n     *              nonce: _nonce,\\n     *              exp: _exp\\n     *          }\\n     *       5. Build the structHash as per EIP712 and sign it\\n     *          (see example https://github.com/ethereum/EIPs/blob/master/assets/eip-712/Example.js)\\n     *\\n     * @dev Refer to EIP712 code examples:\\n     *      https://github.com/ethereum/EIPs/blob/master/assets/eip-712/Example.sol\\n     *      https://github.com/ethereum/EIPs/blob/master/assets/eip-712/Example.js\\n     *\\n     * @dev See TokenLocking-ns.test.js for the exact working examples with TokenLocking.sol\\n     *\\n     * @param _from an address to move locked tokens from\\n     * @param _to an address to move locked tokens to\\n     * @param _nonce nonce used to construct the signature, and used to validate it;\\n     *      nonce is increased by one after successful signature validation and vote delegation\\n     * @param _exp signature expiration time\\n     * @param v the recovery byte of the signature\\n     * @param r half of the ECDSA signature pair\\n     * @param s half of the ECDSA signature pair\\n     */\\n    function migrateWithSig(\\n        address _from,\\n        address _to,\\n        uint256 _nonce,\\n        uint256 _exp,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        // build the EIP-712 hashStruct of the delegation message\\n        bytes32 hashStruct = keccak256(abi.encode(MIGRATION_TYPEHASH, _from, _to, _nonce, _exp));\\n\\n        // calculate the EIP-712 digest \\\"\\\\x19\\\\x01\\\" ‖ domainSeparator ‖ hashStruct(message)\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, hashStruct));\\n\\n        // recover the address who signed the message with v, r, s\\n        address signer = ecrecover(digest, v, r, s);\\n\\n        // perform message integrity and security validations\\n        require(signer != address(0), \\\"invalid signature\\\");\\n        require(_nonce == migrationNonces[signer], \\\"invalid nonce\\\");\\n        require(now256() < _exp, \\\"signature expired\\\");\\n\\n        // verify signature: it should be either token owner or contract owner\\n        require(\\n            (signer == _from && msg.sender == owner()) || (signer == owner() && msg.sender == _from),\\n            \\\"access denied\\\"\\n        );\\n\\n        // update the nonce for that particular signer to avoid replay attack\\n        migrationNonces[signer]++;\\n\\n        // delegate call to `__migrateTokens` - execute the logic required\\n        __migrateTokens(_from, _to);\\n    }\\n\\n    /**\\n     * @dev Moves locked tokens from `_from` address to `_to` address\\n     * @dev Designed to be used in emergency situations when locked token\\n     *      holder suspects their account credentials ware revealed\\n     *\\n     * @param _from an address to move locked tokens from\\n     * @param _to an address to move locked tokens to\\n     */\\n    function __migrateTokens(address _from, address _to) private {\\n        // verify `_to` is set\\n        require(_to != address(0), \\\"receiver is not set\\\");\\n\\n        // following 2 verifications also ensure _to != _from\\n        // verify `_from` user record exists\\n        require(userRecords[_from].ilvBalance != 0 || userRecords[_from].ilvReleased != 0, \\\"sender doesn't exist\\\");\\n        // verify `_to` user record doesn't exist\\n        require(userRecords[_to].ilvBalance == 0 && userRecords[_to].ilvReleased == 0, \\\"recipient already exists\\\");\\n\\n        // move user record from `_from` to `_to`\\n        userRecords[_to] = userRecords[_from];\\n        // delete old user record\\n        delete userRecords[_from];\\n\\n        // if locking pool is defined\\n        if (address(pool) != address(0)) {\\n            // register this change within the pool\\n            pool.changeLockedHolder(_from, _to);\\n        }\\n\\n        // push new locked holder into locked holders array\\n        lockedHolders.push(_to);\\n        // note: we do not delete old locked holder from the array since by design old account\\n        // is treated as a compromised one and should not be used, meaning it is always safe to erase it\\n\\n        // emit an event\\n        emit TokensMigrated(_from, _to);\\n    }\\n\\n    /**\\n     * @notice Calculates token amount available for holder to be released\\n     *\\n     * @param holder an address to query releasable amount for\\n     * @return ilvAmt amount of ILV tokens available for withdrawal (see release function)\\n     */\\n    function releasableAmount(address holder) public view returns (uint96 ilvAmt) {\\n        // calculate a difference between amount of tokens available for\\n        // withdrawal currently (vested amount) and amount of tokens already withdrawn (released)\\n        return vestedAmount(holder) - userRecords[holder].ilvReleased;\\n    }\\n\\n    /**\\n     * @notice Calculates the amount to be unlocked for the given holder at the\\n     *      current moment in time (vested amount)\\n     *\\n     * @dev This function implements the linear unlocking mechanism based on\\n     *      the `cliff` and `duration` global variables as parameters:\\n     *      amount is zero before `cliff`, then linearly increases during `duration` period,\\n     *      and reaches the total holder's locked balance after that\\n     *\\n     * @dev See `linearUnlockAmt()` function for linear unlocking internals\\n     *\\n     * @param holder an address to query unlocked (vested) amount for\\n     * @return ilvAmt amount of ILV tokens to be unlocked based on the holder's locked balance and current time,\\n     *      the value is zero before `cliff`, then linearly increases during `duration` period,\\n     *      and reaches the total holder's locked balance after that\\n     */\\n    function vestedAmount(address holder) public view returns (uint96 ilvAmt) {\\n        // before `cliff` we don't need to access the storage:\\n        if (now256() < cliff) {\\n            // the return values are zeros\\n            return 0;\\n        }\\n\\n        // read user record values into the memory\\n        UserRecord memory userRecord = userRecords[holder];\\n\\n        // the value is calculated as a linear function of time\\n        ilvAmt = linearUnlockAmt(userRecord.ilvBalance + userRecord.ilvReleased);\\n\\n        // return the result is unnecessary, but we stick to the single code style\\n        return ilvAmt;\\n    }\\n\\n    /**\\n     * @notice Linear unlocking function of time, expects balance as an input,\\n     *      uses current time, `cliff` and `duration` set in the smart contract state vars\\n     *\\n     * @param balance value to calculate linear unlocking fraction for\\n     * @return linear unlocking fraction; zero before `cliff`, `balance` after `cliff + duration`\\n     */\\n    function linearUnlockAmt(uint96 balance) public view returns (uint96) {\\n        // read current time value\\n        uint256 _now256 = now256();\\n\\n        // and fit it into the safe bounds [cliff, cliff + duration] to be used in linear unlocking function\\n        if (_now256 < cliff) {\\n            _now256 = cliff;\\n        } else if (_now256 - cliff > duration) {\\n            _now256 = cliff + duration;\\n        }\\n\\n        // the value is calculated as a linear function of time\\n        return uint96((balance * (_now256 - cliff)) / duration);\\n    }\\n\\n    /**\\n     * @dev Testing time-dependent functionality is difficult and the best way of\\n     *      doing it is to override time in helper test smart contracts\\n     *\\n     * @return `block.timestamp` in mainnet, custom values in testnets (if overridden)\\n     */\\n    function now256() public view virtual returns (uint256) {\\n        // return current block timestamp\\n        return block.timestamp;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/vgorin/DEVELOP/up/Cryptant/cryptant-contracts/contracts/token/ERC20Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\n/**\\n * @title ERC20 token receiver interface\\n *\\n * @dev Interface for any contract that wants to support safe transfers\\n *      from ERC20 token smart contracts.\\n * @dev Inspired by ERC721 and ERC223 token standards\\n *\\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\\n * @dev See https://github.com/ethereum/EIPs/issues/223\\n *\\n * @author Basil Gorin\\n */\\ninterface ERC20Receiver {\\n  /**\\n   * @notice Handle the receipt of a ERC20 token(s)\\n   * @dev The ERC20 smart contract calls this function on the recipient\\n   *      after a successful transfer (`safeTransferFrom`).\\n   *      This function MAY throw to revert and reject the transfer.\\n   *      Return of other than the magic value MUST result in the transaction being reverted.\\n   * @notice The contract address is always the message sender.\\n   *      A wallet/broker/auction application MUST implement the wallet interface\\n   *      if it will accept safe transfers.\\n   * @param _operator The address which called `safeTransferFrom` function\\n   * @param _from The address which previously owned the token\\n   * @param _value amount of tokens which is being transferred\\n   * @param _data additional data with no specified format\\n   * @return `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` unless throwing\\n   */\\n  function onERC20Received(address _operator, address _from, uint256 _value, bytes calldata _data) external returns(bytes4);\\n}\\n\"\r\n    },\r\n    \"/Users/vgorin/DEVELOP/up/Cryptant/cryptant-contracts/contracts/token/IlluviumERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\nimport \\\"../utils/AddressUtils.sol\\\";\\nimport \\\"../utils/AccessControl.sol\\\";\\nimport \\\"./ERC20Receiver.sol\\\";\\n\\n/**\\n * @title Illuvium (ILV) ERC20 token\\n *\\n * @notice Illuvium is a core ERC20 token powering the game.\\n *      It serves as an in-game currency, is tradable on exchanges,\\n *      it powers up the governance protocol (Illuvium DAO) and participates in Yield Farming.\\n *\\n * @dev Token Summary:\\n *      - Symbol: ILV\\n *      - Name: Illuvium\\n *      - Decimals: 18\\n *      - Initial token supply: 7,000,000 ILV\\n *      - Maximum final token supply: 10,000,000 ILV\\n *          - Up to 3,000,000 ILV may get minted in 3 years period via yield farming\\n *      - Mintable: total supply may increase\\n *      - Burnable: total supply may decrease\\n *\\n * @dev Token balances and total supply are effectively 192 bits long, meaning that maximum\\n *      possible total supply smart contract is able to track is 2^192 (close to 10^40 tokens)\\n *\\n * @dev Smart contract doesn't use safe math. All arithmetic operations are overflow/underflow safe.\\n *      Additionally, Solidity 0.8.1 enforces overflow/underflow safety.\\n *\\n * @dev ERC20: reviewed according to https://eips.ethereum.org/EIPS/eip-20\\n *\\n * @dev ERC20: contract has passed OpenZeppelin ERC20 tests,\\n *      see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/test/token/ERC20/ERC20.behavior.js\\n *      see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/test/token/ERC20/ERC20.test.js\\n *      see adopted copies of these tests in the `test` folder\\n *\\n * @dev ERC223/ERC777: not supported;\\n *      send tokens via `safeTransferFrom` and implement `ERC20Receiver.onERC20Received` on the receiver instead\\n *\\n * @dev Multiple Withdrawal Attack on ERC20 Tokens (ISBN:978-1-7281-3027-9) - resolved\\n *      Related events and functions are marked with \\\"ISBN:978-1-7281-3027-9\\\" tag:\\n *        - event Transferred(address indexed _by, address indexed _from, address indexed _to, uint256 _value)\\n *        - event Approved(address indexed _owner, address indexed _spender, uint256 _oldValue, uint256 _value)\\n *        - function increaseAllowance(address _spender, uint256 _value) public returns (bool)\\n *        - function decreaseAllowance(address _spender, uint256 _value) public returns (bool)\\n *      See: https://ieeexplore.ieee.org/document/8802438\\n *      See: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n *\\n * @author Basil Gorin\\n */\\ncontract IlluviumERC20 is AccessControl {\\n  /**\\n   * @dev Smart contract unique identifier, a random number\\n   * @dev Should be regenerated each time smart contact source code is changed\\n   *      and changes smart contract itself is to be redeployed\\n   * @dev Generated using https://www.random.org/bytes/\\n   */\\n  uint256 public constant TOKEN_UID = 0x83ecb176af7c4f35a45ff0018282e3a05a1018065da866182df12285866f5a2c;\\n\\n  /**\\n   * @notice Name of the token: Illuvium\\n   *\\n   * @notice ERC20 name of the token (long name)\\n   *\\n   * @dev ERC20 `function name() public view returns (string)`\\n   *\\n   * @dev Field is declared public: getter name() is created when compiled,\\n   *      it returns the name of the token.\\n   */\\n  string public constant name = \\\"Illuvium\\\";\\n\\n  /**\\n   * @notice Symbol of the token: ILV\\n   *\\n   * @notice ERC20 symbol of that token (short name)\\n   *\\n   * @dev ERC20 `function symbol() public view returns (string)`\\n   *\\n   * @dev Field is declared public: getter symbol() is created when compiled,\\n   *      it returns the symbol of the token\\n   */\\n  string public constant symbol = \\\"ILV\\\";\\n\\n  /**\\n   * @notice Decimals of the token: 18\\n   *\\n   * @dev ERC20 `function decimals() public view returns (uint8)`\\n   *\\n   * @dev Field is declared public: getter decimals() is created when compiled,\\n   *      it returns the number of decimals used to get its user representation.\\n   *      For example, if `decimals` equals `6`, a balance of `1,500,000` tokens should\\n   *      be displayed to a user as `1,5` (`1,500,000 / 10 ** 6`).\\n   *\\n   * @dev NOTE: This information is only used for _display_ purposes: it in\\n   *      no way affects any of the arithmetic of the contract, including balanceOf() and transfer().\\n   */\\n  uint8 public constant decimals = 18;\\n\\n  /**\\n   * @notice Total supply of the token: initially 7,000,000,\\n   *      with the potential to grow up to 10,000,000 during yield farming period (3 years)\\n   *\\n   * @dev ERC20 `function totalSupply() public view returns (uint256)`\\n   *\\n   * @dev Field is declared public: getter totalSupply() is created when compiled,\\n   *      it returns the amount of tokens in existence.\\n   */\\n  uint256 public totalSupply; // is set to 7 million * 10^18 in the constructor\\n\\n  /**\\n   * @dev A record of all the token balances\\n   * @dev This mapping keeps record of all token owners:\\n   *      owner => balance\\n   */\\n  mapping(address => uint256) public tokenBalances;\\n\\n  /**\\n   * @notice A record of each account's voting delegate\\n   *\\n   * @dev Auxiliary data structure used to sum up an account's voting power\\n   *\\n   * @dev This mapping keeps record of all voting power delegations:\\n   *      voting delegator (token owner) => voting delegate\\n   */\\n  mapping(address => address) public votingDelegates;\\n\\n  /**\\n   * @notice A voting power record binds voting power of a delegate to a particular\\n   *      block when the voting power delegation change happened\\n   */\\n  struct VotingPowerRecord {\\n    /*\\n     * @dev block.number when delegation has changed; starting from\\n     *      that block voting power value is in effect\\n     */\\n    uint64 blockNumber;\\n\\n    /*\\n     * @dev cumulative voting power a delegate has obtained starting\\n     *      from the block stored in blockNumber\\n     */\\n    uint192 votingPower;\\n  }\\n\\n  /**\\n   * @notice A record of each account's voting power\\n   *\\n   * @dev Primarily data structure to store voting power for each account.\\n   *      Voting power sums up from the account's token balance and delegated\\n   *      balances.\\n   *\\n   * @dev Stores current value and entire history of its changes.\\n   *      The changes are stored as an array of checkpoints.\\n   *      Checkpoint is an auxiliary data structure containing voting\\n   *      power (number of votes) and block number when the checkpoint is saved\\n   *\\n   * @dev Maps voting delegate => voting power record\\n   */\\n  mapping(address => VotingPowerRecord[]) public votingPowerHistory;\\n\\n  /**\\n   * @dev A record of nonces for signing/validating signatures in `delegateWithSig`\\n   *      for every delegate, increases after successful validation\\n   *\\n   * @dev Maps delegate address => delegate nonce\\n   */\\n  mapping(address => uint256) public nonces;\\n\\n  /**\\n   * @notice A record of all the allowances to spend tokens on behalf\\n   * @dev Maps token owner address to an address approved to spend\\n   *      some tokens on behalf, maps approved address to that amount\\n   * @dev owner => spender => value\\n   */\\n  mapping(address => mapping(address => uint256)) public transferAllowances;\\n\\n  /**\\n   * @notice Enables ERC20 transfers of the tokens\\n   *      (transfer by the token owner himself)\\n   * @dev Feature FEATURE_TRANSFERS must be enabled in order for\\n   *      `transfer()` function to succeed\\n   */\\n  uint32 public constant FEATURE_TRANSFERS = 0x0000_0001;\\n\\n  /**\\n   * @notice Enables ERC20 transfers on behalf\\n   *      (transfer by someone else on behalf of token owner)\\n   * @dev Feature FEATURE_TRANSFERS_ON_BEHALF must be enabled in order for\\n   *      `transferFrom()` function to succeed\\n   * @dev Token owner must call `approve()` first to authorize\\n   *      the transfer on behalf\\n   */\\n  uint32 public constant FEATURE_TRANSFERS_ON_BEHALF = 0x0000_0002;\\n\\n  /**\\n   * @dev Defines if the default behavior of `transfer` and `transferFrom`\\n   *      checks if the receiver smart contract supports ERC20 tokens\\n   * @dev When feature FEATURE_UNSAFE_TRANSFERS is enabled the transfers do not\\n   *      check if the receiver smart contract supports ERC20 tokens,\\n   *      i.e. `transfer` and `transferFrom` behave like `unsafeTransferFrom`\\n   * @dev When feature FEATURE_UNSAFE_TRANSFERS is disabled (default) the transfers\\n   *      check if the receiver smart contract supports ERC20 tokens,\\n   *      i.e. `transfer` and `transferFrom` behave like `safeTransferFrom`\\n   */\\n  uint32 public constant FEATURE_UNSAFE_TRANSFERS = 0x0000_0004;\\n\\n  /**\\n   * @notice Enables token owners to burn their own tokens,\\n   *      including locked tokens which are burnt first\\n   * @dev Feature FEATURE_OWN_BURNS must be enabled in order for\\n   *      `burn()` function to succeed when called by token owner\\n   */\\n  uint32 public constant FEATURE_OWN_BURNS = 0x0000_0008;\\n\\n  /**\\n   * @notice Enables approved operators to burn tokens on behalf of their owners,\\n   *      including locked tokens which are burnt first\\n   * @dev Feature FEATURE_OWN_BURNS must be enabled in order for\\n   *      `burn()` function to succeed when called by approved operator\\n   */\\n  uint32 public constant FEATURE_BURNS_ON_BEHALF = 0x0000_0010;\\n\\n  /**\\n   * @notice Enables delegators to elect delegates\\n   * @dev Feature FEATURE_DELEGATIONS must be enabled in order for\\n   *      `delegate()` function to succeed\\n   */\\n  uint32 public constant FEATURE_DELEGATIONS = 0x0000_0020;\\n\\n  /**\\n   * @notice Enables delegators to elect delegates on behalf\\n   *      (via an EIP712 signature)\\n   * @dev Feature FEATURE_DELEGATIONS must be enabled in order for\\n   *      `delegateWithSig()` function to succeed\\n   */\\n  uint32 public constant FEATURE_DELEGATIONS_ON_BEHALF = 0x0000_0040;\\n\\n  /**\\n   * @notice Token creator is responsible for creating (minting)\\n   *      tokens to an arbitrary address\\n   * @dev Role ROLE_TOKEN_CREATOR allows minting tokens\\n   *      (calling `mint` function)\\n   */\\n  uint32 public constant ROLE_TOKEN_CREATOR = 0x0001_0000;\\n\\n  /**\\n   * @notice Token destroyer is responsible for destroying (burning)\\n   *      tokens owned by an arbitrary address\\n   * @dev Role ROLE_TOKEN_DESTROYER allows burning tokens\\n   *      (calling `burn` function)\\n   */\\n  uint32 public constant ROLE_TOKEN_DESTROYER = 0x0002_0000;\\n\\n  /**\\n   * @notice ERC20 receivers are allowed to receive tokens without ERC20 safety checks,\\n   *      which may be useful to simplify tokens transfers into \\\"legacy\\\" smart contracts\\n   * @dev When `FEATURE_UNSAFE_TRANSFERS` is not enabled addresses having\\n   *      `ROLE_ERC20_RECEIVER` permission are allowed to receive tokens\\n   *      via `transfer` and `transferFrom` functions in the same way they\\n   *      would via `unsafeTransferFrom` function\\n   * @dev When `FEATURE_UNSAFE_TRANSFERS` is enabled `ROLE_ERC20_RECEIVER` permission\\n   *      doesn't affect the transfer behaviour since\\n   *      `transfer` and `transferFrom` behave like `unsafeTransferFrom` for any receiver\\n   * @dev ROLE_ERC20_RECEIVER is a shortening for ROLE_UNSAFE_ERC20_RECEIVER\\n   */\\n  uint32 public constant ROLE_ERC20_RECEIVER = 0x0004_0000;\\n\\n  /**\\n   * @notice ERC20 senders are allowed to send tokens without ERC20 safety checks,\\n   *      which may be useful to simplify tokens transfers into \\\"legacy\\\" smart contracts\\n   * @dev When `FEATURE_UNSAFE_TRANSFERS` is not enabled senders having\\n   *      `ROLE_ERC20_SENDER` permission are allowed to send tokens\\n   *      via `transfer` and `transferFrom` functions in the same way they\\n   *      would via `unsafeTransferFrom` function\\n   * @dev When `FEATURE_UNSAFE_TRANSFERS` is enabled `ROLE_ERC20_SENDER` permission\\n   *      doesn't affect the transfer behaviour since\\n   *      `transfer` and `transferFrom` behave like `unsafeTransferFrom` for any receiver\\n   * @dev ROLE_ERC20_SENDER is a shortening for ROLE_UNSAFE_ERC20_SENDER\\n   */\\n  uint32 public constant ROLE_ERC20_SENDER = 0x0008_0000;\\n\\n  /**\\n   * @dev Magic value to be returned by ERC20Receiver upon successful reception of token(s)\\n   * @dev Equal to `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))`,\\n   *      which can be also obtained as `ERC20Receiver(address(0)).onERC20Received.selector`\\n   */\\n  bytes4 private constant ERC20_RECEIVED = 0x4fc35859;\\n\\n  /**\\n   * @notice EIP-712 contract's domain typeHash, see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\\n   */\\n  bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n  /**\\n   * @notice EIP-712 delegation struct typeHash, see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\\n   */\\n  bytes32 public constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegate,uint256 nonce,uint256 expiry)\\\");\\n\\n  /**\\n   * @dev Fired in transfer(), transferFrom() and some other (non-ERC20) functions\\n   *\\n   * @dev ERC20 `event Transfer(address indexed _from, address indexed _to, uint256 _value)`\\n   *\\n   * @param _from an address tokens were consumed from\\n   * @param _to an address tokens were sent to\\n   * @param _value number of tokens transferred\\n   */\\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n\\n  /**\\n   * @dev Fired in approve() and approveAtomic() functions\\n   *\\n   * @dev ERC20 `event Approval(address indexed _owner, address indexed _spender, uint256 _value)`\\n   *\\n   * @param _owner an address which granted a permission to transfer\\n   *      tokens on its behalf\\n   * @param _spender an address which received a permission to transfer\\n   *      tokens on behalf of the owner `_owner`\\n   * @param _value amount of tokens granted to transfer on behalf\\n   */\\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n  /**\\n   * @dev Fired in mint() function\\n   *\\n   * @param _by an address which minted some tokens (transaction sender)\\n   * @param _to an address the tokens were minted to\\n   * @param _value an amount of tokens minted\\n   */\\n  event Minted(address indexed _by, address indexed _to, uint256 _value);\\n\\n  /**\\n   * @dev Fired in burn() function\\n   *\\n   * @param _by an address which burned some tokens (transaction sender)\\n   * @param _from an address the tokens were burnt from\\n   * @param _value an amount of tokens burnt\\n   */\\n  event Burnt(address indexed _by, address indexed _from, uint256 _value);\\n\\n  /**\\n   * @dev Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (ISBN:978-1-7281-3027-9)\\n   *\\n   * @dev Similar to ERC20 Transfer event, but also logs an address which executed transfer\\n   *\\n   * @dev Fired in transfer(), transferFrom() and some other (non-ERC20) functions\\n   *\\n   * @param _by an address which performed the transfer\\n   * @param _from an address tokens were consumed from\\n   * @param _to an address tokens were sent to\\n   * @param _value number of tokens transferred\\n   */\\n  event Transferred(address indexed _by, address indexed _from, address indexed _to, uint256 _value);\\n\\n  /**\\n   * @dev Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (ISBN:978-1-7281-3027-9)\\n   *\\n   * @dev Similar to ERC20 Approve event, but also logs old approval value\\n   *\\n   * @dev Fired in approve() and approveAtomic() functions\\n   *\\n   * @param _owner an address which granted a permission to transfer\\n   *      tokens on its behalf\\n   * @param _spender an address which received a permission to transfer\\n   *      tokens on behalf of the owner `_owner`\\n   * @param _oldValue previously granted amount of tokens to transfer on behalf\\n   * @param _value new granted amount of tokens to transfer on behalf\\n   */\\n  event Approved(address indexed _owner, address indexed _spender, uint256 _oldValue, uint256 _value);\\n\\n  /**\\n   * @dev Notifies that a key-value pair in `votingDelegates` mapping has changed,\\n   *      i.e. a delegator address has changed its delegate address\\n   *\\n   * @param _of delegator address, a token owner\\n   * @param _from old delegate, an address which delegate right is revoked\\n   * @param _to new delegate, an address which received the voting power\\n   */\\n  event DelegateChanged(address indexed _of, address indexed _from, address indexed _to);\\n\\n  /**\\n   * @dev Notifies that a key-value pair in `votingPowerHistory` mapping has changed,\\n   *      i.e. a delegate's voting power has changed.\\n   *\\n   * @param _of delegate whose voting power has changed\\n   * @param _fromVal previous number of votes delegate had\\n   * @param _toVal new number of votes delegate has\\n   */\\n  event VotingPowerChanged(address indexed _of, uint256 _fromVal, uint256 _toVal);\\n\\n  /**\\n   * @dev Deploys the token smart contract,\\n   *      assigns initial token supply to the address specified\\n   *\\n   * @param _initialHolder owner of the initial token supply\\n   */\\n  constructor(address _initialHolder) {\\n    // verify initial holder address non-zero (is set)\\n    require(_initialHolder != address(0), \\\"_initialHolder not set (zero address)\\\");\\n\\n    // mint initial supply\\n    mint(_initialHolder, 7_000_000e18);\\n  }\\n\\n  // ===== Start: ERC20/ERC223/ERC777 functions =====\\n\\n  /**\\n   * @notice Gets the balance of a particular address\\n   *\\n   * @dev ERC20 `function balanceOf(address _owner) public view returns (uint256 balance)`\\n   *\\n   * @param _owner the address to query the the balance for\\n   * @return balance an amount of tokens owned by the address specified\\n   */\\n  function balanceOf(address _owner) public view returns (uint256 balance) {\\n    // read the balance and return\\n    return tokenBalances[_owner];\\n  }\\n\\n  /**\\n   * @notice Transfers some tokens to an external address or a smart contract\\n   *\\n   * @dev ERC20 `function transfer(address _to, uint256 _value) public returns (bool success)`\\n   *\\n   * @dev Called by token owner (an address which has a\\n   *      positive token balance tracked by this smart contract)\\n   * @dev Throws on any error like\\n   *      * insufficient token balance or\\n   *      * incorrect `_to` address:\\n   *          * zero address or\\n   *          * self address or\\n   *          * smart contract which doesn't support ERC20\\n   *\\n   * @param _to an address to transfer tokens to,\\n   *      must be either an external address or a smart contract,\\n   *      compliant with the ERC20 standard\\n   * @param _value amount of tokens to be transferred, must\\n   *      be greater than zero\\n   * @return success true on success, throws otherwise\\n   */\\n  function transfer(address _to, uint256 _value) public returns (bool success) {\\n    // just delegate call to `transferFrom`,\\n    // `FEATURE_TRANSFERS` is verified inside it\\n    return transferFrom(msg.sender, _to, _value);\\n  }\\n\\n  /**\\n   * @notice Transfers some tokens on behalf of address `_from' (token owner)\\n   *      to some other address `_to`\\n   *\\n   * @dev ERC20 `function transferFrom(address _from, address _to, uint256 _value) public returns (bool success)`\\n   *\\n   * @dev Called by token owner on his own or approved address,\\n   *      an address approved earlier by token owner to\\n   *      transfer some amount of tokens on its behalf\\n   * @dev Throws on any error like\\n   *      * insufficient token balance or\\n   *      * incorrect `_to` address:\\n   *          * zero address or\\n   *          * same as `_from` address (self transfer)\\n   *          * smart contract which doesn't support ERC20\\n   *\\n   * @param _from token owner which approved caller (transaction sender)\\n   *      to transfer `_value` of tokens on its behalf\\n   * @param _to an address to transfer tokens to,\\n   *      must be either an external address or a smart contract,\\n   *      compliant with the ERC20 standard\\n   * @param _value amount of tokens to be transferred, must\\n   *      be greater than zero\\n   * @return success true on success, throws otherwise\\n   */\\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\\n    // depending on `FEATURE_UNSAFE_TRANSFERS` we execute either safe (default)\\n    // or unsafe transfer\\n    // if `FEATURE_UNSAFE_TRANSFERS` is enabled\\n    // or receiver has `ROLE_ERC20_RECEIVER` permission\\n    // or sender has `ROLE_ERC20_SENDER` permission\\n    if(isFeatureEnabled(FEATURE_UNSAFE_TRANSFERS)\\n      || isOperatorInRole(_to, ROLE_ERC20_RECEIVER)\\n      || isSenderInRole(ROLE_ERC20_SENDER)) {\\n      // we execute unsafe transfer - delegate call to `unsafeTransferFrom`,\\n      // `FEATURE_TRANSFERS` is verified inside it\\n      unsafeTransferFrom(_from, _to, _value);\\n    }\\n    // otherwise - if `FEATURE_UNSAFE_TRANSFERS` is disabled\\n    // and receiver doesn't have `ROLE_ERC20_RECEIVER` permission\\n    else {\\n      // we execute safe transfer - delegate call to `safeTransferFrom`, passing empty `_data`,\\n      // `FEATURE_TRANSFERS` is verified inside it\\n      safeTransferFrom(_from, _to, _value, \\\"\\\");\\n    }\\n\\n    // both `unsafeTransferFrom` and `safeTransferFrom` throw on any error, so\\n    // if we're here - it means operation successful,\\n    // just return true\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Transfers some tokens on behalf of address `_from' (token owner)\\n   *      to some other address `_to`\\n   *\\n   * @dev Inspired by ERC721 safeTransferFrom, this function allows to\\n   *      send arbitrary data to the receiver on successful token transfer\\n   * @dev Called by token owner on his own or approved address,\\n   *      an address approved earlier by token owner to\\n   *      transfer some amount of tokens on its behalf\\n   * @dev Throws on any error like\\n   *      * insufficient token balance or\\n   *      * incorrect `_to` address:\\n   *          * zero address or\\n   *          * same as `_from` address (self transfer)\\n   *          * smart contract which doesn't support ERC20Receiver interface\\n   * @dev Returns silently on success, throws otherwise\\n   *\\n   * @param _from token owner which approved caller (transaction sender)\\n   *      to transfer `_value` of tokens on its behalf\\n   * @param _to an address to transfer tokens to,\\n   *      must be either an external address or a smart contract,\\n   *      compliant with the ERC20 standard\\n   * @param _value amount of tokens to be transferred, must\\n   *      be greater than zero\\n   * @param _data [optional] additional data with no specified format,\\n   *      sent in onERC20Received call to `_to` in case if its a smart contract\\n   */\\n  function safeTransferFrom(address _from, address _to, uint256 _value, bytes memory _data) public {\\n    // first delegate call to `unsafeTransferFrom`\\n    // to perform the unsafe token(s) transfer\\n    unsafeTransferFrom(_from, _to, _value);\\n\\n    // after the successful transfer - check if receiver supports\\n    // ERC20Receiver and execute a callback handler `onERC20Received`,\\n    // reverting whole transaction on any error:\\n    // check if receiver `_to` supports ERC20Receiver interface\\n    if(AddressUtils.isContract(_to)) {\\n      // if `_to` is a contract - execute onERC20Received\\n      bytes4 response = ERC20Receiver(_to).onERC20Received(msg.sender, _from, _value, _data);\\n\\n      // expected response is ERC20_RECEIVED\\n      require(response == ERC20_RECEIVED, \\\"invalid onERC20Received response\\\");\\n    }\\n  }\\n\\n  /**\\n   * @notice Transfers some tokens on behalf of address `_from' (token owner)\\n   *      to some other address `_to`\\n   *\\n   * @dev In contrast to `safeTransferFrom` doesn't check recipient\\n   *      smart contract to support ERC20 tokens (ERC20Receiver)\\n   * @dev Designed to be used by developers when the receiver is known\\n   *      to support ERC20 tokens but doesn't implement ERC20Receiver interface\\n   * @dev Called by token owner on his own or approved address,\\n   *      an address approved earlier by token owner to\\n   *      transfer some amount of tokens on its behalf\\n   * @dev Throws on any error like\\n   *      * insufficient token balance or\\n   *      * incorrect `_to` address:\\n   *          * zero address or\\n   *          * same as `_from` address (self transfer)\\n   * @dev Returns silently on success, throws otherwise\\n   *\\n   * @param _from token owner which approved caller (transaction sender)\\n   *      to transfer `_value` of tokens on its behalf\\n   * @param _to an address to transfer tokens to,\\n   *      must be either an external address or a smart contract,\\n   *      compliant with the ERC20 standard\\n   * @param _value amount of tokens to be transferred, must\\n   *      be greater than zero\\n   */\\n  function unsafeTransferFrom(address _from, address _to, uint256 _value) public {\\n    // if `_from` is equal to sender, require transfers feature to be enabled\\n    // otherwise require transfers on behalf feature to be enabled\\n    require(_from == msg.sender && isFeatureEnabled(FEATURE_TRANSFERS)\\n         || _from != msg.sender && isFeatureEnabled(FEATURE_TRANSFERS_ON_BEHALF),\\n            _from == msg.sender? \\\"transfers are disabled\\\": \\\"transfers on behalf are disabled\\\");\\n\\n    // non-zero source address check - Zeppelin\\n    // obviously, zero source address is a client mistake\\n    // it's not part of ERC20 standard but it's reasonable to fail fast\\n    // since for zero value transfer transaction succeeds otherwise\\n    require(_from != address(0), \\\"ERC20: transfer from the zero address\\\"); // Zeppelin msg\\n\\n    // non-zero recipient address check\\n    require(_to != address(0), \\\"ERC20: transfer to the zero address\\\"); // Zeppelin msg\\n\\n    // sender and recipient cannot be the same\\n    require(_from != _to, \\\"sender and recipient are the same (_from = _to)\\\");\\n\\n    // sending tokens to the token smart contract itself is a client mistake\\n    require(_to != address(this), \\\"invalid recipient (transfer to the token smart contract itself)\\\");\\n\\n    // according to ERC-20 Token Standard, https://eips.ethereum.org/EIPS/eip-20\\n    // \\\"Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\\\"\\n    if(_value == 0) {\\n      // emit an ERC20 transfer event\\n      emit Transfer(_from, _to, _value);\\n\\n      // don't forget to return - we're done\\n      return;\\n    }\\n\\n    // no need to make arithmetic overflow check on the _value - by design of mint()\\n\\n    // in case of transfer on behalf\\n    if(_from != msg.sender) {\\n      // read allowance value - the amount of tokens allowed to transfer - into the stack\\n      uint256 _allowance = transferAllowances[_from][msg.sender];\\n\\n      // verify sender has an allowance to transfer amount of tokens requested\\n      require(_allowance >= _value, \\\"ERC20: transfer amount exceeds allowance\\\"); // Zeppelin msg\\n\\n      // update allowance value on the stack\\n      _allowance -= _value;\\n\\n      // update the allowance value in storage\\n      transferAllowances[_from][msg.sender] = _allowance;\\n\\n      // emit an improved atomic approve event\\n      emit Approved(_from, msg.sender, _allowance + _value, _allowance);\\n\\n      // emit an ERC20 approval event to reflect the decrease\\n      emit Approval(_from, msg.sender, _allowance);\\n    }\\n\\n    // verify sender has enough tokens to transfer on behalf\\n    require(tokenBalances[_from] >= _value, \\\"ERC20: transfer amount exceeds balance\\\"); // Zeppelin msg\\n\\n    // perform the transfer:\\n    // decrease token owner (sender) balance\\n    tokenBalances[_from] -= _value;\\n\\n    // increase `_to` address (receiver) balance\\n    tokenBalances[_to] += _value;\\n\\n    // move voting power associated with the tokens transferred\\n    __moveVotingPower(votingDelegates[_from], votingDelegates[_to], _value);\\n\\n    // emit an improved transfer event\\n    emit Transferred(msg.sender, _from, _to, _value);\\n\\n    // emit an ERC20 transfer event\\n    emit Transfer(_from, _to, _value);\\n  }\\n\\n  /**\\n   * @notice Approves address called `_spender` to transfer some amount\\n   *      of tokens on behalf of the owner\\n   *\\n   * @dev ERC20 `function approve(address _spender, uint256 _value) public returns (bool success)`\\n   *\\n   * @dev Caller must not necessarily own any tokens to grant the permission\\n   *\\n   * @param _spender an address approved by the caller (token owner)\\n   *      to spend some tokens on its behalf\\n   * @param _value an amount of tokens spender `_spender` is allowed to\\n   *      transfer on behalf of the token owner\\n   * @return success true on success, throws otherwise\\n   */\\n  function approve(address _spender, uint256 _value) public returns (bool success) {\\n    // non-zero spender address check - Zeppelin\\n    // obviously, zero spender address is a client mistake\\n    // it's not part of ERC20 standard but it's reasonable to fail fast\\n    require(_spender != address(0), \\\"ERC20: approve to the zero address\\\"); // Zeppelin msg\\n\\n    // read old approval value to emmit an improved event (ISBN:978-1-7281-3027-9)\\n    uint256 _oldValue = transferAllowances[msg.sender][_spender];\\n\\n    // perform an operation: write value requested into the storage\\n    transferAllowances[msg.sender][_spender] = _value;\\n\\n    // emit an improved atomic approve event (ISBN:978-1-7281-3027-9)\\n    emit Approved(msg.sender, _spender, _oldValue, _value);\\n\\n    // emit an ERC20 approval event\\n    emit Approval(msg.sender, _spender, _value);\\n\\n    // operation successful, return true\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Returns the amount which _spender is still allowed to withdraw from _owner.\\n   *\\n   * @dev ERC20 `function allowance(address _owner, address _spender) public view returns (uint256 remaining)`\\n   *\\n   * @dev A function to check an amount of tokens owner approved\\n   *      to transfer on its behalf by some other address called \\\"spender\\\"\\n   *\\n   * @param _owner an address which approves transferring some tokens on its behalf\\n   * @param _spender an address approved to transfer some tokens on behalf\\n   * @return remaining an amount of tokens approved address `_spender` can transfer on behalf\\n   *      of token owner `_owner`\\n   */\\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\\n    // read the value from storage and return\\n    return transferAllowances[_owner][_spender];\\n  }\\n\\n  // ===== End: ERC20/ERC223/ERC777 functions =====\\n\\n  // ===== Start: Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (ISBN:978-1-7281-3027-9) =====\\n\\n  /**\\n   * @notice Increases the allowance granted to `spender` by the transaction sender\\n   *\\n   * @dev Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (ISBN:978-1-7281-3027-9)\\n   *\\n   * @dev Throws if value to increase by is zero or too big and causes arithmetic overflow\\n   *\\n   * @param _spender an address approved by the caller (token owner)\\n   *      to spend some tokens on its behalf\\n   * @param _value an amount of tokens to increase by\\n   * @return success true on success, throws otherwise\\n   */\\n  function increaseAllowance(address _spender, uint256 _value) public virtual returns (bool) {\\n    // read current allowance value\\n    uint256 currentVal = transferAllowances[msg.sender][_spender];\\n\\n    // non-zero _value and arithmetic overflow check on the allowance\\n    require(currentVal + _value > currentVal, \\\"zero value approval increase or arithmetic overflow\\\");\\n\\n    // delegate call to `approve` with the new value\\n    return approve(_spender, currentVal + _value);\\n  }\\n\\n  /**\\n   * @notice Decreases the allowance granted to `spender` by the caller.\\n   *\\n   * @dev Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (ISBN:978-1-7281-3027-9)\\n   *\\n   * @dev Throws if value to decrease by is zero or is bigger than currently allowed value\\n   *\\n   * @param _spender an address approved by the caller (token owner)\\n   *      to spend some tokens on its behalf\\n   * @param _value an amount of tokens to decrease by\\n   * @return success true on success, throws otherwise\\n   */\\n  function decreaseAllowance(address _spender, uint256 _value) public virtual returns (bool) {\\n    // read current allowance value\\n    uint256 currentVal = transferAllowances[msg.sender][_spender];\\n\\n    // non-zero _value check on the allowance\\n    require(_value > 0, \\\"zero value approval decrease\\\");\\n\\n    // verify allowance decrease doesn't underflow\\n    require(currentVal >= _value, \\\"ERC20: decreased allowance below zero\\\");\\n\\n    // delegate call to `approve` with the new value\\n    return approve(_spender, currentVal - _value);\\n  }\\n\\n  // ===== End: Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (ISBN:978-1-7281-3027-9) =====\\n\\n  // ===== Start: Minting/burning extension =====\\n\\n  /**\\n   * @dev Mints (creates) some tokens to address specified\\n   * @dev The value specified is treated as is without taking\\n   *      into account what `decimals` value is\\n   * @dev Behaves effectively as `mintTo` function, allowing\\n   *      to specify an address to mint tokens to\\n   * @dev Requires sender to have `ROLE_TOKEN_CREATOR` permission\\n   *\\n   * @dev Throws on overflow, if totalSupply + _value doesn't fit into uint256\\n   *\\n   * @param _to an address to mint tokens to\\n   * @param _value an amount of tokens to mint (create)\\n   */\\n  function mint(address _to, uint256 _value) public {\\n    // check if caller has sufficient permissions to mint tokens\\n    require(isSenderInRole(ROLE_TOKEN_CREATOR), \\\"insufficient privileges (ROLE_TOKEN_CREATOR required)\\\");\\n\\n    // non-zero recipient address check\\n    require(_to != address(0), \\\"ERC20: mint to the zero address\\\"); // Zeppelin msg\\n\\n    // non-zero _value and arithmetic overflow check on the total supply\\n    // this check automatically secures arithmetic overflow on the individual balance\\n    require(totalSupply + _value > totalSupply, \\\"zero value mint or arithmetic overflow\\\");\\n\\n    // uint192 overflow check (required by voting delegation)\\n    require(totalSupply + _value <= type(uint192).max, \\\"total supply overflow (uint192)\\\");\\n\\n    // perform mint:\\n    // increase total amount of tokens value\\n    totalSupply += _value;\\n\\n    // increase `_to` address balance\\n    tokenBalances[_to] += _value;\\n\\n    // create voting power associated with the tokens minted\\n    __moveVotingPower(address(0), votingDelegates[_to], _value);\\n\\n    // fire a minted event\\n    emit Minted(msg.sender, _to, _value);\\n\\n    // emit an improved transfer event\\n    emit Transferred(msg.sender, address(0), _to, _value);\\n\\n    // fire ERC20 compliant transfer event\\n    emit Transfer(address(0), _to, _value);\\n  }\\n\\n  /**\\n   * @dev Burns (destroys) some tokens from the address specified\\n   * @dev The value specified is treated as is without taking\\n   *      into account what `decimals` value is\\n   * @dev Behaves effectively as `burnFrom` function, allowing\\n   *      to specify an address to burn tokens from\\n   * @dev Requires sender to have `ROLE_TOKEN_DESTROYER` permission\\n   *\\n   * @param _from an address to burn some tokens from\\n   * @param _value an amount of tokens to burn (destroy)\\n   */\\n  function burn(address _from, uint256 _value) public {\\n    // check if caller has sufficient permissions to burn tokens\\n    // and if not - check for possibility to burn own tokens or to burn on behalf\\n    if(!isSenderInRole(ROLE_TOKEN_DESTROYER)) {\\n      // if `_from` is equal to sender, require own burns feature to be enabled\\n      // otherwise require burns on behalf feature to be enabled\\n      require(_from == msg.sender && isFeatureEnabled(FEATURE_OWN_BURNS)\\n           || _from != msg.sender && isFeatureEnabled(FEATURE_BURNS_ON_BEHALF),\\n              _from == msg.sender? \\\"burns are disabled\\\": \\\"burns on behalf are disabled\\\");\\n\\n      // in case of burn on behalf\\n      if(_from != msg.sender) {\\n        // read allowance value - the amount of tokens allowed to be burnt - into the stack\\n        uint256 _allowance = transferAllowances[_from][msg.sender];\\n\\n        // verify sender has an allowance to burn amount of tokens requested\\n        require(_allowance >= _value, \\\"ERC20: burn amount exceeds allowance\\\"); // Zeppelin msg\\n\\n        // update allowance value on the stack\\n        _allowance -= _value;\\n\\n        // update the allowance value in storage\\n        transferAllowances[_from][msg.sender] = _allowance;\\n\\n        // emit an improved atomic approve event\\n        emit Approved(msg.sender, _from, _allowance + _value, _allowance);\\n\\n        // emit an ERC20 approval event to reflect the decrease\\n        emit Approval(_from, msg.sender, _allowance);\\n      }\\n    }\\n\\n    // at this point we know that either sender is ROLE_TOKEN_DESTROYER or\\n    // we burn own tokens or on behalf (in latest case we already checked and updated allowances)\\n    // we have left to execute balance checks and burning logic itself\\n\\n    // non-zero burn value check\\n    require(_value != 0, \\\"zero value burn\\\");\\n\\n    // non-zero source address check - Zeppelin\\n    require(_from != address(0), \\\"ERC20: burn from the zero address\\\"); // Zeppelin msg\\n\\n    // verify `_from` address has enough tokens to destroy\\n    // (basically this is a arithmetic overflow check)\\n    require(tokenBalances[_from] >= _value, \\\"ERC20: burn amount exceeds balance\\\"); // Zeppelin msg\\n\\n    // perform burn:\\n    // decrease `_from` address balance\\n    tokenBalances[_from] -= _value;\\n\\n    // decrease total amount of tokens value\\n    totalSupply -= _value;\\n\\n    // destroy voting power associated with the tokens burnt\\n    __moveVotingPower(votingDelegates[_from], address(0), _value);\\n\\n    // fire a burnt event\\n    emit Burnt(msg.sender, _from, _value);\\n\\n    // emit an improved transfer event\\n    emit Transferred(msg.sender, _from, address(0), _value);\\n\\n    // fire ERC20 compliant transfer event\\n    emit Transfer(_from, address(0), _value);\\n  }\\n\\n  // ===== End: Minting/burning extension =====\\n\\n  // ===== Start: DAO Support (Compound-like voting delegation) =====\\n\\n  /**\\n   * @notice Gets current voting power of the account `_of`\\n   * @param _of the address of account to get voting power of\\n   * @return current cumulative voting power of the account,\\n   *      sum of token balances of all its voting delegators\\n   */\\n  function getVotingPower(address _of) public view returns (uint256) {\\n    // get a link to an array of voting power history records for an address specified\\n    VotingPowerRecord[] storage history = votingPowerHistory[_of];\\n\\n    // lookup the history and return latest element\\n    return history.length == 0? 0: history[history.length - 1].votingPower;\\n  }\\n\\n  /**\\n   * @notice Gets past voting power of the account `_of` at some block `_blockNum`\\n   * @dev Throws if `_blockNum` is not in the past (not the finalized block)\\n   * @param _of the address of account to get voting power of\\n   * @param _blockNum block number to get the voting power at\\n   * @return past cumulative voting power of the account,\\n   *      sum of token balances of all its voting delegators at block number `_blockNum`\\n   */\\n  function getVotingPowerAt(address _of, uint256 _blockNum) public view returns (uint256) {\\n    // make sure block number is not in the past (not the finalized block)\\n    require(_blockNum < block.number, \\\"not yet determined\\\"); // Compound msg\\n\\n    // get a link to an array of voting power history records for an address specified\\n    VotingPowerRecord[] storage history = votingPowerHistory[_of];\\n\\n    // if voting power history for the account provided is empty\\n    if(history.length == 0) {\\n      // than voting power is zero - return the result\\n      return 0;\\n    }\\n\\n    // check latest voting power history record block number:\\n    // if history was not updated after the block of interest\\n    if(history[history.length - 1].blockNumber <= _blockNum) {\\n      // we're done - return last voting power record\\n      return getVotingPower(_of);\\n    }\\n\\n    // check first voting power history record block number:\\n    // if history was never updated before the block of interest\\n    if(history[0].blockNumber > _blockNum) {\\n      // we're done - voting power at the block num of interest was zero\\n      return 0;\\n    }\\n\\n    // `votingPowerHistory[_of]` is an array ordered by `blockNumber`, ascending;\\n    // apply binary search on `votingPowerHistory[_of]` to find such an entry number `i`, that\\n    // `votingPowerHistory[_of][i].blockNumber <= _blockNum`, but in the same time\\n    // `votingPowerHistory[_of][i + 1].blockNumber > _blockNum`\\n    // return the result - voting power found at index `i`\\n    return history[__binaryLookup(_of, _blockNum)].votingPower;\\n  }\\n\\n  /**\\n   * @dev Reads an entire voting power history array for the delegate specified\\n   *\\n   * @param _of delegate to query voting power history for\\n   * @return voting power history array for the delegate of interest\\n   */\\n  function getVotingPowerHistory(address _of) public view returns(VotingPowerRecord[] memory) {\\n    // return an entire array as memory\\n    return votingPowerHistory[_of];\\n  }\\n\\n  /**\\n   * @dev Returns length of the voting power history array for the delegate specified;\\n   *      useful since reading an entire array just to get its length is expensive (gas cost)\\n   *\\n   * @param _of delegate to query voting power history length for\\n   * @return voting power history array length for the delegate of interest\\n   */\\n  function getVotingPowerHistoryLength(address _of) public view returns(uint256) {\\n    // read array length and return\\n    return votingPowerHistory[_of].length;\\n  }\\n\\n  /**\\n   * @notice Delegates voting power of the delegator `msg.sender` to the delegate `_to`\\n   *\\n   * @dev Accepts zero value address to delegate voting power to, effectively\\n   *      removing the delegate in that case\\n   *\\n   * @param _to address to delegate voting power to\\n   */\\n  function delegate(address _to) public {\\n    // verify delegations are enabled\\n    require(isFeatureEnabled(FEATURE_DELEGATIONS), \\\"delegations are disabled\\\");\\n    // delegate call to `__delegate`\\n    __delegate(msg.sender, _to);\\n  }\\n\\n  /**\\n   * @notice Delegates voting power of the delegator (represented by its signature) to the delegate `_to`\\n   *\\n   * @dev Accepts zero value address to delegate voting power to, effectively\\n   *      removing the delegate in that case\\n   *\\n   * @dev Compliant with EIP-712: Ethereum typed structured data hashing and signing,\\n   *      see https://eips.ethereum.org/EIPS/eip-712\\n   *\\n   * @param _to address to delegate voting power to\\n   * @param _nonce nonce used to construct the signature, and used to validate it;\\n   *      nonce is increased by one after successful signature validation and vote delegation\\n   * @param _exp signature expiration time\\n   * @param v the recovery byte of the signature\\n   * @param r half of the ECDSA signature pair\\n   * @param s half of the ECDSA signature pair\\n   */\\n  function delegateWithSig(address _to, uint256 _nonce, uint256 _exp, uint8 v, bytes32 r, bytes32 s) public {\\n    // verify delegations on behalf are enabled\\n    require(isFeatureEnabled(FEATURE_DELEGATIONS_ON_BEHALF), \\\"delegations on behalf are disabled\\\");\\n\\n    // build the EIP-712 contract domain separator\\n    bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), block.chainid, address(this)));\\n\\n    // build the EIP-712 hashStruct of the delegation message\\n    bytes32 hashStruct = keccak256(abi.encode(DELEGATION_TYPEHASH, _to, _nonce, _exp));\\n\\n    // calculate the EIP-712 digest \\\"\\\\x19\\\\x01\\\" ‖ domainSeparator ‖ hashStruct(message)\\n    bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, hashStruct));\\n\\n    // recover the address who signed the message with v, r, s\\n    address signer = ecrecover(digest, v, r, s);\\n\\n    // perform message integrity and security validations\\n    require(signer != address(0), \\\"invalid signature\\\"); // Compound msg\\n    require(_nonce == nonces[signer], \\\"invalid nonce\\\"); // Compound msg\\n    require(block.timestamp < _exp, \\\"signature expired\\\"); // Compound msg\\n\\n    // update the nonce for that particular signer to avoid replay attack\\n    nonces[signer]++;\\n\\n    // delegate call to `__delegate` - execute the logic required\\n    __delegate(signer, _to);\\n  }\\n\\n  /**\\n   * @dev Auxiliary function to delegate delegator's `_from` voting power to the delegate `_to`\\n   * @dev Writes to `votingDelegates` and `votingPowerHistory` mappings\\n   *\\n   * @param _from delegator who delegates his voting power\\n   * @param _to delegate who receives the voting power\\n   */\\n  function __delegate(address _from, address _to) private {\\n    // read current delegate to be replaced by a new one\\n    address _fromDelegate = votingDelegates[_from];\\n\\n    // read current voting power (it is equal to token balance)\\n    uint256 _value = tokenBalances[_from];\\n\\n    // reassign voting delegate to `_to`\\n    votingDelegates[_from] = _to;\\n\\n    // update voting power for `_fromDelegate` and `_to`\\n    __moveVotingPower(_fromDelegate, _to, _value);\\n\\n    // emit an event\\n    emit DelegateChanged(_from, _fromDelegate, _to);\\n  }\\n\\n  /**\\n   * @dev Auxiliary function to move voting power `_value`\\n   *      from delegate `_from` to the delegate `_to`\\n   *\\n   * @dev Doesn't have any effect if `_from == _to`, or if `_value == 0`\\n   *\\n   * @param _from delegate to move voting power from\\n   * @param _to delegate to move voting power to\\n   * @param _value voting power to move from `_from` to `_to`\\n   */\\n  function __moveVotingPower(address _from, address _to, uint256 _value) private {\\n    // if there is no move (`_from == _to`) or there is nothing to move (`_value == 0`)\\n    if(_from == _to || _value == 0) {\\n      // return silently with no action\\n      return;\\n    }\\n\\n    // if source address is not zero - decrease its voting power\\n    if(_from != address(0)) {\\n      // read current source address voting power\\n      uint256 _fromVal = getVotingPower(_from);\\n\\n      // calculate decreased voting power\\n      // underflow is not possible by design:\\n      // voting power is limited by token balance which is checked by the callee\\n      uint256 _toVal = _fromVal - _value;\\n\\n      // update source voting power from `_fromVal` to `_toVal`\\n      __updateVotingPower(_from, _fromVal, _toVal);\\n    }\\n\\n    // if destination address is not zero - increase its voting power\\n    if(_to != address(0)) {\\n      // read current destination address voting power\\n      uint256 _fromVal = getVotingPower(_to);\\n\\n      // calculate increased voting power\\n      // overflow is not possible by design:\\n      // max token supply limits the cumulative voting power\\n      uint256 _toVal = _fromVal + _value;\\n\\n      // update destination voting power from `_fromVal` to `_toVal`\\n      __updateVotingPower(_to, _fromVal, _toVal);\\n    }\\n  }\\n\\n  /**\\n   * @dev Auxiliary function to update voting power of the delegate `_of`\\n   *      from value `_fromVal` to value `_toVal`\\n   *\\n   * @param _of delegate to update its voting power\\n   * @param _fromVal old voting power of the delegate\\n   * @param _toVal new voting power of the delegate\\n   */\\n  function __updateVotingPower(address _of, uint256 _fromVal, uint256 _toVal) private {\\n    // get a link to an array of voting power history records for an address specified\\n    VotingPowerRecord[] storage history = votingPowerHistory[_of];\\n\\n    // if there is an existing voting power value stored for current block\\n    if(history.length != 0 && history[history.length - 1].blockNumber == block.number) {\\n      // update voting power which is already stored in the current block\\n      history[history.length - 1].votingPower = uint192(_toVal);\\n    }\\n    // otherwise - if there is no value stored for current block\\n    else {\\n      // add new element into array representing the value for current block\\n      history.push(VotingPowerRecord(uint64(block.number), uint192(_toVal)));\\n    }\\n\\n    // emit an event\\n    emit VotingPowerChanged(_of, _fromVal, _toVal);\\n  }\\n\\n  /**\\n   * @dev Auxiliary function to lookup an element in a sorted (asc) array of elements\\n   *\\n   * @dev This function finds the closest element in an array to the value\\n   *      of interest (not exceeding that value) and returns its index within an array\\n   *\\n   * @dev An array to search in is `votingPowerHistory[_to][i].blockNumber`,\\n   *      it is sorted in ascending order (blockNumber increases)\\n   *\\n   * @param _to an address of the delegate to get an array for\\n   * @param n value of interest to look for\\n   * @return an index of the closest element in an array to the value\\n   *      of interest (not exceeding that value)\\n   */\\n  function __binaryLookup(address _to, uint256 n) private view returns(uint256) {\\n    // get a link to an array of voting power history records for an address specified\\n    VotingPowerRecord[] storage history = votingPowerHistory[_to];\\n\\n    // left bound of the search interval, originally start of the array\\n    uint256 i = 0;\\n\\n    // right bound of the search interval, originally end of the array\\n    uint256 j = history.length - 1;\\n\\n    // the iteration process narrows down the bounds by\\n    // splitting the interval in a half oce per each iteration\\n    while(j > i) {\\n      // get an index in the middle of the interval [i, j]\\n      uint256 k = j - (j - i) / 2;\\n\\n      // read an element to compare it with the value of interest\\n      VotingPowerRecord memory cp = history[k];\\n\\n      // if we've got a strict equal - we're lucky and done\\n      if(cp.blockNumber == n) {\\n        // just return the result - index `k`\\n        return k;\\n      }\\n      // if the value of interest is bigger - move left bound to the middle\\n      else if (cp.blockNumber < n) {\\n        // move left bound `i` to the middle position `k`\\n        i = k;\\n      }\\n      // otherwise, when the value of interest is smaller - move right bound to the middle\\n      else {\\n        // move right bound `j` to the middle position `k - 1`:\\n        // element at position `k` is bigger and cannot be the result\\n        j = k - 1;\\n      }\\n    }\\n\\n    // reaching that point means no exact match found\\n    // since we're interested in the element which is not bigger than the\\n    // element of interest, we return the lower bound `i`\\n    return i;\\n  }\\n}\\n\\n// ===== End: DAO Support (Compound-like voting delegation) =====\\n\"\r\n    },\r\n    \"/Users/vgorin/DEVELOP/up/Cryptant/cryptant-contracts/contracts/utils/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\n/**\\n * @title Access Control List\\n *\\n * @notice Access control smart contract provides an API to check\\n *      if specific operation is permitted globally and/or\\n *      if particular user has a permission to execute it.\\n *\\n * @notice It deals with two main entities: features and roles.\\n *\\n * @notice Features are designed to be used to enable/disable specific\\n *      functions (public functions) of the smart contract for everyone.\\n * @notice User roles are designed to restrict access to specific\\n *      functions (restricted functions) of the smart contract to some users.\\n *\\n * @notice Terms \\\"role\\\", \\\"permissions\\\" and \\\"set of permissions\\\" have equal meaning\\n *      in the documentation text and may be used interchangeably.\\n * @notice Terms \\\"permission\\\", \\\"single permission\\\" implies only one permission bit set.\\n *\\n * @dev This smart contract is designed to be inherited by other\\n *      smart contracts which require access control management capabilities.\\n *\\n * @author Basil Gorin\\n */\\ncontract AccessControl {\\n  /**\\n   * @notice Access manager is responsible for assigning the roles to users,\\n   *      enabling/disabling global features of the smart contract\\n   * @notice Access manager can add, remove and update user roles,\\n   *      remove and update global features\\n   *\\n   * @dev Role ROLE_ACCESS_MANAGER allows modifying user roles and global features\\n   * @dev Role ROLE_ACCESS_MANAGER has single bit at position 255 enabled\\n   */\\n  uint256 public constant ROLE_ACCESS_MANAGER = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\n  /**\\n   * @dev Bitmask representing all the possible permissions (super admin role)\\n   * @dev Has all the bits are enabled (2^256 - 1 value)\\n   */\\n  uint256 private constant FULL_PRIVILEGES_MASK = type(uint256).max; // before 0.8.0: uint256(-1) overflows to 0xFFFF...\\n\\n  /**\\n   * @notice Privileged addresses with defined roles/permissions\\n   * @notice In the context of ERC20/ERC721 tokens these can be permissions to\\n   *      allow minting or burning tokens, transferring on behalf and so on\\n   *\\n   * @dev Maps user address to the permissions bitmask (role), where each bit\\n   *      represents a permission\\n   * @dev Bitmask 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n   *      represents all possible permissions\\n   * @dev Zero address mapping represents global features of the smart contract\\n   */\\n  mapping(address => uint256) public userRoles;\\n\\n  /**\\n   * @dev Fired in updateRole() and updateFeatures()\\n   *\\n   * @param _by operator which called the function\\n   * @param _to address which was granted/revoked permissions\\n   * @param _requested permissions requested\\n   * @param _actual permissions effectively set\\n   */\\n  event RoleUpdated(address indexed _by, address indexed _to, uint256 _requested, uint256 _actual);\\n\\n  /**\\n   * @notice Creates an access control instance,\\n   *      setting contract creator to have full privileges\\n   */\\n  constructor() {\\n    // contract creator has full privileges\\n    userRoles[msg.sender] = FULL_PRIVILEGES_MASK;\\n  }\\n\\n  /**\\n   * @notice Retrieves globally set of features enabled\\n   *\\n   * @dev Auxiliary getter function to maintain compatibility with previous\\n   *      versions of the Access Control List smart contract, where\\n   *      features was a separate uint256 public field\\n   *\\n   * @return 256-bit bitmask of the features enabled\\n   */\\n  function features() public view returns(uint256) {\\n    // according to new design features are stored in zero address\\n    // mapping of `userRoles` structure\\n    return userRoles[address(0)];\\n  }\\n\\n  /**\\n   * @notice Updates set of the globally enabled features (`features`),\\n   *      taking into account sender's permissions\\n   *\\n   * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\\n   * @dev Function is left for backward compatibility with older versions\\n   *\\n   * @param _mask bitmask representing a set of features to enable/disable\\n   */\\n  function updateFeatures(uint256 _mask) public {\\n    // delegate call to `updateRole`\\n    updateRole(address(0), _mask);\\n  }\\n\\n  /**\\n   * @notice Updates set of permissions (role) for a given user,\\n   *      taking into account sender's permissions.\\n   *\\n   * @dev Setting role to zero is equivalent to removing an all permissions\\n   * @dev Setting role to `FULL_PRIVILEGES_MASK` is equivalent to\\n   *      copying senders' permissions (role) to the user\\n   * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\\n   *\\n   * @param operator address of a user to alter permissions for or zero\\n   *      to alter global features of the smart contract\\n   * @param role bitmask representing a set of permissions to\\n   *      enable/disable for a user specified\\n   */\\n  function updateRole(address operator, uint256 role) public {\\n    // caller must have a permission to update user roles\\n    require(isSenderInRole(ROLE_ACCESS_MANAGER), \\\"insufficient privileges (ROLE_ACCESS_MANAGER required)\\\");\\n\\n    // evaluate the role and reassign it\\n    userRoles[operator] = evaluateBy(msg.sender, userRoles[operator], role);\\n\\n    // fire an event\\n    emit RoleUpdated(msg.sender, operator, role, userRoles[operator]);\\n  }\\n\\n  /**\\n   * @notice Determines the permission bitmask an operator can set on the\\n   *      target permission set\\n   * @notice Used to calculate the permission bitmask to be set when requested\\n   *     in `updateRole` and `updateFeatures` functions\\n   *\\n   * @dev Calculated based on:\\n   *      1) operator's own permission set read from userRoles[operator]\\n   *      2) target permission set - what is already set on the target\\n   *      3) desired permission set - what do we want set target to\\n   *\\n   * @dev Corner cases:\\n   *      1) Operator is super admin and its permission set is `FULL_PRIVILEGES_MASK`:\\n   *        `desired` bitset is returned regardless of the `target` permission set value\\n   *        (what operator sets is what they get)\\n   *      2) Operator with no permissions (zero bitset):\\n   *        `target` bitset is returned regardless of the `desired` value\\n   *        (operator has no authority and cannot modify anything)\\n   *\\n   * @dev Example:\\n   *      Consider an operator with the permissions bitmask     00001111\\n   *      is about to modify the target permission set          01010101\\n   *      Operator wants to set that permission set to          00110011\\n   *      Based on their role, an operator has the permissions\\n   *      to update only lowest 4 bits on the target, meaning that\\n   *      high 4 bits of the target set in this example is left\\n   *      unchanged and low 4 bits get changed as desired:      01010011\\n   *\\n   * @param operator address of the contract operator which is about to set the permissions\\n   * @param target input set of permissions to operator is going to modify\\n   * @param desired desired set of permissions operator would like to set\\n   * @return resulting set of permissions given operator will set\\n   */\\n  function evaluateBy(address operator, uint256 target, uint256 desired) public view returns(uint256) {\\n    // read operator's permissions\\n    uint256 p = userRoles[operator];\\n\\n    // taking into account operator's permissions,\\n    // 1) enable the permissions desired on the `target`\\n    target |= p & desired;\\n    // 2) disable the permissions desired on the `target`\\n    target &= FULL_PRIVILEGES_MASK ^ (p & (FULL_PRIVILEGES_MASK ^ desired));\\n\\n    // return calculated result\\n    return target;\\n  }\\n\\n  /**\\n   * @notice Checks if requested set of features is enabled globally on the contract\\n   *\\n   * @param required set of features to check against\\n   * @return true if all the features requested are enabled, false otherwise\\n   */\\n  function isFeatureEnabled(uint256 required) public view returns(bool) {\\n    // delegate call to `__hasRole`, passing `features` property\\n    return __hasRole(features(), required);\\n  }\\n\\n  /**\\n   * @notice Checks if transaction sender `msg.sender` has all the permissions required\\n   *\\n   * @param required set of permissions (role) to check against\\n   * @return true if all the permissions requested are enabled, false otherwise\\n   */\\n  function isSenderInRole(uint256 required) public view returns(bool) {\\n    // delegate call to `isOperatorInRole`, passing transaction sender\\n    return isOperatorInRole(msg.sender, required);\\n  }\\n\\n  /**\\n   * @notice Checks if operator has all the permissions (role) required\\n   *\\n   * @param operator address of the user to check role for\\n   * @param required set of permissions (role) to check\\n   * @return true if all the permissions requested are enabled, false otherwise\\n   */\\n  function isOperatorInRole(address operator, uint256 required) public view returns(bool) {\\n    // delegate call to `__hasRole`, passing operator's permissions (role)\\n    return __hasRole(userRoles[operator], required);\\n  }\\n\\n  /**\\n   * @dev Checks if role `actual` contains all the permissions required `required`\\n   *\\n   * @param actual existent role\\n   * @param required required role\\n   * @return true if actual has required role (all permissions), false otherwise\\n   */\\n  function __hasRole(uint256 actual, uint256 required) internal pure returns(bool) {\\n    // check the bitmask for the role required and return the result\\n    return actual & required == required;\\n  }\\n}\\n\"\r\n    },\r\n    \"/Users/vgorin/DEVELOP/up/Cryptant/cryptant-contracts/contracts/utils/AddressUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\n/**\\n * @title Address Utils\\n *\\n * @dev Utility library of inline functions on addresses\\n *\\n * @author Basil Gorin\\n */\\nlibrary AddressUtils {\\n\\n  /**\\n   * @notice Checks if the target address is a contract\\n   * @dev This function will return false if invoked during the constructor of a contract,\\n   *      as the code is not actually created until after the constructor finishes.\\n   * @param addr address to check\\n   * @return whether the target address is a contract\\n   */\\n  function isContract(address addr) internal view returns (bool) {\\n    // a variable to load `extcodesize` to\\n    uint256 size = 0;\\n\\n    // XXX Currently there is no better way to check if there is a contract in an address\\n    // than to check the size of the code at that address.\\n    // See https://ethereum.stackexchange.com/a/14016/36603 for more details about how this works.\\n    // TODO: Check this again before the Serenity release, because all addresses will be contracts.\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      // retrieve the size of the code at address `addr`\\n      size := extcodesize(addr)\\n    }\\n\\n    // positive size indicates a smart contract address\\n    return size > 0;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"/Users/vgorin/DEVELOP/up/Cryptant/cryptant-contracts/contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = msg.sender;\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_cliff\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_duration\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_ilv\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"recordsNum\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"totalAmount\",\"type\":\"uint96\"}],\"name\":\"LockedBalancesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"}],\"name\":\"PoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"TokensMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amountIlv\",\"type\":\"uint96\"}],\"name\":\"TokensReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"TokensStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"TokensUnstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCKING_UID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIGRATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cliff\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"hasStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ilv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"}],\"name\":\"linearUnlockAmt\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedHolders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_exp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"migrateWithSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"migrationNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"now256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IlluviumLockedPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"releasableAmount\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"ilvAmt\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"holders\",\"type\":\"address[]\"},{\"internalType\":\"uint96[]\",\"name\":\"amounts\",\"type\":\"uint96[]\"},{\"internalType\":\"uint96\",\"name\":\"expectedTotal\",\"type\":\"uint96\"}],\"name\":\"setBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IlluviumLockedPool\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRecords\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"ilvBalance\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"ilvReleased\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"hasStaked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"vestedAmount\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"ilvAmt\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TokenLocking","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000624470700000000000000000000000000000000000000000000000000000000001e13380000000000000000000000000767fe9edc9e0df98e07454847909b5e959d7ca0e","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}