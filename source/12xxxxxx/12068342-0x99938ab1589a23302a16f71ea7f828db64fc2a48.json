{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\farming\\FarmData.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.6;\r\n\r\nstruct FarmingPositionRequest {\r\n    uint256 setupIndex; // index of the chosen setup.\r\n    uint256 amount; // amount of main token or liquidity pool token.\r\n    bool amountIsLiquidityPool; //true if user wants to directly share the liquidity pool token amount, false to add liquidity to AMM\r\n    address positionOwner; // position extension or address(0) [msg.sender].\r\n}\r\n\r\nstruct FarmingSetupConfiguration {\r\n    bool add; // true if we're adding a new setup, false we're updating it.\r\n    bool disable;\r\n    uint256 index; // index of the setup we're updating.\r\n    FarmingSetupInfo info; // data of the new or updated setup\r\n}\r\n\r\nstruct FarmingSetupInfo {\r\n    bool free; // if the setup is a free farming setup or a locked one.\r\n    uint256 blockDuration; // duration of setup\r\n    uint256 originalRewardPerBlock;\r\n    uint256 minStakeable; // minimum amount of staking tokens.\r\n    uint256 maxStakeable; // maximum amount stakeable in the setup (used only if free is false).\r\n    uint256 renewTimes; // if the setup is renewable or if it's one time.\r\n    address ammPlugin; // amm plugin address used for this setup (eg. uniswap amm plugin address).\r\n    address liquidityPoolTokenAddress; // address of the liquidity pool token\r\n    address mainTokenAddress; // eg. buidl address.\r\n    address ethereumAddress;\r\n    bool involvingETH; // if the setup involves ETH or not.\r\n    uint256 penaltyFee; // fee paid when the user exits a still active locked farming setup (used only if free is false).\r\n    uint256 setupsCount; // number of setups created by this info.\r\n    uint256 lastSetupIndex; // index of last setup;\r\n}\r\n\r\nstruct FarmingSetup {\r\n    uint256 infoIndex; // setup info\r\n    bool active; // if the setup is active or not.\r\n    uint256 startBlock; // farming setup start block.\r\n    uint256 endBlock; // farming setup end block.\r\n    uint256 lastUpdateBlock; // number of the block where an update was triggered.\r\n    uint256 objectId; // items object id for the liquidity pool token (used only if free is false).\r\n    uint256 rewardPerBlock; // farming setup reward per single block.\r\n    uint256 totalSupply; // If free it's the LP amount, if locked is currentlyStaked.\r\n}\r\n\r\nstruct FarmingPosition {\r\n    address uniqueOwner; // address representing the owner of the position.\r\n    uint256 setupIndex; // the setup index related to this position.\r\n    uint256 creationBlock; // block when this position was created.\r\n    uint256 liquidityPoolTokenAmount; // amount of liquidity pool token in the position.\r\n    uint256 mainTokenAmount; // amount of main token in the position (used only if free is false).\r\n    uint256 reward; // position reward (used only if free is false).\r\n    uint256 lockedRewardPerBlock; // position locked reward per block (used only if free is false).\r\n}\r\n\r\n// File: contracts\\farming\\IFarmExtension.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\npragma abicoder v2;\r\n\r\n\r\ninterface IFarmExtension {\r\n\r\n    function init(bool byMint, address host, address treasury) external;\r\n\r\n    function setHost(address host) external;\r\n    function setTreasury(address treasury) external;\r\n\r\n    function data() external view returns(address farmMainContract, bool byMint, address host, address treasury, address rewardTokenAddress);\r\n\r\n    function transferTo(uint256 amount) external;\r\n    function backToYou(uint256 amount) external payable;\r\n\r\n    function setFarmingSetups(FarmingSetupConfiguration[] memory farmingSetups) external;\r\n\r\n}\r\n\r\n// File: contracts\\farming\\IFarmMain.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\n//pragma abicoder v2;\r\n\r\n\r\ninterface IFarmMain {\r\n\r\n    function ONE_HUNDRED() external view returns(uint256);\r\n    function _rewardTokenAddress() external view returns(address);\r\n    function position(uint256 positionId) external view returns (FarmingPosition memory);\r\n    function setups() external view returns (FarmingSetup[] memory);\r\n    function setup(uint256 setupIndex) external view returns (FarmingSetup memory, FarmingSetupInfo memory);\r\n    function setFarmingSetups(FarmingSetupConfiguration[] memory farmingSetups) external;\r\n    function openPosition(FarmingPositionRequest calldata request) external payable returns(uint256 positionId);\r\n    function addLiquidity(uint256 positionId, FarmingPositionRequest calldata request) external payable;\r\n}\r\n\r\n// File: contracts\\farming\\util\\IERC20.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function safeApprove(address spender, uint256 amount) external;\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: contracts\\farming\\util\\IERC20Mintable.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IERC20Mintable {\r\n    function mint(address wallet, uint256 amount) external returns (bool);\r\n    function burn(address wallet, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: contracts\\farming\\FarmExtension.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\n//pragma abicoder v2;\r\n\r\n\r\n\r\n\r\n\r\ncontract FarmExtension is IFarmExtension {\r\n\r\n    // wallet who has control on the extension and treasury\r\n    address internal _host;\r\n    address internal _treasury;\r\n    // address of the farm main contract linked to this extension\r\n    address internal _farmMainContract;\r\n    // the reward token address linked to this extension\r\n    address internal _rewardTokenAddress;\r\n    // whether the token is by mint or by reserve\r\n    bool internal _byMint;\r\n\r\n    /** MODIFIERS */\r\n\r\n    /** @dev farmMainOnly modifier used to check for unauthorized transfers. */\r\n    modifier farmMainOnly() {\r\n        require(msg.sender == _farmMainContract, \"Unauthorized\");\r\n        _;\r\n    }\r\n\r\n    /** @dev hostOnly modifier used to check for unauthorized edits. */\r\n    modifier hostOnly() {\r\n        require(msg.sender == _host, \"Unauthorized\");\r\n        _;\r\n    }\r\n\r\n    /** PUBLIC METHODS */\r\n\r\n    receive() external payable {\r\n        require(_farmMainContract != address(0) && _rewardTokenAddress == address(0), \"ETH not allowed\");\r\n    }\r\n\r\n    function init(bool byMint, address host, address treasury) public virtual override {\r\n        require(_farmMainContract == address(0), \"Already init\");\r\n        require((_host = host) != address(0), \"blank host\");\r\n        _rewardTokenAddress = IFarmMain(_farmMainContract = msg.sender)._rewardTokenAddress();\r\n        _byMint = byMint;\r\n        _treasury = treasury != address(0) ? treasury : host;\r\n    }\r\n\r\n    function data() view public virtual override returns(address farmMainContract, bool byMint, address host, address treasury, address rewardTokenAddress) {\r\n        return (_farmMainContract, _byMint, _host, _treasury, _rewardTokenAddress);\r\n    }\r\n\r\n    /** @dev method used to update the extension host.\r\n      * @param host new host address.\r\n     */\r\n    function setHost(address host) public virtual override hostOnly {\r\n        _host = host;\r\n    }\r\n\r\n    /** @dev method used to update the extension treasury.\r\n      * @param treasury new treasury address.\r\n     */\r\n    function setTreasury(address treasury) public virtual override hostOnly {\r\n        _treasury = treasury;\r\n    }\r\n\r\n    /** @dev this function calls the farm main contract with the given address and sets the given farming setups.\r\n      * @param farmingSetups array containing all the farming setups.\r\n     */\r\n    function setFarmingSetups(FarmingSetupConfiguration[] memory farmingSetups) public virtual override hostOnly {\r\n        IFarmMain(_farmMainContract).setFarmingSetups(farmingSetups);\r\n    }\r\n\r\n    /** @dev transfers the input amount to the caller farming contract.\r\n      * @param amount amount of erc20 to transfer or mint.\r\n     */\r\n    function transferTo(uint256 amount) public virtual override farmMainOnly {\r\n        if(_rewardTokenAddress != address(0)) {\r\n            return _byMint ? _mintAndTransfer(_rewardTokenAddress, _farmMainContract, amount) : _safeTransfer(_rewardTokenAddress, _farmMainContract, amount);\r\n        }\r\n        (bool result, ) = _farmMainContract.call{value:amount}(\"\");\r\n        require(result, \"ETH transfer failed.\");\r\n    }\r\n\r\n    /** @dev transfers the input amount from the caller farming contract to the extension.\r\n      * @param amount amount of erc20 to transfer back or burn.\r\n     */\r\n    function backToYou(uint256 amount) payable public virtual override farmMainOnly {\r\n        if(_rewardTokenAddress != address(0)) {\r\n            _safeTransferFrom(_rewardTokenAddress, msg.sender, _byMint ? address(this) : _treasury, amount);\r\n            if(_byMint) {\r\n                _burn(_rewardTokenAddress, amount);\r\n            }\r\n        } else {\r\n            require(msg.value == amount, \"invalid sent amount\");\r\n            if(_treasury != address(this)) {\r\n                (bool result, ) = _treasury.call{value:amount}(\"\");\r\n                require(result, \"ETH transfer failed.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /** INTERNAL METHODS */\r\n\r\n    function _mintAndTransfer(address erc20TokenAddress, address recipient, uint256 value) internal virtual {\r\n        IERC20Mintable(erc20TokenAddress).mint(recipient, value);\r\n    }\r\n\r\n    function _burn(address erc20TokenAddress, uint256 value) internal virtual {\r\n        IERC20Mintable(erc20TokenAddress).burn(msg.sender, value);\r\n    }\r\n\r\n    /** @dev function used to safely approve ERC20 transfers.\r\n      * @param erc20TokenAddress address of the token to approve.\r\n      * @param to receiver of the approval.\r\n      * @param value amount to approve for.\r\n     */\r\n    function _safeApprove(address erc20TokenAddress, address to, uint256 value) internal virtual {\r\n        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).approve.selector, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'APPROVE_FAILED');\r\n    }\r\n\r\n    /** @dev function used to safe transfer ERC20 tokens.\r\n      * @param erc20TokenAddress address of the token to transfer.\r\n      * @param to receiver of the tokens.\r\n      * @param value amount of tokens to transfer.\r\n     */\r\n    function _safeTransfer(address erc20TokenAddress, address to, uint256 value) internal virtual {\r\n        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).transfer.selector, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFER_FAILED');\r\n    }\r\n\r\n    /** @dev this function safely transfers the given ERC20 value from an address to another.\r\n      * @param erc20TokenAddress erc20 token address.\r\n      * @param from address from.\r\n      * @param to address to.\r\n      * @param value amount to transfer.\r\n     */\r\n    function _safeTransferFrom(address erc20TokenAddress, address from, address to, uint256 value) internal virtual {\r\n        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).transferFrom.selector, from, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFERFROM_FAILED');\r\n    }\r\n\r\n    /** @dev calls the contract at the given location using the given payload and returns the returnData.\r\n      * @param location location to call.\r\n      * @param payload call payload.\r\n      * @return returnData call return data.\r\n     */\r\n    function _call(address location, bytes memory payload) private returns(bytes memory returnData) {\r\n        assembly {\r\n            let result := call(gas(), location, 0, add(payload, 0x20), mload(payload), 0, 0)\r\n            let size := returndatasize()\r\n            returnData := mload(0x40)\r\n            mstore(returnData, size)\r\n            let returnDataPayloadStart := add(returnData, 0x20)\r\n            returndatacopy(returnDataPayloadStart, 0, size)\r\n            mstore(0x40, add(returnDataPayloadStart, size))\r\n            switch result case 0 {revert(returnDataPayloadStart, size)}\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"backToYou\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"data\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"farmMainContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"byMint\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"byMint\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"disable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"free\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blockDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originalRewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStakeable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxStakeable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renewTimes\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ammPlugin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityPoolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mainTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethereumAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"involvingETH\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"penaltyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setupsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSetupIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct FarmingSetupInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"internalType\":\"struct FarmingSetupConfiguration[]\",\"name\":\"farmingSetups\",\"type\":\"tuple[]\"}],\"name\":\"setFarmingSetups\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"}],\"name\":\"setHost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"FarmExtension","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://964e22253fb2687f0fa103e09a535d2d03301940fb42c8c2b35a3761f5c1236b"}]}