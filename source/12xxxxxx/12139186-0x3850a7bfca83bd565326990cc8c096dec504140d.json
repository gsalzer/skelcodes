{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n/**\r\n * token contract functions\r\n*/\r\ncontract Ierc20 {\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function approveAndCall(address spender, uint tokens, bytes data) external returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n    uint256 c = add(a,m);\r\n    uint256 d = sub(c,1);\r\n    return mul(div(d,m),m);\r\n  }\r\n}\r\n\r\ncontract Owned {\r\n        address public owner;\r\n        event OwnerChanges(address newOwner);\r\n        \r\n        constructor() public {\r\n            owner = msg.sender;\r\n        }\r\n\r\n        modifier onlyOwner {\r\n            require(msg.sender == owner);\r\n            _;\r\n        }\r\n\r\n        function transferOwnership(address newOwner) onlyOwner external {\r\n            require(newOwner != address(0), \"New owner is the zero address\");\r\n            owner = newOwner;\r\n            emit OwnerChanges(newOwner);\r\n        }\r\n}\r\n\r\ncontract StakingPool is Owned {\r\n    using SafeMath for uint256;\r\n    \r\n    Ierc20 public tswap;\r\n    Ierc20 public rewardToken;\r\n    uint256 poolDuration;\r\n    uint256 totalRewards;\r\n    uint256 rewardsWithdrawn;\r\n    uint256 poolStartTime;\r\n    uint256 poolEndTime;\r\n    uint256 totalStaked;\r\n    // Represents a single stake for a user. A user may have multiple.\r\n    struct Stake {\r\n        uint256 amount;\r\n        uint256 stakingTime;\r\n        uint256 lastWithdrawTime;\r\n    }\r\n    mapping (address => Stake[]) public userStaking;\r\n    \r\n    // Represents total staking of an user\r\n    struct UserTotals {\r\n        uint256 totalStaking;\r\n        uint256 totalStakingTIme;\r\n    }\r\n    mapping (address => UserTotals) public userTotalStaking;\r\n    \r\n    struct Ris3Rewards {\r\n        uint256 totalWithdrawn;\r\n        uint256 lastWithdrawTime;\r\n    }\r\n    mapping(address => Ris3Rewards) public userRewardInfo;\r\n    \r\n    event OwnerSetReward(uint256 amount);\r\n    event Staked(address userAddress, uint256 amount);\r\n    event StakingWithdrawal(address userAddress, uint256 amount);\r\n    event RewardWithdrawal(address userAddress, uint256 amount);\r\n    event PoolDurationChange(uint256 poolDuration);\r\n    \r\n    /**\r\n     * Constrctor function\r\n    */\r\n    constructor() public {\r\n        tswap = Ierc20(0xCC4304A31d09258b0029eA7FE63d032f52e44EFe);\r\n        rewardToken = Ierc20(0xe047705117Eb07e712C3d684f5B18E74577e83aC);\r\n        poolDuration = 720 hours;\r\n    }\r\n    \r\n    //Set pool rewards\r\n    function ownerSetPoolRewards(uint256 _rewardAmount) external onlyOwner {\r\n        require(poolStartTime == 0, \"Pool rewards already set\");\r\n        require(_rewardAmount > 0, \"Cannot create pool with zero amount\");\r\n        \r\n        //set total rewards value\r\n        totalRewards = _rewardAmount;\r\n        \r\n        poolStartTime = now;\r\n        poolEndTime = now + poolDuration;\r\n        \r\n        //transfer tokens to contract\r\n        rewardToken.transferFrom(msg.sender, this, _rewardAmount);\r\n        emit OwnerSetReward(_rewardAmount);\r\n    }\r\n    \r\n    //Stake function for users to stake SWAP token\r\n    function stake(uint256 amount) external {\r\n        require(amount > 0, \"Cannot stake 0\");\r\n        require(now < poolEndTime, \"Staking pool is closed\"); //staking pool is closed for staking\r\n        \r\n        //add value in staking\r\n        userTotalStaking[msg.sender].totalStaking = userTotalStaking[msg.sender].totalStaking.add(amount);\r\n        \r\n        //add new stake\r\n        Stake memory newStake = Stake(amount, now, 0);\r\n        userStaking[msg.sender].push(newStake);\r\n        \r\n        //add to total staked\r\n        totalStaked = totalStaked.add(amount);\r\n        \r\n        tswap.transferFrom(msg.sender, this, amount);\r\n        emit Staked(msg.sender, amount);\r\n    }\r\n    \r\n    //compute rewards\r\n    function computeNewReward(uint256 _rewardAmount, uint256 _stakedAmount, uint256 _stakeTimeSec) private view returns (uint256 _reward) {\r\n        uint256 rewardPerSecond = totalRewards.mul(1 ether);\r\n        if (rewardPerSecond != 0 ) {\r\n            rewardPerSecond = rewardPerSecond.div(poolDuration);\r\n        }\r\n        \r\n        if (rewardPerSecond > 0) {\r\n            uint256 rewardPerSecForEachTokenStaked = rewardPerSecond.div(totalStaked);\r\n            uint256 userRewards = rewardPerSecForEachTokenStaked.mul(_stakedAmount).mul(_stakeTimeSec);\r\n                    userRewards = userRewards.div(1 ether);\r\n            \r\n            return _rewardAmount.add(userRewards);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n    \r\n    //calculate your rewards\r\n    function calculateReward(address _userAddress) public view returns (uint256 _reward) {\r\n        // all user stakes\r\n        Stake[] storage accountStakes = userStaking[_userAddress];\r\n        \r\n        // Redeem from most recent stake and go backwards in time.\r\n        uint256 rewardAmount = 0;\r\n        uint256 i = accountStakes.length;\r\n        while (i > 0) {\r\n            Stake storage userStake = accountStakes[i - 1];\r\n            uint256 stakeTimeSec;\r\n            \r\n            //check if current time is more than pool ending time\r\n            if (now > poolEndTime) {\r\n                stakeTimeSec = poolEndTime.sub(userStake.stakingTime);\r\n                if(userStake.lastWithdrawTime != 0){\r\n                    stakeTimeSec = poolEndTime.sub(userStake.lastWithdrawTime);\r\n                }\r\n            } else {\r\n                stakeTimeSec = now.sub(userStake.stakingTime);\r\n                if(userStake.lastWithdrawTime != 0){\r\n                    stakeTimeSec = now.sub(userStake.lastWithdrawTime);\r\n                }\r\n            }\r\n            \r\n            // fully redeem a past stake\r\n            rewardAmount = computeNewReward(rewardAmount, userStake.amount, stakeTimeSec);\r\n            i--;\r\n        }\r\n        \r\n        return rewardAmount;\r\n    }\r\n    \r\n    //Withdraw staking and rewards\r\n    function withdrawStaking(uint256 amount) external {\r\n        require(amount > 0, \"Amount can not be zero\");\r\n        require(userTotalStaking[msg.sender].totalStaking >= amount, \"You are trying to withdaw more than your stake\");\r\n        \r\n        // 1. User Accounting\r\n        Stake[] storage accountStakes = userStaking[msg.sender];\r\n        \r\n        // Redeem from most recent stake and go backwards in time.\r\n        uint256 sharesLeftToBurn = amount;\r\n        uint256 rewardAmount = 0;\r\n        while (sharesLeftToBurn > 0) {\r\n            Stake storage lastStake = accountStakes[accountStakes.length - 1];\r\n            uint256 stakeTimeSec;\r\n            //check if current time is more than pool ending time\r\n            if (now > poolEndTime) {\r\n                stakeTimeSec = poolEndTime.sub(lastStake.stakingTime);\r\n                if(lastStake.lastWithdrawTime != 0){\r\n                    stakeTimeSec = poolEndTime.sub(lastStake.lastWithdrawTime);\r\n                }\r\n            } else {\r\n                stakeTimeSec = now.sub(lastStake.stakingTime);\r\n                if(lastStake.lastWithdrawTime != 0){\r\n                    stakeTimeSec = now.sub(lastStake.lastWithdrawTime);\r\n                }\r\n            }\r\n            \r\n            if (lastStake.amount <= sharesLeftToBurn) {\r\n                // fully redeem a past stake\r\n                rewardAmount = computeNewReward(rewardAmount, lastStake.amount, stakeTimeSec);\r\n                sharesLeftToBurn = sharesLeftToBurn.sub(lastStake.amount);\r\n                accountStakes.length--;\r\n            } else {\r\n                // partially redeem a past stake\r\n                rewardAmount = computeNewReward(rewardAmount, sharesLeftToBurn, stakeTimeSec);\r\n                lastStake.amount = lastStake.amount.sub(sharesLeftToBurn);\r\n                lastStake.lastWithdrawTime = now;\r\n                sharesLeftToBurn = 0;\r\n            }\r\n        }\r\n        \r\n        //substract value in staking\r\n        userTotalStaking[msg.sender].totalStaking = userTotalStaking[msg.sender].totalStaking.sub(amount);\r\n        \r\n        //substract from total staked\r\n        totalStaked = totalStaked.sub(amount);\r\n        \r\n        //update user rewards info\r\n        userRewardInfo[msg.sender].totalWithdrawn = userRewardInfo[msg.sender].totalWithdrawn.add(rewardAmount);\r\n        userRewardInfo[msg.sender].lastWithdrawTime = now;\r\n        \r\n        //update total rewards withdrawn\r\n        rewardsWithdrawn = rewardsWithdrawn.add(rewardAmount);\r\n        \r\n        //transfer rewards and tokens\r\n        rewardToken.transfer(msg.sender, rewardAmount);\r\n        tswap.transfer(msg.sender, amount);\r\n        \r\n        emit RewardWithdrawal(msg.sender, rewardAmount);\r\n        emit StakingWithdrawal(msg.sender, amount);\r\n    }\r\n    \r\n    //Withdraw rewards\r\n    function withdrawRewardsOnly() external {\r\n        uint256 _rwdAmount = calculateReward(msg.sender);\r\n        require(_rwdAmount > 0, \"You do not have enough rewards\");\r\n        \r\n        // 1. User Accounting\r\n        Stake[] storage accountStakes = userStaking[msg.sender];\r\n        \r\n        // Redeem from most recent stake and go backwards in time.\r\n        uint256 rewardAmount = 0;\r\n        uint256 i = accountStakes.length;\r\n        while (i > 0) {\r\n            Stake storage userStake = accountStakes[i - 1];\r\n            uint256 stakeTimeSec;\r\n            \r\n            //check if current time is more than pool ending time\r\n            if (now > poolEndTime) {\r\n                stakeTimeSec = poolEndTime.sub(userStake.stakingTime);\r\n                if(userStake.lastWithdrawTime != 0){\r\n                    stakeTimeSec = poolEndTime.sub(userStake.lastWithdrawTime);\r\n                }\r\n            } else {\r\n                stakeTimeSec = now.sub(userStake.stakingTime);\r\n                if(userStake.lastWithdrawTime != 0){\r\n                    stakeTimeSec = now.sub(userStake.lastWithdrawTime);\r\n                }\r\n            }\r\n            \r\n            // fully redeem a past stake\r\n            rewardAmount = computeNewReward(rewardAmount, userStake.amount, stakeTimeSec);\r\n            userStake.lastWithdrawTime = now;\r\n            i--;\r\n        }\r\n        \r\n        //update user rewards info\r\n        userRewardInfo[msg.sender].totalWithdrawn = userRewardInfo[msg.sender].totalWithdrawn.add(rewardAmount);\r\n        userRewardInfo[msg.sender].lastWithdrawTime = now;\r\n        \r\n        //update total rewards withdrawn\r\n        rewardsWithdrawn = rewardsWithdrawn.add(rewardAmount);\r\n        \r\n        //transfer rewards\r\n        rewardToken.transfer(msg.sender, rewardAmount);\r\n        emit RewardWithdrawal(msg.sender, rewardAmount);\r\n    }\r\n    \r\n    //get staking details by user address\r\n    function getStakingAmount(address _userAddress) external constant returns (uint256 _stakedAmount) {\r\n        return userTotalStaking[_userAddress].totalStaking;\r\n    }\r\n    \r\n    //get total rewards collected by user\r\n    function getTotalRewardCollectedByUser(address userAddress) view external returns (uint256 _totalRewardCollected) \r\n    {\r\n        return userRewardInfo[userAddress].totalWithdrawn;\r\n    }\r\n    \r\n    //get total SWAP token staked in the contract\r\n    function getTotalStaked() external constant returns ( uint256 _totalStaked) {\r\n        return totalStaked;\r\n    }\r\n    \r\n    //get total rewards in the contract\r\n    function getTotalRewards() external constant returns ( uint256 _totalRewards) {\r\n        return totalRewards;\r\n    }\r\n    \r\n    //get pool details\r\n    function getPoolDetails() external view returns (address _baseToken, address _pairedToken, uint256 _totalRewards, uint256 _rewardsWithdrawn, uint256 _poolStartTime, uint256 _poolEndTime) {\r\n        return (address(tswap),address(rewardToken),totalRewards,rewardsWithdrawn,poolStartTime,poolEndTime);\r\n    }\r\n    \r\n    //get duration of pools\r\n    function getPoolDuration() external constant returns (uint256 _poolDuration) {\r\n        return poolDuration;\r\n    }\r\n\r\n    //set duration of pools by owner in seconds\r\n    function setPoolDuration(uint256 _poolDuration) external onlyOwner {\r\n        poolDuration = _poolDuration;\r\n        poolEndTime = poolStartTime + _poolDuration;\r\n        emit PoolDurationChange(_poolDuration);\r\n    }\r\n    \r\n    //get SWAP token address\r\n    function getSwapAddress() external constant returns (address _swapAddress) {\r\n        return address(tswap);\r\n    }\r\n    \r\n    //set tswap address\r\n    function setTswapAddress(address _address) external onlyOwner {\r\n        tswap = Ierc20(_address);\r\n    }\r\n    \r\n    //set reward token address\r\n    function setRewardTokenAddress(address _address) external onlyOwner {\r\n        rewardToken = Ierc20(_address);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_poolDuration\",\"type\":\"uint256\"}],\"name\":\"setPoolDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalStaked\",\"outputs\":[{\"name\":\"_totalStaked\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRewardsOnly\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStaking\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardInfo\",\"outputs\":[{\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"name\":\"lastWithdrawTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getStakingAmount\",\"outputs\":[{\"name\":\"_stakedAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSwapAddress\",\"outputs\":[{\"name\":\"_swapAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTotalStaking\",\"outputs\":[{\"name\":\"totalStaking\",\"type\":\"uint256\"},{\"name\":\"totalStakingTIme\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userStaking\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"stakingTime\",\"type\":\"uint256\"},{\"name\":\"lastWithdrawTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setRewardTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setTswapAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getTotalRewardCollectedByUser\",\"outputs\":[{\"name\":\"_totalRewardCollected\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPoolDetails\",\"outputs\":[{\"name\":\"_baseToken\",\"type\":\"address\"},{\"name\":\"_pairedToken\",\"type\":\"address\"},{\"name\":\"_totalRewards\",\"type\":\"uint256\"},{\"name\":\"_rewardsWithdrawn\",\"type\":\"uint256\"},{\"name\":\"_poolStartTime\",\"type\":\"uint256\"},{\"name\":\"_poolEndTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tswap\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"calculateReward\",\"outputs\":[{\"name\":\"_reward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalRewards\",\"outputs\":[{\"name\":\"_totalRewards\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPoolDuration\",\"outputs\":[{\"name\":\"_poolDuration\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"name\":\"ownerSetPoolRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OwnerSetReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakingWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"poolDuration\",\"type\":\"uint256\"}],\"name\":\"PoolDurationChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanges\",\"type\":\"event\"}]","ContractName":"StakingPool","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://42c612137bcdd3559d589b8541147494c483a1f828d7c5d971ef38ad6e88d36d"}]}