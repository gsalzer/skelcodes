{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/v1/markets/eth/nft20/Nft20Market.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\n\\nimport \\\"../../../../../interfaces/markets/tokens/IERC1155.sol\\\";\\nimport \\\"../../../../../interfaces/markets/tokens/IERC20.sol\\\";\\nimport \\\"../../../../../interfaces/markets/tokens/IERC721.sol\\\";\\n\\ninterface INFT20Pair {\\n    function withdraw(\\n        uint256[] calldata _tokenIds,\\n        uint256[] calldata amounts,\\n        address recipient\\n    ) external;\\n\\n    function withdraw(\\n        uint256[] calldata _tokenIds,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    function multi721Deposit(\\n        uint256[] memory _ids, \\n        address _recipient,\\n        address _referral\\n    ) external;\\n\\n    function swap721(uint256 _in, uint256 _out, address _recipient) external;\\n\\n    function swap1155(\\n        uint256[] calldata in_ids,\\n        uint256[] calldata in_amounts,\\n        uint256[] calldata out_ids,\\n        uint256[] calldata out_amounts,\\n        address _recipient\\n    ) external;\\n}\\n\\ninterface INFT20Factory {\\n    function nftToToken(address pair) external view returns (address);\\n}\\n\\ninterface IMoonCatsWrapped {\\n    function wrap(bytes5 catId) external;\\n    function _catIDToTokenID(bytes5 catId) external view returns(uint256);\\n}\\n\\ninterface IMoonCatsRescue {\\n    /* puts a cat up for a specific address to adopt */\\n    function makeAdoptionOfferToAddress(bytes5 catId, uint price, address to) external;\\n\\n    function rescueOrder(uint256 rescueIndex) external view returns(bytes5);\\n}\\n\\ninterface IMoonCatAcclimator {\\n    /**\\n     * @dev Take a list of MoonCats wrapped in this contract and unwrap them.\\n     * @param _rescueOrders an array of MoonCats, identified by rescue order, to unwrap\\n     */\\n    function batchUnwrap(uint256[] memory _rescueOrders) external;\\n}\\n\\nlibrary Nft20Market {\\n\\n    function _approve(address _operator, address _token) internal {\\n        if(!IERC721(_token).isApprovedForAll(address(this), _operator)) {\\n            IERC721(_token).setApprovalForAll(_operator, true);\\n        }\\n    }\\n\\n    function sellERC721ForERC20Equivalent(\\n        address _fromERC721,\\n        address _fromERC20,\\n        uint256[] memory _ids\\n    ) external {\\n        // save gas in case only a single ERC721 needs to be sold\\n        if(_ids.length == 1) {\\n            // transfer the token to NFT20 ERC20\\n            IERC721(_fromERC721).safeTransferFrom(\\n                address(this),\\n                _fromERC20,\\n                _ids[0],\\n                abi.encodePacked(address(this), address(this)) // referral, recipient\\n            );\\n        }\\n        // in case multiple ERC721(s) need to be sold\\n        else {\\n            // approve tokens to the NFT20 ERC20 contract\\n            _approve(_fromERC20, _fromERC721);\\n            // mint NFT20 ERC20 \\n            INFT20Pair(_fromERC20).multi721Deposit(\\n                _ids,\\n                address(this), // recipient\\n                address(this) // referral\\n            );\\n        }\\n    }\\n\\n    function sellERC1155BatchForERC20Equivalent(\\n        address _fromERC1155,\\n        address _fromERC20,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts\\n    ) external {\\n        // transfer the tokens to NFT20 ERC20\\n        IERC1155(_fromERC1155).safeBatchTransferFrom(\\n            address(this),\\n            _fromERC20,\\n            _ids,\\n            _amounts,\\n            abi.encodePacked(address(this), address(this)) // referral, recipient\\n        );\\n    }\\n\\n    function buyAssetsForErc20(\\n        address _nftAddr,\\n        address _fromERC20,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        address recipient\\n    ) external {\\n        // Handle special cases where we cannot directly send NFTs to the recipient\\n        if(\\n            _fromERC20 == 0x22C4AD011Cce6a398B15503e0aB64286568933Ed || // Doki Doki\\n            _fromERC20 == 0x303Af77Cf2774AABff12462C110A0CCf971D7DbE || // Node Runners\\n            _fromERC20 == 0xaDBEBbd65a041E3AEb474FE9fe6939577eB2544F || // Chonker Finance\\n            _fromERC20 == 0x57C31c042Cb2F6a50F3dA70ADe4fEE20C86B7493    // Block Art         \\n        ) {\\n            // redeem the NFTs\\n            INFT20Pair(_fromERC20).withdraw(_ids, _amounts);\\n            // transfer the ERC721 to the recipient\\n            if(_fromERC20 == 0x57C31c042Cb2F6a50F3dA70ADe4fEE20C86B7493) {\\n                for(uint256 i = 0; i < _ids.length; i++) {\\n                    IERC721(_nftAddr).transferFrom(address(this), recipient, _ids[i]);\\n                }\\n            }\\n            // transfer the ERC1155 to the recipient\\n            else {\\n                IERC1155(_nftAddr).safeBatchTransferFrom(address(this), recipient, _ids, _amounts, \\\"\\\");\\n            }\\n        }\\n        // send NFTs to the recipient\\n        else {\\n            INFT20Pair(_fromERC20).withdraw(_ids, _amounts, recipient);\\n        }\\n    }\\n\\n    function swapErc721(\\n        address nftAddr, \\n        address fromERC20,\\n        uint256[] memory fromTokenId, \\n        uint256[] memory toTokenId,\\n        address recipient\\n    ) external {\\n        // approve token to NFT20 pool\\n        _approve(fromERC20, nftAddr);\\n        // swap tokens and send back to recipient\\n        for (uint256 i = 0; i < fromTokenId.length; i++) {\\n            INFT20Pair(fromERC20).swap721(fromTokenId[i], toTokenId[i], recipient);\\n        }\\n    }\\n\\n    function swapErc1155(\\n        address nftAddr, \\n        address fromERC20,\\n        uint256[] calldata fromTokenIds,\\n        uint256[] calldata fromAmounts,\\n        uint256[] calldata toTokenIds,\\n        uint256[] calldata toAmounts,\\n        address recipient\\n    ) external {\\n        // approve token to NFT20 pool\\n        _approve(fromERC20, nftAddr);\\n        // swap tokens and send back to recipient\\n        INFT20Pair(fromERC20).swap1155(fromTokenIds, fromAmounts, toTokenIds, toAmounts, recipient);\\n    }\\n}\"\r\n    },\r\n    \"interfaces/markets/tokens/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\ninterface IERC1155 {\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external;\\n}\"\r\n    },\r\n    \"interfaces/markets/tokens/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\ninterface IERC20 {\\n    /**\\n        * @dev Returns the amount of tokens owned by `account`.\\n        */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n        * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n        *\\n        * Returns a boolean value indicating whether the operation succeeded.\\n        *\\n        * Emits a {Transfer} event.\\n        */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n}\"\r\n    },\r\n    \"interfaces/markets/tokens/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\ninterface IERC721 {\\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\\n    ///  THEY MAY BE PERMANENTLY LOST\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\n    ///  `_tokenId` is not a valid NFT.\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) external;\\n    \\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function approve(address to, uint256 tokenId) external;\\n    \\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[]","ContractName":"Nft20Market","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}