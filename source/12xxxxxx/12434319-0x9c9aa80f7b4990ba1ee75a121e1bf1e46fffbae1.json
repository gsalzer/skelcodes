{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/authorization/Authorization.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\nimport \\\"./AuthorizationStorage.sol\\\";\\n\\nimport \\\"../interfaces/IAuthorization.sol\\\";\\nimport \\\"../interfaces/IEurPriceFeed.sol\\\";\\nimport \\\"../interfaces/IOperationsRegistry.sol\\\";\\nimport \\\"../interfaces/IBFactory.sol\\\";\\nimport \\\"../interfaces/IXTokenWrapper.sol\\\";\\n\\n/**\\n * @title Authorization\\n * @author Protofire\\n * @dev Contract module which contains the authorization logic.\\n *\\n * This contract should be called by an Authorizable contract through its `onlyAuthorized` modifier.\\n */\\ncontract Authorization is IAuthorization, Initializable, OwnableUpgradeable, AuthorizationStorage {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Emitted when `permissions` address is set.\\n     */\\n    event PermissionsSet(address indexed newPermissions);\\n\\n    /**\\n     * @dev Emitted when `operationsRegistry` address is set.\\n     */\\n    event OperationsRegistrySet(address indexed newOperationsRegistry);\\n\\n    /**\\n     * @dev Emitted when `tradingLimit` value is set.\\n     */\\n    event TradingLimitSet(uint256 newLimit);\\n\\n    /**\\n     * @dev Emitted when `eurPriceFeed` address is set.\\n     */\\n    event EurPriceFeedSet(address indexed newEurPriceFeed);\\n\\n    /**\\n     * @dev Emitted when `eurPriceFeed` address is set.\\n     */\\n    event PoolFactorySet(address indexed poolFactory);\\n\\n    /**\\n     * @dev Emitted when `eurPriceFeed` address is set.\\n     */\\n    event XTokenWrapperSet(address indexed xTokenWrapper);\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev Initalize the contract.\\n     *\\n     * Sets ownership to the account that deploys the contract.\\n     *\\n     * @param _permissions Permissions module address\\n     * @param _eurPriceFeed EurPriceFeed module address\\n     * @param _operationsRegistry OperationsRegistry address\\n     * @param _poolFactory Balancer BFactory address\\n     * @param _xTokenWrapper XTokenWrapper address\\n     * @param _tradingLimit Traiding limit value\\n     * @param _paused Pause protocol\\n     */\\n    function initialize(\\n        address _permissions,\\n        address _eurPriceFeed,\\n        address _operationsRegistry,\\n        address _poolFactory,\\n        address _xTokenWrapper,\\n        uint256 _tradingLimit,\\n        bool _paused\\n    ) public initializer {\\n        _setPermissions(_permissions);\\n        _setEurPriceFeed(_eurPriceFeed);\\n        _setOperationsRegistry(_operationsRegistry);\\n        _setPoolFactory(_poolFactory);\\n        _setXTokenWrapper(_xTokenWrapper);\\n        _setTradingLimit(_tradingLimit);\\n        paused = _paused;\\n\\n        __Ownable_init();\\n\\n        emit PermissionsSet(permissions);\\n        emit EurPriceFeedSet(_eurPriceFeed);\\n        emit OperationsRegistrySet(_operationsRegistry);\\n        emit TradingLimitSet(_tradingLimit);\\n    }\\n\\n    /**\\n     * @dev Sets `_permissions` as the new Permissions module.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have be the owner.\\n     * - `_permissions` should not be the zero address.\\n     *\\n     * @param _permissions The address of the new Pemissions module.\\n     */\\n    function setPermissions(address _permissions) external override onlyOwner {\\n        _setPermissions(_permissions);\\n    }\\n\\n    /**\\n     * @dev Sets `_eurPriceFeed` as the new EUR Price feed module.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have be the owner.\\n     * - `_eurPriceFeed` should not be the zero address.\\n     *\\n     * @param _eurPriceFeed The address of the new EUR Price feed module.\\n     */\\n    function setEurPriceFeed(address _eurPriceFeed) external override onlyOwner {\\n        _setEurPriceFeed(_eurPriceFeed);\\n    }\\n\\n    /**\\n     * @dev Sets `_tradingLimit` as the new traiding limit for T1 users.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have be the owner.\\n     * - `_tradingLimit` should not be 0.\\n     *\\n     * @param _tradingLimit The value of the new traiding limit for T1 users.\\n     */\\n    function setTradingLimit(uint256 _tradingLimit) external override onlyOwner {\\n        _setTradingLimit(_tradingLimit);\\n    }\\n\\n    /**\\n     * @dev Sets `_operationsRegistry` as the new OperationsRegistry module.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have be the owner.\\n     * - `_operationsRegistry` should not be the zero address.\\n     *\\n     * @param _operationsRegistry The address of the new OperationsRegistry module.\\n     */\\n    function setOperationsRegistry(address _operationsRegistry) external override onlyOwner {\\n        _setOperationsRegistry(_operationsRegistry);\\n    }\\n\\n    /**\\n     * @dev Sets `_poolFactory` as the new BFactory module.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have be the owner.\\n     * - `_poolFactory` should not be the zero address.\\n     *\\n     * @param _poolFactory The address of the new Balance BFactory module.\\n     */\\n    function setPoolFactory(address _poolFactory) external override onlyOwner {\\n        _setPoolFactory(_poolFactory);\\n    }\\n\\n    /**\\n     * @dev Sets `_xTokenWrapper` as the new XTokenWrapper module.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have be the owner.\\n     * - `_xTokenWrapper` should not be the zero address.\\n     *\\n     * @param _xTokenWrapper The address of the new XTokenWrapper module.\\n     */\\n    function setXTokenWrapper(address _xTokenWrapper) external override onlyOwner {\\n        _setXTokenWrapper(_xTokenWrapper);\\n    }\\n\\n    /**\\n     * @dev Sets `_permissions` as the new Permissions module.\\n     *\\n     * Requirements:\\n     *\\n     * - `_permissions` should not be the zero address.\\n     *\\n     * @param _permissions The address of the new Pemissions module.\\n     */\\n    function _setPermissions(address _permissions) internal {\\n        require(_permissions != address(0), \\\"permissions is the zero address\\\");\\n        emit PermissionsSet(_permissions);\\n        permissions = _permissions;\\n    }\\n\\n    /**\\n     * @dev Sets `_eurPriceFeed` as the new EUR Price feed module.\\n     *\\n     * Requirements:\\n     *\\n     * - `_eurPriceFeed` should not be the zero address.\\n     *\\n     * @param _eurPriceFeed The address of the new EUR Price feed module.\\n     */\\n    function _setEurPriceFeed(address _eurPriceFeed) internal {\\n        require(_eurPriceFeed != address(0), \\\"eur price feed is the zero address\\\");\\n        emit EurPriceFeedSet(_eurPriceFeed);\\n        eurPriceFeed = _eurPriceFeed;\\n    }\\n\\n    /**\\n     * @dev Sets `_tradingLimit` as the new traiding limit for T1 users.\\n     *\\n     * Requirements:\\n     *\\n     * - `_tradingLimit` should not be 0.\\n     *\\n     * @param _tradingLimit The value of the new traiding limit for T1 users.\\n     */\\n    function _setTradingLimit(uint256 _tradingLimit) internal {\\n        require(_tradingLimit != 0, \\\"trading limit is 0\\\");\\n        emit TradingLimitSet(_tradingLimit);\\n        tradingLimit = _tradingLimit;\\n    }\\n\\n    /**\\n     * @dev Sets `_operationsRegistry` as the new OperationsRegistry module.\\n     *\\n     * Requirements:\\n     *\\n     * - `_operationsRegistry` should not be the zero address.\\n     *\\n     * @param _operationsRegistry The address of the new OperationsRegistry module.\\n     */\\n    function _setOperationsRegistry(address _operationsRegistry) internal {\\n        require(_operationsRegistry != address(0), \\\"operation registry is the zero address\\\");\\n        emit OperationsRegistrySet(_operationsRegistry);\\n        operationsRegistry = _operationsRegistry;\\n    }\\n\\n    /**\\n     * @dev Sets `_poolFactory` as the new BFactory module.\\n     *\\n     * Requirements:\\n     *\\n     * - `_poolFactory` should not be the zero address.\\n     *\\n     * @param _poolFactory The address of the new Balance BFactory module.\\n     */\\n    function _setPoolFactory(address _poolFactory) internal {\\n        require(_poolFactory != address(0), \\\"Pool Factory is the zero address\\\");\\n        emit PoolFactorySet(_poolFactory);\\n        poolFactory = _poolFactory;\\n    }\\n\\n    /**\\n     * @dev Sets `_xTokenWrapper` as the new XTokenWrapper module.\\n     *\\n     * Requirements:\\n     *\\n     * - `_xTokenWrapper` should not be the zero address.\\n     *\\n     * @param _xTokenWrapper The address of the new XTokenWrapper module.\\n     */\\n    function _setXTokenWrapper(address _xTokenWrapper) internal {\\n        require(_xTokenWrapper != address(0), \\\"XTokenWrapper is the zero address\\\");\\n        emit XTokenWrapperSet(_xTokenWrapper);\\n        xTokenWrapper = _xTokenWrapper;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function pause() external onlyOwner {\\n        require(!paused, \\\"paused\\\");\\n        paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function unpause() external onlyOwner {\\n        require(paused, \\\"not paused\\\");\\n        paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Determins if a user is allowed to perform an operation.\\n     *\\n     * @param _user msg.sender from function using Authorizable `onlyAuthorized` modifier.\\n     * @param _asset address of the contract using Authorizable `onlyAuthorized` modifier.\\n     * @param _operation msg.sig from function using Authorizable `onlyAuthorized` modifier.\\n     * @param _data msg.data from function using Authorizable `onlyAuthorized` modifier.\\n     * @return a boolean signaling the authorization.\\n     */\\n    function isAuthorized(\\n        address _user,\\n        address _asset,\\n        bytes4 _operation,\\n        bytes calldata _data\\n    ) external view override returns (bool) {\\n        // The protocol is paused\\n        if (paused) {\\n            return false;\\n        }\\n\\n        // Only allowed operations\\n        if (isERC20Operation(_operation)) {\\n            // Get user and amount based on the operation\\n            address operationSender = _user;\\n            address user = _user;\\n            bytes4 operation = _operation;\\n            uint256 operationAmount;\\n\\n            // ERC20_TRANSFER uses _user, which is the sender, for authorizing\\n\\n            if (_operation == ERC20_TRANSFER) {\\n                ( , uint256 amount) = abi.decode(_data[4:], (address, uint256));\\n                operationAmount = amount;\\n            }\\n\\n            if (_operation == ERC20_MINT || _operation == ERC20_BURN_FROM) {\\n                (address account, uint256 amount) = abi.decode(_data[4:], (address, uint256));\\n                user = account;\\n                operationAmount = amount;\\n            }\\n\\n            if (_operation == ERC20_TRANSFER_FROM) {\\n                (address sender, , uint256 amount) = abi.decode(_data[4:], (address, address, uint256));\\n                user = sender;\\n                operationAmount = amount;\\n                operation = ERC20_TRANSFER;\\n            }\\n\\n            // No need to check for Zero amount operations, also Balancer requires allowed zero amount transfers\\n            if (operationAmount == 0) {\\n                return true;\\n            }\\n\\n            return checkERC20Permissions(operationSender, user, _asset, operation, operationAmount);\\n        }\\n\\n        if (isBFactoryOperation(_operation)) {\\n            return checkBFactoryPermissions(_user);\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Checks user permissions logic for ERC20 operations.\\n     *\\n     * @param _sender address executing the operation.\\n     * @param _user user's address.\\n     * @param _asset address of the contract where `_operation` comes from.\\n     * @param _operation operation to authorized.\\n     * @param _amount operation amount.\\n     */\\n    function checkERC20Permissions(\\n        address _sender,\\n        address _user,\\n        address _asset,\\n        bytes4 _operation,\\n        uint256 _amount\\n    ) internal view returns (bool) {\\n        // Get user permissions\\n        address[] memory accounts = new address[](6);\\n        accounts[0] = _user;\\n        accounts[1] = _user;\\n        accounts[2] = _user;\\n        accounts[3] = _user;\\n        accounts[4] = _user;\\n        accounts[5] = _sender;\\n\\n        uint256[] memory ids = new uint256[](6);\\n        ids[0] = TIER_1_ID;\\n        ids[1] = TIER_2_ID;\\n        ids[2] = SUSPENDED_ID;\\n        ids[3] = REJECTED_ID;\\n        ids[4] = PROTOCOL_CONTRACT;\\n        ids[5] = PROTOCOL_CONTRACT;\\n\\n        uint256[] memory permissionsBlance = IERC1155(permissions).balanceOfBatch(accounts, ids);\\n\\n        address token = IXTokenWrapper(xTokenWrapper).xTokenToToken(_asset);\\n\\n        // Only PROTOCOL_CONTRACT can mint/burn/transfer/transferFrom xLPT\\n        if (IBFactory(poolFactory).isBPool(token)) {\\n            return checkProtocolContract(_operation, permissionsBlance[4], permissionsBlance[5]);\\n        }\\n\\n        // User is paused\\n        if (permissionsBlance[2] > 0) {\\n            return false;\\n        }\\n\\n        // User is Rejected\\n        if (permissionsBlance[3] > 0) {\\n            return checkRejected(_operation);\\n        }\\n\\n        return checkByTier(_user, _asset, _operation, _amount, permissionsBlance);\\n    }\\n\\n    /**\\n     * @dev Checks user permissions logic for BFactory operations.\\n     *\\n     * @param _user user's address.\\n     */\\n    function checkBFactoryPermissions(address _user) internal view returns (bool) {\\n        uint256 permissionBlance = IERC1155(permissions).balanceOf(_user, POOL_CREATOR);\\n\\n        return permissionBlance > 0;\\n    }\\n\\n    /**\\n     * @dev Checks user permissions by Tier logic.\\n     *\\n     * @param _user user's address.\\n     * @param _asset address of the contract where `_operation` comes from.\\n     * @param _operation operation to authorized.\\n     * @param _amount operation amount.\\n     * @param _permissionsBlance user's permissions.\\n     */\\n    function checkByTier(\\n        address _user,\\n        address _asset,\\n        bytes4 _operation,\\n        uint256 _amount,\\n        uint256[] memory _permissionsBlance\\n    ) internal view returns (bool) {\\n        // If User is in TIER 2 it is allowed to do everything\\n        if (_permissionsBlance[1] > 0) {\\n            return true;\\n        }\\n\\n        // If not Tier 2 but Tier 1, we need to check limits and actions\\n        uint256 currentTradigBalace =\\n            IOperationsRegistry(operationsRegistry).tradingBalanceByOperation(_user, _operation);\\n        uint256 eurAmount = IEurPriceFeed(eurPriceFeed).calculateAmount(_asset, _amount);\\n\\n        // Something wrong with price feed\\n        if (eurAmount == 0) {\\n            return false;\\n        }\\n\\n        if (_permissionsBlance[0] > 0 && currentTradigBalace.add(eurAmount) <= tradingLimit) {\\n            return true;\\n        }\\n\\n        // Neither Tier 2 or Tier 1\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Checks user permissions when rejected.\\n     *\\n     * @param _operation operation to authorized.\\n     */\\n    function checkRejected(bytes4 _operation) internal pure returns (bool) {\\n        // Only allowed to unwind position (burn)\\n        return _operation == ERC20_BURN_FROM;\\n    }\\n\\n    /**\\n     * @dev Checks protocol contract type permissions .\\n     *\\n     * @param _operation operation to authorized.\\n     * @param _permissionUser user's protocol contract permission.\\n     * @param _permissionSender sender's protocol contract permission.\\n     */\\n    function checkProtocolContract(\\n        bytes4 _operation,\\n        uint256 _permissionUser,\\n        uint256 _permissionSender\\n    ) internal pure returns (bool) {\\n        if (_operation == ERC20_TRANSFER || _operation == ERC20_TRANSFER_FROM) {\\n            // the sender should be PROTOCOL_CONTRACT\\n            return _permissionSender > 0;\\n        }\\n\\n        if (_operation == ERC20_MINT || _operation == ERC20_BURN_FROM) {\\n            // minting to or berning from should be PROTOCOL_CONTRACT\\n            return _permissionUser > 0;\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `_operation` is an ERC20 method.\\n     *\\n     * @param _operation Method sig.\\n     */\\n    function isERC20Operation(bytes4 _operation) internal pure returns (bool) {\\n        return\\n            _operation == ERC20_TRANSFER ||\\n            _operation == ERC20_TRANSFER_FROM ||\\n            _operation == ERC20_MINT ||\\n            _operation == ERC20_BURN_FROM;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `_operation` is a BFatory method.\\n     *\\n     * @param _operation Method sig.\\n     */\\n    function isBFactoryOperation(bytes4 _operation) internal pure returns (bool) {\\n        return _operation == BFACTORY_NEW_POOL;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/authorization/AuthorizationStorage.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title AuthorizationStorage\\n * @author Protofire\\n * @dev Storage structure used by Authorization contract.\\n *\\n * All storage must be declared here\\n * New storage must be appended to the end\\n * Never remove items from this list\\n */\\nabstract contract AuthorizationStorage {\\n    /// @dev Permissions module address\\n    address public permissions;\\n    /// @dev EurPriceFeed module address\\n    address public eurPriceFeed;\\n    /// @dev OperationsRegistry address\\n    address public operationsRegistry;\\n    /// @dev Balancer BFactory address\\n    address public poolFactory;\\n    /// @dev XTokenWrapper address\\n    address public xTokenWrapper;\\n    /// @dev Traiding limit value (in WEI) for some type of users\\n    uint256 public tradingLimit;\\n\\n    /// @dev Indicates if protocol is paused\\n    bool public paused;\\n\\n    bytes4 public constant ERC20_TRANSFER = bytes4(keccak256(\\\"transfer(address,uint256)\\\"));\\n    bytes4 public constant ERC20_TRANSFER_FROM = bytes4(keccak256(\\\"transferFrom(address,address,uint256)\\\"));\\n    bytes4 public constant ERC20_APPROVE = bytes4(keccak256(\\\"approve(address,uint256)\\\"));\\n    bytes4 public constant ERC20_MINT = bytes4(keccak256(\\\"mint(address,uint256)\\\"));\\n    bytes4 public constant ERC20_BURN_FROM = bytes4(keccak256(\\\"burnFrom(address,uint256)\\\"));\\n    bytes4 public constant BFACTORY_NEW_POOL = bytes4(keccak256(\\\"newBPool()\\\"));\\n\\n    // Constants for Permissions ID\\n    uint256 public constant SUSPENDED_ID = 0;\\n    uint256 public constant TIER_1_ID = 1;\\n    uint256 public constant TIER_2_ID = 2;\\n    uint256 public constant REJECTED_ID = 3;\\n    uint256 public constant PROTOCOL_CONTRACT = 4;\\n    uint256 public constant POOL_CREATOR = 5;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAuthorization.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title IAuthorization\\n * @author Protofire\\n * @dev Interface to be implemented by any Authorization logic contract.\\n *\\n */\\ninterface IAuthorization {\\n    /**\\n     * @dev Sets `_permissions` as the new Permissions module.\\n     *\\n     * @param _permissions The address of the new Pemissions module.\\n     */\\n    function setPermissions(address _permissions) external;\\n\\n    /**\\n     * @dev Sets `_eurPriceFeed` as the new EUR Price feed module.\\n     *\\n     * @param _eurPriceFeed The address of the new EUR Price feed module.\\n     */\\n    function setEurPriceFeed(address _eurPriceFeed) external;\\n\\n    /**\\n     * @dev Sets `_operationsRegistry` as the new OperationsRegistry module.\\n     *\\n     * @param _operationsRegistry The address of the new OperationsRegistry module.\\n     */\\n    function setOperationsRegistry(address _operationsRegistry) external;\\n\\n    /**\\n     * @dev Sets `_tradingLimit` as the new traiding limit.\\n     *\\n     * @param _tradingLimit The value of the new traiding limit.\\n     */\\n    function setTradingLimit(uint256 _tradingLimit) external;\\n\\n    /**\\n     * @dev Sets `_poolFactory` as the new BFactory module.\\n     *\\n     * @param _poolFactory The address of the new Balance BFactory module.\\n     */\\n    function setPoolFactory(address _poolFactory) external;\\n\\n    /**\\n     * @dev Sets `_xTokenWrapper` as the new XTokenWrapper module.\\n     *\\n     * @param _xTokenWrapper The address of the new XTokenWrapper module.\\n     */\\n    function setXTokenWrapper(address _xTokenWrapper) external;\\n\\n    /**\\n     * @dev Determins if a user is allowed to perform an operation.\\n     *\\n     * @param _user msg.sender from function using Authorizable `onlyAuthorized` modifier.\\n     * @param _asset address of the contract using Authorizable `onlyAuthorized` modifier.\\n     * @param _operation msg.sig from function using Authorizable `onlyAuthorized` modifier.\\n     * @param _data msg.data from function using Authorizable `onlyAuthorized` modifier.\\n     * @return a boolean signaling the authorization.\\n     */\\n    function isAuthorized(\\n        address _user,\\n        address _asset,\\n        bytes4 _operation,\\n        bytes calldata _data\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEurPriceFeed.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title IEurPriceFeed\\n * @author Protofire\\n * @dev Interface to be implemented by any EurPriceFeed logic contract used in the protocol.\\n *\\n */\\ninterface IEurPriceFeed {\\n    /**\\n     * @dev Gets the price a `_asset` in EUR.\\n     *\\n     * @param _asset address of asset to get the price.\\n     */\\n    function getPrice(address _asset) external returns (uint256);\\n\\n    /**\\n     * @dev Gets how many EUR represents the `_amount` of `_asset`.\\n     *\\n     * @param _asset address of asset to get the price.\\n     * @param _amount amount of `_asset`.\\n     */\\n    function calculateAmount(address _asset, uint256 _amount) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets feed addresses for a given group of assets.\\n     *\\n     * @param _assets Array of assets addresses.\\n     * @param _feeds Array of asset/ETH price feeds.\\n     */\\n    function setAssetsFeeds(address[] memory _assets, address[] memory _feeds) external;\\n\\n    /**\\n     * @dev Sets feed addresse for a given asset.\\n     *\\n     * @param _asset Assets address.\\n     * @param _feed Asset/ETH price feed.\\n     */\\n    function setAssetFeed(address _asset, address _feed) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOperationsRegistry.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title IEurPriceFeed\\n * @author Protofire\\n * @dev Interface to be implemented by any OperationRegistry logic contract use in the protocol.\\n *\\n */\\ninterface IOperationsRegistry {\\n    /**\\n     * @dev Gets the balance traded by `_user` for an `_operation`.\\n     *\\n     * @param _user user's address\\n     * @param _operation msg.sig of the function considered an operation.\\n     */\\n    function tradingBalanceByOperation(address _user, bytes4 _operation) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `_eurPriceFeed` as the new EUR Price feed module.\\n     *\\n     * @param _eurPriceFeed The address of the new EUR Price feed module.\\n     */\\n    function setEurPriceFeed(address _eurPriceFeed) external;\\n\\n    /**\\n     * @dev Sets `_asset` as allowed for calling `addTrade`.\\n     *\\n     * @param _asset asset's address.\\n     */\\n    function allowAsset(address _asset) external;\\n\\n    /**\\n     * @dev Sets `_asset` as disallowed for calling `addTrade`.\\n     *\\n     * @param _asset asset's address.\\n     */\\n    function disallowAsset(address _asset) external;\\n\\n    /**\\n     * @dev Adds `_amount` converted to ERU to the balance traded by `_user` for an `_operation`.\\n     *\\n     * @param _user user's address\\n     * @param _operation msg.sig of the function considered an operation.\\n     * @param _amount msg.sig of the function considered an operation.\\n     */\\n    function addTrade(\\n        address _user,\\n        bytes4 _operation,\\n        uint256 _amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBFactory.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IBPool.sol\\\";\\n\\ninterface IBFactory {\\n    event LOG_NEW_POOL(address indexed caller, address indexed pool);\\n\\n    function isBPool(address b) external view returns (bool);\\n\\n    function newBPool() external returns (IBPool);\\n\\n    function setExchProxy(address exchProxy) external;\\n\\n    function setOperationsRegistry(address operationsRegistry) external;\\n\\n    function setPermissionManager(address permissionManager) external;\\n\\n    function setAuthorization(address _authorization) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IXTokenWrapper.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\n/**\\n * @title IXTokenWrapper\\n * @author Protofire\\n * @dev XTokenWrapper Interface.\\n *\\n */\\ninterface IXTokenWrapper is IERC1155Receiver {\\n    /**\\n     * @dev Token to xToken registry.\\n     */\\n    function tokenToXToken(address _token) external view returns (address);\\n\\n    /**\\n     * @dev xToken to Token registry.\\n     */\\n    function xTokenToToken(address _xToken) external view returns (address);\\n\\n    /**\\n     * @dev Wraps `_token` into its associated xToken.\\n     *\\n     */\\n    function wrap(address _token, uint256 _amount) external payable returns (bool);\\n\\n    /**\\n     * @dev Unwraps `_xToken`.\\n     *\\n     */\\n    function unwrap(address _xToken, uint256 _amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBPool.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title IBPool\\n * @author Protofire\\n * @dev Balancer BPool contract interface.\\n *\\n */\\ninterface IBPool {\\n    function isPublicSwap() external view returns (bool);\\n\\n    function isFinalized() external view returns (bool);\\n\\n    function isBound(address t) external view returns (bool);\\n\\n    function getNumTokens() external view returns (uint256);\\n\\n    function getCurrentTokens() external view returns (address[] memory tokens);\\n\\n    function getFinalTokens() external view returns (address[] memory tokens);\\n\\n    function getDenormalizedWeight(address token) external view returns (uint256);\\n\\n    function getTotalDenormalizedWeight() external view returns (uint256);\\n\\n    function getNormalizedWeight(address token) external view returns (uint256);\\n\\n    function getBalance(address token) external view returns (uint256);\\n\\n    function getSwapFee() external view returns (uint256);\\n\\n    function getController() external view returns (address);\\n\\n    function setSwapFee(uint256 swapFee) external;\\n\\n    function setController(address manager) external;\\n\\n    function setPublicSwap(bool public_) external;\\n\\n    function finalize() external;\\n\\n    function bind(\\n        address token,\\n        uint256 balance,\\n        uint256 denorm\\n    ) external;\\n\\n    function rebind(\\n        address token,\\n        uint256 balance,\\n        uint256 denorm\\n    ) external;\\n\\n    function unbind(address token) external;\\n\\n    function gulp(address token) external;\\n\\n    function getSpotPrice(address tokenIn, address tokenOut) external view returns (uint256 spotPrice);\\n\\n    function getSpotPriceSansFee(address tokenIn, address tokenOut) external view returns (uint256 spotPrice);\\n\\n    function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external;\\n\\n    function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external;\\n\\n    function swapExactAmountIn(\\n        address tokenIn,\\n        uint256 tokenAmountIn,\\n        address tokenOut,\\n        uint256 minAmountOut,\\n        uint256 maxPrice\\n    ) external returns (uint256 tokenAmountOut, uint256 spotPriceAfter);\\n\\n    function swapExactAmountOut(\\n        address tokenIn,\\n        uint256 maxAmountIn,\\n        address tokenOut,\\n        uint256 tokenAmountOut,\\n        uint256 maxPrice\\n    ) external returns (uint256 tokenAmountIn, uint256 spotPriceAfter);\\n\\n    function joinswapExternAmountIn(\\n        address tokenIn,\\n        uint256 tokenAmountIn,\\n        uint256 minPoolAmountOut\\n    ) external returns (uint256 poolAmountOut);\\n\\n    function joinswapPoolAmountOut(\\n        address tokenIn,\\n        uint256 poolAmountOut,\\n        uint256 maxAmountIn\\n    ) external returns (uint256 tokenAmountIn);\\n\\n    function exitswapPoolAmountIn(\\n        address tokenOut,\\n        uint256 poolAmountIn,\\n        uint256 minAmountOut\\n    ) external returns (uint256 tokenAmountOut);\\n\\n    function exitswapExternAmountOut(\\n        address tokenOut,\\n        uint256 tokenAmountOut,\\n        uint256 maxPoolAmountIn\\n    ) external returns (uint256 poolAmountIn);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address whom) external view returns (uint256);\\n\\n    function allowance(address src, address dst) external view returns (uint256);\\n\\n    function approve(address dst, uint256 amt) external returns (bool);\\n\\n    function transfer(address dst, uint256 amt) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) external returns (bool);\\n\\n    function calcSpotPrice(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 swapFee\\n    ) external pure returns (uint256 spotPrice);\\n\\n    function calcOutGivenIn(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 tokenAmountIn,\\n        uint256 swapFee\\n    ) external pure returns (uint256 tokenAmountOut);\\n\\n    function calcInGivenOut(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 tokenAmountOut,\\n        uint256 swapFee\\n    ) external pure returns (uint256 tokenAmountIn);\\n\\n    function calcPoolOutGivenSingleIn(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 tokenAmountIn,\\n        uint256 swapFee\\n    ) external pure returns (uint256 poolAmountOut);\\n\\n    function calcSingleInGivenPoolOut(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 poolAmountOut,\\n        uint256 swapFee\\n    ) external pure returns (uint256 tokenAmountIn);\\n\\n    function calcSingleOutGivenPoolIn(\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 poolAmountIn,\\n        uint256 swapFee\\n    ) external pure returns (uint256 tokenAmountOut);\\n\\n    function calcPoolInGivenSingleOut(\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 tokenAmountOut,\\n        uint256 swapFee\\n    ) external pure returns (uint256 poolAmountIn);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newEurPriceFeed\",\"type\":\"address\"}],\"name\":\"EurPriceFeedSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperationsRegistry\",\"type\":\"address\"}],\"name\":\"OperationsRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPermissions\",\"type\":\"address\"}],\"name\":\"PermissionsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolFactory\",\"type\":\"address\"}],\"name\":\"PoolFactorySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"TradingLimitSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"xTokenWrapper\",\"type\":\"address\"}],\"name\":\"XTokenWrapperSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BFACTORY_NEW_POOL\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC20_APPROVE\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC20_BURN_FROM\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC20_MINT\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC20_TRANSFER\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC20_TRANSFER_FROM\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_CREATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROTOCOL_CONTRACT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REJECTED_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUSPENDED_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIER_1_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIER_2_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eurPriceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_permissions\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_eurPriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operationsRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xTokenWrapper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tradingLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_operation\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationsRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permissions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_eurPriceFeed\",\"type\":\"address\"}],\"name\":\"setEurPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operationsRegistry\",\"type\":\"address\"}],\"name\":\"setOperationsRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_permissions\",\"type\":\"address\"}],\"name\":\"setPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolFactory\",\"type\":\"address\"}],\"name\":\"setPoolFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tradingLimit\",\"type\":\"uint256\"}],\"name\":\"setTradingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_xTokenWrapper\",\"type\":\"address\"}],\"name\":\"setXTokenWrapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xTokenWrapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Authorization","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}