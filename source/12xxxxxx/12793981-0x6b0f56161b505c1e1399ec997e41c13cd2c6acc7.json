{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/artem/Projects/Distributed_Lab/Applicature/bridgemutual-core/contracts/Globals.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nuint256 constant SECONDS_IN_THE_YEAR = 365 * 24 * 60 * 60; // 365 days * 24 hours * 60 minutes * 60 seconds\\nuint256 constant MAX_INT = type(uint256).max;\\n\\nuint256 constant DECIMALS18 = 10**18;\\n\\nuint256 constant PRECISION = 10**25;\\nuint256 constant PERCENTAGE_100 = 100 * PRECISION;\\n\\nuint256 constant BLOCKS_PER_DAY = 6450;\\nuint256 constant BLOCKS_PER_YEAR = BLOCKS_PER_DAY * 365;\\n\\nuint256 constant APY_TOKENS = DECIMALS18;\\n\"\r\n    },\r\n    \"/home/artem/Projects/Distributed_Lab/Applicature/bridgemutual-core/contracts/PolicyBook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./libraries/DecimalsConverter.sol\\\";\\n\\nimport \\\"./tokens/erc20permit-upgradeable/ERC20PermitUpgradeable.sol\\\";\\nimport \\\"./interfaces/helpers/IPriceFeed.sol\\\";\\nimport \\\"./interfaces/IPolicyBook.sol\\\";\\nimport \\\"./interfaces/IBMICoverStaking.sol\\\";\\nimport \\\"./interfaces/IContractsRegistry.sol\\\";\\nimport \\\"./interfaces/IPolicyRegistry.sol\\\";\\nimport \\\"./interfaces/IClaimVoting.sol\\\";\\nimport \\\"./interfaces/IClaimingRegistry.sol\\\";\\nimport \\\"./interfaces/ILiquidityMining.sol\\\";\\nimport \\\"./interfaces/IPolicyQuote.sol\\\";\\nimport \\\"./interfaces/IRewardsGenerator.sol\\\";\\nimport \\\"./interfaces/ILiquidityRegistry.sol\\\";\\n\\nimport \\\"./abstract/AbstractDependant.sol\\\";\\n\\nimport \\\"./Globals.sol\\\";\\n\\ncontract PolicyBook is IPolicyBook, ERC20PermitUpgradeable, AbstractDependant {\\n    using SafeERC20 for ERC20;\\n    using SafeMath for uint256;\\n    using Math for uint256;\\n\\n    uint256 public constant MINUMUM_COVERAGE = 100 * DECIMALS18; // 100 STBL\\n    uint256 public constant ANNUAL_COVERAGE_TOKENS = MINUMUM_COVERAGE * 10; // 1000 STBL\\n\\n    uint256 public constant PROTOCOL_PERCENTAGE = 20 * PRECISION;\\n\\n    uint256 public constant RISKY_UTILIZATION_RATIO = 80 * PRECISION;\\n    uint256 public constant MODERATE_UTILIZATION_RATIO = 50 * PRECISION;\\n\\n    uint256 public constant PREMIUM_DISTRIBUTION_EPOCH = 1 days;\\n    uint256 public constant MAX_PREMIUM_DISTRIBUTION_EPOCHS = 90;\\n\\n    uint256 public constant MINIMUM_REWARD = 15 * PRECISION; // 0.15\\n    uint256 public constant MAXIMUM_REWARD = 2 * PERCENTAGE_100; // 2.0\\n    uint256 public constant BASE_REWARD = PERCENTAGE_100; // 1.0\\n\\n    uint256 public constant override EPOCH_DURATION = 1 weeks;\\n    uint256 public constant MAXIMUM_EPOCHS = SECONDS_IN_THE_YEAR / EPOCH_DURATION;\\n    uint256 public constant VIRTUAL_EPOCHS = 2;\\n\\n    uint256 public constant WITHDRAWAL_PERIOD = 8 days;\\n    uint256 public constant override READY_TO_WITHDRAW_PERIOD = 2 days;\\n\\n    bool public override whitelisted;\\n\\n    uint256 public override epochStartTime;\\n    uint256 public lastDistributionEpoch;\\n\\n    uint256 public lastPremiumDistributionEpoch;\\n    int256 public lastPremiumDistributionAmount;\\n\\n    address public override insuranceContractAddress;\\n    IPolicyBookFabric.ContractType public override contractType;\\n\\n    IPriceFeed public priceFeed;\\n    ERC20 public stblToken;\\n    IPolicyRegistry public policyRegistry;\\n    IBMICoverStaking public bmiCoverStaking;\\n    IRewardsGenerator public rewardsGenerator;\\n    ILiquidityMining public liquidityMining;\\n    IClaimVoting public claimVoting;\\n    IClaimingRegistry public claimingRegistry;\\n    ILiquidityRegistry public liquidityRegistry;\\n    address public reinsurancePoolAddress;\\n    IPolicyQuote public policyQuote;\\n    address public policyBookAdmin;\\n    address public policyBookRegistry;\\n    address public policyBookFabricAddress;\\n\\n    uint256 public override totalLiquidity;\\n    uint256 public override totalCoverTokens;\\n\\n    mapping(address => WithdrawalInfo) public override withdrawalsInfo;\\n    mapping(address => PolicyHolder) public policyHolders;\\n    mapping(address => uint256) public liquidityFromLM;\\n    mapping(uint256 => uint256) public epochAmounts;\\n    mapping(uint256 => int256) public premiumDistributionDeltas;\\n\\n    uint256 public stblDecimals;\\n\\n    event LiquidityAdded(\\n        address _liquidityHolder,\\n        uint256 _liquidityAmount,\\n        uint256 _newTotalLiquidity\\n    );\\n    event WithdrawalRequested(\\n        address _liquidityHolder,\\n        uint256 _tokensToWithdraw,\\n        uint256 _readyToWithdrawDate\\n    );\\n    event LiquidityWithdrawn(\\n        address _liquidityHolder,\\n        uint256 _tokensToWithdraw,\\n        uint256 _newTotalLiquidity\\n    );\\n    event PolicyBought(\\n        address _policyHolder,\\n        uint256 _coverTokens,\\n        uint256 _price,\\n        uint256 _newTotalCoverTokens\\n    );\\n    event CoverageChanged(uint256 _newTotalCoverTokens);\\n\\n    modifier onlyClaimVoting() {\\n        require(_msgSender() == address(claimVoting), \\\"PB: Not a CV\\\");\\n        _;\\n    }\\n\\n    modifier onlyPolicyBookRegistry() {\\n        require(_msgSender() == policyBookRegistry, \\\"PB: Not a PBR\\\");\\n        _;\\n    }\\n\\n    modifier onlyPolicyBookAdmin() {\\n        require(_msgSender() == policyBookAdmin, \\\"PB: Not a PBA\\\");\\n        _;\\n    }\\n\\n    modifier onlyLiquidityAdders() {\\n        require(\\n            _msgSender() == address(liquidityMining) || _msgSender() == policyBookFabricAddress,\\n            \\\"PB: Not allowed\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier updateBMICoverStakingReward() {\\n        _;\\n        _updateBMICoverStakingReward();\\n    }\\n\\n    modifier withPremiumsDistribution() {\\n        _distributePremiums();\\n        _;\\n    }\\n\\n    function __PolicyBook_init(\\n        address _insuranceContract,\\n        IPolicyBookFabric.ContractType _contractType,\\n        string calldata _description,\\n        string calldata _projectSymbol\\n    ) external override initializer {\\n        string memory fullSymbol = string(abi.encodePacked(\\\"bmi\\\", _projectSymbol, \\\"Cover\\\"));\\n        __ERC20Permit_init(fullSymbol);\\n        __ERC20_init(_description, fullSymbol);\\n\\n        insuranceContractAddress = _insuranceContract;\\n        contractType = _contractType;\\n\\n        epochStartTime = block.timestamp;\\n        lastDistributionEpoch = 1;\\n\\n        lastPremiumDistributionEpoch = _getPremiumDistributionEpoch();\\n    }\\n\\n    function setDependencies(IContractsRegistry _contractsRegistry)\\n        external\\n        override\\n        onlyInjectorOrZero\\n    {\\n        priceFeed = IPriceFeed(_contractsRegistry.getPriceFeedContract());\\n        stblToken = ERC20(_contractsRegistry.getUSDTContract());\\n        bmiCoverStaking = IBMICoverStaking(_contractsRegistry.getBMICoverStakingContract());\\n        rewardsGenerator = IRewardsGenerator(_contractsRegistry.getRewardsGeneratorContract());\\n        liquidityMining = ILiquidityMining(_contractsRegistry.getLiquidityMiningContract());\\n        claimVoting = IClaimVoting(_contractsRegistry.getClaimVotingContract());\\n        policyRegistry = IPolicyRegistry(_contractsRegistry.getPolicyRegistryContract());\\n        reinsurancePoolAddress = _contractsRegistry.getReinsurancePoolContract();\\n        policyQuote = IPolicyQuote(_contractsRegistry.getPolicyQuoteContract());\\n        claimingRegistry = IClaimingRegistry(_contractsRegistry.getClaimingRegistryContract());\\n        liquidityRegistry = ILiquidityRegistry(_contractsRegistry.getLiquidityRegistryContract());\\n        policyBookAdmin = _contractsRegistry.getPolicyBookAdminContract();\\n        policyBookRegistry = _contractsRegistry.getPolicyBookRegistryContract();\\n        policyBookFabricAddress = _contractsRegistry.getPolicyBookFabricContract();\\n\\n        stblDecimals = stblToken.decimals();\\n    }\\n\\n    function whitelist(bool _whitelisted)\\n        external\\n        override\\n        onlyPolicyBookAdmin\\n        updateBMICoverStakingReward\\n    {\\n        whitelisted = _whitelisted;\\n    }\\n\\n    function getEpoch(uint256 time) public view override returns (uint256) {\\n        return time.sub(epochStartTime).div(EPOCH_DURATION) + 1;\\n    }\\n\\n    function _getPremiumDistributionEpoch() internal view returns (uint256) {\\n        return block.timestamp / PREMIUM_DISTRIBUTION_EPOCH;\\n    }\\n\\n    function _getSTBLToBMIXRatio(uint256 currentLiquidity) internal view returns (uint256) {\\n        uint256 _currentTotalSupply = totalSupply();\\n\\n        if (_currentTotalSupply == 0) {\\n            return PERCENTAGE_100;\\n        }\\n\\n        return currentLiquidity.mul(PERCENTAGE_100).div(_currentTotalSupply);\\n    }\\n\\n    function convertBMIXToSTBL(uint256 _amount) public view override returns (uint256) {\\n        (, uint256 currentLiquidity) = getNewCoverAndLiquidity();\\n\\n        return _amount.mul(_getSTBLToBMIXRatio(currentLiquidity)).div(PERCENTAGE_100);\\n    }\\n\\n    function convertSTBLToBMIX(uint256 _amount) public view override returns (uint256) {\\n        (, uint256 currentLiquidity) = getNewCoverAndLiquidity();\\n\\n        return _amount.mul(PERCENTAGE_100).div(_getSTBLToBMIXRatio(currentLiquidity));\\n    }\\n\\n    // TODO possible sandwich attack or allowance fluctuation\\n    function getClaimApprovalAmount(address user) external view override returns (uint256) {\\n        return\\n            priceFeed.howManyBMIsInUSDT(\\n                DecimalsConverter.convertFrom18(\\n                    policyHolders[user].coverTokens.div(100),\\n                    stblDecimals\\n                )\\n            );\\n    }\\n\\n    function _submitClaimAndInitializeVoting(string memory evidenceURI, bool appeal) internal {\\n        uint256 cover = policyHolders[_msgSender()].coverTokens;\\n        uint256 virtualEndEpochNumber =\\n            policyHolders[_msgSender()].endEpochNumber + VIRTUAL_EPOCHS;\\n\\n        /// @dev \\\"lock\\\" claim and appeal tokens\\n        if (!appeal) {\\n            epochAmounts[virtualEndEpochNumber] = epochAmounts[virtualEndEpochNumber].sub(cover);\\n        } else {\\n            uint256 claimIndex = claimingRegistry.claimIndex(_msgSender(), address(this));\\n            uint256 endLockEpoch =\\n                Math.max(\\n                    getEpoch(claimingRegistry.claimEndTime(claimIndex)) + 1,\\n                    virtualEndEpochNumber\\n                );\\n\\n            epochAmounts[endLockEpoch] = epochAmounts[endLockEpoch].sub(cover);\\n        }\\n\\n        /// @dev if appeal period expired, this would fail in case of appeal (no button is displayed on FE)\\n        claimVoting.initializeVoting(\\n            _msgSender(),\\n            address(this),\\n            evidenceURI,\\n            cover,\\n            policyHolders[_msgSender()].paid.mul(PROTOCOL_PERCENTAGE).div(PERCENTAGE_100),\\n            appeal\\n        );\\n    }\\n\\n    function submitClaimAndInitializeVoting(string calldata evidenceURI) external override {\\n        _submitClaimAndInitializeVoting(evidenceURI, false);\\n    }\\n\\n    function submitAppealAndInitializeVoting(string calldata evidenceURI) external override {\\n        _submitClaimAndInitializeVoting(evidenceURI, true);\\n    }\\n\\n    function commitClaim(\\n        address claimer,\\n        uint256 claimAmount,\\n        uint256 claimEndTime,\\n        IClaimingRegistry.ClaimStatus status\\n    ) external override onlyClaimVoting withPremiumsDistribution updateBMICoverStakingReward {\\n        updateEpochsInfo();\\n\\n        if (status == IClaimingRegistry.ClaimStatus.ACCEPTED) {\\n            uint256 newTotalCover = totalCoverTokens.sub(claimAmount);\\n\\n            totalCoverTokens = newTotalCover;\\n            totalLiquidity = totalLiquidity.sub(claimAmount);\\n\\n            stblToken.safeTransfer(\\n                claimer,\\n                DecimalsConverter.convertFrom18(claimAmount, stblDecimals)\\n            );\\n\\n            emit CoverageChanged(newTotalCover);\\n\\n            delete policyHolders[claimer];\\n            policyRegistry.removePolicy(claimer);\\n        } else if (status == IClaimingRegistry.ClaimStatus.REJECTED_CAN_APPEAL) {\\n            uint256 endUnlockEpoch =\\n                Math.max(\\n                    getEpoch(claimEndTime) + 1,\\n                    policyHolders[claimer].endEpochNumber + VIRTUAL_EPOCHS\\n                );\\n\\n            epochAmounts[endUnlockEpoch] = epochAmounts[endUnlockEpoch].add(\\n                policyHolders[claimer].coverTokens\\n            );\\n        } else {\\n            uint256 virtualEndEpochNumber =\\n                policyHolders[claimer].endEpochNumber.add(VIRTUAL_EPOCHS);\\n\\n            if (lastDistributionEpoch <= virtualEndEpochNumber) {\\n                epochAmounts[virtualEndEpochNumber] = epochAmounts[virtualEndEpochNumber].add(\\n                    policyHolders[claimer].coverTokens\\n                );\\n            } else {\\n                uint256 newTotalCover = totalCoverTokens.sub(claimAmount);\\n                totalCoverTokens = newTotalCover;\\n\\n                emit CoverageChanged(newTotalCover);\\n            }\\n        }\\n    }\\n\\n    function _getPremiumsDistribution(uint256 lastEpoch, uint256 currentEpoch)\\n        internal\\n        view\\n        returns (\\n            int256 currentDistribution,\\n            uint256 distributionEpoch,\\n            uint256 newTotalLiquidity\\n        )\\n    {\\n        currentDistribution = lastPremiumDistributionAmount;\\n        newTotalLiquidity = totalLiquidity;\\n        distributionEpoch = Math.min(\\n            currentEpoch,\\n            lastEpoch + MAX_PREMIUM_DISTRIBUTION_EPOCHS + 1\\n        );\\n\\n        for (uint256 i = lastEpoch + 1; i <= distributionEpoch; i++) {\\n            currentDistribution += premiumDistributionDeltas[i];\\n            newTotalLiquidity = newTotalLiquidity.add(uint256(currentDistribution));\\n        }\\n    }\\n\\n    function _distributePremiums() internal {\\n        uint256 lastEpoch = lastPremiumDistributionEpoch;\\n        uint256 currentEpoch = _getPremiumDistributionEpoch();\\n\\n        if (currentEpoch > lastEpoch) {\\n            (\\n                lastPremiumDistributionAmount,\\n                lastPremiumDistributionEpoch,\\n                totalLiquidity\\n            ) = _getPremiumsDistribution(lastEpoch, currentEpoch);\\n        }\\n    }\\n\\n    function _updateBMICoverStakingReward() internal {\\n        uint256 rewardMultiplier;\\n\\n        if (whitelisted) {\\n            rewardMultiplier = MINIMUM_REWARD;\\n            uint256 liquidity = totalLiquidity;\\n            uint256 coverTokens = totalCoverTokens;\\n\\n            if (coverTokens > 0 && liquidity > 0) {\\n                rewardMultiplier = BASE_REWARD;\\n\\n                uint256 utilizationRatio = coverTokens.mul(PERCENTAGE_100).div(liquidity);\\n\\n                if (utilizationRatio < MODERATE_UTILIZATION_RATIO) {\\n                    rewardMultiplier = Math\\n                        .max(utilizationRatio, PRECISION)\\n                        .sub(PRECISION)\\n                        .mul(BASE_REWARD.sub(MINIMUM_REWARD))\\n                        .div(MODERATE_UTILIZATION_RATIO)\\n                        .add(MINIMUM_REWARD);\\n                } else if (utilizationRatio > RISKY_UTILIZATION_RATIO) {\\n                    rewardMultiplier = MAXIMUM_REWARD\\n                        .sub(BASE_REWARD)\\n                        .mul(utilizationRatio.sub(RISKY_UTILIZATION_RATIO))\\n                        .div(PERCENTAGE_100.sub(RISKY_UTILIZATION_RATIO))\\n                        .add(BASE_REWARD);\\n                }\\n            }\\n        }\\n\\n        rewardsGenerator.updatePolicyBookShare(rewardMultiplier.div(10**22)); // 5 decimal places or zero\\n    }\\n\\n    function getNewCoverAndLiquidity()\\n        public\\n        view\\n        override\\n        returns (uint256 newTotalCoverTokens, uint256 newTotalLiquidity)\\n    {\\n        newTotalLiquidity = totalLiquidity;\\n        newTotalCoverTokens = totalCoverTokens;\\n\\n        uint256 lastEpoch = lastPremiumDistributionEpoch;\\n        uint256 currentEpoch = _getPremiumDistributionEpoch();\\n\\n        if (currentEpoch > lastEpoch) {\\n            (, , newTotalLiquidity) = _getPremiumsDistribution(lastEpoch, currentEpoch);\\n        }\\n\\n        uint256 newDistributionEpoch = Math.min(getEpoch(block.timestamp), MAXIMUM_EPOCHS);\\n\\n        for (uint256 i = lastDistributionEpoch; i < newDistributionEpoch; i++) {\\n            newTotalCoverTokens = newTotalCoverTokens.sub(epochAmounts[i]);\\n        }\\n    }\\n\\n    function getPolicyPrice(uint256 _epochsNumber, uint256 _coverTokens)\\n        public\\n        view\\n        override\\n        returns (uint256 totalSeconds, uint256 totalPrice)\\n    {\\n        require(_coverTokens >= MINUMUM_COVERAGE, \\\"PB: Wrong cover\\\");\\n        require(_epochsNumber > 0 && _epochsNumber <= MAXIMUM_EPOCHS, \\\"PB: Wrong epoch duration\\\");\\n\\n        (uint256 newTotalCoverTokens, uint256 newTotalLiquidity) = getNewCoverAndLiquidity();\\n\\n        totalSeconds = secondsToEndCurrentEpoch().add(_epochsNumber.sub(1).mul(EPOCH_DURATION));\\n        totalPrice = policyQuote.getQuotePredefined(\\n            totalSeconds,\\n            _coverTokens,\\n            newTotalCoverTokens,\\n            newTotalLiquidity,\\n            whitelisted\\n        );\\n    }\\n\\n    function buyPolicyFor(\\n        address _buyer,\\n        uint256 _epochsNumber,\\n        uint256 _coverTokens\\n    ) external override onlyPolicyBookRegistry {\\n        _buyPolicy(_buyer, _epochsNumber, _coverTokens);\\n    }\\n\\n    function buyPolicy(uint256 _epochsNumber, uint256 _coverTokens) external override {\\n        _buyPolicy(_msgSender(), _epochsNumber, _coverTokens);\\n    }\\n\\n    function _buyPolicy(\\n        address _buyer,\\n        uint256 _epochsNumber,\\n        uint256 _coverTokens\\n    ) internal withPremiumsDistribution updateBMICoverStakingReward {\\n        require(\\n            !policyRegistry.isPolicyActive(_buyer, address(this)),\\n            \\\"PB: The holder already exists\\\"\\n        );\\n        require(claimingRegistry.canBuyNewPolicy(_buyer, address(this)), \\\"PB: Claim is pending\\\");\\n\\n        updateEpochsInfo();\\n\\n        uint256 _totalCoverTokens = totalCoverTokens.add(_coverTokens);\\n\\n        require(totalLiquidity >= _totalCoverTokens, \\\"PB: Not enough liquidity\\\");\\n\\n        (uint256 _totalSeconds, uint256 _totalPrice) = getPolicyPrice(_epochsNumber, _coverTokens);\\n\\n        uint256 _reinsurancePrice = _totalPrice.mul(PROTOCOL_PERCENTAGE).div(PERCENTAGE_100);\\n        uint256 _price = _totalPrice.sub(_reinsurancePrice);\\n\\n        uint256 _currentEpochNumber = getEpoch(block.timestamp);\\n        uint256 _endEpochNumber = _currentEpochNumber.add(_epochsNumber.sub(1));\\n        uint256 _virtualEndEpochNumber = _endEpochNumber + VIRTUAL_EPOCHS;\\n\\n        policyHolders[_buyer] = PolicyHolder(\\n            _coverTokens,\\n            _currentEpochNumber,\\n            _endEpochNumber,\\n            _totalPrice\\n        );\\n\\n        epochAmounts[_virtualEndEpochNumber] = epochAmounts[_virtualEndEpochNumber].add(\\n            _coverTokens\\n        );\\n\\n        totalCoverTokens = _totalCoverTokens;\\n\\n        uint256 _stblDecimals = stblDecimals;\\n\\n        stblToken.safeTransferFrom(\\n            _buyer,\\n            reinsurancePoolAddress,\\n            DecimalsConverter.convertFrom18(_reinsurancePrice, _stblDecimals)\\n        );\\n        stblToken.safeTransferFrom(\\n            _buyer,\\n            address(this),\\n            DecimalsConverter.convertFrom18(_price, _stblDecimals)\\n        );\\n\\n        _addPolicyPremiumToDistributions(\\n            _totalSeconds.add(VIRTUAL_EPOCHS * EPOCH_DURATION),\\n            _price\\n        );\\n\\n        emit PolicyBought(_buyer, _coverTokens, _totalPrice, _totalCoverTokens);\\n\\n        policyRegistry.addPolicy(_buyer, _coverTokens, _price, _totalSeconds);\\n    }\\n\\n    /// @dev no need to cap epochs because the maximum policy duration is 1 year\\n    function _addPolicyPremiumToDistributions(uint256 _totalSeconds, uint256 _distributedAmount)\\n        internal\\n    {\\n        uint256 distributionEpochs = _totalSeconds.add(1).div(PREMIUM_DISTRIBUTION_EPOCH).max(1);\\n\\n        int256 distributedPerEpoch = int256(_distributedAmount.div(distributionEpochs));\\n        uint256 nextEpoch = _getPremiumDistributionEpoch() + 1;\\n\\n        premiumDistributionDeltas[nextEpoch] += distributedPerEpoch;\\n        premiumDistributionDeltas[nextEpoch + distributionEpochs] -= distributedPerEpoch;\\n    }\\n\\n    function updateEpochsInfo() public override {\\n        uint256 _lastDistributionEpoch = lastDistributionEpoch;\\n        uint256 _newDistributionEpoch =\\n            Math.min(getEpoch(block.timestamp), _lastDistributionEpoch + MAXIMUM_EPOCHS);\\n\\n        if (_lastDistributionEpoch < _newDistributionEpoch) {\\n            uint256 _newTotalCoverTokens = totalCoverTokens;\\n\\n            for (uint256 i = _lastDistributionEpoch; i < _newDistributionEpoch; i++) {\\n                _newTotalCoverTokens = _newTotalCoverTokens.sub(epochAmounts[i]);\\n                delete epochAmounts[i];\\n            }\\n\\n            lastDistributionEpoch = _newDistributionEpoch;\\n            totalCoverTokens = _newTotalCoverTokens;\\n\\n            emit CoverageChanged(_newTotalCoverTokens);\\n        }\\n    }\\n\\n    function secondsToEndCurrentEpoch() public view override returns (uint256) {\\n        uint256 epochNumber = block.timestamp.sub(epochStartTime).div(EPOCH_DURATION) + 1;\\n\\n        return epochNumber.mul(EPOCH_DURATION).sub(block.timestamp.sub(epochStartTime));\\n    }\\n\\n    function addLiquidity(uint256 _liquidityAmount) external override {\\n        _addLiquidity(_msgSender(), _liquidityAmount);\\n    }\\n\\n    function addLiquidityFor(address _liquidityHolderAddr, uint256 _liquidityAmount)\\n        external\\n        override\\n        onlyLiquidityAdders\\n    {\\n        _addLiquidity(_liquidityHolderAddr, _liquidityAmount);\\n    }\\n\\n    function addLiquidityAndStake(uint256 _liquidityAmount, uint256 _stakeSTBLAmount)\\n        external\\n        override\\n    {\\n        require(_stakeSTBLAmount <= _liquidityAmount, \\\"PB: Wrong staking amount\\\");\\n\\n        _addLiquidity(_msgSender(), _liquidityAmount);\\n        bmiCoverStaking.stakeBMIXFrom(_msgSender(), convertSTBLToBMIX(_stakeSTBLAmount));\\n    }\\n\\n    function _addLiquidity(address _liquidityHolderAddr, uint256 _liquidityAmount)\\n        internal\\n        withPremiumsDistribution\\n        updateBMICoverStakingReward\\n    {\\n        uint256 stblLiquidity = DecimalsConverter.convertFrom18(_liquidityAmount, stblDecimals);\\n        require(stblLiquidity > 0, \\\"PB: Liquidity amount is zero\\\");\\n\\n        updateEpochsInfo();\\n\\n        /// @dev PBF already sent stable tokens\\n        if (_msgSender() != policyBookFabricAddress) {\\n            stblToken.safeTransferFrom(_liquidityHolderAddr, address(this), stblLiquidity);\\n        }\\n\\n        /// @dev have to add to LM liquidity\\n        if (_msgSender() == address(liquidityMining)) {\\n            liquidityFromLM[_liquidityHolderAddr] = liquidityFromLM[_liquidityHolderAddr].add(\\n                _liquidityAmount\\n            );\\n        }\\n\\n        _mint(_liquidityHolderAddr, convertSTBLToBMIX(_liquidityAmount));\\n        uint256 liquidity = totalLiquidity.add(_liquidityAmount);\\n        totalLiquidity = liquidity;\\n\\n        liquidityRegistry.tryToAddPolicyBook(_liquidityHolderAddr, address(this));\\n\\n        emit LiquidityAdded(_liquidityHolderAddr, _liquidityAmount, liquidity);\\n    }\\n\\n    function getAvailableBMIXWithdrawableAmount(address _userAddr)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        (uint256 newTotalCoverTokens, uint256 newTotalLiquidity) = getNewCoverAndLiquidity();\\n\\n        return\\n            convertSTBLToBMIX(\\n                Math.min(\\n                    newTotalLiquidity.sub(newTotalCoverTokens),\\n                    _getUserAvailableSTBL(_userAddr)\\n                )\\n            );\\n    }\\n\\n    function _getUserAvailableSTBL(address _userAddr) internal view returns (uint256) {\\n        uint256 availableSTBL =\\n            convertBMIXToSTBL(\\n                balanceOf(_userAddr).add(withdrawalsInfo[_userAddr].withdrawalAmount)\\n            );\\n\\n        if (block.timestamp < liquidityMining.getEndLMTime()) {\\n            uint256 lmLiquidity = liquidityFromLM[_userAddr];\\n\\n            availableSTBL = availableSTBL <= lmLiquidity ? 0 : availableSTBL - lmLiquidity;\\n        }\\n\\n        return availableSTBL;\\n    }\\n\\n    function getWithdrawalStatus(address _userAddr)\\n        public\\n        view\\n        override\\n        returns (WithdrawalStatus)\\n    {\\n        uint256 readyToWithdrawDate = withdrawalsInfo[_userAddr].readyToWithdrawDate;\\n\\n        if (readyToWithdrawDate == 0) {\\n            return WithdrawalStatus.NONE;\\n        }\\n\\n        if (block.timestamp < readyToWithdrawDate) {\\n            return WithdrawalStatus.PENDING;\\n        }\\n\\n        if (\\n            block.timestamp >= readyToWithdrawDate.add(READY_TO_WITHDRAW_PERIOD) &&\\n            !withdrawalsInfo[_userAddr].withdrawalAllowed\\n        ) {\\n            return WithdrawalStatus.EXPIRED;\\n        }\\n\\n        return WithdrawalStatus.READY;\\n    }\\n\\n    function requestWithdrawalWithPermit(\\n        uint256 _tokensToWithdraw,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external override {\\n        permit(_msgSender(), address(this), _tokensToWithdraw, MAX_INT, _v, _r, _s);\\n\\n        requestWithdrawal(_tokensToWithdraw);\\n    }\\n\\n    function requestWithdrawal(uint256 _tokensToWithdraw)\\n        public\\n        override\\n        withPremiumsDistribution\\n    {\\n        require(_tokensToWithdraw > 0, \\\"PB: Amount is zero\\\");\\n\\n        uint256 _stblTokensToWithdraw = convertBMIXToSTBL(_tokensToWithdraw);\\n        uint256 _availableSTBLBalance = _getUserAvailableSTBL(_msgSender());\\n\\n        require(_availableSTBLBalance >= _stblTokensToWithdraw, \\\"PB: Wrong announced amount\\\");\\n\\n        updateEpochsInfo();\\n\\n        require(\\n            totalLiquidity >= totalCoverTokens.add(_stblTokensToWithdraw),\\n            \\\"PB: Not enough free liquidity\\\"\\n        );\\n\\n        _lockTokens(_msgSender(), _tokensToWithdraw);\\n\\n        uint256 _readyToWithdrawDate = block.timestamp.add(WITHDRAWAL_PERIOD);\\n\\n        withdrawalsInfo[_msgSender()] = WithdrawalInfo(\\n            _tokensToWithdraw,\\n            _readyToWithdrawDate,\\n            false\\n        );\\n\\n        emit WithdrawalRequested(_msgSender(), _tokensToWithdraw, _readyToWithdrawDate);\\n    }\\n\\n    function _lockTokens(address _userAddr, uint256 _neededTokensToLock) internal {\\n        uint256 _currentLockedTokens = withdrawalsInfo[_userAddr].withdrawalAmount;\\n\\n        if (_currentLockedTokens > _neededTokensToLock) {\\n            this.transfer(_userAddr, _currentLockedTokens - _neededTokensToLock);\\n        } else if (_currentLockedTokens < _neededTokensToLock) {\\n            this.transferFrom(\\n                _userAddr,\\n                address(this),\\n                _neededTokensToLock - _currentLockedTokens\\n            );\\n        }\\n    }\\n\\n    function unlockTokens() external override {\\n        uint256 _lockedAmount = withdrawalsInfo[_msgSender()].withdrawalAmount;\\n\\n        require(_lockedAmount > 0, \\\"PB: Amount is zero\\\");\\n\\n        this.transfer(_msgSender(), _lockedAmount);\\n        delete withdrawalsInfo[_msgSender()];\\n    }\\n\\n    function withdrawLiquidity()\\n        external\\n        override\\n        withPremiumsDistribution\\n        updateBMICoverStakingReward\\n    {\\n        require(\\n            getWithdrawalStatus(_msgSender()) == WithdrawalStatus.READY,\\n            \\\"PB: Withdrawal is not ready\\\"\\n        );\\n\\n        updateEpochsInfo();\\n\\n        uint256 liquidity = totalLiquidity;\\n        uint256 _currentWithdrawalAmount = withdrawalsInfo[_msgSender()].withdrawalAmount;\\n        uint256 _tokensToWithdraw =\\n            Math.min(_currentWithdrawalAmount, convertSTBLToBMIX(liquidity.sub(totalCoverTokens)));\\n\\n        uint256 _stblTokensToWithdraw = convertBMIXToSTBL(_tokensToWithdraw);\\n        stblToken.safeTransfer(\\n            _msgSender(),\\n            DecimalsConverter.convertFrom18(_stblTokensToWithdraw, stblDecimals)\\n        );\\n\\n        _burn(address(this), _tokensToWithdraw);\\n        liquidity = liquidity.sub(_stblTokensToWithdraw);\\n\\n        _currentWithdrawalAmount = _currentWithdrawalAmount.sub(_tokensToWithdraw);\\n\\n        if (_currentWithdrawalAmount == 0) {\\n            delete withdrawalsInfo[_msgSender()];\\n            liquidityRegistry.tryToRemovePolicyBook(_msgSender(), address(this));\\n        } else {\\n            withdrawalsInfo[_msgSender()].withdrawalAllowed = true;\\n            withdrawalsInfo[_msgSender()].withdrawalAmount = _currentWithdrawalAmount;\\n        }\\n\\n        totalLiquidity = liquidity;\\n\\n        emit LiquidityWithdrawn(_msgSender(), _stblTokensToWithdraw, liquidity);\\n    }\\n\\n    /// @notice returns APY% with 10**5 precision\\n    function getAPY() public view override returns (uint256) {\\n        uint256 lastEpoch = lastPremiumDistributionEpoch;\\n        uint256 currentEpoch = _getPremiumDistributionEpoch();\\n        int256 premiumDistributionAmount = lastPremiumDistributionAmount;\\n\\n        // sumilates addLiquidity()\\n        if (currentEpoch > lastEpoch) {\\n            (premiumDistributionAmount, currentEpoch, ) = _getPremiumsDistribution(\\n                lastEpoch,\\n                currentEpoch\\n            );\\n        }\\n\\n        premiumDistributionAmount += premiumDistributionDeltas[currentEpoch + 1];\\n\\n        return\\n            uint256(premiumDistributionAmount).mul(365).mul(10**7).div(\\n                totalSupply().add(convertSTBLToBMIX(APY_TOKENS))\\n            );\\n    }\\n\\n    function userStats(address _user) external view override returns (PolicyHolder memory) {\\n        return policyHolders[_user];\\n    }\\n\\n    /// @notice _annualProfitYields is multiplied by 10**5\\n    /// @notice _annualInsuranceCost is calculated for 1000 STBL cover (or _maxCapacities if it is less)\\n    /// @notice _bmiXRatio is multiplied by 10**18. To get STBL representation,\\n    ///     multiply BMIX tokens by this value and then divide by 10**18\\n    function numberStats()\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 _maxCapacities,\\n            uint256 _totalSTBLLiquidity,\\n            uint256 _stakedSTBL,\\n            uint256 _annualProfitYields,\\n            uint256 _annualInsuranceCost,\\n            uint256 _bmiXRatio\\n        )\\n    {\\n        uint256 newTotalCoverTokens;\\n\\n        (newTotalCoverTokens, _totalSTBLLiquidity) = getNewCoverAndLiquidity();\\n        _maxCapacities = _totalSTBLLiquidity - newTotalCoverTokens;\\n\\n        _stakedSTBL = rewardsGenerator.getStakedPolicyBookSTBL(address(this));\\n        _annualProfitYields = getAPY().add(bmiCoverStaking.getPolicyBookAPY(address(this)));\\n\\n        uint256 possibleCoverage = Math.min(ANNUAL_COVERAGE_TOKENS, _maxCapacities);\\n\\n        if (possibleCoverage > 0) {\\n            _annualInsuranceCost = policyQuote.getQuotePredefined(\\n                SECONDS_IN_THE_YEAR,\\n                possibleCoverage,\\n                newTotalCoverTokens,\\n                _totalSTBLLiquidity,\\n                whitelisted\\n            );\\n\\n            _annualInsuranceCost = _annualInsuranceCost\\n                .mul(ANNUAL_COVERAGE_TOKENS.mul(PRECISION).div(possibleCoverage))\\n                .div(PRECISION)\\n                .div(10);\\n        }\\n\\n        _bmiXRatio = convertBMIXToSTBL(10**18);\\n    }\\n\\n    function info()\\n        external\\n        view\\n        override\\n        returns (\\n            string memory _symbol,\\n            address _insuredContract,\\n            IPolicyBookFabric.ContractType _contractType,\\n            bool _whitelisted\\n        )\\n    {\\n        return (symbol(), insuranceContractAddress, contractType, whitelisted);\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/artem/Projects/Distributed_Lab/Applicature/bridgemutual-core/contracts/abstract/AbstractDependant.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\nimport \\\"../interfaces/IContractsRegistry.sol\\\";\\n\\nabstract contract AbstractDependant {\\n    /// @dev keccak256(AbstractDependant.setInjector(address)) - 1\\n    bytes32 private constant _INJECTOR_SLOT =\\n        0xd6b8f2e074594ceb05d47c27386969754b6ad0c15e5eb8f691399cd0be980e76;\\n\\n    modifier onlyInjectorOrZero() {\\n        address _injector = injector();\\n\\n        require(_injector == address(0) || _injector == msg.sender, \\\"Dependant: Not an injector\\\");\\n        _;\\n    }\\n\\n    function setInjector(address _injector) external onlyInjectorOrZero {\\n        bytes32 slot = _INJECTOR_SLOT;\\n\\n        assembly {\\n            sstore(slot, _injector)\\n        }\\n    }\\n\\n    /// @dev has to apply onlyInjectorOrZero() modifier\\n    function setDependencies(IContractsRegistry) external virtual;\\n\\n    function injector() public view returns (address _injector) {\\n        bytes32 slot = _INJECTOR_SLOT;\\n\\n        assembly {\\n            _injector := sload(slot)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/artem/Projects/Distributed_Lab/Applicature/bridgemutual-core/contracts/interfaces/IBMICoverStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IBMICoverStaking {\\n    struct StakingInfo {\\n        address policyBookAddress;\\n        uint256 stakedBMIXAmount;\\n    }\\n\\n    struct PolicyBookInfo {\\n        uint256 totalStakedSTBL;\\n        uint256 rewardPerBlock;\\n        uint256 stakingAPY;\\n        uint256 liquidityAPY;\\n    }\\n\\n    struct UserInfo {\\n        uint256 totalStakedBMIX;\\n        uint256 totalStakedSTBL;\\n        uint256 totalBmiReward;\\n    }\\n\\n    struct NFTsInfo {\\n        uint256 nftIndex;\\n        string uri;\\n        uint256 stakedBMIXAmount;\\n        uint256 stakedSTBLAmount;\\n        uint256 reward;\\n    }\\n\\n    function aggregateNFTs(address policyBookAddress, uint256[] calldata tokenIds) external;\\n\\n    function stakeBMIX(uint256 amount, address policyBookAddress) external;\\n\\n    function stakeBMIXWithPermit(\\n        uint256 bmiXAmount,\\n        address policyBookAddress,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function stakeBMIXFrom(address user, uint256 amount) external;\\n\\n    function stakeBMIXFromWithPermit(\\n        address user,\\n        uint256 bmiXAmount,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function getPolicyBookAPY(address policyBookAddress) external view returns (uint256);\\n\\n    function restakeBMIProfit(uint256 tokenId) external;\\n\\n    function restakeStakerBMIProfit(address policyBookAddress) external;\\n\\n    function withdrawBMIProfit(uint256 tokenID) external;\\n\\n    function withdrawStakerBMIProfit(address policyBookAddress) external;\\n\\n    function withdrawFundsWithProfit(uint256 tokenID) external;\\n\\n    function withdrawStakerFundsWithProfit(address policyBookAddress) external;\\n\\n    function stakingInfoByToken(uint256 tokenID) external view returns (StakingInfo memory);\\n\\n    /// @notice exhaustive information about staker's stakes\\n    /// @param staker is a user to return information for\\n    /// @param policyBooksAddresses is an array of PolicyBooks to check the stakes in\\n    /// @param offset is a starting ordinal number of user's NFT\\n    /// @param limit is a number of NFTs to check per function's call\\n    /// @return policyBooksInfo - an array of infos (totalStakedSTBL, rewardPerBlock (in BMI), stakingAPY, liquidityAPY)\\n    /// @return usersInfo - an array of user's info per PolicyBook (totalStakedBMIX, totalStakedSTBL, totalBmiReward)\\n    /// @return nftsCount - number of NFTs for each respective PolicyBook\\n    /// @return nftsInfo - 2 dimensional array of NFTs info per each PolicyBook\\n    ///     (nftIndex, uri, stakedBMIXAmount, stakedSTBLAmount, reward (in BMI))\\n    function stakingInfoByStaker(\\n        address staker,\\n        address[] calldata policyBooksAddresses,\\n        uint256 offset,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            PolicyBookInfo[] memory policyBooksInfo,\\n            UserInfo[] memory usersInfo,\\n            uint256[] memory nftsCount,\\n            NFTsInfo[][] memory nftsInfo\\n        );\\n\\n    function getSlashedBMIProfit(uint256 tokenId) external view returns (uint256);\\n\\n    function getBMIProfit(uint256 tokenId) external view returns (uint256);\\n\\n    function getSlashedStakerBMIProfit(\\n        address staker,\\n        address policyBookAddress,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (uint256 totalProfit);\\n\\n    function getStakerBMIProfit(\\n        address staker,\\n        address policyBookAddress,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (uint256 totalProfit);\\n\\n    function totalStaked(address user) external view returns (uint256);\\n\\n    function totalStakedSTBL(address user) external view returns (uint256);\\n\\n    function stakedByNFT(uint256 tokenId) external view returns (uint256);\\n\\n    function stakedSTBLByNFT(uint256 tokenId) external view returns (uint256);\\n\\n    function policyBookByNFT(uint256 tokenId) external view returns (address);\\n\\n    function balanceOf(address user) external view returns (uint256);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    function tokenOfOwnerByIndex(address user, uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/home/artem/Projects/Distributed_Lab/Applicature/bridgemutual-core/contracts/interfaces/IClaimVoting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IClaimingRegistry.sol\\\";\\n\\ninterface IClaimVoting {\\n    enum VoteStatus {\\n        ANONYMOUS_PENDING,\\n        AWAITING_EXPOSURE,\\n        EXPIRED,\\n        EXPOSED_PENDING,\\n        AWAITING_CALCULATION,\\n        MINORITY,\\n        MAJORITY\\n    }\\n\\n    struct VotingResult {\\n        uint256 withdrawalAmount;\\n        uint256 lockedBMIAmount;\\n        uint256 reinsuranceTokensAmount;\\n        uint256 votedAverageWithdrawalAmount;\\n        uint256 votedYesStakedBMIAmountWithReputation;\\n        uint256 votedNoStakedBMIAmountWithReputation;\\n        uint256 allVotedStakedBMIAmount;\\n        uint256 votedYesPercentage;\\n    }\\n\\n    struct VotingInst {\\n        uint256 claimIndex;\\n        bytes32 finalHash;\\n        string encryptedVote;\\n        address voter;\\n        uint256 voterReputation;\\n        uint256 suggestedAmount;\\n        uint256 stakedBMIAmount;\\n        bool accept;\\n        VoteStatus status;\\n    }\\n\\n    struct MyClaimInfo {\\n        uint256 index;\\n        address policyBookAddress;\\n        string evidenceURI;\\n        bool appeal;\\n        uint256 claimAmount;\\n        IClaimingRegistry.ClaimStatus finalVerdict;\\n        uint256 finalClaimAmount;\\n        uint256 bmiCalculationReward;\\n    }\\n\\n    struct PublicClaimInfo {\\n        uint256 claimIndex;\\n        address claimer;\\n        address policyBookAddress;\\n        string evidenceURI;\\n        bool appeal;\\n        uint256 claimAmount;\\n        uint256 time;\\n    }\\n\\n    struct AllClaimInfo {\\n        PublicClaimInfo publicClaimInfo;\\n        IClaimingRegistry.ClaimStatus finalVerdict;\\n        uint256 finalClaimAmount;\\n        uint256 bmiCalculationReward;\\n    }\\n\\n    struct MyVoteInfo {\\n        AllClaimInfo allClaimInfo;\\n        string encryptedVote;\\n        uint256 suggestedAmount;\\n        VoteStatus status;\\n        uint256 time;\\n    }\\n\\n    struct VotesUpdatesInfo {\\n        uint256 bmiReward;\\n        uint256 stblReward;\\n        int256 reputationChange;\\n        int256 stakeChange;\\n    }\\n\\n    /// @notice starts the voting process\\n    function initializeVoting(\\n        address claimer,\\n        address policyBookAddress,\\n        string calldata evidenceURI,\\n        uint256 coverTokens,\\n        uint256 reinsuranceTokensAmount,\\n        bool appeal\\n    ) external;\\n\\n    /// @notice returns true if the user has no PENDING votes\\n    function canWithdraw(address user) external view returns (bool);\\n\\n    /// @notice returns true if the user has no AWAITING_CALCULATION votes\\n    function canVote(address user) external view returns (bool);\\n\\n    /// @notice returns how many votes the user has\\n    function countVotes(address user) external view returns (uint256);\\n\\n    /// @notice returns status of the vote\\n    function voteStatus(uint256 index) external view returns (VoteStatus);\\n\\n    /// @notice returns a list of claims that are votable for msg.sender\\n    function whatCanIVoteFor(uint256 offset, uint256 limit)\\n        external\\n        returns (uint256 _claimsCount, PublicClaimInfo[] memory _votablesInfo);\\n\\n    /// @notice returns info list of ALL claims\\n    function allClaims(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (AllClaimInfo[] memory _allClaimsInfo);\\n\\n    /// @notice returns info list of claims of msg.sender\\n    function myClaims(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (MyClaimInfo[] memory _myClaimsInfo);\\n\\n    /// @notice returns info list of claims that are voted by msg.sender\\n    function myVotes(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (MyVoteInfo[] memory _myVotesInfo);\\n\\n    /// @notice returns an array of votes that can be calculated + update information\\n    function myVotesUpdates(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (\\n            uint256 _votesUpdatesCount,\\n            uint256[] memory _claimIndexes,\\n            VotesUpdatesInfo memory _myVotesUpdatesInfo\\n        );\\n\\n    /// @notice anonymously votes (result used later in exposeVote())\\n    /// @notice the claims have to be PENDING, the voter can vote only once for a specific claim\\n    /// @param claimIndexes are the indexes of the claims the voter is voting on\\n    ///     (each one is unique for each claim and appeal)\\n    /// @param finalHashes are the hashes produced by the encryption algorithm.\\n    ///     They will be verified onchain in expose function\\n    /// @param encryptedVotes are the AES encrypted values that represent the actual vote\\n    function anonymouslyVoteBatch(\\n        uint256[] calldata claimIndexes,\\n        bytes32[] calldata finalHashes,\\n        string[] calldata encryptedVotes\\n    ) external;\\n\\n    /// @notice exposes votes of anonymous votings\\n    /// @notice the vote has to be voted anonymously prior\\n    /// @param claimIndexes are the indexes of the claims to expose votes for\\n    /// @param suggestedClaimAmounts are the actual vote values.\\n    ///     They must match the decrypted values in anonymouslyVoteBatch function\\n    /// @param hashedSignaturesOfClaims are the validation data needed to construct proper finalHashes\\n    function exposeVoteBatch(\\n        uint256[] calldata claimIndexes,\\n        uint256[] calldata suggestedClaimAmounts,\\n        bytes32[] calldata hashedSignaturesOfClaims\\n    ) external;\\n\\n    /// @notice calculates results of votes\\n    function calculateVoterResultBatch(uint256[] calldata claimIndexes) external;\\n\\n    /// @notice calculates results of claims\\n    function calculateVotingResultBatch(uint256[] calldata claimIndexes) external;\\n}\\n\"\r\n    },\r\n    \"/home/artem/Projects/Distributed_Lab/Applicature/bridgemutual-core/contracts/interfaces/IClaimingRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IPolicyBookFabric.sol\\\";\\n\\ninterface IClaimingRegistry {\\n    enum ClaimStatus {\\n        CAN_CLAIM,\\n        UNCLAIMABLE,\\n        PENDING,\\n        AWAITING_CALCULATION,\\n        REJECTED_CAN_APPEAL,\\n        REJECTED,\\n        ACCEPTED\\n    }\\n\\n    struct ClaimInfo {\\n        address claimer;\\n        address policyBookAddress;\\n        string evidenceURI;\\n        uint256 dateSubmitted;\\n        uint256 dateEnded;\\n        bool appeal;\\n        ClaimStatus status;\\n        uint256 claimAmount;\\n    }\\n\\n    /// @notice returns anonymous voting duration\\n    function anonymousVotingDuration(uint256 index) external view returns (uint256);\\n\\n    /// @notice returns the whole voting duration\\n    function votingDuration(uint256 index) external view returns (uint256);\\n\\n    /// @notice returns how many time should pass before anyone could calculate a claim result\\n    function anyoneCanCalculateClaimResultAfter(uint256 index) external view returns (uint256);\\n\\n    /// @notice returns true if a user can buy new policy of specified PolicyBook\\n    function canBuyNewPolicy(address buyer, address policyBookAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @notice submits new PolicyBook claim for the user\\n    function submitClaim(\\n        address user,\\n        address policyBookAddress,\\n        string calldata evidenceURI,\\n        uint256 cover,\\n        bool appeal\\n    ) external returns (uint256);\\n\\n    /// @notice returns true if the claim with this index exists\\n    function claimExists(uint256 index) external view returns (bool);\\n\\n    /// @notice returns claim submition time\\n    function claimSubmittedTime(uint256 index) external view returns (uint256);\\n\\n    /// @notice returns claim end time or zero in case it is pending\\n    function claimEndTime(uint256 index) external view returns (uint256);\\n\\n    /// @notice returns true if the claim is anonymously votable\\n    function isClaimAnonymouslyVotable(uint256 index) external view returns (bool);\\n\\n    /// @notice returns true if the claim is exposably votable\\n    function isClaimExposablyVotable(uint256 index) external view returns (bool);\\n\\n    /// @notice returns true if claim is anonymously votable or exposably votable\\n    function isClaimVotable(uint256 index) external view returns (bool);\\n\\n    /// @notice returns true if a claim can be calculated by anyone\\n    function canClaimBeCalculatedByAnyone(uint256 index) external view returns (bool);\\n\\n    /// @notice returns true if this claim is pending or awaiting\\n    function isClaimPending(uint256 index) external view returns (bool);\\n\\n    /// @notice returns how many claims the holder has\\n    function countPolicyClaimerClaims(address user) external view returns (uint256);\\n\\n    /// @notice returns how many pending claims are there\\n    function countPendingClaims() external view returns (uint256);\\n\\n    /// @notice returns how many claims are there\\n    function countClaims() external view returns (uint256);\\n\\n    /// @notice returns a claim index of it's claimer and an ordinal number\\n    function claimOfOwnerIndexAt(address claimer, uint256 orderIndex)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice returns pending claim index by its ordinal index\\n    function pendingClaimIndexAt(uint256 orderIndex) external view returns (uint256);\\n\\n    /// @notice returns claim index by its ordinal index\\n    function claimIndexAt(uint256 orderIndex) external view returns (uint256);\\n\\n    /// @notice returns current active claim index by policybook and claimer\\n    function claimIndex(address claimer, address policyBookAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice returns true if the claim is appealed\\n    function isClaimAppeal(uint256 index) external view returns (bool);\\n\\n    /// @notice returns current status of a claim\\n    function policyStatus(address claimer, address policyBookAddress)\\n        external\\n        view\\n        returns (ClaimStatus);\\n\\n    /// @notice returns current status of a claim\\n    function claimStatus(uint256 index) external view returns (ClaimStatus);\\n\\n    /// @notice returns the claim owner (claimer)\\n    function claimOwner(uint256 index) external view returns (address);\\n\\n    /// @notice returns the claim PolicyBook\\n    function claimPolicyBook(uint256 index) external view returns (address);\\n\\n    /// @notice returns claim info by its index\\n    function claimInfo(uint256 index) external view returns (ClaimInfo memory _claimInfo);\\n\\n    /// @notice marks the user's claim as Accepted\\n    function acceptClaim(uint256 index) external;\\n\\n    /// @notice marks the user's claim as Rejected\\n    function rejectClaim(uint256 index) external;\\n}\\n\"\r\n    },\r\n    \"/home/artem/Projects/Distributed_Lab/Applicature/bridgemutual-core/contracts/interfaces/IContractsRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IContractsRegistry {\\n    function getUniswapRouterContract() external view returns (address);\\n\\n    function getUniswapBMIToETHPairContract() external view returns (address);\\n\\n    function getWETHContract() external view returns (address);\\n\\n    function getUSDTContract() external view returns (address);\\n\\n    function getBMIContract() external view returns (address);\\n\\n    function getPriceFeedContract() external view returns (address);\\n\\n    function getPolicyBookRegistryContract() external view returns (address);\\n\\n    function getPolicyBookFabricContract() external view returns (address);\\n\\n    function getBMICoverStakingContract() external view returns (address);\\n\\n    function getRewardsGeneratorContract() external view returns (address);\\n\\n    function getBMIUtilityNFTContract() external view returns (address);\\n\\n    function getLiquidityMiningContract() external view returns (address);\\n\\n    function getClaimingRegistryContract() external view returns (address);\\n\\n    function getPolicyRegistryContract() external view returns (address);\\n\\n    function getLiquidityRegistryContract() external view returns (address);\\n\\n    function getClaimVotingContract() external view returns (address);\\n\\n    function getReinsurancePoolContract() external view returns (address);\\n\\n    function getPolicyBookAdminContract() external view returns (address);\\n\\n    function getPolicyQuoteContract() external view returns (address);\\n\\n    function getLegacyBMIStakingContract() external view returns (address);\\n\\n    function getBMIStakingContract() external view returns (address);\\n\\n    function getSTKBMIContract() external view returns (address);\\n\\n    function getVBMIContract() external view returns (address);\\n\\n    function getLegacyLiquidityMiningStakingContract() external view returns (address);\\n\\n    function getLiquidityMiningStakingContract() external view returns (address);\\n\\n    function getReputationSystemContract() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"/home/artem/Projects/Distributed_Lab/Applicature/bridgemutual-core/contracts/interfaces/ILiquidityMining.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface ILiquidityMining {\\n    struct TeamDetails {\\n        string teamName;\\n        address referralLink;\\n        uint256 membersNumber;\\n        uint256 totalStakedAmount;\\n        uint256 totalReward;\\n    }\\n\\n    struct UserInfo {\\n        address userAddr;\\n        string teamName;\\n        uint256 stakedAmount;\\n        uint256 mainNFT; // 0 or NFT index if available\\n        uint256 platinumNFT; // 0 or NFT index if available\\n    }\\n\\n    struct UserRewardsInfo {\\n        string teamName;\\n        uint256 totalBMIReward; // total BMI reward\\n        uint256 availableBMIReward; // current claimable BMI reward\\n        uint256 incomingPeriods; // how many month are incoming\\n        uint256 timeToNextDistribution; // exact time left to next distribution\\n        uint256 claimedBMI; // actual number of claimed BMI\\n        uint256 mainNFTAvailability; // 0 or NFT index if available\\n        uint256 platinumNFTAvailability; // 0 or NFT index if available\\n        bool claimedNFTs; // true if user claimed NFTs\\n    }\\n\\n    struct MyTeamInfo {\\n        TeamDetails teamDetails;\\n        uint256 myStakedAmount;\\n        uint256 teamPlace;\\n    }\\n\\n    struct UserTeamInfo {\\n        address teamAddr;\\n        uint256 stakedAmount;\\n        uint256 countOfRewardedMonth;\\n        bool isNFTDistributed;\\n    }\\n\\n    struct TeamInfo {\\n        string name;\\n        uint256 totalAmount;\\n        address[] teamLeaders;\\n    }\\n\\n    function startLiquidityMiningTime() external view returns (uint256);\\n\\n    function getTopTeams() external view returns (TeamDetails[] memory teams);\\n\\n    function getTopUsers() external view returns (UserInfo[] memory users);\\n\\n    function getAllTeamsLength() external view returns (uint256);\\n\\n    function getAllTeamsDetails(uint256 _offset, uint256 _limit)\\n        external\\n        view\\n        returns (TeamDetails[] memory _teamDetailsArr);\\n\\n    function getMyTeamsLength() external view returns (uint256);\\n\\n    function getMyTeamMembers(uint256 _offset, uint256 _limit)\\n        external\\n        view\\n        returns (address[] memory _teamMembers, uint256[] memory _memberStakedAmount);\\n\\n    function getAllUsersLength() external view returns (uint256);\\n\\n    function getAllUsersInfo(uint256 _offset, uint256 _limit)\\n        external\\n        view\\n        returns (UserInfo[] memory _userInfos);\\n\\n    function getMyTeamInfo() external view returns (MyTeamInfo memory _myTeamInfo);\\n\\n    function getRewardsInfo(address user)\\n        external\\n        view\\n        returns (UserRewardsInfo memory userRewardInfo);\\n\\n    function createTeam(string calldata _teamName) external;\\n\\n    function deleteTeam() external;\\n\\n    function joinTheTeam(address _referralLink) external;\\n\\n    function getSlashingPercentage() external view returns (uint256);\\n\\n    function investSTBL(uint256 _tokensAmount, address _policyBookAddr) external;\\n\\n    function distributeNFT() external;\\n\\n    function checkPlatinumNFTReward(address _userAddr) external view returns (uint256);\\n\\n    function checkMainNFTReward(address _userAddr) external view returns (uint256);\\n\\n    function distributeBMIReward() external;\\n\\n    function getTotalUserBMIReward(address _userAddr) external view returns (uint256);\\n\\n    function checkAvailableBMIReward(address _userAddr) external view returns (uint256);\\n\\n    /// @notice checks if liquidity mining event is lasting (startLiquidityMining() has been called)\\n    /// @return true if LM is started and not ended, false otherwise\\n    function isLMLasting() external view returns (bool);\\n\\n    /// @notice checks if liquidity mining event is finished. In order to be finished, it has to be started\\n    /// @return true if LM is finished, false if event is still going or not started\\n    function isLMEnded() external view returns (bool);\\n\\n    function getEndLMTime() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/home/artem/Projects/Distributed_Lab/Applicature/bridgemutual-core/contracts/interfaces/ILiquidityRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface ILiquidityRegistry {\\n    struct LiquidityInfo {\\n        address policyBookAddr;\\n        uint256 lockedAmount;\\n        uint256 availableAmount;\\n        uint256 bmiXRatio; // multiply availableAmount by this num to get stable coin\\n    }\\n\\n    struct WithdrawalRequestInfo {\\n        address policyBookAddr;\\n        uint256 requestAmount;\\n        uint256 requestSTBLAmount;\\n        uint256 availableLiquidity;\\n        uint256 readyToWithdrawDate;\\n        uint256 endWithdrawDate;\\n    }\\n\\n    struct WithdrawalSetInfo {\\n        address policyBookAddr;\\n        uint256 requestAmount;\\n        uint256 requestSTBLAmount;\\n        uint256 availableSTBLAmount;\\n    }\\n\\n    function tryToAddPolicyBook(address _userAddr, address _policyBookAddr) external;\\n\\n    function tryToRemovePolicyBook(address _userAddr, address _policyBookAddr) external;\\n\\n    function getPolicyBooksArrLength(address _userAddr) external view returns (uint256);\\n\\n    function getPolicyBooksArr(address _userAddr)\\n        external\\n        view\\n        returns (address[] memory _resultArr);\\n\\n    function getLiquidityInfos(\\n        address _userAddr,\\n        uint256 _offset,\\n        uint256 _limit\\n    ) external view returns (LiquidityInfo[] memory _resultArr);\\n\\n    function getWithdrawalRequests(\\n        address _userAddr,\\n        uint256 _offset,\\n        uint256 _limit\\n    ) external view returns (uint256 _arrLength, WithdrawalRequestInfo[] memory _resultArr);\\n\\n    function getWithdrawalSet(\\n        address _userAddr,\\n        uint256 _offset,\\n        uint256 _limit\\n    ) external view returns (uint256 _arrLength, WithdrawalSetInfo[] memory _resultArr);\\n}\\n\"\r\n    },\r\n    \"/home/artem/Projects/Distributed_Lab/Applicature/bridgemutual-core/contracts/interfaces/IPolicyBook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IPolicyBookFabric.sol\\\";\\nimport \\\"./IClaimingRegistry.sol\\\";\\n\\ninterface IPolicyBook {\\n    enum WithdrawalStatus {NONE, PENDING, READY, EXPIRED}\\n\\n    struct PolicyHolder {\\n        uint256 coverTokens;\\n        uint256 startEpochNumber;\\n        uint256 endEpochNumber;\\n        uint256 paid;\\n    }\\n\\n    struct WithdrawalInfo {\\n        uint256 withdrawalAmount;\\n        uint256 readyToWithdrawDate;\\n        bool withdrawalAllowed;\\n    }\\n\\n    function EPOCH_DURATION() external view returns (uint256);\\n\\n    function READY_TO_WITHDRAW_PERIOD() external view returns (uint256);\\n\\n    function whitelisted() external view returns (bool);\\n\\n    function epochStartTime() external view returns (uint256);\\n\\n    // @TODO: should we let DAO to change contract address?\\n    /// @notice Returns address of contract this PolicyBook covers, access: ANY\\n    /// @return _contract is address of covered contract\\n    function insuranceContractAddress() external view returns (address _contract);\\n\\n    /// @notice Returns type of contract this PolicyBook covers, access: ANY\\n    /// @return _type is type of contract\\n    function contractType() external view returns (IPolicyBookFabric.ContractType _type);\\n\\n    function totalLiquidity() external view returns (uint256);\\n\\n    function totalCoverTokens() external view returns (uint256);\\n\\n    function withdrawalsInfo(address _userAddr)\\n        external\\n        view\\n        returns (\\n            uint256 _withdrawalAmount,\\n            uint256 _readyToWithdrawDate,\\n            bool _withdrawalAllowed\\n        );\\n\\n    function __PolicyBook_init(\\n        address _insuranceContract,\\n        IPolicyBookFabric.ContractType _contractType,\\n        string calldata _description,\\n        string calldata _projectSymbol\\n    ) external;\\n\\n    function whitelist(bool _whitelisted) external;\\n\\n    function getEpoch(uint256 time) external view returns (uint256);\\n\\n    /// @notice get STBL equivalent\\n    function convertBMIXToSTBL(uint256 _amount) external view returns (uint256);\\n\\n    /// @notice get BMIX equivalent\\n    function convertSTBLToBMIX(uint256 _amount) external view returns (uint256);\\n\\n    /// @notice returns how many BMI tokens needs to approve in order to submit a claim\\n    function getClaimApprovalAmount(address user) external view returns (uint256);\\n\\n    /// @notice submits new claim of the policy book\\n    function submitClaimAndInitializeVoting(string calldata evidenceURI) external;\\n\\n    /// @notice submits new appeal claim of the policy book\\n    function submitAppealAndInitializeVoting(string calldata evidenceURI) external;\\n\\n    /// @notice updates info on claim acceptance\\n    function commitClaim(\\n        address claimer,\\n        uint256 claimAmount,\\n        uint256 claimEndTime,\\n        IClaimingRegistry.ClaimStatus status\\n    ) external;\\n\\n    /// @notice function to get precise current cover and liquidity\\n    function getNewCoverAndLiquidity()\\n        external\\n        view\\n        returns (uint256 newTotalCoverTokens, uint256 newTotalLiquidity);\\n\\n    /// @notice view function to get precise policy price\\n    function getPolicyPrice(uint256 _epochsNumber, uint256 _coverTokens)\\n        external\\n        view\\n        returns (uint256 totalSeconds, uint256 totalPrice);\\n\\n    function buyPolicyFor(\\n        address _buyer,\\n        uint256 _epochsNumber,\\n        uint256 _coverTokens\\n    ) external;\\n\\n    /// @notice Let user to buy policy by supplying stable coin, access: ANY\\n    /// @param _durationSeconds is number of seconds to cover\\n    /// @param _coverTokens is number of tokens to cover\\n    function buyPolicy(uint256 _durationSeconds, uint256 _coverTokens) external;\\n\\n    function updateEpochsInfo() external;\\n\\n    function secondsToEndCurrentEpoch() external view returns (uint256);\\n\\n    /// @notice Let user to add liquidity by supplying stable coin, access: ANY\\n    /// @param _liqudityAmount is amount of stable coin tokens to secure\\n    function addLiquidity(uint256 _liqudityAmount) external;\\n\\n    /// @notice Let eligible contracts add liqiudity for another user by supplying stable coin\\n    /// @param _liquidityHolderAddr is address of address to assign cover\\n    /// @param _liqudityAmount is amount of stable coin tokens to secure\\n    function addLiquidityFor(address _liquidityHolderAddr, uint256 _liqudityAmount) external;\\n\\n    function addLiquidityAndStake(uint256 _liquidityAmount, uint256 _stakeSTBLAmount) external;\\n\\n    function getAvailableBMIXWithdrawableAmount(address _userAddr) external view returns (uint256);\\n\\n    function getWithdrawalStatus(address _userAddr) external view returns (WithdrawalStatus);\\n\\n    function requestWithdrawal(uint256 _tokensToWithdraw) external;\\n\\n    function requestWithdrawalWithPermit(\\n        uint256 _tokensToWithdraw,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    function unlockTokens() external;\\n\\n    /// @notice Let user to withdraw deposited liqiudity, access: ANY\\n    function withdrawLiquidity() external;\\n\\n    function getAPY() external view returns (uint256);\\n\\n    /// @notice Getting user stats, access: ANY\\n    function userStats(address _user) external view returns (PolicyHolder memory);\\n\\n    /// @notice Getting number stats, access: ANY\\n    /// @return _maxCapacities is a max token amount that a user can buy\\n    /// @return _totalSTBLLiquidity is PolicyBook's liquidity\\n    /// @return _stakedSTBL is how much stable coin are staked on this PolicyBook\\n    /// @return _annualProfitYields is its APY\\n    /// @return _annualInsuranceCost is percentage of cover tokens that is required to be paid for 1 year of insurance\\n    function numberStats()\\n        external\\n        view\\n        returns (\\n            uint256 _maxCapacities,\\n            uint256 _totalSTBLLiquidity,\\n            uint256 _stakedSTBL,\\n            uint256 _annualProfitYields,\\n            uint256 _annualInsuranceCost,\\n            uint256 _bmiXRatio\\n        );\\n\\n    /// @notice Getting info, access: ANY\\n    /// @return _symbol is the symbol of PolicyBook (bmiXCover)\\n    /// @return _insuredContract is an addres of insured contract\\n    /// @return _contractType is a type of insured contract\\n    /// @return _whitelisted is a state of whitelisting\\n    function info()\\n        external\\n        view\\n        returns (\\n            string memory _symbol,\\n            address _insuredContract,\\n            IPolicyBookFabric.ContractType _contractType,\\n            bool _whitelisted\\n        );\\n}\\n\"\r\n    },\r\n    \"/home/artem/Projects/Distributed_Lab/Applicature/bridgemutual-core/contracts/interfaces/IPolicyBookFabric.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\ninterface IPolicyBookFabric {\\n    enum ContractType {CONTRACT, STABLECOIN, SERVICE, EXCHANGE}\\n\\n    /// @notice Create new Policy Book contract, access: ANY\\n    /// @param _contract is Contract to create policy book for\\n    /// @param _contractType is Contract to create policy book for\\n    /// @param _description is bmiXCover token desription for this policy book\\n    /// @param _projectSymbol replaces x in bmiXCover token symbol\\n    /// @param _initialDeposit is an amount user deposits on creation (addLiquidity())\\n    /// @return _policyBook is address of created contract\\n    function create(\\n        address _contract,\\n        ContractType _contractType,\\n        string calldata _description,\\n        string calldata _projectSymbol,\\n        uint256 _initialDeposit\\n    ) external returns (address);\\n}\\n\"\r\n    },\r\n    \"/home/artem/Projects/Distributed_Lab/Applicature/bridgemutual-core/contracts/interfaces/IPolicyQuote.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\ninterface IPolicyQuote {\\n    /// @notice Let user to calculate policy cost in stable coin, access: ANY\\n    /// @param _durationSeconds is number of seconds to cover\\n    /// @param _tokens is a number of tokens to cover\\n    /// @param _totalCoverTokens is a number of covered tokens\\n    /// @param _totalLiquidity is a liquidity amount\\n    /// @return amount of stable coin policy costs\\n    function getQuotePredefined(\\n        uint256 _durationSeconds,\\n        uint256 _tokens,\\n        uint256 _totalCoverTokens,\\n        uint256 _totalLiquidity,\\n        bool _safePolicyBook\\n    ) external view returns (uint256);\\n\\n    /// @notice Let user to calculate policy cost in stable coin, access: ANY\\n    /// @param _durationSeconds is number of seconds to cover\\n    /// @param _tokens is number of tokens to cover\\n    /// @param _policyBookAddr is address of policy book\\n    /// @return amount of stable coin policy costs\\n    function getQuote(\\n        uint256 _durationSeconds,\\n        uint256 _tokens,\\n        address _policyBookAddr\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/home/artem/Projects/Distributed_Lab/Applicature/bridgemutual-core/contracts/interfaces/IPolicyRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IPolicyBookFabric.sol\\\";\\nimport \\\"./IClaimingRegistry.sol\\\";\\n\\ninterface IPolicyRegistry {\\n    struct PolicyInfo {\\n        uint256 coverAmount;\\n        uint256 premium;\\n        uint256 startTime;\\n        uint256 endTime;\\n    }\\n\\n    struct PolicyUserInfo {\\n        string symbol;\\n        address insuredContract;\\n        IPolicyBookFabric.ContractType contractType;\\n        uint256 coverTokens;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 paid;\\n    }\\n\\n    function STILL_CLAIMABLE_FOR() external view returns (uint256);\\n\\n    /// @notice Returns the number of the policy for the user, access: ANY\\n    /// @param _userAddr Policy holder address\\n    /// @return the number of police in the array\\n    function getPoliciesLength(address _userAddr) external view returns (uint256);\\n\\n    /// @notice Shows whether the user has a policy, access: ANY\\n    /// @param _userAddr Policy holder address\\n    /// @param _policyBookAddr Address of policy book\\n    /// @return true if user has policy in specific policy book\\n    function policyExists(address _userAddr, address _policyBookAddr) external view returns (bool);\\n\\n    /// @notice Returns information about current policy, access: ANY\\n    /// @param _userAddr Policy holder address\\n    /// @param _policyBookAddr Address of policy book\\n    /// @return true if user has active policy in specific policy book\\n    function isPolicyActive(address _userAddr, address _policyBookAddr)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @notice returns current policy start time or zero\\n    function policyStartTime(address _userAddr, address _policyBookAddr)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice returns current policy end time or zero\\n    function policyEndTime(address _userAddr, address _policyBookAddr)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Returns the array of the policy itself , access: ANY\\n    /// @param _userAddr Policy holder address\\n    /// @param _isActive If true, then returns an array with information about active policies, if false, about inactive\\n    /// @return _policiesCount is the number of police in the array\\n    /// @return _policyBooksArr is the array of policy books addresses\\n    /// @return _policies is the array of policies\\n    /// @return _policyStatuses parameter will show which button to display on the dashboard\\n    function getPoliciesInfo(\\n        address _userAddr,\\n        bool _isActive,\\n        uint256 _offset,\\n        uint256 _limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 _policiesCount,\\n            address[] memory _policyBooksArr,\\n            PolicyInfo[] memory _policies,\\n            IClaimingRegistry.ClaimStatus[] memory _policyStatuses\\n        );\\n\\n    /// @notice Getting stats from users of policy books, access: ANY\\n    function getUsersInfo(address[] calldata _users, address[] calldata _policyBooks)\\n        external\\n        view\\n        returns (PolicyUserInfo[] memory _stats);\\n\\n    function getPoliciesArr(address _userAddr) external view returns (address[] memory _arr);\\n\\n    /// @notice Adds a new policy to the list , access: ONLY POLICY BOOKS\\n    /// @param _userAddr is the user's address\\n    /// @param _coverAmount is the number of insured tokens\\n    /// @param _premium is the name of PolicyBook\\n    /// @param _durationDays is the number of days for which the insured\\n    function addPolicy(\\n        address _userAddr,\\n        uint256 _coverAmount,\\n        uint256 _premium,\\n        uint256 _durationDays\\n    ) external;\\n\\n    /// @notice Removes the policy book from the list, access: ONLY POLICY BOOKS\\n    /// @param _userAddr is the user's address\\n    function removePolicy(address _userAddr) external;\\n}\\n\"\r\n    },\r\n    \"/home/artem/Projects/Distributed_Lab/Applicature/bridgemutual-core/contracts/interfaces/IRewardsGenerator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IRewardsGenerator {\\n    struct PolicyBookRewardInfo {\\n        uint256 rewardMultiplier; // includes 5 decimal places\\n        uint256 totalStaked;\\n        uint256 startStakeBlock;\\n        uint256 lastUpdateBlock;\\n        uint256 cumulativeSum; // includes 100 percentage\\n        uint256 cumulativeReward;\\n        uint256 average; // includes 100 percentage\\n        uint256 toUpdateAverage; // includes 100 percentage\\n    }\\n\\n    struct StakeRewardInfo {\\n        uint256 averageOnStake; // includes 100 percentage\\n        uint256 aggregatedReward;\\n        uint256 stakeAmount;\\n        uint256 stakeBlock;\\n    }\\n\\n    /// @notice this function is called every time policybook's STBL to bmiX rate changes\\n    function updatePolicyBookShare(uint256 newRewardMultiplier) external;\\n\\n    /// @notice aggregates specified nfts into a single one\\n    function aggregate(\\n        address policyBookAddress,\\n        uint256[] calldata nftIndexes,\\n        uint256 nftIndexTo\\n    ) external;\\n\\n    /// @notice informs generator of stake (rewards)\\n    function stake(\\n        address policyBookAddress,\\n        uint256 nftIndex,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice returns policybook's APY multiplied by 10**5\\n    function getPolicyBookAPY(address policyBookAddress) external view returns (uint256);\\n\\n    /// @dev returns PolicyBook reward per block multiplied by 10**25\\n    function getPolicyBookRewardPerBlock(address policyBookAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice returns PolicyBook's staked STBL\\n    function getStakedPolicyBookSTBL(address policyBookAddress) external view returns (uint256);\\n\\n    /// @notice returns NFT's staked STBL\\n    function getStakedNFTSTBL(uint256 nftIndex) external view returns (uint256);\\n\\n    /// @notice returns a reward of NFT\\n    function getReward(address policyBookAddress, uint256 nftIndex)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice informs generator of withdrawal (all funds)\\n    function withdrawFunds(address policyBookAddress, uint256 nftIndex) external returns (uint256);\\n\\n    /// @notice informs generator of withdrawal (rewards)\\n    function withdrawReward(address policyBookAddress, uint256 nftIndex)\\n        external\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/home/artem/Projects/Distributed_Lab/Applicature/bridgemutual-core/contracts/interfaces/helpers/IPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\ninterface IPriceFeed {\\n    function howManyBMIsInUSDT(uint256 usdtAmount) external view returns (uint256);\\n\\n    function howManyUSDTsInBMI(uint256 bmiAmount) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/home/artem/Projects/Distributed_Lab/Applicature/bridgemutual-core/contracts/interfaces/tokens/erc20permit-upgradeable/IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * COPIED FROM https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/tree/release-v3.4/contracts/drafts\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"/home/artem/Projects/Distributed_Lab/Applicature/bridgemutual-core/contracts/libraries/DecimalsConverter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/// @notice the intention of this library is to be able to easily convert\\n///     one amount of tokens with N decimal places\\n///     to another amount with M decimal places\\nlibrary DecimalsConverter {\\n    using SafeMath for uint256;\\n\\n    function convert(\\n        uint256 amount,\\n        uint256 baseDecimals,\\n        uint256 destinationDecimals\\n    ) internal pure returns (uint256) {\\n        if (baseDecimals > destinationDecimals) {\\n            amount = amount.div(10**(baseDecimals - destinationDecimals));\\n        } else if (baseDecimals < destinationDecimals) {\\n            amount = amount.mul(10**(destinationDecimals - baseDecimals));\\n        }\\n\\n        return amount;\\n    }\\n\\n    function convertTo18(uint256 amount, uint256 baseDecimals) internal pure returns (uint256) {\\n        return convert(amount, baseDecimals, 18);\\n    }\\n\\n    function convertFrom18(uint256 amount, uint256 destinationDecimals)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return convert(amount, 18, destinationDecimals);\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/artem/Projects/Distributed_Lab/Applicature/bridgemutual-core/contracts/tokens/erc20permit-upgradeable/EIP712Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n * COPIED FROM https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/tree/release-v3.4/contracts/drafts\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal initializer {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version)\\n        internal\\n        initializer\\n    {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 name,\\n        bytes32 version\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, name, version, _getChainId(), address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparatorV4(), structHash));\\n    }\\n\\n    function _getChainId() private view returns (uint256 chainId) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal view virtual returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal view virtual returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"/home/artem/Projects/Distributed_Lab/Applicature/bridgemutual-core/contracts/tokens/erc20permit-upgradeable/ERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.5 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"../../interfaces/tokens/erc20permit-upgradeable/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport \\\"./EIP712Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n * COPIED FROM https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/tree/release-v3.4/contracts/drafts\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\nabstract contract ERC20PermitUpgradeable is\\n    Initializable,\\n    ERC20Upgradeable,\\n    IERC20PermitUpgradeable,\\n    EIP712Upgradeable\\n{\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal initializer {\\n        __Context_init_unchained();\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n        __ERC20Permit_init_unchained(name);\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory name) internal initializer {\\n        _PERMIT_TYPEHASH = keccak256(\\n            \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash =\\n            keccak256(\\n                abi.encode(\\n                    _PERMIT_TYPEHASH,\\n                    owner,\\n                    spender,\\n                    value,\\n                    _nonces[owner].current(),\\n                    deadline\\n                )\\n            );\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _nonces[owner].increment();\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"ECDSA: invalid signature 's' value\\\"\\n        );\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n    uint256[44] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../math/SafeMathUpgradeable.sol\\\";\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\\n * directly accessed.\\n */\\nlibrary CountersUpgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\\n        counter._value += 1;\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        counter._value = counter._value.sub(1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTotalCoverTokens\",\"type\":\"uint256\"}],\"name\":\"CoverageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_liquidityHolder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_liquidityAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTotalLiquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_liquidityHolder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokensToWithdraw\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTotalLiquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_policyHolder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_coverTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTotalCoverTokens\",\"type\":\"uint256\"}],\"name\":\"PolicyBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_liquidityHolder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokensToWithdraw\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_readyToWithdrawDate\",\"type\":\"uint256\"}],\"name\":\"WithdrawalRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ANNUAL_COVERAGE_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EPOCH_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_EPOCHS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PREMIUM_DISTRIBUTION_EPOCHS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINUMUM_COVERAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MODERATE_UTILIZATION_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PREMIUM_DISTRIBUTION_EPOCH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROTOCOL_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"READY_TO_WITHDRAW_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RISKY_UTILIZATION_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VIRTUAL_EPOCHS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_insuranceContract\",\"type\":\"address\"},{\"internalType\":\"enum IPolicyBookFabric.ContractType\",\"name\":\"_contractType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectSymbol\",\"type\":\"string\"}],\"name\":\"__PolicyBook_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeSTBLAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityAndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityHolderAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bmiCoverStaking\",\"outputs\":[{\"internalType\":\"contract IBMICoverStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochsNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coverTokens\",\"type\":\"uint256\"}],\"name\":\"buyPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epochsNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coverTokens\",\"type\":\"uint256\"}],\"name\":\"buyPolicyFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimVoting\",\"outputs\":[{\"internalType\":\"contract IClaimVoting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimingRegistry\",\"outputs\":[{\"internalType\":\"contract IClaimingRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimEndTime\",\"type\":\"uint256\"},{\"internalType\":\"enum IClaimingRegistry.ClaimStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"commitClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractType\",\"outputs\":[{\"internalType\":\"enum IPolicyBookFabric.ContractType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertBMIXToSTBL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertSTBLToBMIX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getAvailableBMIXWithdrawableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getClaimApprovalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"getEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewCoverAndLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newTotalCoverTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTotalLiquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochsNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coverTokens\",\"type\":\"uint256\"}],\"name\":\"getPolicyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getWithdrawalStatus\",\"outputs\":[{\"internalType\":\"enum IPolicyBook.WithdrawalStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"info\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_insuredContract\",\"type\":\"address\"},{\"internalType\":\"enum IPolicyBookFabric.ContractType\",\"name\":\"_contractType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"injector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_injector\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insuranceContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDistributionEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPremiumDistributionAmount\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPremiumDistributionEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityFromLM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMining\",\"outputs\":[{\"internalType\":\"contract ILiquidityMining\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityRegistry\",\"outputs\":[{\"internalType\":\"contract ILiquidityRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxCapacities\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSTBLLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakedSTBL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_annualProfitYields\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_annualInsuranceCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bmiXRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyBookAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyBookFabricAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyBookRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"policyHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"coverTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startEpochNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endEpochNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyQuote\",\"outputs\":[{\"internalType\":\"contract IPolicyQuote\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyRegistry\",\"outputs\":[{\"internalType\":\"contract IPolicyRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"premiumDistributionDeltas\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinsurancePoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensToWithdraw\",\"type\":\"uint256\"}],\"name\":\"requestWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensToWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"requestWithdrawalWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsGenerator\",\"outputs\":[{\"internalType\":\"contract IRewardsGenerator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsToEndCurrentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IContractsRegistry\",\"name\":\"_contractsRegistry\",\"type\":\"address\"}],\"name\":\"setDependencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_injector\",\"type\":\"address\"}],\"name\":\"setInjector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stblDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stblToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"evidenceURI\",\"type\":\"string\"}],\"name\":\"submitAppealAndInitializeVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"evidenceURI\",\"type\":\"string\"}],\"name\":\"submitClaimAndInitializeVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCoverTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateEpochsInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userStats\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"coverTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startEpochNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endEpochNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"}],\"internalType\":\"struct IPolicyBook.PolicyHolder\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawalsInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"readyToWithdrawDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawalAllowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PolicyBook","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}