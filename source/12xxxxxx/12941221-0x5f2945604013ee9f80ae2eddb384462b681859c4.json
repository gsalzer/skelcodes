{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/AdapterRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/ITokenAdapter.sol\\\";\\nimport \\\"./interfaces/IProtocolAdapter.sol\\\";\\nimport \\\"./interfaces/IAdapterRegistry.sol\\\";\\nimport \\\"./interfaces/INirnVault.sol\\\";\\nimport \\\"./libraries/ArrayHelper.sol\\\";\\nimport \\\"./libraries/DynamicArrays.sol\\\";\\n\\n\\ncontract AdapterRegistry is Ownable(), IAdapterRegistry {\\n  using ArrayHelper for address[];\\n  using ArrayHelper for EnumerableSet.AddressSet;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n  using DynamicArrays for address[];\\n  using DynamicArrays for uint256[];\\n\\n/* ========== Storage ========== */\\n\\n  /** @dev Mapping from underlying token to registered vault. */\\n  mapping(address => address) public override vaultsByUnderlying;\\n\\n  /** @dev Accounts allowed to register vaults. */\\n  mapping(address => bool) public override approvedVaultFactories;\\n\\n  /** @dev List of all registered vaults. */\\n  EnumerableSet.AddressSet internal vaults;\\n\\n  /** @dev Number of protocol adapters registered. */\\n  uint256 public override protocolsCount;\\n\\n  /** @dev Mapping from protocol IDs to adapter addresses. */\\n  mapping(uint256 => address) public override protocolAdapters;\\n\\n  /** @dev Mapping from protocol adapter addresses to protocol IDs. */\\n  mapping(address => uint256) public override protocolAdapterIds;\\n\\n  /** @dev Mapping from underlying tokens to lists of adapters. */\\n  mapping(address => address[]) internal tokenAdapters;\\n\\n  /** @dev Mapping from wrapper tokens to adapters. */\\n  mapping(address => TokenAdapter) internal adaptersByWrapperToken;\\n\\n  /** @dev List of all underlying tokens with registered adapters. */\\n  EnumerableSet.AddressSet internal supportedTokens;\\n\\n/* ========== Modifiers ========== */\\n\\n  modifier onlyProtocolOrOwner {\\n    require(protocolAdapterIds[msg.sender] > 0 || msg.sender == owner(), \\\"!approved\\\");\\n    _;\\n  }\\n\\n  function getProtocolAdapterId(address protocolAdapter) internal view returns (uint256 id) {\\n    require((id = protocolAdapterIds[protocolAdapter]) > 0, \\\"!exists\\\");\\n  }\\n\\n/* ========== Vault Factory Management ========== */\\n\\n  function addVaultFactory(address _factory) external override onlyOwner {\\n    require(_factory != address(0), \\\"null address\\\");\\n    require(!approvedVaultFactories[_factory], \\\"already approved\\\");\\n    approvedVaultFactories[_factory] = true;\\n    emit VaultFactoryAdded(_factory);\\n  }\\n\\n  function removeVaultFactory(address _factory) external override onlyOwner {\\n    require(approvedVaultFactories[_factory], \\\"!approved\\\");\\n    approvedVaultFactories[_factory] = false;\\n    emit VaultFactoryRemoved(_factory);\\n  }\\n\\n/* ========== Vault Management ========== */\\n\\n  function addVault(address vault) external override {\\n    require(approvedVaultFactories[msg.sender], \\\"!approved\\\");\\n    address underlying = INirnVault(vault).underlying();\\n    require(vaultsByUnderlying[underlying] == address(0), \\\"exists\\\");\\n    vaultsByUnderlying[underlying] = vault;\\n    vaults.add(vault);\\n    emit VaultAdded(underlying, vault);\\n  }\\n\\n  function removeVault(address vault) external override onlyOwner {\\n    address underlying = INirnVault(vault).underlying();\\n    require(vaultsByUnderlying[underlying] != address(0), \\\"!exists\\\");\\n    vaultsByUnderlying[underlying] = address(0);\\n    vaults.remove(vault);\\n    emit VaultRemoved(underlying, vault);\\n  }\\n\\n/* ========== Protocol Adapter Management ========== */\\n\\n  function addProtocolAdapter(address protocolAdapter) external override onlyProtocolOrOwner returns (uint256 id) {\\n    require(protocolAdapter != address(0), \\\"null\\\");\\n    require(protocolAdapterIds[protocolAdapter] == 0, \\\"exists\\\");\\n    id = ++protocolsCount;\\n    protocolAdapterIds[protocolAdapter] = id;\\n    protocolAdapters[id] = protocolAdapter;\\n    emit ProtocolAdapterAdded(id, protocolAdapter);\\n  }\\n\\n  function removeProtocolAdapter(address protocolAdapter) external override onlyOwner {\\n    uint256 id = getProtocolAdapterId(protocolAdapter);\\n    delete protocolAdapterIds[protocolAdapter];\\n    delete protocolAdapters[id];\\n    emit ProtocolAdapterRemoved(id);\\n  }\\n\\n/* ========== Token Adapter Management ========== */\\n\\n  function _addTokenAdapter(IErc20Adapter adapter, uint256 id) internal {\\n    address underlying = adapter.underlying();\\n    address wrapper = adapter.token();\\n    require(adaptersByWrapperToken[wrapper].protocolId == 0, \\\"adapter exists\\\");\\n    if (tokenAdapters[underlying].length == 0) {\\n      supportedTokens.add(underlying);\\n      emit TokenSupportAdded(underlying);\\n    }\\n    tokenAdapters[underlying].push(address(adapter));\\n    adaptersByWrapperToken[wrapper] = TokenAdapter(address(adapter), uint96(id));\\n    emit TokenAdapterAdded(address(adapter), id, underlying, wrapper);\\n  }\\n\\n  function addTokenAdapter(address adapter) external override {\\n    uint256 id = getProtocolAdapterId(msg.sender);\\n    _addTokenAdapter(IErc20Adapter(adapter), id);\\n  }\\n\\n  function addTokenAdapters(address[] calldata adapters) external override {\\n    uint256 id = getProtocolAdapterId(msg.sender);\\n    uint256 len = adapters.length;\\n    for (uint256 i = 0; i < len; i++) {\\n      IErc20Adapter adapter = IErc20Adapter(adapters[i]);\\n      _addTokenAdapter(adapter, id);\\n    }\\n  }\\n\\n  function removeTokenAdapter(address adapter) external override {\\n    address wrapper = IErc20Adapter(adapter).token();\\n    TokenAdapter memory adapterRecord = adaptersByWrapperToken[wrapper];\\n    require(adapterRecord.adapter == address(adapter), \\\"wrong adapter\\\");\\n    uint256 protocolId = adapterRecord.protocolId;\\n    require(\\n      msg.sender == owner() ||\\n      msg.sender == protocolAdapters[protocolId],\\n      \\\"!authorized\\\"\\n    );\\n    delete adaptersByWrapperToken[wrapper];\\n    address underlying = IErc20Adapter(adapter).underlying();\\n    address[] storage adapters = tokenAdapters[underlying];\\n    uint256 index = adapters.indexOf(address(adapter));\\n    adapters.remove(index);\\n    if (adapters.length == 0) {\\n      supportedTokens.remove(underlying);\\n      emit TokenSupportRemoved(underlying);\\n    }\\n    emit TokenAdapterRemoved(address(adapter), protocolId, underlying, wrapper);\\n  }\\n\\n/* ========== Vault Queries ========== */\\n\\n  function getVaultsList() external view override returns (address[] memory) {\\n    return vaults.toArray();\\n  }\\n\\n  function haveVaultFor(address underlying) external view override returns (bool) {\\n    return vaultsByUnderlying[underlying] != address(0);\\n  }\\n\\n/* ========== Protocol Queries ========== */\\n\\n  function getProtocolAdaptersAndIds() external view override returns (address[] memory adapters, uint256[] memory ids) {\\n    uint256 len = protocolsCount;\\n    adapters = DynamicArrays.dynamicAddressArray(len);\\n    ids = DynamicArrays.dynamicUint256Array(len);\\n    for (uint256 id = 1; id <= len; id++) {\\n      address adapter = protocolAdapters[id];\\n      if (adapter != address(0)) {\\n        adapters.dynamicPush(adapter);\\n        ids.dynamicPush(id);\\n      }\\n    }\\n  }\\n\\n  function getProtocolMetadata(uint256 id) external view override returns (address protocolAdapter, string memory name) {\\n    protocolAdapter = protocolAdapters[id];\\n    require(protocolAdapter != address(0), \\\"invalid id\\\");\\n    name = IProtocolAdapter(protocolAdapter).protocol();\\n  }\\n\\n  function getProtocolForTokenAdapter(address adapter) external view override returns (address protocolAdapter) {\\n    address wrapper = IErc20Adapter(adapter).token();\\n    TokenAdapter memory adapterRecord = adaptersByWrapperToken[wrapper];\\n    require(adapterRecord.adapter == adapter, \\\"!approved\\\");\\n    protocolAdapter = protocolAdapters[adapterRecord.protocolId];\\n  }\\n\\n/* ========== Supported Token Queries ========== */\\n\\n  function isSupported(address underlying) external view override returns (bool) {\\n    return tokenAdapters[underlying].length > 0;\\n  }\\n\\n  function getSupportedTokens() external view override returns (address[] memory list) {\\n    list = supportedTokens.toArray();\\n  }\\n\\n/* ========== Token Adapter Queries ========== */\\n\\n  function isApprovedAdapter(address adapter) external view override returns (bool) {\\n    address wrapper = IErc20Adapter(adapter).token();\\n    TokenAdapter memory adapterRecord = adaptersByWrapperToken[wrapper];\\n    return adapterRecord.adapter == adapter;\\n  }\\n\\n  function getAdaptersList(address underlying) public view override returns (address[] memory list) {\\n    list = tokenAdapters[underlying];\\n  }\\n\\n  function getAdapterForWrapperToken(address wrapperToken) external view override returns (address) {\\n    return adaptersByWrapperToken[wrapperToken].adapter;\\n  }\\n\\n  function getAdaptersCount(address underlying) external view override returns (uint256) {\\n    return tokenAdapters[underlying].length;\\n  }\\n\\n  function getAdaptersSortedByAPR(address underlying)\\n    public\\n    view\\n    override\\n    returns (address[] memory adapters, uint256[] memory aprs)\\n  {\\n    adapters = getAdaptersList(underlying);\\n    uint256 len = adapters.length;\\n    aprs = new uint256[](len);\\n    for (uint256 i = 0; i < len; i++) {\\n      try IErc20Adapter(adapters[i]).getAPR() returns (uint256 apr) {\\n        aprs[i] = apr;\\n      } catch {\\n        aprs[i] = 0;\\n      }\\n    }\\n    adapters.sortByDescendingScore(aprs);\\n  }\\n\\n  function getAdaptersSortedByAPRWithDeposit(\\n    address underlying,\\n    uint256 deposit,\\n    address excludingAdapter\\n  )\\n    public\\n    view\\n    override\\n    returns (address[] memory adapters, uint256[] memory aprs)\\n  {\\n    adapters = getAdaptersList(underlying);\\n    uint256 len = adapters.length;\\n    aprs = new uint256[](len);\\n    for (uint256 i = 0; i < len; i++) {\\n      address adapter = adapters[i];\\n      if (adapter == excludingAdapter) {\\n        try IErc20Adapter(adapter).getAPR() returns (uint256 apr) {\\n          aprs[i] = apr;\\n        } catch {\\n          aprs[i] = 0;\\n        }\\n      } else {\\n        try IErc20Adapter(adapter).getHypotheticalAPR(int256(deposit)) returns (uint256 apr) {\\n          aprs[i] = apr;\\n        } catch {\\n          aprs[i] = 0;\\n        }\\n      }\\n    }\\n    adapters.sortByDescendingScore(aprs);\\n  }\\n\\n  function getAdapterWithHighestAPR(address underlying) external view override returns (address adapter, uint256 apr) {\\n    (address[] memory adapters, uint256[] memory aprs) = getAdaptersSortedByAPR(underlying);\\n    adapter = adapters[0];\\n    apr = aprs[0];\\n  }\\n\\n  function getAdapterWithHighestAPRForDeposit(\\n    address underlying,\\n    uint256 deposit,\\n    address excludingAdapter\\n  ) external view override returns (address adapter, uint256 apr) {\\n    (address[] memory adapters, uint256[] memory aprs) = getAdaptersSortedByAPRWithDeposit(\\n      underlying,\\n      deposit,\\n      excludingAdapter\\n    );\\n    adapter = adapters[0];\\n    apr = aprs[0];\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAdapterRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\n\\ninterface IAdapterRegistry {\\n/* ========== Events ========== */\\n\\n  event ProtocolAdapterAdded(uint256 protocolId, address protocolAdapter);\\n\\n  event ProtocolAdapterRemoved(uint256 protocolId);\\n\\n  event TokenAdapterAdded(address adapter, uint256 protocolId, address underlying, address wrapper);\\n\\n  event TokenAdapterRemoved(address adapter, uint256 protocolId, address underlying, address wrapper);\\n\\n  event TokenSupportAdded(address underlying);\\n\\n  event TokenSupportRemoved(address underlying);\\n\\n  event VaultFactoryAdded(address factory);\\n\\n  event VaultFactoryRemoved(address factory);\\n\\n  event VaultAdded(address underlying, address vault);\\n\\n  event VaultRemoved(address underlying, address vault);\\n\\n/* ========== Structs ========== */\\n\\n  struct TokenAdapter {\\n    address adapter;\\n    uint96 protocolId;\\n  }\\n\\n/* ========== Storage ========== */\\n\\n  function protocolsCount() external view returns (uint256);\\n\\n  function protocolAdapters(uint256 id) external view returns (address protocolAdapter);\\n\\n  function protocolAdapterIds(address protocolAdapter) external view returns (uint256 id);\\n\\n  function vaultsByUnderlying(address underlying) external view returns (address vault);\\n\\n  function approvedVaultFactories(address factory) external view returns (bool approved);\\n\\n/* ========== Vault Factory Management ========== */\\n\\n  function addVaultFactory(address _factory) external;\\n\\n  function removeVaultFactory(address _factory) external;\\n\\n/* ========== Vault Management ========== */\\n\\n  function addVault(address vault) external;\\n\\n  function removeVault(address vault) external;\\n\\n/* ========== Protocol Adapter Management ========== */\\n\\n  function addProtocolAdapter(address protocolAdapter) external returns (uint256 id);\\n\\n  function removeProtocolAdapter(address protocolAdapter) external;\\n\\n/* ========== Token Adapter Management ========== */\\n\\n  function addTokenAdapter(address adapter) external;\\n\\n  function addTokenAdapters(address[] calldata adapters) external;\\n\\n  function removeTokenAdapter(address adapter) external;\\n\\n/* ========== Vault Queries ========== */\\n\\n  function getVaultsList() external view returns (address[] memory);\\n\\n  function haveVaultFor(address underlying) external view returns (bool);\\n\\n/* ========== Protocol Queries ========== */\\n\\n  function getProtocolAdaptersAndIds() external view returns (address[] memory adapters, uint256[] memory ids);\\n\\n  function getProtocolMetadata(uint256 id) external view returns (address protocolAdapter, string memory name);\\n\\n  function getProtocolForTokenAdapter(address adapter) external view returns (address protocolAdapter);\\n\\n/* ========== Supported Token Queries ========== */\\n\\n  function isSupported(address underlying) external view returns (bool);\\n\\n  function getSupportedTokens() external view returns (address[] memory list);\\n\\n/* ========== Token Adapter Queries ========== */\\n\\n  function isApprovedAdapter(address adapter) external view returns (bool);\\n\\n  function getAdaptersList(address underlying) external view returns (address[] memory list);\\n\\n  function getAdapterForWrapperToken(address wrapperToken) external view returns (address);\\n\\n  function getAdaptersCount(address underlying) external view returns (uint256);\\n\\n  function getAdaptersSortedByAPR(address underlying)\\n    external\\n    view\\n    returns (address[] memory adapters, uint256[] memory aprs);\\n\\n  function getAdaptersSortedByAPRWithDeposit(\\n    address underlying,\\n    uint256 deposit,\\n    address excludingAdapter\\n  )\\n    external\\n    view\\n    returns (address[] memory adapters, uint256[] memory aprs);\\n\\n  function getAdapterWithHighestAPR(address underlying) external view returns (address adapter, uint256 apr);\\n\\n  function getAdapterWithHighestAPRForDeposit(\\n    address underlying,\\n    uint256 deposit,\\n    address excludingAdapter\\n  ) external view returns (address adapter, uint256 apr);\\n}\\n\\n\"\r\n    },\r\n    \"contracts/interfaces/INirnVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\nimport \\\"./IAdapterRegistry.sol\\\";\\nimport \\\"./ITokenAdapter.sol\\\";\\nimport \\\"./IRewardsSeller.sol\\\";\\n\\n\\ninterface INirnVault {\\n/* ========== Events ========== */\\n\\n  /** @dev Emitted when an adapter is removed and its balance fully withdrawn. */\\n  event AdapterRemoved(IErc20Adapter adapter);\\n\\n  /** @dev Emitted when weights or adapters are updated. */\\n  event AllocationsUpdated(IErc20Adapter[] adapters, uint256[] weights);\\n\\n  /** @dev Emitted when performance fees are claimed. */\\n  event FeesClaimed(uint256 underlyingAmount, uint256 sharesMinted);\\n\\n  /** @dev Emitted when a rebalance happens without allocation changes. */\\n  event Rebalanced();\\n\\n  /** @dev Emitted when max underlying is updated. */\\n  event SetMaximumUnderlying(uint256 maxBalance);\\n\\n  /** @dev Emitted when fee recipient address is set. */\\n  event SetFeeRecipient(address feeRecipient);\\n\\n  /** @dev Emitted when performance fee is set. */\\n  event SetPerformanceFee(uint256 performanceFee);\\n\\n  /** @dev Emitted when reserve ratio is set. */\\n  event SetReserveRatio(uint256 reserveRatio);\\n\\n  /** @dev Emitted when rewards seller contract is set. */\\n  event SetRewardsSeller(address rewardsSeller);\\n\\n  /** @dev Emitted when a deposit is made. */\\n  event Deposit(uint256 shares, uint256 underlying);\\n\\n  /** @dev Emitted when a deposit is made. */\\n  event Withdrawal(uint256 shares, uint256 underlying);\\n\\n/* ========== Initializer ========== */\\n\\n  function initialize(\\n    address _underlying,\\n    address _rewardsSeller,\\n    address _feeRecipient,\\n    address _owner\\n  ) external;\\n\\n/* ========== Config Queries ========== */\\n\\n  function minimumAPRImprovement() external view returns (uint256);\\n\\n  function registry() external view returns (IAdapterRegistry);\\n\\n  function eoaSafeCaller() external view returns (address);\\n\\n  function underlying() external view returns (address);\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);  \\n\\n  function feeRecipient() external view returns (address);\\n\\n  function rewardsSeller() external view returns (IRewardsSeller);\\n\\n  function lockedTokens(address) external view returns (bool);\\n\\n  function maximumUnderlying() external view returns (uint256);\\n\\n  function performanceFee() external view returns (uint64);\\n\\n  function reserveRatio() external view returns (uint64);\\n\\n  function priceAtLastFee() external view returns (uint128);\\n\\n/* ========== Admin Actions ========== */\\n\\n  function setMaximumUnderlying(uint256 _maximumUnderlying) external;\\n\\n  function setPerformanceFee(uint64 _performanceFee) external;\\n\\n  function setFeeRecipient(address _feeRecipient) external;\\n\\n  function setRewardsSeller(IRewardsSeller _rewardsSeller) external;\\n\\n  function setReserveRatio(uint64 _reserveRatio) external;\\n\\n/* ========== Balance Queries ========== */\\n\\n  function balance() external view returns (uint256 sum);\\n\\n  function reserveBalance() external view returns (uint256);\\n\\n/* ========== Fee Queries ========== */\\n\\n  function getPendingFees() external view returns (uint256);\\n\\n/* ========== Price Queries ========== */\\n\\n  function getPricePerFullShare() external view returns (uint256);\\n\\n  function getPricePerFullShareWithFee() external view returns (uint256);\\n\\n/* ========== Reward Token Sales ========== */\\n\\n  function sellRewards(address rewardsToken, bytes calldata params) external;\\n\\n/* ========== Adapter Queries ========== */\\n\\n  function getBalances() external view returns (uint256[] memory balances);\\n\\n  function getAdaptersAndWeights() external view returns (\\n    IErc20Adapter[] memory adapters,\\n    uint256[] memory weights\\n  );\\n\\n/* ========== Liquidity Delta Queries ========== */\\n\\n  function getCurrentLiquidityDeltas() external view returns (int256[] memory liquidityDeltas);\\n  \\n  function getHypotheticalLiquidityDeltas(\\n    uint256[] calldata proposedWeights\\n  ) external view returns (int256[] memory liquidityDeltas);\\n  \\n  function getHypotheticalLiquidityDeltas(\\n    IErc20Adapter[] calldata proposedAdapters,\\n    uint256[] calldata proposedWeights\\n  ) external view returns (int256[] memory liquidityDeltas);\\n\\n/* ========== APR Queries ========== */\\n\\n  function getAPR() external view returns (uint256);\\n\\n  function getAPRs() external view returns (uint256[] memory aprs);\\n\\n  function getHypotheticalAPR(uint256[] memory proposedWeights) external view returns (uint256);\\n\\n  function getHypotheticalAPR(\\n    IErc20Adapter[] calldata proposedAdapters,\\n    uint256[] calldata proposedWeights\\n  ) external view returns (uint256);\\n\\n/* ========== Deposit/Withdraw ========== */\\n\\n  function deposit(uint256 amount) external returns (uint256 shares);\\n\\n  function depositTo(uint256 amount, address to) external returns (uint256 shares);\\n\\n  function withdraw(uint256 shares) external returns (uint256 owed);\\n\\n  function withdrawUnderlying(uint256 amount) external returns (uint256 shares);\\n\\n/* ========== Rebalance Actions ========== */\\n\\n  function rebalance() external;\\n\\n  function rebalanceWithNewWeights(uint256[] calldata proposedWeights) external;\\n\\n  function rebalanceWithNewAdapters(\\n    IErc20Adapter[] calldata proposedAdapters,\\n    uint256[] calldata proposedWeights\\n  ) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IProtocolAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.10;\\nimport \\\"./IAdapterRegistry.sol\\\";\\n\\n\\ninterface IProtocolAdapter {\\n  event MarketFrozen(address token);\\n\\n  event MarketUnfrozen(address token);\\n\\n  event AdapterFrozen(address adapter);\\n\\n  event AdapterUnfrozen(address adapter);\\n\\n  function registry() external view returns (IAdapterRegistry);\\n\\n  function frozenAdapters(uint256 index) external view returns (address);\\n\\n  function frozenTokens(uint256 index) external view returns (address);\\n\\n  function totalMapped() external view returns (uint256);\\n\\n  function protocol() external view returns (string memory);\\n\\n  function getUnmapped() external view returns (address[] memory tokens);\\n\\n  function getUnmappedUpTo(uint256 max) external view returns (address[] memory tokens);\\n\\n  function map(uint256 max) external;\\n\\n  function unfreezeAdapter(uint256 index) external;\\n\\n  function unfreezeToken(uint256 index) external;\\n\\n  function freezeAdapter(address adapter) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IRewardsSeller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\n\\ninterface IRewardsSeller {\\n  /**\\n   * @dev Sell `rewardsToken` for `underlyingToken`.\\n   * Should only be called after `rewardsToken` is transferred.\\n   * @param sender - Address of account that initially triggered the call. Can be used to restrict who can trigger a sale.\\n   * @param rewardsToken - Address of the token to sell.\\n   * @param underlyingToken - Address of the token to buy.\\n   * @param params - Any additional data that the caller provided.\\n   */\\n  function sellRewards(\\n    address sender,\\n    address rewardsToken,\\n    address underlyingToken,\\n    bytes calldata params\\n  ) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/ITokenAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\n\\ninterface IErc20Adapter {\\n/* ========== Metadata ========== */\\n\\n  function underlying() external view returns (address);\\n\\n  function token() external view returns (address);\\n\\n  function name() external view returns (string memory);\\n\\n  function availableLiquidity() external view returns (uint256);\\n\\n/* ========== Conversion ========== */\\n\\n  function toUnderlyingAmount(uint256 tokenAmount) external view returns (uint256);\\n\\n  function toWrappedAmount(uint256 underlyingAmount) external view returns (uint256);\\n\\n/* ========== Performance Queries ========== */\\n\\n  function getAPR() external view returns (uint256);\\n\\n  function getHypotheticalAPR(int256 liquidityDelta) external view returns (uint256);\\n\\n  function getRevenueBreakdown()\\n    external\\n    view\\n    returns (\\n      address[] memory assets,\\n      uint256[] memory aprs\\n    );\\n\\n/* ========== Caller Balance Queries ========== */\\n\\n  function balanceWrapped() external view returns (uint256);\\n\\n  function balanceUnderlying() external view returns (uint256);\\n\\n/* ========== Interactions ========== */\\n\\n  function deposit(uint256 amountUnderlying) external returns (uint256 amountMinted);\\n\\n  function withdraw(uint256 amountToken) external returns (uint256 amountReceived);\\n\\n  function withdrawAll() external returns (uint256 amountReceived);\\n\\n  function withdrawUnderlying(uint256 amountUnderlying) external returns (uint256 amountBurned);\\n\\n  function withdrawUnderlyingUpTo(uint256 amountUnderlying) external returns (uint256 amountReceived);\\n}\\n\\ninterface IEtherAdapter is IErc20Adapter {\\n  function depositETH() external payable returns (uint256 amountMinted);\\n\\n  function withdrawAsETH(uint256 amountToken) external returns (uint256 amountReceived);\\n\\n  function withdrawAllAsETH() external returns (uint256 amountReceived);\\n\\n  function withdrawUnderlyingAsETH(uint256 amountUnderlying) external returns (uint256 amountBurned); \\n}\"\r\n    },\r\n    \"contracts/libraries/ArrayHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"../libraries/LowGasSafeMath.sol\\\";\\nimport \\\"../interfaces/ITokenAdapter.sol\\\";\\n\\n\\nlibrary ArrayHelper {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n  using LowGasSafeMath for uint256;\\n\\n/* ========== Type Cast ========== */\\n\\n  /**\\n   * @dev Cast an enumerable address set as an address array.\\n   * The enumerable set library stores the values as a bytes32 array, this function\\n   * casts it as an address array with a pointer assignment.\\n   */\\n  function toArray(EnumerableSet.AddressSet storage set) internal view returns (address[] memory arr) {\\n    bytes32[] memory bytes32Arr = set._inner._values;\\n    assembly { arr := bytes32Arr }\\n  }\\n\\n  /**\\n   * @dev Cast an array of IErc20Adapter to an array of address using a pointer assignment.\\n   * Note: The resulting array is the same as the original, so all changes to one will be\\n   * reflected in the other.\\n   */\\n  function toAddressArray(IErc20Adapter[] memory _arr) internal pure returns (address[] memory arr) {\\n    assembly { arr := _arr }\\n  }\\n\\n/* ========== Math ========== */\\n\\n  /**\\n   * @dev Computes the sum of a uint256 array.\\n   */\\n  function sum(uint256[] memory arr) internal pure returns (uint256 _sum) {\\n    uint256 len = arr.length;\\n    for (uint256 i; i < len; i++) _sum = _sum.add(arr[i]);\\n  }\\n\\n/* ========== Removal ========== */\\n\\n  /**\\n   * @dev Remove the element at `index` from an array and decrement its length.\\n   * If `index` is the last index in the array, pops it from the array.\\n   * Otherwise, stores the last element in the array at `index` and then pops the last element.\\n   */\\n  function mremove(uint256[] memory arr, uint256 index) internal pure {\\n    uint256 len = arr.length;\\n    if (index != len - 1) {\\n      uint256 last = arr[len - 1];\\n      arr[index] = last;\\n    }\\n    assembly { mstore(arr, sub(len, 1)) }\\n  }\\n\\n  /**\\n   * @dev Remove the element at `index` from an array and decrement its length.\\n   * If `index` is the last index in the array, pops it from the array.\\n   * Otherwise, stores the last element in the array at `index` and then pops the last element.\\n   */\\n  function mremove(address[] memory arr, uint256 index) internal pure {\\n    uint256 len = arr.length;\\n    if (index != len - 1) {\\n      address last = arr[len - 1];\\n      arr[index] = last;\\n    }\\n    assembly { mstore(arr, sub(len, 1)) }\\n  }\\n\\n  /**\\n   * @dev Remove the element at `index` from an array and decrement its length.\\n   * If `index` is the last index in the array, pops it from the array.\\n   * Otherwise, stores the last element in the array at `index` and then pops the last element.\\n   */\\n  function mremove(IErc20Adapter[] memory arr, uint256 index) internal pure {\\n    uint256 len = arr.length;\\n    if (index != len - 1) {\\n      IErc20Adapter last = arr[len - 1];\\n      arr[index] = last;\\n    }\\n    assembly { mstore(arr, sub(len, 1)) }\\n  }\\n\\n  /**\\n   * @dev Remove the element at `index` from an array and decrement its length.\\n   * If `index` is the last index in the array, pops it from the array.\\n   * Otherwise, stores the last element in the array at `index` and then pops the last element.\\n   */\\n  function remove(bytes32[] storage arr, uint256 index) internal {\\n    uint256 len = arr.length;\\n    if (index == len - 1) {\\n      arr.pop();\\n      return;\\n    }\\n    bytes32 last = arr[len - 1];\\n    arr[index] = last;\\n    arr.pop();\\n  }\\n\\n  /**\\n   * @dev Remove the element at `index` from an array and decrement its length.\\n   * If `index` is the last index in the array, pops it from the array.\\n   * Otherwise, stores the last element in the array at `index` and then pops the last element.\\n   */\\n  function remove(address[] storage arr, uint256 index) internal {\\n    uint256 len = arr.length;\\n    if (index == len - 1) {\\n      arr.pop();\\n      return;\\n    }\\n    address last = arr[len - 1];\\n    arr[index] = last;\\n    arr.pop();\\n  }\\n\\n/* ========== Search ========== */\\n\\n  /**\\n   * @dev Find the index of an address in an array.\\n   * If the address is not found, revert.\\n   */\\n  function indexOf(address[] memory arr, address find) internal pure returns (uint256) {\\n    uint256 len = arr.length;\\n    for (uint256 i; i < len; i++) if (arr[i] == find) return i;\\n    revert(\\\"element not found\\\");\\n  }\\n\\n  /**\\n   * @dev Determine whether an element is included in an array.\\n   */\\n  function includes(address[] memory arr, address find) internal pure returns (bool) {\\n    uint256 len = arr.length;\\n    for (uint256 i; i < len; i++) if (arr[i] == find) return true;\\n    return false;\\n  }\\n\\n/* ========== Sorting ========== */\\n\\n  /**\\n   * @dev Given an array of tokens and scores, sort by scores in descending order.\\n   * Maintains the relationship between elements of each array at the same index.\\n   */\\n  function sortByDescendingScore(\\n    address[] memory addresses,\\n    uint256[] memory scores\\n  ) internal pure {\\n    uint256 len = addresses.length;\\n    for (uint256 i = 0; i < len; i++) {\\n      uint256 score = scores[i];\\n      address _address = addresses[i];\\n      uint256 j = i - 1;\\n      while (int(j) >= 0 && scores[j] < score) {\\n        scores[j + 1] = scores[j];\\n        addresses[j + 1] = addresses[j];\\n        j--;\\n      }\\n      scores[j + 1] = score;\\n      addresses[j + 1] = _address;\\n    }\\n  }\\n}\"\r\n    },\r\n    \"contracts/libraries/DynamicArrays.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.5.0;\\n\\n/**\\n * @dev Library for handling dynamic in-memory arrays.\\n *\\n * There is a very good reason for Solidity not supporting this by default -- dynamic\\n * arrays in memory completely break memory management for Solidity when used improperly;\\n * however, they can be created manually in a safe way so long as the maximum size is known\\n * beforehand.\\n *\\n * This applies primarily to situations where a subset is taken from an existing array\\n * by some filtering process.\\n *\\n * This library should not be used to bypass Solidity's lack of dynamic memory array\\n * support in any situation where the code could potentially cause the array to exceed\\n * the maximum size assigned in the array creation call. Doing so is likely to have\\n * unintended and unpredictable side effects.\\n */\\nlibrary DynamicArrays {\\n  /**\\n   * @dev Reserves space in memory for an array of length `size`, but sets the length to 0.\\n   * This can be safely used for a dynamic array so long as the maximum possible size is\\n   * known beforehand. If the array can exceed `size`, pushing to it will corrupt memory.\\n   */\\n  function dynamicAddressArray(uint256 size) internal pure returns (address[] memory arr) {\\n    arr = new address[](size);\\n    assembly { mstore(arr, 0) }\\n  }\\n\\n  /**\\n   * @dev Reserves space in memory for an array of length `size`, but sets the length to 0.\\n   * This can be safely used for a dynamic array so long as the maximum possible size is\\n   * known beforehand. If the array can exceed length `size`, pushing to it will corrupt memory.\\n   */\\n  function dynamicUint256Array(uint256 size) internal pure returns (uint256[] memory arr) {\\n    arr = new uint256[](size);\\n    assembly { mstore(arr, 0) }\\n  }\\n\\n  /**\\n   * @dev Pushes an address to an in-memory array by reassigning the array length and storing\\n   * the element in the position used by solidity for the current array index.\\n   * Note: This should ONLY be used on an array created with `dynamicAddressArray`. Using it\\n   * on a typical array created with `new address[]()` will almost certainly have unintended\\n   * and unpredictable side effects.\\n   */\\n  function dynamicPush(address[] memory arr, address element) internal pure {\\n    assembly {\\n      let size := mload(arr)\\n      let ptr := add(\\n        add(arr, 32),\\n        mul(size, 32)\\n      )\\n      mstore(ptr, element)\\n      mstore(arr, add(size, 1))\\n    }\\n  }\\n\\n  /**\\n   * @dev Pushes a uint256 to an in-memory array by reassigning the array length and storing\\n   * the element in the position used by solidity for the current array index.\\n   * Note: This should ONLY be used on an array created with `dynamicUint256Array`. Using it\\n   * on a typical array created with `new uint256[]()` will almost certainly have unintended\\n   * and unpredictable side effects.\\n   */\\n  function dynamicPush(uint256[] memory arr, uint256 element) internal pure {\\n    assembly {\\n      let size := mload(arr)\\n      let ptr := add(\\n        add(arr, 32),\\n        mul(size, 32)\\n      )\\n      mstore(ptr, element)\\n      mstore(arr, add(size, 1))\\n    }\\n  }\\n}\"\r\n    },\r\n    \"contracts/libraries/LowGasSafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\n\\n/************************************************************************************************\\nOriginally from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/LowGasSafeMath.sol\\n\\nThis source code has been modified from the original, which was copied from the github repository\\nat commit hash b83fcf497e895ae59b97c9d04e997023f69b5e97.\\n\\nSubject to the GPL-2.0 license\\n*************************************************************************************************/\\n\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n  /// @notice Returns x + y, reverts if sum overflows uint256\\n  /// @param x The augend\\n  /// @param y The addend\\n  /// @return z The sum of x and y\\n  function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    require((z = x + y) >= x);\\n  }\\n\\n  /// @notice Returns x + y, reverts if sum overflows uint256\\n  /// @param x The augend\\n  /// @param y The addend\\n  /// @return z The sum of x and y\\n  function add(uint256 x, uint256 y, string memory errorMessage) internal pure returns (uint256 z) {\\n    require((z = x + y) >= x, errorMessage);\\n  }\\n\\n  /// @notice Returns x - y, reverts if underflows\\n  /// @param x The minuend\\n  /// @param y The subtrahend\\n  /// @return z The difference of x and y\\n  function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    require(y <= x);\\n    z = x - y;\\n  }\\n\\n  /// @notice Returns x - y, reverts if underflows\\n  /// @param x The minuend\\n  /// @param y The subtrahend\\n  /// @return z The difference of x and y\\n  function sub(uint256 x, uint256 y, string memory errorMessage) internal pure returns (uint256 z) {\\n    require(y <= x, errorMessage);\\n    z = x - y;\\n  }\\n\\n  /// @notice Returns x * y, reverts if overflows\\n  /// @param x The multiplicand\\n  /// @param y The multiplier\\n  /// @return z The product of x and y\\n  function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    if (x == 0) return 0;\\n    z = x * y;\\n    require(z / x == y);\\n  }\\n\\n  /// @notice Returns x * y, reverts if overflows\\n  /// @param x The multiplicand\\n  /// @param y The multiplier\\n  /// @return z The product of x and y\\n  function mul(uint256 x, uint256 y, string memory errorMessage) internal pure returns (uint256 z) {\\n    if (x == 0) return 0;\\n    z = x * y;\\n    require(z / x == y, errorMessage);\\n  }\\n\\n  /// @notice Returns ceil(x / y)\\n  /// @param x The numerator\\n  /// @param y The denominator\\n  /// @return z The quotient of x and y\\n  function divCeil(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    z = x % y == 0 ? x / y : (x/y) + 1;\\n  }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"protocolAdapter\",\"type\":\"address\"}],\"name\":\"ProtocolAdapterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolId\",\"type\":\"uint256\"}],\"name\":\"ProtocolAdapterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"}],\"name\":\"TokenAdapterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"}],\"name\":\"TokenAdapterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"TokenSupportAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"TokenSupportRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"VaultAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"VaultFactoryAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"VaultFactoryRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"VaultRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocolAdapter\",\"type\":\"address\"}],\"name\":\"addProtocolAdapter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"addTokenAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"}],\"name\":\"addTokenAdapters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"addVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"addVaultFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedVaultFactories\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wrapperToken\",\"type\":\"address\"}],\"name\":\"getAdapterForWrapperToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getAdapterWithHighestAPR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"excludingAdapter\",\"type\":\"address\"}],\"name\":\"getAdapterWithHighestAPRForDeposit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getAdaptersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getAdaptersList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getAdaptersSortedByAPR\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"aprs\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"excludingAdapter\",\"type\":\"address\"}],\"name\":\"getAdaptersSortedByAPRWithDeposit\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"aprs\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolAdaptersAndIds\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"getProtocolForTokenAdapter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"protocolAdapter\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getProtocolMetadata\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"protocolAdapter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultsList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"haveVaultFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"isApprovedAdapter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"isSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"protocolAdapterIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"protocolAdapters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocolAdapter\",\"type\":\"address\"}],\"name\":\"removeProtocolAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"removeTokenAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"removeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"removeVaultFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultsByUnderlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AdapterRegistry","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"800","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}