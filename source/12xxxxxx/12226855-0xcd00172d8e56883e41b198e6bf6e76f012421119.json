{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity <=0.7.4;\r\n\r\nabstract contract ReentrancyGuard {\r\n\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\nlibrary Math {\r\n    \r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b <= a, errorMessage);\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"multiplication overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b > 0, errorMessage);\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n}\r\n\r\ninterface IStaking{\r\n    \r\n    function stake(uint256 amount,uint256 tenure) external returns(bool);\r\n    \r\n    function claim(uint256 stakeId) external returns(bool);\r\n    \r\n    function calculateClaimAmount(address user,uint256 stakeId) external returns(uint256,uint256);\r\n                \r\n    function revokeOwnership(address _newOwner) external returns(bool);\r\n\r\n    function changeROI(uint256 _newROI) external returns(bool);\r\n\r\n    function updateEdgexContract(address _contractAddress) external returns(bool);\r\n}\r\n\r\ninterface IERC20{\r\n\t\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n}\r\n\r\ncontract EdgeStakingV1 is ReentrancyGuard {\r\n\r\n    uint256 public currentROI; // ROI per second in 10^13 precision\r\n    address public edgexContract; // edge196 token contract\r\n    address public admin;\r\n    \r\n    struct Stake{\r\n        uint256 amount;\r\n        uint256 maturesAt;\r\n        uint256 createdAt;\r\n        uint256 roiAtStake;\r\n        bool isClaimed;\r\n        uint256 interest;\r\n    }\r\n\r\n    mapping(address => uint256) public totalStakingContracts;\r\n    mapping(address => mapping(uint256 => Stake)) public stakeContract;\r\n\r\n    event RevokeOwnership(address indexed newOwner);\r\n    event ChangeROI(uint256 newROI);\r\n\r\n    modifier onlyAdmin(){\r\n        require(msg.sender == admin,\"Caller not admin\");\r\n        _;\r\n    }\r\n\r\n    modifier isZero(address _address){\r\n        require(_address != address(0),\"Invalid Address\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _edgexContract,uint256 _newROI, address _admin){\r\n        edgexContract = _edgexContract;\r\n        currentROI = _newROI;\r\n        admin = _admin;\r\n    }\r\n\r\n    function stake(uint256 _amount, uint256 _tenureInDays) public nonReentrant returns(bool) {\r\n        require(\r\n            IERC20(edgexContract)\r\n            .allowance(msg.sender,address(this)) >= _amount, \"Allowance Exceeded\"\r\n            );\r\n        require(\r\n            IERC20(edgexContract)\r\n            .balanceOf(msg.sender) >= _amount, \"Insufficient Balance\"\r\n            );\r\n        updateStakeData(_amount,_tenureInDays,msg.sender);\r\n        totalStakingContracts[msg.sender] = Math.add(totalStakingContracts[msg.sender],1);\r\n        IERC20(edgexContract)\r\n        .transferFrom(msg.sender,address(this),_amount);\r\n        return true;\r\n        }\r\n\r\n    function updateStakeData(uint256 _amount, uint256 _tenureInDays, address _user) internal{\r\n        uint256 totalContracts = Math.add(totalStakingContracts[_user],1);         \r\n        Stake storage sc = stakeContract[_user][totalContracts];\r\n        sc.amount = _amount;\r\n        sc.createdAt = block.timestamp;\r\n        uint256 maturityInSeconds = Math.mul(_tenureInDays,1 minutes);\r\n        sc.maturesAt = Math.add(block.timestamp,maturityInSeconds);\r\n        sc.roiAtStake = currentROI;\r\n    }\r\n\r\n    function claim(uint256 _stakingContractId) public nonReentrant returns(bool){\r\n        Stake storage sc = stakeContract[msg.sender][_stakingContractId];\r\n        require(\r\n            sc.maturesAt <= block.timestamp,\r\n            \"Not Yet Matured\"\r\n        );\r\n        require(\r\n            !sc.isClaimed,\r\n            \"Already Claimed\"\r\n        );\r\n        uint256 total; uint256 interest;\r\n        (total,interest) = calculateClaimAmount(msg.sender,_stakingContractId);\r\n        sc.isClaimed = true;\r\n        sc.interest = interest;\r\n        IERC20(edgexContract)\r\n        .transfer(msg.sender,total);\r\n        return true;\r\n    }\r\n\r\n    function calculateClaimAmount(address _user, uint256 _contractId) public view returns(uint256,uint256){\r\n        Stake storage sc = stakeContract[_user][_contractId];\r\n        uint256 a = Math.mul(sc.amount,sc.roiAtStake);\r\n        uint256 time = Math.sub(sc.maturesAt,sc.createdAt);\r\n        uint256 b = Math.mul(a,time);\r\n        uint256 interest = Math.div(b,Math.mul(31536,10**18));\r\n        uint256 total = Math.add(sc.amount,interest);\r\n        return(total,interest);\r\n    }\r\n    \r\n    /**\r\n        @dev changing the admin of the oracle\r\n        Warning : Admin can change ROI & other features.\r\n     */\r\n\r\n    function revokeOwnership(address _newOwner) public onlyAdmin isZero(_newOwner) returns(bool){\r\n        admin = payable(_newOwner);\r\n        emit RevokeOwnership(_newOwner);\r\n        return true;\r\n    }\r\n\r\n    function changeROI(uint256 _newROI) public onlyAdmin returns(bool){\r\n        currentROI = _newROI;\r\n        emit ChangeROI(_newROI);\r\n        return true;\r\n    }\r\n    \r\n    function updateEdgexContract(address _contractAddress) public onlyAdmin isZero(_contractAddress) returns(bool){\r\n        edgexContract = _contractAddress;\r\n        return true;\r\n    }\r\n\r\n    function withdrawLiquidity(uint256 _edgexAmount, address _to) public virtual onlyAdmin isZero(_to) returns(bool){\r\n        IERC20(edgexContract)\r\n        .transfer(_to,_edgexAmount);\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_edgexContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newROI\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newROI\",\"type\":\"uint256\"}],\"name\":\"ChangeROI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"RevokeOwnership\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"calculateClaimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newROI\",\"type\":\"uint256\"}],\"name\":\"changeROI\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingContractId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"edgexContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"revokeOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tenureInDays\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturesAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roiAtStake\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalStakingContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"updateEdgexContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_edgexAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EdgeStakingV1","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c1f5e9185e0a84a9922acecd72a672bed3bbfb4e00000000000000000000000000000000000000000000000000006d23ad5f80000000000000000000000000008934b795af3edd9d2cea8dcf919fb69f40483ccc","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e26c7b9ec99fc42e9dfe477e1651ad2e7dc56fbdb0d47a429b8497b41c1c381a"}]}