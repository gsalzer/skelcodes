{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/GSN/Context.sol\n\npragma solidity ^0.5.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: opium-contracts/contracts/Interface/IOracleId.sol\n\npragma solidity 0.5.16;\n\n/// @title Opium.Interface.IOracleId contract is an interface that every oracleId should implement\ninterface IOracleId {\n    /// @notice Requests data from `oracleId` one time\n    /// @param timestamp uint256 Timestamp at which data are needed\n    function fetchData(uint256 timestamp) external payable;\n\n    /// @notice Requests data from `oracleId` multiple times\n    /// @param timestamp uint256 Timestamp at which data are needed for the first time\n    /// @param period uint256 Period in seconds between multiple timestamps\n    /// @param times uint256 How many timestamps are requested\n    function recursivelyFetchData(uint256 timestamp, uint256 period, uint256 times) external payable;\n\n    /// @notice Requests and returns price in ETH for one request. This function could be called as `view` function. Oraclize API for price calculations restricts making this function as view.\n    /// @return fetchPrice uint256 Price of one data request in ETH\n    function calculateFetchPrice() external returns (uint256 fetchPrice);\n\n    // Event with oracleId metadata JSON string (for DIB.ONE derivative explorer)\n    event MetadataSet(string metadata);\n}\n\n// File: contracts/oracles/dao/DaoOracleId.sol\n\npragma solidity 0.5.16;\n\n\n\ninterface IOracleAggregator {\n  function __callback(uint256 timestamp, uint256 data) external;\n  function hasData(address oracleId, uint256 timestamp) external view returns(bool result);\n}\n\ncontract DaoOracleId is IOracleId, Ownable {\n  event Provided(uint256 indexed timestamp, uint256 result);\n\n  // Opium\n  IOracleAggregator public oracleAggregator;\n\n  constructor(IOracleAggregator _oracleAggregator) public {\n    oracleAggregator = _oracleAggregator;\n\n    /*\n    {\n      \"author\": \"Opium.Team\",\n      \"description\": \"Opium DAO Oracle\",\n      \"asset\": \"any\",\n      \"type\": \"dao\",\n      \"source\": \"opiumteam\",\n      \"logic\": \"none\",\n      \"path\": \"none\"\n    }\n    */\n    emit MetadataSet(\"{\\\"author\\\":\\\"Opium.Team\\\",\\\"description\\\":\\\"Opium DAO Oracle\\\",\\\"asset\\\":\\\"any\\\",\\\"type\\\":\\\"dao\\\",\\\"source\\\":\\\"opiumteam\\\",\\\"logic\\\":\\\"none\\\",\\\"path\\\":\\\"none\\\"}\");\n  }\n\n  /** OPIUM */\n  function fetchData(uint256 _timestamp) external payable {\n    _timestamp;\n    revert(\"N.S\"); // N.S = not supported\n  }\n\n  function recursivelyFetchData(uint256 _timestamp, uint256 _period, uint256 _times) external payable {\n    _timestamp;\n    _period;\n    _times;\n    revert(\"N.S\"); // N.S = not supported\n  }\n\n  function calculateFetchPrice() external returns (uint256) {\n    return 0;\n  }\n  \n  function _callback(uint256 _timestamp, uint256 _result) public onlyOwner {\n    require(\n      !oracleAggregator.hasData(address(this), _timestamp) &&\n      _timestamp < now,\n      \"N.A\" // N.A = Only when no data and after timestamp allowed\n    );\n\n    oracleAggregator.__callback(_timestamp, _result);\n\n    emit Provided(_timestamp, _result);\n  }\n}\n","ABI":"[{\"inputs\":[{\"internalType\":\"contract IOracleAggregator\",\"name\":\"_oracleAggregator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"MetadataSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"Provided\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_result\",\"type\":\"uint256\"}],\"name\":\"_callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"calculateFetchPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"fetchData\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracleAggregator\",\"outputs\":[{\"internalType\":\"contract IOracleAggregator\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_times\",\"type\":\"uint256\"}],\"name\":\"recursivelyFetchData\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DaoOracleId","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b69890912e40a7849fca058bb118cfe7d70932c4","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}