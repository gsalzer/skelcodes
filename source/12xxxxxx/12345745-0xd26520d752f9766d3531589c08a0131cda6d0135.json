{"status":"1","message":"OK","result":[{"SourceCode":"{\"Migrations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\n\\ncontract Migrations {\\n  address public owner = msg.sender;\\n  uint public last_completed_migration;\\n\\n  modifier restricted() {\\n    require(\\n      msg.sender == owner,\\n      \\\"This function is restricted to the contract\\u0027s owner\\\"\\n    );\\n    _;\\n  }\\n\\n  function setCompleted(uint completed) public restricted {\\n    last_completed_migration = completed;\\n  }\\n}\\n\"},\"TriangleCoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\n\\ncontract TriangleCoin {\\n    //                          PYRAMID.\\n    //                    The Pyramid Network\\n    //                Welcome to the pyramid network!\\n    //          This network rewards you for inviting others.\\n    //    Help grow the network, and build your triangle collection!\\n    \\n    string public constant name = \\\"Triangle Coin\\\";\\n    string public constant symbol = \\\"TRI\\\";\\n    uint8 public constant decimals = 18;\\n\\n    address public _owner;\\n    \\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\\n    event Transfer(address indexed from, address indexed to, uint tokens);\\n\\n    event walletRefered(address _referer, address _referee);\\n    event walletAccepted(address _referee, address _referer, bool _accepted);\\n\\n    mapping(address =\\u003e address) private __referredBy;\\n    mapping(address =\\u003e uint) private __level;\\n    mapping(address =\\u003e bool) private __acceptedReferral;\\n    \\n    mapping(address =\\u003e uint256) balances;\\n\\n    mapping(address =\\u003e mapping (address =\\u003e uint256)) allowed;\\n    \\n    uint256 totalSupply_;\\n\\n    using SafeMath for uint256;\\n    \\n    constructor() public {\\n      _owner = msg.sender;\\n      __level[_owner] = 0;\\n      __acceptedReferral[_owner] = true;\\n      totalSupply_ = 100000000000000000000;\\n      emit Transfer(0x0000000000000000000000000000000000000000, _owner, 100000000000000000000);\\n\\t    balances[msg.sender] = totalSupply_;\\n    }\\n    \\n    function totalSupply() public view returns (uint256) {\\n\\t    return totalSupply_;\\n    }\\n    \\n    function balanceOf(address tokenOwner) public view returns (uint) {\\n      return balances[tokenOwner];\\n    }\\n    \\n    function transfer(address receiver, uint numTokens) public returns (bool) {\\n      require(numTokens \\u003c= balances[msg.sender], \\\"Not enough coins on behalf of the sender\\\");\\n      balances[msg.sender] = balances[msg.sender].sub(numTokens);\\n      balances[receiver] = balances[receiver].add(numTokens);\\n      emit Transfer(msg.sender, receiver, numTokens);\\n      return true;\\n    }\\n    \\n    function approve(address delegate, uint numTokens) public returns (bool) {\\n      allowed[msg.sender][delegate] = numTokens;\\n      emit Approval(msg.sender, delegate, numTokens);\\n      return true;\\n    }\\n    \\n    function allowance(address owner, address delegate) public view returns (uint) {\\n      return allowed[owner][delegate];\\n    }\\n    \\n    function transferFrom(address owner, address buyer, uint numTokens) public returns (bool) {\\n      require(numTokens \\u003c= balances[owner], \\\"Not enough coins on behalf of the sender\\\");    \\n      require(numTokens \\u003c= allowed[owner][msg.sender], \\\"Not enough coins on behalf of the delegate\\\");\\n  \\n      balances[owner] = balances[owner].sub(numTokens);\\n      allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\\n      balances[buyer] = balances[buyer].add(numTokens);\\n      emit Transfer(owner, buyer, numTokens);\\n      return true;\\n    }\\n\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n        require(account == _owner, \\\"Account not the owner\\\");\\n\\n        totalSupply_ += amount;\\n        balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function acceptReferral(address referer) public returns (bool success) {\\n        // Require that the person was refered and that the value is not the default value, address(0)\\n        require(__referredBy[msg.sender] == referer);\\n        require(__acceptedReferral[msg.sender] != true);\\n\\n        __acceptedReferral[msg.sender] = true;\\n\\n        emit walletAccepted(msg.sender, referer, __acceptedReferral[msg.sender]);\\n\\n        // Set level of referee to 1 further down than the referer\\n        __level[msg.sender] = __level[__referredBy[msg.sender]] + 1;\\n\\n        // Give joiner some triangles\\n        balances[msg.sender] += 5000000000000000000;\\n        totalSupply_ += 5000000000000000000;\\n\\n        emit Transfer(0x0000000000000000000000000000000000000000, msg.sender, 5000000000000000000);\\n\\n        address wallet = msg.sender;\\n        \\n        // Payout levels starting from bottom up to top working through who refered who\\n        for (uint i = 0; i \\u003c 17; i++) {\\n            if (__level[wallet] == 0 || i == 16) {\\n                return true;\\n            }\\n            else {\\n                balances[__referredBy[wallet]] += 5000000000000000000;\\n                totalSupply_ += 5000000000000000000;\\n                emit Transfer(0x0000000000000000000000000000000000000000, __referredBy[wallet], 5000000000000000000);\\n                wallet = __referredBy[wallet];\\n            }\\n        }\\n    }\\n\\n    function extendReferral(address _to) public returns (bool success) {\\n        // Require that the sender cannot refer themselves\\n        require(_to != msg.sender);\\n\\n        emit walletRefered(msg.sender, _to);\\n\\n        // Extend referral\\n        __referredBy[_to] = msg.sender;\\n        return true;\\n    }\\n\\n    function referedBy(address addr) public view returns (address referer) {\\n        return __referredBy[addr];\\n    }\\n\\n    function isUser(address addr) public view returns (bool success) {\\n        return __acceptedReferral[addr];\\n    }\\n\\n    function levelOf(address addr) public view returns (uint256 level) {\\n        return __level[addr];\\n    }\\n\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n        require(account == msg.sender);\\n\\n        uint256 accountBalance = balances[account];\\n        require(accountBalance \\u003e= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        balances[account] = accountBalance - amount;\\n        totalSupply_ -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n}\\n\\nlibrary SafeMath {\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    assert(b \\u003c= a);\\n    return a - b;\\n  }\\n  \\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    assert(c \\u003e= a);\\n    return c;\\n  }\\n}\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delegate\",\"type\":\"address\"},{\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referer\",\"type\":\"address\"}],\"name\":\"acceptReferral\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isUser\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"levelOf\",\"outputs\":[{\"name\":\"level\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"extendReferral\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"referedBy\",\"outputs\":[{\"name\":\"referer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_referer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_referee\",\"type\":\"address\"}],\"name\":\"walletRefered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_referee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_referer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_accepted\",\"type\":\"bool\"}],\"name\":\"walletAccepted\",\"type\":\"event\"}]","ContractName":"TriangleCoin","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://ba4122bc7bb0c274338d3eb4ae371e4861af5c6cccb25b88c66d64116f29f2eb"}]}