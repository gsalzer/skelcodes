{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interface/IERC20.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\ninterface IERC20 {\r\n    function symbol() external returns (string memory _symbol);\r\n}\r\n\r\n// File: contracts/interface/MarketInterfaces.sol\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract ShardsMarketAdminStorage {\r\n    /**\r\n     * @notice Administrator for this contract\r\n     */\r\n    address public admin;\r\n    /**\r\n     * @notice Governance for this contract which has the right to adjust the parameters of market\r\n     */\r\n    address public governance;\r\n\r\n    /**\r\n     * @notice Active brains of ShardsMarket\r\n     */\r\n    address public implementation;\r\n}\r\n\r\ncontract IShardsMarketStorge is ShardsMarketAdminStorage {\r\n    address public shardsFactory;\r\n\r\n    address public factory;\r\n\r\n    address public router;\r\n\r\n    address public dev;\r\n\r\n    address public platformFund;\r\n\r\n    address public shardsFarm;\r\n\r\n    address public buyoutProposals;\r\n\r\n    address public regulator;\r\n\r\n    address public shardAdditionProposal;\r\n\r\n    address public WETH;\r\n    //The totalSupply of shard in the market\r\n    uint256 public totalSupply = 10000000000000000000000;\r\n    //Stake Time limit: 60*60*24*5\r\n    uint256 public deadlineForStake = 432000;\r\n    //Redeem Time limit:60*60*24*7\r\n    uint256 public deadlineForRedeem = 604800;\r\n    //The Proportion of the shardsCreator's shards\r\n    uint256 public shardsCreatorProportion = 5;\r\n    //The Proportion of the platform's shards\r\n    uint256 public platformProportion = 5;\r\n    //The Proportion for dev of the market profit,the rest of profit is given to platformFund\r\n    uint256 public profitProportionForDev = 20;\r\n    //max\r\n    uint256 internal constant max = 100;\r\n    //shardPool count\r\n    uint256 public shardPoolIdCount;\r\n    // all of the shardpoolId\r\n    uint256[] internal allPools;\r\n    // Info of each pool.\r\n    mapping(uint256 => shardPool) public poolInfo;\r\n    //shardPool struct\r\n    struct shardPool {\r\n        address creator; //shard  creator\r\n        ShardsState state; //shard state\r\n        uint256 createTime;\r\n        uint256 deadlineForStake;\r\n        uint256 deadlineForRedeem;\r\n        uint256 balanceOfWantToken; // all the stake amount of the wantToken in this pool\r\n        uint256 minWantTokenAmount; //Minimum subscription required by the creator\r\n        bool isCreatorWithDraw; //Does the creator withdraw wantToken\r\n        address wantToken; // token address Requested by the creator for others to stake\r\n        uint256 openingPrice;\r\n    }\r\n    //shard of each pool\r\n    mapping(uint256 => shard) public shardInfo;\r\n    //shard struct\r\n    struct shard {\r\n        string shardName;\r\n        string shardSymbol;\r\n        address shardToken;\r\n        uint256 totalShardSupply;\r\n        uint256 shardForCreator;\r\n        uint256 shardForPlatform;\r\n        uint256 shardForStakers;\r\n        uint256 burnAmount;\r\n    }\r\n    //user info of each pool\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        bool isWithdrawShard;\r\n    }\r\n\r\n    enum ShardsState {\r\n        Live,\r\n        Listed,\r\n        ApplyForBuyout,\r\n        Buyout,\r\n        SubscriptionFailed,\r\n        Pending,\r\n        AuditFailed,\r\n        ApplyForAddition\r\n    }\r\n\r\n    struct Token721 {\r\n        address contractAddress;\r\n        uint256 tokenId;\r\n    }\r\n    struct Token1155 {\r\n        address contractAddress;\r\n        uint256 tokenId;\r\n        uint256 amount;\r\n    }\r\n    //nfts of shard creator stakes in each pool\r\n    mapping(uint256 => Token721[]) internal Token721s;\r\n    mapping(uint256 => Token1155[]) internal Token1155s;\r\n}\r\n\r\nabstract contract IShardsMarket is IShardsMarketStorge {\r\n    event ShardCreated(\r\n        uint256 shardPoolId,\r\n        address indexed creator,\r\n        string shardName,\r\n        string shardSymbol,\r\n        uint256 minWantTokenAmount,\r\n        uint256 createTime,\r\n        uint256 totalSupply,\r\n        address wantToken\r\n    );\r\n    event Stake(address indexed sender, uint256 shardPoolId, uint256 amount);\r\n    event Redeem(address indexed sender, uint256 shardPoolId, uint256 amount);\r\n    event SettleSuccess(\r\n        uint256 indexed shardPoolId,\r\n        uint256 platformAmount,\r\n        uint256 shardForStakers,\r\n        uint256 balanceOfWantToken,\r\n        uint256 fee,\r\n        address shardToken\r\n    );\r\n    event SettleFail(uint256 indexed shardPoolId);\r\n    event ApplyForBuyout(\r\n        address indexed sender,\r\n        uint256 indexed proposalId,\r\n        uint256 indexed _shardPoolId,\r\n        uint256 shardAmount,\r\n        uint256 wantTokenAmount,\r\n        uint256 voteDeadline,\r\n        uint256 buyoutTimes,\r\n        uint256 price,\r\n        uint256 blockHeight\r\n    );\r\n    event Vote(\r\n        address indexed sender,\r\n        uint256 indexed proposalId,\r\n        uint256 indexed _shardPoolId,\r\n        bool isAgree,\r\n        uint256 voteAmount\r\n    );\r\n    event VoteResultConfirm(\r\n        uint256 indexed proposalId,\r\n        uint256 indexed _shardPoolId,\r\n        bool isPassed\r\n    );\r\n\r\n    // user operation\r\n    function createShard(\r\n        Token721[] calldata Token721s,\r\n        Token1155[] calldata Token1155s,\r\n        string memory shardName,\r\n        string memory shardSymbol,\r\n        uint256 minWantTokenAmount,\r\n        address wantToken\r\n    ) external virtual returns (uint256 shardPoolId);\r\n\r\n    function stakeETH(uint256 _shardPoolId) external payable virtual;\r\n\r\n    function stake(uint256 _shardPoolId, uint256 amount) external virtual;\r\n\r\n    function redeem(uint256 _shardPoolId, uint256 amount) external virtual;\r\n\r\n    function redeemETH(uint256 _shardPoolId, uint256 amount) external virtual;\r\n\r\n    function settle(uint256 _shardPoolId) external virtual;\r\n\r\n    function redeemInSubscriptionFailed(uint256 _shardPoolId) external virtual;\r\n\r\n    function usersWithdrawShardToken(uint256 _shardPoolId) external virtual;\r\n\r\n    function creatorWithdrawWantToken(uint256 _shardPoolId) external virtual;\r\n\r\n    function applyForBuyout(uint256 _shardPoolId, uint256 wantTokenAmount)\r\n        external\r\n        virtual\r\n        returns (uint256 proposalId);\r\n\r\n    function applyForBuyoutETH(uint256 _shardPoolId)\r\n        external\r\n        payable\r\n        virtual\r\n        returns (uint256 proposalId);\r\n\r\n    function vote(uint256 _shardPoolId, bool isAgree) external virtual;\r\n\r\n    function voteResultConfirm(uint256 _shardPoolId)\r\n        external\r\n        virtual\r\n        returns (bool result);\r\n\r\n    function exchangeForWantToken(uint256 _shardPoolId, uint256 shardAmount)\r\n        external\r\n        virtual\r\n        returns (uint256 wantTokenAmount);\r\n\r\n    function redeemForBuyoutFailed(uint256 _proposalId)\r\n        external\r\n        virtual\r\n        returns (uint256 shardTokenAmount, uint256 wantTokenAmount);\r\n\r\n    //governance operation\r\n    function setShardsCreatorProportion(uint256 _shardsCreatorProportion)\r\n        external\r\n        virtual;\r\n\r\n    function setPlatformProportion(uint256 _platformProportion)\r\n        external\r\n        virtual;\r\n\r\n    function setTotalSupply(uint256 _totalSupply) external virtual;\r\n\r\n    function setDeadlineForRedeem(uint256 _deadlineForRedeem) external virtual;\r\n\r\n    function setDeadlineForStake(uint256 _deadlineForStake) external virtual;\r\n\r\n    function setProfitProportionForDev(uint256 _profitProportionForDev)\r\n        external\r\n        virtual;\r\n\r\n    function setShardsFarm(address _shardsFarm) external virtual;\r\n\r\n    function setRegulator(address _regulator) external virtual;\r\n\r\n    function setFactory(address _factory) external virtual;\r\n\r\n    function setShardsFactory(address _shardsFactory) external virtual;\r\n\r\n    function setRouter(address _router) external virtual;\r\n\r\n    //admin operation\r\n    function setPlatformFund(address _platformFund) external virtual;\r\n\r\n    function setDev(address _dev) external virtual;\r\n\r\n    //function shardAudit(uint256 _shardPoolId, bool isPassed) external virtual;\r\n\r\n    //view function\r\n    function getPrice(uint256 _shardPoolId)\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint256 currentPrice);\r\n\r\n    function getAllPools()\r\n        external\r\n        view\r\n        virtual\r\n        returns (uint256[] memory _pools);\r\n\r\n    function getTokens(uint256 shardPoolId)\r\n        external\r\n        view\r\n        virtual\r\n        returns (Token721[] memory _token721s, Token1155[] memory _token1155s);\r\n}\r\n\r\n// File: contracts/MarketRegulator.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\ncontract MarketRegulator {\r\n    constructor() public {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    event BlacklistAdd(uint256 indexed _shardPoolId);\r\n    event BlacklistRemove(uint256 indexed _shardPoolId);\r\n\r\n    address public admin;\r\n    address public market;\r\n\r\n    mapping(address => uint256) internal whiteListIndexForWantToken; // savedIndex = realIndex + 1\r\n    struct whiteListToken {\r\n        address token;\r\n        string symbol;\r\n    }\r\n    whiteListToken[] internal wantTokenWhiteList;\r\n\r\n    mapping(uint256 => uint256) internal blacklistIndexForShardPool;\r\n    uint256[] internal shardPoolBlacklist;\r\n\r\n    function setWhiteListForWantToken(address wantToken, bool isListed)\r\n        external\r\n    {\r\n        require(msg.sender == admin, \"UNAUTHORIZED\");\r\n        require(wantToken != address(0), \"INVALID INPUT\");\r\n        uint256 index = whiteListIndexForWantToken[wantToken];\r\n        require(\r\n            (index > 0 && !isListed) || (index == 0 && isListed),\r\n            \"AlREADY SET\"\r\n        );\r\n\r\n        if (index > 0 && !isListed) {\r\n            if (index < wantTokenWhiteList.length) {\r\n                whiteListIndexForWantToken[\r\n                    wantTokenWhiteList[wantTokenWhiteList.length - 1].token\r\n                ] = index;\r\n                wantTokenWhiteList[index - 1] = wantTokenWhiteList[\r\n                    wantTokenWhiteList.length - 1\r\n                ];\r\n            }\r\n            whiteListIndexForWantToken[wantToken] = 0;\r\n            wantTokenWhiteList.pop();\r\n        }\r\n        if (index == 0 && isListed) {\r\n            string memory tokenSymbol = IERC20(wantToken).symbol();\r\n            wantTokenWhiteList.push(\r\n                whiteListToken({token: wantToken, symbol: tokenSymbol})\r\n            );\r\n            whiteListIndexForWantToken[wantToken] = wantTokenWhiteList.length;\r\n        }\r\n    }\r\n\r\n    function setBlacklistForShardPool(uint256 _shardPoolId, bool isListed)\r\n        external\r\n    {\r\n        require(msg.sender == admin, \"UNAUTHORIZED\");\r\n        require(\r\n            _shardPoolId <= IShardsMarket(market).shardPoolIdCount(),\r\n            \"NOT EXIST\"\r\n        );\r\n\r\n        uint256 index = blacklistIndexForShardPool[_shardPoolId];\r\n        require(\r\n            (index > 0 && !isListed) || (index == 0 && isListed),\r\n            \"AlREADY SET\"\r\n        );\r\n\r\n        if (index > 0 && !isListed) {\r\n            if (index < shardPoolBlacklist.length) {\r\n                blacklistIndexForShardPool[\r\n                    shardPoolBlacklist[shardPoolBlacklist.length - 1]\r\n                ] = index;\r\n                shardPoolBlacklist[index - 1] = shardPoolBlacklist[\r\n                    shardPoolBlacklist.length - 1\r\n                ];\r\n            }\r\n            blacklistIndexForShardPool[_shardPoolId] = 0;\r\n            shardPoolBlacklist.pop();\r\n            emit BlacklistRemove(_shardPoolId);\r\n        }\r\n        if (index == 0 && isListed) {\r\n            shardPoolBlacklist.push(_shardPoolId);\r\n            blacklistIndexForShardPool[_shardPoolId] = shardPoolBlacklist\r\n                .length;\r\n            emit BlacklistAdd(_shardPoolId);\r\n        }\r\n    }\r\n\r\n    function setAdmin(address _admin) external {\r\n        require(msg.sender == admin, \"UNAUTHORIZED\");\r\n        admin = _admin;\r\n    }\r\n\r\n    function getWantTokenWhiteList()\r\n        external\r\n        view\r\n        returns (whiteListToken[] memory _wantTokenWhiteList)\r\n    {\r\n        _wantTokenWhiteList = wantTokenWhiteList;\r\n    }\r\n\r\n    function getBlacklistPools()\r\n        external\r\n        view\r\n        returns (uint256[] memory _blacklistPools)\r\n    {\r\n        _blacklistPools = shardPoolBlacklist;\r\n    }\r\n\r\n    function IsInWhiteList(address wantToken)\r\n        external\r\n        view\r\n        returns (bool inTheList)\r\n    {\r\n        uint256 index = whiteListIndexForWantToken[wantToken];\r\n        if (index == 0) inTheList = false;\r\n        else inTheList = true;\r\n    }\r\n\r\n    function IsInBlackList(uint256 _shardPoolId)\r\n        external\r\n        view\r\n        returns (bool inTheList)\r\n    {\r\n        uint256 index = blacklistIndexForShardPool[_shardPoolId];\r\n        if (index == 0) inTheList = false;\r\n        else inTheList = true;\r\n    }\r\n\r\n    function setMarket(address _market) external {\r\n        require(msg.sender == admin, \"UNAUTHORIZED\");\r\n        market = _market;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_shardPoolId\",\"type\":\"uint256\"}],\"name\":\"BlacklistAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_shardPoolId\",\"type\":\"uint256\"}],\"name\":\"BlacklistRemove\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shardPoolId\",\"type\":\"uint256\"}],\"name\":\"IsInBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"inTheList\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wantToken\",\"type\":\"address\"}],\"name\":\"IsInWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"inTheList\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlacklistPools\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_blacklistPools\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWantTokenWhiteList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct MarketRegulator.whiteListToken[]\",\"name\":\"_wantTokenWhiteList\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"market\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shardPoolId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"}],\"name\":\"setBlacklistForShardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"}],\"name\":\"setMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wantToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"}],\"name\":\"setWhiteListForWantToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MarketRegulator","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://251503bcebb133e6e027679c68221c4445ec1a84a58eb9d7351788f09955a960"}]}