{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.2 \\u003c0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"Peggy.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\n\\ncontract Peggy {\\n\\tusing SafeMath for uint256;\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t// These are updated often\\n\\tbytes32 public state_lastValsetCheckpoint;\\n\\tmapping(address =\\u003e uint256) public state_lastBatchNonces;\\n\\tuint256 public state_lastValsetNonce = 0;\\n\\tuint256 public state_lastEventNonce = 0;\\n\\n\\t// These are set once at initialization\\n\\tbytes32 public state_peggyId;\\n\\tuint256 public state_powerThreshold;\\n\\n\\tbool public halted = false;\\n\\tbool public depositsStopped = false;\\n\\taddress public guardian;\\n\\n\\tevent TransactionBatchExecutedEvent(\\n\\t\\tuint256 indexed _batchNonce,\\n\\t\\taddress indexed _token,\\n\\t\\taddress indexed _sender,\\n\\t\\tuint256 _eventNonce\\n\\t);\\n\\tevent SendToHubEvent(\\n\\t\\taddress indexed _tokenContract,\\n\\t\\taddress indexed _sender,\\n\\t\\tbytes32 indexed _destination,\\n\\t\\tuint256 _amount,\\n\\t\\tuint256 _eventNonce\\n\\t);\\n\\tevent SendToMinterEvent(\\n\\t\\taddress indexed _tokenContract,\\n\\t\\taddress indexed _sender,\\n\\t\\tbytes32 indexed _destination,\\n\\t\\tuint256 _amount,\\n\\t\\tuint256 _eventNonce\\n\\t);\\n\\tevent ValsetUpdatedEvent(\\n\\t\\tuint256 indexed _newValsetNonce,\\n\\t\\taddress[] _validators,\\n\\t\\tuint256[] _powers\\n\\t);\\n\\n\\tfunction lastBatchNonce(address _erc20Address) public view returns (uint256) {\\n\\t\\treturn state_lastBatchNonces[_erc20Address];\\n\\t}\\n\\n\\t// Utility function to verify geth style signatures\\n\\tfunction verifySig(\\n\\t\\taddress _signer,\\n\\t\\tbytes32 _theHash,\\n\\t\\tuint8 _v,\\n\\t\\tbytes32 _r,\\n\\t\\tbytes32 _s\\n\\t) private pure returns (bool) {\\n\\t\\tbytes32 messageDigest = keccak256(\\n\\t\\t\\tabi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _theHash)\\n\\t\\t);\\n\\t\\treturn _signer == ecrecover(messageDigest, _v, _r, _s);\\n\\t}\\n\\n\\t// Make a new checkpoint from the supplied validator set\\n\\t// A checkpoint is a hash of all relevant information about the valset. This is stored by the contract,\\n\\t// instead of storing the information directly. This saves on storage and gas.\\n\\t// The format of the checkpoint is:\\n\\t// h(peggyId, \\\"checkpoint\\\", valsetNonce, validators[], powers[])\\n\\t// Where h is the keccak256 hash function.\\n\\t// The validator powers must be decreasing or equal. This is important for checking the signatures on the\\n\\t// next valset, since it allows the caller to stop verifying signatures once a quorum of signatures have been verified.\\n\\tfunction makeCheckpoint(\\n\\t\\taddress[] memory _validators,\\n\\t\\tuint256[] memory _powers,\\n\\t\\tuint256 _valsetNonce,\\n\\t\\tbytes32 _peggyId\\n\\t) private pure returns (bytes32) {\\n\\t\\t// bytes32 encoding of the string \\\"checkpoint\\\"\\n\\t\\tbytes32 methodName = 0x636865636b706f696e7400000000000000000000000000000000000000000000;\\n\\n\\t\\tbytes32 checkpoint = keccak256(\\n\\t\\t\\tabi.encode(_peggyId, methodName, _valsetNonce, _validators, _powers)\\n\\t\\t);\\n\\n\\t\\treturn checkpoint;\\n\\t}\\n\\n\\tfunction checkValidatorSignatures(\\n\\t\\t// The current validator set and their powers\\n\\t\\taddress[] memory _currentValidators,\\n\\t\\tuint256[] memory _currentPowers,\\n\\t\\t// The current validator\\u0027s signatures\\n\\t\\tuint8[] memory _v,\\n\\t\\tbytes32[] memory _r,\\n\\t\\tbytes32[] memory _s,\\n\\t\\t// This is what we are checking they have signed\\n\\t\\tbytes32 _theHash,\\n\\t\\tuint256 _powerThreshold\\n\\t) private pure {\\n\\t\\tuint256 cumulativePower = 0;\\n\\n\\t\\tfor (uint256 i = 0; i \\u003c _currentValidators.length; i++) {\\n\\t\\t\\t// If v is set to 0, this signifies that it was not possible to get a signature from this validator and we skip evaluation\\n\\t\\t\\t// (In a valid signature, it is either 27 or 28)\\n\\t\\t\\tif (_v[i] != 0) {\\n\\t\\t\\t\\t// Check that the current validator has signed off on the hash\\n\\t\\t\\t\\trequire(\\n\\t\\t\\t\\t\\tverifySig(_currentValidators[i], _theHash, _v[i], _r[i], _s[i]),\\n\\t\\t\\t\\t\\t\\\"Validator signature does not match.\\\"\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t// Sum up cumulative power\\n\\t\\t\\t\\tcumulativePower = cumulativePower + _currentPowers[i];\\n\\n\\t\\t\\t\\t// Break early to avoid wasting gas\\n\\t\\t\\t\\tif (cumulativePower \\u003e _powerThreshold) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Check that there was enough power\\n\\t\\trequire(\\n\\t\\t\\tcumulativePower \\u003e _powerThreshold,\\n\\t\\t\\t\\\"Submitted validator set signatures do not have enough power.\\\"\\n\\t\\t);\\n\\t\\t// Success\\n\\t}\\n\\n\\t// This updates the valset by checking that the validators in the current valset have signed off on the\\n\\t// new valset. The signatures supplied are the signatures of the current valset over the checkpoint hash\\n\\t// generated from the new valset.\\n\\t// Anyone can call this function, but they must supply valid signatures of state_powerThreshold of the current valset over\\n\\t// the new valset.\\n\\tfunction updateValset(\\n\\t\\t// The new version of the validator set\\n\\t\\taddress[] memory _newValidators,\\n\\t\\tuint256[] memory _newPowers,\\n\\t\\tuint256 _newValsetNonce,\\n\\t\\t// The current validators that approve the change\\n\\t\\taddress[] memory _currentValidators,\\n\\t\\tuint256[] memory _currentPowers,\\n\\t\\tuint256 _currentValsetNonce,\\n\\t\\t// These are arrays of the parts of the current validator\\u0027s signatures\\n\\t\\tuint8[] memory _v,\\n\\t\\tbytes32[] memory _r,\\n\\t\\tbytes32[] memory _s\\n\\t) public {\\n\\t\\t// CHECKS\\n\\n\\t\\trequire(!halted, \\\"contract halted\\\");\\n\\n\\t\\t// Check that the valset nonce is greater than the old one\\n\\t\\trequire(\\n\\t\\t\\t_newValsetNonce \\u003e _currentValsetNonce,\\n\\t\\t\\t\\\"New valset nonce must be greater than the current nonce\\\"\\n\\t\\t);\\n\\n\\t\\t// Check that new validators and powers set is well-formed\\n\\t\\trequire(_newValidators.length == _newPowers.length, \\\"Malformed new validator set\\\");\\n\\n\\t\\t// Check that current validators, powers, and signatures (v,r,s) set is well-formed\\n\\t\\trequire(\\n\\t\\t\\t_currentValidators.length == _currentPowers.length \\u0026\\u0026\\n\\t\\t\\t\\t_currentValidators.length == _v.length \\u0026\\u0026\\n\\t\\t\\t\\t_currentValidators.length == _r.length \\u0026\\u0026\\n\\t\\t\\t\\t_currentValidators.length == _s.length,\\n\\t\\t\\t\\\"Malformed current validator set\\\"\\n\\t\\t);\\n\\n\\t\\t// Check that the supplied current validator set matches the saved checkpoint\\n\\t\\trequire(\\n\\t\\t\\tmakeCheckpoint(\\n\\t\\t\\t\\t_currentValidators,\\n\\t\\t\\t\\t_currentPowers,\\n\\t\\t\\t\\t_currentValsetNonce,\\n\\t\\t\\t\\tstate_peggyId\\n\\t\\t\\t) == state_lastValsetCheckpoint,\\n\\t\\t\\t\\\"Supplied current validators and powers do not match checkpoint.\\\"\\n\\t\\t);\\n\\n\\t\\t// Check that enough current validators have signed off on the new validator set\\n\\t\\tbytes32 newCheckpoint = makeCheckpoint(\\n\\t\\t\\t_newValidators,\\n\\t\\t\\t_newPowers,\\n\\t\\t\\t_newValsetNonce,\\n\\t\\t\\tstate_peggyId\\n\\t\\t);\\n\\n\\t\\tcheckValidatorSignatures(\\n\\t\\t\\t_currentValidators,\\n\\t\\t\\t_currentPowers,\\n\\t\\t\\t_v,\\n\\t\\t\\t_r,\\n\\t\\t\\t_s,\\n\\t\\t\\tnewCheckpoint,\\n\\t\\t\\tstate_powerThreshold\\n\\t\\t);\\n\\n\\t\\t// ACTIONS\\n\\n\\t\\t// Stored to be used next time to validate that the valset\\n\\t\\t// supplied by the caller is correct.\\n\\t\\tstate_lastValsetCheckpoint = newCheckpoint;\\n\\n\\t\\t// Store new nonce\\n\\t\\tstate_lastValsetNonce = _newValsetNonce;\\n\\n\\t\\t// LOGS\\n\\n\\t\\temit ValsetUpdatedEvent(_newValsetNonce, _newValidators, _newPowers);\\n\\t}\\n\\n\\t// submitBatch processes a batch of Hub -\\u003e Ethereum transactions by sending the tokens in the transactions\\n\\t// to the destination addresses. It is approved by the current Hub validator set.\\n\\t// Anyone can call this function, but they must supply valid signatures of state_powerThreshold of the current valset over\\n\\t// the batch.\\n\\tfunction submitBatch(\\n\\t\\t// The validators that approve the batch\\n\\t\\taddress[] memory _currentValidators,\\n\\t\\tuint256[] memory _currentPowers,\\n\\t\\tuint256 _currentValsetNonce,\\n\\t\\t// These are arrays of the parts of the validators signatures\\n\\t\\tuint8[] memory _v,\\n\\t\\tbytes32[] memory _r,\\n\\t\\tbytes32[] memory _s,\\n\\t\\t// The batch of transactions\\n\\t\\tuint256[] memory _amounts,\\n\\t\\taddress[] memory _destinations,\\n\\t\\tuint256 _batchNonce,\\n\\t\\taddress _tokenContract\\n\\t) public {\\n\\t\\t// CHECKS scoped to reduce stack depth\\n\\t\\t{\\n\\t\\t\\trequire(!halted, \\\"contract halted\\\");\\n\\n\\t\\t\\t// Check that the batch nonce is higher than the last nonce for this token\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tstate_lastBatchNonces[_tokenContract] \\u003c _batchNonce,\\n\\t\\t\\t\\t\\\"New batch nonce must be greater than the current nonce\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Check that current validators, powers, and signatures (v,r,s) set is well-formed\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t_currentValidators.length == _currentPowers.length \\u0026\\u0026\\n\\t\\t\\t\\t\\t_currentValidators.length == _v.length \\u0026\\u0026\\n\\t\\t\\t\\t\\t_currentValidators.length == _r.length \\u0026\\u0026\\n\\t\\t\\t\\t\\t_currentValidators.length == _s.length,\\n\\t\\t\\t\\t\\\"Malformed current validator set\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Check that the supplied current validator set matches the saved checkpoint\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tmakeCheckpoint(\\n\\t\\t\\t\\t\\t_currentValidators,\\n\\t\\t\\t\\t\\t_currentPowers,\\n\\t\\t\\t\\t\\t_currentValsetNonce,\\n\\t\\t\\t\\t\\tstate_peggyId\\n\\t\\t\\t\\t) == state_lastValsetCheckpoint,\\n\\t\\t\\t\\t\\\"Supplied current validators and powers do not match checkpoint.\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Check that the transaction batch is well-formed\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t_amounts.length == _destinations.length,\\n\\t\\t\\t\\t\\\"Malformed batch of transactions\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Check that enough current validators have signed off on the transaction batch and valset\\n\\t\\t\\tcheckValidatorSignatures(\\n\\t\\t\\t\\t_currentValidators,\\n\\t\\t\\t\\t_currentPowers,\\n\\t\\t\\t\\t_v,\\n\\t\\t\\t\\t_r,\\n\\t\\t\\t\\t_s,\\n\\t\\t\\t\\t// Get hash of the transaction batch and checkpoint\\n\\t\\t\\t\\tkeccak256(\\n\\t\\t\\t\\t\\tabi.encode(\\n\\t\\t\\t\\t\\t\\tstate_peggyId,\\n\\t\\t\\t\\t\\t\\t// bytes32 encoding of \\\"transactionBatch\\\"\\n\\t\\t\\t\\t\\t\\t0x7472616e73616374696f6e426174636800000000000000000000000000000000,\\n\\t\\t\\t\\t\\t\\t_amounts,\\n\\t\\t\\t\\t\\t\\t_destinations,\\n\\t\\t\\t\\t\\t\\t_batchNonce,\\n\\t\\t\\t\\t\\t\\t_tokenContract\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t),\\n\\t\\t\\t\\tstate_powerThreshold\\n\\t\\t\\t);\\n\\n\\t\\t\\t// ACTIONS\\n\\n\\t\\t\\t// Store batch nonce\\n\\t\\t\\tstate_lastBatchNonces[_tokenContract] = _batchNonce;\\n\\n\\t\\t\\t{\\n\\t\\t\\t\\t// Send transaction amounts to destinations\\n\\t\\t\\t\\tfor (uint256 i = 0; i \\u003c _amounts.length; i++) {\\n\\t\\t\\t\\t\\tIERC20(_tokenContract).safeTransfer(_destinations[i], _amounts[i]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// LOGS scoped to reduce stack depth\\n\\t\\t{\\n\\t\\t\\tstate_lastEventNonce = state_lastEventNonce.add(1);\\n\\t\\t\\temit TransactionBatchExecutedEvent(_batchNonce, _tokenContract, msg.sender, state_lastEventNonce);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction sendToHub(\\n\\t\\taddress _tokenContract,\\n\\t\\tbytes32 _destination,\\n\\t\\tuint256 _amount\\n\\t) public {\\n\\t\\trequire(!halted, \\\"contract halted\\\");\\n\\t\\trequire(!depositsStopped, \\\"deposits stopped\\\");\\n\\n\\t\\tIERC20(_tokenContract).safeTransferFrom(msg.sender, address(this), _amount);\\n\\t\\tstate_lastEventNonce = state_lastEventNonce.add(1);\\n\\t\\temit SendToHubEvent(\\n\\t\\t\\t_tokenContract,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\t_destination,\\n\\t\\t\\t_amount,\\n\\t\\t\\tstate_lastEventNonce\\n\\t\\t);\\n\\t}\\n\\n\\tfunction sendToMinter(\\n\\t\\taddress _tokenContract,\\n\\t\\tbytes32 _destination,\\n\\t\\tuint256 _amount\\n\\t) public {\\n\\t\\tIERC20(_tokenContract).safeTransferFrom(msg.sender, address(this), _amount);\\n\\t\\tstate_lastEventNonce = state_lastEventNonce.add(1);\\n\\t\\temit SendToMinterEvent(\\n\\t\\t\\t_tokenContract,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\t_destination,\\n\\t\\t\\t_amount,\\n\\t\\t\\tstate_lastEventNonce\\n\\t\\t);\\n\\t}\\n\\n\\tfunction toggleHalt() public {\\n\\t\\trequire(msg.sender == guardian, \\\"permission denied\\\");\\n\\n\\t\\thalted = !halted;\\n\\t}\\n\\n\\tfunction toggleDeposits() public {\\n\\t\\trequire(msg.sender == guardian, \\\"permission denied\\\");\\n\\n\\t\\tdepositsStopped = !depositsStopped;\\n\\t}\\n\\n\\tfunction changeGuardian(address _guardian) public {\\n\\t\\trequire(msg.sender == guardian, \\\"permission denied\\\");\\n\\n\\t\\tguardian = _guardian;\\n\\t}\\n\\n\\tfunction panicHalt(address[] memory _tokenContracts, address _safeAddress) public {\\n\\t\\trequire(msg.sender == guardian, \\\"permission denied\\\");\\n\\n\\t\\thalted = true;\\n\\t\\tdepositsStopped = true;\\n\\n\\t\\tfor (uint256 i = 0; i \\u003c _tokenContracts.length; i++) {\\n\\t\\t\\tIERC20 token = IERC20(_tokenContracts[i]);\\n\\t\\t\\ttoken.safeTransfer(_safeAddress, token.balanceOf(address(this)));\\n\\t\\t}\\n\\t}\\n\\n\\tconstructor(\\n\\t\\t// A unique identifier for this peggy instance to use in signatures\\n\\t\\tbytes32 _peggyId,\\n\\t\\t// How much voting power is needed to approve operations\\n\\t\\tuint256 _powerThreshold,\\n\\t\\t// The validator set\\n\\t\\taddress[] memory _validators,\\n\\t\\tuint256[] memory _powers,\\n\\t\\taddress _guardian\\n\\t) public {\\n\\t\\t// CHECKS\\n\\n\\t\\t// Check that validators, powers, and signatures (v,r,s) set is well-formed\\n\\t\\trequire(_validators.length == _powers.length, \\\"Malformed current validator set\\\");\\n\\n\\t\\t// Check cumulative power to ensure the contract has sufficient power to actually\\n\\t\\t// pass a vote\\n\\t\\tuint256 cumulativePower = 0;\\n\\t\\tfor (uint256 i = 0; i \\u003c _powers.length; i++) {\\n\\t\\t\\tcumulativePower = cumulativePower + _powers[i];\\n\\t\\t\\tif (cumulativePower \\u003e _powerThreshold) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\trequire(\\n\\t\\t\\tcumulativePower \\u003e _powerThreshold,\\n\\t\\t\\t\\\"Submitted validator set signatures do not have enough power.\\\"\\n\\t\\t);\\n\\n\\t\\tbytes32 newCheckpoint = makeCheckpoint(_validators, _powers, 0, _peggyId);\\n\\n\\t\\t// ACTIONS\\n\\n\\t\\tstate_peggyId = _peggyId;\\n\\t\\tstate_powerThreshold = _powerThreshold;\\n\\t\\tstate_lastValsetCheckpoint = newCheckpoint;\\n\\n\\t\\tguardian = _guardian;\\n\\n\\t\\t// LOGS\\n\\n\\t\\temit ValsetUpdatedEvent(0, _validators, _powers);\\n\\t}\\n}\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length \\u003e 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c \\u003c a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b \\u003e a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003e 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_peggyId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_powerThreshold\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_destination\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"}],\"name\":\"SendToHubEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_destination\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"}],\"name\":\"SendToMinterEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_batchNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"}],\"name\":\"TransactionBatchExecutedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_newValsetNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"name\":\"ValsetUpdatedEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"changeGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositsStopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"}],\"name\":\"lastBatchNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenContracts\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_safeAddress\",\"type\":\"address\"}],\"name\":\"panicHalt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_destination\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendToHub\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_destination\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendToMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"state_lastBatchNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_lastEventNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_lastValsetCheckpoint\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_lastValsetNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_peggyId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_powerThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_currentValidators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_currentPowers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_currentValsetNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"_v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_s\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_destinations\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_batchNonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"submitBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleHalt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newValidators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_newPowers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_newValsetNonce\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_currentValidators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_currentPowers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_currentValsetNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"_v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_s\",\"type\":\"bytes32[]\"}],\"name\":\"updateValset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Peggy","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"6d696e7465722d6875622d31000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaaa00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000070ad4814d105bfacc2426deb15b89626e9af53dd00000000000000000000000000000000000000000000000000000000000000010000000000000000000000006d5fd7b9385da6734e596d1e75e55dec945f53f2000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000ffffffff","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0614f7554c6795b7e2139662a075cf61276ccccfed8888b94bd358adc51aa374"}]}