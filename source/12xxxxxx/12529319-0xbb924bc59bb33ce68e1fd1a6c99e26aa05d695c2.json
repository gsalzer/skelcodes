{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary UniswapV2SingleSided {\r\n\r\n  using SafeMath for uint256;\r\n    \r\n  // implementation from https://github.com/Uniswap/uniswap-lib/commit/99f3f28770640ba1bb1ff460ac7c5292fb8291a0\r\n  // original implementation: https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\r\n  function sqrt(uint256 x) internal pure returns (uint256) {\r\n        if (x == 0) return 0;\r\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\r\n        // however that code costs significantly more gas\r\n        uint256 xx = x;\r\n        uint256 r = 1;\r\n        if (xx >= 0x100000000000000000000000000000000) {\r\n            xx >>= 128;\r\n            r <<= 64;\r\n        }\r\n        if (xx >= 0x10000000000000000) {\r\n            xx >>= 64;\r\n            r <<= 32;\r\n        }\r\n        if (xx >= 0x100000000) {\r\n            xx >>= 32;\r\n            r <<= 16;\r\n        }\r\n        if (xx >= 0x10000) {\r\n            xx >>= 16;\r\n            r <<= 8;\r\n        }\r\n        if (xx >= 0x100) {\r\n            xx >>= 8;\r\n            r <<= 4;\r\n        }\r\n        if (xx >= 0x10) {\r\n            xx >>= 4;\r\n            r <<= 2;\r\n        }\r\n        if (xx >= 0x8) {\r\n            r <<= 1;\r\n        }\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1; // Seven iterations should be enough\r\n        uint256 r1 = x / r;\r\n        return (r < r1 ? r : r1);\r\n    }\r\n    \r\n    // https://blog.alphafinance.io/onesideduniswap/\r\n    // zapperfi impl: https://etherscan.io/address/0xcff6ef0b9916682b37d80c19cff8949bc1886bc2#code#L1246\r\n    function calculateSingleSidedAmt(uint256 amtA, uint256 resA) internal pure returns (uint256) {\r\n        uint256 _swapAmt = sqrt(resA.mul(amtA.mul(3988000) + resA.mul(3988009))).sub(resA.mul(1997)) / 1994;\r\n        return _swapAmt > amtA? amtA : _swapAmt;\r\n    }\r\n    \r\n    // https://blog.alphafinance.io/fair-lp-token-pricing/\r\n    function calcFairReserves(uint256 resK, uint256 priceA2BRatioBps) internal pure returns (uint256, uint256) {\r\n        return (sqrt(resK.mul(10000).div(priceA2BRatioBps)), sqrt(resK.mul(priceA2BRatioBps).div(10000)));\r\n    }\r\n    \r\n}\r\n\r\ninterface UniswapRouterV2 {\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n    \r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n    \r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n    \r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    \r\n}\r\n\r\ninterface IController {\r\n    function vaults(address) external view returns (address);\r\n\r\n    function devfund() external view returns (address);\r\n\r\n    function treasury() external view returns (address);\r\n\r\n}\r\n\r\ninterface IMasterchef {\r\n    function notifyBuybackReward(uint256 _amount) external;\r\n}\r\n\r\ninterface IPickleFarmingGauge {\r\n   function balanceOf(address account) external view returns (uint256);\r\n   function earned(address account) external view returns (uint256);\t\t\r\n   function getReward() external;\r\n   function deposit(uint256 _amount) external;\r\n   function depositAll() external;\r\n   function withdraw(uint256 amount) external;\r\n   function withdrawAll() external;\r\n}\r\n\r\ninterface IPickleJar {\r\n   function balanceOf(address account) external view returns (uint256);\r\n   function deposit(uint256 _amount) external;\r\n   function depositAll() external;\r\n   function withdraw(uint256 _shares) external;\r\n   function withdrawAll() external;\r\n   function getRatio() external view returns (uint256);\r\n}\r\n\r\ninterface IYvBOOSTVault {\r\n   function pricePerShare() external view returns (uint256);\r\n   function balanceOf(address account) external view returns (uint256);\r\n   function deposit(uint256, address) external returns (uint256);\r\n   function withdraw(uint256, address, uint256) external returns (uint256);\r\n}\r\n\r\n// Strategy Contract Basics\r\nabstract contract StrategyBase {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    // Perfomance fee 30% to buyback\r\n    uint256 public performanceFee = 30000;\r\n    uint256 public constant performanceMax = 100000;\r\n\r\n    // Withdrawal fee 0.2% to buyback\r\n    // - 0.14% to treasury\r\n    // - 0.06% to dev fund\r\n    uint256 public treasuryFee = 140;\r\n    uint256 public constant treasuryMax = 100000;\r\n\r\n    uint256 public devFundFee = 60;\r\n    uint256 public constant devFundMax = 100000;\r\n\r\n    // delay yield profit realization\r\n    uint256 public delayBlockRequired = 1000;\r\n    uint256 public lastHarvestBlock;\r\n    uint256 public lastHarvestInWant;\r\n\r\n    // buyback ready\r\n    bool public buybackEnabled = true;\r\n    address public mmToken = 0xa283aA7CfBB27EF0cfBcb2493dD9F4330E0fd304;\r\n    address public masterChef = 0xf8873a6080e8dbF41ADa900498DE0951074af577;\r\n\r\n    // Tokens\r\n    address public want;\r\n    address public constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    // buyback coins\r\n    address public constant usdcBuyback = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n\r\n    // User accounts\r\n    address public governance;\r\n    address public controller;\r\n    address public strategist;\r\n    address public timelock;\r\n\r\n    // Dex\r\n    address public univ2Router2 = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n\r\n    //Sushi\r\n    address public sushiRouter = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\r\n\r\n    constructor(\r\n        address _want,\r\n        address _governance,\r\n        address _strategist,\r\n        address _controller,\r\n        address _timelock\r\n    ) public {\r\n        require(_want != address(0));\r\n        require(_governance != address(0));\r\n        require(_strategist != address(0));\r\n        require(_controller != address(0));\r\n        require(_timelock != address(0));\r\n\r\n        want = _want;\r\n        governance = _governance;\r\n        strategist = _strategist;\r\n        controller = _controller;\r\n        timelock = _timelock;\r\n    }\r\n\r\n    // **** Modifiers **** //\r\n\r\n    modifier onlyBenevolent {\r\n        // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-3074.md#allowing-txorigin-as-signer\r\n        require(msg.sender == tx.origin || msg.sender == governance || msg.sender == strategist);\r\n        _;\r\n    }\r\n\r\n    // **** Views **** //\r\n\r\n    function balanceOfWant() public view returns (uint256) {\r\n        return IERC20(want).balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOfPool() public virtual view returns (uint256);\r\n\r\n    function balanceOf() public view returns (uint256) {\r\n        uint256 delayReduction;\r\n        uint256 currentBlock = block.number;\r\n        if (delayBlockRequired > 0 && lastHarvestInWant > 0 && currentBlock.sub(lastHarvestBlock) < delayBlockRequired){\r\n            uint256 diffBlock = lastHarvestBlock.add(delayBlockRequired).sub(currentBlock);\r\n            delayReduction = lastHarvestInWant.mul(diffBlock).mul(1e18).div(delayBlockRequired).div(1e18);\r\n        }\r\n        return balanceOfWant().add(balanceOfPool()).sub(delayReduction);\r\n    }\r\n\r\n    function getName() external virtual pure returns (string memory);\r\n\r\n    // **** Setters **** //\r\n\r\n    function setDelayBlockRequired(uint256 _delayBlockRequired) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        delayBlockRequired = _delayBlockRequired;\r\n    }\r\n\r\n    function setDevFundFee(uint256 _devFundFee) external {\r\n        require(msg.sender == timelock, \"!timelock\");\r\n        devFundFee = _devFundFee;\r\n    }\r\n\r\n    function setTreasuryFee(uint256 _treasuryFee) external {\r\n        require(msg.sender == timelock, \"!timelock\");\r\n        treasuryFee = _treasuryFee;\r\n    }\r\n\r\n    function setPerformanceFee(uint256 _performanceFee) external {\r\n        require(msg.sender == timelock, \"!timelock\");\r\n        performanceFee = _performanceFee;\r\n    }\r\n\r\n    function setStrategist(address _strategist) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        strategist = _strategist;\r\n    }\r\n\r\n    function setGovernance(address _governance) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        governance = _governance;\r\n    }\r\n\r\n    function setTimelock(address _timelock) external {\r\n        require(msg.sender == timelock, \"!timelock\");\r\n        timelock = _timelock;\r\n    }\r\n\r\n    function setController(address _controller) external {\r\n        require(msg.sender == timelock, \"!timelock\");\r\n        controller = _controller;\r\n    }\r\n\r\n    function setMmToken(address _mmToken) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        mmToken = _mmToken;\r\n    }\r\n\r\n    function setBuybackEnabled(bool _buybackEnabled) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        buybackEnabled = _buybackEnabled;\r\n    }\r\n\r\n    function setMasterChef(address _masterChef) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        masterChef = _masterChef;\r\n    }\r\n\r\n    function setUniRoute(address _route) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        univ2Router2 = _route;\r\n    }\r\n\r\n    function setSushiRoute(address _route) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        sushiRouter = _route;\r\n    }\r\n\r\n    // **** State mutations **** //\r\n    function deposit() public virtual;\r\n\r\n    function withdraw(IERC20 _asset) external virtual returns (uint256 balance);\r\n\r\n    // Controller only function for creating additional rewards from dust\r\n    function _withdrawNonWantAsset(IERC20 _asset) internal returns (uint256 balance) {\r\n        require(msg.sender == controller, \"!controller\");\r\n        require(want != address(_asset), \"want\");\r\n        balance = _asset.balanceOf(address(this));\r\n        _asset.safeTransfer(controller, balance);\r\n    }\r\n\r\n    // Withdraw partial funds, normally used with a vault withdrawal\r\n    function withdraw(uint256 _amount) external {\r\n        require(msg.sender == controller, \"!controller\");\r\n        uint256 _balance = IERC20(want).balanceOf(address(this));\r\n        if (_balance < _amount) {\r\n            _amount = _withdrawSome(_amount.sub(_balance));\r\n            _amount = _amount.add(_balance);\r\n        }\r\n\t\t\t\t\r\n        uint256 _feeDev = _amount.mul(devFundFee).div(devFundMax);\r\n        uint256 _feeTreasury = _amount.mul(treasuryFee).div(treasuryMax);\r\n\r\n        address _vault = IController(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n\r\n        if (buybackEnabled == true) {\r\n            // we want buyback mm using LP token\r\n            (address _buybackPrinciple, uint256 _buybackAmount) = _convertWantToBuyback(_feeDev.add(_feeTreasury));\r\n            buybackAndNotify(_buybackPrinciple, _buybackAmount);\r\n        } else {\r\n            IERC20(want).safeTransfer(IController(controller).devfund(), _feeDev);\r\n            IERC20(want).safeTransfer(IController(controller).treasury(), _feeTreasury);\r\n        }\r\n\r\n        IERC20(want).safeTransfer(_vault, _amount.sub(_feeDev).sub(_feeTreasury));\r\n    }\r\n\t\r\n    // buyback MM and notify MasterChef\r\n    function buybackAndNotify(address _buybackPrinciple, uint256 _buybackAmount) internal {\r\n        if (buybackEnabled == true) {\r\n            _swapUniswap(_buybackPrinciple, mmToken, _buybackAmount);\r\n            uint256 _mmBought = IERC20(mmToken).balanceOf(address(this));\r\n            IERC20(mmToken).safeTransfer(masterChef, _mmBought);\r\n            IMasterchef(masterChef).notifyBuybackReward(_mmBought);\r\n        }\r\n    }\r\n\r\n    // Withdraw all funds, normally used when migrating strategies\r\n    function withdrawAll() external returns (uint256 balance) {\r\n        require(msg.sender == controller, \"!controller\");\r\n        _withdrawAll();\r\n\r\n        balance = IERC20(want).balanceOf(address(this));\r\n\r\n        address _vault = IController(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n        IERC20(want).safeTransfer(_vault, balance);\r\n    }\r\n\r\n    function _withdrawAll() internal {\r\n        _withdrawSome(balanceOfPool());\r\n    }\r\n\r\n    function _withdrawSome(uint256 _amount) internal virtual returns (uint256);\t\r\n\t\r\n    // convert LP to buyback principle token\r\n    function _convertWantToBuyback(uint256 _lpAmount) internal virtual returns (address, uint256);\r\n\r\n    // each harvest need to update `lastHarvestBlock=block.number` and `lastHarvestInWant=yield profit converted to want for re-invest`\r\n    function harvest() public virtual;\r\n\r\n    // **** Emergency functions ****\r\n\r\n    function execute(address _target, bytes memory _data)\r\n        public\r\n        payable\r\n        returns (bytes memory response)\r\n    {\r\n        require(msg.sender == timelock, \"!timelock\");\r\n        require(_target != address(0), \"!target\");\r\n\r\n        // call contract in current context\r\n        assembly {\r\n            let succeeded := delegatecall(\r\n                sub(gas(), 5000),\r\n                _target,\r\n                add(_data, 0x20),\r\n                mload(_data),\r\n                0,\r\n                0\r\n            )\r\n            let size := returndatasize()\r\n\r\n            response := mload(0x40)\r\n            mstore(\r\n                0x40,\r\n                add(response, and(add(add(size, 0x20), 0x1f), not(0x1f)))\r\n            )\r\n            mstore(response, size)\r\n            returndatacopy(add(response, 0x20), 0, size)\r\n\r\n            switch iszero(succeeded)\r\n                case 1 {\r\n                    // throw if delegatecall failed\r\n                    revert(add(response, 0x20), size)\r\n                }\r\n        }\r\n    }\r\n\r\n    // **** Internal functions ****\r\n\t\r\n    function figureOutPath(address _from, address _to, uint256 _amount) public view returns (bool useSushi, address[] memory swapPath){\r\n        address[] memory path;\r\n        address[] memory sushipath;\r\n\t\t\r\n        if (_to == mmToken && buybackEnabled == true) {\r\n            path = new address[](2);\r\n            path[0] = _from;\r\n            path[1] = _to;\r\n            \r\n            sushipath = new address[](2);\r\n            sushipath[0] = _from;\r\n            sushipath[1] = _to;\r\n        } else{\r\n            if (_from == weth || _to == weth) {\r\n                path = new address[](2);\r\n                path[0] = _from;\r\n                path[1] = _to;\r\n            }else{\r\n                path = new address[](3);\r\n                path[0] = _from;\r\n                path[1] = weth;\r\n                path[2] = _to;\r\n            }\r\n        }\r\n\r\n        uint256 _sushiOut = sushipath.length > 0? UniswapRouterV2(sushiRouter).getAmountsOut(_amount, sushipath)[sushipath.length - 1] : 0;\r\n        uint256 _uniOut = sushipath.length > 0? UniswapRouterV2(univ2Router2).getAmountsOut(_amount, path)[path.length - 1] : 1;\r\n\r\n        bool useSushi = _sushiOut > _uniOut? true : false;\t\t\r\n        address[] memory swapPath = useSushi ? sushipath : path;\r\n\t\t\r\n        return (useSushi, swapPath);\r\n    }\r\n\t\r\n    function _swapUniswapWithRouterMinOut(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        uint256 _amountOutMin,\r\n        address _router\r\n    ) internal {\r\n        (, address[] memory swapPath) = figureOutPath(_from, _to, _amount);\t\t\r\n        _swapUniswapWithDetailConfig(_from, _to, _amount, _amountOutMin, swapPath, _router);\r\n    }\r\n\t\r\n    function _swapUniswapWithRouter(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        address _router\r\n    ) internal {\r\n        (, address[] memory swapPath) = figureOutPath(_from, _to, _amount);\t\t\r\n        _swapUniswapWithDetailConfig(_from, _to, _amount, 1, swapPath, _router);\r\n    }\r\n\t\r\n    function _swapUniswap(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal {\r\n        (bool useSushi, address[] memory swapPath) = figureOutPath(_from, _to, _amount);\r\n        address _router = useSushi? sushiRouter : univ2Router2;\r\n\t\t\r\n        _swapUniswapWithDetailConfig(_from, _to, _amount, 1, swapPath, _router);\r\n    }\r\n\t\r\n    function _swapUniswapWithDetailConfig(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        uint256 _amountOutMin,\r\n        address[] memory _swapPath,\r\n        address _router\r\n    ) internal {\r\n        require(_to != address(0), '!invalidOutToken');\r\n        require(_router != address(0), '!swapRouter');\r\n        require(IERC20(_from).balanceOf(address(this)) >= _amount, '!notEnoughtAmountIn');\r\n\r\n        if (_amount > 0){\t\t\t\r\n            IERC20(_from).safeApprove(_router, 0);\r\n            IERC20(_from).safeApprove(_router, _amount);\r\n\r\n            UniswapRouterV2(_router).swapExactTokensForTokens(\r\n                _amount,\r\n                _amountOutMin,\r\n                _swapPath,\r\n                address(this),\r\n                now\r\n            );\r\n        }\r\n    }\r\n\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n  \r\n    function latestRoundData() external view returns (\r\n        uint80 roundId,\r\n        int256 answer,\r\n        uint256 startedAt,\r\n        uint256 updatedAt,\r\n        uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\n\r\ncontract StratYvBOOSTPickle is StrategyBase {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    address public constant yveCRV = 0xc5bDdf9843308380375a611c18B50Fb9341f502A;\r\n    address public constant yvBOOST = 0x9d409a0A012CFbA9B15F6D4B36Ac57A46966Ab9a;\r\n    address public constant pickle = 0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5;\r\n    address public constant pickleJar = 0xCeD67a187b923F0E5ebcc77C7f2F7da20099e378;\r\n    address public constant pickleGauge = 0xDA481b277dCe305B97F4091bD66595d57CF31634;\r\n    address public constant yvBOOSTSLP = 0x9461173740D27311b176476FA27e94C681b1Ea6b;\r\n    address public constant ethusdChainlink = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;\r\n    address public constant crvusdChainlink = 0xCd627aA160A6fA45Eb793D19Ef54f5062F20f33f;\r\n\t\r\n    uint256 public yvBOOSTWithdrawFee = 200;\r\n    uint256 public yvBOOSTSwapSlippage = 2000;\r\n    uint256 public yvBOOSTAddLpSlippage = 1000;\r\n    uint256 public yvBOOSTRemoveLpSlippage = 1000;\r\n    uint256 public constant MAX_BPS = 10000;\t\r\n    uint256 public constant yvBOOSTDecimalMultiplier = 1e18;\t\r\n\r\n    mapping(address => bool) public keepers;\r\n\r\n    modifier onlyKeepers {\r\n        require(keepers[msg.sender] || msg.sender == governance, \"!keepers\");\r\n        _;\r\n    }\r\n\t\r\n    modifier onlyGovernance {\r\n        require(msg.sender == governance, \"!governance\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _want,\r\n        address _governance,\r\n        address _strategist,\r\n        address _controller,\r\n        address _timelock\r\n    )\r\n        public\r\n        StrategyBase(_want, _governance, _strategist, _controller, _timelock)\r\n    {\t\t\t\t\r\n        require(_want == yveCRV, '!invalidWant');\r\n        IERC20(yveCRV).approve(yvBOOST, uint256(-1));\r\n\t\t\r\n        IERC20(yvBOOSTSLP).approve(pickleJar, uint256(-1));\r\n        IERC20(pickleJar).approve(pickleGauge, uint256(-1));\r\n\t\t\r\n        IERC20(yvBOOSTSLP).approve(sushiRouter, uint256(-1));\t\r\n    }\r\n\r\n    function setYvBOOSTRemoveLpSlippage(uint256 _val) public onlyGovernance{\r\n        yvBOOSTRemoveLpSlippage = _val;\r\n    }\r\n\r\n    function setYvBOOSTSwapSlippage(uint256 _val) public onlyGovernance{\r\n        yvBOOSTSwapSlippage = _val;\r\n    }\r\n\r\n    function setYvBOOSTAddLpSlippage(uint256 _val) public onlyGovernance{\r\n        yvBOOSTAddLpSlippage = _val;\r\n    }\r\n\r\n    function setYvBOOSTWithdrawFee(uint256 _val) public onlyGovernance{\r\n        yvBOOSTWithdrawFee = _val;\r\n    }\r\n\r\n    function setKeeper(address _keeper, bool _enable) public onlyGovernance{\r\n        keepers[_keeper] = _enable;\r\n    }\r\n\r\n    // return earned but not claimed $PICKLE\r\n    function getHarvestable() external returns (uint256) {\r\n        return IPickleFarmingGauge(pickleGauge).earned(address(this));\r\n    }\r\n\t\r\n    // return estimate of yvCRV \r\n    // from Sushiswap LP position \r\n    // and PickleJar & yvBOOST ratio\r\n    function balanceOfPool() public override view returns (uint256){\r\n        uint256 pjarInGauge = IPickleFarmingGauge(pickleGauge).balanceOf(address(this));\r\n        uint256 slpInPickle = pjarInGauge.add(IERC20(pickleJar).balanceOf(address(this))).mul(IPickleJar(pickleJar).getRatio()).div(1e18);\t\t\r\n        uint256 slpInPool = slpInPickle.add(IERC20(yvBOOSTSLP).balanceOf(address(this)));\r\n\t\t\r\n        uint256 slpTotalSupply = IUniswapV2Pair(yvBOOSTSLP).totalSupply();\r\n        uint256 _yvBOOSTPriceInETH = estimateYvBOOSTPriceInETH();\r\n        (uint256 yvBOOSTRes, uint256 ethRes) = fairYvBOOSTSLPReserves(_yvBOOSTPriceInETH);\r\n        uint256 yvBOOSTEstimate = slpInPool.mul(yvBOOSTRes).div(slpTotalSupply);\r\n        uint256 ethEstimate = slpInPool.mul(ethRes).div(slpTotalSupply);\r\n\t\t\r\n        uint256 yvBOOSTInPool = yvBOOSTEstimate.add(ethEstimate.mul(MAX_BPS).div(_yvBOOSTPriceInETH));\r\n        return yvBOOSTInPool.mul(IYvBOOSTVault(yvBOOST).pricePerShare()).div(yvBOOSTDecimalMultiplier);\t\r\n    }\r\n\t\r\n    // deposit into yvBOOST and \r\n    // gain LP in Sushiswap then \r\n    // deposit into PickleJar & PickleGauge \r\n    function deposit() public override{\r\n        uint256 _yveCRV = IERC20(yveCRV).balanceOf(address(this));\r\n        \r\n        if (_yveCRV > 0){\r\n            IYvBOOSTVault(yvBOOST).deposit(_yveCRV, address(this));\r\n            uint256 _yvBOOST = IERC20(yvBOOST).balanceOf(address(this));\r\n\t\t\t\r\n            // swap some yvBOOST for WETH pairing\r\n            uint256 _yvBOOSTPriceInETH = estimateYvBOOSTPriceInETH();\r\n            (uint256 _yvBOOSTRes, ) = fairYvBOOSTSLPReserves(_yvBOOSTPriceInETH);\r\n            uint256 _swapAmt = UniswapV2SingleSided.calculateSingleSidedAmt(_yvBOOST, _yvBOOSTRes);\t\r\n\t\t\t\r\n            uint256 _weth = IERC20(weth).balanceOf(address(this));\r\n            _swapUniswapWithRouterMinOut(yvBOOST, weth, _swapAmt, _swapAmt.mul(_yvBOOSTPriceInETH).div(MAX_BPS).mul(MAX_BPS.sub(yvBOOSTSwapSlippage)).div(MAX_BPS), sushiRouter);\t\t\t\r\n            uint256 _wethAfter = IERC20(weth).balanceOf(address(this));\r\n\t\t\t\r\n            uint256 _pairedYvBOOST = _yvBOOST.sub(_swapAmt);\t\r\n            uint256 _pairedWETH = _wethAfter.sub(_weth);\r\n\t\t\r\n            IERC20(yvBOOST).approve(sushiRouter, 0);\r\n            IERC20(yvBOOST).approve(sushiRouter, _pairedYvBOOST);\r\n            IERC20(weth).approve(sushiRouter, 0);\r\n            IERC20(weth).approve(sushiRouter, _pairedWETH);\r\n\t\t\r\n            UniswapRouterV2(sushiRouter).addLiquidity(yvBOOST, weth, _pairedYvBOOST, _pairedWETH, \r\n                                                      _pairedYvBOOST.mul(MAX_BPS.sub(yvBOOSTAddLpSlippage)).div(MAX_BPS),\r\n                                                      _pairedWETH.mul(MAX_BPS.sub(yvBOOSTAddLpSlippage)).div(MAX_BPS), \r\n                                                      address(this), now);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \r\n            IPickleJar(pickleJar).depositAll();\r\n            IERC20(pickleJar).balanceOf(address(this));\t\t\r\n            IPickleFarmingGauge(pickleGauge).depositAll();\t\t\r\n        }\t\t\t\r\n    }\r\n\t\r\n    function _withdrawAllAsset(uint256 yvBOOSTRes, uint256 wethRes, uint256 slpTotalSupply, uint256 _wantBefore, uint256 _yvBOOSTPriceInETH) internal {\r\n        IPickleFarmingGauge(pickleGauge).withdrawAll();\r\n        IPickleJar(pickleJar).withdrawAll();\r\n\t\t\t\r\n        _removeSLPAndGetYvBOOST(IERC20(yvBOOSTSLP).balanceOf(address(this)), yvBOOSTRes, wethRes, slpTotalSupply, _yvBOOSTPriceInETH);\r\n\r\n        IYvBOOSTVault(yvBOOST).withdraw(IERC20(yvBOOST).balanceOf(address(this)), address(this), yvBOOSTWithdrawFee);\r\n    }\r\n\t\r\n    function _removeSLPAndGetYvBOOST(uint256 _diSLP, uint256 yvBOOSTRes, uint256 wethRes, uint256 slpTotalSupply, uint256 _yvBOOSTPriceInETH) internal returns (uint256, uint256){\r\n        uint256 _removeSLPSlippageMultiplier = MAX_BPS.sub(yvBOOSTRemoveLpSlippage); \r\n        uint256 _yvBOOSTMinReceived = _diSLP.mul(yvBOOSTRes).div(slpTotalSupply);\r\n        uint256 _wethMinReceived = _diSLP.mul(wethRes).div(slpTotalSupply);\r\n        (uint256 _divestedYvBOOST, uint256 _divestedETH) = UniswapRouterV2(sushiRouter).removeLiquidity(yvBOOST, weth, _diSLP, \r\n                                                                                                        _yvBOOSTMinReceived.mul(_removeSLPSlippageMultiplier).div(MAX_BPS),\r\n                                                                                                        _wethMinReceived.mul(_removeSLPSlippageMultiplier).div(MAX_BPS),\r\n                                                                                                        address(this), now);\r\n\r\n        uint256 _slippageMultiplier = MAX_BPS.sub(yvBOOSTSwapSlippage); \r\n        uint256 _minOut = _divestedETH.mul(MAX_BPS).div(_yvBOOSTPriceInETH);\r\n        _minOut = _minOut.mul(_slippageMultiplier).div(MAX_BPS);\r\n        _swapUniswapWithRouterMinOut(weth, yvBOOST, _divestedETH, _minOut, sushiRouter);\r\n\r\n        return (_divestedYvBOOST, _divestedETH);\t\t\r\n    }\r\n\t\r\n    function _withdrawFromPickle(uint256 _slpRequired, uint256 _slp) internal {\r\n        uint256 _diffSlp = _slpRequired.sub(_slp);\r\n\t\t\t\t\t\r\n        // https://etherscan.io/address/0xCeD67a187b923F0E5ebcc77C7f2F7da20099e378#code#F5#L129\r\n        uint256 _requiredPJar = _diffSlp.mul(1e18).div(IPickleJar(pickleJar).getRatio());\t\t\t\t\t\r\n        uint256 _pickleJar = IERC20(pickleJar).balanceOf(address(this));\r\n\t\t\t\t\t\r\n        if (_pickleJar < _requiredPJar){\r\n            uint256 _diffPJar = _requiredPJar.sub(_pickleJar);\r\n\t\t\t\t\t\t\r\n            uint256 _maxStaked = IPickleFarmingGauge(pickleGauge).balanceOf(address(this));\r\n            _diffPJar = _diffPJar > _maxStaked? _maxStaked : _diffPJar;\r\n            IPickleFarmingGauge(pickleGauge).withdraw(_diffPJar);\r\n        }\t\t\r\n\r\n        IPickleJar(pickleJar).withdraw(IERC20(pickleJar).balanceOf(address(this)));\r\n    }\r\n\t\r\n    // withdraw from PickleGauge & PicleJar then \r\n    // remove liquidity from Sushiswap to swap back for yvBOOST\r\n    // and lastly withdraw from yvBOOST to get back yveCRV\r\n    function _withdrawSome(uint256 _amount) internal override returns (uint256){\r\n        if (_amount == 0){\r\n            return 0;\r\n        }\r\n\t\t\r\n        uint256 _yvBOOSTPriceInETH = estimateYvBOOSTPriceInETH();\r\n        (uint256 yvBOOSTRes, uint256 wethRes) = fairYvBOOSTSLPReserves(_yvBOOSTPriceInETH);\r\n        uint256 slpTotalSupply = IUniswapV2Pair(yvBOOSTSLP).totalSupply();\t\r\n\t\t\r\n        uint256 _wantBefore = IERC20(want).balanceOf(address(this));\r\n\t\t\r\n        if (_amount >= balanceOfPool()){\r\n            _withdrawAllAsset(yvBOOSTRes, wethRes, slpTotalSupply, _wantBefore, _yvBOOSTPriceInETH);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n        }else if (_wantBefore < _amount){\t\t\t\t\r\n            uint256 _requiredYvBOOST = _amount.sub(_wantBefore).mul(yvBOOSTDecimalMultiplier).div(IYvBOOSTVault(yvBOOST).pricePerShare());\t\t\t\t\r\n            uint256 _yvBOOST = IERC20(yvBOOST).balanceOf(address(this));\r\n            if (_yvBOOST < _requiredYvBOOST){\r\n                uint256 _slpRequired = _requiredYvBOOST.sub(_yvBOOST).mul(slpTotalSupply).div(yvBOOSTRes);\r\n                uint256 _slpRmoveMultiplier = MAX_BPS.add(yvBOOSTAddLpSlippage);\r\n                _slpRequired = _slpRequired.mul(_slpRmoveMultiplier).div(MAX_BPS);//try to remove a bit more\t\t\t\t\t\t\r\n                uint256 _slp = IERC20(yvBOOSTSLP).balanceOf(address(this));\r\n\t\t\t\t\r\n                if (_slp < _slpRequired){\r\n                    _withdrawFromPickle(_slpRequired, _slp);\r\n                }\t\r\n\t\t\t\t\r\n                uint256 _diSLP = IERC20(yvBOOSTSLP).balanceOf(address(this));\r\n                _removeSLPAndGetYvBOOST(_diSLP, yvBOOSTRes, wethRes, slpTotalSupply, _yvBOOSTPriceInETH);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n            }\r\n\t\t\t\r\n            IYvBOOSTVault(yvBOOST).withdraw(IERC20(yvBOOST).balanceOf(address(this)), address(this), yvBOOSTWithdrawFee);\t\t\t\r\n        }\r\n\t\t\t\t\t\r\n        uint256 _divested = IERC20(want).balanceOf(address(this)).sub(_wantBefore);\t\t\t\t\r\n        return _divested > _amount? _amount : _divested;\r\n    }\t\r\n\t\r\n    // convert yveCRV to ETH\r\n    function _convertWantToBuyback(uint256 _lpAmount) internal override returns (address, uint256){\r\n        uint256 _weth = IERC20(weth).balanceOf(address(this));\r\n        uint256 _yveCRVPriceInETH = estimateYveCRVPriceInETH();\r\n        \r\n        uint256 _slippageMultiplier = MAX_BPS.sub(yvBOOSTSwapSlippage);\r\n        uint256 _minOut = _lpAmount.mul(_yveCRVPriceInETH).div(MAX_BPS);\r\n        _minOut = _minOut.mul(_slippageMultiplier).div(MAX_BPS);\r\n        \r\n        _swapUniswapWithRouterMinOut(yveCRV, weth, _lpAmount, _minOut, sushiRouter);\r\n        uint256 _wethAfter = IERC20(weth).balanceOf(address(this));\r\n\t\t\r\n        require(_wethAfter >= _weth, '!mismatchAfterSwapWant');\t\t\r\n        return (weth, _wethAfter.sub(_weth));\r\n    }\r\n\r\n    // each harvest need to update `lastHarvestBlock=block.number` and `lastHarvestInWant=yield profit converted to want for re-invest`\r\n    function harvest() public override onlyKeepers{\r\n\t\r\n        IPickleFarmingGauge(pickleGauge).getReward();\r\n        uint256 _pickle = IERC20(pickle).balanceOf(address(this));\r\n        if (_pickle > 0){\r\n            _swapUniswapWithRouter(pickle, weth, _pickle, univ2Router2);\r\n            uint256 _weth = IERC20(weth).balanceOf(address(this));\r\n\t\t    \r\n            uint256 _buybackLpAmount = _weth.mul(performanceFee).div(performanceMax);\t\t\t\r\n            if (buybackEnabled == true && _buybackLpAmount > 0){\r\n                buybackAndNotify(weth, _buybackLpAmount);\r\n            }\r\n            \r\n            uint256 _restETH = _weth.sub(_buybackLpAmount);\r\n            uint256 _yveCRVPriceInETH = estimateYveCRVPriceInETH();\r\n            _swapUniswapWithRouterMinOut(weth, yveCRV, _restETH, _restETH.mul(MAX_BPS).div(_yveCRVPriceInETH).mul(MAX_BPS.sub(yvBOOSTSwapSlippage)).div(MAX_BPS), sushiRouter);\r\n            uint256 _want = IERC20(want).balanceOf(address(this));\r\n            if (_want > 0){\r\n                lastHarvestBlock = block.number;\r\n                lastHarvestInWant = _want;\r\n                deposit();\t\t\r\n            }\r\n        }\t\t\r\n    }\r\n\r\n    // Controller only function for creating additional rewards from dust\r\n    function withdraw(IERC20 _asset) external override returns (uint256 balance) {\r\n        require(yvBOOST != address(_asset), \"!yvBOOST\");\r\n        require(pickleJar != address(_asset), \"!pickleJar\");\r\n        require(yvBOOSTSLP != address(_asset), \"!yvBOOSTSLP\");\r\n        balance = _withdrawNonWantAsset(_asset);\r\n    }\t\r\n\r\n    function getName() public override pure returns(string memory){\r\n        return \"StratYvBOOSTPickle\";\r\n    }\r\n\t\r\n    function fairYvBOOSTSLPReserves(uint256 _yvBOOSTPriceInETH) public view returns(uint256, uint256){\r\n        (uint resA, uint resB, ) = IUniswapV2Pair(yvBOOSTSLP).getReserves();\r\n        return UniswapV2SingleSided.calcFairReserves(resA.mul(resB), _yvBOOSTPriceInETH);\t\r\n    }\r\n\t\r\n    function fairYvBOOSTSLPReserves() public view returns(uint256, uint256){\r\n        return fairYvBOOSTSLPReserves(estimateYvBOOSTPriceInETH());\t\r\n    }\r\n\t\r\n    function estimateYvBOOSTPriceInETH() public view returns(uint256){\r\n        (,int ethprice,,,) = AggregatorV3Interface(ethusdChainlink).latestRoundData();\r\n        (,int crvprice,,,) = AggregatorV3Interface(crvusdChainlink).latestRoundData();// assuming 1 crv = 1 yveCRV\r\n        uint256 pps = IYvBOOSTVault(yvBOOST).pricePerShare();\r\n        // https://etherscan.io/address/0x9d409a0A012CFbA9B15F6D4B36Ac57A46966Ab9a#code#L1119\r\n        uint256 yvBOOSTPrice = uint256(crvprice).mul(yvBOOSTDecimalMultiplier).div(pps);\r\n        return yvBOOSTPrice.mul(MAX_BPS).div(uint256(ethprice));\r\n    }\r\n\t\r\n    function estimateYveCRVPriceInETH() public view returns(uint256){\r\n        (,int ethprice,,,) = AggregatorV3Interface(ethusdChainlink).latestRoundData();\r\n        (,int crvprice,,,) = AggregatorV3Interface(crvusdChainlink).latestRoundData();// assuming 1 crv = 1 yveCRV\r\n        return uint256(crvprice).mul(MAX_BPS).div(uint256(ethprice));\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_want\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MAX_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvusdChainlink\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delayBlockRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFundMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateYvBOOSTPriceInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateYveCRVPriceInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethusdChainlink\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fairYvBOOSTSLPReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_yvBOOSTPriceInETH\",\"type\":\"uint256\"}],\"name\":\"fairYvBOOSTSLPReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"figureOutPath\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"useSushi\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"swapPath\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHarvestable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHarvestBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHarvestInWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterChef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mmToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pickle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pickleGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pickleJar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_buybackEnabled\",\"type\":\"bool\"}],\"name\":\"setBuybackEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delayBlockRequired\",\"type\":\"uint256\"}],\"name\":\"setDelayBlockRequired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devFundFee\",\"type\":\"uint256\"}],\"name\":\"setDevFundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterChef\",\"type\":\"address\"}],\"name\":\"setMasterChef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mmToken\",\"type\":\"address\"}],\"name\":\"setMmToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_route\",\"type\":\"address\"}],\"name\":\"setSushiRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"}],\"name\":\"setTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"}],\"name\":\"setTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_route\",\"type\":\"address\"}],\"name\":\"setUniRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"setYvBOOSTAddLpSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"setYvBOOSTRemoveLpSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"setYvBOOSTSwapSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"setYvBOOSTWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"univ2Router2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcBuyback\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yvBOOST\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yvBOOSTAddLpSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yvBOOSTDecimalMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yvBOOSTRemoveLpSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yvBOOSTSLP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yvBOOSTSwapSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yvBOOSTWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yveCRV\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StratYvBOOSTPickle","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c5bddf9843308380375a611c18b50fb9341f502a00000000000000000000000043229759e12efbe3e2a0fb0510b15e516d0464420000000000000000000000000bd1d668d8e83d14252f2e01d5873df77a6511f00000000000000000000000004bf5059065541a2b176500928e91fbfd0b121d070000000000000000000000005dae9b27313670663b34ac8bffd18825bb9df736","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6c1879e4cc35af132c5e4280c7a47481a9c43b9d4ad9806a7214964bf440bae9"}]}