{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: ISC\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n/* ----------------------------------------------------------------------------\r\n \r\n 'GToken' contract \r\n\r\n * Symbol      : GTO\r\n * Name        : GToken\r\n * Total supply: 1 trillion\r\n * Decimals    : 18\r\n\r\n---------------------------------------------------------------------------- */ \r\n \r\n\r\ninterface IGtoken {\r\n    /**\r\n     * @dev returns the name of the token\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev returns the symbol of the token\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev returns the decimal places of a token\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev returns the total tokens in existence\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev returns the tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev transfers the `amount` of tokens from caller's account\r\n     * to the `recipient` account.\r\n     *\r\n     * returns boolean value indicating the operation status.\r\n     *\r\n     * Emits a {Transfer} event\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev returns the remaining number of tokens the `spender' can spend\r\n     * on behalf of the owner.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} is executed.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev sets `amount` as the `allowance` of the `spender`.\r\n     *\r\n     * returns a boolean value indicating the operation status.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev transfers the `amount` on behalf of `spender` to the `recipient` account.\r\n     *\r\n     * returns a boolean indicating the operation status.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address spender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted from tokens are moved from one account('from') to another account ('to)\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when allowance of a `spender` is set by the `owner`\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n\r\nabstract contract Context {\r\n\r\n    function msgSender() internal view virtual returns(address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function msgData() internal view virtual returns(bytes calldata) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n\r\n    function msgValue() internal view virtual returns(uint256) {\r\n        return msg.value;\r\n    }\r\n\r\n}\r\n\r\ncontract GToken is IGtoken, Context {\r\n    \r\n    mapping(address => uint256) private balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private allowances;\r\n\r\n    address private _governor;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    uint256 public feeFraction = 10;\r\n\r\n    string private _name;\r\n\r\n    string private _symbol;\r\n\r\n    // allowedAddresses will be able to transfer even when locked\r\n    mapping(address => bool) public allowedAddresses;\r\n\r\n    // lockedAddresses will *not* be able to transfer even when *not locked*\r\n    mapping(address => bool) public lockedAddresses;\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    bool public freezed = false;\r\n\r\n    /**\r\n     * @dev checks whether `caller` is governor;\r\n    */\r\n    modifier onlyGovernor() {\r\n        require(msgSender() == _governor, \"ERC20: caller not governor\");\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev adds the address to the list of allowedAddresses\r\n    */\r\n    function allowAddress(address _addr, bool _allowed) public onlyGovernor {\r\n        require(_addr != _governor);\r\n        allowedAddresses[_addr] = _allowed;\r\n    }\r\n\r\n    /**\r\n     * @dev adds the address to the list of lockedAddresses\r\n    */\r\n    function lockAddress(address _addr, bool _locked) public onlyGovernor {\r\n        require(_addr != _governor);\r\n        lockedAddresses[_addr] = _locked;\r\n    }\r\n\r\n    /**\r\n     * @dev freezes the contract\r\n    */\r\n    function freeze() public onlyGovernor {\r\n        freezed = true;\r\n    }\r\n\r\n    /**\r\n     * @dev unfreezes the contract\r\n    */\r\n    function unfreeze() public onlyGovernor {\r\n        freezed = false;\r\n    }\r\n\r\n    /**\r\n     * @dev validates the transfer\r\n    */\r\n    function validateTransfer(address _addr) internal view returns (bool) {\r\n       \r\n        if(freezed){\r\n           \r\n            if(!allowedAddresses[_addr]&&_addr!=_governor) \r\n                return false;\r\n        }\r\n        \r\n        else if(lockedAddresses[_addr]) \r\n            return false;\r\n\r\n        return true;\r\n    }\r\n\r\n \r\n\r\n    /**\r\n     * @dev sets the {name}, {symbol} and {governor wallet} of the token.\r\n     *\r\n     * All the two variables are immutable and cannot be changed\r\n     * and set only in the constructor.\r\n     */\r\n    constructor(string memory name_, string memory symbol_, address _governorAddress) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _governor = _governorAddress;\r\n     }\r\n\r\n    /**\r\n     * @dev returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the symbol of the token.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the decimals of the token\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the total supply of the token\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the number of tokens owned by `account`\r\n     */\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev returns the amount the `spender` can spend on behalf of the `owner`.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Approve a `spender` to spend tokens on behalf of the `owner`.\r\n     */\r\n    function approve(address spender, uint256 value)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msgSender(), spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev to increase the allowance of `spender` over the `owner` account.\r\n     *\r\n     * Requirements\r\n     * `spender` cannot be zero address\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msgSender(),\r\n            spender,\r\n            allowances[msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev to decrease the allowance of `spender` over the `owner` account.\r\n     *\r\n     * Requirements\r\n     * `spender` allowance shoule be greater than the `reducedValue`\r\n     * `spender` cannot be a zero address\r\n     */\r\n    function decreaseAllowance(address spender, uint256 reducedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = allowances[msgSender()][spender];\r\n        require(\r\n            currentAllowance >= reducedValue,\r\n            \"ERC20: ReducedValue greater than allowance\"\r\n        );\r\n\r\n        _approve(msgSender(), spender, currentAllowance - reducedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev sets the amount as the allowance of `spender` over the `owner` address\r\n     *\r\n     * Requirements:\r\n     * `owner` cannot be zero address\r\n     * `spender` cannot be zero address\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from zero address\");\r\n        require(spender != address(0), \"ERC20: approve to zero address\");\r\n\r\n        allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev transfers the `amount` of tokens to `recipient`\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        require(validateTransfer(msgSender()),\"ERC20: Transfer reverted\");\r\n\r\n        _transfer(msgSender(), recipient, amount);\r\n\r\n        emit Transfer(msgSender(), recipient, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev transfers the 'amount` from the `sender` to the `recipient`\r\n     * on behalf of the `sender`.\r\n     *\r\n     * Requirements\r\n     * `sender` and `recipient` should be non zero addresses\r\n     * `sender` should have balance of more than `amount`\r\n     * `caller` must have allowance greater than `amount`\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        require(validateTransfer(sender),\"ERC20: Transfer reverted\");\r\n        \r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = allowances[sender][msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: amount exceeds allowance\");\r\n        _approve(sender, msgSender(), currentAllowance - amount);\r\n      \r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev mints the amount of tokens to the `recipient` wallet.\r\n     *\r\n     * Requirements :\r\n     *\r\n     * The caller must be the `governor` of the contract.\r\n     * Governor can be an DAO smart contract.\r\n     */\r\n    function mint(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        onlyGovernor\r\n        returns (bool)\r\n    {\r\n        require(recipient != address(0), \"ERC20: mint to a zero address\");\r\n\r\n \r\n        _totalSupply += amount;\r\n        balances[recipient] += amount;\r\n\r\n        emit Transfer(address(0), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev burns the `amount` tokens from `supply`.\r\n     *\r\n     * Requirements\r\n     * `caller` address balance should be greater than `amount`\r\n     */\r\n    function burn(uint256 amount) public virtual onlyGovernor returns (bool) {\r\n        uint256 currentBalance = balances[msgSender()];\r\n        require(\r\n            currentBalance >= amount,\r\n            \"ERC20: burning amount exceeds balance\"\r\n        );\r\n\r\n        balances[msgSender()] = currentBalance - amount;\r\n        _totalSupply -= amount;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev transfers the `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * Requirements:\r\n     * `sender` is not a zero address\r\n     * `recipient` is also not a zero address\r\n     * `amount` is less than or equal to balance of the sender.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to zero address\");\r\n\r\n        uint256 senderBalance = balances[sender];\r\n        require(\r\n            senderBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n\r\n     \r\n        balances[sender] = senderBalance - amount;\r\n        \r\n        // Transfer the spread to the admin\r\n        uint256 fee = amount * feeFraction / 10**4;\r\n\r\n        uint256 receiverAmount = amount - fee;\r\n\r\n        balances[recipient] += receiverAmount;\r\n        balances[_governor] +=fee;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev returns the current `governor` address.\r\n     *\r\n     * `governors` can mint / burn Gtokens\r\n     */\r\n    function governor() public view virtual returns (address) {\r\n        return _governor;\r\n    }\r\n\r\n    /**\r\n     * @dev transfers the governance of the contract.\r\n     *\r\n     * Requirements :\r\n     * `caller` should be the current governor.\r\n     * `newGovernor` cannot be a zero address.\r\n     */\r\n    function transferGovernance(address newGovernor)\r\n        public\r\n        virtual\r\n        onlyGovernor\r\n        returns (bool)\r\n    {\r\n        require(newGovernor != address(0), \"ERC20: zero address cannot govern\");\r\n        _governor = newGovernor;\r\n        return true;\r\n    }\r\n \r\n    /**\r\n     * @dev changes the transaction fee.\r\n     *\r\n     * Requirements :\r\n     * `caller` should be the current governor.\r\n     * `transactionFee` cannot be less than zero.\r\n     */\r\n    function setTransactionFee(uint256 _newFeeFraction)\r\n        public\r\n        virtual\r\n        onlyGovernor\r\n        returns (bool)\r\n    {\r\n        require(_newFeeFraction >= 0, \"ERC20: fee must not be negative\");\r\n        feeFraction = _newFeeFraction;\r\n        return true;\r\n    }\r\n\r\n   \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_governorAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"allowAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reducedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeFraction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"lockAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFeeFraction\",\"type\":\"uint256\"}],\"name\":\"setTransactionFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unfreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GToken","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000004febd36d6fdd34ea3a622fd259b2054596d7a492000000000000000000000000000000000000000000000000000000000000000647546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000347544f0000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://030fbd21e9c24de93ac214f024ab3da8d97c26c13ae2b6ccfa2453cddeca8c86"}]}