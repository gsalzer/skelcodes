{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@gelatonetwork/core/contracts/gelato_conditions/IGelatoCondition.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n/// @title IGelatoCondition - solidity interface of GelatoConditionsStandard\\n/// @notice all the APIs of GelatoConditionsStandard\\n/// @dev all the APIs are implemented inside GelatoConditionsStandard\\ninterface IGelatoCondition {\\n\\n    /// @notice GelatoCore calls this to verify securely the specified Condition securely\\n    /// @dev Be careful only to encode a Task's condition.data as is and not with the\\n    ///  \\\"ok\\\" selector or _taskReceiptId, since those two things are handled by GelatoCore.\\n    /// @param _taskReceiptId This is passed by GelatoCore so we can rely on it as a secure\\n    ///  source of Task identification.\\n    /// @param _conditionData This is the Condition.data field developers must encode their\\n    ///  Condition's specific parameters in.\\n    /// @param _cycleId For Tasks that are executed as part of a cycle.\\n    function ok(uint256 _taskReceiptId, bytes calldata _conditionData, uint256 _cycleId)\\n        external\\n        view\\n        returns(string memory);\\n}\"\r\n    },\r\n    \"@gelatonetwork/core/contracts/gelato_core/interfaces/IGelatoCore.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport {IGelatoProviderModule} from \\\"../../gelato_provider_modules/IGelatoProviderModule.sol\\\";\\nimport {IGelatoCondition} from \\\"../../gelato_conditions/IGelatoCondition.sol\\\";\\n\\nstruct Provider {\\n    address addr;  //  if msg.sender == provider => self-Provider\\n    IGelatoProviderModule module;  //  can be IGelatoProviderModule(0) for self-Providers\\n}\\n\\nstruct Condition {\\n    IGelatoCondition inst;  // can be AddressZero for self-conditional Actions\\n    bytes data;  // can be bytes32(0) for self-conditional Actions\\n}\\n\\nenum Operation { Call, Delegatecall }\\n\\nenum DataFlow { None, In, Out, InAndOut }\\n\\nstruct Action {\\n    address addr;\\n    bytes data;\\n    Operation operation;\\n    DataFlow dataFlow;\\n    uint256 value;\\n    bool termsOkCheck;\\n}\\n\\nstruct Task {\\n    Condition[] conditions;  // optional\\n    Action[] actions;\\n    uint256 selfProviderGasLimit;  // optional: 0 defaults to gelatoMaxGas\\n    uint256 selfProviderGasPriceCeil;  // optional: 0 defaults to NO_CEIL\\n}\\n\\nstruct TaskReceipt {\\n    uint256 id;\\n    address userProxy;\\n    Provider provider;\\n    uint256 index;\\n    Task[] tasks;\\n    uint256 expiryDate;\\n    uint256 cycleId;  // auto-filled by GelatoCore. 0 for non-cyclic/chained tasks\\n    uint256 submissionsLeft;\\n}\\n\\ninterface IGelatoCore {\\n    event LogTaskSubmitted(\\n        uint256 indexed taskReceiptId,\\n        bytes32 indexed taskReceiptHash,\\n        TaskReceipt taskReceipt\\n    );\\n\\n    event LogExecSuccess(\\n        address indexed executor,\\n        uint256 indexed taskReceiptId,\\n        uint256 executorSuccessFee,\\n        uint256 sysAdminSuccessFee\\n    );\\n    event LogCanExecFailed(\\n        address indexed executor,\\n        uint256 indexed taskReceiptId,\\n        string reason\\n    );\\n    event LogExecReverted(\\n        address indexed executor,\\n        uint256 indexed taskReceiptId,\\n        uint256 executorRefund,\\n        string reason\\n    );\\n\\n    event LogTaskCancelled(uint256 indexed taskReceiptId, address indexed cancellor);\\n\\n    /// @notice API to query whether Task can be submitted successfully.\\n    /// @dev In submitTask the msg.sender must be the same as _userProxy here.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _userProxy The userProxy from which the task will be submitted.\\n    /// @param _task Selected provider, conditions, actions, expiry date of the task\\n    function canSubmitTask(\\n        address _userProxy,\\n        Provider calldata _provider,\\n        Task calldata _task,\\n        uint256 _expiryDate\\n    )\\n        external\\n        view\\n        returns(string memory);\\n\\n    /// @notice API to submit a single Task.\\n    /// @dev You can let users submit multiple tasks at once by batching calls to this.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _task A Gelato Task object: provider, conditions, actions.\\n    /// @param _expiryDate From then on the task cannot be executed. 0 for infinity.\\n    function submitTask(\\n        Provider calldata _provider,\\n        Task calldata _task,\\n        uint256 _expiryDate\\n    )\\n        external;\\n\\n\\n    /// @notice A Gelato Task Cycle consists of 1 or more Tasks that automatically submit\\n    ///  the next one, after they have been executed.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _tasks This can be a single task or a sequence of tasks.\\n    /// @param _expiryDate  After this no task of the sequence can be executed any more.\\n    /// @param _cycles How many full cycles will be submitted\\n    function submitTaskCycle(\\n        Provider calldata _provider,\\n        Task[] calldata _tasks,\\n        uint256 _expiryDate,\\n        uint256 _cycles\\n    )\\n        external;\\n\\n\\n    /// @notice A Gelato Task Cycle consists of 1 or more Tasks that automatically submit\\n    ///  the next one, after they have been executed.\\n    /// @dev CAUTION: _sumOfRequestedTaskSubmits does not mean the number of cycles.\\n    /// @dev If _sumOfRequestedTaskSubmits = 1 && _tasks.length = 2, only the first task\\n    ///  would be submitted, but not the second\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _tasks This can be a single task or a sequence of tasks.\\n    /// @param _expiryDate  After this no task of the sequence can be executed any more.\\n    /// @param _sumOfRequestedTaskSubmits The TOTAL number of Task auto-submits\\n    ///  that should have occured once the cycle is complete:\\n    ///  _sumOfRequestedTaskSubmits = 0 => One Task will resubmit the next Task infinitly\\n    ///  _sumOfRequestedTaskSubmits = 1 => One Task will resubmit no other task\\n    ///  _sumOfRequestedTaskSubmits = 2 => One Task will resubmit 1 other task\\n    ///  ...\\n    function submitTaskChain(\\n        Provider calldata _provider,\\n        Task[] calldata _tasks,\\n        uint256 _expiryDate,\\n        uint256 _sumOfRequestedTaskSubmits\\n    )\\n        external;\\n\\n    // ================  Exec Suite =========================\\n    /// @notice Off-chain API for executors to check, if a TaskReceipt is executable\\n    /// @dev GelatoCore checks this during execution, in order to safeguard the Conditions\\n    /// @param _TR TaskReceipt, consisting of user task, user proxy address and id\\n    /// @param _gasLimit Task.selfProviderGasLimit is used for SelfProviders. All other\\n    ///  Providers must use gelatoMaxGas. If the _gasLimit is used by an Executor and the\\n    ///  tx reverts, a refund is paid by the Provider and the TaskReceipt is annulated.\\n    /// @param _execTxGasPrice Must be used by Executors. Gas Price fed by gelatoCore's\\n    ///  Gas Price Oracle. Executors can query the current gelatoGasPrice from events.\\n    function canExec(TaskReceipt calldata _TR, uint256 _gasLimit, uint256 _execTxGasPrice)\\n        external\\n        view\\n        returns(string memory);\\n\\n    /// @notice Executors call this when Conditions allow it to execute submitted Tasks.\\n    /// @dev Executors get rewarded for successful Execution. The Task remains open until\\n    ///   successfully executed, or when the execution failed, despite of gelatoMaxGas usage.\\n    ///   In the latter case Executors are refunded by the Task Provider.\\n    /// @param _TR TaskReceipt: id, userProxy, Task.\\n    function exec(TaskReceipt calldata _TR) external;\\n\\n    /// @notice Cancel task\\n    /// @dev Callable only by userProxy or selected provider\\n    /// @param _TR TaskReceipt: id, userProxy, Task.\\n    function cancelTask(TaskReceipt calldata _TR) external;\\n\\n    /// @notice Cancel multiple tasks at once\\n    /// @dev Callable only by userProxy or selected provider\\n    /// @param _taskReceipts TaskReceipts: id, userProxy, Task.\\n    function multiCancelTasks(TaskReceipt[] calldata _taskReceipts) external;\\n\\n    /// @notice Compute hash of task receipt\\n    /// @param _TR TaskReceipt, consisting of user task, user proxy address and id\\n    /// @return hash of taskReceipt\\n    function hashTaskReceipt(TaskReceipt calldata _TR) external pure returns(bytes32);\\n\\n    // ================  Getters =========================\\n    /// @notice Returns the taskReceiptId of the last TaskReceipt submitted\\n    /// @return currentId currentId, last TaskReceiptId submitted\\n    function currentTaskReceiptId() external view returns(uint256);\\n\\n    /// @notice Returns computed taskReceipt hash, used to check for taskReceipt validity\\n    /// @param _taskReceiptId Id of taskReceipt emitted in submission event\\n    /// @return hash of taskReceipt\\n    function taskReceiptHash(uint256 _taskReceiptId) external view returns(bytes32);\\n}\\n\"\r\n    },\r\n    \"@gelatonetwork/core/contracts/gelato_provider_modules/IGelatoProviderModule.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport {Action, Task} from \\\"../gelato_core/interfaces/IGelatoCore.sol\\\";\\n\\ninterface IGelatoProviderModule {\\n\\n    /// @notice Check if provider agrees to pay for inputted task receipt\\n    /// @dev Enables arbitrary checks by provider\\n    /// @param _userProxy The smart contract account of the user who submitted the Task.\\n    /// @param _provider The account of the Provider who uses the ProviderModule.\\n    /// @param _task Gelato Task to be executed.\\n    /// @return \\\"OK\\\" if provider agrees\\n    function isProvided(address _userProxy, address _provider, Task calldata _task)\\n        external\\n        view\\n        returns(string memory);\\n\\n    /// @notice Convert action specific payload into proxy specific payload\\n    /// @dev Encoded multiple actions into a multisend\\n    /// @param _taskReceiptId Unique ID of Gelato Task to be executed.\\n    /// @param _userProxy The smart contract account of the user who submitted the Task.\\n    /// @param _provider The account of the Provider who uses the ProviderModule.\\n    /// @param _task Gelato Task to be executed.\\n    /// @param _cycleId For Tasks that form part of a cycle/chain.\\n    /// @return Encoded payload that will be used for low-level .call on user proxy\\n    /// @return checkReturndata if true, fwd returndata from userProxy.call to ProviderModule\\n    function execPayload(\\n        uint256 _taskReceiptId,\\n        address _userProxy,\\n        address _provider,\\n        Task calldata _task,\\n        uint256 _cycleId\\n    )\\n        external\\n        view\\n        returns(bytes memory, bool checkReturndata);\\n\\n    /// @notice Called by GelatoCore.exec to verifiy that no revert happend on userProxy\\n    /// @dev If a caught revert is detected, this fn should revert with the detected error\\n    /// @param _proxyReturndata Data from GelatoCore._exec.userProxy.call(execPayload)\\n    function execRevertCheck(bytes calldata _proxyReturndata) external pure;\\n}\\n\"\r\n    },\r\n    \"@gelatonetwork/core/contracts/libraries/GelatoTaskReceipt.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\n\\nimport {Task, TaskReceipt} from \\\"../gelato_core/interfaces/IGelatoCore.sol\\\";\\n\\nlibrary GelatoTaskReceipt {\\n    function task(TaskReceipt memory _TR) internal pure returns(Task memory) {\\n        return _TR.tasks[_TR.index];\\n    }\\n\\n    function nextIndex(TaskReceipt memory _TR) internal pure returns(uint256) {\\n        return _TR.index == _TR.tasks.length - 1 ? 0 : _TR.index + 1;\\n    }\\n\\n    function selfProvider(TaskReceipt memory _TR) internal pure returns(bool) {\\n        return _TR.provider.addr == _TR.userProxy;\\n    }\\n}\"\r\n    },\r\n    \"contracts/core/diamond/facets/GelatoV1Facet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nimport {BFacetOwner} from \\\"../facets/base/BFacetOwner.sol\\\";\\nimport {\\n    Address\\n} from \\\"../../../vendor/openzeppelin/contracts/utils/Address.sol\\\";\\nimport {LibConcurrentCanExec} from \\\"../libraries/LibConcurrentCanExec.sol\\\";\\nimport {GelatoString} from \\\"../../../lib/GelatoString.sol\\\";\\nimport {\\n    GelatoTaskReceipt\\n} from \\\"@gelatonetwork/core/contracts/libraries/GelatoTaskReceipt.sol\\\";\\nimport {\\n    TaskReceipt,\\n    IGelatoCore\\n} from \\\"@gelatonetwork/core/contracts/gelato_core/interfaces/IGelatoCore.sol\\\";\\nimport {IGelatoV1} from \\\"../../../interfaces/gelato/IGelatoV1.sol\\\";\\n\\ncontract GelatoV1Facet is BFacetOwner {\\n    using Address for address payable;\\n    using GelatoString for string;\\n    using GelatoTaskReceipt for TaskReceipt;\\n\\n    struct Response {\\n        uint256 taskReceiptId;\\n        uint256 taskGasLimit;\\n        string response;\\n    }\\n\\n    function stakeExecutor(IGelatoV1 _gelatoCore) external payable onlyOwner {\\n        _gelatoCore.stakeExecutor{value: msg.value}();\\n    }\\n\\n    function unstakeExecutor(IGelatoV1 _gelatoCore, address payable _to)\\n        external\\n        onlyOwner\\n    {\\n        uint256 stake = _gelatoCore.executorStake(address(this));\\n        _gelatoCore.unstakeExecutor();\\n        _to.sendValue(stake);\\n    }\\n\\n    function multiReassignProviders(\\n        IGelatoV1 _gelatoCore,\\n        address[] calldata _providers,\\n        address _newExecutor\\n    ) public onlyOwner {\\n        _gelatoCore.multiReassignProviders(_providers, _newExecutor);\\n    }\\n\\n    function providerRefund(\\n        IGelatoV1 _gelatoCore,\\n        address _provider,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        _amount = withdrawExcessExecutorStake(\\n            _gelatoCore,\\n            _amount,\\n            payable(address(0))\\n        );\\n        _gelatoCore.provideFunds{value: _amount}(_provider);\\n    }\\n\\n    function withdrawExcessExecutorStake(\\n        IGelatoV1 _gelatoCore,\\n        uint256 _withdrawAmount,\\n        address payable _to\\n    ) public onlyOwner returns (uint256 amount) {\\n        amount = _gelatoCore.withdrawExcessExecutorStake(_withdrawAmount);\\n        if (_to != address(0)) _to.sendValue(amount);\\n    }\\n\\n    function v1ConcurrentMultiCanExec(\\n        address _gelatoCore,\\n        TaskReceipt[] calldata _taskReceipts,\\n        uint256 _gelatoGasPrice,\\n        uint256 _buffer\\n    )\\n        external\\n        view\\n        returns (\\n            bool canExecRes,\\n            uint256 blockNumber,\\n            Response[] memory responses\\n        )\\n    {\\n        canExecRes = LibConcurrentCanExec.concurrentCanExec(_buffer);\\n        (blockNumber, responses) = v1MultiCanExec(\\n            _gelatoCore,\\n            _taskReceipts,\\n            _gelatoGasPrice\\n        );\\n    }\\n\\n    function v1MultiCanExec(\\n        address _gelatoCore,\\n        TaskReceipt[] calldata _taskReceipts,\\n        uint256 _gelatoGasPrice\\n    ) public view returns (uint256 blockNumber, Response[] memory responses) {\\n        blockNumber = block.number;\\n        uint256 gelatoMaxGas = IGelatoV1(_gelatoCore).gelatoMaxGas();\\n        responses = new Response[](_taskReceipts.length);\\n        for (uint256 i = 0; i < _taskReceipts.length; i++) {\\n            uint256 taskGasLimit = getGasLimit(_taskReceipts[i], gelatoMaxGas);\\n            try\\n                IGelatoV1(_gelatoCore).canExec( // IGelatoV1 bug\\n                    _taskReceipts[i],\\n                    taskGasLimit,\\n                    _gelatoGasPrice\\n                )\\n            returns (string memory response) {\\n                responses[i] = Response({\\n                    taskReceiptId: _taskReceipts[i].id,\\n                    taskGasLimit: taskGasLimit,\\n                    response: response\\n                });\\n            } catch {\\n                responses[i] = Response({\\n                    taskReceiptId: _taskReceipts[i].id,\\n                    taskGasLimit: taskGasLimit,\\n                    response: \\\"GelatoV1Facet.multiCanExec: failed\\\"\\n                });\\n            }\\n        }\\n    }\\n\\n    function getGasLimit(\\n        TaskReceipt calldata _taskReceipt,\\n        uint256 _gelatoMaxGas\\n    ) public pure returns (uint256) {\\n        return\\n            _taskReceipt.selfProvider()\\n                ? _taskReceipt.task().selfProviderGasLimit\\n                : _gelatoMaxGas;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/diamond/facets/base/BFacetOwner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nimport {LibDiamond} from \\\"../../libraries/standard/LibDiamond.sol\\\";\\n\\nabstract contract BFacetOwner {\\n    modifier onlyOwner() {\\n        LibDiamond.enforceIsContractOwner();\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/diamond/interfaces/standard/IDiamondCut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/diamond/libraries/LibConcurrentCanExec.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nimport {LibExecutor} from \\\"./LibExecutor.sol\\\";\\n\\nlibrary LibConcurrentCanExec {\\n    using LibExecutor for address;\\n\\n    enum SlotStatus {Open, Closing, Closed}\\n\\n    struct ConcurrentExecStorage {\\n        uint256 slotLength;\\n    }\\n\\n    bytes32 private constant _CONCURRENT_EXEC_STORAGE_POSITION =\\n        keccak256(\\\"gelato.diamond.concurrentexec.storage\\\");\\n\\n    function setSlotLength(uint256 _slotLength) internal {\\n        concurrentExecStorage().slotLength = _slotLength;\\n    }\\n\\n    function slotLength() internal view returns (uint256) {\\n        return concurrentExecStorage().slotLength;\\n    }\\n\\n    function concurrentCanExec(uint256 _buffer) internal view returns (bool) {\\n        return\\n            msg.sender.canExec() && LibExecutor.numberOfExecutors() == 1\\n                ? true\\n                : mySlotStatus(_buffer) == LibConcurrentCanExec.SlotStatus.Open;\\n    }\\n\\n    function getCurrentExecutorIndex()\\n        internal\\n        view\\n        returns (uint256 executorIndex, uint256 remainingBlocksInSlot)\\n    {\\n        uint256 numberOfExecutors = LibExecutor.numberOfExecutors();\\n        uint256 currentSlotLength = slotLength();\\n        require(\\n            numberOfExecutors > 0,\\n            \\\"LibConcurrentCanExec.getCurrentExecutorIndex: 0 executors\\\"\\n        );\\n        require(\\n            currentSlotLength > 0,\\n            \\\"LibConcurrentCanExec.getCurrentExecutorIndex: 0 slotLength\\\"\\n        );\\n\\n        return\\n            calcExecutorIndex(\\n                block.number,\\n                currentSlotLength,\\n                numberOfExecutors\\n            );\\n    }\\n\\n    function currentExecutor()\\n        internal\\n        view\\n        returns (\\n            address executor,\\n            uint256 executorIndex,\\n            uint256 remainingBlocksInSlot\\n        )\\n    {\\n        (executorIndex, remainingBlocksInSlot) = getCurrentExecutorIndex();\\n        executor = LibExecutor.executorAt(executorIndex);\\n    }\\n\\n    function mySlotStatus(uint256 _buffer) internal view returns (SlotStatus) {\\n        (uint256 executorIndex, uint256 remainingBlocksInSlot) =\\n            getCurrentExecutorIndex();\\n\\n        address executor = LibExecutor.executorAt(executorIndex);\\n\\n        if (msg.sender != executor) return SlotStatus.Closed;\\n\\n        return\\n            remainingBlocksInSlot <= _buffer\\n                ? SlotStatus.Closing\\n                : SlotStatus.Open;\\n    }\\n\\n    // Example: blocksPerSlot = 3, numberOfExecutors = 2\\n    //\\n    // Block number          0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | ...\\n    //                      ---------------------------------------------\\n    // slotIndex             0 | 0 | 0 | 1 | 1 | 1 | 2 | 2 | 2 | 3 | ...\\n    //                      ---------------------------------------------\\n    // executorIndex         0 | 0 | 0 | 1 | 1 | 1 | 0 | 0 | 0 | 1 | ...\\n    // remainingBlocksInSlot 2 | 1 | 0 | 2 | 1 | 0 | 2 | 1 | 0 | 2 | ...\\n    //\\n\\n    function calcExecutorIndex(\\n        uint256 _currentBlock,\\n        uint256 _blocksPerSlot,\\n        uint256 _numberOfExecutors\\n    )\\n        internal\\n        pure\\n        returns (uint256 executorIndex, uint256 remainingBlocksInSlot)\\n    {\\n        uint256 slotIndex = _currentBlock / _blocksPerSlot;\\n        return (\\n            slotIndex % _numberOfExecutors,\\n            (slotIndex + 1) * _blocksPerSlot - _currentBlock - 1\\n        );\\n    }\\n\\n    function concurrentExecStorage()\\n        internal\\n        pure\\n        returns (ConcurrentExecStorage storage ces)\\n    {\\n        bytes32 position = _CONCURRENT_EXEC_STORAGE_POSITION;\\n        assembly {\\n            ces.slot := position\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/diamond/libraries/LibExecutor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nimport {\\n    EnumerableSet\\n} from \\\"../../../vendor/openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\nlibrary LibExecutor {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    struct ExecutorStorage {\\n        EnumerableSet.AddressSet executors;\\n        uint256 gasMargin;\\n    }\\n\\n    bytes32 private constant _EXECUTOR_STORAGE_POSITION =\\n        keccak256(\\\"gelato.diamond.executor.storage\\\");\\n\\n    function addExecutor(address _executor) internal returns (bool) {\\n        return executorStorage().executors.add(_executor);\\n    }\\n\\n    function removeExecutor(address _executor) internal returns (bool) {\\n        return executorStorage().executors.remove(_executor);\\n    }\\n\\n    function setGasMargin(uint256 _gasMargin) internal {\\n        executorStorage().gasMargin = _gasMargin;\\n    }\\n\\n    function canExec(address _executor) internal view returns (bool) {\\n        return isExecutor(_executor);\\n    }\\n\\n    function isExecutor(address _executor) internal view returns (bool) {\\n        return executorStorage().executors.contains(_executor);\\n    }\\n\\n    function executorAt(uint256 _index) internal view returns (address) {\\n        return executorStorage().executors.at(_index);\\n    }\\n\\n    function executors() internal view returns (address[] memory executors_) {\\n        uint256 length = numberOfExecutors();\\n        executors_ = new address[](length);\\n        for (uint256 i; i < length; i++) executors_[i] = executorAt(i);\\n    }\\n\\n    function numberOfExecutors() internal view returns (uint256) {\\n        return executorStorage().executors.length();\\n    }\\n\\n    function gasMargin() internal view returns (uint256) {\\n        return executorStorage().gasMargin;\\n    }\\n\\n    function executorStorage()\\n        internal\\n        pure\\n        returns (ExecutorStorage storage es)\\n    {\\n        bytes32 position = _EXECUTOR_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/diamond/libraries/standard/LibDiamond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\n// https://github.com/mudgen/diamond-3/blob/b009cd08b7822bad727bbcc47aa1b50d8b50f7f0/contracts/libraries/LibDiamond.sol#L1\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport \\\"../../interfaces/standard/IDiamondCut.sol\\\";\\n\\n// Custom due to incorrect string casting (non UTF-8 formatted)\\nimport {GelatoBytes} from \\\"../../../../lib/GelatoBytes.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function isContractOwner(address _guy) internal view returns (bool) {\\n        return _guy == contractOwner();\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: Must be contract owner\\\"\\n        );\\n    }\\n\\n    event DiamondCut(\\n        IDiamondCut.FacetCut[] _diamondCut,\\n        address _init,\\n        bytes _calldata\\n    );\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (\\n            uint256 facetIndex;\\n            facetIndex < _diamondCut.length;\\n            facetIndex++\\n        ) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        // uint16 selectorCount = uint16(diamondStorage().selectors.length);\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        );\\n        uint16 selectorPosition =\\n            uint16(\\n                ds.facetFunctionSelectors[_facetAddress]\\n                    .functionSelectors\\n                    .length\\n            );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            enforceHasContractCode(\\n                _facetAddress,\\n                \\\"LibDiamondCut: New facet has no code\\\"\\n            );\\n            ds.facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition = uint16(ds.facetAddresses.length);\\n            ds.facetAddresses.push(_facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress =\\n                ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(\\n                oldFacetAddress == address(0),\\n                \\\"LibDiamondCut: Can't add function that already exists\\\"\\n            );\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(\\n                selector\\n            );\\n            ds.selectorToFacetAndPosition[selector]\\n                .facetAddress = _facetAddress;\\n            ds.selectorToFacetAndPosition[selector]\\n                .functionSelectorPosition = selectorPosition;\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        );\\n        uint16 selectorPosition =\\n            uint16(\\n                ds.facetFunctionSelectors[_facetAddress]\\n                    .functionSelectors\\n                    .length\\n            );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            enforceHasContractCode(\\n                _facetAddress,\\n                \\\"LibDiamondCut: New facet has no code\\\"\\n            );\\n            ds.facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition = uint16(ds.facetAddresses.length);\\n            ds.facetAddresses.push(_facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress =\\n                ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(\\n                oldFacetAddress != _facetAddress,\\n                \\\"LibDiamondCut: Can't replace function with same function\\\"\\n            );\\n            removeFunction(oldFacetAddress, selector);\\n            // add function\\n            ds.selectorToFacetAndPosition[selector]\\n                .functionSelectorPosition = selectorPosition;\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(\\n                selector\\n            );\\n            ds.selectorToFacetAndPosition[selector]\\n                .facetAddress = _facetAddress;\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(\\n            _facetAddress == address(0),\\n            \\\"LibDiamondCut: Remove facet address must be address(0)\\\"\\n        );\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress =\\n                ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function removeFunction(address _facetAddress, bytes4 _selector) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Can't remove function that doesn't exist\\\"\\n        );\\n        // an immutable function is a function defined directly in a diamond\\n        require(\\n            _facetAddress != address(this),\\n            \\\"LibDiamondCut: Can't remove immutable function\\\"\\n        );\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition =\\n            ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition =\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length -\\n                1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector =\\n                ds.facetFunctionSelectors[_facetAddress].functionSelectors[\\n                    lastSelectorPosition\\n                ];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[\\n                selectorPosition\\n            ] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector]\\n                .functionSelectorPosition = uint16(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition =\\n                ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress =\\n                    ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress]\\n                    .facetAddressPosition = uint16(facetAddressPosition);\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata)\\n        internal\\n    {\\n        if (_init == address(0)) {\\n            require(\\n                _calldata.length == 0,\\n                \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\"\\n            );\\n        } else {\\n            require(\\n                _calldata.length > 0,\\n                \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\"\\n            );\\n            if (_init != address(this)) {\\n                enforceHasContractCode(\\n                    _init,\\n                    \\\"LibDiamondCut: _init address has no code\\\"\\n                );\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    GelatoBytes.revertWithError(error, \\\"LibDiamondCut:_init:\\\");\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(\\n        address _contract,\\n        string memory _errorMessage\\n    ) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/gelato/IGelatoV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// solhint-disable\\npragma solidity >=0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport {\\n    Action,\\n    Provider,\\n    Task,\\n    DataFlow,\\n    TaskReceipt\\n} from \\\"@gelatonetwork/core/contracts/gelato_core/interfaces/IGelatoCore.sol\\\";\\n\\n// TaskSpec - Will be whitelised by providers and selected by users\\nstruct TaskSpec {\\n    IGelatoCondition[] conditions; // Address: optional AddressZero for self-conditional actions\\n    Action[] actions;\\n    uint256 gasPriceCeil;\\n}\\n\\ninterface IGelatoV1 {\\n    /// @notice API to query whether Task can be submitted successfully.\\n    /// @dev In submitTask the msg.sender must be the same as _userProxy here.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _userProxy The userProxy from which the task will be submitted.\\n    /// @param _task Selected provider, conditions, actions, expiry date of the task\\n    function canSubmitTask(\\n        address _userProxy,\\n        Provider calldata _provider,\\n        Task calldata _task,\\n        uint256 _expiryDate\\n    ) external view returns (string memory);\\n\\n    /// @notice API to submit a single Task.\\n    /// @dev You can let users submit multiple tasks at once by batching calls to this.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _task A Gelato Task object: provider, conditions, actions.\\n    /// @param _expiryDate From then on the task cannot be executed. 0 for infinity.\\n    function submitTask(\\n        Provider calldata _provider,\\n        Task calldata _task,\\n        uint256 _expiryDate\\n    ) external;\\n\\n    /// @notice A Gelato Task Cycle consists of 1 or more Tasks that automatically submit\\n    ///  the next one, after they have been executed.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _tasks This can be a single task or a sequence of tasks.\\n    /// @param _expiryDate  After this no task of the sequence can be executed any more.\\n    /// @param _cycles How many full cycles will be submitted\\n    function submitTaskCycle(\\n        Provider calldata _provider,\\n        Task[] calldata _tasks,\\n        uint256 _expiryDate,\\n        uint256 _cycles\\n    ) external;\\n\\n    /// @notice A Gelato Task Cycle consists of 1 or more Tasks that automatically submit\\n    ///  the next one, after they have been executed.\\n    /// @dev CAUTION: _sumOfRequestedTaskSubmits does not mean the number of cycles.\\n    /// @dev If _sumOfRequestedTaskSubmits = 1 && _tasks.length = 2, only the first task\\n    ///  would be submitted, but not the second\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _tasks This can be a single task or a sequence of tasks.\\n    /// @param _expiryDate  After this no task of the sequence can be executed any more.\\n    /// @param _sumOfRequestedTaskSubmits The TOTAL number of Task auto-submits\\n    ///  that should have occured once the cycle is complete:\\n    ///  _sumOfRequestedTaskSubmits = 0 => One Task will resubmit the next Task infinitly\\n    ///  _sumOfRequestedTaskSubmits = 1 => One Task will resubmit no other task\\n    ///  _sumOfRequestedTaskSubmits = 2 => One Task will resubmit 1 other task\\n    ///  ...\\n    function submitTaskChain(\\n        Provider calldata _provider,\\n        Task[] calldata _tasks,\\n        uint256 _expiryDate,\\n        uint256 _sumOfRequestedTaskSubmits\\n    ) external;\\n\\n    // ================  Exec Suite =========================\\n    /// @notice Off-chain API for executors to check, if a TaskReceipt is executable\\n    /// @dev GelatoCore checks this during execution, in order to safeguard the Conditions\\n    /// @param _TR TaskReceipt, consisting of user task, user proxy address and id\\n    /// @param _gasLimit Task.selfProviderGasLimit is used for SelfProviders. All other\\n    ///  Providers must use gelatoMaxGas. If the _gasLimit is used by an Executor and the\\n    ///  tx reverts, a refund is paid by the Provider and the TaskReceipt is annulated.\\n    /// @param _execTxGasPrice Must be used by Executors. Gas Price fed by gelatoCore's\\n    ///  Gas Price Oracle. Executors can query the current gelatoGasPrice from events.\\n    function canExec(\\n        TaskReceipt calldata _TR,\\n        uint256 _gasLimit,\\n        uint256 _execTxGasPrice\\n    ) external view returns (string memory);\\n\\n    /// @notice Executors call this when Conditions allow it to execute submitted Tasks.\\n    /// @dev Executors get rewarded for successful Execution. The Task remains open until\\n    ///   successfully executed, or when the execution failed, despite of gelatoMaxGas usage.\\n    ///   In the latter case Executors are refunded by the Task Provider.\\n    /// @param _TR TaskReceipt: id, userProxy, Task.\\n    function exec(TaskReceipt calldata _TR) external;\\n\\n    /// @notice Cancel task\\n    /// @dev Callable only by userProxy or selected provider\\n    /// @param _TR TaskReceipt: id, userProxy, Task.\\n    function cancelTask(TaskReceipt calldata _TR) external;\\n\\n    /// @notice Cancel multiple tasks at once\\n    /// @dev Callable only by userProxy or selected provider\\n    /// @param _taskReceipts TaskReceipts: id, userProxy, Task.\\n    function multiCancelTasks(TaskReceipt[] calldata _taskReceipts) external;\\n\\n    /// @notice Compute hash of task receipt\\n    /// @param _TR TaskReceipt, consisting of user task, user proxy address and id\\n    /// @return hash of taskReceipt\\n    function hashTaskReceipt(TaskReceipt calldata _TR)\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    // ================  Getters =========================\\n    /// @notice Returns the taskReceiptId of the last TaskReceipt submitted\\n    /// @return currentId currentId, last TaskReceiptId submitted\\n    function currentTaskReceiptId() external view returns (uint256);\\n\\n    /// @notice Returns computed taskReceipt hash, used to check for taskReceipt validity\\n    /// @param _taskReceiptId Id of taskReceipt emitted in submission event\\n    /// @return hash of taskReceipt\\n    function taskReceiptHash(uint256 _taskReceiptId)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    /// @notice Stake on Gelato to become a whitelisted executor\\n    /// @dev Msg.value has to be >= minExecutorStake\\n    function stakeExecutor() external payable;\\n\\n    /// @notice Unstake on Gelato to become de-whitelisted and withdraw minExecutorStake\\n    function unstakeExecutor() external;\\n\\n    /// @notice Re-assigns multiple providers to other executors\\n    /// @dev Executors must re-assign all providers before being able to unstake\\n    /// @param _providers List of providers to re-assign\\n    /// @param _newExecutor Address of new executor to assign providers to\\n    function multiReassignProviders(\\n        address[] calldata _providers,\\n        address _newExecutor\\n    ) external;\\n\\n    /// @notice Withdraw excess Execur Stake\\n    /// @dev Can only be called if executor is isExecutorMinStaked\\n    /// @param _withdrawAmount Amount to withdraw\\n    /// @return Amount that was actually withdrawn\\n    function withdrawExcessExecutorStake(uint256 _withdrawAmount)\\n        external\\n        returns (uint256);\\n\\n    // =========== GELATO PROVIDER APIs ==============\\n\\n    /// @notice Validation that checks whether Task Spec is being offered by the selected provider\\n    /// @dev Checked in submitTask(), unless provider == userProxy\\n    /// @param _provider Address of selected provider\\n    /// @param _taskSpec Task Spec\\n    /// @return Expected to return \\\"OK\\\"\\n    function isTaskSpecProvided(address _provider, TaskSpec calldata _taskSpec)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /// @notice Validates that provider has provider module whitelisted + conducts isProvided check in ProviderModule\\n    /// @dev Checked in submitTask() if provider == userProxy\\n    /// @param _userProxy userProxy passed by GelatoCore during submission and exec\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _task Task defined in IGelatoCore\\n    /// @return Expected to return \\\"OK\\\"\\n    function providerModuleChecks(\\n        address _userProxy,\\n        Provider calldata _provider,\\n        Task calldata _task\\n    ) external view returns (string memory);\\n\\n    /// @notice Validate if provider module and seleced TaskSpec is whitelisted by provider\\n    /// @dev Combines \\\"isTaskSpecProvided\\\" and providerModuleChecks\\n    /// @param _userProxy userProxy passed by GelatoCore during submission and exec\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _task Task defined in IGelatoCore\\n    /// @return res Expected to return \\\"OK\\\"\\n    function isTaskProvided(\\n        address _userProxy,\\n        Provider calldata _provider,\\n        Task calldata _task\\n    ) external view returns (string memory res);\\n\\n    /// @notice Validate if selected TaskSpec is whitelisted by provider and that current gelatoGasPrice is below GasPriceCeil\\n    /// @dev If gasPriceCeil is != 0, Task Spec is whitelisted\\n    /// @param _userProxy userProxy passed by GelatoCore during submission and exec\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _task Task defined in IGelatoCore\\n    /// @param _gelatoGasPrice Task Receipt defined in IGelatoCore\\n    /// @return res Expected to return \\\"OK\\\"\\n    function providerCanExec(\\n        address _userProxy,\\n        Provider calldata _provider,\\n        Task calldata _task,\\n        uint256 _gelatoGasPrice\\n    ) external view returns (string memory res);\\n\\n    // =========== PROVIDER STATE WRITE APIs ==============\\n    // Provider Funding\\n    /// @notice Deposit ETH as provider on Gelato\\n    /// @param _provider Address of provider who receives ETH deposit\\n    function provideFunds(address _provider) external payable;\\n\\n    /// @notice Withdraw provider funds from gelato\\n    /// @param _withdrawAmount Amount\\n    /// @return amount that will be withdrawn\\n    function unprovideFunds(uint256 _withdrawAmount) external returns (uint256);\\n\\n    /// @notice Assign executor as provider\\n    /// @param _executor Address of new executor\\n    function providerAssignsExecutor(address _executor) external;\\n\\n    /// @notice Assign executor as previous selected executor\\n    /// @param _provider Address of provider whose executor to change\\n    /// @param _newExecutor Address of new executor\\n    function executorAssignsExecutor(address _provider, address _newExecutor)\\n        external;\\n\\n    // (Un-)provide Task Spec\\n\\n    /// @notice Whitelist TaskSpecs (A combination of a Condition, Action(s) and a gasPriceCeil) that users can select from\\n    /// @dev If gasPriceCeil is == 0, Task Spec will be executed at any gas price (no ceil)\\n    /// @param _taskSpecs Task Receipt List defined in IGelatoCore\\n    function provideTaskSpecs(TaskSpec[] calldata _taskSpecs) external;\\n\\n    /// @notice De-whitelist TaskSpecs (A combination of a Condition, Action(s) and a gasPriceCeil) that users can select from\\n    /// @dev If gasPriceCeil was set to NO_CEIL, Input NO_CEIL constant as GasPriceCeil\\n    /// @param _taskSpecs Task Receipt List defined in IGelatoCore\\n    function unprovideTaskSpecs(TaskSpec[] calldata _taskSpecs) external;\\n\\n    /// @notice Update gasPriceCeil of selected Task Spec\\n    /// @param _taskSpecHash Result of hashTaskSpec()\\n    /// @param _gasPriceCeil New gas price ceil for Task Spec\\n    function setTaskSpecGasPriceCeil(\\n        bytes32 _taskSpecHash,\\n        uint256 _gasPriceCeil\\n    ) external;\\n\\n    // Provider Module\\n    /// @notice Whitelist new provider Module(s)\\n    /// @param _modules Addresses of the modules which will be called during providerModuleChecks()\\n    function addProviderModules(IGelatoProviderModule[] calldata _modules)\\n        external;\\n\\n    /// @notice De-Whitelist new provider Module(s)\\n    /// @param _modules Addresses of the modules which will be removed\\n    function removeProviderModules(IGelatoProviderModule[] calldata _modules)\\n        external;\\n\\n    // Batch (un-)provide\\n\\n    /// @notice Whitelist new executor, TaskSpec(s) and Module(s) in one tx\\n    /// @param _executor Address of new executor of provider\\n    /// @param _taskSpecs List of Task Spec which will be whitelisted by provider\\n    /// @param _modules List of module addresses which will be whitelisted by provider\\n    function multiProvide(\\n        address _executor,\\n        TaskSpec[] calldata _taskSpecs,\\n        IGelatoProviderModule[] calldata _modules\\n    ) external payable;\\n\\n    /// @notice De-Whitelist TaskSpec(s), Module(s) and withdraw funds from gelato in one tx\\n    /// @param _withdrawAmount Amount to withdraw from ProviderFunds\\n    /// @param _taskSpecs List of Task Spec which will be de-whitelisted by provider\\n    /// @param _modules List of module addresses which will be de-whitelisted by provider\\n    function multiUnprovide(\\n        uint256 _withdrawAmount,\\n        TaskSpec[] calldata _taskSpecs,\\n        IGelatoProviderModule[] calldata _modules\\n    ) external;\\n\\n    // =========== PROVIDER STATE READ APIs ==============\\n    // Provider Funding\\n\\n    /// @notice Get balance of provider\\n    /// @param _provider Address of provider\\n    /// @return Provider Balance\\n    function providerFunds(address _provider) external view returns (uint256);\\n\\n    /// @notice Get min stake required by all providers for executors to call exec\\n    /// @param _gelatoMaxGas Current gelatoMaxGas\\n    /// @param _gelatoGasPrice Current gelatoGasPrice\\n    /// @return How much provider balance is required for executor to submit exec tx\\n    function minExecProviderFunds(\\n        uint256 _gelatoMaxGas,\\n        uint256 _gelatoGasPrice\\n    ) external view returns (uint256);\\n\\n    /// @notice Check if provider has sufficient funds for executor to call exec\\n    /// @param _provider Address of provider\\n    /// @param _gelatoMaxGas Currentt gelatoMaxGas\\n    /// @param _gelatoGasPrice Current gelatoGasPrice\\n    /// @return Whether provider is liquid (true) or not (false)\\n    function isProviderLiquid(\\n        address _provider,\\n        uint256 _gelatoMaxGas,\\n        uint256 _gelatoGasPrice\\n    ) external view returns (bool);\\n\\n    // Executor Stake\\n\\n    /// @notice Get balance of executor\\n    /// @param _executor Address of executor\\n    /// @return Executor Balance\\n    function executorStake(address _executor) external view returns (uint256);\\n\\n    /// @notice Check if executor has sufficient stake on gelato\\n    /// @param _executor Address of provider\\n    /// @return Whether executor has sufficient stake (true) or not (false)\\n    function isExecutorMinStaked(address _executor)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @notice Get executor of provider\\n    /// @param _provider Address of provider\\n    /// @return Provider's executor\\n    function executorByProvider(address _provider)\\n        external\\n        view\\n        returns (address);\\n\\n    /// @notice Get num. of providers which haved assigned an executor\\n    /// @param _executor Address of executor\\n    /// @return Count of how many providers assigned the executor\\n    function executorProvidersCount(address _executor)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Check if executor has one or more providers assigned\\n    /// @param _executor Address of provider\\n    /// @return Where 1 or more providers have assigned the executor\\n    function isExecutorAssigned(address _executor) external view returns (bool);\\n\\n    // Task Spec and Gas Price Ceil\\n    /// @notice The maximum gas price the transaction will be executed with\\n    /// @param _provider Address of provider\\n    /// @param _taskSpecHash Hash of provider TaskSpec\\n    /// @return Max gas price an executor will execute the transaction with in wei\\n    function taskSpecGasPriceCeil(address _provider, bytes32 _taskSpecHash)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Returns the hash of the formatted TaskSpec.\\n    /// @dev The action.data field of each Action is stripped before hashing.\\n    /// @param _taskSpec TaskSpec\\n    /// @return keccak256 hash of encoded condition address and Action List\\n    function hashTaskSpec(TaskSpec calldata _taskSpec)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    /// @notice Constant used to specify the highest gas price available in the gelato system\\n    /// @dev Input 0 as gasPriceCeil and it will be assigned to NO_CEIL\\n    /// @return MAX_UINT\\n    function NO_CEIL() external pure returns (uint256);\\n\\n    // Providers' Module Getters\\n\\n    /// @notice Check if inputted module is whitelisted by provider\\n    /// @param _provider Address of provider\\n    /// @param _module Address of module\\n    /// @return true if it is whitelisted\\n    function isModuleProvided(address _provider, IGelatoProviderModule _module)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @notice Get all whitelisted provider modules from a given provider\\n    /// @param _provider Address of provider\\n    /// @return List of whitelisted provider modules\\n    function providerModules(address _provider)\\n        external\\n        view\\n        returns (IGelatoProviderModule[] memory);\\n\\n    // State Writing\\n\\n    /// @notice Assign new gas price oracle\\n    /// @dev Only callable by sysAdmin\\n    /// @param _newOracle Address of new oracle\\n    function setGelatoGasPriceOracle(address _newOracle) external;\\n\\n    /// @notice Assign new gas price oracle\\n    /// @dev Only callable by sysAdmin\\n    /// @param _requestData The encoded payload for the staticcall to the oracle.\\n    function setOracleRequestData(bytes calldata _requestData) external;\\n\\n    /// @notice Assign new maximum gas limit providers can consume in executionWrapper()\\n    /// @dev Only callable by sysAdmin\\n    /// @param _newMaxGas New maximum gas limit\\n    function setGelatoMaxGas(uint256 _newMaxGas) external;\\n\\n    /// @notice Assign new interal gas limit requirement for exec()\\n    /// @dev Only callable by sysAdmin\\n    /// @param _newRequirement New internal gas requirement\\n    function setInternalGasRequirement(uint256 _newRequirement) external;\\n\\n    /// @notice Assign new minimum executor stake\\n    /// @dev Only callable by sysAdmin\\n    /// @param _newMin New minimum executor stake\\n    function setMinExecutorStake(uint256 _newMin) external;\\n\\n    /// @notice Assign new success share for executors to receive after successful execution\\n    /// @dev Only callable by sysAdmin\\n    /// @param _percentage New % success share of total gas consumed\\n    function setExecutorSuccessShare(uint256 _percentage) external;\\n\\n    /// @notice Assign new success share for sysAdmin to receive after successful execution\\n    /// @dev Only callable by sysAdmin\\n    /// @param _percentage New % success share of total gas consumed\\n    function setSysAdminSuccessShare(uint256 _percentage) external;\\n\\n    /// @notice Withdraw sysAdmin funds\\n    /// @dev Only callable by sysAdmin\\n    /// @param _amount Amount to withdraw\\n    /// @param _to Address to receive the funds\\n    function withdrawSysAdminFunds(uint256 _amount, address payable _to)\\n        external\\n        returns (uint256);\\n\\n    // State Reading\\n    /// @notice Unaccounted tx overhead that will be refunded to executors\\n    function EXEC_TX_OVERHEAD() external pure returns (uint256);\\n\\n    /// @notice Addess of current Gelato Gas Price Oracle\\n    function gelatoGasPriceOracle() external view returns (address);\\n\\n    /// @notice Getter for oracleRequestData state variable\\n    function oracleRequestData() external view returns (bytes memory);\\n\\n    /// @notice Gas limit an executor has to submit to get refunded even if actions revert\\n    function gelatoMaxGas() external view returns (uint256);\\n\\n    /// @notice Internal gas limit requirements ti ensure executor payout\\n    function internalGasRequirement() external view returns (uint256);\\n\\n    /// @notice Minimum stake required from executors\\n    function minExecutorStake() external view returns (uint256);\\n\\n    /// @notice % Fee executors get as a reward for a successful execution\\n    function executorSuccessShare() external view returns (uint256);\\n\\n    /// @notice Total % Fee executors and sysAdmin collectively get as a reward for a successful execution\\n    /// @dev Saves a state read\\n    function totalSuccessShare() external view returns (uint256);\\n\\n    /// @notice Get total fee providers pay executors for a successful execution\\n    /// @param _gas Gas consumed by transaction\\n    /// @param _gasPrice Current gelato gas price\\n    function executorSuccessFee(uint256 _gas, uint256 _gasPrice)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice % Fee sysAdmin gets as a reward for a successful execution\\n    function sysAdminSuccessShare() external view returns (uint256);\\n\\n    /// @notice Get total fee providers pay sysAdmin for a successful execution\\n    /// @param _gas Gas consumed by transaction\\n    /// @param _gasPrice Current gelato gas price\\n    function sysAdminSuccessFee(uint256 _gas, uint256 _gasPrice)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Get sysAdminds funds\\n    function sysAdminFunds() external view returns (uint256);\\n}\\n\\n/// @title IGelatoCondition - solidity interface of GelatoConditionsStandard\\n/// @notice all the APIs of GelatoConditionsStandard\\n/// @dev all the APIs are implemented inside GelatoConditionsStandard\\ninterface IGelatoCondition {\\n    /// @notice GelatoCore calls this to verify securely the specified Condition securely\\n    /// @dev Be careful only to encode a Task's condition.data as is and not with the\\n    ///  \\\"ok\\\" selector or _taskReceiptId, since those two things are handled by GelatoCore.\\n    /// @param _taskReceiptId This is passed by GelatoCore so we can rely on it as a secure\\n    ///  source of Task identification.\\n    /// @param _conditionData This is the Condition.data field developers must encode their\\n    ///  Condition's specific parameters in.\\n    /// @param _cycleId For Tasks that are executed as part of a cycle.\\n    function ok(\\n        uint256 _taskReceiptId,\\n        bytes calldata _conditionData,\\n        uint256 _cycleId\\n    ) external view returns (string memory);\\n}\\n\\n/// @notice all the APIs and events of GelatoActionsStandard\\n/// @dev all the APIs are implemented inside GelatoActionsStandard\\ninterface IGelatoAction {\\n    /// @notice Providers can use this for pre-execution sanity checks, to prevent reverts.\\n    /// @dev GelatoCore checks this in canExec and passes the parameters.\\n    /// @param _taskReceiptId The id of the task from which all arguments are passed.\\n    /// @param _userProxy The userProxy of the task. Often address(this) for delegatecalls.\\n    /// @param _actionData The encoded payload to be used in the Action.\\n    /// @param _dataFlow The dataFlow of the Action.\\n    /// @param _value A special param for ETH sending Actions. If the Action sends ETH\\n    ///  in its Action function implementation, one should expect msg.value therein to be\\n    ///  equal to _value. So Providers can check in termsOk that a valid ETH value will\\n    ///  be used because they also have access to the same value when encoding the\\n    ///  execPayload on their ProviderModule.\\n    /// @param _cycleId For tasks that are part of a Cycle.\\n    /// @return Returns OK, if Task can be executed safely according to the Provider's\\n    ///  terms laid out in this function implementation.\\n    function termsOk(\\n        uint256 _taskReceiptId,\\n        address _userProxy,\\n        bytes calldata _actionData,\\n        DataFlow _dataFlow,\\n        uint256 _value,\\n        uint256 _cycleId\\n    ) external view returns (string memory);\\n}\\n\\ninterface IGelatoProviderModule {\\n    /// @notice Check if provider agrees to pay for inputted task receipt\\n    /// @dev Enables arbitrary checks by provider\\n    /// @param _userProxy The smart contract account of the user who submitted the Task.\\n    /// @param _provider The account of the Provider who uses the ProviderModule.\\n    /// @param _task Gelato Task to be executed.\\n    /// @return \\\"OK\\\" if provider agrees\\n    function isProvided(\\n        address _userProxy,\\n        address _provider,\\n        Task calldata _task\\n    ) external view returns (string memory);\\n\\n    /// @notice Convert action specific payload into proxy specific payload\\n    /// @dev Encoded multiple actions into a multisend\\n    /// @param _taskReceiptId Unique ID of Gelato Task to be executed.\\n    /// @param _userProxy The smart contract account of the user who submitted the Task.\\n    /// @param _provider The account of the Provider who uses the ProviderModule.\\n    /// @param _task Gelato Task to be executed.\\n    /// @param _cycleId For Tasks that form part of a cycle/chain.\\n    /// @return Encoded payload that will be used for low-level .call on user proxy\\n    /// @return checkReturndata if true, fwd returndata from userProxy.call to ProviderModule\\n    function execPayload(\\n        uint256 _taskReceiptId,\\n        address _userProxy,\\n        address _provider,\\n        Task calldata _task,\\n        uint256 _cycleId\\n    ) external view returns (bytes memory, bool checkReturndata);\\n\\n    /// @notice Called by GelatoCore.exec to verifiy that no revert happend on userProxy\\n    /// @dev If a caught revert is detected, this fn should revert with the detected error\\n    /// @param _proxyReturndata Data from GelatoCore._exec.userProxy.call(execPayload)\\n    function execRevertCheck(bytes calldata _proxyReturndata) external pure;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/GelatoBytes.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity 0.8.0;\\n\\nlibrary GelatoBytes {\\n    function calldataSliceSelector(bytes calldata _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function memorySliceSelector(bytes memory _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function revertWithError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                revert(string(abi.encodePacked(_tracingInfo, string(_bytes))));\\n            } else {\\n                revert(\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"))\\n                );\\n            }\\n        } else {\\n            revert(\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"))\\n            );\\n        }\\n    }\\n\\n    function returnError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                return string(abi.encodePacked(_tracingInfo, string(_bytes)));\\n            } else {\\n                return\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"));\\n            }\\n        } else {\\n            return\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"));\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/GelatoString.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity 0.8.0;\\n\\nlibrary GelatoString {\\n    function startsWithOK(string memory _str) internal pure returns (bool) {\\n        if (\\n            bytes(_str).length >= 2 &&\\n            bytes(_str)[0] == \\\"O\\\" &&\\n            bytes(_str)[1] == \\\"K\\\"\\n        ) return true;\\n        return false;\\n    }\\n\\n    function revertWithInfo(string memory _error, string memory _tracingInfo)\\n        internal\\n        pure\\n    {\\n        revert(string(abi.encodePacked(_tracingInfo, _error)));\\n    }\\n\\n    function prefix(string memory _second, string memory _first)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string(abi.encodePacked(_first, _second));\\n    }\\n\\n    function suffix(string memory _first, string memory _second)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string(abi.encodePacked(_first, _second));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/vendor/openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) =\\n            target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/vendor/openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        require(\\n            set._values.length > index,\\n            \\\"EnumerableSet: index out of bounds\\\"\\n        );\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userProxy\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"contract IGelatoProviderModule\",\"name\":\"module\",\"type\":\"address\"}],\"internalType\":\"struct Provider\",\"name\":\"provider\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"contract IGelatoCondition\",\"name\":\"inst\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Condition[]\",\"name\":\"conditions\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"enum DataFlow\",\"name\":\"dataFlow\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"termsOkCheck\",\"type\":\"bool\"}],\"internalType\":\"struct Action[]\",\"name\":\"actions\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"selfProviderGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfProviderGasPriceCeil\",\"type\":\"uint256\"}],\"internalType\":\"struct Task[]\",\"name\":\"tasks\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"expiryDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"submissionsLeft\",\"type\":\"uint256\"}],\"internalType\":\"struct TaskReceipt\",\"name\":\"_taskReceipt\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_gelatoMaxGas\",\"type\":\"uint256\"}],\"name\":\"getGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IGelatoV1\",\"name\":\"_gelatoCore\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_providers\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_newExecutor\",\"type\":\"address\"}],\"name\":\"multiReassignProviders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IGelatoV1\",\"name\":\"_gelatoCore\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"providerRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IGelatoV1\",\"name\":\"_gelatoCore\",\"type\":\"address\"}],\"name\":\"stakeExecutor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IGelatoV1\",\"name\":\"_gelatoCore\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"unstakeExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gelatoCore\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userProxy\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"contract IGelatoProviderModule\",\"name\":\"module\",\"type\":\"address\"}],\"internalType\":\"struct Provider\",\"name\":\"provider\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"contract IGelatoCondition\",\"name\":\"inst\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Condition[]\",\"name\":\"conditions\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"enum DataFlow\",\"name\":\"dataFlow\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"termsOkCheck\",\"type\":\"bool\"}],\"internalType\":\"struct Action[]\",\"name\":\"actions\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"selfProviderGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfProviderGasPriceCeil\",\"type\":\"uint256\"}],\"internalType\":\"struct Task[]\",\"name\":\"tasks\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"expiryDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"submissionsLeft\",\"type\":\"uint256\"}],\"internalType\":\"struct TaskReceipt[]\",\"name\":\"_taskReceipts\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_gelatoGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buffer\",\"type\":\"uint256\"}],\"name\":\"v1ConcurrentMultiCanExec\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canExecRes\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"taskReceiptId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taskGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"response\",\"type\":\"string\"}],\"internalType\":\"struct GelatoV1Facet.Response[]\",\"name\":\"responses\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gelatoCore\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userProxy\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"contract IGelatoProviderModule\",\"name\":\"module\",\"type\":\"address\"}],\"internalType\":\"struct Provider\",\"name\":\"provider\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"contract IGelatoCondition\",\"name\":\"inst\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Condition[]\",\"name\":\"conditions\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"enum DataFlow\",\"name\":\"dataFlow\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"termsOkCheck\",\"type\":\"bool\"}],\"internalType\":\"struct Action[]\",\"name\":\"actions\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"selfProviderGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfProviderGasPriceCeil\",\"type\":\"uint256\"}],\"internalType\":\"struct Task[]\",\"name\":\"tasks\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"expiryDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"submissionsLeft\",\"type\":\"uint256\"}],\"internalType\":\"struct TaskReceipt[]\",\"name\":\"_taskReceipts\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_gelatoGasPrice\",\"type\":\"uint256\"}],\"name\":\"v1MultiCanExec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"taskReceiptId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taskGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"response\",\"type\":\"string\"}],\"internalType\":\"struct GelatoV1Facet.Response[]\",\"name\":\"responses\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IGelatoV1\",\"name\":\"_gelatoCore\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawExcessExecutorStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GelatoV1Facet","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}