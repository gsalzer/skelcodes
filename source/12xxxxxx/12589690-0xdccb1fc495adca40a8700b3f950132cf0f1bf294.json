{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.6.8;\r\n\r\ninterface IENS {\r\n    function owner(bytes32 _node) external view returns (address);\r\n}\r\n\r\n/**\r\n * @title PublicationRoles\r\n * @author MirrorXYZ\r\n */\r\ncontract PublicationRoles {\r\n    // Immutable data\r\n    address public immutable ens;\r\n\r\n    // Mutable data\r\n\r\n    // A flat mapping of the hash of the ENS node with the contributor\r\n    // address to the hash of the role.\r\n    mapping(bytes32 => bytes32) public roles;\r\n\r\n    // Modifiers\r\n\r\n    modifier onlyPublicationOwner(bytes32 publicationNode) {\r\n        require(\r\n            ownsPublication(publicationNode, msg.sender),\r\n            \"Sender must be publication owner\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    // Events\r\n    event ModifiedRole(\r\n        bytes32 indexed publicationNode,\r\n        address indexed contributor,\r\n        string roleName\r\n    );\r\n\r\n    // Constructor\r\n\r\n    constructor(address ens_) public {\r\n        ens = ens_;\r\n    }\r\n\r\n    // Modifies data.\r\n\r\n    function modifyRole(\r\n        address contributor,\r\n        // sha256(dev.mirror.xyz)\r\n        bytes32 publicationNode,\r\n        string calldata roleName\r\n    ) external onlyPublicationOwner(publicationNode) {\r\n        bytes32 role = encodeRole(roleName);\r\n        roles[getContributorId(contributor, publicationNode)] = role;\r\n\r\n        emit ModifiedRole(publicationNode, contributor, roleName);\r\n    }\r\n\r\n    function getContributorId(\r\n        address contributor,\r\n        // sha256(dev.mirror.xyz)\r\n        bytes32 publicationNode\r\n    ) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(contributor, publicationNode));\r\n    }\r\n\r\n    function getRole(address contributor, bytes32 publicationNode)\r\n        external\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return roles[getContributorId(contributor, publicationNode)];\r\n    }\r\n\r\n    // Convenient for encoding roles consistently.\r\n    function encodeRole(string memory roleName) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(roleName));\r\n    }\r\n\r\n    function ownsPublication(bytes32 publicationNode, address account)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return publicationOwner(publicationNode) == account;\r\n    }\r\n\r\n    function publicationOwner(bytes32 publicationNode)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return IENS(ens).owner(publicationNode);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ens_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"publicationNode\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"ModifiedRole\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"encodeRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"publicationNode\",\"type\":\"bytes32\"}],\"name\":\"getContributorId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"publicationNode\",\"type\":\"bytes32\"}],\"name\":\"getRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"publicationNode\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"modifyRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"publicationNode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ownsPublication\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"publicationNode\",\"type\":\"bytes32\"}],\"name\":\"publicationOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PublicationRoles","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"00000000000000000000000000000000000c2e074ec69a0dfb2997ba6c7d2e1e","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://98819d7d044aa1c4f829b120264940ccdfd6e1c79baa404d1af4bbc32e0e7d7b"}]}