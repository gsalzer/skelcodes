{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/dependencies/open-zeppelin/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/open-zeppelin/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport './Context.sol';\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n  address private _owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor() {\\n    address msgSender = _msgSender();\\n    _owner = msgSender;\\n    emit OwnershipTransferred(address(0), msgSender);\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(_owner == _msgSender(), 'Ownable: caller is not the owner');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    emit OwnershipTransferred(_owner, address(0));\\n    _owner = address(0);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/misc/StarkExRemoverGovernorV2.sol\": {\r\n      \"content\": \"// Contracts by dYdX Foundation. Individual files are released under different licenses.\\n//\\n// https://dydx.community\\n// https://github.com/dydxfoundation/governance-contracts\\n//\\n// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport { Ownable } from '../dependencies/open-zeppelin/Ownable.sol';\\nimport { IStarkPerpetual } from '../interfaces/IStarkPerpetual.sol';\\n\\n/**\\n * @title StarkExRemoverGovernorV2\\n * @author dYdX\\n *\\n * @notice This is a StarkEx governor contract whose sole purpose is to remove other governors.\\n *\\n *  This contract can be nominated by a StarkEx governor in order to allow themselves to be removed\\n *  “automatically” from the governor role. The governor should nominate this contract to the main\\n *  and proxy governor roles, while ensuring that the MAIN_GOVERNORS_TO_REMOVE and\\n *  PROXY_GOVERNORS_TO_REMOVE values are correctly set.\\n */\\ncontract StarkExRemoverGovernorV2 is\\n  Ownable\\n{\\n  IStarkPerpetual public immutable STARK_PERPETUAL;\\n  address[] public MAIN_GOVERNORS_TO_REMOVE;\\n  address[] public PROXY_GOVERNORS_TO_REMOVE;\\n\\n  constructor(\\n    address starkPerpetual,\\n    address[] memory mainGovernorsToRemove,\\n    address[] memory proxyGovernorsToRemove\\n  ) {\\n    STARK_PERPETUAL = IStarkPerpetual(starkPerpetual);\\n    MAIN_GOVERNORS_TO_REMOVE = mainGovernorsToRemove;\\n    PROXY_GOVERNORS_TO_REMOVE = proxyGovernorsToRemove;\\n  }\\n\\n  function mainAcceptGovernance()\\n    external\\n    onlyOwner\\n  {\\n    STARK_PERPETUAL.mainAcceptGovernance();\\n  }\\n\\n  function proxyAcceptGovernance()\\n    external\\n    onlyOwner\\n  {\\n    STARK_PERPETUAL.proxyAcceptGovernance();\\n  }\\n\\n  function mainRemoveGovernor(\\n    uint256 i\\n  )\\n    external\\n    onlyOwner\\n  {\\n    STARK_PERPETUAL.mainRemoveGovernor(MAIN_GOVERNORS_TO_REMOVE[i]);\\n  }\\n\\n  function proxyRemoveGovernor(\\n    uint256 i\\n  )\\n    external\\n    onlyOwner\\n  {\\n    STARK_PERPETUAL.proxyRemoveGovernor(PROXY_GOVERNORS_TO_REMOVE[i]);\\n  }\\n\\n  function numMainGovernorsToRemove()\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return MAIN_GOVERNORS_TO_REMOVE.length;\\n  }\\n\\n  function numProxyGovernorsToRemove()\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return PROXY_GOVERNORS_TO_REMOVE.length;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStarkPerpetual.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\n/**\\n * @title IStarkPerpetual\\n * @author dYdX\\n *\\n * @notice Partial interface for the StarkPerpetual contract, for accessing the dYdX L2 exchange.\\n * @dev See https://github.com/starkware-libs/starkex-contracts\\n */\\ninterface IStarkPerpetual {\\n\\n  function registerUser(\\n    address ethKey,\\n    uint256 starkKey,\\n    bytes calldata signature\\n  ) external;\\n\\n  function deposit(\\n    uint256 starkKey,\\n    uint256 assetType,\\n    uint256 vaultId,\\n    uint256 quantizedAmount\\n  ) external;\\n\\n  function withdraw(uint256 starkKey, uint256 assetType) external;\\n\\n  function forcedWithdrawalRequest(\\n    uint256 starkKey,\\n    uint256 vaultId,\\n    uint256 quantizedAmount,\\n    bool premiumCost\\n  ) external;\\n\\n  function forcedTradeRequest(\\n    uint256 starkKeyA,\\n    uint256 starkKeyB,\\n    uint256 vaultIdA,\\n    uint256 vaultIdB,\\n    uint256 collateralAssetId,\\n    uint256 syntheticAssetId,\\n    uint256 amountCollateral,\\n    uint256 amountSynthetic,\\n    bool aIsBuyingSynthetic,\\n    uint256 submissionExpirationTime,\\n    uint256 nonce,\\n    bytes calldata signature,\\n    bool premiumCost\\n  ) external;\\n\\n  function mainAcceptGovernance() external;\\n  function proxyAcceptGovernance() external;\\n\\n  function mainRemoveGovernor(address governorForRemoval) external;\\n  function proxyRemoveGovernor(address governorForRemoval) external;\\n\\n  function registerAssetConfigurationChange(uint256 assetId, bytes32 configHash) external;\\n  function applyAssetConfigurationChange(uint256 assetId, bytes32 configHash) external;\\n\\n  function registerGlobalConfigurationChange(bytes32 configHash) external;\\n  function applyGlobalConfigurationChange(bytes32 configHash) external;\\n\\n  function getEthKey(uint256 starkKey) external view returns (address);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"starkPerpetual\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"mainGovernorsToRemove\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"proxyGovernorsToRemove\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MAIN_GOVERNORS_TO_REMOVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PROXY_GOVERNORS_TO_REMOVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STARK_PERPETUAL\",\"outputs\":[{\"internalType\":\"contract IStarkPerpetual\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainAcceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"mainRemoveGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numMainGovernorsToRemove\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numProxyGovernorsToRemove\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyAcceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"proxyRemoveGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StarkExRemoverGovernorV2","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d54f502e184b6b739d7d27a6410a67dc462d69c8000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000047fb811be111f2f0df7dff81effe890da6d740800000000000000000000000000000000000000000000000000000000000000001000000000000000000000000dc7ebbc857ad2d276c387100db67c1041da0b2c0","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}